
LoRa_Node_151_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a20  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08012b60  08012b60  00022b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013278  08013278  000300f8  2**0
                  CONTENTS
  4 .ARM          00000008  08013278  08013278  00023278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013280  08013280  000300f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013280  08013280  00023280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013284  08013284  00023284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08013288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a0  200000f8  08013380  000300f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08013380  00031498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003feb3  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067b2  00000000  00000000  0006ffd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00076788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00078150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe98  00000000  00000000  000798e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023291  00000000  00000000  00099778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ec1  00000000  00000000  000bca09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e8ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  0015e920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f8 	.word	0x200000f8
 800015c:	00000000 	.word	0x00000000
 8000160:	08012b48 	.word	0x08012b48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000fc 	.word	0x200000fc
 800017c:	08012b48 	.word	0x08012b48

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	bf28      	it	cs
 8000b78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b7c:	d2ed      	bcs.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_fmul>:
 8000cd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce0:	bf1e      	ittt	ne
 8000ce2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce6:	ea92 0f0c 	teqne	r2, ip
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d06f      	beq.n	8000dd0 <__aeabi_fmul+0xf8>
 8000cf0:	441a      	add	r2, r3
 8000cf2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf6:	0240      	lsls	r0, r0, #9
 8000cf8:	bf18      	it	ne
 8000cfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfe:	d01e      	beq.n	8000d3e <__aeabi_fmul+0x66>
 8000d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d18:	bf3e      	ittt	cc
 8000d1a:	0049      	lslcc	r1, r1, #1
 8000d1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d20:	005b      	lslcc	r3, r3, #1
 8000d22:	ea40 0001 	orr.w	r0, r0, r1
 8000d26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2a:	2afd      	cmp	r2, #253	; 0xfd
 8000d2c:	d81d      	bhi.n	8000d6a <__aeabi_fmul+0x92>
 8000d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d46:	bf08      	it	eq
 8000d48:	0249      	lsleq	r1, r1, #9
 8000d4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d52:	3a7f      	subs	r2, #127	; 0x7f
 8000d54:	bfc2      	ittt	gt
 8000d56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5e:	4770      	bxgt	lr
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	dc5d      	bgt.n	8000e28 <__aeabi_fmul+0x150>
 8000d6c:	f112 0f19 	cmn.w	r2, #25
 8000d70:	bfdc      	itt	le
 8000d72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d76:	4770      	bxle	lr
 8000d78:	f1c2 0200 	rsb	r2, r2, #0
 8000d7c:	0041      	lsls	r1, r0, #1
 8000d7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d82:	f1c2 0220 	rsb	r2, r2, #32
 8000d86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8e:	f140 0000 	adc.w	r0, r0, #0
 8000d92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d96:	bf08      	it	eq
 8000d98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9c:	4770      	bx	lr
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0040      	lsleq	r0, r0, #1
 8000daa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dae:	3a01      	subeq	r2, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fmul+0xce>
 8000db2:	ea40 000c 	orr.w	r0, r0, ip
 8000db6:	f093 0f00 	teq	r3, #0
 8000dba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0049      	lsleq	r1, r1, #1
 8000dc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc6:	3b01      	subeq	r3, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fmul+0xe6>
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	e78f      	b.n	8000cf0 <__aeabi_fmul+0x18>
 8000dd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	bf18      	it	ne
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d00a      	beq.n	8000df6 <__aeabi_fmul+0x11e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1d8      	bne.n	8000d9e <__aeabi_fmul+0xc6>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	bf17      	itett	ne
 8000dfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e00:	4608      	moveq	r0, r1
 8000e02:	f091 0f00 	teqne	r1, #0
 8000e06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0a:	d014      	beq.n	8000e36 <__aeabi_fmul+0x15e>
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fmul+0x13e>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	d10f      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e16:	ea93 0f0c 	teq	r3, ip
 8000e1a:	d103      	bne.n	8000e24 <__aeabi_fmul+0x14c>
 8000e1c:	024b      	lsls	r3, r1, #9
 8000e1e:	bf18      	it	ne
 8000e20:	4608      	movne	r0, r1
 8000e22:	d108      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e24:	ea80 0001 	eor.w	r0, r0, r1
 8000e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e34:	4770      	bx	lr
 8000e36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_fdiv>:
 8000e40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e48:	bf1e      	ittt	ne
 8000e4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4e:	ea92 0f0c 	teqne	r2, ip
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d069      	beq.n	8000f2c <__aeabi_fdiv+0xec>
 8000e58:	eba2 0203 	sub.w	r2, r2, r3
 8000e5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e66:	d037      	beq.n	8000ed8 <__aeabi_fdiv+0x98>
 8000e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf38      	it	cc
 8000e7c:	005b      	lslcc	r3, r3, #1
 8000e7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e86:	428b      	cmp	r3, r1
 8000e88:	bf24      	itt	cs
 8000e8a:	1a5b      	subcs	r3, r3, r1
 8000e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e94:	bf24      	itt	cs
 8000e96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea2:	bf24      	itt	cs
 8000ea4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	bf18      	it	ne
 8000ebe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec2:	d1e0      	bne.n	8000e86 <__aeabi_fdiv+0x46>
 8000ec4:	2afd      	cmp	r2, #253	; 0xfd
 8000ec6:	f63f af50 	bhi.w	8000d6a <__aeabi_fmul+0x92>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed0:	bf08      	it	eq
 8000ed2:	f020 0001 	biceq.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000edc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee0:	327f      	adds	r2, #127	; 0x7f
 8000ee2:	bfc2      	ittt	gt
 8000ee4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eec:	4770      	bxgt	lr
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	e737      	b.n	8000d6a <__aeabi_fmul+0x92>
 8000efa:	f092 0f00 	teq	r2, #0
 8000efe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0040      	lsleq	r0, r0, #1
 8000f06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0a:	3a01      	subeq	r2, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fdiv+0xc2>
 8000f0e:	ea40 000c 	orr.w	r0, r0, ip
 8000f12:	f093 0f00 	teq	r3, #0
 8000f16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0049      	lsleq	r1, r1, #1
 8000f1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f22:	3b01      	subeq	r3, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fdiv+0xda>
 8000f26:	ea41 010c 	orr.w	r1, r1, ip
 8000f2a:	e795      	b.n	8000e58 <__aeabi_fdiv+0x18>
 8000f2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d108      	bne.n	8000f48 <__aeabi_fdiv+0x108>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	f47f af7d 	bne.w	8000e36 <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	f47f af70 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e776      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	d104      	bne.n	8000f58 <__aeabi_fdiv+0x118>
 8000f4e:	024b      	lsls	r3, r1, #9
 8000f50:	f43f af4c 	beq.w	8000dec <__aeabi_fmul+0x114>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e76e      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f5c:	bf18      	it	ne
 8000f5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	d1ca      	bne.n	8000efa <__aeabi_fdiv+0xba>
 8000f64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f68:	f47f af5c 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	f47f af3c 	bne.w	8000dec <__aeabi_fmul+0x114>
 8000f74:	e75f      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f76:	bf00      	nop

08000f78 <__aeabi_uldivmod>:
 8000f78:	b953      	cbnz	r3, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7a:	b94a      	cbnz	r2, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7c:	2900      	cmp	r1, #0
 8000f7e:	bf08      	it	eq
 8000f80:	2800      	cmpeq	r0, #0
 8000f82:	bf1c      	itt	ne
 8000f84:	f04f 31ff 	movne.w	r1, #4294967295
 8000f88:	f04f 30ff 	movne.w	r0, #4294967295
 8000f8c:	f000 b96e 	b.w	800126c <__aeabi_idiv0>
 8000f90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f98:	f000 f806 	bl	8000fa8 <__udivmoddi4>
 8000f9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa4:	b004      	add	sp, #16
 8000fa6:	4770      	bx	lr

08000fa8 <__udivmoddi4>:
 8000fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fac:	9e08      	ldr	r6, [sp, #32]
 8000fae:	460d      	mov	r5, r1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	468e      	mov	lr, r1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 8083 	bne.w	80010c0 <__udivmoddi4+0x118>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	4617      	mov	r7, r2
 8000fbe:	d947      	bls.n	8001050 <__udivmoddi4+0xa8>
 8000fc0:	fab2 f382 	clz	r3, r2
 8000fc4:	b14b      	cbz	r3, 8000fda <__udivmoddi4+0x32>
 8000fc6:	f1c3 0120 	rsb	r1, r3, #32
 8000fca:	fa05 fe03 	lsl.w	lr, r5, r3
 8000fce:	fa20 f101 	lsr.w	r1, r0, r1
 8000fd2:	409f      	lsls	r7, r3
 8000fd4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000fde:	fbbe fcf8 	udiv	ip, lr, r8
 8000fe2:	fa1f f987 	uxth.w	r9, r7
 8000fe6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000fea:	fb0c f009 	mul.w	r0, ip, r9
 8000fee:	0c21      	lsrs	r1, r4, #16
 8000ff0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ff4:	4290      	cmp	r0, r2
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x66>
 8000ff8:	18ba      	adds	r2, r7, r2
 8000ffa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000ffe:	f080 8118 	bcs.w	8001232 <__udivmoddi4+0x28a>
 8001002:	4290      	cmp	r0, r2
 8001004:	f240 8115 	bls.w	8001232 <__udivmoddi4+0x28a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	443a      	add	r2, r7
 800100e:	1a12      	subs	r2, r2, r0
 8001010:	fbb2 f0f8 	udiv	r0, r2, r8
 8001014:	fb08 2210 	mls	r2, r8, r0, r2
 8001018:	fb00 f109 	mul.w	r1, r0, r9
 800101c:	b2a4      	uxth	r4, r4
 800101e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001022:	42a1      	cmp	r1, r4
 8001024:	d909      	bls.n	800103a <__udivmoddi4+0x92>
 8001026:	193c      	adds	r4, r7, r4
 8001028:	f100 32ff 	add.w	r2, r0, #4294967295
 800102c:	f080 8103 	bcs.w	8001236 <__udivmoddi4+0x28e>
 8001030:	42a1      	cmp	r1, r4
 8001032:	f240 8100 	bls.w	8001236 <__udivmoddi4+0x28e>
 8001036:	3802      	subs	r0, #2
 8001038:	443c      	add	r4, r7
 800103a:	1a64      	subs	r4, r4, r1
 800103c:	2100      	movs	r1, #0
 800103e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001042:	b11e      	cbz	r6, 800104c <__udivmoddi4+0xa4>
 8001044:	2200      	movs	r2, #0
 8001046:	40dc      	lsrs	r4, r3
 8001048:	e9c6 4200 	strd	r4, r2, [r6]
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	b902      	cbnz	r2, 8001054 <__udivmoddi4+0xac>
 8001052:	deff      	udf	#255	; 0xff
 8001054:	fab2 f382 	clz	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d14f      	bne.n	80010fc <__udivmoddi4+0x154>
 800105c:	1a8d      	subs	r5, r1, r2
 800105e:	2101      	movs	r1, #1
 8001060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001064:	fa1f f882 	uxth.w	r8, r2
 8001068:	fbb5 fcfe 	udiv	ip, r5, lr
 800106c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001070:	fb08 f00c 	mul.w	r0, r8, ip
 8001074:	0c22      	lsrs	r2, r4, #16
 8001076:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800107a:	42a8      	cmp	r0, r5
 800107c:	d907      	bls.n	800108e <__udivmoddi4+0xe6>
 800107e:	197d      	adds	r5, r7, r5
 8001080:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001084:	d202      	bcs.n	800108c <__udivmoddi4+0xe4>
 8001086:	42a8      	cmp	r0, r5
 8001088:	f200 80e9 	bhi.w	800125e <__udivmoddi4+0x2b6>
 800108c:	4694      	mov	ip, r2
 800108e:	1a2d      	subs	r5, r5, r0
 8001090:	fbb5 f0fe 	udiv	r0, r5, lr
 8001094:	fb0e 5510 	mls	r5, lr, r0, r5
 8001098:	fb08 f800 	mul.w	r8, r8, r0
 800109c:	b2a4      	uxth	r4, r4
 800109e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010a2:	45a0      	cmp	r8, r4
 80010a4:	d907      	bls.n	80010b6 <__udivmoddi4+0x10e>
 80010a6:	193c      	adds	r4, r7, r4
 80010a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80010ac:	d202      	bcs.n	80010b4 <__udivmoddi4+0x10c>
 80010ae:	45a0      	cmp	r8, r4
 80010b0:	f200 80d9 	bhi.w	8001266 <__udivmoddi4+0x2be>
 80010b4:	4610      	mov	r0, r2
 80010b6:	eba4 0408 	sub.w	r4, r4, r8
 80010ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010be:	e7c0      	b.n	8001042 <__udivmoddi4+0x9a>
 80010c0:	428b      	cmp	r3, r1
 80010c2:	d908      	bls.n	80010d6 <__udivmoddi4+0x12e>
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	f000 80b1 	beq.w	800122c <__udivmoddi4+0x284>
 80010ca:	2100      	movs	r1, #0
 80010cc:	e9c6 0500 	strd	r0, r5, [r6]
 80010d0:	4608      	mov	r0, r1
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d14b      	bne.n	8001176 <__udivmoddi4+0x1ce>
 80010de:	42ab      	cmp	r3, r5
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0x140>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 80b9 	bhi.w	800125a <__udivmoddi4+0x2b2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb65 0303 	sbc.w	r3, r5, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	469e      	mov	lr, r3
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d0aa      	beq.n	800104c <__udivmoddi4+0xa4>
 80010f6:	e9c6 4e00 	strd	r4, lr, [r6]
 80010fa:	e7a7      	b.n	800104c <__udivmoddi4+0xa4>
 80010fc:	409f      	lsls	r7, r3
 80010fe:	f1c3 0220 	rsb	r2, r3, #32
 8001102:	40d1      	lsrs	r1, r2
 8001104:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001108:	fbb1 f0fe 	udiv	r0, r1, lr
 800110c:	fa1f f887 	uxth.w	r8, r7
 8001110:	fb0e 1110 	mls	r1, lr, r0, r1
 8001114:	fa24 f202 	lsr.w	r2, r4, r2
 8001118:	409d      	lsls	r5, r3
 800111a:	fb00 fc08 	mul.w	ip, r0, r8
 800111e:	432a      	orrs	r2, r5
 8001120:	0c15      	lsrs	r5, r2, #16
 8001122:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001126:	45ac      	cmp	ip, r5
 8001128:	fa04 f403 	lsl.w	r4, r4, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x19a>
 800112e:	197d      	adds	r5, r7, r5
 8001130:	f100 31ff 	add.w	r1, r0, #4294967295
 8001134:	f080 808f 	bcs.w	8001256 <__udivmoddi4+0x2ae>
 8001138:	45ac      	cmp	ip, r5
 800113a:	f240 808c 	bls.w	8001256 <__udivmoddi4+0x2ae>
 800113e:	3802      	subs	r0, #2
 8001140:	443d      	add	r5, r7
 8001142:	eba5 050c 	sub.w	r5, r5, ip
 8001146:	fbb5 f1fe 	udiv	r1, r5, lr
 800114a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800114e:	fb01 f908 	mul.w	r9, r1, r8
 8001152:	b295      	uxth	r5, r2
 8001154:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001158:	45a9      	cmp	r9, r5
 800115a:	d907      	bls.n	800116c <__udivmoddi4+0x1c4>
 800115c:	197d      	adds	r5, r7, r5
 800115e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001162:	d274      	bcs.n	800124e <__udivmoddi4+0x2a6>
 8001164:	45a9      	cmp	r9, r5
 8001166:	d972      	bls.n	800124e <__udivmoddi4+0x2a6>
 8001168:	3902      	subs	r1, #2
 800116a:	443d      	add	r5, r7
 800116c:	eba5 0509 	sub.w	r5, r5, r9
 8001170:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001174:	e778      	b.n	8001068 <__udivmoddi4+0xc0>
 8001176:	f1c1 0720 	rsb	r7, r1, #32
 800117a:	408b      	lsls	r3, r1
 800117c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001180:	ea4c 0c03 	orr.w	ip, ip, r3
 8001184:	fa25 f407 	lsr.w	r4, r5, r7
 8001188:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800118c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001190:	fa1f f88c 	uxth.w	r8, ip
 8001194:	fb0e 4419 	mls	r4, lr, r9, r4
 8001198:	fa20 f307 	lsr.w	r3, r0, r7
 800119c:	fb09 fa08 	mul.w	sl, r9, r8
 80011a0:	408d      	lsls	r5, r1
 80011a2:	431d      	orrs	r5, r3
 80011a4:	0c2b      	lsrs	r3, r5, #16
 80011a6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011aa:	45a2      	cmp	sl, r4
 80011ac:	fa02 f201 	lsl.w	r2, r2, r1
 80011b0:	fa00 f301 	lsl.w	r3, r0, r1
 80011b4:	d909      	bls.n	80011ca <__udivmoddi4+0x222>
 80011b6:	eb1c 0404 	adds.w	r4, ip, r4
 80011ba:	f109 30ff 	add.w	r0, r9, #4294967295
 80011be:	d248      	bcs.n	8001252 <__udivmoddi4+0x2aa>
 80011c0:	45a2      	cmp	sl, r4
 80011c2:	d946      	bls.n	8001252 <__udivmoddi4+0x2aa>
 80011c4:	f1a9 0902 	sub.w	r9, r9, #2
 80011c8:	4464      	add	r4, ip
 80011ca:	eba4 040a 	sub.w	r4, r4, sl
 80011ce:	fbb4 f0fe 	udiv	r0, r4, lr
 80011d2:	fb0e 4410 	mls	r4, lr, r0, r4
 80011d6:	fb00 fa08 	mul.w	sl, r0, r8
 80011da:	b2ad      	uxth	r5, r5
 80011dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011e0:	45a2      	cmp	sl, r4
 80011e2:	d908      	bls.n	80011f6 <__udivmoddi4+0x24e>
 80011e4:	eb1c 0404 	adds.w	r4, ip, r4
 80011e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011ec:	d22d      	bcs.n	800124a <__udivmoddi4+0x2a2>
 80011ee:	45a2      	cmp	sl, r4
 80011f0:	d92b      	bls.n	800124a <__udivmoddi4+0x2a2>
 80011f2:	3802      	subs	r0, #2
 80011f4:	4464      	add	r4, ip
 80011f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011fa:	fba0 8902 	umull	r8, r9, r0, r2
 80011fe:	eba4 040a 	sub.w	r4, r4, sl
 8001202:	454c      	cmp	r4, r9
 8001204:	46c6      	mov	lr, r8
 8001206:	464d      	mov	r5, r9
 8001208:	d319      	bcc.n	800123e <__udivmoddi4+0x296>
 800120a:	d016      	beq.n	800123a <__udivmoddi4+0x292>
 800120c:	b15e      	cbz	r6, 8001226 <__udivmoddi4+0x27e>
 800120e:	ebb3 020e 	subs.w	r2, r3, lr
 8001212:	eb64 0405 	sbc.w	r4, r4, r5
 8001216:	fa04 f707 	lsl.w	r7, r4, r7
 800121a:	fa22 f301 	lsr.w	r3, r2, r1
 800121e:	431f      	orrs	r7, r3
 8001220:	40cc      	lsrs	r4, r1
 8001222:	e9c6 7400 	strd	r7, r4, [r6]
 8001226:	2100      	movs	r1, #0
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	4631      	mov	r1, r6
 800122e:	4630      	mov	r0, r6
 8001230:	e70c      	b.n	800104c <__udivmoddi4+0xa4>
 8001232:	468c      	mov	ip, r1
 8001234:	e6eb      	b.n	800100e <__udivmoddi4+0x66>
 8001236:	4610      	mov	r0, r2
 8001238:	e6ff      	b.n	800103a <__udivmoddi4+0x92>
 800123a:	4543      	cmp	r3, r8
 800123c:	d2e6      	bcs.n	800120c <__udivmoddi4+0x264>
 800123e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001242:	eb69 050c 	sbc.w	r5, r9, ip
 8001246:	3801      	subs	r0, #1
 8001248:	e7e0      	b.n	800120c <__udivmoddi4+0x264>
 800124a:	4628      	mov	r0, r5
 800124c:	e7d3      	b.n	80011f6 <__udivmoddi4+0x24e>
 800124e:	4611      	mov	r1, r2
 8001250:	e78c      	b.n	800116c <__udivmoddi4+0x1c4>
 8001252:	4681      	mov	r9, r0
 8001254:	e7b9      	b.n	80011ca <__udivmoddi4+0x222>
 8001256:	4608      	mov	r0, r1
 8001258:	e773      	b.n	8001142 <__udivmoddi4+0x19a>
 800125a:	4608      	mov	r0, r1
 800125c:	e749      	b.n	80010f2 <__udivmoddi4+0x14a>
 800125e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001262:	443d      	add	r5, r7
 8001264:	e713      	b.n	800108e <__udivmoddi4+0xe6>
 8001266:	3802      	subs	r0, #2
 8001268:	443c      	add	r4, r7
 800126a:	e724      	b.n	80010b6 <__udivmoddi4+0x10e>

0800126c <__aeabi_idiv0>:
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 fc30 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f80d 	bl	80012a0 <HAL_InitTick>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	e001      	b.n	8001296 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001292:	f00c fba9 	bl	800d9e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_InitTick+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d022      	beq.n	80012fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_InitTick+0x6c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_InitTick+0x68>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fc3e 	bl	8001b4a <HAL_SYSTICK_Config>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10f      	bne.n	80012f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d809      	bhi.n	80012ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	2200      	movs	r2, #0
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	f04f 30ff 	mov.w	r0, #4294967295
 80012e2:	f000 fc08 	bl	8001af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_InitTick+0x70>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e007      	b.n	80012fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e004      	b.n	80012fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000004 	.word	0x20000004
 800130c:	200000a0 	.word	0x200000a0
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a03      	ldr	r2, [pc, #12]	; (8001330 <HAL_IncTick+0x1c>)
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000984 	.word	0x20000984
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000984 	.word	0x20000984

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d004      	beq.n	8001370 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_Delay+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001370:	bf00      	nop
 8001372:	f7ff ffe1 	bl	8001338 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d8f7      	bhi.n	8001372 <HAL_Delay+0x26>
  {
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_SuspendTick+0x18>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_SuspendTick+0x18>)
 800139a:	f023 0302 	bic.w	r3, r3, #2
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_ResumeTick+0x18>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_ResumeTick+0x18>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6053      	str	r3, [r2, #4]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	e0042000 	.word	0xe0042000

080013e4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6053      	str	r3, [r2, #4]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	e0042000 	.word	0xe0042000

08001400 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6053      	str	r3, [r2, #4]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	e0042000 	.word	0xe0042000

0800141c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e127      	b.n	800168c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	2b00      	cmp	r3, #0
 8001448:	d115      	bne.n	8001476 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <HAL_ADC_Init+0x278>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a8d      	ldr	r2, [pc, #564]	; (8001694 <HAL_ADC_Init+0x278>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	4b8b      	ldr	r3, [pc, #556]	; (8001694 <HAL_ADC_Init+0x278>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f00c fae7 	bl	800da44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 80ff 	bne.w	8001682 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148c:	f023 0302 	bic.w	r3, r3, #2
 8001490:	f043 0202 	orr.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001498:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_ADC_Init+0x27c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	497c      	ldr	r1, [pc, #496]	; (8001698 <HAL_ADC_Init+0x27c>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014b2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ba:	4619      	mov	r1, r3
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	fa93 f3a3 	rbit	r3, r3
 80014c8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80014d6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	2302      	movs	r3, #2
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80014fe:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	4313      	orrs	r3, r2
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	2b10      	cmp	r3, #16
 800150c:	d007      	beq.n	800151e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001516:	4313      	orrs	r3, r2
 8001518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151a:	4313      	orrs	r3, r2
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001528:	2b40      	cmp	r3, #64	; 0x40
 800152a:	d04f      	beq.n	80015cc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001532:	4313      	orrs	r3, r2
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800153e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6912      	ldr	r2, [r2, #16]
 8001544:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001548:	d003      	beq.n	8001552 <HAL_ADC_Init+0x136>
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6912      	ldr	r2, [r2, #16]
 800154e:	2a01      	cmp	r2, #1
 8001550:	d102      	bne.n	8001558 <HAL_ADC_Init+0x13c>
 8001552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001556:	e000      	b.n	800155a <HAL_ADC_Init+0x13e>
 8001558:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800155a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800155c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800155e:	4313      	orrs	r3, r2
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001568:	2b01      	cmp	r3, #1
 800156a:	d125      	bne.n	80015b8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001572:	2b00      	cmp	r3, #0
 8001574:	d114      	bne.n	80015a0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	3b01      	subs	r3, #1
 800157c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	fa92 f2a2 	rbit	r2, r2
 8001588:	617a      	str	r2, [r7, #20]
  return result;
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	fab2 f282 	clz	r2, r2
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	4093      	lsls	r3, r2
 8001594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800159a:	4313      	orrs	r3, r2
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
 800159e:	e00b      	b.n	80015b8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f043 0220 	orr.w	r2, r3, #32
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_ADC_Init+0x280>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_ADC_Init+0x284>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015dc:	430b      	orrs	r3, r1
 80015de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e8:	d003      	beq.n	80015f2 <HAL_ADC_Init+0x1d6>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d119      	bne.n	8001626 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	3b01      	subs	r3, #1
 8001602:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001606:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	fa92 f2a2 	rbit	r2, r2
 800160e:	60fa      	str	r2, [r7, #12]
  return result;
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	fab2 f282 	clz	r2, r2
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	fa03 f202 	lsl.w	r2, r3, r2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
 8001624:	e007      	b.n	8001636 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_ADC_Init+0x288>)
 800163e:	4013      	ands	r3, r2
 8001640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001642:	429a      	cmp	r2, r3
 8001644:	d10b      	bne.n	800165e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001650:	f023 0303 	bic.w	r3, r3, #3
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	64da      	str	r2, [r3, #76]	; 0x4c
 800165c:	e014      	b.n	8001688 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f023 0312 	bic.w	r3, r3, #18
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001680:	e002      	b.n	8001688 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800168c:	4618      	mov	r0, r3
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	40012700 	.word	0x40012700
 800169c:	fcfc16ff 	.word	0xfcfc16ff
 80016a0:	c0fff189 	.word	0xc0fff189
 80016a4:	bf80fffe 	.word	0xbf80fffe

080016a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x20>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e134      	b.n	8001932 <HAL_ADC_ConfigChannel+0x28a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b06      	cmp	r3, #6
 80016d6:	d81c      	bhi.n	8001712 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	3b05      	subs	r3, #5
 80016ea:	221f      	movs	r2, #31
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4019      	ands	r1, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	3b05      	subs	r3, #5
 8001704:	fa00 f203 	lsl.w	r2, r0, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
 8001710:	e07e      	b.n	8001810 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d81c      	bhi.n	8001754 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	3b23      	subs	r3, #35	; 0x23
 800172c:	221f      	movs	r2, #31
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	4019      	ands	r1, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b23      	subs	r3, #35	; 0x23
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	63da      	str	r2, [r3, #60]	; 0x3c
 8001752:	e05d      	b.n	8001810 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d81c      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b41      	subs	r3, #65	; 0x41
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
 8001794:	e03c      	b.n	8001810 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b18      	cmp	r3, #24
 800179c:	d81c      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	3b5f      	subs	r3, #95	; 0x5f
 80017b0:	221f      	movs	r2, #31
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4019      	ands	r1, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b5f      	subs	r3, #95	; 0x5f
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e01b      	b.n	8001810 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b7d      	subs	r3, #125	; 0x7d
 80017ea:	221f      	movs	r2, #31
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4019      	ands	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b7d      	subs	r3, #125	; 0x7d
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b09      	cmp	r3, #9
 8001816:	d81a      	bhi.n	800184e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6959      	ldr	r1, [r3, #20]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	2207      	movs	r2, #7
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	4019      	ands	r1, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6898      	ldr	r0, [r3, #8]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	fa00 f203 	lsl.w	r2, r0, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	e042      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b13      	cmp	r3, #19
 8001854:	d81c      	bhi.n	8001890 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	3b1e      	subs	r3, #30
 8001868:	2207      	movs	r2, #7
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	4019      	ands	r1, r3
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6898      	ldr	r0, [r3, #8]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1e      	subs	r3, #30
 8001882:	fa00 f203 	lsl.w	r2, r0, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	611a      	str	r2, [r3, #16]
 800188e:	e021      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b1a      	cmp	r3, #26
 8001896:	d81c      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68d9      	ldr	r1, [r3, #12]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	3b3c      	subs	r3, #60	; 0x3c
 80018aa:	2207      	movs	r2, #7
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4019      	ands	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6898      	ldr	r0, [r3, #8]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	3b3c      	subs	r3, #60	; 0x3c
 80018c4:	fa00 f203 	lsl.w	r2, r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	e000      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80018d2:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b10      	cmp	r3, #16
 80018da:	d003      	beq.n	80018e4 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018e0:	2b11      	cmp	r3, #17
 80018e2:	d121      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_ADC_ConfigChannel+0x294>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11b      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_ADC_ConfigChannel+0x294>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_ADC_ConfigChannel+0x294>)
 80018f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018fa:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b10      	cmp	r3, #16
 8001902:	d111      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_ADC_ConfigChannel+0x298>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_ADC_ConfigChannel+0x29c>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9a      	lsrs	r2, r3, #18
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800191a:	e002      	b.n	8001922 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3b01      	subs	r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f9      	bne.n	800191c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40012700 	.word	0x40012700
 8001940:	200000a0 	.word	0x200000a0
 8001944:	431bde83 	.word	0x431bde83

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <__NVIC_EnableIRQ+0x34>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff90 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff2d 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff42 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff35 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d106      	bne.n	8001b80 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001b7e:	e005      	b.n	8001b8c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e010 	.word	0xe000e010

08001b9c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001ba0:	f000 f802 	bl	8001ba8 <HAL_SYSTICK_Callback>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e059      	b.n	8001c7a <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	; (8001c84 <HAL_DMA_Init+0xd0>)
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d80f      	bhi.n	8001bf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_DMA_Init+0xd4>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_DMA_Init+0xd8>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	009a      	lsls	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <HAL_DMA_Init+0xdc>)
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bf0:	e00e      	b.n	8001c10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_DMA_Init+0xe0>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_DMA_Init+0xd8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	009a      	lsls	r2, r3, #2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a22      	ldr	r2, [pc, #136]	; (8001c98 <HAL_DMA_Init+0xe4>)
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40026407 	.word	0x40026407
 8001c88:	bffd9ff8 	.word	0xbffd9ff8
 8001c8c:	cccccccd 	.word	0xcccccccd
 8001c90:	40026000 	.word	0x40026000
 8001c94:	bffd9bf8 	.word	0xbffd9bf8
 8001c98:	40026400 	.word	0x40026400

08001c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Start_IT+0x20>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e04b      	b.n	8001d54 <HAL_DMA_Start_IT+0xb8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d13a      	bne.n	8001d46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f95e 	bl	8001fb6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 020e 	orr.w	r2, r2, #14
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00f      	b.n	8001d34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0204 	bic.w	r2, r2, #4
 8001d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 020a 	orr.w	r2, r2, #10
 8001d32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e005      	b.n	8001d52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d008      	beq.n	8001d86 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e022      	b.n	8001dcc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 020e 	bic.w	r2, r2, #14
 8001d94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 021c 	and.w	r2, r3, #28
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d005      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e029      	b.n	8001e4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020e 	bic.w	r2, r2, #14
 8001e08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f003 021c 	and.w	r2, r3, #28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
    }
  }
  return status;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 031c 	and.w	r3, r3, #28
 8001e78:	2204      	movs	r2, #4
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d026      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x7a>
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d021      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f003 021c 	and.w	r2, r3, #28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	2104      	movs	r1, #4
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d071      	beq.n	8001fac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed0:	e06c      	b.n	8001fac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 031c 	and.w	r3, r3, #28
 8001eda:	2202      	movs	r2, #2
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d02e      	beq.n	8001f44 <HAL_DMA_IRQHandler+0xec>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d029      	beq.n	8001f44 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 020a 	bic.w	r2, r2, #10
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 021c 	and.w	r2, r3, #28
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	2102      	movs	r1, #2
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d038      	beq.n	8001fac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f42:	e033      	b.n	8001fac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f003 031c 	and.w	r3, r3, #28
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d02a      	beq.n	8001fae <HAL_DMA_IRQHandler+0x156>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d025      	beq.n	8001fae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020e 	bic.w	r2, r2, #14
 8001f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 021c 	and.w	r2, r3, #28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
}
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 021c 	and.w	r2, r3, #28
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d108      	bne.n	8001ffa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ff8:	e007      	b.n	800200a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	60da      	str	r2, [r3, #12]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800202a:	e154      	b.n	80022d6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 8146 	beq.w	80022d0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002058:	2b02      	cmp	r3, #2
 800205a:	d130      	bne.n	80020be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002092:	2201      	movs	r2, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 0201 	and.w	r2, r3, #1
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d123      	bne.n	800214e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002112:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	6939      	ldr	r1, [r7, #16]
 800214a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0203 	and.w	r2, r3, #3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80a0 	beq.w	80022d0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_GPIO_Init+0x2e0>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80021a8:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	3302      	adds	r3, #2
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a4b      	ldr	r2, [pc, #300]	; (80022fc <HAL_GPIO_Init+0x2e8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d019      	beq.n	8002208 <HAL_GPIO_Init+0x1f4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x2ec>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_GPIO_Init+0x1f0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x2f0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d00d      	beq.n	8002200 <HAL_GPIO_Init+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x2f4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0x1e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_GPIO_Init+0x2f8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <HAL_GPIO_Init+0x1e4>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e008      	b.n	800220a <HAL_GPIO_Init+0x1f6>
 80021f8:	2305      	movs	r3, #5
 80021fa:	e006      	b.n	800220a <HAL_GPIO_Init+0x1f6>
 80021fc:	2303      	movs	r3, #3
 80021fe:	e004      	b.n	800220a <HAL_GPIO_Init+0x1f6>
 8002200:	2302      	movs	r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x1f6>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <HAL_GPIO_Init+0x1f6>
 8002208:	2300      	movs	r3, #0
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800221a:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_GPIO_Init+0x2e4>)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800224c:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002276:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_GPIO_Init+0x2fc>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f47f aea3 	bne.w	800202c <HAL_GPIO_Init+0x18>
  }
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40010400 	.word	0x40010400

08002314 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800232a:	e0b8      	b.n	800249e <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800232c:	2201      	movs	r2, #1
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80ab 	beq.w	8002498 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 8002342:	4a5d      	ldr	r2, [pc, #372]	; (80024b8 <HAL_GPIO_DeInit+0x1a4>)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a55      	ldr	r2, [pc, #340]	; (80024bc <HAL_GPIO_DeInit+0x1a8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d019      	beq.n	80023a0 <HAL_GPIO_DeInit+0x8c>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a54      	ldr	r2, [pc, #336]	; (80024c0 <HAL_GPIO_DeInit+0x1ac>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d013      	beq.n	800239c <HAL_GPIO_DeInit+0x88>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a53      	ldr	r2, [pc, #332]	; (80024c4 <HAL_GPIO_DeInit+0x1b0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00d      	beq.n	8002398 <HAL_GPIO_DeInit+0x84>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_GPIO_DeInit+0x1b4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <HAL_GPIO_DeInit+0x80>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a51      	ldr	r2, [pc, #324]	; (80024cc <HAL_GPIO_DeInit+0x1b8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_GPIO_DeInit+0x7c>
 800238c:	2304      	movs	r3, #4
 800238e:	e008      	b.n	80023a2 <HAL_GPIO_DeInit+0x8e>
 8002390:	2305      	movs	r3, #5
 8002392:	e006      	b.n	80023a2 <HAL_GPIO_DeInit+0x8e>
 8002394:	2303      	movs	r3, #3
 8002396:	e004      	b.n	80023a2 <HAL_GPIO_DeInit+0x8e>
 8002398:	2302      	movs	r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_DeInit+0x8e>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_DeInit+0x8e>
 80023a0:	2300      	movs	r3, #0
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	4093      	lsls	r3, r2
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d132      	bne.n	8002418 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	4945      	ldr	r1, [pc, #276]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023bc:	4013      	ands	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4941      	ldr	r1, [pc, #260]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80023ce:	4b40      	ldr	r3, [pc, #256]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	493e      	ldr	r1, [pc, #248]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023d8:	4013      	ands	r3, r2
 80023da:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80023dc:	4b3c      	ldr	r3, [pc, #240]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	493a      	ldr	r1, [pc, #232]	; (80024d0 <HAL_GPIO_DeInit+0x1bc>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60cb      	str	r3, [r1, #12]

        tmp = (0x0FU) << (4 * (position & 0x03));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80023fa:	4a2f      	ldr	r2, [pc, #188]	; (80024b8 <HAL_GPIO_DeInit+0x1a4>)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43da      	mvns	r2, r3
 800240a:	482b      	ldr	r0, [pc, #172]	; (80024b8 <HAL_GPIO_DeInit+0x1a4>)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	400a      	ands	r2, r1
 8002412:	3302      	adds	r3, #2
 8002414:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2103      	movs	r1, #3
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	08d2      	lsrs	r2, r2, #3
 800244e:	4019      	ands	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2103      	movs	r1, #3
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	401a      	ands	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	2101      	movs	r1, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	401a      	ands	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2103      	movs	r1, #3
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f af40 	bne.w	800232c <HAL_GPIO_DeInit+0x18>
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80024f0:	e003      	b.n	80024fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	041a      	lsls	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	4618      	mov	r0, r3
 8002524:	f009 ff44 	bl	800c3b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	2310      	movs	r3, #16
 800253c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	603b      	str	r3, [r7, #0]
  return result;
 8002546:	683b      	ldr	r3, [r7, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002554:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8002558:	461a      	mov	r2, r3
 800255a:	2300      	movs	r3, #0
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_PWR_EnterSTOPMode+0x50>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 0203 	bic.w	r2, r3, #3
 800257c:	490e      	ldr	r1, [pc, #56]	; (80025b8 <HAL_PWR_EnterSTOPMode+0x50>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_PWR_EnterSTOPMode+0x54>)
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_PWR_EnterSTOPMode+0x54>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002596:	bf30      	wfi
 8002598:	e002      	b.n	80025a0 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800259a:	bf40      	sev
    __WFE();
 800259c:	bf20      	wfe
    __WFE();
 800259e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80025a0:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_PWR_EnterSTOPMode+0x54>)
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	4a05      	ldr	r2, [pc, #20]	; (80025bc <HAL_PWR_EnterSTOPMode+0x54>)
 80025a6:	f023 0304 	bic.w	r3, r3, #4
 80025aa:	6113      	str	r3, [r2, #16]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40007000 	.word	0x40007000
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <HAL_PWREx_EnableFastWakeUp>:
  *         Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when
  *         exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ca:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	603b      	str	r3, [r7, #0]
  return result;
 80025d4:	683b      	ldr	r3, [r7, #0]
  /* Enable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)ENABLE;
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80025e2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80025e6:	461a      	mov	r2, r3
 80025e8:	2301      	movs	r3, #1
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002600:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	603b      	str	r3, [r7, #0]
  return result;
 800260a:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002618:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800261c:	461a      	mov	r2, r3
 800261e:	2301      	movs	r3, #1
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e31d      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002648:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d07b      	beq.n	8002756 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d006      	beq.n	8002672 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002670:	d10b      	bne.n	800268a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	4b87      	ldr	r3, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d06a      	beq.n	8002754 <HAL_RCC_OscConfig+0x128>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d166      	bne.n	8002754 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e2f7      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7e      	ldr	r2, [pc, #504]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e02d      	b.n	80026fc <HAL_RCC_OscConfig+0xd0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x96>
 80026a8:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a78      	ldr	r2, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a75      	ldr	r2, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0xd0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0xb8>
 80026ca:	4b71      	ldr	r3, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a70      	ldr	r2, [pc, #448]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b6e      	ldr	r3, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xd0>
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fe18 	bl	8001338 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fe14 	bl	8001338 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e2ad      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271e:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fe04 	bl	8001338 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fe00 	bl	8001338 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e299      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002746:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d05a      	beq.n	8002818 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	2b04      	cmp	r3, #4
 8002766:	d005      	beq.n	8002774 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d119      	bne.n	80027a2 <HAL_RCC_OscConfig+0x176>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002774:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x160>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e276      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	493d      	ldr	r1, [pc, #244]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a0:	e03a      	b.n	8002818 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d020      	beq.n	80027ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027aa:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <HAL_RCC_OscConfig+0x268>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fdc2 	bl	8001338 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe fdbe 	bl	8001338 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e257      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	021b      	lsls	r3, r3, #8
 80027e4:	492a      	ldr	r1, [pc, #168]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_OscConfig+0x268>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fda1 	bl	8001338 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe fd9d 	bl	8001338 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e236      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80b8 	beq.w	8002996 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d170      	bne.n	800290e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x218>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e21a      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002850:	429a      	cmp	r2, r3
 8002852:	d921      	bls.n	8002898 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fc4b 	bl	80030f4 <RCC_SetFlashLatencyFromMSIRange>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e208      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4906      	ldr	r1, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	4901      	ldr	r1, [pc, #4]	; (8002890 <HAL_RCC_OscConfig+0x264>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
 800288e:	e020      	b.n	80028d2 <HAL_RCC_OscConfig+0x2a6>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002898:	4ba4      	ldr	r3, [pc, #656]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	49a1      	ldr	r1, [pc, #644]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028aa:	4ba0      	ldr	r3, [pc, #640]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	061b      	lsls	r3, r3, #24
 80028b8:	499c      	ldr	r1, [pc, #624]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fc16 	bl	80030f4 <RCC_SetFlashLatencyFromMSIRange>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e1d3      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	0b5b      	lsrs	r3, r3, #13
 80028d8:	3301      	adds	r3, #1
 80028da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028e2:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	0912      	lsrs	r2, r2, #4
 80028e8:	f002 020f 	and.w	r2, r2, #15
 80028ec:	4990      	ldr	r1, [pc, #576]	; (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028ee:	5c8a      	ldrb	r2, [r1, r2]
 80028f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028f2:	4a90      	ldr	r2, [pc, #576]	; (8002b34 <HAL_RCC_OscConfig+0x508>)
 80028f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028f6:	4b90      	ldr	r3, [pc, #576]	; (8002b38 <HAL_RCC_OscConfig+0x50c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fcd0 	bl	80012a0 <HAL_InitTick>
 8002900:	4603      	mov	r3, r0
 8002902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d045      	beq.n	8002996 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	e1b5      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d029      	beq.n	800296a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002916:	4b89      	ldr	r3, [pc, #548]	; (8002b3c <HAL_RCC_OscConfig+0x510>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fd0c 	bl	8001338 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7fe fd08 	bl	8001338 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1a1      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002936:	4b7d      	ldr	r3, [pc, #500]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002942:	4b7a      	ldr	r3, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4977      	ldr	r1, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002954:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4972      	ldr	r1, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x510>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fce2 	bl	8001338 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7fe fcde 	bl	8001338 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e177      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800298a:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d030      	beq.n	8002a04 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x514>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7fe fcc2 	bl	8001338 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe fcbe 	bl	8001338 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e157      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ca:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x38c>
 80029d6:	e015      	b.n	8002a04 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_OscConfig+0x514>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7fe fcab 	bl	8001338 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe fca7 	bl	8001338 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e140      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80b5 	beq.w	8002b7c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a16:	4b45      	ldr	r3, [pc, #276]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	6253      	str	r3, [r2, #36]	; 0x24
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a3d      	ldr	r2, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fc6f 	bl	8001338 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fc6b 	bl	8001338 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e104      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_OscConfig+0x518>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x466>
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6353      	str	r3, [r2, #52]	; 0x34
 8002a90:	e02d      	b.n	8002aee <HAL_RCC_OscConfig+0x4c2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x488>
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa4:	6353      	str	r3, [r2, #52]	; 0x34
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ab2:	e01c      	b.n	8002aee <HAL_RCC_OscConfig+0x4c2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4aa>
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	4a17      	ldr	r2, [pc, #92]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6353      	str	r3, [r2, #52]	; 0x34
 8002ad4:	e00b      	b.n	8002aee <HAL_RCC_OscConfig+0x4c2>
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae6:	4a11      	ldr	r2, [pc, #68]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aec:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fc1f 	bl	8001338 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fc1b 	bl	8001338 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0b2      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_OscConfig+0x500>)
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCC_OscConfig+0x4d2>
 8002b20:	e023      	b.n	8002b6a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fc09 	bl	8001338 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b28:	e019      	b.n	8002b5e <HAL_RCC_OscConfig+0x532>
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08013220 	.word	0x08013220
 8002b34:	200000a0 	.word	0x200000a0
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	42470020 	.word	0x42470020
 8002b40:	42470680 	.word	0x42470680
 8002b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7fe fbf6 	bl	8001338 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e08d      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ee      	bne.n	8002b48 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d079      	beq.n	8002c78 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d056      	beq.n	8002c38 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d13b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_OscConfig+0x65c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fbce 	bl	8001338 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fbca 	bl	8001338 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e063      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bbe:	4b31      	ldr	r3, [pc, #196]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	4319      	orrs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	492b      	ldr	r1, [pc, #172]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_OscConfig+0x65c>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fba9 	bl	8001338 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe fba5 	bl	8001338 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e03e      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x5be>
 8002c08:	e036      	b.n	8002c78 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_RCC_OscConfig+0x65c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fb92 	bl	8001338 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fb8e 	bl	8001338 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e027      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5ec>
 8002c36:	e01f      	b.n	8002c78 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e01a      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_RCC_OscConfig+0x658>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470060 	.word	0x42470060

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e11a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d919      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x34>
 8002cb4:	4b8a      	ldr	r3, [pc, #552]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a89      	ldr	r2, [pc, #548]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cba:	f043 0304 	orr.w	r3, r3, #4
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b87      	ldr	r3, [pc, #540]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f023 0201 	bic.w	r2, r3, #1
 8002cc8:	4985      	ldr	r1, [pc, #532]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd0:	4b83      	ldr	r3, [pc, #524]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0f9      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d008      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	497a      	ldr	r1, [pc, #488]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 808e 	beq.w	8002e2a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d121      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0d7      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0cb      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d46:	4b67      	ldr	r3, [pc, #412]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0bf      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e0b7      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	495c      	ldr	r1, [pc, #368]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fe fade 	bl	8001338 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe fad6 	bl	8001338 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e09b      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9e:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
 8002daa:	e03e      	b.n	8002e2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d112      	bne.n	8002dda <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7fe fabf 	bl	8001338 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e084      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	4b45      	ldr	r3, [pc, #276]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
 8002dd8:	e027      	b.n	8002e2a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d11d      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe faa8 	bl	8001338 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e06d      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x158>
 8002e06:	e010      	b.n	8002e2a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fa96 	bl	8001338 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e05b      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002e1e:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ee      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d219      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1be>
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	4923      	ldr	r1, [pc, #140]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <HAL_RCC_ClockConfig+0x254>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e034      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4917      	ldr	r1, [pc, #92]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	490f      	ldr	r1, [pc, #60]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eaa:	f000 f823 	bl	8002ef4 <HAL_RCC_GetSysClockFreq>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_ClockConfig+0x258>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	490b      	ldr	r1, [pc, #44]	; (8002ee8 <HAL_RCC_ClockConfig+0x25c>)
 8002ebc:	5ccb      	ldrb	r3, [r1, r3]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_RCC_ClockConfig+0x260>)
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x264>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe f9e8 	bl	80012a0 <HAL_InitTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	08013220 	.word	0x08013220
 8002eec:	200000a0 	.word	0x200000a0
 8002ef0:	20000000 	.word	0x20000000

08002ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002efa:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d00d      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x32>
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	f200 80a4 	bhi.w	8003058 <HAL_RCC_GetSysClockFreq+0x164>
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d002      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x26>
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d003      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c>
 8002f18:	e09e      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_GetSysClockFreq+0x190>)
 8002f1c:	613b      	str	r3, [r7, #16]
      break;
 8002f1e:	e0a9      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f20:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_GetSysClockFreq+0x194>)
 8002f22:	613b      	str	r3, [r7, #16]
      break;
 8002f24:	e0a6      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_RCC_GetSysClockFreq+0x198>)
 8002f30:	5cd3      	ldrb	r3, [r2, r3]
 8002f32:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	0d9b      	lsrs	r3, r3, #22
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f40:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d041      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	461c      	mov	r4, r3
 8002f50:	f04f 0500 	mov.w	r5, #0
 8002f54:	4620      	mov	r0, r4
 8002f56:	4629      	mov	r1, r5
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	014b      	lsls	r3, r1, #5
 8002f62:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f66:	0142      	lsls	r2, r0, #5
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	1b00      	subs	r0, r0, r4
 8002f6e:	eb61 0105 	sbc.w	r1, r1, r5
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	018b      	lsls	r3, r1, #6
 8002f7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f80:	0182      	lsls	r2, r0, #6
 8002f82:	1a12      	subs	r2, r2, r0
 8002f84:	eb63 0301 	sbc.w	r3, r3, r1
 8002f88:	f04f 0000 	mov.w	r0, #0
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	00d9      	lsls	r1, r3, #3
 8002f92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f96:	00d0      	lsls	r0, r2, #3
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	1912      	adds	r2, r2, r4
 8002f9e:	eb45 0303 	adc.w	r3, r5, r3
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	0259      	lsls	r1, r3, #9
 8002fac:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fb0:	0250      	lsls	r0, r2, #9
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f7fd ffd9 	bl	8000f78 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4613      	mov	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e040      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	461c      	mov	r4, r3
 8002fd4:	f04f 0500 	mov.w	r5, #0
 8002fd8:	4620      	mov	r0, r4
 8002fda:	4629      	mov	r1, r5
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	014b      	lsls	r3, r1, #5
 8002fe6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fea:	0142      	lsls	r2, r0, #5
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	1b00      	subs	r0, r0, r4
 8002ff2:	eb61 0105 	sbc.w	r1, r1, r5
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	018b      	lsls	r3, r1, #6
 8003000:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003004:	0182      	lsls	r2, r0, #6
 8003006:	1a12      	subs	r2, r2, r0
 8003008:	eb63 0301 	sbc.w	r3, r3, r1
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	00d9      	lsls	r1, r3, #3
 8003016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800301a:	00d0      	lsls	r0, r2, #3
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	1912      	adds	r2, r2, r4
 8003022:	eb45 0303 	adc.w	r3, r5, r3
 8003026:	f04f 0000 	mov.w	r0, #0
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	0299      	lsls	r1, r3, #10
 8003030:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003034:	0290      	lsls	r0, r2, #10
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	461a      	mov	r2, r3
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f7fd ff97 	bl	8000f78 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4613      	mov	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	613b      	str	r3, [r7, #16]
      break;
 8003056:	e00d      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_GetSysClockFreq+0x18c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0b5b      	lsrs	r3, r3, #13
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	3301      	adds	r3, #1
 8003068:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	613b      	str	r3, [r7, #16]
      break;
 8003072:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003074:	693b      	ldr	r3, [r7, #16]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bdb0      	pop	{r4, r5, r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200
 800308c:	08013214 	.word	0x08013214

08003090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	200000a0 	.word	0x200000a0

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff2 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a1b      	lsrs	r3, r3, #8
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08013230 	.word	0x08013230

080030cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030d0:	f7ff ffde 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0adb      	lsrs	r3, r3, #11
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08013230 	.word	0x08013230

080030f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003100:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d12c      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800310c:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	e016      	b.n	8003152 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6253      	str	r3, [r2, #36]	; 0x24
 8003130:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003144:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003150:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003158:	d105      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003160:	d101      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003162:	2301      	movs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d105      	bne.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0f      	ldr	r2, [pc, #60]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 0201 	bic.w	r2, r3, #1
 8003180:	490b      	ldr	r1, [pc, #44]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40007000 	.word	0x40007000
 80031b0:	40023c00 	.word	0x40023c00

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80b8 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b5a      	ldr	r3, [pc, #360]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	4a59      	ldr	r2, [pc, #356]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6253      	str	r3, [r2, #36]	; 0x24
 80031e6:	4b57      	ldr	r3, [pc, #348]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b54      	ldr	r3, [pc, #336]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a50      	ldr	r2, [pc, #320]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fe f893 	bl	8001338 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fe f88f 	bl	8001338 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	; 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e089      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003234:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800323c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	429a      	cmp	r2, r3
 800324a:	d00f      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003254:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003258:	d108      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800325a:	4b3a      	ldr	r3, [pc, #232]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003266:	d101      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e067      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800326c:	4b35      	ldr	r3, [pc, #212]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003274:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d034      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	429a      	cmp	r2, r3
 8003288:	d02d      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d027      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800329e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a0:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a6:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80032ac:	4a25      	ldr	r2, [pc, #148]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d014      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe f83c 	bl	8001338 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032c2:	e00a      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe f838 	bl	8001338 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e030      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032da:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0ee      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032fe:	d10a      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003310:	490c      	ldr	r1, [pc, #48]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003324:	4313      	orrs	r3, r2
 8003326:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003328:	7dfb      	ldrb	r3, [r7, #23]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	40007000 	.word	0x40007000
 800334c:	424706dc 	.word	0x424706dc

08003350 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e083      	b.n	800346a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7f5b      	ldrb	r3, [r3, #29]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f00a fba6 	bl	800dac4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	22ca      	movs	r2, #202	; 0xca
 8003384:	625a      	str	r2, [r3, #36]	; 0x24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2253      	movs	r2, #83	; 0x53
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fe4a 	bl	8004028 <RTC_EnterInitMode>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	22ff      	movs	r2, #255	; 0xff
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2204      	movs	r2, #4
 80033a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e05e      	b.n	800346a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6899      	ldr	r1, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68d2      	ldr	r2, [r2, #12]
 80033e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6919      	ldr	r1, [r3, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	041a      	lsls	r2, r3, #16
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340a:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fdd7 	bl	8003fce <HAL_RTC_WaitForSynchro>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e018      	b.n	800346a <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	22ff      	movs	r2, #255	; 0xff
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003468:	2300      	movs	r3, #0
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003472:	b590      	push	{r4, r7, lr}
 8003474:	b087      	sub	sp, #28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	7f1b      	ldrb	r3, [r3, #28]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_RTC_SetTime+0x18>
 8003486:	2302      	movs	r3, #2
 8003488:	e0a3      	b.n	80035d2 <HAL_RTC_SetTime+0x160>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2202      	movs	r2, #2
 8003494:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d126      	bne.n	80034ea <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2200      	movs	r2, #0
 80034ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fde1 	bl	800407c <RTC_ByteToBcd2>
 80034ba:	4603      	mov	r3, r0
 80034bc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	785b      	ldrb	r3, [r3, #1]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fdda 	bl	800407c <RTC_ByteToBcd2>
 80034c8:	4603      	mov	r3, r0
 80034ca:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034cc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	789b      	ldrb	r3, [r3, #2]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fdd2 	bl	800407c <RTC_ByteToBcd2>
 80034d8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034da:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	78db      	ldrb	r3, [r3, #3]
 80034e2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	e018      	b.n	800351c <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800350a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003510:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	78db      	ldrb	r3, [r3, #3]
 8003516:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	22ca      	movs	r2, #202	; 0xca
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2253      	movs	r2, #83	; 0x53
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fd7b 	bl	8004028 <RTC_EnterInitMode>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2204      	movs	r2, #4
 8003544:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e040      	b.n	80035d2 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800355a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800355e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003596:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fd18 	bl	8003fce <HAL_RTC_WaitForSynchro>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	22ff      	movs	r2, #255	; 0xff
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2204      	movs	r2, #4
 80035b0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e00a      	b.n	80035d2 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd90      	pop	{r4, r7, pc}

080035da <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800360a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800360e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361a:	b2da      	uxtb	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d11a      	bne.n	800368a <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fd2e 	bl	80040ba <RTC_Bcd2ToByte>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fd25 	bl	80040ba <RTC_Bcd2ToByte>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	789b      	ldrb	r3, [r3, #2]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fd1c 	bl	80040ba <RTC_Bcd2ToByte>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	7f1b      	ldrb	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_RTC_SetDate+0x18>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e08d      	b.n	80037c8 <HAL_RTC_SetDate+0x134>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10e      	bne.n	80036dc <HAL_RTC_SetDate+0x48>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	785b      	ldrb	r3, [r3, #1]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	330a      	adds	r3, #10
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11c      	bne.n	800371c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	78db      	ldrb	r3, [r3, #3]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 fcc8 	bl	800407c <RTC_ByteToBcd2>
 80036ec:	4603      	mov	r3, r0
 80036ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fcc1 	bl	800407c <RTC_ByteToBcd2>
 80036fa:	4603      	mov	r3, r0
 80036fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	789b      	ldrb	r3, [r3, #2]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fcb9 	bl	800407c <RTC_ByteToBcd2>
 800370a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800370c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e00e      	b.n	800373a <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	78db      	ldrb	r3, [r3, #3]
 8003720:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003728:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800372e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	22ca      	movs	r2, #202	; 0xca
 8003740:	625a      	str	r2, [r3, #36]	; 0x24
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2253      	movs	r2, #83	; 0x53
 8003748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fc6c 	bl	8004028 <RTC_EnterInitMode>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2204      	movs	r2, #4
 8003762:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e02c      	b.n	80037c8 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003778:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800377c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378c:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fc1d 	bl	8003fce <HAL_RTC_WaitForSynchro>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2204      	movs	r2, #4
 80037a6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00a      	b.n	80037c8 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd90      	pop	{r4, r7, pc}

080037d0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	0c1b      	lsrs	r3, r3, #16
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11a      	bne.n	8003860 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	78db      	ldrb	r3, [r3, #3]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fc43 	bl	80040ba <RTC_Bcd2ToByte>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	785b      	ldrb	r3, [r3, #1]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fc3a 	bl	80040ba <RTC_Bcd2ToByte>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	789b      	ldrb	r3, [r3, #2]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fc31 	bl	80040ba <RTC_Bcd2ToByte>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800386a:	b590      	push	{r4, r7, lr}
 800386c:	b089      	sub	sp, #36	; 0x24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpreg;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	7f1b      	ldrb	r3, [r3, #28]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_RTC_SetAlarm+0x1c>
 8003882:	2302      	movs	r3, #2
 8003884:	e101      	b.n	8003a8a <HAL_RTC_SetAlarm+0x220>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2202      	movs	r2, #2
 8003890:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d137      	bne.n	8003908 <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2200      	movs	r2, #0
 80038aa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fbe3 	bl	800407c <RTC_ByteToBcd2>
 80038b6:	4603      	mov	r3, r0
 80038b8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fbdc 	bl	800407c <RTC_ByteToBcd2>
 80038c4:	4603      	mov	r3, r0
 80038c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80038c8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fbd4 	bl	800407c <RTC_ByteToBcd2>
 80038d4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038d6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80038e0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbc6 	bl	800407c <RTC_ByteToBcd2>
 80038f0:	4603      	mov	r3, r0
 80038f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038f4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003902:	4313      	orrs	r3, r2
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e023      	b.n	8003950 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <HAL_RTC_SetAlarm+0xb2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	785b      	ldrb	r3, [r3, #1]
 8003926:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003928:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800392e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	78db      	ldrb	r3, [r3, #3]
 8003934:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003936:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003940:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003946:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800394c:	4313      	orrs	r3, r2
 800394e:	61fb      	str	r3, [r7, #28]
  }

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	22ca      	movs	r2, #202	; 0xca
 8003962:	625a      	str	r2, [r3, #36]	; 0x24
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2253      	movs	r2, #83	; 0x53
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003974:	d13f      	bne.n	80039f6 <HAL_RTC_SetAlarm+0x18c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003984:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003994:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003996:	f7fd fccf 	bl	8001338 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800399c:	e013      	b.n	80039c6 <HAL_RTC_SetAlarm+0x15c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800399e:	f7fd fccb 	bl	8001338 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ac:	d90b      	bls.n	80039c6 <HAL_RTC_SetAlarm+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	22ff      	movs	r2, #255	; 0xff
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2203      	movs	r2, #3
 80039ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e061      	b.n	8003a8a <HAL_RTC_SetAlarm+0x220>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0e4      	beq.n	800399e <HAL_RTC_SetAlarm+0x134>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	e03e      	b.n	8003a74 <HAL_RTC_SetAlarm+0x20a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a04:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a14:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003a16:	f7fd fc8f 	bl	8001338 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003a1c:	e013      	b.n	8003a46 <HAL_RTC_SetAlarm+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a1e:	f7fd fc8b 	bl	8001338 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2c:	d90b      	bls.n	8003a46 <HAL_RTC_SetAlarm+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e021      	b.n	8003a8a <HAL_RTC_SetAlarm+0x220>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0e4      	beq.n	8003a1e <HAL_RTC_SetAlarm+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd90      	pop	{r4, r7, pc}
	...

08003a94 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	7f1b      	ldrb	r3, [r3, #28]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RTC_SetAlarm_IT+0x24>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e11f      	b.n	8003cf8 <HAL_RTC_SetAlarm_IT+0x264>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d137      	bne.n	8003b3a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 faca 	bl	800407c <RTC_ByteToBcd2>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fac3 	bl	800407c <RTC_ByteToBcd2>
 8003af6:	4603      	mov	r3, r0
 8003af8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003afa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	789b      	ldrb	r3, [r3, #2]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fabb 	bl	800407c <RTC_ByteToBcd2>
 8003b06:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b08:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003b12:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 faad 	bl	800407c <RTC_ByteToBcd2>
 8003b22:	4603      	mov	r3, r0
 8003b24:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b26:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e023      	b.n	8003b82 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b5a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003b60:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	78db      	ldrb	r3, [r3, #3]
 8003b66:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003b68:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b70:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003b72:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003b78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	22ca      	movs	r2, #202	; 0xca
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2253      	movs	r2, #83	; 0x53
 8003b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba6:	d148      	bne.n	8003c3a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003bc8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003bca:	f7fd fbb5 	bl	8001338 <HAL_GetTick>
 8003bce:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003bd0:	e013      	b.n	8003bfa <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bd2:	f7fd fbb1 	bl	8001338 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003be0:	d90b      	bls.n	8003bfa <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2203      	movs	r2, #3
 8003bee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e07e      	b.n	8003cf8 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0e4      	beq.n	8003bd2 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c26:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	e047      	b.n	8003cca <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c48:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003c5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003c5c:	f7fd fb6c 	bl	8001338 <HAL_GetTick>
 8003c60:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c62:	e013      	b.n	8003c8c <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c64:	f7fd fb68 	bl	8001338 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c72:	d90b      	bls.n	8003c8c <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e035      	b.n	8003cf8 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0e4      	beq.n	8003c64 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a0c      	ldr	r2, [pc, #48]	; (8003d00 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd4:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3724      	adds	r7, #36	; 0x24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7f1b      	ldrb	r3, [r3, #28]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_RTC_DeactivateAlarm+0x16>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e07b      	b.n	8003e12 <HAL_RTC_DeactivateAlarm+0x10e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	22ca      	movs	r2, #202	; 0xca
 8003d2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2253      	movs	r2, #83	; 0x53
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	d12f      	bne.n	8003d9e <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d5c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003d5e:	f7fd faeb 	bl	8001338 <HAL_GetTick>
 8003d62:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d64:	e013      	b.n	8003d8e <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d66:	f7fd fae7 	bl	8001338 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d74:	d90b      	bls.n	8003d8e <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2203      	movs	r2, #3
 8003d82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e041      	b.n	8003e12 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0e4      	beq.n	8003d66 <HAL_RTC_DeactivateAlarm+0x62>
 8003d9c:	e02e      	b.n	8003dfc <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dac:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dbc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003dbe:	f7fd fabb 	bl	8001338 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003dc4:	e013      	b.n	8003dee <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003dc6:	f7fd fab7 	bl	8001338 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd4:	d90b      	bls.n	8003dee <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2203      	movs	r2, #3
 8003de2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e011      	b.n	8003e12 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0e4      	beq.n	8003dc6 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	22ff      	movs	r2, #255	; 0xff
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e2e:	d10e      	bne.n	8003e4e <HAL_RTC_GetAlarm+0x34>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e00d      	b.n	8003e6a <HAL_RTC_GetAlarm+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e68:	613b      	str	r3, [r7, #16]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	70da      	strb	r2, [r3, #3]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	605a      	str	r2, [r3, #4]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	0e1b      	lsrs	r3, r3, #24
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d125      	bne.n	8003f26 <HAL_RTC_GetAlarm+0x10c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f8eb 	bl	80040ba <RTC_Bcd2ToByte>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f8e2 	bl	80040ba <RTC_Bcd2ToByte>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	789b      	ldrb	r3, [r3, #2]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f8d9 	bl	80040ba <RTC_Bcd2ToByte>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f8cf 	bl	80040ba <RTC_Bcd2ToByte>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3718      	adds	r7, #24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f831 	bl	8003fbc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003f6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f907 	bl	800419c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003f9e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fa6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	775a      	strb	r2, [r3, #29]
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40010400 	.word	0x40010400

08003fbc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11c      	bne.n	800401e <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ff2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ff4:	f7fd f9a0 	bl	8001338 <HAL_GetTick>
 8003ff8:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ffa:	e009      	b.n	8004010 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ffc:	f7fd f99c 	bl	8001338 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800400a:	d901      	bls.n	8004010 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e007      	b.n	8004020 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ee      	beq.n	8003ffc <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d119      	bne.n	8004072 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f04f 32ff 	mov.w	r2, #4294967295
 8004046:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004048:	f7fd f976 	bl	8001338 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800404e:	e009      	b.n	8004064 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004050:	f7fd f972 	bl	8001338 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800405e:	d901      	bls.n	8004064 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e007      	b.n	8004074 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800408e:	e005      	b.n	800409c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004096:	7afb      	ldrb	r3, [r7, #11]
 8004098:	3b0a      	subs	r3, #10
 800409a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	2b09      	cmp	r3, #9
 80040a0:	d8f6      	bhi.n	8004090 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	7afb      	ldrb	r3, [r7, #11]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b2db      	uxtb	r3, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4413      	add	r3, r2
 80040e4:	b2db      	uxtb	r3, r3
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7f1b      	ldrb	r3, [r3, #28]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_RTCEx_DeactivateWakeUpTimer+0x14>
 8004100:	2302      	movs	r3, #2
 8004102:	e047      	b.n	8004194 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	22ca      	movs	r2, #202	; 0xca
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2253      	movs	r2, #83	; 0x53
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800413e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004140:	f7fd f8fa 	bl	8001338 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004146:	e013      	b.n	8004170 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004148:	f7fd f8f6 	bl	8001338 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004156:	d90b      	bls.n	8004170 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2203      	movs	r2, #3
 8004164:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e011      	b.n	8004194 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0e4      	beq.n	8004148 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e07b      	b.n	80042b8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d0:	d009      	beq.n	80041e6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	61da      	str	r2, [r3, #28]
 80041d8:	e005      	b.n	80041e6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d106      	bne.n	8004206 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f009 fc75 	bl	800daf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	ea42 0103 	orr.w	r1, r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f003 0104 	and.w	r1, r3, #4
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0210 	and.w	r2, r3, #16
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e01a      	b.n	8004308 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f009 fc44 	bl	800db78 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e03f      	b.n	80043a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f009 fc3c 	bl	800dbb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fdf9 	bl	8004f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b08a      	sub	sp, #40	; 0x28
 80043ae:	af02      	add	r7, sp, #8
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	f040 808c 	bne.w	80044e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Receive+0x2e>
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e084      	b.n	80044e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Receive+0x40>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e07d      	b.n	80044e6 <HAL_UART_Receive+0x13c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2222      	movs	r2, #34	; 0x22
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004406:	f7fc ff97 	bl	8001338 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	88fa      	ldrh	r2, [r7, #6]
 8004416:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d108      	bne.n	8004434 <HAL_UART_Receive+0x8a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d104      	bne.n	8004434 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e003      	b.n	800443c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004444:	e043      	b.n	80044ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	2120      	movs	r1, #32
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fb92 	bl	8004b7a <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e042      	b.n	80044e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	b29a      	uxth	r2, r3
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	3302      	adds	r3, #2
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	e01f      	b.n	80044c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d007      	beq.n	800449a <HAL_UART_Receive+0xf0>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <HAL_UART_Receive+0xfe>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e008      	b.n	80044ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1b6      	bne.n	8004446 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b20      	cmp	r3, #32
 8004506:	d130      	bne.n	800456a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Transmit_IT+0x26>
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e029      	b.n	800456c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_UART_Transmit_IT+0x38>
 8004522:	2302      	movs	r3, #2
 8004524:	e022      	b.n	800456c <HAL_UART_Transmit_IT+0x7e>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2221      	movs	r2, #33	; 0x21
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004564:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b20      	cmp	r3, #32
 800458e:	d11d      	bne.n	80045cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Receive_IT+0x26>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e016      	b.n	80045ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Receive_IT+0x38>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e00f      	b.n	80045ce <HAL_UART_Receive_IT+0x58>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	461a      	mov	r2, r3
 80045c0:	68b9      	ldr	r1, [r7, #8]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fb23 	bl	8004c0e <UART_Start_Receive_IT>
 80045c8:	4603      	mov	r3, r0
 80045ca:	e000      	b.n	80045ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d153      	bne.n	800469a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <HAL_UART_Transmit_DMA+0x26>
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e04c      	b.n	800469c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_UART_Transmit_DMA+0x38>
 800460c:	2302      	movs	r3, #2
 800460e:	e045      	b.n	800469c <HAL_UART_Transmit_DMA+0xc4>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2221      	movs	r2, #33	; 0x21
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463c:	4a19      	ldr	r2, [pc, #100]	; (80046a4 <HAL_UART_Transmit_DMA+0xcc>)
 800463e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	4a18      	ldr	r2, [pc, #96]	; (80046a8 <HAL_UART_Transmit_DMA+0xd0>)
 8004646:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_UART_Transmit_DMA+0xd4>)
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	2200      	movs	r2, #0
 8004656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3304      	adds	r3, #4
 800466c:	461a      	mov	r2, r3
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	f7fd fb14 	bl	8001c9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800467c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004694:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	e000      	b.n	800469c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	08004a79 	.word	0x08004a79
 80046a8:	08004acb 	.word	0x08004acb
 80046ac:	08004ae7 	.word	0x08004ae7

080046b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10d      	bne.n	8004702 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_UART_IRQHandler+0x52>
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fb7c 	bl	8004df8 <UART_Receive_IT>
      return;
 8004700:	e17b      	b.n	80049fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80b1 	beq.w	800486c <HAL_UART_IRQHandler+0x1bc>
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <HAL_UART_IRQHandler+0x70>
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80a6 	beq.w	800486c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_UART_IRQHandler+0x90>
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_UART_IRQHandler+0xb0>
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f043 0202 	orr.w	r2, r3, #2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_UART_IRQHandler+0xd0>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0204 	orr.w	r2, r3, #4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00f      	beq.n	80047aa <HAL_UART_IRQHandler+0xfa>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <HAL_UART_IRQHandler+0xee>
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0208 	orr.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 811e 	beq.w	80049f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_UART_IRQHandler+0x11e>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 fb15 	bl	8004df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <HAL_UART_IRQHandler+0x146>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d031      	beq.n	800485a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa57 	bl	8004caa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b40      	cmp	r3, #64	; 0x40
 8004808:	d123      	bne.n	8004852 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004818:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	2b00      	cmp	r3, #0
 8004820:	d013      	beq.n	800484a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	4a76      	ldr	r2, [pc, #472]	; (8004a00 <HAL_UART_IRQHandler+0x350>)
 8004828:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd fad1 	bl	8001dd6 <HAL_DMA_Abort_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e00e      	b.n	8004868 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f00c f890 	bl	8010970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	e00a      	b.n	8004868 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f00c f88c 	bl	8010970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e006      	b.n	8004868 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f00c f888 	bl	8010970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004866:	e0c3      	b.n	80049f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	bf00      	nop
    return;
 800486a:	e0c1      	b.n	80049f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	2b01      	cmp	r3, #1
 8004872:	f040 80a1 	bne.w	80049b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 809b 	beq.w	80049b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8095 	beq.w	80049b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d14e      	bne.n	8004950 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80048bc:	8a3b      	ldrh	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8098 	beq.w	80049f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c8:	8a3a      	ldrh	r2, [r7, #16]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	f080 8092 	bcs.w	80049f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8a3a      	ldrh	r2, [r7, #16]
 80048d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d02b      	beq.n	8004938 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0210 	bic.w	r2, r2, #16
 800492c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fa12 	bl	8001d5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004940:	b29b      	uxth	r3, r3
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	b29b      	uxth	r3, r3
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f86d 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800494e:	e051      	b.n	80049f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d047      	beq.n	80049f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d044      	beq.n	80049f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800497c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0210 	bic.w	r2, r2, #16
 80049aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049ac:	8a7b      	ldrh	r3, [r7, #18]
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f839 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049b6:	e01f      	b.n	80049f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_UART_IRQHandler+0x324>
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9ac 	bl	8004d2a <UART_Transmit_IT>
    return;
 80049d2:	e012      	b.n	80049fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_UART_IRQHandler+0x34a>
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f9ed 	bl	8004dc8 <UART_EndTransmit_IT>
    return;
 80049ee:	e004      	b.n	80049fa <HAL_UART_IRQHandler+0x34a>
    return;
 80049f0:	bf00      	nop
 80049f2:	e002      	b.n	80049fa <HAL_UART_IRQHandler+0x34a>
      return;
 80049f4:	bf00      	nop
 80049f6:	e000      	b.n	80049fa <HAL_UART_IRQHandler+0x34a>
      return;
 80049f8:	bf00      	nop
  }
}
 80049fa:	3728      	adds	r7, #40	; 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08004d03 	.word	0x08004d03

08004a04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr

08004a3e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	b2db      	uxtb	r3, r3
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d113      	bne.n	8004abc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004aba:	e002      	b.n	8004ac2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f00b ff29 	bl	8010914 <HAL_UART_TxCpltCallback>
}
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f7ff ff93 	bl	8004a04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	bf0c      	ite	eq
 8004b06:	2301      	moveq	r3, #1
 8004b08:	2300      	movne	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b21      	cmp	r3, #33	; 0x21
 8004b18:	d108      	bne.n	8004b2c <UART_DMAError+0x46>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2200      	movs	r2, #0
 8004b24:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004b26:	68b8      	ldr	r0, [r7, #8]
 8004b28:	f000 f8aa 	bl	8004c80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b22      	cmp	r3, #34	; 0x22
 8004b4c:	d108      	bne.n	8004b60 <UART_DMAError+0x7a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004b5a:	68b8      	ldr	r0, [r7, #8]
 8004b5c:	f000 f8a5 	bl	8004caa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f043 0210 	orr.w	r2, r3, #16
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f00b feff 	bl	8010970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b8a:	e02c      	b.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d028      	beq.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0x30>
 8004b9a:	f7fc fbcd 	bl	8001338 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d21d      	bcs.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bb8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e00f      	b.n	8004c06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d0c3      	beq.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2222      	movs	r2, #34	; 0x22
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c52:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c96:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cc0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d107      	bne.n	8004cea <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0210 	bic.w	r2, r2, #16
 8004ce8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f00b fe27 	bl	8010970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b21      	cmp	r3, #33	; 0x21
 8004d3c:	d13e      	bne.n	8004dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d46:	d114      	bne.n	8004d72 <UART_Transmit_IT+0x48>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d110      	bne.n	8004d72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	1c9a      	adds	r2, r3, #2
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e008      	b.n	8004d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	1c59      	adds	r1, r3, #1
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6211      	str	r1, [r2, #32]
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4619      	mov	r1, r3
 8004d92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10f      	bne.n	8004db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e000      	b.n	8004dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dbc:	2302      	movs	r3, #2
  }
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f00b fd93 	bl	8010914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b22      	cmp	r3, #34	; 0x22
 8004e0a:	f040 8099 	bne.w	8004f40 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d117      	bne.n	8004e48 <UART_Receive_IT+0x50>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	1c9a      	adds	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
 8004e46:	e026      	b.n	8004e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5a:	d007      	beq.n	8004e6c <UART_Receive_IT+0x74>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <UART_Receive_IT+0x82>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	e008      	b.n	8004e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d148      	bne.n	8004f3c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0220 	bic.w	r2, r2, #32
 8004eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d123      	bne.n	8004f32 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0210 	bic.w	r2, r2, #16
 8004efe:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d10a      	bne.n	8004f24 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7ff fd7c 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004f30:	e002      	b.n	8004f38 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff fd6f 	bl	8004a16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e002      	b.n	8004f42 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f8c:	f023 030c 	bic.w	r3, r3, #12
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	430b      	orrs	r3, r1
 8004f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a55      	ldr	r2, [pc, #340]	; (800510c <UART_SetConfig+0x1c0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d103      	bne.n	8004fc2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004fba:	f7fe f887 	bl	80030cc <HAL_RCC_GetPCLK2Freq>
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	e002      	b.n	8004fc8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004fc2:	f7fe f86f 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 8004fc6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	d14c      	bne.n	800506c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009a      	lsls	r2, r3, #2
 8004fdc:	441a      	add	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	4a49      	ldr	r2, [pc, #292]	; (8005110 <UART_SetConfig+0x1c4>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	0119      	lsls	r1, r3, #4
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009a      	lsls	r2, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	fbb2 f2f3 	udiv	r2, r2, r3
 8005008:	4b41      	ldr	r3, [pc, #260]	; (8005110 <UART_SetConfig+0x1c4>)
 800500a:	fba3 0302 	umull	r0, r3, r3, r2
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2064      	movs	r0, #100	; 0x64
 8005012:	fb00 f303 	mul.w	r3, r0, r3
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	3332      	adds	r3, #50	; 0x32
 800501c:	4a3c      	ldr	r2, [pc, #240]	; (8005110 <UART_SetConfig+0x1c4>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800502a:	4419      	add	r1, r3
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009a      	lsls	r2, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005042:	4b33      	ldr	r3, [pc, #204]	; (8005110 <UART_SetConfig+0x1c4>)
 8005044:	fba3 0302 	umull	r0, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2064      	movs	r0, #100	; 0x64
 800504c:	fb00 f303 	mul.w	r3, r0, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	3332      	adds	r3, #50	; 0x32
 8005056:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <UART_SetConfig+0x1c4>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f003 0207 	and.w	r2, r3, #7
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	440a      	add	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800506a:	e04a      	b.n	8005102 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009a      	lsls	r2, r3, #2
 8005076:	441a      	add	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005082:	4a23      	ldr	r2, [pc, #140]	; (8005110 <UART_SetConfig+0x1c4>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	0119      	lsls	r1, r3, #4
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009a      	lsls	r2, r3, #2
 8005096:	441a      	add	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a2:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <UART_SetConfig+0x1c4>)
 80050a4:	fba3 0302 	umull	r0, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	2064      	movs	r0, #100	; 0x64
 80050ac:	fb00 f303 	mul.w	r3, r0, r3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	3332      	adds	r3, #50	; 0x32
 80050b6:	4a16      	ldr	r2, [pc, #88]	; (8005110 <UART_SetConfig+0x1c4>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c2:	4419      	add	r1, r3
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009a      	lsls	r2, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80050da:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <UART_SetConfig+0x1c4>)
 80050dc:	fba3 0302 	umull	r0, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2064      	movs	r0, #100	; 0x64
 80050e4:	fb00 f303 	mul.w	r3, r0, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a08      	ldr	r2, [pc, #32]	; (8005110 <UART_SetConfig+0x1c4>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 020f 	and.w	r2, r3, #15
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	440a      	add	r2, r1
 8005100:	609a      	str	r2, [r3, #8]
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40013800 	.word	0x40013800
 8005110:	51eb851f 	.word	0x51eb851f

08005114 <BewegungssensorInit>:
bool BewegungInterruptAusgeloest;
bool WurdeBewegt;
bool WurdeBestaetigt;

void BewegungssensorInit()
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
	BewegungInterruptAusgeloest = false;
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <BewegungssensorInit+0x18>)
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
	WurdeBewegt = true;
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <BewegungssensorInit+0x1c>)
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	20000989 	.word	0x20000989
 8005130:	20000988 	.word	0x20000988

08005134 <PruefeInterruptStatus>:

void PruefeInterruptStatus()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	if(BewegungInterruptAusgeloest==true)
 8005138:	4b07      	ldr	r3, [pc, #28]	; (8005158 <PruefeInterruptStatus+0x24>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d009      	beq.n	8005154 <PruefeInterruptStatus+0x20>
		{
			BewegungInterruptAusgeloest=false;
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <PruefeInterruptStatus+0x24>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
			WurdeBewegt=true;
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <PruefeInterruptStatus+0x28>)
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
			SetzeBewegungssensorInDenSchlaf();
 800514c:	f000 f808 	bl	8005160 <SetzeBewegungssensorInDenSchlaf>
			RtcEnterLowPowerStopMode( );
 8005150:	f007 fe12 	bl	800cd78 <RtcEnterLowPowerStopMode>
		}
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000989 	.word	0x20000989
 800515c:	20000988 	.word	0x20000988

08005160 <SetzeBewegungssensorInDenSchlaf>:

void SetzeBewegungssensorInDenSchlaf()
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800516a:	4802      	ldr	r0, [pc, #8]	; (8005174 <SetzeBewegungssensorInDenSchlaf+0x14>)
 800516c:	f7fd f9b2 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40020400 	.word	0x40020400

08005178 <HoleDenBewegungssensorAusDemSchlaf>:

void HoleDenBewegungssensorAusDemSchlaf()
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800517c:	2201      	movs	r2, #1
 800517e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005182:	4802      	ldr	r0, [pc, #8]	; (800518c <HoleDenBewegungssensorAusDemSchlaf+0x14>)
 8005184:	f7fd f9a6 	bl	80024d4 <HAL_GPIO_WritePin>
}
 8005188:	bf00      	nop
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40020400 	.word	0x40020400

08005190 <OnRadioTxDone>:
 *        class c devices.
 */
static void OpenContinuousRx2Window( void );

static void OnRadioTxDone( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;
    TimerTime_t curTime = TimerGetCurrentTime( );
 8005196:	f00b fb68 	bl	801086a <TimerGetCurrentTime>
 800519a:	6178      	str	r0, [r7, #20]

    if( LoRaMacDeviceClass != CLASS_C )
 800519c:	4b49      	ldr	r3, [pc, #292]	; (80052c4 <OnRadioTxDone+0x134>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d003      	beq.n	80051ac <OnRadioTxDone+0x1c>
    {
        Radio.Sleep( );
 80051a4:	4b48      	ldr	r3, [pc, #288]	; (80052c8 <OnRadioTxDone+0x138>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4798      	blx	r3
 80051aa:	e001      	b.n	80051b0 <OnRadioTxDone+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 80051ac:	f002 fa14 	bl	80075d8 <OpenContinuousRx2Window>
    }

    // Setup timers
    if ( IsRxWindowsEnabled == true ) {
 80051b0:	4b46      	ldr	r3, [pc, #280]	; (80052cc <OnRadioTxDone+0x13c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d035      	beq.n	8005224 <OnRadioTxDone+0x94>
        TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
 80051b8:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <OnRadioTxDone+0x140>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4619      	mov	r1, r3
 80051be:	4845      	ldr	r0, [pc, #276]	; (80052d4 <OnRadioTxDone+0x144>)
 80051c0:	f00b fb3a 	bl	8010838 <TimerSetValue>
        TimerStart( &RxWindowTimer1 );
 80051c4:	4843      	ldr	r0, [pc, #268]	; (80052d4 <OnRadioTxDone+0x144>)
 80051c6:	f00b f933 	bl	8010430 <TimerStart>
        if ( LoRaMacDeviceClass != CLASS_C ) {
 80051ca:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <OnRadioTxDone+0x134>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d008      	beq.n	80051e4 <OnRadioTxDone+0x54>
            TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
 80051d2:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <OnRadioTxDone+0x148>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4619      	mov	r1, r3
 80051d8:	4840      	ldr	r0, [pc, #256]	; (80052dc <OnRadioTxDone+0x14c>)
 80051da:	f00b fb2d 	bl	8010838 <TimerSetValue>
            TimerStart( &RxWindowTimer2 );
 80051de:	483f      	ldr	r0, [pc, #252]	; (80052dc <OnRadioTxDone+0x14c>)
 80051e0:	f00b f926 	bl	8010430 <TimerStart>
        }
        if ( ( LoRaMacDeviceClass == CLASS_C ) || ( NodeAckRequested == true ) ) {
 80051e4:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <OnRadioTxDone+0x134>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d003      	beq.n	80051f4 <OnRadioTxDone+0x64>
 80051ec:	4b3c      	ldr	r3, [pc, #240]	; (80052e0 <OnRadioTxDone+0x150>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02b      	beq.n	800524c <OnRadioTxDone+0xbc>
            getPhy.Attribute = PHY_ACK_TIMEOUT;
 80051f4:	2312      	movs	r3, #18
 80051f6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80051f8:	4b3a      	ldr	r3, [pc, #232]	; (80052e4 <OnRadioTxDone+0x154>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f107 0210 	add.w	r2, r7, #16
 8005200:	4611      	mov	r1, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f004 fe38 	bl	8009e78 <RegionGetPhyParam>
 8005208:	4603      	mov	r3, r0
 800520a:	60fb      	str	r3, [r7, #12]
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + phyParam.Value );
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <OnRadioTxDone+0x148>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4413      	add	r3, r2
 8005214:	4619      	mov	r1, r3
 8005216:	4834      	ldr	r0, [pc, #208]	; (80052e8 <OnRadioTxDone+0x158>)
 8005218:	f00b fb0e 	bl	8010838 <TimerSetValue>
            TimerStart( &AckTimeoutTimer );
 800521c:	4832      	ldr	r0, [pc, #200]	; (80052e8 <OnRadioTxDone+0x158>)
 800521e:	f00b f907 	bl	8010430 <TimerStart>
 8005222:	e013      	b.n	800524c <OnRadioTxDone+0xbc>
        }
    } else {
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005224:	4b31      	ldr	r3, [pc, #196]	; (80052ec <OnRadioTxDone+0x15c>)
 8005226:	2200      	movs	r2, #0
 8005228:	705a      	strb	r2, [r3, #1]
        LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800522a:	2004      	movs	r0, #4
 800522c:	f003 ffba 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>

        if ( LoRaMacFlags.Value == 0 ) {
 8005230:	4b2f      	ldr	r3, [pc, #188]	; (80052f0 <OnRadioTxDone+0x160>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <OnRadioTxDone+0xb2>
            LoRaMacFlags.Bits.McpsReq = 1;
 8005238:	4a2d      	ldr	r2, [pc, #180]	; (80052f0 <OnRadioTxDone+0x160>)
 800523a:	7813      	ldrb	r3, [r2, #0]
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	7013      	strb	r3, [r2, #0]
        }
        LoRaMacFlags.Bits.MacDone = 1;
 8005242:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <OnRadioTxDone+0x160>)
 8005244:	7813      	ldrb	r3, [r2, #0]
 8005246:	f043 0320 	orr.w	r3, r3, #32
 800524a:	7013      	strb	r3, [r2, #0]
    }

    // Verify if the last uplink was a join request
    if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 800524c:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <OnRadioTxDone+0x160>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <OnRadioTxDone+0xda>
 800525a:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <OnRadioTxDone+0x164>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <OnRadioTxDone+0xda>
        LastTxIsJoinRequest = true;
 8005262:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <OnRadioTxDone+0x168>)
 8005264:	2201      	movs	r2, #1
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e002      	b.n	8005270 <OnRadioTxDone+0xe0>
    } else {
        LastTxIsJoinRequest = false;
 800526a:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <OnRadioTxDone+0x168>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
    }

    // Store last Tx channel
    LastTxChannel = Channel;
 8005270:	4b22      	ldr	r3, [pc, #136]	; (80052fc <OnRadioTxDone+0x16c>)
 8005272:	781a      	ldrb	r2, [r3, #0]
 8005274:	4b22      	ldr	r3, [pc, #136]	; (8005300 <OnRadioTxDone+0x170>)
 8005276:	701a      	strb	r2, [r3, #0]
    // Update last tx done time for the current channel
    txDone.Channel = Channel;
 8005278:	4b20      	ldr	r3, [pc, #128]	; (80052fc <OnRadioTxDone+0x16c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	713b      	strb	r3, [r7, #4]
    txDone.Joined = IsLoRaMacNetworkJoined;
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <OnRadioTxDone+0x174>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	717b      	strb	r3, [r7, #5]
    txDone.LastTxDoneTime = curTime;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	60bb      	str	r3, [r7, #8]
    RegionSetBandTxDone( LoRaMacRegion, &txDone );
 8005288:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <OnRadioTxDone+0x154>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	1d3a      	adds	r2, r7, #4
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f004 fe0a 	bl	8009eaa <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    AggregatedLastTxDoneTime = curTime;
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <OnRadioTxDone+0x178>)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	6013      	str	r3, [r2, #0]

    if ( NodeAckRequested == false ) {
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <OnRadioTxDone+0x150>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f083 0301 	eor.w	r3, r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <OnRadioTxDone+0x12c>
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <OnRadioTxDone+0x15c>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	705a      	strb	r2, [r3, #1]
        ChannelsNbRepCounter++;
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <OnRadioTxDone+0x17c>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b14      	ldr	r3, [pc, #80]	; (800530c <OnRadioTxDone+0x17c>)
 80052ba:	701a      	strb	r2, [r3, #0]
    }
}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	2000014c 	.word	0x2000014c
 80052c8:	080130d4 	.word	0x080130d4
 80052cc:	20000008 	.word	0x20000008
 80052d0:	20000a68 	.word	0x20000a68
 80052d4:	200009f8 	.word	0x200009f8
 80052d8:	20000af0 	.word	0x20000af0
 80052dc:	200009a0 	.word	0x200009a0
 80052e0:	20000364 	.word	0x20000364
 80052e4:	20000114 	.word	0x20000114
 80052e8:	20000ac8 	.word	0x20000ac8
 80052ec:	200009b8 	.word	0x200009b8
 80052f0:	20000a10 	.word	0x20000a10
 80052f4:	2000098c 	.word	0x2000098c
 80052f8:	2000047b 	.word	0x2000047b
 80052fc:	20000479 	.word	0x20000479
 8005300:	2000047a 	.word	0x2000047a
 8005304:	2000035d 	.word	0x2000035d
 8005308:	20000470 	.word	0x20000470
 800530c:	2000046c 	.word	0x2000046c

08005310 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
    LoRaMacState |= LORAMAC_RX_ABORT;
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <PrepareRxDoneAbort+0x38>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531c:	4a0a      	ldr	r2, [pc, #40]	; (8005348 <PrepareRxDoneAbort+0x38>)
 800531e:	6013      	str	r3, [r2, #0]

    if ( NodeAckRequested ) {
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <PrepareRxDoneAbort+0x3c>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( );
 8005328:	f001 f940 	bl	80065ac <OnAckTimeoutTimerEvent>
    }

    LoRaMacFlags.Bits.McpsInd = 1;
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <PrepareRxDoneAbort+0x40>)
 800532e:	7813      	ldrb	r3, [r2, #0]
 8005330:	f043 0302 	orr.w	r3, r3, #2
 8005334:	7013      	strb	r3, [r2, #0]
    LoRaMacFlags.Bits.MacDone = 1;
 8005336:	4a06      	ldr	r2, [pc, #24]	; (8005350 <PrepareRxDoneAbort+0x40>)
 8005338:	7813      	ldrb	r3, [r2, #0]
 800533a:	f043 0320 	orr.w	r3, r3, #32
 800533e:	7013      	strb	r3, [r2, #0]

    // Trig OnMacCheckTimerEvent call as soon as possible
    OnMacStateCheckTimerEvent();
 8005340:	f000 fda2 	bl	8005e88 <OnMacStateCheckTimerEvent>
}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000480 	.word	0x20000480
 800534c:	20000364 	.word	0x20000364
 8005350:	20000a10 	.word	0x20000a10

08005354 <OnRadioRxDone>:

void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b09d      	sub	sp, #116	; 0x74
 8005358:	af04      	add	r7, sp, #16
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	4608      	mov	r0, r1
 800535e:	4611      	mov	r1, r2
 8005360:	461a      	mov	r2, r3
 8005362:	4603      	mov	r3, r0
 8005364:	817b      	strh	r3, [r7, #10]
 8005366:	460b      	mov	r3, r1
 8005368:	813b      	strh	r3, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
	uint8_t * temp = payload;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	64bb      	str	r3, [r7, #72]	; 0x48
    LoRaMacFrameCtrl_t fCtrl;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    uint8_t pktHeaderLen = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t address = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t appPayloadStartIndex = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t port = 0xFF;
 8005382:	23ff      	movs	r3, #255	; 0xff
 8005384:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t frameLen = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint32_t mic = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
    uint32_t micRx = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t sequenceCounter = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t sequenceCounterPrev = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t sequenceCounterDiff = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	867b      	strh	r3, [r7, #50]	; 0x32
    uint32_t downLinkCounter = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	65fb      	str	r3, [r7, #92]	; 0x5c

    MulticastParams_t *curMulticastParams = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *nwkSKey = LoRaMacNwkSKey;
 80053aa:	4b99      	ldr	r3, [pc, #612]	; (8005610 <OnRadioRxDone+0x2bc>)
 80053ac:	657b      	str	r3, [r7, #84]	; 0x54
    uint8_t *appSKey = LoRaMacAppSKey;
 80053ae:	4b99      	ldr	r3, [pc, #612]	; (8005614 <OnRadioRxDone+0x2c0>)
 80053b0:	653b      	str	r3, [r7, #80]	; 0x50

    uint8_t multicast = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    bool isMicOk = false;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    McpsConfirm.AckReceived = false;
 80053be:	4b96      	ldr	r3, [pc, #600]	; (8005618 <OnRadioRxDone+0x2c4>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	711a      	strb	r2, [r3, #4]
    McpsIndication.Rssi = rssi;
 80053c4:	4a95      	ldr	r2, [pc, #596]	; (800561c <OnRadioRxDone+0x2c8>)
 80053c6:	893b      	ldrh	r3, [r7, #8]
 80053c8:	81d3      	strh	r3, [r2, #14]
    McpsIndication.Snr = snr;
 80053ca:	4a94      	ldr	r2, [pc, #592]	; (800561c <OnRadioRxDone+0x2c8>)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	7413      	strb	r3, [r2, #16]
    McpsIndication.RxSlot = RxSlot;
 80053d0:	4b93      	ldr	r3, [pc, #588]	; (8005620 <OnRadioRxDone+0x2cc>)
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	4b91      	ldr	r3, [pc, #580]	; (800561c <OnRadioRxDone+0x2c8>)
 80053d6:	745a      	strb	r2, [r3, #17]
    McpsIndication.Port = 0;
 80053d8:	4b90      	ldr	r3, [pc, #576]	; (800561c <OnRadioRxDone+0x2c8>)
 80053da:	2200      	movs	r2, #0
 80053dc:	70da      	strb	r2, [r3, #3]
    McpsIndication.Multicast = 0;
 80053de:	4b8f      	ldr	r3, [pc, #572]	; (800561c <OnRadioRxDone+0x2c8>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	709a      	strb	r2, [r3, #2]
    McpsIndication.FramePending = 0;
 80053e4:	4b8d      	ldr	r3, [pc, #564]	; (800561c <OnRadioRxDone+0x2c8>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	715a      	strb	r2, [r3, #5]
    McpsIndication.Buffer = NULL;
 80053ea:	4b8c      	ldr	r3, [pc, #560]	; (800561c <OnRadioRxDone+0x2c8>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
    McpsIndication.BufferSize = 0;
 80053f0:	4b8a      	ldr	r3, [pc, #552]	; (800561c <OnRadioRxDone+0x2c8>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	731a      	strb	r2, [r3, #12]
    McpsIndication.RxData = false;
 80053f6:	4b89      	ldr	r3, [pc, #548]	; (800561c <OnRadioRxDone+0x2c8>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	735a      	strb	r2, [r3, #13]
    McpsIndication.AckReceived = false;
 80053fc:	4b87      	ldr	r3, [pc, #540]	; (800561c <OnRadioRxDone+0x2c8>)
 80053fe:	2200      	movs	r2, #0
 8005400:	749a      	strb	r2, [r3, #18]
    McpsIndication.DownLinkCounter = 0;
 8005402:	4b86      	ldr	r3, [pc, #536]	; (800561c <OnRadioRxDone+0x2c8>)
 8005404:	2200      	movs	r2, #0
 8005406:	615a      	str	r2, [r3, #20]
    McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8005408:	4b84      	ldr	r3, [pc, #528]	; (800561c <OnRadioRxDone+0x2c8>)
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]

    Radio.Sleep( );
 800540e:	4b85      	ldr	r3, [pc, #532]	; (8005624 <OnRadioRxDone+0x2d0>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	4798      	blx	r3
    TimerStop( &RxWindowTimer2 );
 8005414:	4884      	ldr	r0, [pc, #528]	; (8005628 <OnRadioRxDone+0x2d4>)
 8005416:	f00b f953 	bl	80106c0 <TimerStop>



    macHdr.Value = payload[pktHeaderLen++];
 800541a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005424:	461a      	mov	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    switch ( macHdr.Bits.MType ) {
 8005430:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005434:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	2b06      	cmp	r3, #6
 800543e:	f200 83fd 	bhi.w	8005c3c <OnRadioRxDone+0x8e8>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <OnRadioRxDone+0xf4>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005465 	.word	0x08005465
 800544c:	08005c3d 	.word	0x08005c3d
 8005450:	08005655 	.word	0x08005655
 8005454:	08005c3d 	.word	0x08005c3d
 8005458:	08005655 	.word	0x08005655
 800545c:	08005c3d 	.word	0x08005c3d
 8005460:	08005bfd 	.word	0x08005bfd
        case FRAME_TYPE_JOIN_ACCEPT:
            if ( IsLoRaMacNetworkJoined == true ) {
 8005464:	4b71      	ldr	r3, [pc, #452]	; (800562c <OnRadioRxDone+0x2d8>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d006      	beq.n	800547a <OnRadioRxDone+0x126>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800546c:	4b6b      	ldr	r3, [pc, #428]	; (800561c <OnRadioRxDone+0x2c8>)
 800546e:	2201      	movs	r2, #1
 8005470:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 8005472:	f7ff ff4d 	bl	8005310 <PrepareRxDoneAbort>
                return;
 8005476:	f000 bc04 	b.w	8005c82 <OnRadioRxDone+0x92e>
            }
            LoRaMacJoinDecrypt( payload + 1, size - 1, LoRaMacAppKey, LoRaMacRxPayload + 1 );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1c58      	adds	r0, r3, #1
 800547e:	897b      	ldrh	r3, [r7, #10]
 8005480:	3b01      	subs	r3, #1
 8005482:	b299      	uxth	r1, r3
 8005484:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <OnRadioRxDone+0x2dc>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	4b6a      	ldr	r3, [pc, #424]	; (8005634 <OnRadioRxDone+0x2e0>)
 800548a:	f004 f8a1 	bl	80095d0 <LoRaMacJoinDecrypt>

            LoRaMacRxPayload[0] = macHdr.Value;
 800548e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005492:	4b69      	ldr	r3, [pc, #420]	; (8005638 <OnRadioRxDone+0x2e4>)
 8005494:	701a      	strb	r2, [r3, #0]

            LoRaMacJoinComputeMic( LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic );
 8005496:	897b      	ldrh	r3, [r7, #10]
 8005498:	3b04      	subs	r3, #4
 800549a:	b299      	uxth	r1, r3
 800549c:	4b64      	ldr	r3, [pc, #400]	; (8005630 <OnRadioRxDone+0x2dc>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	f107 0310 	add.w	r3, r7, #16
 80054a4:	4864      	ldr	r0, [pc, #400]	; (8005638 <OnRadioRxDone+0x2e4>)
 80054a6:	f004 f861 	bl	800956c <LoRaMacJoinComputeMic>

            micRx |= ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	3b04      	subs	r3, #4
 80054ae:	4a62      	ldr	r2, [pc, #392]	; (8005638 <OnRadioRxDone+0x2e4>)
 80054b0:	5cd3      	ldrb	r3, [r2, r3]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	4313      	orrs	r3, r2
 80054b8:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 80054ba:	897b      	ldrh	r3, [r7, #10]
 80054bc:	3b03      	subs	r3, #3
 80054be:	4a5e      	ldr	r2, [pc, #376]	; (8005638 <OnRadioRxDone+0x2e4>)
 80054c0:	5cd3      	ldrb	r3, [r2, r3]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054c6:	4313      	orrs	r3, r2
 80054c8:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	3b02      	subs	r3, #2
 80054ce:	4a5a      	ldr	r2, [pc, #360]	; (8005638 <OnRadioRxDone+0x2e4>)
 80054d0:	5cd3      	ldrb	r3, [r2, r3]
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d6:	4313      	orrs	r3, r2
 80054d8:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	3b01      	subs	r3, #1
 80054de:	4a56      	ldr	r2, [pc, #344]	; (8005638 <OnRadioRxDone+0x2e4>)
 80054e0:	5cd3      	ldrb	r3, [r2, r3]
 80054e2:	061b      	lsls	r3, r3, #24
 80054e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e6:	4313      	orrs	r3, r2
 80054e8:	63bb      	str	r3, [r7, #56]	; 0x38
            if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80054ea:	2000      	movs	r0, #0
 80054ec:	f003 fe96 	bl	800921c <LoRaMacConfirmQueueIsCmdActive>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 83a8 	beq.w	8005c48 <OnRadioRxDone+0x8f4>
            {
                if( micRx == mic ) {
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fc:	429a      	cmp	r2, r3
 80054fe:	f040 8081 	bne.w	8005604 <OnRadioRxDone+0x2b0>
                    LoRaMacJoinComputeSKeys( LoRaMacAppKey, LoRaMacRxPayload + 1, LoRaMacDevNonce, LoRaMacNwkSKey, LoRaMacAppSKey );
 8005502:	4b4b      	ldr	r3, [pc, #300]	; (8005630 <OnRadioRxDone+0x2dc>)
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	494b      	ldr	r1, [pc, #300]	; (8005634 <OnRadioRxDone+0x2e0>)
 8005508:	4b4c      	ldr	r3, [pc, #304]	; (800563c <OnRadioRxDone+0x2e8>)
 800550a:	881a      	ldrh	r2, [r3, #0]
 800550c:	4b41      	ldr	r3, [pc, #260]	; (8005614 <OnRadioRxDone+0x2c0>)
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	4b3f      	ldr	r3, [pc, #252]	; (8005610 <OnRadioRxDone+0x2bc>)
 8005512:	f004 f887 	bl	8009624 <LoRaMacJoinComputeSKeys>

                    LoRaMacNetID = ( uint32_t )LoRaMacRxPayload[4];
 8005516:	4b48      	ldr	r3, [pc, #288]	; (8005638 <OnRadioRxDone+0x2e4>)
 8005518:	791b      	ldrb	r3, [r3, #4]
 800551a:	461a      	mov	r2, r3
 800551c:	4b48      	ldr	r3, [pc, #288]	; (8005640 <OnRadioRxDone+0x2ec>)
 800551e:	601a      	str	r2, [r3, #0]
                    LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[5] << 8 );
 8005520:	4b45      	ldr	r3, [pc, #276]	; (8005638 <OnRadioRxDone+0x2e4>)
 8005522:	795b      	ldrb	r3, [r3, #5]
 8005524:	021a      	lsls	r2, r3, #8
 8005526:	4b46      	ldr	r3, [pc, #280]	; (8005640 <OnRadioRxDone+0x2ec>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	4a44      	ldr	r2, [pc, #272]	; (8005640 <OnRadioRxDone+0x2ec>)
 800552e:	6013      	str	r3, [r2, #0]
                    LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 8005530:	4b41      	ldr	r3, [pc, #260]	; (8005638 <OnRadioRxDone+0x2e4>)
 8005532:	799b      	ldrb	r3, [r3, #6]
 8005534:	041a      	lsls	r2, r3, #16
 8005536:	4b42      	ldr	r3, [pc, #264]	; (8005640 <OnRadioRxDone+0x2ec>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	4a40      	ldr	r2, [pc, #256]	; (8005640 <OnRadioRxDone+0x2ec>)
 800553e:	6013      	str	r3, [r2, #0]

                    LoRaMacDevAddr = ( uint32_t )LoRaMacRxPayload[7];
 8005540:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <OnRadioRxDone+0x2e4>)
 8005542:	79db      	ldrb	r3, [r3, #7]
 8005544:	461a      	mov	r2, r3
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005548:	601a      	str	r2, [r3, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[8] << 8 );
 800554a:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <OnRadioRxDone+0x2e4>)
 800554c:	7a1b      	ldrb	r3, [r3, #8]
 800554e:	021a      	lsls	r2, r3, #8
 8005550:	4b3c      	ldr	r3, [pc, #240]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4313      	orrs	r3, r2
 8005556:	4a3b      	ldr	r2, [pc, #236]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005558:	6013      	str	r3, [r2, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[9] << 16 );
 800555a:	4b37      	ldr	r3, [pc, #220]	; (8005638 <OnRadioRxDone+0x2e4>)
 800555c:	7a5b      	ldrb	r3, [r3, #9]
 800555e:	041a      	lsls	r2, r3, #16
 8005560:	4b38      	ldr	r3, [pc, #224]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	4a37      	ldr	r2, [pc, #220]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005568:	6013      	str	r3, [r2, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 800556a:	4b33      	ldr	r3, [pc, #204]	; (8005638 <OnRadioRxDone+0x2e4>)
 800556c:	7a9b      	ldrb	r3, [r3, #10]
 800556e:	061a      	lsls	r2, r3, #24
 8005570:	4b34      	ldr	r3, [pc, #208]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	4a33      	ldr	r2, [pc, #204]	; (8005644 <OnRadioRxDone+0x2f0>)
 8005578:	6013      	str	r3, [r2, #0]

                    // DLSettings
                    LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 800557a:	4b2f      	ldr	r3, [pc, #188]	; (8005638 <OnRadioRxDone+0x2e4>)
 800557c:	7adb      	ldrb	r3, [r3, #11]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	b2da      	uxtb	r2, r3
 8005588:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <OnRadioRxDone+0x2f4>)
 800558a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    LoRaMacParams.Rx2Channel.Datarate = LoRaMacRxPayload[11] & 0x0F;
 800558e:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <OnRadioRxDone+0x2e4>)
 8005590:	7adb      	ldrb	r3, [r3, #11]
 8005592:	f003 030f 	and.w	r3, r3, #15
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <OnRadioRxDone+0x2f4>)
 800559a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                    // RxDelay
                    LoRaMacParams.ReceiveDelay1 = ( LoRaMacRxPayload[12] & 0x0F );
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <OnRadioRxDone+0x2e4>)
 80055a0:	7b1b      	ldrb	r3, [r3, #12]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	4a28      	ldr	r2, [pc, #160]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055a8:	6113      	str	r3, [r2, #16]
                    if( LoRaMacParams.ReceiveDelay1 == 0 ) {
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <OnRadioRxDone+0x264>
                        LoRaMacParams.ReceiveDelay1 = 1;
 80055b2:	4b25      	ldr	r3, [pc, #148]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	611a      	str	r2, [r3, #16]
                    }
                    LoRaMacParams.ReceiveDelay1 *= 1000;
 80055b8:	4b23      	ldr	r3, [pc, #140]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055c0:	fb02 f303 	mul.w	r3, r2, r3
 80055c4:	4a20      	ldr	r2, [pc, #128]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055c6:	6113      	str	r3, [r2, #16]
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 80055c8:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <OnRadioRxDone+0x2f4>)
 80055d2:	6153      	str	r3, [r2, #20]
                    // Apply CF list
                    applyCFList.Payload = &LoRaMacRxPayload[13];
 80055d4:	4b1d      	ldr	r3, [pc, #116]	; (800564c <OnRadioRxDone+0x2f8>)
 80055d6:	61fb      	str	r3, [r7, #28]
                    // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                    applyCFList.Size = size - 17;
 80055d8:	897b      	ldrh	r3, [r7, #10]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	3b11      	subs	r3, #17
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f887 3020 	strb.w	r3, [r7, #32]

                    RegionApplyCFList( LoRaMacRegion, &applyCFList );
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <OnRadioRxDone+0x2fc>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f107 021c 	add.w	r2, r7, #28
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f004 fc98 	bl	8009f24 <RegionApplyCFList>

                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80055f4:	2100      	movs	r1, #0
 80055f6:	2000      	movs	r0, #0
 80055f8:	f003 fd84 	bl	8009104 <LoRaMacConfirmQueueSetStatus>
                    IsLoRaMacNetworkJoined = true;
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <OnRadioRxDone+0x2d8>)
 80055fe:	2201      	movs	r2, #1
 8005600:	701a      	strb	r2, [r3, #0]
//                	LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
            	} else {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 8005602:	e321      	b.n	8005c48 <OnRadioRxDone+0x8f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8005604:	2100      	movs	r1, #0
 8005606:	2007      	movs	r0, #7
 8005608:	f003 fd7c 	bl	8009104 <LoRaMacConfirmQueueSetStatus>
            break;
 800560c:	e31c      	b.n	8005c48 <OnRadioRxDone+0x8f4>
 800560e:	bf00      	nop
 8005610:	20000120 	.word	0x20000120
 8005614:	20000130 	.word	0x20000130
 8005618:	200009b8 	.word	0x200009b8
 800561c:	200009e0 	.word	0x200009e0
 8005620:	20000a6c 	.word	0x20000a6c
 8005624:	080130d4 	.word	0x080130d4
 8005628:	200009a0 	.word	0x200009a0
 800562c:	2000035d 	.word	0x2000035d
 8005630:	20000ac4 	.word	0x20000ac4
 8005634:	20000255 	.word	0x20000255
 8005638:	20000254 	.word	0x20000254
 800563c:	20000a50 	.word	0x20000a50
 8005640:	20000140 	.word	0x20000140
 8005644:	20000144 	.word	0x20000144
 8005648:	20000a70 	.word	0x20000a70
 800564c:	20000261 	.word	0x20000261
 8005650:	20000114 	.word	0x20000114
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN: {
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8005654:	4bad      	ldr	r3, [pc, #692]	; (800590c <OnRadioRxDone+0x5b8>)
 8005656:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800565a:	76bb      	strb	r3, [r7, #26]
            getPhy.Datarate = McpsIndication.RxDatarate;
 800565c:	4bac      	ldr	r3, [pc, #688]	; (8005910 <OnRadioRxDone+0x5bc>)
 800565e:	791b      	ldrb	r3, [r3, #4]
 8005660:	b25b      	sxtb	r3, r3
 8005662:	767b      	strb	r3, [r7, #25]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8005664:	2309      	movs	r3, #9
 8005666:	763b      	strb	r3, [r7, #24]

            // Get the maximum payload length
            if( LoRaMacParams.RepeaterSupport == true ) {
 8005668:	4ba8      	ldr	r3, [pc, #672]	; (800590c <OnRadioRxDone+0x5b8>)
 800566a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <OnRadioRxDone+0x322>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8005672:	230a      	movs	r3, #10
 8005674:	763b      	strb	r3, [r7, #24]
            }
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8005676:	4ba7      	ldr	r3, [pc, #668]	; (8005914 <OnRadioRxDone+0x5c0>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f107 0218 	add.w	r2, r7, #24
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f004 fbf9 	bl	8009e78 <RegionGetPhyParam>
 8005686:	4603      	mov	r3, r0
 8005688:	617b      	str	r3, [r7, #20]
            if ( MAX( 0, ( int16_t )( ( int16_t )size - ( int16_t )LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > phyParam.Value ) {
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	3b0d      	subs	r3, #13
 800568e:	b29b      	uxth	r3, r3
 8005690:	b21b      	sxth	r3, r3
 8005692:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005696:	b21b      	sxth	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	429a      	cmp	r2, r3
 800569e:	d905      	bls.n	80056ac <OnRadioRxDone+0x358>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80056a0:	4b9b      	ldr	r3, [pc, #620]	; (8005910 <OnRadioRxDone+0x5bc>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 80056a6:	f7ff fe33 	bl	8005310 <PrepareRxDoneAbort>
                return;
 80056aa:	e2ea      	b.n	8005c82 <OnRadioRxDone+0x92e>
            }

            address = payload[pktHeaderLen++];
 80056ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80056b6:	461a      	mov	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 8 );
 80056c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d6:	4313      	orrs	r3, r2
 80056d8:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 16 );
 80056da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80056e4:	461a      	mov	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056f0:	4313      	orrs	r3, r2
 80056f2:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 24 );
 80056f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80056fe:	461a      	mov	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	061b      	lsls	r3, r3, #24
 8005708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800570a:	4313      	orrs	r3, r2
 800570c:	643b      	str	r3, [r7, #64]	; 0x40

            fCtrl.Value = payload[pktHeaderLen++];
 800570e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005718:	461a      	mov	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if ( address != LoRaMacDevAddr ) {
 8005724:	4b7c      	ldr	r3, [pc, #496]	; (8005918 <OnRadioRxDone+0x5c4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800572a:	429a      	cmp	r2, r3
 800572c:	d040      	beq.n	80057b0 <OnRadioRxDone+0x45c>
                curMulticastParams = MulticastChannels;
 800572e:	4b7b      	ldr	r3, [pc, #492]	; (800591c <OnRadioRxDone+0x5c8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	65bb      	str	r3, [r7, #88]	; 0x58
                while ( curMulticastParams != NULL ) {
 8005734:	e014      	b.n	8005760 <OnRadioRxDone+0x40c>
                    if ( address == curMulticastParams->Address ) {
 8005736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800573c:	429a      	cmp	r2, r3
 800573e:	d10c      	bne.n	800575a <OnRadioRxDone+0x406>
                        multicast = 1;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        nwkSKey = curMulticastParams->NwkSKey;
 8005746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005748:	3304      	adds	r3, #4
 800574a:	657b      	str	r3, [r7, #84]	; 0x54
                        appSKey = curMulticastParams->AppSKey;
 800574c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800574e:	3314      	adds	r3, #20
 8005750:	653b      	str	r3, [r7, #80]	; 0x50
                        downLinkCounter = curMulticastParams->DownLinkCounter;
 8005752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	65fb      	str	r3, [r7, #92]	; 0x5c
                        break;
 8005758:	e005      	b.n	8005766 <OnRadioRxDone+0x412>
                    }
                    curMulticastParams = curMulticastParams->Next;
 800575a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	65bb      	str	r3, [r7, #88]	; 0x58
                while ( curMulticastParams != NULL ) {
 8005760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e7      	bne.n	8005736 <OnRadioRxDone+0x3e2>
                }
                if ( multicast == 0 ) {
 8005766:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800576a:	2b00      	cmp	r3, #0
 800576c:	d105      	bne.n	800577a <OnRadioRxDone+0x426>
                    // We are not the destination of this frame.
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800576e:	4b68      	ldr	r3, [pc, #416]	; (8005910 <OnRadioRxDone+0x5bc>)
 8005770:	220b      	movs	r2, #11
 8005772:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 8005774:	f7ff fdcc 	bl	8005310 <PrepareRxDoneAbort>
                    return;
 8005778:	e283      	b.n	8005c82 <OnRadioRxDone+0x92e>
                }
                if( ( macHdr.Bits.MType != FRAME_TYPE_DATA_UNCONFIRMED_DOWN ) ||
 800577a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800577e:	f023 031f 	bic.w	r3, r3, #31
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d10d      	bne.n	80057a4 <OnRadioRxDone+0x450>
                        ( fCtrl.Bits.Ack == 1 ) ||
 8005788:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	b2db      	uxtb	r3, r3
                if( ( macHdr.Bits.MType != FRAME_TYPE_DATA_UNCONFIRMED_DOWN ) ||
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <OnRadioRxDone+0x450>
                        ( fCtrl.Bits.AdrAckReq == 1 ) ) {
 8005796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	b2db      	uxtb	r3, r3
                        ( fCtrl.Bits.Ack == 1 ) ||
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00f      	beq.n	80057c4 <OnRadioRxDone+0x470>
                    // Wrong multicast message format. Refer to chapter 11.2.2 of the specification
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MULTICAST_FAIL;
 80057a4:	4b5a      	ldr	r3, [pc, #360]	; (8005910 <OnRadioRxDone+0x5bc>)
 80057a6:	220d      	movs	r2, #13
 80057a8:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 80057aa:	f7ff fdb1 	bl	8005310 <PrepareRxDoneAbort>
                    return;
 80057ae:	e268      	b.n	8005c82 <OnRadioRxDone+0x92e>
                }
            } else {
                multicast = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                nwkSKey = LoRaMacNwkSKey;
 80057b6:	4b5a      	ldr	r3, [pc, #360]	; (8005920 <OnRadioRxDone+0x5cc>)
 80057b8:	657b      	str	r3, [r7, #84]	; 0x54
                appSKey = LoRaMacAppSKey;
 80057ba:	4b5a      	ldr	r3, [pc, #360]	; (8005924 <OnRadioRxDone+0x5d0>)
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
                downLinkCounter = DownLinkCounter;
 80057be:	4b5a      	ldr	r3, [pc, #360]	; (8005928 <OnRadioRxDone+0x5d4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	65fb      	str	r3, [r7, #92]	; 0x5c
            }

            sequenceCounter = ( uint16_t )payload[pktHeaderLen++];
 80057c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80057ce:	461a      	mov	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            sequenceCounter |= ( uint16_t )payload[pktHeaderLen++] << 8;
 80057d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80057e2:	461a      	mov	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	b21a      	sxth	r2, r3
 80057ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b21b      	sxth	r3, r3
 80057f6:	86fb      	strh	r3, [r7, #54]	; 0x36

            appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 80057f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005800:	b2db      	uxtb	r3, r3
 8005802:	3308      	adds	r3, #8
 8005804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            micRx |= ( uint32_t )payload[size - LORAMAC_MFR_LEN];
 8005808:	897b      	ldrh	r3, [r7, #10]
 800580a:	3b04      	subs	r3, #4
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	4313      	orrs	r3, r2
 8005818:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 1] << 8 );
 800581a:	897b      	ldrh	r3, [r7, #10]
 800581c:	3b03      	subs	r3, #3
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005828:	4313      	orrs	r3, r2
 800582a:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 800582c:	897b      	ldrh	r3, [r7, #10]
 800582e:	3b02      	subs	r3, #2
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800583a:	4313      	orrs	r3, r2
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	3b01      	subs	r3, #1
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	061b      	lsls	r3, r3, #24
 800584a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584c:	4313      	orrs	r3, r2
 800584e:	63bb      	str	r3, [r7, #56]	; 0x38

            sequenceCounterPrev = ( uint16_t )downLinkCounter;
 8005850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005852:	86bb      	strh	r3, [r7, #52]	; 0x34
            sequenceCounterDiff = ( sequenceCounter - sequenceCounterPrev );
 8005854:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005856:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	867b      	strh	r3, [r7, #50]	; 0x32

            if ( sequenceCounterDiff < ( 1 << 15 ) ) {
 800585c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005860:	2b00      	cmp	r3, #0
 8005862:	db1a      	blt.n	800589a <OnRadioRxDone+0x546>
                downLinkCounter += sequenceCounterDiff;
 8005864:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005866:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005868:	4413      	add	r3, r2
 800586a:	65fb      	str	r3, [r7, #92]	; 0x5c
                LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 800586c:	897b      	ldrh	r3, [r7, #10]
 800586e:	3b04      	subs	r3, #4
 8005870:	b299      	uxth	r1, r3
 8005872:	f107 0310 	add.w	r3, r7, #16
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	2301      	movs	r3, #1
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005882:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f003 fd4d 	bl	8009324 <LoRaMacComputeMic>
                if ( micRx == mic ) {
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800588e:	429a      	cmp	r2, r3
 8005890:	d123      	bne.n	80058da <OnRadioRxDone+0x586>
                    isMicOk = true;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005898:	e01f      	b.n	80058da <OnRadioRxDone+0x586>
                }
            } else {
                // check for sequence roll-over
                uint32_t  downLinkCounterTmp = downLinkCounter + 0x10000 + ( int16_t )sequenceCounterDiff;
 800589a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800589e:	461a      	mov	r2, r3
 80058a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic );
 80058aa:	897b      	ldrh	r3, [r7, #10]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	b299      	uxth	r1, r3
 80058b0:	f107 0310 	add.w	r3, r7, #16
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	2301      	movs	r3, #1
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f003 fd2e 	bl	8009324 <LoRaMacComputeMic>
                if ( micRx == mic ) {
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d104      	bne.n	80058da <OnRadioRxDone+0x586>
                    isMicOk = true;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    downLinkCounter = downLinkCounterTmp;
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
            }

            // Check for a the maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80058da:	2311      	movs	r3, #17
 80058dc:	763b      	strb	r3, [r7, #24]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <OnRadioRxDone+0x5c0>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f107 0218 	add.w	r2, r7, #24
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f004 fac5 	bl	8009e78 <RegionGetPhyParam>
 80058ee:	4603      	mov	r3, r0
 80058f0:	617b      	str	r3, [r7, #20]
            if ( sequenceCounterDiff >= phyParam.Value ) {
 80058f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d318      	bcc.n	800592c <OnRadioRxDone+0x5d8>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <OnRadioRxDone+0x5bc>)
 80058fc:	220a      	movs	r2, #10
 80058fe:	705a      	strb	r2, [r3, #1]
                McpsIndication.DownLinkCounter = downLinkCounter;
 8005900:	4a03      	ldr	r2, [pc, #12]	; (8005910 <OnRadioRxDone+0x5bc>)
 8005902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005904:	6153      	str	r3, [r2, #20]
                PrepareRxDoneAbort( );
 8005906:	f7ff fd03 	bl	8005310 <PrepareRxDoneAbort>
                return;
 800590a:	e1ba      	b.n	8005c82 <OnRadioRxDone+0x92e>
 800590c:	20000a70 	.word	0x20000a70
 8005910:	200009e0 	.word	0x200009e0
 8005914:	20000114 	.word	0x20000114
 8005918:	20000144 	.word	0x20000144
 800591c:	20000148 	.word	0x20000148
 8005920:	20000120 	.word	0x20000120
 8005924:	20000130 	.word	0x20000130
 8005928:	20000358 	.word	0x20000358
            }

            if ( isMicOk == true ) {
 800592c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 814a 	beq.w	8005bca <OnRadioRxDone+0x876>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005936:	4ba8      	ldr	r3, [pc, #672]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005938:	2200      	movs	r2, #0
 800593a:	705a      	strb	r2, [r3, #1]
                McpsIndication.Multicast = multicast;
 800593c:	4aa6      	ldr	r2, [pc, #664]	; (8005bd8 <OnRadioRxDone+0x884>)
 800593e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005942:	7093      	strb	r3, [r2, #2]
                McpsIndication.FramePending = fCtrl.Bits.FPending;
 8005944:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005948:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	4ba1      	ldr	r3, [pc, #644]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005952:	715a      	strb	r2, [r3, #5]
                McpsIndication.Buffer = NULL;
 8005954:	4ba0      	ldr	r3, [pc, #640]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
                McpsIndication.BufferSize = 0;
 800595a:	4b9f      	ldr	r3, [pc, #636]	; (8005bd8 <OnRadioRxDone+0x884>)
 800595c:	2200      	movs	r2, #0
 800595e:	731a      	strb	r2, [r3, #12]
                McpsIndication.DownLinkCounter = downLinkCounter;
 8005960:	4a9d      	ldr	r2, [pc, #628]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005964:	6153      	str	r3, [r2, #20]
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005966:	4b9d      	ldr	r3, [pc, #628]	; (8005bdc <OnRadioRxDone+0x888>)
 8005968:	2200      	movs	r2, #0
 800596a:	705a      	strb	r2, [r3, #1]

                AdrAckCounter = 0;
 800596c:	4b9c      	ldr	r3, [pc, #624]	; (8005be0 <OnRadioRxDone+0x88c>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
                MacCommandsBufferToRepeatIndex = 0;
 8005972:	4b9c      	ldr	r3, [pc, #624]	; (8005be4 <OnRadioRxDone+0x890>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]

                // Update 32 bits downlink counter
                if ( multicast == 1 ) {
 8005978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800597c:	2b01      	cmp	r3, #1
 800597e:	d118      	bne.n	80059b2 <OnRadioRxDone+0x65e>
                    McpsIndication.McpsIndication = MCPS_MULTICAST;
 8005980:	4b95      	ldr	r3, [pc, #596]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005982:	2202      	movs	r2, #2
 8005984:	701a      	strb	r2, [r3, #0]

                    if ( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8005986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800598c:	429a      	cmp	r2, r3
 800598e:	d10c      	bne.n	80059aa <OnRadioRxDone+0x656>
                         ( curMulticastParams->DownLinkCounter != 0 ) ) {
 8005990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    if ( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <OnRadioRxDone+0x656>
                        McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8005998:	4b8f      	ldr	r3, [pc, #572]	; (8005bd8 <OnRadioRxDone+0x884>)
 800599a:	2208      	movs	r2, #8
 800599c:	705a      	strb	r2, [r3, #1]
                        McpsIndication.DownLinkCounter = downLinkCounter;
 800599e:	4a8e      	ldr	r2, [pc, #568]	; (8005bd8 <OnRadioRxDone+0x884>)
 80059a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a2:	6153      	str	r3, [r2, #20]
                        PrepareRxDoneAbort( );
 80059a4:	f7ff fcb4 	bl	8005310 <PrepareRxDoneAbort>
                        return;
 80059a8:	e16b      	b.n	8005c82 <OnRadioRxDone+0x92e>
                    }
                    curMulticastParams->DownLinkCounter = downLinkCounter;
 80059aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24
 80059b0:	e036      	b.n	8005a20 <OnRadioRxDone+0x6cc>
                } else {
                    if ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) {
 80059b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059b6:	f023 031f 	bic.w	r3, r3, #31
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2ba0      	cmp	r3, #160	; 0xa0
 80059be:	d114      	bne.n	80059ea <OnRadioRxDone+0x696>
                        SrvAckRequested = true;
 80059c0:	4b89      	ldr	r3, [pc, #548]	; (8005be8 <OnRadioRxDone+0x894>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
                        McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80059c6:	4b84      	ldr	r3, [pc, #528]	; (8005bd8 <OnRadioRxDone+0x884>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]

                        if ( ( DownLinkCounter == downLinkCounter ) &&
 80059cc:	4b87      	ldr	r3, [pc, #540]	; (8005bec <OnRadioRxDone+0x898>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d121      	bne.n	8005a1a <OnRadioRxDone+0x6c6>
                             ( DownLinkCounter != 0 ) ) {
 80059d6:	4b85      	ldr	r3, [pc, #532]	; (8005bec <OnRadioRxDone+0x898>)
 80059d8:	681b      	ldr	r3, [r3, #0]
                        if ( ( DownLinkCounter == downLinkCounter ) &&
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01d      	beq.n	8005a1a <OnRadioRxDone+0x6c6>
                            // Duplicated confirmed downlink. Skip indication.
                            // In this case, the MAC layer shall accept the MAC commands
                            // which are included in the downlink retransmission.
                            // It should not provide the same frame to the application
                            // layer again.
                            LoRaMacFlags.Bits.McpsIndSkip = 1;
 80059de:	4a84      	ldr	r2, [pc, #528]	; (8005bf0 <OnRadioRxDone+0x89c>)
 80059e0:	7813      	ldrb	r3, [r2, #0]
 80059e2:	f043 0304 	orr.w	r3, r3, #4
 80059e6:	7013      	strb	r3, [r2, #0]
 80059e8:	e017      	b.n	8005a1a <OnRadioRxDone+0x6c6>
                        }
                    } else {
                        SrvAckRequested = false;
 80059ea:	4b7f      	ldr	r3, [pc, #508]	; (8005be8 <OnRadioRxDone+0x894>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
                        McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80059f0:	4b79      	ldr	r3, [pc, #484]	; (8005bd8 <OnRadioRxDone+0x884>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]

                        if ( ( DownLinkCounter == downLinkCounter ) &&
 80059f6:	4b7d      	ldr	r3, [pc, #500]	; (8005bec <OnRadioRxDone+0x898>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d10c      	bne.n	8005a1a <OnRadioRxDone+0x6c6>
                             ( DownLinkCounter != 0 ) ) {
 8005a00:	4b7a      	ldr	r3, [pc, #488]	; (8005bec <OnRadioRxDone+0x898>)
 8005a02:	681b      	ldr	r3, [r3, #0]
                        if ( ( DownLinkCounter == downLinkCounter ) &&
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <OnRadioRxDone+0x6c6>
                            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8005a08:	4b73      	ldr	r3, [pc, #460]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005a0a:	2208      	movs	r2, #8
 8005a0c:	705a      	strb	r2, [r3, #1]
                            McpsIndication.DownLinkCounter = downLinkCounter;
 8005a0e:	4a72      	ldr	r2, [pc, #456]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a12:	6153      	str	r3, [r2, #20]
                            PrepareRxDoneAbort( );
 8005a14:	f7ff fc7c 	bl	8005310 <PrepareRxDoneAbort>
                            return;
 8005a18:	e133      	b.n	8005c82 <OnRadioRxDone+0x92e>
                        }
                    }
                    DownLinkCounter = downLinkCounter;
 8005a1a:	4a74      	ldr	r2, [pc, #464]	; (8005bec <OnRadioRxDone+0x898>)
 8005a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a1e:	6013      	str	r3, [r2, #0]

                // This must be done before parsing the payload and the MAC commands.
                // We need to reset the MacCommandsBufferIndex here, since we need
                // to take retransmissions and repetitions into account. Error cases
                // will be handled in function OnMacStateCheckTimerEvent.
                if ( McpsConfirm.McpsRequest == MCPS_CONFIRMED ) {
 8005a20:	4b6e      	ldr	r3, [pc, #440]	; (8005bdc <OnRadioRxDone+0x888>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d122      	bne.n	8005a6e <OnRadioRxDone+0x71a>
                    if ( fCtrl.Bits.Ack == 1 ) {
 8005a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01e      	beq.n	8005a74 <OnRadioRxDone+0x720>
                        // Reset MacCommandsBufferIndex when we have received an ACK.
                        MacCommandsBufferIndex = 0;
 8005a36:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <OnRadioRxDone+0x8a0>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
                        // Update acknowledgement information
                        McpsConfirm.AckReceived = fCtrl.Bits.Ack;
 8005a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b62      	ldr	r3, [pc, #392]	; (8005bdc <OnRadioRxDone+0x888>)
 8005a52:	711a      	strb	r2, [r3, #4]
                        McpsIndication.AckReceived = fCtrl.Bits.Ack;
 8005a54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a58:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	4b5b      	ldr	r3, [pc, #364]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005a6a:	749a      	strb	r2, [r3, #18]
 8005a6c:	e002      	b.n	8005a74 <OnRadioRxDone+0x720>
                    }
                } else {
                    // Reset the variable if we have received any valid frame.
                    MacCommandsBufferIndex = 0;
 8005a6e:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <OnRadioRxDone+0x8a0>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
                }
                port = payload[appPayloadStartIndex];
 8005a74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                // Process payload and MAC commands
                if ( ( ( size - 4 ) - appPayloadStartIndex ) > 0 ) {
 8005a82:	897b      	ldrh	r3, [r7, #10]
 8005a84:	1f1a      	subs	r2, r3, #4
 8005a86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f340 8084 	ble.w	8005b9a <OnRadioRxDone+0x846>
                    port = payload[appPayloadStartIndex++];
 8005a92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                    frameLen = ( size - 4 ) - appPayloadStartIndex;
 8005aa8:	897b      	ldrh	r3, [r7, #10]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	3b04      	subs	r3, #4
 8005ab6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

                    McpsIndication.Port = port;
 8005aba:	4a47      	ldr	r2, [pc, #284]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005abc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005ac0:	70d3      	strb	r3, [r2, #3]
                    if ( port == 0 ) {
 8005ac2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d133      	bne.n	8005b32 <OnRadioRxDone+0x7de>
                        // Only allow frames which do not have fOpts
                            if( ( fCtrl.Bits.FOptsLen == 0 ) && ( multicast == 0 ) ) {
 8005aca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d120      	bne.n	8005b1a <OnRadioRxDone+0x7c6>
 8005ad8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11c      	bne.n	8005b1a <OnRadioRxDone+0x7c6>
                            LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8005ae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	18d0      	adds	r0, r2, r3
 8005ae8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005aec:	b299      	uxth	r1, r3
 8005aee:	4b42      	ldr	r3, [pc, #264]	; (8005bf8 <OnRadioRxDone+0x8a4>)
 8005af0:	9302      	str	r3, [sp, #8]
 8005af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	2301      	movs	r3, #1
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005afe:	f003 fd1d 	bl	800953c <LoRaMacPayloadDecrypt>
                                                   address,
                                                   DOWN_LINK,
                                                   downLinkCounter,
                                                   LoRaMacRxPayload );
                            // Decode frame payload MAC commands
                                ProcessMacCommands( LoRaMacRxPayload, 0, frameLen, snr, McpsIndication.RxSlot );
 8005b02:	79f9      	ldrb	r1, [r7, #7]
 8005b04:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005b06:	7c5b      	ldrb	r3, [r3, #17]
 8005b08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	2100      	movs	r1, #0
 8005b12:	4839      	ldr	r0, [pc, #228]	; (8005bf8 <OnRadioRxDone+0x8a4>)
 8005b14:	f001 f8aa 	bl	8006c6c <ProcessMacCommands>
 8005b18:	e051      	b.n	8005bbe <OnRadioRxDone+0x86a>
                        } else {
                            LoRaMacFlags.Bits.McpsIndSkip = 1;
 8005b1a:	4a35      	ldr	r2, [pc, #212]	; (8005bf0 <OnRadioRxDone+0x89c>)
 8005b1c:	7813      	ldrb	r3, [r2, #0]
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	7013      	strb	r3, [r2, #0]
                            // This is not a valid frame. Drop it and reset the ACK bits
                            McpsConfirm.AckReceived = false;
 8005b24:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <OnRadioRxDone+0x888>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	711a      	strb	r2, [r3, #4]
                            McpsIndication.AckReceived = false;
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	749a      	strb	r2, [r3, #18]
 8005b30:	e045      	b.n	8005bbe <OnRadioRxDone+0x86a>
                        }
                    } else {
                        if( ( fCtrl.Bits.FOptsLen > 0 ) && ( multicast == 0 ) ){
 8005b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <OnRadioRxDone+0x80e>
 8005b40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10c      	bne.n	8005b62 <OnRadioRxDone+0x80e>
                            // Decode Options field MAC commands. Omit the fPort.
                                ProcessMacCommands( payload, 8, appPayloadStartIndex - 1, snr, McpsIndication.RxSlot );
 8005b48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	79f9      	ldrb	r1, [r7, #7]
 8005b52:	4b21      	ldr	r3, [pc, #132]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005b54:	7c5b      	ldrb	r3, [r3, #17]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	2108      	movs	r1, #8
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f001 f885 	bl	8006c6c <ProcessMacCommands>
                        }

                        LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8005b62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	18d0      	adds	r0, r2, r3
 8005b6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <OnRadioRxDone+0x8a4>)
 8005b72:	9302      	str	r3, [sp, #8]
 8005b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2301      	movs	r3, #1
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b80:	f003 fcdc 	bl	800953c <LoRaMacPayloadDecrypt>
                                               address,
                                               DOWN_LINK,
                                               downLinkCounter,
                                               LoRaMacRxPayload );

                        McpsIndication.Buffer = LoRaMacRxPayload;
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005b86:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <OnRadioRxDone+0x8a4>)
 8005b88:	609a      	str	r2, [r3, #8]
                        McpsIndication.BufferSize = frameLen;
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005b8c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005b90:	7313      	strb	r3, [r2, #12]
                        McpsIndication.RxData = true;
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	735a      	strb	r2, [r3, #13]
 8005b98:	e011      	b.n	8005bbe <OnRadioRxDone+0x86a>
                    }
                } else {
                    if ( fCtrl.Bits.FOptsLen > 0 ) {
 8005b9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <OnRadioRxDone+0x86a>
                        // Decode Options field MAC commands
                        ProcessMacCommands( payload, 8, appPayloadStartIndex, snr , McpsIndication.RxSlot);
 8005ba8:	79f9      	ldrb	r1, [r7, #7]
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005bac:	7c5b      	ldrb	r3, [r3, #17]
 8005bae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	2108      	movs	r1, #8
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f001 f857 	bl	8006c6c <ProcessMacCommands>
                    }
                }

                // Provide always an indication, skip the callback to the user application,
                // in case of a confirmed downlink retransmission.
                LoRaMacFlags.Bits.McpsInd = 1;
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <OnRadioRxDone+0x89c>)
 8005bc0:	7813      	ldrb	r3, [r2, #0]
 8005bc2:	f043 0302 	orr.w	r3, r3, #2
 8005bc6:	7013      	strb	r3, [r2, #0]

                PrepareRxDoneAbort( );
                return;
            }
        }
        break;
 8005bc8:	e03f      	b.n	8005c4a <OnRadioRxDone+0x8f6>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8005bca:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <OnRadioRxDone+0x884>)
 8005bcc:	220c      	movs	r2, #12
 8005bce:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 8005bd0:	f7ff fb9e 	bl	8005310 <PrepareRxDoneAbort>
                return;
 8005bd4:	e055      	b.n	8005c82 <OnRadioRxDone+0x92e>
 8005bd6:	bf00      	nop
 8005bd8:	200009e0 	.word	0x200009e0
 8005bdc:	200009b8 	.word	0x200009b8
 8005be0:	20000360 	.word	0x20000360
 8005be4:	20000368 	.word	0x20000368
 8005be8:	20000365 	.word	0x20000365
 8005bec:	20000358 	.word	0x20000358
 8005bf0:	20000a10 	.word	0x20000a10
 8005bf4:	20000367 	.word	0x20000367
 8005bf8:	20000254 	.word	0x20000254
        case FRAME_TYPE_PROPRIETARY: {
            memcpy1( LoRaMacRxPayload, &payload[pktHeaderLen], size );
 8005bfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	897a      	ldrh	r2, [r7, #10]
 8005c06:	4619      	mov	r1, r3
 8005c08:	481f      	ldr	r0, [pc, #124]	; (8005c88 <OnRadioRxDone+0x934>)
 8005c0a:	f00a ff14 	bl	8010a36 <memcpy1>

            McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8005c0e:	4b1f      	ldr	r3, [pc, #124]	; (8005c8c <OnRadioRxDone+0x938>)
 8005c10:	2203      	movs	r2, #3
 8005c12:	701a      	strb	r2, [r3, #0]
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005c14:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <OnRadioRxDone+0x938>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	705a      	strb	r2, [r3, #1]
            McpsIndication.Buffer = LoRaMacRxPayload;
 8005c1a:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <OnRadioRxDone+0x938>)
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <OnRadioRxDone+0x934>)
 8005c1e:	609a      	str	r2, [r3, #8]
            McpsIndication.BufferSize = size - pktHeaderLen;
 8005c20:	897b      	ldrh	r3, [r7, #10]
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <OnRadioRxDone+0x938>)
 8005c2e:	731a      	strb	r2, [r3, #12]

            LoRaMacFlags.Bits.McpsInd = 1;
 8005c30:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <OnRadioRxDone+0x93c>)
 8005c32:	7813      	ldrb	r3, [r2, #0]
 8005c34:	f043 0302 	orr.w	r3, r3, #2
 8005c38:	7013      	strb	r3, [r2, #0]
            break;
 8005c3a:	e006      	b.n	8005c4a <OnRadioRxDone+0x8f6>
        }
        default:
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <OnRadioRxDone+0x938>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	705a      	strb	r2, [r3, #1]
            PrepareRxDoneAbort( );
 8005c42:	f7ff fb65 	bl	8005310 <PrepareRxDoneAbort>
            break;
 8005c46:	e000      	b.n	8005c4a <OnRadioRxDone+0x8f6>
            break;
 8005c48:	bf00      	nop
    }
    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( NodeAckRequested, LoRaMacDeviceClass, McpsConfirm.AckReceived,
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <OnRadioRxDone+0x940>)
 8005c4c:	7818      	ldrb	r0, [r3, #0]
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <OnRadioRxDone+0x944>)
 8005c50:	7819      	ldrb	r1, [r3, #0]
 8005c52:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <OnRadioRxDone+0x948>)
 8005c54:	791a      	ldrb	r2, [r3, #4]
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <OnRadioRxDone+0x94c>)
 8005c58:	781c      	ldrb	r4, [r3, #0]
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <OnRadioRxDone+0x950>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	4623      	mov	r3, r4
 8005c62:	f000 fc73 	bl	800654c <CheckToDisableAckTimeout>
                                AckTimeoutRetriesCounter, AckTimeoutRetries );
    if( AckTimeoutTimer.IsRunning == false )
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <OnRadioRxDone+0x954>)
 8005c68:	7a1b      	ldrb	r3, [r3, #8]
 8005c6a:	f083 0301 	eor.w	r3, r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d006      	beq.n	8005c82 <OnRadioRxDone+0x92e>
    {// Procedure is completed when the AckTimeoutTimer is not running anymore
    	LoRaMacFlags.Bits.MacDone = 1;
 8005c74:	4a06      	ldr	r2, [pc, #24]	; (8005c90 <OnRadioRxDone+0x93c>)
 8005c76:	7813      	ldrb	r3, [r2, #0]
 8005c78:	f043 0320 	orr.w	r3, r3, #32
 8005c7c:	7013      	strb	r3, [r2, #0]
    	// Trig OnMacCheckTimerEvent call as soon as possible
    	OnMacStateCheckTimerEvent();
 8005c7e:	f000 f903 	bl	8005e88 <OnMacStateCheckTimerEvent>
    }
}
 8005c82:	3764      	adds	r7, #100	; 0x64
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd90      	pop	{r4, r7, pc}
 8005c88:	20000254 	.word	0x20000254
 8005c8c:	200009e0 	.word	0x200009e0
 8005c90:	20000a10 	.word	0x20000a10
 8005c94:	20000364 	.word	0x20000364
 8005c98:	2000014c 	.word	0x2000014c
 8005c9c:	200009b8 	.word	0x200009b8
 8005ca0:	2000000a 	.word	0x2000000a
 8005ca4:	20000009 	.word	0x20000009
 8005ca8:	20000ac8 	.word	0x20000ac8

08005cac <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
	DIO_PRINTF("TX Timeout\r\n");

    if( LoRaMacDeviceClass != CLASS_C )
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <OnRadioTxTimeout+0x34>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d003      	beq.n	8005cc0 <OnRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <OnRadioTxTimeout+0x38>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4798      	blx	r3
 8005cbe:	e001      	b.n	8005cc4 <OnRadioTxTimeout+0x18>
    }
    else
    {
        OpenContinuousRx2Window( );
 8005cc0:	f001 fc8a 	bl	80075d8 <OpenContinuousRx2Window>
    }

    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8005cc4:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <OnRadioTxTimeout+0x3c>)
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	705a      	strb	r2, [r3, #1]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8005cca:	2002      	movs	r0, #2
 8005ccc:	f003 fa6a 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>
    LoRaMacFlags.Bits.MacDone = 1;
 8005cd0:	4a06      	ldr	r2, [pc, #24]	; (8005cec <OnRadioTxTimeout+0x40>)
 8005cd2:	7813      	ldrb	r3, [r2, #0]
 8005cd4:	f043 0320 	orr.w	r3, r3, #32
 8005cd8:	7013      	strb	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000014c 	.word	0x2000014c
 8005ce4:	080130d4 	.word	0x080130d4
 8005ce8:	200009b8 	.word	0x200009b8
 8005cec:	20000a10 	.word	0x20000a10

08005cf0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
    bool classBRx = false;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacDeviceClass != CLASS_C )
 8005cfa:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <OnRadioRxError+0xa8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d002      	beq.n	8005d08 <OnRadioRxError+0x18>
    {
        Radio.Sleep( );
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <OnRadioRxError+0xac>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4798      	blx	r3
    }

    if( classBRx == false )
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	f083 0301 	eor.w	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d037      	beq.n	8005d84 <OnRadioRxError+0x94>
    {
        if( RxSlot == RX_SLOT_WIN_1 )
 8005d14:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <OnRadioRxError+0xb0>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d120      	bne.n	8005d5e <OnRadioRxError+0x6e>
        {
            if( NodeAckRequested == true )
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <OnRadioRxError+0xb4>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <OnRadioRxError+0x3a>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 8005d24:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <OnRadioRxError+0xb8>)
 8005d26:	2205      	movs	r2, #5
 8005d28:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR );
 8005d2a:	2005      	movs	r0, #5
 8005d2c:	f003 fa3a 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005d30:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <OnRadioRxError+0xa8>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d025      	beq.n	8005d84 <OnRadioRxError+0x94>
            {
                if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8005d38:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <OnRadioRxError+0xbc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f00a fd9b 	bl	8010878 <TimerGetElapsedTime>
 8005d42:	4602      	mov	r2, r0
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <OnRadioRxError+0xc0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d31b      	bcc.n	8005d84 <OnRadioRxError+0x94>
                {
                    TimerStop( &RxWindowTimer2 );
 8005d4c:	4819      	ldr	r0, [pc, #100]	; (8005db4 <OnRadioRxError+0xc4>)
 8005d4e:	f00a fcb7 	bl	80106c0 <TimerStop>
                    LoRaMacFlags.Bits.MacDone = 1;
 8005d52:	4a19      	ldr	r2, [pc, #100]	; (8005db8 <OnRadioRxError+0xc8>)
 8005d54:	7813      	ldrb	r3, [r2, #0]
 8005d56:	f043 0320 	orr.w	r3, r3, #32
 8005d5a:	7013      	strb	r3, [r2, #0]
 8005d5c:	e012      	b.n	8005d84 <OnRadioRxError+0x94>
                }
            }
        }
        else
        {
            if( NodeAckRequested == true )
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <OnRadioRxError+0xb4>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <OnRadioRxError+0x7c>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <OnRadioRxError+0xb8>)
 8005d68:	2206      	movs	r2, #6
 8005d6a:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8005d6c:	2006      	movs	r0, #6
 8005d6e:	f003 fa19 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005d72:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <OnRadioRxError+0xa8>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d004      	beq.n	8005d84 <OnRadioRxError+0x94>
            {
                LoRaMacFlags.Bits.MacDone = 1;
 8005d7a:	4a0f      	ldr	r2, [pc, #60]	; (8005db8 <OnRadioRxError+0xc8>)
 8005d7c:	7813      	ldrb	r3, [r2, #0]
 8005d7e:	f043 0320 	orr.w	r3, r3, #32
 8005d82:	7013      	strb	r3, [r2, #0]
            }
        }
    }

    if( LoRaMacDeviceClass == CLASS_C )
 8005d84:	4b04      	ldr	r3, [pc, #16]	; (8005d98 <OnRadioRxError+0xa8>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d101      	bne.n	8005d90 <OnRadioRxError+0xa0>
    {
        OpenContinuousRx2Window( );
 8005d8c:	f001 fc24 	bl	80075d8 <OpenContinuousRx2Window>
    }
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	2000014c 	.word	0x2000014c
 8005d9c:	080130d4 	.word	0x080130d4
 8005da0:	20000a6c 	.word	0x20000a6c
 8005da4:	20000364 	.word	0x20000364
 8005da8:	200009b8 	.word	0x200009b8
 8005dac:	20000470 	.word	0x20000470
 8005db0:	20000af0 	.word	0x20000af0
 8005db4:	200009a0 	.word	0x200009a0
 8005db8:	20000a10 	.word	0x20000a10

08005dbc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
    bool classBRx = false;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacDeviceClass != CLASS_C )
 8005dc6:	4b27      	ldr	r3, [pc, #156]	; (8005e64 <OnRadioRxTimeout+0xa8>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d002      	beq.n	8005dd4 <OnRadioRxTimeout+0x18>
    {
        Radio.Sleep( );
 8005dce:	4b26      	ldr	r3, [pc, #152]	; (8005e68 <OnRadioRxTimeout+0xac>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	4798      	blx	r3
    }

    if( classBRx == false )
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	f083 0301 	eor.w	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d037      	beq.n	8005e50 <OnRadioRxTimeout+0x94>
    {
        if( RxSlot == RX_SLOT_WIN_1 )
 8005de0:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <OnRadioRxTimeout+0xb0>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d120      	bne.n	8005e2a <OnRadioRxTimeout+0x6e>
        {
            if( NodeAckRequested == true )
 8005de8:	4b21      	ldr	r3, [pc, #132]	; (8005e70 <OnRadioRxTimeout+0xb4>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <OnRadioRxTimeout+0x3a>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <OnRadioRxTimeout+0xb8>)
 8005df2:	2203      	movs	r2, #3
 8005df4:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT );
 8005df6:	2003      	movs	r0, #3
 8005df8:	f003 f9d4 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005dfc:	4b19      	ldr	r3, [pc, #100]	; (8005e64 <OnRadioRxTimeout+0xa8>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d025      	beq.n	8005e50 <OnRadioRxTimeout+0x94>
            {
                if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8005e04:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <OnRadioRxTimeout+0xbc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f00a fd35 	bl	8010878 <TimerGetElapsedTime>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <OnRadioRxTimeout+0xc0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d31b      	bcc.n	8005e50 <OnRadioRxTimeout+0x94>
                {
                    TimerStop( &RxWindowTimer2 );
 8005e18:	4819      	ldr	r0, [pc, #100]	; (8005e80 <OnRadioRxTimeout+0xc4>)
 8005e1a:	f00a fc51 	bl	80106c0 <TimerStop>
                    LoRaMacFlags.Bits.MacDone = 1;
 8005e1e:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <OnRadioRxTimeout+0xc8>)
 8005e20:	7813      	ldrb	r3, [r2, #0]
 8005e22:	f043 0320 	orr.w	r3, r3, #32
 8005e26:	7013      	strb	r3, [r2, #0]
 8005e28:	e012      	b.n	8005e50 <OnRadioRxTimeout+0x94>
                }
            }
        }
        else
        {
            if( NodeAckRequested == true )
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <OnRadioRxTimeout+0xb4>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <OnRadioRxTimeout+0x7c>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <OnRadioRxTimeout+0xb8>)
 8005e34:	2204      	movs	r2, #4
 8005e36:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8005e38:	2004      	movs	r0, #4
 8005e3a:	f003 f9b3 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <OnRadioRxTimeout+0xa8>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d004      	beq.n	8005e50 <OnRadioRxTimeout+0x94>
            {
                LoRaMacFlags.Bits.MacDone = 1;
 8005e46:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <OnRadioRxTimeout+0xc8>)
 8005e48:	7813      	ldrb	r3, [r2, #0]
 8005e4a:	f043 0320 	orr.w	r3, r3, #32
 8005e4e:	7013      	strb	r3, [r2, #0]
            }
        }
    }

    if( LoRaMacDeviceClass == CLASS_C )
 8005e50:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <OnRadioRxTimeout+0xa8>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d101      	bne.n	8005e5c <OnRadioRxTimeout+0xa0>
    {
        OpenContinuousRx2Window( );
 8005e58:	f001 fbbe 	bl	80075d8 <OpenContinuousRx2Window>
    }
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	2000014c 	.word	0x2000014c
 8005e68:	080130d4 	.word	0x080130d4
 8005e6c:	20000a6c 	.word	0x20000a6c
 8005e70:	20000364 	.word	0x20000364
 8005e74:	200009b8 	.word	0x200009b8
 8005e78:	20000470 	.word	0x20000470
 8005e7c:	20000af0 	.word	0x20000af0
 8005e80:	200009a0 	.word	0x200009a0
 8005e84:	20000a10 	.word	0x20000a10

08005e88 <OnMacStateCheckTimerEvent>:


static void OnMacStateCheckTimerEvent( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
//	lora_printf("OnMacStateCheckTimerEvent\r\n");
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool noTx = false;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]

    TimerStop( &MacStateCheckTimer );
 8005e92:	486b      	ldr	r0, [pc, #428]	; (8006040 <OnMacStateCheckTimerEvent+0x1b8>)
 8005e94:	f00a fc14 	bl	80106c0 <TimerStop>

    if ( LoRaMacFlags.Bits.MacDone == 1 ) {
 8005e98:	4b6a      	ldr	r3, [pc, #424]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f003 0320 	and.w	r3, r3, #32
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 81b7 	beq.w	8006216 <OnMacStateCheckTimerEvent+0x38e>
        if ( ( LoRaMacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT ) {
 8005ea8:	4b67      	ldr	r3, [pc, #412]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <OnMacStateCheckTimerEvent+0x44>
            LoRaMacState &= ~LORAMAC_RX_ABORT;
 8005eb4:	4b64      	ldr	r3, [pc, #400]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebc:	4a62      	ldr	r2, [pc, #392]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005ebe:	6013      	str	r3, [r2, #0]
            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005ec0:	4b61      	ldr	r3, [pc, #388]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	4a5f      	ldr	r2, [pc, #380]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005eca:	6013      	str	r3, [r2, #0]
        }

        if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) ) {
 8005ecc:	4b5d      	ldr	r3, [pc, #372]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <OnMacStateCheckTimerEvent+0x60>
 8005eda:	4b5a      	ldr	r3, [pc, #360]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d022      	beq.n	8005f2e <OnMacStateCheckTimerEvent+0xa6>
            // Get a status of any request and check if we have a TX timeout
            MlmeConfirm.Status = LoRaMacConfirmQueueGetStatusCmn( );
 8005ee8:	f003 f98e 	bl	8009208 <LoRaMacConfirmQueueGetStatusCmn>
 8005eec:	4603      	mov	r3, r0
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b56      	ldr	r3, [pc, #344]	; (800604c <OnMacStateCheckTimerEvent+0x1c4>)
 8005ef2:	705a      	strb	r2, [r3, #1]
            if ( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8005ef4:	4b56      	ldr	r3, [pc, #344]	; (8006050 <OnMacStateCheckTimerEvent+0x1c8>)
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d003      	beq.n	8005f04 <OnMacStateCheckTimerEvent+0x7c>
                 ( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ) {
 8005efc:	4b53      	ldr	r3, [pc, #332]	; (800604c <OnMacStateCheckTimerEvent+0x1c4>)
 8005efe:	785b      	ldrb	r3, [r3, #1]
            if ( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d114      	bne.n	8005f2e <OnMacStateCheckTimerEvent+0xa6>
                // Stop transmit cycle due to tx timeout.
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005f04:	4b50      	ldr	r3, [pc, #320]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	4a4e      	ldr	r2, [pc, #312]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005f0e:	6013      	str	r3, [r2, #0]
                MacCommandsBufferIndex = 0;
 8005f10:	4b50      	ldr	r3, [pc, #320]	; (8006054 <OnMacStateCheckTimerEvent+0x1cc>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005f16:	4b50      	ldr	r3, [pc, #320]	; (8006058 <OnMacStateCheckTimerEvent+0x1d0>)
 8005f18:	781a      	ldrb	r2, [r3, #0]
 8005f1a:	4b4d      	ldr	r3, [pc, #308]	; (8006050 <OnMacStateCheckTimerEvent+0x1c8>)
 8005f1c:	715a      	strb	r2, [r3, #5]
                McpsConfirm.AckReceived = false;
 8005f1e:	4b4c      	ldr	r3, [pc, #304]	; (8006050 <OnMacStateCheckTimerEvent+0x1c8>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	711a      	strb	r2, [r3, #4]
                McpsConfirm.TxTimeOnAir = 0;
 8005f24:	4b4a      	ldr	r3, [pc, #296]	; (8006050 <OnMacStateCheckTimerEvent+0x1c8>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	609a      	str	r2, [r3, #8]
                noTx = true;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
            }
        }

        if ( ( NodeAckRequested == false ) && ( noTx == false ) ) {
 8005f2e:	4b4b      	ldr	r3, [pc, #300]	; (800605c <OnMacStateCheckTimerEvent+0x1d4>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	f083 0301 	eor.w	r3, r3, #1
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80a6 	beq.w	800608a <OnMacStateCheckTimerEvent+0x202>
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	f083 0301 	eor.w	r3, r3, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 809f 	beq.w	800608a <OnMacStateCheckTimerEvent+0x202>
            if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) ) {
 8005f4c:	4b3d      	ldr	r3, [pc, #244]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d107      	bne.n	8005f6a <OnMacStateCheckTimerEvent+0xe2>
 8005f5a:	4b3a      	ldr	r3, [pc, #232]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8090 	beq.w	800608a <OnMacStateCheckTimerEvent+0x202>
                if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8005f6a:	4b36      	ldr	r3, [pc, #216]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f003 0308 	and.w	r3, r3, #8
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d02f      	beq.n	8005fd8 <OnMacStateCheckTimerEvent+0x150>
 8005f78:	4b34      	ldr	r3, [pc, #208]	; (800604c <OnMacStateCheckTimerEvent+0x1c4>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d12b      	bne.n	8005fd8 <OnMacStateCheckTimerEvent+0x150>
                    // Procedure for the join request
                    MlmeConfirm.NbRetries = JoinRequestTrials;
 8005f80:	4b37      	ldr	r3, [pc, #220]	; (8006060 <OnMacStateCheckTimerEvent+0x1d8>)
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	4b31      	ldr	r3, [pc, #196]	; (800604c <OnMacStateCheckTimerEvent+0x1c4>)
 8005f86:	729a      	strb	r2, [r3, #10]

                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f003 f8e5 	bl	8009158 <LoRaMacConfirmQueueGetStatus>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10c      	bne.n	8005fae <OnMacStateCheckTimerEvent+0x126>
                        // Node joined successfully
                        UpLinkCounter = 0;
 8005f94:	4b33      	ldr	r3, [pc, #204]	; (8006064 <OnMacStateCheckTimerEvent+0x1dc>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
                        ChannelsNbRepCounter = 0;
 8005f9a:	4b33      	ldr	r3, [pc, #204]	; (8006068 <OnMacStateCheckTimerEvent+0x1e0>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005fa0:	4b29      	ldr	r3, [pc, #164]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	4a27      	ldr	r2, [pc, #156]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005faa:	6013      	str	r3, [r2, #0]
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005fac:	e06d      	b.n	800608a <OnMacStateCheckTimerEvent+0x202>
                    } else {
                        if ( JoinRequestTrials >= MaxJoinRequestTrials ) {
 8005fae:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <OnMacStateCheckTimerEvent+0x1d8>)
 8005fb0:	781a      	ldrb	r2, [r3, #0]
 8005fb2:	4b2e      	ldr	r3, [pc, #184]	; (800606c <OnMacStateCheckTimerEvent+0x1e4>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d306      	bcc.n	8005fc8 <OnMacStateCheckTimerEvent+0x140>
                            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005fba:	4b23      	ldr	r3, [pc, #140]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
 8005fc2:	4a21      	ldr	r2, [pc, #132]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8005fc4:	6013      	str	r3, [r2, #0]
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005fc6:	e060      	b.n	800608a <OnMacStateCheckTimerEvent+0x202>
                        } else {
                            LoRaMacFlags.Bits.MacDone = 0;
 8005fc8:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005fca:	7813      	ldrb	r3, [r2, #0]
 8005fcc:	f36f 1345 	bfc	r3, #5, #1
 8005fd0:	7013      	strb	r3, [r2, #0]
                            // Sends the same frame again
                            OnTxDelayedTimerEvent( );
 8005fd2:	f000 f9c9 	bl	8006368 <OnTxDelayedTimerEvent>
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005fd6:	e058      	b.n	800608a <OnMacStateCheckTimerEvent+0x202>
                        }
                    }
                } else {
                    // Procedure for all other frames
                    if ( ( ChannelsNbRepCounter >= LoRaMacParams.ChannelsNbRep ) || ( LoRaMacFlags.Bits.McpsInd == 1 ) ) {
 8005fd8:	4b25      	ldr	r3, [pc, #148]	; (8006070 <OnMacStateCheckTimerEvent+0x1e8>)
 8005fda:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005fde:	4b22      	ldr	r3, [pc, #136]	; (8006068 <OnMacStateCheckTimerEvent+0x1e0>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d906      	bls.n	8005ff4 <OnMacStateCheckTimerEvent+0x16c>
 8005fe6:	4b17      	ldr	r3, [pc, #92]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d043      	beq.n	800607c <OnMacStateCheckTimerEvent+0x1f4>
                        if ( LoRaMacFlags.Bits.McpsInd == 0 ) {
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <OnMacStateCheckTimerEvent+0x1bc>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <OnMacStateCheckTimerEvent+0x18a>
                            // Maximum repetitions without downlink. Reset MacCommandsBufferIndex. Increase ADR Ack counter.
                            // Only process the case when the MAC did not receive a downlink.
                            MacCommandsBufferIndex = 0;
 8006002:	4b14      	ldr	r3, [pc, #80]	; (8006054 <OnMacStateCheckTimerEvent+0x1cc>)
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
                            AdrAckCounter++;
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <OnMacStateCheckTimerEvent+0x1ec>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	4a19      	ldr	r2, [pc, #100]	; (8006074 <OnMacStateCheckTimerEvent+0x1ec>)
 8006010:	6013      	str	r3, [r2, #0]
                        }

                        ChannelsNbRepCounter = 0;
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <OnMacStateCheckTimerEvent+0x1e0>)
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]

                        if ( IsUpLinkCounterFixed == false ) {
 8006018:	4b17      	ldr	r3, [pc, #92]	; (8006078 <OnMacStateCheckTimerEvent+0x1f0>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f083 0301 	eor.w	r3, r3, #1
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d004      	beq.n	8006030 <OnMacStateCheckTimerEvent+0x1a8>
                            UpLinkCounter++;
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <OnMacStateCheckTimerEvent+0x1dc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <OnMacStateCheckTimerEvent+0x1dc>)
 800602e:	6013      	str	r3, [r2, #0]
                        }

                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	4a03      	ldr	r2, [pc, #12]	; (8006048 <OnMacStateCheckTimerEvent+0x1c0>)
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e025      	b.n	800608a <OnMacStateCheckTimerEvent+0x202>
 800603e:	bf00      	nop
 8006040:	20000484 	.word	0x20000484
 8006044:	20000a10 	.word	0x20000a10
 8006048:	20000480 	.word	0x20000480
 800604c:	2000098c 	.word	0x2000098c
 8006050:	200009b8 	.word	0x200009b8
 8006054:	20000367 	.word	0x20000367
 8006058:	2000000a 	.word	0x2000000a
 800605c:	20000364 	.word	0x20000364
 8006060:	20000a0c 	.word	0x20000a0c
 8006064:	20000354 	.word	0x20000354
 8006068:	2000046c 	.word	0x2000046c
 800606c:	200009b4 	.word	0x200009b4
 8006070:	20000a70 	.word	0x20000a70
 8006074:	20000360 	.word	0x20000360
 8006078:	2000035c 	.word	0x2000035c
                    } else {
                        LoRaMacFlags.Bits.MacDone = 0;
 800607c:	4aa8      	ldr	r2, [pc, #672]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 800607e:	7813      	ldrb	r3, [r2, #0]
 8006080:	f36f 1345 	bfc	r3, #5, #1
 8006084:	7013      	strb	r3, [r2, #0]
                        // Sends the same frame again
                        OnTxDelayedTimerEvent( );
 8006086:	f000 f96f 	bl	8006368 <OnTxDelayedTimerEvent>
                    }
                }
            }
        }

        if ( LoRaMacFlags.Bits.McpsInd == 1 ) {
 800608a:	4ba5      	ldr	r3, [pc, #660]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d025      	beq.n	80060e4 <OnMacStateCheckTimerEvent+0x25c>
            // Procedure if we received a frame
            if ( ( McpsConfirm.AckReceived == true ) || ( AckTimeoutRetriesCounter > AckTimeoutRetries ) ) {
 8006098:	4ba2      	ldr	r3, [pc, #648]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 800609a:	791b      	ldrb	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <OnMacStateCheckTimerEvent+0x224>
 80060a0:	4ba1      	ldr	r3, [pc, #644]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 80060a2:	781a      	ldrb	r2, [r3, #0]
 80060a4:	4ba1      	ldr	r3, [pc, #644]	; (800632c <OnMacStateCheckTimerEvent+0x4a4>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d91b      	bls.n	80060e4 <OnMacStateCheckTimerEvent+0x25c>
                AckTimeoutRetry = false;
 80060ac:	4ba0      	ldr	r3, [pc, #640]	; (8006330 <OnMacStateCheckTimerEvent+0x4a8>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 80060b2:	4ba0      	ldr	r3, [pc, #640]	; (8006334 <OnMacStateCheckTimerEvent+0x4ac>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
                if ( IsUpLinkCounterFixed == false ) {
 80060b8:	4b9f      	ldr	r3, [pc, #636]	; (8006338 <OnMacStateCheckTimerEvent+0x4b0>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f083 0301 	eor.w	r3, r3, #1
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <OnMacStateCheckTimerEvent+0x248>
                    UpLinkCounter++;
 80060c6:	4b9d      	ldr	r3, [pc, #628]	; (800633c <OnMacStateCheckTimerEvent+0x4b4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3301      	adds	r3, #1
 80060cc:	4a9b      	ldr	r2, [pc, #620]	; (800633c <OnMacStateCheckTimerEvent+0x4b4>)
 80060ce:	6013      	str	r3, [r2, #0]
                }
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 80060d0:	4b95      	ldr	r3, [pc, #596]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 80060d2:	781a      	ldrb	r2, [r3, #0]
 80060d4:	4b93      	ldr	r3, [pc, #588]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 80060d6:	715a      	strb	r2, [r3, #5]

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 80060d8:	4b99      	ldr	r3, [pc, #612]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	4a97      	ldr	r2, [pc, #604]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 80060e2:	6013      	str	r3, [r2, #0]
            }
        }

        if ( ( AckTimeoutRetry == true ) && ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == 0 ) ) {
 80060e4:	4b92      	ldr	r3, [pc, #584]	; (8006330 <OnMacStateCheckTimerEvent+0x4a8>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8094 	beq.w	8006216 <OnMacStateCheckTimerEvent+0x38e>
 80060ee:	4b94      	ldr	r3, [pc, #592]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 808d 	bne.w	8006216 <OnMacStateCheckTimerEvent+0x38e>
            // Retransmissions procedure for confirmed uplinks
            AckTimeoutRetry = false;
 80060fc:	4b8c      	ldr	r3, [pc, #560]	; (8006330 <OnMacStateCheckTimerEvent+0x4a8>)
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
            if ( ( AckTimeoutRetriesCounter < AckTimeoutRetries ) && ( AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) ) {
 8006102:	4b89      	ldr	r3, [pc, #548]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 8006104:	781a      	ldrb	r2, [r3, #0]
 8006106:	4b89      	ldr	r3, [pc, #548]	; (800632c <OnMacStateCheckTimerEvent+0x4a4>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d25c      	bcs.n	80061c8 <OnMacStateCheckTimerEvent+0x340>
 800610e:	4b86      	ldr	r3, [pc, #536]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b08      	cmp	r3, #8
 8006114:	d858      	bhi.n	80061c8 <OnMacStateCheckTimerEvent+0x340>
                AckTimeoutRetriesCounter++;
 8006116:	4b84      	ldr	r3, [pc, #528]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	3301      	adds	r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	4b82      	ldr	r3, [pc, #520]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 8006120:	701a      	strb	r2, [r3, #0]

                if ( ( AckTimeoutRetriesCounter % 2 ) == 1 ) {
 8006122:	4b81      	ldr	r3, [pc, #516]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <OnMacStateCheckTimerEvent+0x2d8>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8006130:	231e      	movs	r3, #30
 8006132:	723b      	strb	r3, [r7, #8]
                    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8006134:	4b83      	ldr	r3, [pc, #524]	; (8006344 <OnMacStateCheckTimerEvent+0x4bc>)
 8006136:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800613a:	72bb      	strb	r3, [r7, #10]
                    getPhy.Datarate = LoRaMacParams.ChannelsDatarate;
 800613c:	4b81      	ldr	r3, [pc, #516]	; (8006344 <OnMacStateCheckTimerEvent+0x4bc>)
 800613e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006142:	727b      	strb	r3, [r7, #9]
                    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8006144:	4b80      	ldr	r3, [pc, #512]	; (8006348 <OnMacStateCheckTimerEvent+0x4c0>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f107 0208 	add.w	r2, r7, #8
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f003 fe92 	bl	8009e78 <RegionGetPhyParam>
 8006154:	4603      	mov	r3, r0
 8006156:	607b      	str	r3, [r7, #4]
                    LoRaMacParams.ChannelsDatarate = phyParam.Value;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	b25a      	sxtb	r2, r3
 800615c:	4b79      	ldr	r3, [pc, #484]	; (8006344 <OnMacStateCheckTimerEvent+0x4bc>)
 800615e:	705a      	strb	r2, [r3, #1]
                }
                // Try to send the frame again
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8006160:	f001 f864 	bl	800722c <ScheduleTx>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d105      	bne.n	8006176 <OnMacStateCheckTimerEvent+0x2ee>
                    LoRaMacFlags.Bits.MacDone = 0;
 800616a:	4a6d      	ldr	r2, [pc, #436]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 800616c:	7813      	ldrb	r3, [r2, #0]
 800616e:	f36f 1345 	bfc	r3, #5, #1
 8006172:	7013      	strb	r3, [r2, #0]
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8006174:	e04e      	b.n	8006214 <OnMacStateCheckTimerEvent+0x38c>
                } else {
                    // The DR is not applicable for the payload size
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8006176:	4b6b      	ldr	r3, [pc, #428]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 8006178:	2209      	movs	r2, #9
 800617a:	705a      	strb	r2, [r3, #1]

                    MacCommandsBufferIndex = 0;
 800617c:	4b73      	ldr	r3, [pc, #460]	; (800634c <OnMacStateCheckTimerEvent+0x4c4>)
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8006182:	4b6f      	ldr	r3, [pc, #444]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	4a6d      	ldr	r2, [pc, #436]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 800618c:	6013      	str	r3, [r2, #0]
                    NodeAckRequested = false;
 800618e:	4b69      	ldr	r3, [pc, #420]	; (8006334 <OnMacStateCheckTimerEvent+0x4ac>)
 8006190:	2200      	movs	r2, #0
 8006192:	701a      	strb	r2, [r3, #0]
                    McpsConfirm.AckReceived = false;
 8006194:	4b63      	ldr	r3, [pc, #396]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 8006196:	2200      	movs	r2, #0
 8006198:	711a      	strb	r2, [r3, #4]
                    McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 800619a:	4b63      	ldr	r3, [pc, #396]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	4b61      	ldr	r3, [pc, #388]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 80061a0:	715a      	strb	r2, [r3, #5]
                    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 80061a2:	4b68      	ldr	r3, [pc, #416]	; (8006344 <OnMacStateCheckTimerEvent+0x4bc>)
 80061a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	4b5e      	ldr	r3, [pc, #376]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 80061ac:	709a      	strb	r2, [r3, #2]
                    if ( IsUpLinkCounterFixed == false ) {
 80061ae:	4b62      	ldr	r3, [pc, #392]	; (8006338 <OnMacStateCheckTimerEvent+0x4b0>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f083 0301 	eor.w	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d02b      	beq.n	8006214 <OnMacStateCheckTimerEvent+0x38c>
                        UpLinkCounter++;
 80061bc:	4b5f      	ldr	r3, [pc, #380]	; (800633c <OnMacStateCheckTimerEvent+0x4b4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	4a5e      	ldr	r2, [pc, #376]	; (800633c <OnMacStateCheckTimerEvent+0x4b4>)
 80061c4:	6013      	str	r3, [r2, #0]
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 80061c6:	e025      	b.n	8006214 <OnMacStateCheckTimerEvent+0x38c>
                    }
                }
            } else {
                RegionInitDefaults( LoRaMacRegion, INIT_TYPE_RESTORE );
 80061c8:	4b5f      	ldr	r3, [pc, #380]	; (8006348 <OnMacStateCheckTimerEvent+0x4c0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2101      	movs	r1, #1
 80061ce:	4618      	mov	r0, r3
 80061d0:	f003 fe7c 	bl	8009ecc <RegionInitDefaults>

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 80061d4:	4b5a      	ldr	r3, [pc, #360]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	4a58      	ldr	r2, [pc, #352]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 80061de:	6013      	str	r3, [r2, #0]

                MacCommandsBufferIndex = 0;
 80061e0:	4b5a      	ldr	r3, [pc, #360]	; (800634c <OnMacStateCheckTimerEvent+0x4c4>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 80061e6:	4b53      	ldr	r3, [pc, #332]	; (8006334 <OnMacStateCheckTimerEvent+0x4ac>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
                McpsConfirm.AckReceived = false;
 80061ec:	4b4d      	ldr	r3, [pc, #308]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	711a      	strb	r2, [r3, #4]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 80061f2:	4b4d      	ldr	r3, [pc, #308]	; (8006328 <OnMacStateCheckTimerEvent+0x4a0>)
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	4b4b      	ldr	r3, [pc, #300]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 80061f8:	715a      	strb	r2, [r3, #5]
                if ( IsUpLinkCounterFixed == false ) {
 80061fa:	4b4f      	ldr	r3, [pc, #316]	; (8006338 <OnMacStateCheckTimerEvent+0x4b0>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	f083 0301 	eor.w	r3, r3, #1
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d006      	beq.n	8006216 <OnMacStateCheckTimerEvent+0x38e>
                    UpLinkCounter++;
 8006208:	4b4c      	ldr	r3, [pc, #304]	; (800633c <OnMacStateCheckTimerEvent+0x4b4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3301      	adds	r3, #1
 800620e:	4a4b      	ldr	r2, [pc, #300]	; (800633c <OnMacStateCheckTimerEvent+0x4b4>)
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e000      	b.n	8006216 <OnMacStateCheckTimerEvent+0x38e>
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8006214:	bf00      	nop
            }
        }
    }

    // Handle events
    if( LoRaMacState == LORAMAC_IDLE )
 8006216:	4b4a      	ldr	r3, [pc, #296]	; (8006340 <OnMacStateCheckTimerEvent+0x4b8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d151      	bne.n	80062c2 <OnMacStateCheckTimerEvent+0x43a>
    {
        if( LoRaMacFlags.Bits.McpsReq == 1 )
 800621e:	4b40      	ldr	r3, [pc, #256]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <OnMacStateCheckTimerEvent+0x3b8>
        {
            LoRaMacFlags.Bits.McpsReq = 0;
 800622c:	4a3c      	ldr	r2, [pc, #240]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 800622e:	7813      	ldrb	r3, [r2, #0]
 8006230:	f36f 0300 	bfc	r3, #0, #1
 8006234:	7013      	strb	r3, [r2, #0]
            LoRaMacPrimitives->MacMcpsConfirm( &McpsConfirm );
 8006236:	4b46      	ldr	r3, [pc, #280]	; (8006350 <OnMacStateCheckTimerEvent+0x4c8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4839      	ldr	r0, [pc, #228]	; (8006324 <OnMacStateCheckTimerEvent+0x49c>)
 800623e:	4798      	blx	r3
        }

        if( LoRaMacFlags.Bits.MlmeReq == 1 )
 8006240:	4b37      	ldr	r3, [pc, #220]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 0308 	and.w	r3, r3, #8
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d011      	beq.n	8006272 <OnMacStateCheckTimerEvent+0x3ea>
        {
            LoRaMacFlags.Bits.MlmeReq = 0;
 800624e:	4a34      	ldr	r2, [pc, #208]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 8006250:	7813      	ldrb	r3, [r2, #0]
 8006252:	f36f 03c3 	bfc	r3, #3, #1
 8006256:	7013      	strb	r3, [r2, #0]
            LoRaMacConfirmQueueHandleCb( &MlmeConfirm );
 8006258:	483e      	ldr	r0, [pc, #248]	; (8006354 <OnMacStateCheckTimerEvent+0x4cc>)
 800625a:	f002 fffb 	bl	8009254 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800625e:	f003 f847 	bl	80092f0 <LoRaMacConfirmQueueGetCnt>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <OnMacStateCheckTimerEvent+0x3ea>
            {
                LoRaMacFlags.Bits.MlmeReq = 1;
 8006268:	4a2d      	ldr	r2, [pc, #180]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 800626a:	7813      	ldrb	r3, [r2, #0]
 800626c:	f043 0308 	orr.w	r3, r3, #8
 8006270:	7013      	strb	r3, [r2, #0]
            }
        }

        // Handle MLME indication
        if( LoRaMacFlags.Bits.MlmeInd == 1 )
 8006272:	4b2b      	ldr	r3, [pc, #172]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <OnMacStateCheckTimerEvent+0x40c>
        {
            LoRaMacPrimitives->MacMlmeIndication( &MlmeIndication );
 8006280:	4b33      	ldr	r3, [pc, #204]	; (8006350 <OnMacStateCheckTimerEvent+0x4c8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4834      	ldr	r0, [pc, #208]	; (8006358 <OnMacStateCheckTimerEvent+0x4d0>)
 8006288:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeInd = 0;
 800628a:	4a25      	ldr	r2, [pc, #148]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 800628c:	7813      	ldrb	r3, [r2, #0]
 800628e:	f36f 1304 	bfc	r3, #4, #1
 8006292:	7013      	strb	r3, [r2, #0]
        }
        // Verify if sticky MAC commands are pending or not
        if( IsStickyMacCommandPending( ) == true )
 8006294:	f000 fa6c 	bl	8006770 <IsStickyMacCommandPending>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <OnMacStateCheckTimerEvent+0x42e>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800629e:	f000 fa77 	bl	8006790 <SetMlmeScheduleUplinkIndication>
            LoRaMacPrimitives->MacMlmeIndication( &MlmeIndication );
 80062a2:	4b2b      	ldr	r3, [pc, #172]	; (8006350 <OnMacStateCheckTimerEvent+0x4c8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	482b      	ldr	r0, [pc, #172]	; (8006358 <OnMacStateCheckTimerEvent+0x4d0>)
 80062aa:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeInd = 0;
 80062ac:	4a1c      	ldr	r2, [pc, #112]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 80062ae:	7813      	ldrb	r3, [r2, #0]
 80062b0:	f36f 1304 	bfc	r3, #4, #1
 80062b4:	7013      	strb	r3, [r2, #0]
        }

        // Procedure done. Reset variables.
        LoRaMacFlags.Bits.MacDone = 0;
 80062b6:	4a1a      	ldr	r2, [pc, #104]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 80062b8:	7813      	ldrb	r3, [r2, #0]
 80062ba:	f36f 1345 	bfc	r3, #5, #1
 80062be:	7013      	strb	r3, [r2, #0]
 80062c0:	e007      	b.n	80062d2 <OnMacStateCheckTimerEvent+0x44a>

    }
    else
    {
        // Operation not finished restart timer
        TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 80062c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062c6:	4825      	ldr	r0, [pc, #148]	; (800635c <OnMacStateCheckTimerEvent+0x4d4>)
 80062c8:	f00a fab6 	bl	8010838 <TimerSetValue>
        TimerStart( &MacStateCheckTimer );
 80062cc:	4823      	ldr	r0, [pc, #140]	; (800635c <OnMacStateCheckTimerEvent+0x4d4>)
 80062ce:	f00a f8af 	bl	8010430 <TimerStart>
    }

    // Handle MCPS indication
    if( LoRaMacFlags.Bits.McpsInd == 1 )
 80062d2:	4b13      	ldr	r3, [pc, #76]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <OnMacStateCheckTimerEvent+0x490>
    {
        LoRaMacFlags.Bits.McpsInd = 0;
 80062e0:	4a0f      	ldr	r2, [pc, #60]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 80062e2:	7813      	ldrb	r3, [r2, #0]
 80062e4:	f36f 0341 	bfc	r3, #1, #1
 80062e8:	7013      	strb	r3, [r2, #0]
        if( LoRaMacDeviceClass == CLASS_C )
 80062ea:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <OnMacStateCheckTimerEvent+0x4d8>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d101      	bne.n	80062f6 <OnMacStateCheckTimerEvent+0x46e>
        {// Activate RX2 window for Class C
            OpenContinuousRx2Window( );
 80062f2:	f001 f971 	bl	80075d8 <OpenContinuousRx2Window>
        }
        if( LoRaMacFlags.Bits.McpsIndSkip == 0 )
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <OnMacStateCheckTimerEvent+0x486>
        {
            LoRaMacPrimitives->MacMcpsIndication( &McpsIndication );
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <OnMacStateCheckTimerEvent+0x4c8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4816      	ldr	r0, [pc, #88]	; (8006364 <OnMacStateCheckTimerEvent+0x4dc>)
 800630c:	4798      	blx	r3
        }
        LoRaMacFlags.Bits.McpsIndSkip = 0;
 800630e:	4a04      	ldr	r2, [pc, #16]	; (8006320 <OnMacStateCheckTimerEvent+0x498>)
 8006310:	7813      	ldrb	r3, [r2, #0]
 8006312:	f36f 0382 	bfc	r3, #2, #1
 8006316:	7013      	strb	r3, [r2, #0]
    }

}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20000a10 	.word	0x20000a10
 8006324:	200009b8 	.word	0x200009b8
 8006328:	2000000a 	.word	0x2000000a
 800632c:	20000009 	.word	0x20000009
 8006330:	200004bc 	.word	0x200004bc
 8006334:	20000364 	.word	0x20000364
 8006338:	2000035c 	.word	0x2000035c
 800633c:	20000354 	.word	0x20000354
 8006340:	20000480 	.word	0x20000480
 8006344:	20000a70 	.word	0x20000a70
 8006348:	20000114 	.word	0x20000114
 800634c:	20000367 	.word	0x20000367
 8006350:	20000498 	.word	0x20000498
 8006354:	2000098c 	.word	0x2000098c
 8006358:	20000aac 	.word	0x20000aac
 800635c:	20000484 	.word	0x20000484
 8006360:	2000014c 	.word	0x2000014c
 8006364:	200009e0 	.word	0x200009e0

08006368 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    LoRaMacFrameCtrl_t fCtrl;
    AlternateDrParams_t altDr;

    TimerStop( &TxDelayedTimer );
 800636e:	4822      	ldr	r0, [pc, #136]	; (80063f8 <OnTxDelayedTimerEvent+0x90>)
 8006370:	f00a f9a6 	bl	80106c0 <TimerStop>
    LoRaMacState &= ~LORAMAC_TX_DELAYED;
 8006374:	4b21      	ldr	r3, [pc, #132]	; (80063fc <OnTxDelayedTimerEvent+0x94>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f023 0310 	bic.w	r3, r3, #16
 800637c:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <OnTxDelayedTimerEvent+0x94>)
 800637e:	6013      	str	r3, [r2, #0]

    if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8006380:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <OnTxDelayedTimerEvent+0x98>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d02e      	beq.n	80063ec <OnTxDelayedTimerEvent+0x84>
 800638e:	4b1d      	ldr	r3, [pc, #116]	; (8006404 <OnTxDelayedTimerEvent+0x9c>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d12a      	bne.n	80063ec <OnTxDelayedTimerEvent+0x84>
        ResetMacParameters( );
 8006396:	f001 f86b 	bl	8007470 <ResetMacParameters>

        altDr.NbTrials = JoinRequestTrials + 1;
 800639a:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <OnTxDelayedTimerEvent+0xa0>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3301      	adds	r3, #1
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	80bb      	strh	r3, [r7, #4]

        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 80063a6:	4b19      	ldr	r3, [pc, #100]	; (800640c <OnTxDelayedTimerEvent+0xa4>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	1d3a      	adds	r2, r7, #4
 80063ac:	4611      	mov	r1, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f003 fea1 	bl	800a0f6 <RegionAlternateDr>
 80063b4:	4603      	mov	r3, r0
 80063b6:	461a      	mov	r2, r3
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <OnTxDelayedTimerEvent+0xa8>)
 80063ba:	705a      	strb	r2, [r3, #1]

        macHdr.Value = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	733b      	strb	r3, [r7, #12]
        macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80063c0:	7b3b      	ldrb	r3, [r7, #12]
 80063c2:	f36f 1347 	bfc	r3, #5, #3
 80063c6:	733b      	strb	r3, [r7, #12]

        fCtrl.Value = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	723b      	strb	r3, [r7, #8]
        fCtrl.Bits.Adr = AdrCtrlOn;
 80063cc:	4b11      	ldr	r3, [pc, #68]	; (8006414 <OnTxDelayedTimerEvent+0xac>)
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	7a3b      	ldrb	r3, [r7, #8]
 80063d2:	f362 13c7 	bfi	r3, r2, #7, #1
 80063d6:	723b      	strb	r3, [r7, #8]

        /* In case of join request retransmissions, the stack must prepare
         * the frame again, because the network server keeps track of the random
         * LoRaMacDevNonce values to prevent reply attacks. */
        PrepareFrame( &macHdr, &fCtrl, 0, NULL, 0 );
 80063d8:	f107 0108 	add.w	r1, r7, #8
 80063dc:	f107 000c 	add.w	r0, r7, #12
 80063e0:	2300      	movs	r3, #0
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2300      	movs	r3, #0
 80063e6:	2200      	movs	r2, #0
 80063e8:	f001 f902 	bl	80075f0 <PrepareFrame>
    }

    ScheduleTx( );
 80063ec:	f000 ff1e 	bl	800722c <ScheduleTx>
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000a54 	.word	0x20000a54
 80063fc:	20000480 	.word	0x20000480
 8006400:	20000a10 	.word	0x20000a10
 8006404:	2000098c 	.word	0x2000098c
 8006408:	20000a0c 	.word	0x20000a0c
 800640c:	20000114 	.word	0x20000114
 8006410:	20000a70 	.word	0x20000a70
 8006414:	2000035e 	.word	0x2000035e

08006418 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
    TimerStop( &RxWindowTimer1 );
 800641c:	481c      	ldr	r0, [pc, #112]	; (8006490 <OnRxWindow1TimerEvent+0x78>)
 800641e:	f00a f94f 	bl	80106c0 <TimerStop>
    RxSlot = RX_SLOT_WIN_1;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <OnRxWindow1TimerEvent+0x7c>)
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]

    RxWindow1Config.Channel = Channel;
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <OnRxWindow1TimerEvent+0x80>)
 800642a:	781a      	ldrb	r2, [r3, #0]
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 800642e:	701a      	strb	r2, [r3, #0]
    RxWindow1Config.DrOffset = LoRaMacParams.Rx1DrOffset;
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <OnRxWindow1TimerEvent+0x88>)
 8006432:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006436:	b25a      	sxtb	r2, r3
 8006438:	4b18      	ldr	r3, [pc, #96]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 800643a:	70da      	strb	r2, [r3, #3]
    RxWindow1Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800643c:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <OnRxWindow1TimerEvent+0x88>)
 800643e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8006442:	4b16      	ldr	r3, [pc, #88]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 8006444:	741a      	strb	r2, [r3, #16]
    RxWindow1Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 8006446:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <OnRxWindow1TimerEvent+0x88>)
 8006448:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800644c:	4b13      	ldr	r3, [pc, #76]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 800644e:	745a      	strb	r2, [r3, #17]
    RxWindow1Config.RxContinuous = false;
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 8006452:	2200      	movs	r2, #0
 8006454:	749a      	strb	r2, [r3, #18]
    RxWindow1Config.RxSlot = RxSlot;
 8006456:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <OnRxWindow1TimerEvent+0x7c>)
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	4b10      	ldr	r3, [pc, #64]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 800645c:	74da      	strb	r2, [r3, #19]

    if ( LoRaMacDeviceClass == CLASS_C ) {
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <OnRxWindow1TimerEvent+0x8c>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d102      	bne.n	800646c <OnRxWindow1TimerEvent+0x54>
        Radio.Standby( );
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <OnRxWindow1TimerEvent+0x90>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	4798      	blx	r3
    }

    RegionRxConfig( LoRaMacRegion, &RxWindow1Config, ( int8_t * )&McpsIndication.RxDatarate );
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <OnRxWindow1TimerEvent+0x94>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4a0f      	ldr	r2, [pc, #60]	; (80064b0 <OnRxWindow1TimerEvent+0x98>)
 8006472:	490a      	ldr	r1, [pc, #40]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 8006474:	4618      	mov	r0, r3
 8006476:	f003 fdac 	bl	8009fd2 <RegionRxConfig>
    //printf("w1 dr:%d\r\n",McpsIndication.RxDatarate);
    RxWindowSetup( RxWindow1Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 800647a:	4b08      	ldr	r3, [pc, #32]	; (800649c <OnRxWindow1TimerEvent+0x84>)
 800647c:	7c9b      	ldrb	r3, [r3, #18]
 800647e:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <OnRxWindow1TimerEvent+0x88>)
 8006480:	68d2      	ldr	r2, [r2, #12]
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f8bb 	bl	8006600 <RxWindowSetup>
#if(LoraWan_RGB==1)
    RGB_ON(COLOR_RXWINDOW1,0);
#endif
}
 800648a:	bf00      	nop
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200009f8 	.word	0x200009f8
 8006494:	20000a6c 	.word	0x20000a6c
 8006498:	20000479 	.word	0x20000479
 800649c:	200009cc 	.word	0x200009cc
 80064a0:	20000a70 	.word	0x20000a70
 80064a4:	2000014c 	.word	0x2000014c
 80064a8:	080130d4 	.word	0x080130d4
 80064ac:	20000114 	.word	0x20000114
 80064b0:	200009e4 	.word	0x200009e4

080064b4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
    TimerStop( &RxWindowTimer2 );
 80064b8:	481c      	ldr	r0, [pc, #112]	; (800652c <OnRxWindow2TimerEvent+0x78>)
 80064ba:	f00a f901 	bl	80106c0 <TimerStop>

    RxWindow2Config.Channel = Channel;
 80064be:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <OnRxWindow2TimerEvent+0x7c>)
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064c4:	701a      	strb	r2, [r3, #0]
    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 80064c6:	4b1c      	ldr	r3, [pc, #112]	; (8006538 <OnRxWindow2TimerEvent+0x84>)
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064cc:	6053      	str	r3, [r2, #4]
    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80064ce:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <OnRxWindow2TimerEvent+0x84>)
 80064d0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80064d4:	4b17      	ldr	r3, [pc, #92]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064d6:	741a      	strb	r2, [r3, #16]
    RxWindow2Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 80064d8:	4b17      	ldr	r3, [pc, #92]	; (8006538 <OnRxWindow2TimerEvent+0x84>)
 80064da:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064e0:	745a      	strb	r2, [r3, #17]
    RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80064e2:	4b14      	ldr	r3, [pc, #80]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	74da      	strb	r2, [r3, #19]

    if ( LoRaMacDeviceClass != CLASS_C ) {
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <OnRxWindow2TimerEvent+0x88>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d003      	beq.n	80064f8 <OnRxWindow2TimerEvent+0x44>
        RxWindow2Config.RxContinuous = false;
 80064f0:	4b10      	ldr	r3, [pc, #64]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	749a      	strb	r2, [r3, #18]
 80064f6:	e002      	b.n	80064fe <OnRxWindow2TimerEvent+0x4a>
    } else {
        RxWindow2Config.RxContinuous = true;
 80064f8:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	749a      	strb	r2, [r3, #18]
    }

    if ( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t * )&McpsIndication.RxDatarate ) == true ) {
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <OnRxWindow2TimerEvent+0x8c>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4a10      	ldr	r2, [pc, #64]	; (8006544 <OnRxWindow2TimerEvent+0x90>)
 8006504:	490b      	ldr	r1, [pc, #44]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 8006506:	4618      	mov	r0, r3
 8006508:	f003 fd63 	bl	8009fd2 <RegionRxConfig>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <OnRxWindow2TimerEvent+0x74>
    	//printf("w2 dr:%d\r\n",McpsIndication.RxDatarate);
        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <OnRxWindow2TimerEvent+0x80>)
 8006514:	7c9b      	ldrb	r3, [r3, #18]
 8006516:	4a08      	ldr	r2, [pc, #32]	; (8006538 <OnRxWindow2TimerEvent+0x84>)
 8006518:	68d2      	ldr	r2, [r2, #12]
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f000 f86f 	bl	8006600 <RxWindowSetup>
        RxSlot = RX_SLOT_WIN_2;
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <OnRxWindow2TimerEvent+0x94>)
 8006524:	2201      	movs	r2, #1
 8006526:	701a      	strb	r2, [r3, #0]
    }
#if(LoraWan_RGB==1)
	RGB_ON(COLOR_RXWINDOW2,0);
#endif

}
 8006528:	bf00      	nop
 800652a:	bd80      	pop	{r7, pc}
 800652c:	200009a0 	.word	0x200009a0
 8006530:	20000479 	.word	0x20000479
 8006534:	20000adc 	.word	0x20000adc
 8006538:	20000a70 	.word	0x20000a70
 800653c:	2000014c 	.word	0x2000014c
 8006540:	20000114 	.word	0x20000114
 8006544:	200009e4 	.word	0x200009e4
 8006548:	20000a6c 	.word	0x20000a6c

0800654c <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived,
                                      uint8_t ackTimeoutRetriesCounter, uint8_t ackTimeoutRetries )
{
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	4611      	mov	r1, r2
 8006558:	461a      	mov	r2, r3
 800655a:	4623      	mov	r3, r4
 800655c:	71fb      	strb	r3, [r7, #7]
 800655e:	4603      	mov	r3, r0
 8006560:	71bb      	strb	r3, [r7, #6]
 8006562:	460b      	mov	r3, r1
 8006564:	717b      	strb	r3, [r7, #5]
 8006566:	4613      	mov	r3, r2
 8006568:	713b      	strb	r3, [r7, #4]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	f083 0301 	eor.w	r3, r3, #1
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <CheckToDisableAckTimeout+0x38>
    {
        if( devClass == CLASS_C )
 8006576:	79bb      	ldrb	r3, [r7, #6]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d111      	bne.n	80065a0 <CheckToDisableAckTimeout+0x54>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            TimerStop( &AckTimeoutTimer );
 800657c:	480a      	ldr	r0, [pc, #40]	; (80065a8 <CheckToDisableAckTimeout+0x5c>)
 800657e:	f00a f89f 	bl	80106c0 <TimerStop>
                // elapsed. If so, stop the timer.
                TimerStop( &AckTimeoutTimer );
            }
        }
    }
}
 8006582:	e00d      	b.n	80065a0 <CheckToDisableAckTimeout+0x54>
        if( ackReceived == 1 )
 8006584:	797b      	ldrb	r3, [r7, #5]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <CheckToDisableAckTimeout+0x46>
            TimerStop( &AckTimeoutTimer );
 800658a:	4807      	ldr	r0, [pc, #28]	; (80065a8 <CheckToDisableAckTimeout+0x5c>)
 800658c:	f00a f898 	bl	80106c0 <TimerStop>
}
 8006590:	e006      	b.n	80065a0 <CheckToDisableAckTimeout+0x54>
            if( ackTimeoutRetriesCounter > ackTimeoutRetries )
 8006592:	793a      	ldrb	r2, [r7, #4]
 8006594:	7e3b      	ldrb	r3, [r7, #24]
 8006596:	429a      	cmp	r2, r3
 8006598:	d902      	bls.n	80065a0 <CheckToDisableAckTimeout+0x54>
                TimerStop( &AckTimeoutTimer );
 800659a:	4803      	ldr	r0, [pc, #12]	; (80065a8 <CheckToDisableAckTimeout+0x5c>)
 800659c:	f00a f890 	bl	80106c0 <TimerStop>
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd90      	pop	{r4, r7, pc}
 80065a8:	20000ac8 	.word	0x20000ac8

080065ac <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
    TimerStop( &AckTimeoutTimer );
 80065b0:	480d      	ldr	r0, [pc, #52]	; (80065e8 <OnAckTimeoutTimerEvent+0x3c>)
 80065b2:	f00a f885 	bl	80106c0 <TimerStop>

    if ( NodeAckRequested == true ) {
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <OnAckTimeoutTimerEvent+0x40>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <OnAckTimeoutTimerEvent+0x24>
        AckTimeoutRetry = true;
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <OnAckTimeoutTimerEvent+0x44>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	701a      	strb	r2, [r3, #0]
        LoRaMacState &= ~LORAMAC_ACK_REQ;
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <OnAckTimeoutTimerEvent+0x48>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f023 0304 	bic.w	r3, r3, #4
 80065cc:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <OnAckTimeoutTimerEvent+0x48>)
 80065ce:	6013      	str	r3, [r2, #0]
    }
    if ( LoRaMacDeviceClass == CLASS_C ) {
 80065d0:	4b09      	ldr	r3, [pc, #36]	; (80065f8 <OnAckTimeoutTimerEvent+0x4c>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d104      	bne.n	80065e2 <OnAckTimeoutTimerEvent+0x36>
        LoRaMacFlags.Bits.MacDone = 1;
 80065d8:	4a08      	ldr	r2, [pc, #32]	; (80065fc <OnAckTimeoutTimerEvent+0x50>)
 80065da:	7813      	ldrb	r3, [r2, #0]
 80065dc:	f043 0320 	orr.w	r3, r3, #32
 80065e0:	7013      	strb	r3, [r2, #0]
    }
}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000ac8 	.word	0x20000ac8
 80065ec:	20000364 	.word	0x20000364
 80065f0:	200004bc 	.word	0x200004bc
 80065f4:	20000480 	.word	0x20000480
 80065f8:	2000014c 	.word	0x2000014c
 80065fc:	20000a10 	.word	0x20000a10

08006600 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
    if ( rxContinuous == false ) {
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	f083 0301 	eor.w	r3, r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <RxWindowSetup+0x22>
        Radio.Rx( maxRxWindow );
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <RxWindowSetup+0x34>)
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	6838      	ldr	r0, [r7, #0]
 800661e:	4798      	blx	r3
    } else {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 8006620:	e003      	b.n	800662a <RxWindowSetup+0x2a>
        Radio.Rx( 0 ); // Continuous mode
 8006622:	4b04      	ldr	r3, [pc, #16]	; (8006634 <RxWindowSetup+0x34>)
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	2000      	movs	r0, #0
 8006628:	4798      	blx	r3
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	080130d4 	.word	0x080130d4

08006638 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b087      	sub	sp, #28
 800663c:	af02      	add	r7, sp, #8
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006642:	2303      	movs	r3, #3
 8006644:	73fb      	strb	r3, [r7, #15]

    switch( LoRaMacDeviceClass )
 8006646:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <SwitchClass+0x88>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d024      	beq.n	8006698 <SwitchClass+0x60>
 800664e:	2b02      	cmp	r3, #2
 8006650:	dc31      	bgt.n	80066b6 <SwitchClass+0x7e>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <SwitchClass+0x22>
 8006656:	2b01      	cmp	r3, #1
                status = LORAMAC_STATUS_OK;
            }
            break;
        }
        case CLASS_B:
        	break;
 8006658:	e02d      	b.n	80066b6 <SwitchClass+0x7e>
            if( deviceClass == CLASS_C )
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d127      	bne.n	80066b0 <SwitchClass+0x78>
                LoRaMacDeviceClass = deviceClass;
 8006660:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <SwitchClass+0x88>)
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	7013      	strb	r3, [r2, #0]
                NodeAckRequested = false;
 8006666:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <SwitchClass+0x8c>)
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
                Radio.Sleep( );
 800666c:	4b16      	ldr	r3, [pc, #88]	; (80066c8 <SwitchClass+0x90>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	4798      	blx	r3
                RegionComputeRxWindowParameters( LoRaMacRegion,
 8006672:	4b16      	ldr	r3, [pc, #88]	; (80066cc <SwitchClass+0x94>)
 8006674:	7818      	ldrb	r0, [r3, #0]
                                                 LoRaMacParams.Rx2Channel.Datarate,
 8006676:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <SwitchClass+0x98>)
 8006678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                RegionComputeRxWindowParameters( LoRaMacRegion,
 800667c:	b259      	sxtb	r1, r3
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <SwitchClass+0x98>)
 8006680:	7a1a      	ldrb	r2, [r3, #8]
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <SwitchClass+0x98>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4c13      	ldr	r4, [pc, #76]	; (80066d4 <SwitchClass+0x9c>)
 8006688:	9400      	str	r4, [sp, #0]
 800668a:	f003 fc88 	bl	8009f9e <RegionComputeRxWindowParameters>
                OpenContinuousRx2Window( );
 800668e:	f000 ffa3 	bl	80075d8 <OpenContinuousRx2Window>
                status = LORAMAC_STATUS_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
            break;
 8006696:	e00b      	b.n	80066b0 <SwitchClass+0x78>
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <SwitchClass+0x7c>
            {
                LoRaMacDeviceClass = deviceClass;
 800669e:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <SwitchClass+0x88>)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	7013      	strb	r3, [r2, #0]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80066a4:	4b08      	ldr	r3, [pc, #32]	; (80066c8 <SwitchClass+0x90>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80066ae:	e001      	b.n	80066b4 <SwitchClass+0x7c>
            break;
 80066b0:	bf00      	nop
 80066b2:	e000      	b.n	80066b6 <SwitchClass+0x7e>
            break;
 80066b4:	bf00      	nop
        }
    }

    return status;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd90      	pop	{r4, r7, pc}
 80066c0:	2000014c 	.word	0x2000014c
 80066c4:	20000364 	.word	0x20000364
 80066c8:	080130d4 	.word	0x080130d4
 80066cc:	20000114 	.word	0x20000114
 80066d0:	20000a70 	.word	0x20000a70
 80066d4:	20000adc 	.word	0x20000adc

080066d8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
 80066e2:	460b      	mov	r3, r1
 80066e4:	71bb      	strb	r3, [r7, #6]
 80066e6:	4613      	mov	r3, r2
 80066e8:	717b      	strb	r3, [r7, #5]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint16_t maxN = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	82fb      	strh	r3, [r7, #22]
    uint16_t payloadSize = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	82bb      	strh	r3, [r7, #20]

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 80066f2:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <ValidatePayloadLength+0x90>)
 80066f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066f8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80066fa:	79bb      	ldrb	r3, [r7, #6]
 80066fc:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80066fe:	2309      	movs	r3, #9
 8006700:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( LoRaMacParams.RepeaterSupport == true )
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <ValidatePayloadLength+0x90>)
 8006704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <ValidatePayloadLength+0x38>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800670c:	230a      	movs	r3, #10
 800670e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8006710:	4b16      	ldr	r3, [pc, #88]	; (800676c <ValidatePayloadLength+0x94>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f107 0210 	add.w	r2, r7, #16
 8006718:	4611      	mov	r1, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f003 fbac 	bl	8009e78 <RegionGetPhyParam>
 8006720:	4603      	mov	r3, r0
 8006722:	60fb      	str	r3, [r7, #12]
    maxN = phyParam.Value;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	82fb      	strh	r3, [r7, #22]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	b29a      	uxth	r2, r3
 800672c:	797b      	ldrb	r3, [r7, #5]
 800672e:	b29b      	uxth	r3, r3
 8006730:	4413      	add	r3, r2
 8006732:	82bb      	strh	r3, [r7, #20]

    // Validation of the application payload size
    if ( ((( payloadSize > maxN ) && (fOptsLen != 0) && (fOptsLen <= maxN)) || ( payloadSize <= maxN )) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) ) {
 8006734:	8aba      	ldrh	r2, [r7, #20]
 8006736:	8afb      	ldrh	r3, [r7, #22]
 8006738:	429a      	cmp	r2, r3
 800673a:	d907      	bls.n	800674c <ValidatePayloadLength+0x74>
 800673c:	797b      	ldrb	r3, [r7, #5]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <ValidatePayloadLength+0x74>
 8006742:	797b      	ldrb	r3, [r7, #5]
 8006744:	b29b      	uxth	r3, r3
 8006746:	8afa      	ldrh	r2, [r7, #22]
 8006748:	429a      	cmp	r2, r3
 800674a:	d203      	bcs.n	8006754 <ValidatePayloadLength+0x7c>
 800674c:	8aba      	ldrh	r2, [r7, #20]
 800674e:	8afb      	ldrh	r3, [r7, #22]
 8006750:	429a      	cmp	r2, r3
 8006752:	d804      	bhi.n	800675e <ValidatePayloadLength+0x86>
 8006754:	8abb      	ldrh	r3, [r7, #20]
 8006756:	2bff      	cmp	r3, #255	; 0xff
 8006758:	d801      	bhi.n	800675e <ValidatePayloadLength+0x86>
        return true;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <ValidatePayloadLength+0x88>
    }
    return false;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000a70 	.word	0x20000a70
 800676c:	20000114 	.word	0x20000114

08006770 <IsStickyMacCommandPending>:

static bool IsStickyMacCommandPending( void )
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
    if( MacCommandsBufferToRepeatIndex > 0 )
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <IsStickyMacCommandPending+0x1c>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <IsStickyMacCommandPending+0x10>
    {
        // Sticky MAC commands pending
        return true;
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <IsStickyMacCommandPending+0x12>
    }
    return false;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000368 	.word	0x20000368

08006790 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
    MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <SetMlmeScheduleUplinkIndication+0x1c>)
 8006796:	2204      	movs	r2, #4
 8006798:	701a      	strb	r2, [r3, #0]
    LoRaMacFlags.Bits.MlmeInd = 1;
 800679a:	4a05      	ldr	r2, [pc, #20]	; (80067b0 <SetMlmeScheduleUplinkIndication+0x20>)
 800679c:	7813      	ldrb	r3, [r2, #0]
 800679e:	f043 0310 	orr.w	r3, r3, #16
 80067a2:	7013      	strb	r3, [r2, #0]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	20000aac 	.word	0x20000aac
 80067b0:	20000a10 	.word	0x20000a10

080067b4 <AddMacCommand>:

static LoRaMacStatus_t AddMacCommand( uint8_t cmd, uint8_t p1, uint8_t p2 )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
 80067be:	460b      	mov	r3, r1
 80067c0:	71bb      	strb	r3, [r7, #6]
 80067c2:	4613      	mov	r3, r2
 80067c4:	717b      	strb	r3, [r7, #5]
    LoRaMacStatus_t status = LORAMAC_STATUS_BUSY;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
    // The maximum buffer length must take MAC commands to re-send into account.
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80067ca:	4bac      	ldr	r3, [pc, #688]	; (8006a7c <AddMacCommand+0x2c8>)
 80067cc:	781a      	ldrb	r2, [r3, #0]
 80067ce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	73bb      	strb	r3, [r7, #14]

    switch ( cmd ) {
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	3b02      	subs	r3, #2
 80067da:	2b11      	cmp	r3, #17
 80067dc:	f200 81a2 	bhi.w	8006b24 <AddMacCommand+0x370>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <AddMacCommand+0x34>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	08006831 	.word	0x08006831
 80067ec:	08006857 	.word	0x08006857
 80067f0:	08006895 	.word	0x08006895
 80067f4:	080068bb 	.word	0x080068bb
 80067f8:	080068fd 	.word	0x080068fd
 80067fc:	08006953 	.word	0x08006953
 8006800:	08006991 	.word	0x08006991
 8006804:	080069bb 	.word	0x080069bb
 8006808:	080069e1 	.word	0x080069e1
 800680c:	08006b25 	.word	0x08006b25
 8006810:	08006b25 	.word	0x08006b25
 8006814:	08006a1f 	.word	0x08006a1f
 8006818:	08006b25 	.word	0x08006b25
 800681c:	08006b25 	.word	0x08006b25
 8006820:	08006a45 	.word	0x08006a45
 8006824:	08006a89 	.word	0x08006a89
 8006828:	08006ac5 	.word	0x08006ac5
 800682c:	08006ae9 	.word	0x08006ae9
        case MOTE_MAC_LINK_CHECK_REQ:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006830:	4b93      	ldr	r3, [pc, #588]	; (8006a80 <AddMacCommand+0x2cc>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	7bba      	ldrb	r2, [r7, #14]
 8006836:	429a      	cmp	r2, r3
 8006838:	f240 8176 	bls.w	8006b28 <AddMacCommand+0x374>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800683c:	4b90      	ldr	r3, [pc, #576]	; (8006a80 <AddMacCommand+0x2cc>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	b2d1      	uxtb	r1, r2
 8006844:	4a8e      	ldr	r2, [pc, #568]	; (8006a80 <AddMacCommand+0x2cc>)
 8006846:	7011      	strb	r1, [r2, #0]
 8006848:	4619      	mov	r1, r3
 800684a:	4a8e      	ldr	r2, [pc, #568]	; (8006a84 <AddMacCommand+0x2d0>)
 800684c:	79fb      	ldrb	r3, [r7, #7]
 800684e:	5453      	strb	r3, [r2, r1]
                // No payload for this command
                status = LORAMAC_STATUS_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006854:	e168      	b.n	8006b28 <AddMacCommand+0x374>
        case MOTE_MAC_LINK_ADR_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 8006856:	4b8a      	ldr	r3, [pc, #552]	; (8006a80 <AddMacCommand+0x2cc>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	3b01      	subs	r3, #1
 8006860:	429a      	cmp	r2, r3
 8006862:	f280 8163 	bge.w	8006b2c <AddMacCommand+0x378>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006866:	4b86      	ldr	r3, [pc, #536]	; (8006a80 <AddMacCommand+0x2cc>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	b2d1      	uxtb	r1, r2
 800686e:	4a84      	ldr	r2, [pc, #528]	; (8006a80 <AddMacCommand+0x2cc>)
 8006870:	7011      	strb	r1, [r2, #0]
 8006872:	4619      	mov	r1, r3
 8006874:	4a83      	ldr	r2, [pc, #524]	; (8006a84 <AddMacCommand+0x2d0>)
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	5453      	strb	r3, [r2, r1]
                // Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800687a:	4b81      	ldr	r3, [pc, #516]	; (8006a80 <AddMacCommand+0x2cc>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	b2d1      	uxtb	r1, r2
 8006882:	4a7f      	ldr	r2, [pc, #508]	; (8006a80 <AddMacCommand+0x2cc>)
 8006884:	7011      	strb	r1, [r2, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	4a7e      	ldr	r2, [pc, #504]	; (8006a84 <AddMacCommand+0x2d0>)
 800688a:	79bb      	ldrb	r3, [r7, #6]
 800688c:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006892:	e14b      	b.n	8006b2c <AddMacCommand+0x378>
        case MOTE_MAC_DUTY_CYCLE_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006894:	4b7a      	ldr	r3, [pc, #488]	; (8006a80 <AddMacCommand+0x2cc>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	7bba      	ldrb	r2, [r7, #14]
 800689a:	429a      	cmp	r2, r3
 800689c:	f240 8148 	bls.w	8006b30 <AddMacCommand+0x37c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80068a0:	4b77      	ldr	r3, [pc, #476]	; (8006a80 <AddMacCommand+0x2cc>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	b2d1      	uxtb	r1, r2
 80068a8:	4a75      	ldr	r2, [pc, #468]	; (8006a80 <AddMacCommand+0x2cc>)
 80068aa:	7011      	strb	r1, [r2, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	4a75      	ldr	r2, [pc, #468]	; (8006a84 <AddMacCommand+0x2d0>)
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80068b8:	e13a      	b.n	8006b30 <AddMacCommand+0x37c>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 80068ba:	4b71      	ldr	r3, [pc, #452]	; (8006a80 <AddMacCommand+0x2cc>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	461a      	mov	r2, r3
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	f280 8135 	bge.w	8006b34 <AddMacCommand+0x380>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80068ca:	4b6d      	ldr	r3, [pc, #436]	; (8006a80 <AddMacCommand+0x2cc>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	b2d1      	uxtb	r1, r2
 80068d2:	4a6b      	ldr	r2, [pc, #428]	; (8006a80 <AddMacCommand+0x2cc>)
 80068d4:	7011      	strb	r1, [r2, #0]
 80068d6:	4619      	mov	r1, r3
 80068d8:	4a6a      	ldr	r2, [pc, #424]	; (8006a84 <AddMacCommand+0x2d0>)
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	5453      	strb	r3, [r2, r1]
                // Status: Datarate ACK, Channel ACK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80068de:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <AddMacCommand+0x2cc>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	b2d1      	uxtb	r1, r2
 80068e6:	4a66      	ldr	r2, [pc, #408]	; (8006a80 <AddMacCommand+0x2cc>)
 80068e8:	7011      	strb	r1, [r2, #0]
 80068ea:	4619      	mov	r1, r3
 80068ec:	4a65      	ldr	r2, [pc, #404]	; (8006a84 <AddMacCommand+0x2d0>)
 80068ee:	79bb      	ldrb	r3, [r7, #6]
 80068f0:	5453      	strb	r3, [r2, r1]
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 80068f2:	f7ff ff4d 	bl	8006790 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80068fa:	e11b      	b.n	8006b34 <AddMacCommand+0x380>
        case MOTE_MAC_DEV_STATUS_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 2 ) ) {
 80068fc:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <AddMacCommand+0x2cc>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	3b02      	subs	r3, #2
 8006906:	429a      	cmp	r2, r3
 8006908:	f280 8116 	bge.w	8006b38 <AddMacCommand+0x384>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800690c:	4b5c      	ldr	r3, [pc, #368]	; (8006a80 <AddMacCommand+0x2cc>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	b2d1      	uxtb	r1, r2
 8006914:	4a5a      	ldr	r2, [pc, #360]	; (8006a80 <AddMacCommand+0x2cc>)
 8006916:	7011      	strb	r1, [r2, #0]
 8006918:	4619      	mov	r1, r3
 800691a:	4a5a      	ldr	r2, [pc, #360]	; (8006a84 <AddMacCommand+0x2d0>)
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	5453      	strb	r3, [r2, r1]
                // 1st byte Battery
                // 2nd byte Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006920:	4b57      	ldr	r3, [pc, #348]	; (8006a80 <AddMacCommand+0x2cc>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	b2d1      	uxtb	r1, r2
 8006928:	4a55      	ldr	r2, [pc, #340]	; (8006a80 <AddMacCommand+0x2cc>)
 800692a:	7011      	strb	r1, [r2, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	4a55      	ldr	r2, [pc, #340]	; (8006a84 <AddMacCommand+0x2d0>)
 8006930:	79bb      	ldrb	r3, [r7, #6]
 8006932:	5453      	strb	r3, [r2, r1]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 8006934:	4b52      	ldr	r3, [pc, #328]	; (8006a80 <AddMacCommand+0x2cc>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	b2d1      	uxtb	r1, r2
 800693c:	4a50      	ldr	r2, [pc, #320]	; (8006a80 <AddMacCommand+0x2cc>)
 800693e:	7011      	strb	r1, [r2, #0]
 8006940:	4619      	mov	r1, r3
 8006942:	4a50      	ldr	r2, [pc, #320]	; (8006a84 <AddMacCommand+0x2d0>)
 8006944:	797b      	ldrb	r3, [r7, #5]
 8006946:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 8006948:	f7ff ff22 	bl	8006790 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_DEV_STATUS_ANS p1=%d p2=%d\r\n",p1,p2);
#endif
            }
            break;
 8006950:	e0f2      	b.n	8006b38 <AddMacCommand+0x384>
        case MOTE_MAC_NEW_CHANNEL_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 8006952:	4b4b      	ldr	r3, [pc, #300]	; (8006a80 <AddMacCommand+0x2cc>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	3b01      	subs	r3, #1
 800695c:	429a      	cmp	r2, r3
 800695e:	f280 80ed 	bge.w	8006b3c <AddMacCommand+0x388>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006962:	4b47      	ldr	r3, [pc, #284]	; (8006a80 <AddMacCommand+0x2cc>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	b2d1      	uxtb	r1, r2
 800696a:	4a45      	ldr	r2, [pc, #276]	; (8006a80 <AddMacCommand+0x2cc>)
 800696c:	7011      	strb	r1, [r2, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	4a44      	ldr	r2, [pc, #272]	; (8006a84 <AddMacCommand+0x2d0>)
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <AddMacCommand+0x2cc>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	b2d1      	uxtb	r1, r2
 800697e:	4a40      	ldr	r2, [pc, #256]	; (8006a80 <AddMacCommand+0x2cc>)
 8006980:	7011      	strb	r1, [r2, #0]
 8006982:	4619      	mov	r1, r3
 8006984:	4a3f      	ldr	r2, [pc, #252]	; (8006a84 <AddMacCommand+0x2d0>)
 8006986:	79bb      	ldrb	r3, [r7, #6]
 8006988:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800698e:	e0d5      	b.n	8006b3c <AddMacCommand+0x388>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006990:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <AddMacCommand+0x2cc>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	7bba      	ldrb	r2, [r7, #14]
 8006996:	429a      	cmp	r2, r3
 8006998:	f240 80d2 	bls.w	8006b40 <AddMacCommand+0x38c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800699c:	4b38      	ldr	r3, [pc, #224]	; (8006a80 <AddMacCommand+0x2cc>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	b2d1      	uxtb	r1, r2
 80069a4:	4a36      	ldr	r2, [pc, #216]	; (8006a80 <AddMacCommand+0x2cc>)
 80069a6:	7011      	strb	r1, [r2, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	4a36      	ldr	r2, [pc, #216]	; (8006a84 <AddMacCommand+0x2d0>)
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 80069b0:	f7ff feee 	bl	8006790 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80069b8:	e0c2      	b.n	8006b40 <AddMacCommand+0x38c>
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 80069ba:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <AddMacCommand+0x2cc>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	7bba      	ldrb	r2, [r7, #14]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	f240 80bf 	bls.w	8006b44 <AddMacCommand+0x390>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <AddMacCommand+0x2cc>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	b2d1      	uxtb	r1, r2
 80069ce:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <AddMacCommand+0x2cc>)
 80069d0:	7011      	strb	r1, [r2, #0]
 80069d2:	4619      	mov	r1, r3
 80069d4:	4a2b      	ldr	r2, [pc, #172]	; (8006a84 <AddMacCommand+0x2d0>)
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80069de:	e0b1      	b.n	8006b44 <AddMacCommand+0x390>
        case MOTE_MAC_DL_CHANNEL_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <AddMacCommand+0x2cc>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	7bba      	ldrb	r2, [r7, #14]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	f240 80ae 	bls.w	8006b48 <AddMacCommand+0x394>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80069ec:	4b24      	ldr	r3, [pc, #144]	; (8006a80 <AddMacCommand+0x2cc>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	b2d1      	uxtb	r1, r2
 80069f4:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <AddMacCommand+0x2cc>)
 80069f6:	7011      	strb	r1, [r2, #0]
 80069f8:	4619      	mov	r1, r3
 80069fa:	4a22      	ldr	r2, [pc, #136]	; (8006a84 <AddMacCommand+0x2d0>)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	5453      	strb	r3, [r2, r1]
                // Status: Uplink frequency exists, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006a00:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	b2d1      	uxtb	r1, r2
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a0a:	7011      	strb	r1, [r2, #0]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <AddMacCommand+0x2d0>)
 8006a10:	79bb      	ldrb	r3, [r7, #6]
 8006a12:	5453      	strb	r3, [r2, r1]
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 8006a14:	f7ff febc 	bl	8006790 <SetMlmeScheduleUplinkIndication>

                status = LORAMAC_STATUS_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006a1c:	e094      	b.n	8006b48 <AddMacCommand+0x394>
        case MOTE_MAC_DEVICE_TIME_REQ:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006a1e:	4b18      	ldr	r3, [pc, #96]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b25b      	sxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f2c0 8091 	blt.w	8006b4c <AddMacCommand+0x398>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	b2d1      	uxtb	r1, r2
 8006a32:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a34:	7011      	strb	r1, [r2, #0]
 8006a36:	4619      	mov	r1, r3
 8006a38:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <AddMacCommand+0x2d0>)
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
               status = LORAMAC_STATUS_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_DEVICE_TIME_REQ\r\n");
#endif
            }
            break;
 8006a42:	e083      	b.n	8006b4c <AddMacCommand+0x398>
        case MOTE_MAC_PING_SLOT_INFO_REQ:
            if( MacCommandsBufferIndex < ( LORA_MAC_COMMAND_MAX_LENGTH - 1 ) )
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b7e      	cmp	r3, #126	; 0x7e
 8006a4a:	f200 8081 	bhi.w	8006b50 <AddMacCommand+0x39c>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	b2d1      	uxtb	r1, r2
 8006a56:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a58:	7011      	strb	r1, [r2, #0]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <AddMacCommand+0x2d0>)
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	5453      	strb	r3, [r2, r1]
                // Status: Periodicity and Datarate
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	b2d1      	uxtb	r1, r2
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <AddMacCommand+0x2cc>)
 8006a6c:	7011      	strb	r1, [r2, #0]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <AddMacCommand+0x2d0>)
 8006a72:	79bb      	ldrb	r3, [r7, #6]
 8006a74:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_PING_SLOT_INFO_REQ value=%d\r\n",p1);
#endif
            }
            break;
 8006a7a:	e069      	b.n	8006b50 <AddMacCommand+0x39c>
 8006a7c:	20000368 	.word	0x20000368
 8006a80:	20000367 	.word	0x20000367
 8006a84:	2000036c 	.word	0x2000036c
        case MOTE_MAC_PING_SLOT_FREQ_ANS:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006a88:	4b3d      	ldr	r3, [pc, #244]	; (8006b80 <AddMacCommand+0x3cc>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	db60      	blt.n	8006b54 <AddMacCommand+0x3a0>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006a92:	4b3b      	ldr	r3, [pc, #236]	; (8006b80 <AddMacCommand+0x3cc>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	b2d1      	uxtb	r1, r2
 8006a9a:	4a39      	ldr	r2, [pc, #228]	; (8006b80 <AddMacCommand+0x3cc>)
 8006a9c:	7011      	strb	r1, [r2, #0]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4a38      	ldr	r2, [pc, #224]	; (8006b84 <AddMacCommand+0x3d0>)
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006aa6:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <AddMacCommand+0x3cc>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	b2d1      	uxtb	r1, r2
 8006aae:	4a34      	ldr	r2, [pc, #208]	; (8006b80 <AddMacCommand+0x3cc>)
 8006ab0:	7011      	strb	r1, [r2, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4a33      	ldr	r2, [pc, #204]	; (8006b84 <AddMacCommand+0x3d0>)
 8006ab6:	79bb      	ldrb	r3, [r7, #6]
 8006ab8:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 8006aba:	f7ff fe69 	bl	8006790 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006ac2:	e047      	b.n	8006b54 <AddMacCommand+0x3a0>
        case MOTE_MAC_BEACON_TIMING_REQ:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006ac4:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <AddMacCommand+0x3cc>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	db44      	blt.n	8006b58 <AddMacCommand+0x3a4>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006ace:	4b2c      	ldr	r3, [pc, #176]	; (8006b80 <AddMacCommand+0x3cc>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	b2d1      	uxtb	r1, r2
 8006ad6:	4a2a      	ldr	r2, [pc, #168]	; (8006b80 <AddMacCommand+0x3cc>)
 8006ad8:	7011      	strb	r1, [r2, #0]
 8006ada:	4619      	mov	r1, r3
 8006adc:	4a29      	ldr	r2, [pc, #164]	; (8006b84 <AddMacCommand+0x3d0>)
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006ae6:	e037      	b.n	8006b58 <AddMacCommand+0x3a4>
        case MOTE_MAC_BEACON_FREQ_ANS:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006ae8:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <AddMacCommand+0x3cc>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b25b      	sxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	db34      	blt.n	8006b5c <AddMacCommand+0x3a8>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006af2:	4b23      	ldr	r3, [pc, #140]	; (8006b80 <AddMacCommand+0x3cc>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	b2d1      	uxtb	r1, r2
 8006afa:	4a21      	ldr	r2, [pc, #132]	; (8006b80 <AddMacCommand+0x3cc>)
 8006afc:	7011      	strb	r1, [r2, #0]
 8006afe:	4619      	mov	r1, r3
 8006b00:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <AddMacCommand+0x3d0>)
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	5453      	strb	r3, [r2, r1]
                // Status: Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006b06:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <AddMacCommand+0x3cc>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	b2d1      	uxtb	r1, r2
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <AddMacCommand+0x3cc>)
 8006b10:	7011      	strb	r1, [r2, #0]
 8006b12:	4619      	mov	r1, r3
 8006b14:	4a1b      	ldr	r2, [pc, #108]	; (8006b84 <AddMacCommand+0x3d0>)
 8006b16:	79bb      	ldrb	r3, [r7, #6]
 8006b18:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 8006b1a:	f7ff fe39 	bl	8006790 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006b22:	e01b      	b.n	8006b5c <AddMacCommand+0x3a8>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e027      	b.n	8006b78 <AddMacCommand+0x3c4>
            break;
 8006b28:	bf00      	nop
 8006b2a:	e018      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b2c:	bf00      	nop
 8006b2e:	e016      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b30:	bf00      	nop
 8006b32:	e014      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b34:	bf00      	nop
 8006b36:	e012      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b38:	bf00      	nop
 8006b3a:	e010      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b3c:	bf00      	nop
 8006b3e:	e00e      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b40:	bf00      	nop
 8006b42:	e00c      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b44:	bf00      	nop
 8006b46:	e00a      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b48:	bf00      	nop
 8006b4a:	e008      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b4c:	bf00      	nop
 8006b4e:	e006      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b50:	bf00      	nop
 8006b52:	e004      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b54:	bf00      	nop
 8006b56:	e002      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b58:	bf00      	nop
 8006b5a:	e000      	b.n	8006b5e <AddMacCommand+0x3aa>
            break;
 8006b5c:	bf00      	nop
    }
    if ( status == LORAMAC_STATUS_OK ) {
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d108      	bne.n	8006b76 <AddMacCommand+0x3c2>
        MacCommandsInNextTx = true;
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <AddMacCommand+0x3d4>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	701a      	strb	r2, [r3, #0]
        if (SrvAckRequested) {
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <AddMacCommand+0x3d8>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <AddMacCommand+0x3c2>
            SetMlmeScheduleUplinkIndication();
 8006b72:	f7ff fe0d 	bl	8006790 <SetMlmeScheduleUplinkIndication>
        }
    }
    return status;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000367 	.word	0x20000367
 8006b84:	2000036c 	.word	0x2000036c
 8006b88:	20000366 	.word	0x20000366
 8006b8c:	20000365 	.word	0x20000365

08006b90 <ParseMacCommandsToRepeat>:

static uint8_t ParseMacCommandsToRepeat( uint8_t *cmdBufIn, uint8_t length, uint8_t *cmdBufOut )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	72fb      	strb	r3, [r7, #11]
    uint8_t i = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]
    uint8_t cmdCount = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	75bb      	strb	r3, [r7, #22]

    if ( ( cmdBufIn == NULL ) || ( cmdBufOut == NULL ) ) {
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <ParseMacCommandsToRepeat+0x22>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <ParseMacCommandsToRepeat+0x26>
        return 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e055      	b.n	8006c62 <ParseMacCommandsToRepeat+0xd2>
    }

    for ( i = 0; i < length; i++ ) {
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
 8006bba:	e04d      	b.n	8006c58 <ParseMacCommandsToRepeat+0xc8>
        switch ( cmdBufIn[i] ) {
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	3b02      	subs	r3, #2
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d842      	bhi.n	8006c50 <ParseMacCommandsToRepeat+0xc0>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <ParseMacCommandsToRepeat+0x40>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006c51 	.word	0x08006c51
 8006bd4:	08006c49 	.word	0x08006c49
 8006bd8:	08006c51 	.word	0x08006c51
 8006bdc:	08006bf5 	.word	0x08006bf5
 8006be0:	08006c41 	.word	0x08006c41
 8006be4:	08006c49 	.word	0x08006c49
 8006be8:	08006c29 	.word	0x08006c29
 8006bec:	08006c51 	.word	0x08006c51
 8006bf0:	08006bf5 	.word	0x08006bf5
            // STICKY
            case MOTE_MAC_DL_CHANNEL_ANS:
            case MOTE_MAC_RX_PARAM_SETUP_ANS: {
                // 1 byte payload
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	75fa      	strb	r2, [r7, #23]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	441a      	add	r2, r3
 8006c00:	7dbb      	ldrb	r3, [r7, #22]
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	75b9      	strb	r1, [r7, #22]
 8006c06:	4619      	mov	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	440b      	add	r3, r1
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	441a      	add	r2, r3
 8006c16:	7dbb      	ldrb	r3, [r7, #22]
 8006c18:	1c59      	adds	r1, r3, #1
 8006c1a:	75b9      	strb	r1, [r7, #22]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	440b      	add	r3, r1
 8006c22:	7812      	ldrb	r2, [r2, #0]
 8006c24:	701a      	strb	r2, [r3, #0]
                break;
 8006c26:	e014      	b.n	8006c52 <ParseMacCommandsToRepeat+0xc2>
            }
            case MOTE_MAC_RX_TIMING_SETUP_ANS: {
                // 0 byte payload
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	441a      	add	r2, r3
 8006c2e:	7dbb      	ldrb	r3, [r7, #22]
 8006c30:	1c59      	adds	r1, r3, #1
 8006c32:	75b9      	strb	r1, [r7, #22]
 8006c34:	4619      	mov	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	440b      	add	r3, r1
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	701a      	strb	r2, [r3, #0]
                break;
 8006c3e:	e008      	b.n	8006c52 <ParseMacCommandsToRepeat+0xc2>
            }
            // NON-STICKY
            case MOTE_MAC_DEV_STATUS_ANS: {
                // 2 bytes payload
                i += 2;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	3302      	adds	r3, #2
 8006c44:	75fb      	strb	r3, [r7, #23]
                break;
 8006c46:	e004      	b.n	8006c52 <ParseMacCommandsToRepeat+0xc2>
            }
            case MOTE_MAC_LINK_ADR_ANS:
            case MOTE_MAC_NEW_CHANNEL_ANS: {
                // 1 byte payload
                i++;
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	75fb      	strb	r3, [r7, #23]
                break;
 8006c4e:	e000      	b.n	8006c52 <ParseMacCommandsToRepeat+0xc2>
            case MOTE_MAC_LINK_CHECK_REQ: {
                // 0 byte payload
                break;
            }
            default:
                break;
 8006c50:	bf00      	nop
    for ( i = 0; i < length; i++ ) {
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	3301      	adds	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
 8006c58:	7dfa      	ldrb	r2, [r7, #23]
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d3ad      	bcc.n	8006bbc <ParseMacCommandsToRepeat+0x2c>
        }
    }

    return cmdCount;
 8006c60:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b095      	sub	sp, #84	; 0x54
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	4608      	mov	r0, r1
 8006c76:	4611      	mov	r1, r2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	70fb      	strb	r3, [r7, #3]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	70bb      	strb	r3, [r7, #2]
 8006c82:	4613      	mov	r3, r2
 8006c84:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    while ( macIndex < commandsSize ) {
 8006c8c:	e265      	b.n	800715a <ProcessMacCommands+0x4ee>
        // Decode Frame MAC commands
        switch ( payload[macIndex++] ) {
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	70fa      	strb	r2, [r7, #3]
 8006c94:	461a      	mov	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4413      	add	r3, r2
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	3b02      	subs	r3, #2
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	f200 8261 	bhi.w	8007166 <ProcessMacCommands+0x4fa>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <ProcessMacCommands+0x40>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006d0d 	.word	0x08006d0d
 8006cb4:	08006e03 	.word	0x08006e03
 8006cb8:	08006e31 	.word	0x08006e31
 8006cbc:	08006eff 	.word	0x08006eff
 8006cc0:	08006f35 	.word	0x08006f35
 8006cc4:	08006ff9 	.word	0x08006ff9
 8006cc8:	0800704b 	.word	0x0800704b
 8006ccc:	080070d9 	.word	0x080070d9
            case SRV_MAC_LINK_CHECK_ANS:
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f002 faa3 	bl	800921c <LoRaMacConfirmQueueIsCmdActive>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 823e 	beq.w	800715a <ProcessMacCommands+0x4ee>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8006cde:	2101      	movs	r1, #1
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f002 fa0f 	bl	8009104 <LoRaMacConfirmQueueSetStatus>
                	MlmeConfirm.DemodMargin = payload[macIndex++];
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	70fa      	strb	r2, [r7, #3]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	4bb8      	ldr	r3, [pc, #736]	; (8006fd8 <ProcessMacCommands+0x36c>)
 8006cf6:	721a      	strb	r2, [r3, #8]
                	MlmeConfirm.NbGateways = payload[macIndex++];
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	70fa      	strb	r2, [r7, #3]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4413      	add	r3, r2
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	4bb4      	ldr	r3, [pc, #720]	; (8006fd8 <ProcessMacCommands+0x36c>)
 8006d08:	725a      	strb	r2, [r3, #9]
                }
                break;
 8006d0a:	e226      	b.n	800715a <ProcessMacCommands+0x4ee>
            case SRV_MAC_LINK_ADR_REQ: {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                int8_t linkAdrTxPower = TX_POWER_0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                uint8_t linkAdrNbRep = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                uint8_t linkAdrNbBytesParsed = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                // Fill parameter structure
                linkAdrReq.Payload = &payload[macIndex - 1];
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
                linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8006d2e:	78ba      	ldrb	r2, [r7, #2]
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	3301      	adds	r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
                linkAdrReq.AdrEnabled = AdrCtrlOn;
 8006d3e:	4ba7      	ldr	r3, [pc, #668]	; (8006fdc <ProcessMacCommands+0x370>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                linkAdrReq.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8006d46:	4ba6      	ldr	r3, [pc, #664]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006d48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                linkAdrReq.CurrentDatarate = LoRaMacParams.ChannelsDatarate;
 8006d50:	4ba3      	ldr	r3, [pc, #652]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006d52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006d56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                linkAdrReq.CurrentTxPower = LoRaMacParams.ChannelsTxPower;
 8006d5a:	4ba1      	ldr	r3, [pc, #644]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8006d60:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                linkAdrReq.CurrentNbRep = LoRaMacParams.ChannelsNbRep;
 8006d64:	4b9e      	ldr	r3, [pc, #632]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                // Process the ADR requests
                status = RegionLinkAdrReq( LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 8006d6e:	4b9d      	ldr	r3, [pc, #628]	; (8006fe4 <ProcessMacCommands+0x378>)
 8006d70:	7818      	ldrb	r0, [r3, #0]
 8006d72:	f107 0432 	add.w	r4, r7, #50	; 0x32
 8006d76:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8006d7a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	4623      	mov	r3, r4
 8006d8c:	f003 f94d 	bl	800a02a <RegionLinkAdrReq>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                                           &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );
                //printf("status:%d\r\n",status);

                if ( ( status & 0x07 ) == 0x07 ) {
 8006d96:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d10c      	bne.n	8006dbc <ProcessMacCommands+0x150>
                    LoRaMacParams.ChannelsDatarate = linkAdrDatarate;
 8006da2:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 8006da6:	4b8e      	ldr	r3, [pc, #568]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006da8:	705a      	strb	r2, [r3, #1]
                    //SaveDr();
                    LoRaMacParams.ChannelsTxPower = linkAdrTxPower;
 8006daa:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 8006dae:	4b8c      	ldr	r3, [pc, #560]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006db0:	701a      	strb	r2, [r3, #0]
                    LoRaMacParams.ChannelsNbRep = linkAdrNbRep;
 8006db2:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8006db6:	4b8a      	ldr	r3, [pc, #552]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006db8:	f883 2020 	strb.w	r2, [r3, #32]
                    //lora_printf("ChannelsDatarate:%d ChannelsTxPower:%d,ChannelsNbRep:%d\r\n",LoRaMacParams.ChannelsDatarate,LoRaMacParams.ChannelsTxPower,LoRaMacParams.ChannelsNbRep);
                }

                // Add the answers to the buffer
                for ( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ ) {
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006dc2:	e00b      	b.n	8006ddc <ProcessMacCommands+0x170>
                    AddMacCommand( MOTE_MAC_LINK_ADR_ANS, status, 0 );
 8006dc4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4619      	mov	r1, r3
 8006dcc:	2003      	movs	r0, #3
 8006dce:	f7ff fcf1 	bl	80067b4 <AddMacCommand>
                for ( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ ) {
 8006dd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006ddc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006de0:	4a81      	ldr	r2, [pc, #516]	; (8006fe8 <ProcessMacCommands+0x37c>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	089b      	lsrs	r3, r3, #2
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d3e8      	bcc.n	8006dc4 <ProcessMacCommands+0x158>
                }
                // Update MAC index
                macIndex += linkAdrNbBytesParsed - 1;
 8006df2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	4413      	add	r3, r2
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8006e00:	e1ab      	b.n	800715a <ProcessMacCommands+0x4ee>
            case SRV_MAC_DUTY_CYCLE_REQ:
                MaxDCycle = payload[macIndex++];
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	70fa      	strb	r2, [r7, #3]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	4b76      	ldr	r3, [pc, #472]	; (8006fec <ProcessMacCommands+0x380>)
 8006e12:	701a      	strb	r2, [r3, #0]
                AggregatedDCycle = 1 << MaxDCycle;
 8006e14:	4b75      	ldr	r3, [pc, #468]	; (8006fec <ProcessMacCommands+0x380>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4093      	lsls	r3, r2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	4b73      	ldr	r3, [pc, #460]	; (8006ff0 <ProcessMacCommands+0x384>)
 8006e22:	801a      	strh	r2, [r3, #0]
                AddMacCommand( MOTE_MAC_DUTY_CYCLE_ANS, 0, 0 );
 8006e24:	2200      	movs	r2, #0
 8006e26:	2100      	movs	r1, #0
 8006e28:	2004      	movs	r0, #4
 8006e2a:	f7ff fcc3 	bl	80067b4 <AddMacCommand>
                break;
 8006e2e:	e194      	b.n	800715a <ProcessMacCommands+0x4ee>
            case SRV_MAC_RX_PARAM_SETUP_REQ: {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8006e30:	2307      	movs	r3, #7
 8006e32:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	091b      	lsrs	r3, r3, #4
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                macIndex++;
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	3301      	adds	r3, #1
 8006e66:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency =  ( uint32_t )payload[macIndex++];
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	70fa      	strb	r2, [r7, #3]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4413      	add	r3, r2
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	70fa      	strb	r2, [r7, #3]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	021a      	lsls	r2, r3, #8
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006e8e:	78fb      	ldrb	r3, [r7, #3]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	70fa      	strb	r2, [r7, #3]
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	041a      	lsls	r2, r3, #16
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency *= 100;
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	2264      	movs	r2, #100	; 0x64
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c

                // Perform request on region
                status = RegionRxParamSetupReq( LoRaMacRegion, &rxParamSetupReq );
 8006eae:	4b4d      	ldr	r3, [pc, #308]	; (8006fe4 <ProcessMacCommands+0x378>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f003 f8d0 	bl	800a05e <RegionRxParamSetupReq>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if ( ( status & 0x07 ) == 0x07 ) {
 8006ec4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	2b07      	cmp	r3, #7
 8006ece:	d10e      	bne.n	8006eee <ProcessMacCommands+0x282>
                    LoRaMacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8006ed0:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	4b42      	ldr	r3, [pc, #264]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    LoRaMacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	4a40      	ldr	r2, [pc, #256]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006ee0:	6253      	str	r3, [r2, #36]	; 0x24
                    LoRaMacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8006ee2:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	4b3d      	ldr	r3, [pc, #244]	; (8006fe0 <ProcessMacCommands+0x374>)
 8006eea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                }
                AddMacCommand( MOTE_MAC_RX_PARAM_SETUP_ANS, status, 0 );
 8006eee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	2005      	movs	r0, #5
 8006ef8:	f7ff fc5c 	bl	80067b4 <AddMacCommand>
            }
            break;
 8006efc:	e12d      	b.n	800715a <ProcessMacCommands+0x4ee>
            case SRV_MAC_DEV_STATUS_REQ: {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8006efe:	23ff      	movs	r3, #255	; 0xff
 8006f00:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                if ( ( LoRaMacCallbacks != NULL ) && ( LoRaMacCallbacks->GetBatteryLevel != NULL ) ) {
 8006f04:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <ProcessMacCommands+0x388>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00b      	beq.n	8006f24 <ProcessMacCommands+0x2b8>
 8006f0c:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <ProcessMacCommands+0x388>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d006      	beq.n	8006f24 <ProcessMacCommands+0x2b8>
                    batteryLevel = LoRaMacCallbacks->GetBatteryLevel( );
 8006f16:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <ProcessMacCommands+0x388>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4798      	blx	r3
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                }
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("receive SRV_MAC_DEV_STATUS_REQ\r\n");
#endif
                AddMacCommand( MOTE_MAC_DEV_STATUS_ANS, batteryLevel, snr );
 8006f24:	787a      	ldrb	r2, [r7, #1]
 8006f26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	2006      	movs	r0, #6
 8006f2e:	f7ff fc41 	bl	80067b4 <AddMacCommand>
                break;
 8006f32:	e112      	b.n	800715a <ProcessMacCommands+0x4ee>
            }
            case SRV_MAC_NEW_CHANNEL_REQ: {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8006f34:	2303      	movs	r3, #3
 8006f36:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                newChannelReq.ChannelId = payload[macIndex++];
 8006f3a:	78fb      	ldrb	r3, [r7, #3]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	70fa      	strb	r2, [r7, #3]
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4413      	add	r3, r2
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	623b      	str	r3, [r7, #32]

                chParam.Frequency = ( uint32_t )payload[macIndex++];
 8006f54:	78fb      	ldrb	r3, [r7, #3]
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	70fa      	strb	r2, [r7, #3]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	617b      	str	r3, [r7, #20]
                chParam.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	70fa      	strb	r2, [r7, #3]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4413      	add	r3, r2
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	021a      	lsls	r2, r3, #8
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]
                chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	70fa      	strb	r2, [r7, #3]
 8006f80:	461a      	mov	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	041a      	lsls	r2, r3, #16
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
                chParam.Frequency *= 100;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2264      	movs	r2, #100	; 0x64
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	617b      	str	r3, [r7, #20]
                chParam.Rx1Frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61bb      	str	r3, [r7, #24]
                chParam.DrRange.Value = payload[macIndex++];
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	70fa      	strb	r2, [r7, #3]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	773b      	strb	r3, [r7, #28]

                status = RegionNewChannelReq( LoRaMacRegion, &newChannelReq );
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <ProcessMacCommands+0x378>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f107 0220 	add.w	r2, r7, #32
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f003 f862 	bl	800a084 <RegionNewChannelReq>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                AddMacCommand( MOTE_MAC_NEW_CHANNEL_ANS, status, 0 );
 8006fc6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4619      	mov	r1, r3
 8006fce:	2007      	movs	r0, #7
 8006fd0:	f7ff fbf0 	bl	80067b4 <AddMacCommand>
            }
            break;
 8006fd4:	e0c1      	b.n	800715a <ProcessMacCommands+0x4ee>
 8006fd6:	bf00      	nop
 8006fd8:	2000098c 	.word	0x2000098c
 8006fdc:	2000035e 	.word	0x2000035e
 8006fe0:	20000a70 	.word	0x20000a70
 8006fe4:	20000114 	.word	0x20000114
 8006fe8:	cccccccd 	.word	0xcccccccd
 8006fec:	2000046d 	.word	0x2000046d
 8006ff0:	2000046e 	.word	0x2000046e
 8006ff4:	2000049c 	.word	0x2000049c
            case SRV_MAC_RX_TIMING_SETUP_REQ: {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	70fa      	strb	r2, [r7, #3]
 8006ffe:	461a      	mov	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4413      	add	r3, r2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

                if ( delay == 0 ) {
 800700e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <ProcessMacCommands+0x3b4>
                    delay++;
 8007016:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800701a:	3301      	adds	r3, #1
 800701c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }
                LoRaMacParams.ReceiveDelay1 = delay * 1000;
 8007020:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	461a      	mov	r2, r3
 800702e:	4b50      	ldr	r3, [pc, #320]	; (8007170 <ProcessMacCommands+0x504>)
 8007030:	611a      	str	r2, [r3, #16]
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8007032:	4b4f      	ldr	r3, [pc, #316]	; (8007170 <ProcessMacCommands+0x504>)
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800703a:	4a4d      	ldr	r2, [pc, #308]	; (8007170 <ProcessMacCommands+0x504>)
 800703c:	6153      	str	r3, [r2, #20]
                AddMacCommand( MOTE_MAC_RX_TIMING_SETUP_ANS, 0, 0 );
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	2008      	movs	r0, #8
 8007044:	f7ff fbb6 	bl	80067b4 <AddMacCommand>
            }
            break;
 8007048:	e087      	b.n	800715a <ProcessMacCommands+0x4ee>
            case SRV_MAC_TX_PARAM_SETUP_REQ: {
                TxParamSetupReqParams_t txParamSetupReq;
                uint8_t eirpDwellTime = payload[macIndex++];
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	70fa      	strb	r2, [r7, #3]
 8007050:	461a      	mov	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

                txParamSetupReq.UplinkDwellTime = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	743b      	strb	r3, [r7, #16]
                txParamSetupReq.DownlinkDwellTime = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	747b      	strb	r3, [r7, #17]

                if ( ( eirpDwellTime & 0x20 ) == 0x20 ) {
 8007064:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <ProcessMacCommands+0x408>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8007070:	2301      	movs	r3, #1
 8007072:	747b      	strb	r3, [r7, #17]
                }
                if ( ( eirpDwellTime & 0x10 ) == 0x10 ) {
 8007074:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <ProcessMacCommands+0x418>
                    txParamSetupReq.UplinkDwellTime = 1;
 8007080:	2301      	movs	r3, #1
 8007082:	743b      	strb	r3, [r7, #16]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8007084:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	b2db      	uxtb	r3, r3
 800708e:	74bb      	strb	r3, [r7, #18]

                // Check the status for correctness
                if ( RegionTxParamSetupReq( LoRaMacRegion, &txParamSetupReq ) != -1 ) {
 8007090:	4b38      	ldr	r3, [pc, #224]	; (8007174 <ProcessMacCommands+0x508>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f107 0210 	add.w	r2, r7, #16
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f003 f805 	bl	800a0aa <RegionTxParamSetupReq>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d058      	beq.n	800715a <ProcessMacCommands+0x4ee>
                    // Accept command
                    LoRaMacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80070a8:	7c3a      	ldrb	r2, [r7, #16]
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <ProcessMacCommands+0x504>)
 80070ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    LoRaMacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80070b0:	7c7a      	ldrb	r2, [r7, #17]
 80070b2:	4b2f      	ldr	r3, [pc, #188]	; (8007170 <ProcessMacCommands+0x504>)
 80070b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                    LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80070b8:	7cbb      	ldrb	r3, [r7, #18]
 80070ba:	461a      	mov	r2, r3
 80070bc:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <ProcessMacCommands+0x50c>)
 80070be:	5c9b      	ldrb	r3, [r3, r2]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7f9 fdb1 	bl	8000c28 <__aeabi_ui2f>
 80070c6:	4603      	mov	r3, r0
 80070c8:	4a29      	ldr	r2, [pc, #164]	; (8007170 <ProcessMacCommands+0x504>)
 80070ca:	6313      	str	r3, [r2, #48]	; 0x30
                    // Add command response
                    AddMacCommand( MOTE_MAC_TX_PARAM_SETUP_ANS, 0, 0 );
 80070cc:	2200      	movs	r2, #0
 80070ce:	2100      	movs	r1, #0
 80070d0:	2009      	movs	r0, #9
 80070d2:	f7ff fb6f 	bl	80067b4 <AddMacCommand>
                }
            }
            break;
 80070d6:	e040      	b.n	800715a <ProcessMacCommands+0x4ee>
            case SRV_MAC_DL_CHANNEL_REQ: {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80070d8:	2303      	movs	r3, #3
 80070da:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                dlChannelReq.ChannelId = payload[macIndex++];
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	70fa      	strb	r2, [r7, #3]
 80070e4:	461a      	mov	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4413      	add	r3, r2
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	723b      	strb	r3, [r7, #8]
                dlChannelReq.Rx1Frequency = ( uint32_t )payload[macIndex++];
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	70fa      	strb	r2, [r7, #3]
 80070f4:	461a      	mov	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 8;
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	70fa      	strb	r2, [r7, #3]
 8007104:	461a      	mov	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	021a      	lsls	r2, r3, #8
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4313      	orrs	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	70fa      	strb	r2, [r7, #3]
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	041a      	lsls	r2, r3, #16
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency *= 100;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2264      	movs	r2, #100	; 0x64
 800712e:	fb02 f303 	mul.w	r3, r2, r3
 8007132:	60fb      	str	r3, [r7, #12]

                status = RegionDlChannelReq( LoRaMacRegion, &dlChannelReq );
 8007134:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <ProcessMacCommands+0x508>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f107 0208 	add.w	r2, r7, #8
 800713c:	4611      	mov	r1, r2
 800713e:	4618      	mov	r0, r3
 8007140:	f002 ffc6 	bl	800a0d0 <RegionDlChannelReq>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                AddMacCommand( MOTE_MAC_DL_CHANNEL_ANS, status, 0 );
 800714a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800714e:	2200      	movs	r2, #0
 8007150:	4619      	mov	r1, r3
 8007152:	200a      	movs	r0, #10
 8007154:	f7ff fb2e 	bl	80067b4 <AddMacCommand>
            }
            break;
 8007158:	bf00      	nop
    while ( macIndex < commandsSize ) {
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	78bb      	ldrb	r3, [r7, #2]
 800715e:	429a      	cmp	r2, r3
 8007160:	f4ff ad95 	bcc.w	8006c8e <ProcessMacCommands+0x22>
 8007164:	e000      	b.n	8007168 <ProcessMacCommands+0x4fc>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8007166:	bf00      	nop
        }
    }
}
 8007168:	374c      	adds	r7, #76	; 0x4c
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}
 800716e:	bf00      	nop
 8007170:	20000a70 	.word	0x20000a70
 8007174:	20000114 	.word	0x20000114
 8007178:	08012dac 	.word	0x08012dac

0800717c <Send>:


LoRaMacStatus_t Send( LoRaMacHeader_t *macHdr, uint8_t fPort, void *fBuffer, uint16_t fBufferSize )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	461a      	mov	r2, r3
 8007188:	460b      	mov	r3, r1
 800718a:	72fb      	strb	r3, [r7, #11]
 800718c:	4613      	mov	r3, r2
 800718e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007190:	2303      	movs	r3, #3
 8007192:	75fb      	strb	r3, [r7, #23]

    fCtrl.Value = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.FOptsLen      = 0;
 8007198:	7d3b      	ldrb	r3, [r7, #20]
 800719a:	f36f 0303 	bfc	r3, #0, #4
 800719e:	753b      	strb	r3, [r7, #20]
    if( LoRaMacDeviceClass == CLASS_B )
 80071a0:	4b1e      	ldr	r3, [pc, #120]	; (800721c <Send+0xa0>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d104      	bne.n	80071b2 <Send+0x36>
    {
        fCtrl.Bits.FPending      = 1;
 80071a8:	7d3b      	ldrb	r3, [r7, #20]
 80071aa:	f043 0310 	orr.w	r3, r3, #16
 80071ae:	753b      	strb	r3, [r7, #20]
 80071b0:	e003      	b.n	80071ba <Send+0x3e>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80071b2:	7d3b      	ldrb	r3, [r7, #20]
 80071b4:	f36f 1304 	bfc	r3, #4, #1
 80071b8:	753b      	strb	r3, [r7, #20]
    }
    fCtrl.Bits.Ack           = false;
 80071ba:	7d3b      	ldrb	r3, [r7, #20]
 80071bc:	f36f 1345 	bfc	r3, #5, #1
 80071c0:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq     = false;
 80071c2:	7d3b      	ldrb	r3, [r7, #20]
 80071c4:	f36f 1386 	bfc	r3, #6, #1
 80071c8:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.Adr           = AdrCtrlOn;
 80071ca:	4b15      	ldr	r3, [pc, #84]	; (8007220 <Send+0xa4>)
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	7d3b      	ldrb	r3, [r7, #20]
 80071d0:	f362 13c7 	bfi	r3, r2, #7, #1
 80071d4:	753b      	strb	r3, [r7, #20]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80071d6:	7afa      	ldrb	r2, [r7, #11]
 80071d8:	f107 0114 	add.w	r1, r7, #20
 80071dc:	893b      	ldrh	r3, [r7, #8]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fa04 	bl	80075f0 <PrepareFrame>
 80071e8:	4603      	mov	r3, r0
 80071ea:	75fb      	strb	r3, [r7, #23]

    // Validate status
    if ( status != LORAMAC_STATUS_OK ) {
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <Send+0x7a>
        return status;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	e00e      	b.n	8007214 <Send+0x98>
    }

    // Reset confirm parameters
    McpsConfirm.NbRetries = 0;
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <Send+0xa8>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	715a      	strb	r2, [r3, #5]
    McpsConfirm.AckReceived = false;
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <Send+0xa8>)
 80071fe:	2200      	movs	r2, #0
 8007200:	711a      	strb	r2, [r3, #4]
    McpsConfirm.UpLinkCounter = UpLinkCounter;
 8007202:	4b09      	ldr	r3, [pc, #36]	; (8007228 <Send+0xac>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a07      	ldr	r2, [pc, #28]	; (8007224 <Send+0xa8>)
 8007208:	60d3      	str	r3, [r2, #12]

    status = ScheduleTx( );
 800720a:	f000 f80f 	bl	800722c <ScheduleTx>
 800720e:	4603      	mov	r3, r0
 8007210:	75fb      	strb	r3, [r7, #23]

    return status;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000014c 	.word	0x2000014c
 8007220:	2000035e 	.word	0x2000035e
 8007224:	200009b8 	.word	0x200009b8
 8007228:	20000354 	.word	0x20000354

0800722c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( void )
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b087      	sub	sp, #28
 8007230:	af02      	add	r7, sp, #8
    TimerTime_t dutyCycleTimeOff = 0;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
    NextChanParams_t nextChan;

    // Check if the device is off
    if ( MaxDCycle == 255 ) {
 8007236:	4b5c      	ldr	r3, [pc, #368]	; (80073a8 <ScheduleTx+0x17c>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2bff      	cmp	r3, #255	; 0xff
 800723c:	d101      	bne.n	8007242 <ScheduleTx+0x16>
        return LORAMAC_STATUS_DEVICE_OFF;
 800723e:	2309      	movs	r3, #9
 8007240:	e0ad      	b.n	800739e <ScheduleTx+0x172>
    }
    if ( MaxDCycle == 0 ) {
 8007242:	4b59      	ldr	r3, [pc, #356]	; (80073a8 <ScheduleTx+0x17c>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <ScheduleTx+0x24>
        AggregatedTimeOff = 0;
 800724a:	4b58      	ldr	r3, [pc, #352]	; (80073ac <ScheduleTx+0x180>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
    }

    // Update Backoff
    CalculateBackOff( LastTxChannel );
 8007250:	4b57      	ldr	r3, [pc, #348]	; (80073b0 <ScheduleTx+0x184>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f8cb 	bl	80073f0 <CalculateBackOff>

    nextChan.AggrTimeOff = AggregatedTimeOff;
 800725a:	4b54      	ldr	r3, [pc, #336]	; (80073ac <ScheduleTx+0x180>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	603b      	str	r3, [r7, #0]
    nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8007260:	4b54      	ldr	r3, [pc, #336]	; (80073b4 <ScheduleTx+0x188>)
 8007262:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007266:	723b      	strb	r3, [r7, #8]
    nextChan.DutyCycleEnabled = DutyCycleOn;
 8007268:	4b53      	ldr	r3, [pc, #332]	; (80073b8 <ScheduleTx+0x18c>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	72bb      	strb	r3, [r7, #10]
    nextChan.Joined = IsLoRaMacNetworkJoined;
 800726e:	4b53      	ldr	r3, [pc, #332]	; (80073bc <ScheduleTx+0x190>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	727b      	strb	r3, [r7, #9]
    nextChan.LastAggrTx = AggregatedLastTxDoneTime;
 8007274:	4b52      	ldr	r3, [pc, #328]	; (80073c0 <ScheduleTx+0x194>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	607b      	str	r3, [r7, #4]

    // Select channel
    while ( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false ) {
 800727a:	e008      	b.n	800728e <ScheduleTx+0x62>
        // Set the default datarate
        LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800727c:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <ScheduleTx+0x198>)
 800727e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8007282:	4b4c      	ldr	r3, [pc, #304]	; (80073b4 <ScheduleTx+0x188>)
 8007284:	705a      	strb	r2, [r3, #1]
        // Update datarate in the function parameters
        nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8007286:	4b4b      	ldr	r3, [pc, #300]	; (80073b4 <ScheduleTx+0x188>)
 8007288:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800728c:	723b      	strb	r3, [r7, #8]
    while ( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false ) {
 800728e:	4b4e      	ldr	r3, [pc, #312]	; (80073c8 <ScheduleTx+0x19c>)
 8007290:	7818      	ldrb	r0, [r3, #0]
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	4639      	mov	r1, r7
 8007298:	4a44      	ldr	r2, [pc, #272]	; (80073ac <ScheduleTx+0x180>)
 800729a:	9200      	str	r2, [sp, #0]
 800729c:	4a4b      	ldr	r2, [pc, #300]	; (80073cc <ScheduleTx+0x1a0>)
 800729e:	f002 ff4f 	bl	800a140 <RegionNextChannel>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f083 0301 	eor.w	r3, r3, #1
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e6      	bne.n	800727c <ScheduleTx+0x50>
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( LoRaMacRegion,
 80072ae:	4b46      	ldr	r3, [pc, #280]	; (80073c8 <ScheduleTx+0x19c>)
 80072b0:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate,
 80072b2:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <ScheduleTx+0x19c>)
 80072b4:	7818      	ldrb	r0, [r3, #0]
 80072b6:	4b3f      	ldr	r3, [pc, #252]	; (80073b4 <ScheduleTx+0x188>)
 80072b8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80072bc:	4b3d      	ldr	r3, [pc, #244]	; (80073b4 <ScheduleTx+0x188>)
 80072be:	f993 2001 	ldrsb.w	r2, [r3, #1]
                                                          LoRaMacParams.Rx1DrOffset ),
 80072c2:	4b3c      	ldr	r3, [pc, #240]	; (80073b4 <ScheduleTx+0x188>)
 80072c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate,
 80072c8:	b25b      	sxtb	r3, r3
 80072ca:	f002 ff76 	bl	800a1ba <RegionApplyDrOffset>
 80072ce:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( LoRaMacRegion,
 80072d0:	b259      	sxtb	r1, r3
 80072d2:	4b38      	ldr	r3, [pc, #224]	; (80073b4 <ScheduleTx+0x188>)
 80072d4:	7a1a      	ldrb	r2, [r3, #8]
 80072d6:	4b37      	ldr	r3, [pc, #220]	; (80073b4 <ScheduleTx+0x188>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	483d      	ldr	r0, [pc, #244]	; (80073d0 <ScheduleTx+0x1a4>)
 80072dc:	9000      	str	r0, [sp, #0]
 80072de:	4620      	mov	r0, r4
 80072e0:	f002 fe5d 	bl	8009f9e <RegionComputeRxWindowParameters>
                                     LoRaMacParams.MinRxSymbols,
                                     LoRaMacParams.SystemMaxRxError,
                                     &RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( LoRaMacRegion,
 80072e4:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <ScheduleTx+0x19c>)
 80072e6:	7818      	ldrb	r0, [r3, #0]
                                     LoRaMacParams.Rx2Channel.Datarate,
 80072e8:	4b32      	ldr	r3, [pc, #200]	; (80073b4 <ScheduleTx+0x188>)
 80072ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    RegionComputeRxWindowParameters( LoRaMacRegion,
 80072ee:	b259      	sxtb	r1, r3
 80072f0:	4b30      	ldr	r3, [pc, #192]	; (80073b4 <ScheduleTx+0x188>)
 80072f2:	7a1a      	ldrb	r2, [r3, #8]
 80072f4:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <ScheduleTx+0x188>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	4c36      	ldr	r4, [pc, #216]	; (80073d4 <ScheduleTx+0x1a8>)
 80072fa:	9400      	str	r4, [sp, #0]
 80072fc:	f002 fe4f 	bl	8009f9e <RegionComputeRxWindowParameters>
                                     LoRaMacParams.MinRxSymbols,
                                     LoRaMacParams.SystemMaxRxError,
                                     &RxWindow2Config );

    if ( IsLoRaMacNetworkJoined == false ) {
 8007300:	4b2e      	ldr	r3, [pc, #184]	; (80073bc <ScheduleTx+0x190>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f083 0301 	eor.w	r3, r3, #1
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <ScheduleTx+0x100>
        RxWindow1Delay = LoRaMacParams.JoinAcceptDelay1 + RxWindow1Config.WindowOffset;
 800730e:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <ScheduleTx+0x188>)
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	4a2f      	ldr	r2, [pc, #188]	; (80073d0 <ScheduleTx+0x1a4>)
 8007314:	68d2      	ldr	r2, [r2, #12]
 8007316:	4413      	add	r3, r2
 8007318:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <ScheduleTx+0x1ac>)
 800731a:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.JoinAcceptDelay2 + RxWindow2Config.WindowOffset;
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <ScheduleTx+0x188>)
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	4a2c      	ldr	r2, [pc, #176]	; (80073d4 <ScheduleTx+0x1a8>)
 8007322:	68d2      	ldr	r2, [r2, #12]
 8007324:	4413      	add	r3, r2
 8007326:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <ScheduleTx+0x1b0>)
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	e01f      	b.n	800736c <ScheduleTx+0x140>
    } else {
        if ( ValidatePayloadLength( LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex ) == false ) {
 800732c:	4b2c      	ldr	r3, [pc, #176]	; (80073e0 <ScheduleTx+0x1b4>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	4a20      	ldr	r2, [pc, #128]	; (80073b4 <ScheduleTx+0x188>)
 8007332:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8007336:	4a2b      	ldr	r2, [pc, #172]	; (80073e4 <ScheduleTx+0x1b8>)
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff f9cc 	bl	80066d8 <ValidatePayloadLength>
 8007340:	4603      	mov	r3, r0
 8007342:	f083 0301 	eor.w	r3, r3, #1
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <ScheduleTx+0x124>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800734c:	2308      	movs	r3, #8
 800734e:	e026      	b.n	800739e <ScheduleTx+0x172>
        }
        RxWindow1Delay = LoRaMacParams.ReceiveDelay1 + RxWindow1Config.WindowOffset;
 8007350:	4b18      	ldr	r3, [pc, #96]	; (80073b4 <ScheduleTx+0x188>)
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <ScheduleTx+0x1a4>)
 8007356:	68d2      	ldr	r2, [r2, #12]
 8007358:	4413      	add	r3, r2
 800735a:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <ScheduleTx+0x1ac>)
 800735c:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 800735e:	4b15      	ldr	r3, [pc, #84]	; (80073b4 <ScheduleTx+0x188>)
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <ScheduleTx+0x1a8>)
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	4413      	add	r3, r2
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <ScheduleTx+0x1b0>)
 800736a:	6013      	str	r3, [r2, #0]
    }

    // Schedule transmission of frame
    if ( dutyCycleTimeOff == 0 ) {
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <ScheduleTx+0x154>
        // Try to send now
        return SendFrameOnChannel( Channel );
 8007372:	4b16      	ldr	r3, [pc, #88]	; (80073cc <ScheduleTx+0x1a0>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fc18 	bl	8007bac <SendFrameOnChannel>
 800737c:	4603      	mov	r3, r0
 800737e:	e00e      	b.n	800739e <ScheduleTx+0x172>
    } else {
        // Send later - prepare timer
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <ScheduleTx+0x1bc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f043 0310 	orr.w	r3, r3, #16
 8007388:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <ScheduleTx+0x1bc>)
 800738a:	6013      	str	r3, [r2, #0]
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4619      	mov	r1, r3
 8007390:	4816      	ldr	r0, [pc, #88]	; (80073ec <ScheduleTx+0x1c0>)
 8007392:	f009 fa51 	bl	8010838 <TimerSetValue>
        TimerStart( &TxDelayedTimer );
 8007396:	4815      	ldr	r0, [pc, #84]	; (80073ec <ScheduleTx+0x1c0>)
 8007398:	f009 f84a 	bl	8010430 <TimerStart>

        return LORAMAC_STATUS_OK;
 800739c:	2300      	movs	r3, #0
    }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	2000046d 	.word	0x2000046d
 80073ac:	20000474 	.word	0x20000474
 80073b0:	2000047a 	.word	0x2000047a
 80073b4:	20000a70 	.word	0x20000a70
 80073b8:	20000478 	.word	0x20000478
 80073bc:	2000035d 	.word	0x2000035d
 80073c0:	20000470 	.word	0x20000470
 80073c4:	20000a14 	.word	0x20000a14
 80073c8:	20000114 	.word	0x20000114
 80073cc:	20000479 	.word	0x20000479
 80073d0:	200009cc 	.word	0x200009cc
 80073d4:	20000adc 	.word	0x20000adc
 80073d8:	20000a68 	.word	0x20000a68
 80073dc:	20000af0 	.word	0x20000af0
 80073e0:	20000252 	.word	0x20000252
 80073e4:	20000367 	.word	0x20000367
 80073e8:	20000480 	.word	0x20000480
 80073ec:	20000a54 	.word	0x20000a54

080073f0 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
    CalcBackOffParams_t calcBackOff;

    calcBackOff.Joined = IsLoRaMacNetworkJoined;
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <CalculateBackOff+0x60>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	733b      	strb	r3, [r7, #12]
    calcBackOff.DutyCycleEnabled = DutyCycleOn;
 8007400:	4b14      	ldr	r3, [pc, #80]	; (8007454 <CalculateBackOff+0x64>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	73bb      	strb	r3, [r7, #14]
    calcBackOff.Channel = channel;
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	73fb      	strb	r3, [r7, #15]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( LoRaMacInitializationTime );
 800740a:	4b13      	ldr	r3, [pc, #76]	; (8007458 <CalculateBackOff+0x68>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f009 fa32 	bl	8010878 <TimerGetElapsedTime>
 8007414:	4603      	mov	r3, r0
 8007416:	613b      	str	r3, [r7, #16]
    calcBackOff.TxTimeOnAir = TxTimeOnAir;
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <CalculateBackOff+0x6c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	617b      	str	r3, [r7, #20]
    calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 800741e:	4b10      	ldr	r3, [pc, #64]	; (8007460 <CalculateBackOff+0x70>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	737b      	strb	r3, [r7, #13]

    // Update regional back-off
    RegionCalcBackOff( LoRaMacRegion, &calcBackOff );
 8007424:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <CalculateBackOff+0x74>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f107 020c 	add.w	r2, r7, #12
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f002 fe74 	bl	800a11c <RegionCalcBackOff>

    // Update aggregated time-off
    AggregatedTimeOff = TxTimeOnAir * AggregatedDCycle - TxTimeOnAir;
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <CalculateBackOff+0x78>)
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	3b01      	subs	r3, #1
 800743a:	4a08      	ldr	r2, [pc, #32]	; (800745c <CalculateBackOff+0x6c>)
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	fb02 f303 	mul.w	r3, r2, r3
 8007442:	4a0a      	ldr	r2, [pc, #40]	; (800746c <CalculateBackOff+0x7c>)
 8007444:	6013      	str	r3, [r2, #0]
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	2000035d 	.word	0x2000035d
 8007454:	20000478 	.word	0x20000478
 8007458:	2000047c 	.word	0x2000047c
 800745c:	200004c0 	.word	0x200004c0
 8007460:	2000047b 	.word	0x2000047b
 8007464:	20000114 	.word	0x20000114
 8007468:	2000046e 	.word	0x2000046e
 800746c:	20000474 	.word	0x20000474

08007470 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
    IsLoRaMacNetworkJoined = false;
 8007476:	4b3b      	ldr	r3, [pc, #236]	; (8007564 <ResetMacParameters+0xf4>)
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]

    // Counters
    UpLinkCounter = 0;
 800747c:	4b3a      	ldr	r3, [pc, #232]	; (8007568 <ResetMacParameters+0xf8>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
    DownLinkCounter = -1;
 8007482:	4b3a      	ldr	r3, [pc, #232]	; (800756c <ResetMacParameters+0xfc>)
 8007484:	f04f 32ff 	mov.w	r2, #4294967295
 8007488:	601a      	str	r2, [r3, #0]
    AdrAckCounter = 0;
 800748a:	4b39      	ldr	r3, [pc, #228]	; (8007570 <ResetMacParameters+0x100>)
 800748c:	2200      	movs	r2, #0
 800748e:	601a      	str	r2, [r3, #0]

    ChannelsNbRepCounter = 0;
 8007490:	4b38      	ldr	r3, [pc, #224]	; (8007574 <ResetMacParameters+0x104>)
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]

    AckTimeoutRetries = 1;
 8007496:	4b38      	ldr	r3, [pc, #224]	; (8007578 <ResetMacParameters+0x108>)
 8007498:	2201      	movs	r2, #1
 800749a:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetriesCounter = 1;
 800749c:	4b37      	ldr	r3, [pc, #220]	; (800757c <ResetMacParameters+0x10c>)
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetry = false;
 80074a2:	4b37      	ldr	r3, [pc, #220]	; (8007580 <ResetMacParameters+0x110>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]

    MaxDCycle = 0;
 80074a8:	4b36      	ldr	r3, [pc, #216]	; (8007584 <ResetMacParameters+0x114>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
    AggregatedDCycle = 1;
 80074ae:	4b36      	ldr	r3, [pc, #216]	; (8007588 <ResetMacParameters+0x118>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	801a      	strh	r2, [r3, #0]

    MacCommandsBufferIndex = 0;
 80074b4:	4b35      	ldr	r3, [pc, #212]	; (800758c <ResetMacParameters+0x11c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
    MacCommandsBufferToRepeatIndex = 0;
 80074ba:	4b35      	ldr	r3, [pc, #212]	; (8007590 <ResetMacParameters+0x120>)
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]

    IsRxWindowsEnabled = true;
 80074c0:	4b34      	ldr	r3, [pc, #208]	; (8007594 <ResetMacParameters+0x124>)
 80074c2:	2201      	movs	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]

    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 80074c6:	4b34      	ldr	r3, [pc, #208]	; (8007598 <ResetMacParameters+0x128>)
 80074c8:	f993 2000 	ldrsb.w	r2, [r3]
 80074cc:	4b33      	ldr	r3, [pc, #204]	; (800759c <ResetMacParameters+0x12c>)
 80074ce:	701a      	strb	r2, [r3, #0]
    LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80074d0:	4b31      	ldr	r3, [pc, #196]	; (8007598 <ResetMacParameters+0x128>)
 80074d2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80074d6:	4b31      	ldr	r3, [pc, #196]	; (800759c <ResetMacParameters+0x12c>)
 80074d8:	705a      	strb	r2, [r3, #1]
    LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 80074da:	4b2f      	ldr	r3, [pc, #188]	; (8007598 <ResetMacParameters+0x128>)
 80074dc:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80074e0:	4b2e      	ldr	r3, [pc, #184]	; (800759c <ResetMacParameters+0x12c>)
 80074e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    memcpy(&LoRaMacParams.Rx2Channel, &LoRaMacParamsDefaults.Rx2Channel, sizeof(LoRaMacParams.Rx2Channel));
 80074e6:	4b2d      	ldr	r3, [pc, #180]	; (800759c <ResetMacParameters+0x12c>)
 80074e8:	4a2b      	ldr	r2, [pc, #172]	; (8007598 <ResetMacParameters+0x128>)
 80074ea:	3324      	adds	r3, #36	; 0x24
 80074ec:	3224      	adds	r2, #36	; 0x24
 80074ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074f2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacParams.UplinkDwellTime = LoRaMacParamsDefaults.UplinkDwellTime;
 80074f6:	4b28      	ldr	r3, [pc, #160]	; (8007598 <ResetMacParameters+0x128>)
 80074f8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80074fc:	4b27      	ldr	r3, [pc, #156]	; (800759c <ResetMacParameters+0x12c>)
 80074fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    LoRaMacParams.DownlinkDwellTime = LoRaMacParamsDefaults.DownlinkDwellTime;
 8007502:	4b25      	ldr	r3, [pc, #148]	; (8007598 <ResetMacParameters+0x128>)
 8007504:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8007508:	4b24      	ldr	r3, [pc, #144]	; (800759c <ResetMacParameters+0x12c>)
 800750a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 800750e:	4b22      	ldr	r3, [pc, #136]	; (8007598 <ResetMacParameters+0x128>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	4a22      	ldr	r2, [pc, #136]	; (800759c <ResetMacParameters+0x12c>)
 8007514:	6313      	str	r3, [r2, #48]	; 0x30
    LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 8007516:	4b20      	ldr	r3, [pc, #128]	; (8007598 <ResetMacParameters+0x128>)
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <ResetMacParameters+0x12c>)
 800751c:	6353      	str	r3, [r2, #52]	; 0x34

    NodeAckRequested = false;
 800751e:	4b20      	ldr	r3, [pc, #128]	; (80075a0 <ResetMacParameters+0x130>)
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
    SrvAckRequested = false;
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <ResetMacParameters+0x134>)
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
    MacCommandsInNextTx = false;
 800752a:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <ResetMacParameters+0x138>)
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]

    // Reset Multicast downlink counters
    MulticastParams_t *cur = MulticastChannels;
 8007530:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <ResetMacParameters+0x13c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	607b      	str	r3, [r7, #4]
    while ( cur != NULL ) {
 8007536:	e005      	b.n	8007544 <ResetMacParameters+0xd4>
        cur->DownLinkCounter = 0;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	625a      	str	r2, [r3, #36]	; 0x24
        cur = cur->Next;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	607b      	str	r3, [r7, #4]
    while ( cur != NULL ) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f6      	bne.n	8007538 <ResetMacParameters+0xc8>
    }

    // Initialize channel index.
    Channel = 0;
 800754a:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <ResetMacParameters+0x140>)
 800754c:	2200      	movs	r2, #0
 800754e:	701a      	strb	r2, [r3, #0]
    LastTxChannel = Channel;
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <ResetMacParameters+0x140>)
 8007552:	781a      	ldrb	r2, [r3, #0]
 8007554:	4b17      	ldr	r3, [pc, #92]	; (80075b4 <ResetMacParameters+0x144>)
 8007556:	701a      	strb	r2, [r3, #0]
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	2000035d 	.word	0x2000035d
 8007568:	20000354 	.word	0x20000354
 800756c:	20000358 	.word	0x20000358
 8007570:	20000360 	.word	0x20000360
 8007574:	2000046c 	.word	0x2000046c
 8007578:	20000009 	.word	0x20000009
 800757c:	2000000a 	.word	0x2000000a
 8007580:	200004bc 	.word	0x200004bc
 8007584:	2000046d 	.word	0x2000046d
 8007588:	2000046e 	.word	0x2000046e
 800758c:	20000367 	.word	0x20000367
 8007590:	20000368 	.word	0x20000368
 8007594:	20000008 	.word	0x20000008
 8007598:	20000a14 	.word	0x20000a14
 800759c:	20000a70 	.word	0x20000a70
 80075a0:	20000364 	.word	0x20000364
 80075a4:	20000365 	.word	0x20000365
 80075a8:	20000366 	.word	0x20000366
 80075ac:	20000148 	.word	0x20000148
 80075b0:	20000479 	.word	0x20000479
 80075b4:	2000047a 	.word	0x2000047a

080075b8 <IsFPortAllowed>:

static bool IsFPortAllowed( uint8_t fPort )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
    if( fPort > 224 )
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2be0      	cmp	r3, #224	; 0xe0
 80075c6:	d901      	bls.n	80075cc <IsFPortAllowed+0x14>
    {
        return false;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e000      	b.n	80075ce <IsFPortAllowed+0x16>
    }
    return true;
 80075cc:	2301      	movs	r3, #1
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bc80      	pop	{r7}
 80075d6:	4770      	bx	lr

080075d8 <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( );
 80075dc:	f7fe ff6a 	bl	80064b4 <OnRxWindow2TimerEvent>
    RxSlot = RX_SLOT_WIN_CLASS_C;
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <OpenContinuousRx2Window+0x14>)
 80075e2:	2202      	movs	r2, #2
 80075e4:	701a      	strb	r2, [r3, #0]
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000a6c 	.word	0x20000a6c

080075f0 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t *macHdr, LoRaMacFrameCtrl_t *fCtrl, uint8_t fPort, void *fBuffer,
                              uint16_t fBufferSize )
{
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b091      	sub	sp, #68	; 0x44
 80075f4:	af04      	add	r7, sp, #16
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	71fb      	strb	r3, [r7, #7]
    AdrNextParams_t adrNext;
    uint16_t i;
    uint8_t pktHeaderLen = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t mic = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
    const void *payload = fBuffer;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t framePort = fPort;
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    LoRaMacBufferPktLen = 0;
 8007614:	4b62      	ldr	r3, [pc, #392]	; (80077a0 <PrepareFrame+0x1b0>)
 8007616:	2200      	movs	r2, #0
 8007618:	801a      	strh	r2, [r3, #0]

    NodeAckRequested = false;
 800761a:	4b62      	ldr	r3, [pc, #392]	; (80077a4 <PrepareFrame+0x1b4>)
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]

    if ( fBuffer == NULL ) {
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <PrepareFrame+0x3c>
        fBufferSize = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }
    LoRaMacTxPayloadLen = fBufferSize;
 800762c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007630:	b2da      	uxtb	r2, r3
 8007632:	4b5d      	ldr	r3, [pc, #372]	; (80077a8 <PrepareFrame+0x1b8>)
 8007634:	701a      	strb	r2, [r3, #0]

    LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 8007636:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007640:	461a      	mov	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	7819      	ldrb	r1, [r3, #0]
 8007646:	4b59      	ldr	r3, [pc, #356]	; (80077ac <PrepareFrame+0x1bc>)
 8007648:	5499      	strb	r1, [r3, r2]

    switch ( macHdr->Bits.MType ) {
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b07      	cmp	r3, #7
 8007656:	f200 8293 	bhi.w	8007b80 <PrepareFrame+0x590>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <PrepareFrame+0x70>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007681 	.word	0x08007681
 8007664:	08007b81 	.word	0x08007b81
 8007668:	0800778d 	.word	0x0800778d
 800766c:	08007b81 	.word	0x08007b81
 8007670:	08007787 	.word	0x08007787
 8007674:	08007b81 	.word	0x08007b81
 8007678:	08007b81 	.word	0x08007b81
 800767c:	08007b47 	.word	0x08007b47
    case FRAME_TYPE_JOIN_REQ:
                LoRaMacBufferPktLen = pktHeaderLen;
 8007680:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007684:	b29a      	uxth	r2, r3
 8007686:	4b46      	ldr	r3, [pc, #280]	; (80077a0 <PrepareFrame+0x1b0>)
 8007688:	801a      	strh	r2, [r3, #0]

                memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8 );
 800768a:	4b45      	ldr	r3, [pc, #276]	; (80077a0 <PrepareFrame+0x1b0>)
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	4b46      	ldr	r3, [pc, #280]	; (80077ac <PrepareFrame+0x1bc>)
 8007692:	4413      	add	r3, r2
 8007694:	4a46      	ldr	r2, [pc, #280]	; (80077b0 <PrepareFrame+0x1c0>)
 8007696:	6811      	ldr	r1, [r2, #0]
 8007698:	2208      	movs	r2, #8
 800769a:	4618      	mov	r0, r3
 800769c:	f009 f9e6 	bl	8010a6c <memcpyr>
                LoRaMacBufferPktLen += 8;
 80076a0:	4b3f      	ldr	r3, [pc, #252]	; (80077a0 <PrepareFrame+0x1b0>)
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	3308      	adds	r3, #8
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	4b3d      	ldr	r3, [pc, #244]	; (80077a0 <PrepareFrame+0x1b0>)
 80076aa:	801a      	strh	r2, [r3, #0]
                memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 80076ac:	4b3c      	ldr	r3, [pc, #240]	; (80077a0 <PrepareFrame+0x1b0>)
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	4b3e      	ldr	r3, [pc, #248]	; (80077ac <PrepareFrame+0x1bc>)
 80076b4:	4413      	add	r3, r2
 80076b6:	4a3f      	ldr	r2, [pc, #252]	; (80077b4 <PrepareFrame+0x1c4>)
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	2208      	movs	r2, #8
 80076bc:	4618      	mov	r0, r3
 80076be:	f009 f9d5 	bl	8010a6c <memcpyr>
                LoRaMacBufferPktLen += 8;
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <PrepareFrame+0x1b0>)
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	3308      	adds	r3, #8
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <PrepareFrame+0x1b0>)
 80076cc:	801a      	strh	r2, [r3, #0]

                LoRaMacDevNonce = Radio.Random( );
 80076ce:	4b3a      	ldr	r3, [pc, #232]	; (80077b8 <PrepareFrame+0x1c8>)
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	4798      	blx	r3
 80076d4:	4603      	mov	r3, r0
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	4b38      	ldr	r3, [pc, #224]	; (80077bc <PrepareFrame+0x1cc>)
 80076da:	801a      	strh	r2, [r3, #0]

                LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 80076dc:	4b37      	ldr	r3, [pc, #220]	; (80077bc <PrepareFrame+0x1cc>)
 80076de:	8819      	ldrh	r1, [r3, #0]
 80076e0:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <PrepareFrame+0x1b0>)
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	b290      	uxth	r0, r2
 80076e8:	4a2d      	ldr	r2, [pc, #180]	; (80077a0 <PrepareFrame+0x1b0>)
 80076ea:	8010      	strh	r0, [r2, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	b2c9      	uxtb	r1, r1
 80076f0:	4b2e      	ldr	r3, [pc, #184]	; (80077ac <PrepareFrame+0x1bc>)
 80076f2:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 80076f4:	4b31      	ldr	r3, [pc, #196]	; (80077bc <PrepareFrame+0x1cc>)
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	0a1b      	lsrs	r3, r3, #8
 80076fa:	b299      	uxth	r1, r3
 80076fc:	4b28      	ldr	r3, [pc, #160]	; (80077a0 <PrepareFrame+0x1b0>)
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	b290      	uxth	r0, r2
 8007704:	4a26      	ldr	r2, [pc, #152]	; (80077a0 <PrepareFrame+0x1b0>)
 8007706:	8010      	strh	r0, [r2, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	b2c9      	uxtb	r1, r1
 800770c:	4b27      	ldr	r3, [pc, #156]	; (80077ac <PrepareFrame+0x1bc>)
 800770e:	5499      	strb	r1, [r3, r2]

                LoRaMacJoinComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic );
 8007710:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <PrepareFrame+0x1b0>)
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	b299      	uxth	r1, r3
 8007718:	4b29      	ldr	r3, [pc, #164]	; (80077c0 <PrepareFrame+0x1d0>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	4822      	ldr	r0, [pc, #136]	; (80077ac <PrepareFrame+0x1bc>)
 8007722:	f001 ff23 	bl	800956c <LoRaMacJoinComputeMic>

                LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 8007726:	6979      	ldr	r1, [r7, #20]
 8007728:	4b1d      	ldr	r3, [pc, #116]	; (80077a0 <PrepareFrame+0x1b0>)
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	b290      	uxth	r0, r2
 8007730:	4a1b      	ldr	r2, [pc, #108]	; (80077a0 <PrepareFrame+0x1b0>)
 8007732:	8010      	strh	r0, [r2, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	b2c9      	uxtb	r1, r1
 8007738:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <PrepareFrame+0x1bc>)
 800773a:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 8 ) & 0xFF;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	0a19      	lsrs	r1, r3, #8
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <PrepareFrame+0x1b0>)
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	b290      	uxth	r0, r2
 8007748:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <PrepareFrame+0x1b0>)
 800774a:	8010      	strh	r0, [r2, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	b2c9      	uxtb	r1, r1
 8007750:	4b16      	ldr	r3, [pc, #88]	; (80077ac <PrepareFrame+0x1bc>)
 8007752:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 16 ) & 0xFF;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	0c19      	lsrs	r1, r3, #16
 8007758:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <PrepareFrame+0x1b0>)
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	b290      	uxth	r0, r2
 8007760:	4a0f      	ldr	r2, [pc, #60]	; (80077a0 <PrepareFrame+0x1b0>)
 8007762:	8010      	strh	r0, [r2, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	b2c9      	uxtb	r1, r1
 8007768:	4b10      	ldr	r3, [pc, #64]	; (80077ac <PrepareFrame+0x1bc>)
 800776a:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	0e19      	lsrs	r1, r3, #24
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <PrepareFrame+0x1b0>)
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	b290      	uxth	r0, r2
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <PrepareFrame+0x1b0>)
 800777a:	8010      	strh	r0, [r2, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	b2c9      	uxtb	r1, r1
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <PrepareFrame+0x1bc>)
 8007782:	5499      	strb	r1, [r3, r2]

                break;
 8007784:	e1ff      	b.n	8007b86 <PrepareFrame+0x596>
            case FRAME_TYPE_DATA_CONFIRMED_UP:
            NodeAckRequested = true;
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <PrepareFrame+0x1b4>)
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
        //Intentional fallthrough
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            if ( IsLoRaMacNetworkJoined == false ) {
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <PrepareFrame+0x1d4>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f083 0301 	eor.w	r3, r3, #1
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <PrepareFrame+0x1d8>
                return LORAMAC_STATUS_NO_NETWORK_JOINED; // No network has been joined yet
 800779a:	2307      	movs	r3, #7
 800779c:	e1f4      	b.n	8007b88 <PrepareFrame+0x598>
 800779e:	bf00      	nop
 80077a0:	20000250 	.word	0x20000250
 80077a4:	20000364 	.word	0x20000364
 80077a8:	20000252 	.word	0x20000252
 80077ac:	20000150 	.word	0x20000150
 80077b0:	2000011c 	.word	0x2000011c
 80077b4:	20000118 	.word	0x20000118
 80077b8:	080130d4 	.word	0x080130d4
 80077bc:	20000a50 	.word	0x20000a50
 80077c0:	20000ac4 	.word	0x20000ac4
 80077c4:	2000035d 	.word	0x2000035d
            }

            // Adr next request
            adrNext.UpdateChanMask = true;
 80077c8:	2301      	movs	r3, #1
 80077ca:	763b      	strb	r3, [r7, #24]
            adrNext.AdrEnabled = fCtrl->Bits.Adr;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bf14      	ite	ne
 80077da:	2301      	movne	r3, #1
 80077dc:	2300      	moveq	r3, #0
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	767b      	strb	r3, [r7, #25]
            adrNext.AdrAckCounter = AdrAckCounter;
 80077e2:	4b9f      	ldr	r3, [pc, #636]	; (8007a60 <PrepareFrame+0x470>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	61fb      	str	r3, [r7, #28]
            adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 80077e8:	4b9e      	ldr	r3, [pc, #632]	; (8007a64 <PrepareFrame+0x474>)
 80077ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80077ee:	f887 3020 	strb.w	r3, [r7, #32]
            adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 80077f2:	4b9c      	ldr	r3, [pc, #624]	; (8007a64 <PrepareFrame+0x474>)
 80077f4:	f993 3000 	ldrsb.w	r3, [r3]
 80077f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 80077fc:	4b99      	ldr	r3, [pc, #612]	; (8007a64 <PrepareFrame+0x474>)
 80077fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007802:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            fCtrl->Bits.AdrAckReq = RegionAdrNext( LoRaMacRegion, &adrNext,
 8007806:	4b98      	ldr	r3, [pc, #608]	; (8007a68 <PrepareFrame+0x478>)
 8007808:	7818      	ldrb	r0, [r3, #0]
 800780a:	f107 0118 	add.w	r1, r7, #24
 800780e:	4b94      	ldr	r3, [pc, #592]	; (8007a60 <PrepareFrame+0x470>)
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4b94      	ldr	r3, [pc, #592]	; (8007a64 <PrepareFrame+0x474>)
 8007814:	4a95      	ldr	r2, [pc, #596]	; (8007a6c <PrepareFrame+0x47c>)
 8007816:	f002 fbaa 	bl	8009f6e <RegionAdrNext>
 800781a:	4603      	mov	r3, r0
 800781c:	4619      	mov	r1, r3
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	7813      	ldrb	r3, [r2, #0]
 8007822:	f361 1386 	bfi	r3, r1, #6, #1
 8007826:	7013      	strb	r3, [r2, #0]
                                                   &LoRaMacParams.ChannelsDatarate, &LoRaMacParams.ChannelsTxPower, &AdrAckCounter );
            if ( SrvAckRequested == true ) {
 8007828:	4b91      	ldr	r3, [pc, #580]	; (8007a70 <PrepareFrame+0x480>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <PrepareFrame+0x250>
                SrvAckRequested = false;
 8007830:	4b8f      	ldr	r3, [pc, #572]	; (8007a70 <PrepareFrame+0x480>)
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
                fCtrl->Bits.Ack = 1;
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	7813      	ldrb	r3, [r2, #0]
 800783a:	f043 0320 	orr.w	r3, r3, #32
 800783e:	7013      	strb	r3, [r2, #0]
            }

            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr ) & 0xFF;
 8007840:	4b8c      	ldr	r3, [pc, #560]	; (8007a74 <PrepareFrame+0x484>)
 8007842:	6819      	ldr	r1, [r3, #0]
 8007844:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800784e:	461a      	mov	r2, r3
 8007850:	b2c9      	uxtb	r1, r1
 8007852:	4b89      	ldr	r3, [pc, #548]	; (8007a78 <PrepareFrame+0x488>)
 8007854:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 8 ) & 0xFF;
 8007856:	4b87      	ldr	r3, [pc, #540]	; (8007a74 <PrepareFrame+0x484>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	0a19      	lsrs	r1, r3, #8
 800785c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007866:	461a      	mov	r2, r3
 8007868:	b2c9      	uxtb	r1, r1
 800786a:	4b83      	ldr	r3, [pc, #524]	; (8007a78 <PrepareFrame+0x488>)
 800786c:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 16 ) & 0xFF;
 800786e:	4b81      	ldr	r3, [pc, #516]	; (8007a74 <PrepareFrame+0x484>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	0c19      	lsrs	r1, r3, #16
 8007874:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800787e:	461a      	mov	r2, r3
 8007880:	b2c9      	uxtb	r1, r1
 8007882:	4b7d      	ldr	r3, [pc, #500]	; (8007a78 <PrepareFrame+0x488>)
 8007884:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 24 ) & 0xFF;
 8007886:	4b7b      	ldr	r3, [pc, #492]	; (8007a74 <PrepareFrame+0x484>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	0e19      	lsrs	r1, r3, #24
 800788c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007896:	461a      	mov	r2, r3
 8007898:	b2c9      	uxtb	r1, r1
 800789a:	4b77      	ldr	r3, [pc, #476]	; (8007a78 <PrepareFrame+0x488>)
 800789c:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 800789e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80078a8:	461a      	mov	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	7819      	ldrb	r1, [r3, #0]
 80078ae:	4b72      	ldr	r3, [pc, #456]	; (8007a78 <PrepareFrame+0x488>)
 80078b0:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 80078b2:	4b72      	ldr	r3, [pc, #456]	; (8007a7c <PrepareFrame+0x48c>)
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80078c0:	461a      	mov	r2, r3
 80078c2:	b2c9      	uxtb	r1, r1
 80078c4:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <PrepareFrame+0x488>)
 80078c6:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 80078c8:	4b6c      	ldr	r3, [pc, #432]	; (8007a7c <PrepareFrame+0x48c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	0a19      	lsrs	r1, r3, #8
 80078ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80078d8:	461a      	mov	r2, r3
 80078da:	b2c9      	uxtb	r1, r1
 80078dc:	4b66      	ldr	r3, [pc, #408]	; (8007a78 <PrepareFrame+0x488>)
 80078de:	5499      	strb	r1, [r3, r2]

            // Copy the MAC commands which must be re-send into the MAC command buffer
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 80078e0:	4b67      	ldr	r3, [pc, #412]	; (8007a80 <PrepareFrame+0x490>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	4b67      	ldr	r3, [pc, #412]	; (8007a84 <PrepareFrame+0x494>)
 80078e8:	4413      	add	r3, r2
 80078ea:	4a67      	ldr	r2, [pc, #412]	; (8007a88 <PrepareFrame+0x498>)
 80078ec:	7812      	ldrb	r2, [r2, #0]
 80078ee:	b292      	uxth	r2, r2
 80078f0:	4966      	ldr	r1, [pc, #408]	; (8007a8c <PrepareFrame+0x49c>)
 80078f2:	4618      	mov	r0, r3
 80078f4:	f009 f89f 	bl	8010a36 <memcpy1>
            MacCommandsBufferIndex += MacCommandsBufferToRepeatIndex;
 80078f8:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <PrepareFrame+0x490>)
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	4b62      	ldr	r3, [pc, #392]	; (8007a88 <PrepareFrame+0x498>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	4413      	add	r3, r2
 8007902:	b2da      	uxtb	r2, r3
 8007904:	4b5e      	ldr	r3, [pc, #376]	; (8007a80 <PrepareFrame+0x490>)
 8007906:	701a      	strb	r2, [r3, #0]

            if ( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d043      	beq.n	8007996 <PrepareFrame+0x3a6>
 800790e:	4b60      	ldr	r3, [pc, #384]	; (8007a90 <PrepareFrame+0x4a0>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d03f      	beq.n	8007996 <PrepareFrame+0x3a6>
                if ( MacCommandsInNextTx == true ) {
 8007916:	4b5f      	ldr	r3, [pc, #380]	; (8007a94 <PrepareFrame+0x4a4>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d04c      	beq.n	80079b8 <PrepareFrame+0x3c8>
                    if ( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) {
 800791e:	4b58      	ldr	r3, [pc, #352]	; (8007a80 <PrepareFrame+0x490>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b0f      	cmp	r3, #15
 8007924:	d82d      	bhi.n	8007982 <PrepareFrame+0x392>
                        fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800792e:	b2db      	uxtb	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	4b53      	ldr	r3, [pc, #332]	; (8007a80 <PrepareFrame+0x490>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	4413      	add	r3, r2
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	b2d9      	uxtb	r1, r3
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	7813      	ldrb	r3, [r2, #0]
 8007944:	f361 0303 	bfi	r3, r1, #0, #4
 8007948:	7013      	strb	r3, [r2, #0]

                        // Update FCtrl field with new value of OptionsLength
                        LoRaMacBuffer[0x05] = fCtrl->Value;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	4b4a      	ldr	r3, [pc, #296]	; (8007a78 <PrepareFrame+0x488>)
 8007950:	715a      	strb	r2, [r3, #5]
                        for ( i = 0; i < MacCommandsBufferIndex; i++ ) {
 8007952:	2300      	movs	r3, #0
 8007954:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007956:	e00d      	b.n	8007974 <PrepareFrame+0x384>
                            LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 8007958:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800795a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800795e:	1c59      	adds	r1, r3, #1
 8007960:	f887 102d 	strb.w	r1, [r7, #45]	; 0x2d
 8007964:	4619      	mov	r1, r3
 8007966:	4b47      	ldr	r3, [pc, #284]	; (8007a84 <PrepareFrame+0x494>)
 8007968:	5c9a      	ldrb	r2, [r3, r2]
 800796a:	4b43      	ldr	r3, [pc, #268]	; (8007a78 <PrepareFrame+0x488>)
 800796c:	545a      	strb	r2, [r3, r1]
                        for ( i = 0; i < MacCommandsBufferIndex; i++ ) {
 800796e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007970:	3301      	adds	r3, #1
 8007972:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007974:	4b42      	ldr	r3, [pc, #264]	; (8007a80 <PrepareFrame+0x490>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800797c:	429a      	cmp	r2, r3
 800797e:	d3eb      	bcc.n	8007958 <PrepareFrame+0x368>
                if ( MacCommandsInNextTx == true ) {
 8007980:	e01a      	b.n	80079b8 <PrepareFrame+0x3c8>
                        }
                    } else {
                        LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 8007982:	4b3f      	ldr	r3, [pc, #252]	; (8007a80 <PrepareFrame+0x490>)
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	4b42      	ldr	r3, [pc, #264]	; (8007a90 <PrepareFrame+0x4a0>)
 8007988:	701a      	strb	r2, [r3, #0]
                        payload = MacCommandsBuffer;
 800798a:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <PrepareFrame+0x494>)
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
                        framePort = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ( MacCommandsInNextTx == true ) {
 8007994:	e010      	b.n	80079b8 <PrepareFrame+0x3c8>
                    }
                }
            } else {
                if ( ( MacCommandsBufferIndex > 0 ) && ( MacCommandsInNextTx == true ) ) {
 8007996:	4b3a      	ldr	r3, [pc, #232]	; (8007a80 <PrepareFrame+0x490>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00c      	beq.n	80079b8 <PrepareFrame+0x3c8>
 800799e:	4b3d      	ldr	r3, [pc, #244]	; (8007a94 <PrepareFrame+0x4a4>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <PrepareFrame+0x3c8>
                    LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 80079a6:	4b36      	ldr	r3, [pc, #216]	; (8007a80 <PrepareFrame+0x490>)
 80079a8:	781a      	ldrb	r2, [r3, #0]
 80079aa:	4b39      	ldr	r3, [pc, #228]	; (8007a90 <PrepareFrame+0x4a0>)
 80079ac:	701a      	strb	r2, [r3, #0]
                    payload = MacCommandsBuffer;
 80079ae:	4b35      	ldr	r3, [pc, #212]	; (8007a84 <PrepareFrame+0x494>)
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
                    framePort = 0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            MacCommandsInNextTx = false;
 80079b8:	4b36      	ldr	r3, [pc, #216]	; (8007a94 <PrepareFrame+0x4a4>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
            // Store MAC commands which must be re-send in case the device does not receive a downlink anymore
            MacCommandsBufferToRepeatIndex = ParseMacCommandsToRepeat( MacCommandsBuffer, MacCommandsBufferIndex,
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <PrepareFrame+0x490>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4a32      	ldr	r2, [pc, #200]	; (8007a8c <PrepareFrame+0x49c>)
 80079c4:	4619      	mov	r1, r3
 80079c6:	482f      	ldr	r0, [pc, #188]	; (8007a84 <PrepareFrame+0x494>)
 80079c8:	f7ff f8e2 	bl	8006b90 <ParseMacCommandsToRepeat>
 80079cc:	4603      	mov	r3, r0
 80079ce:	461a      	mov	r2, r3
 80079d0:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <PrepareFrame+0x498>)
 80079d2:	701a      	strb	r2, [r3, #0]
                                                                       MacCommandsBufferToRepeat );
            if ( MacCommandsBufferToRepeatIndex > 0 ) {
 80079d4:	4b2c      	ldr	r3, [pc, #176]	; (8007a88 <PrepareFrame+0x498>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <PrepareFrame+0x3f2>
                MacCommandsInNextTx = true;
 80079dc:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <PrepareFrame+0x4a4>)
 80079de:	2201      	movs	r2, #1
 80079e0:	701a      	strb	r2, [r3, #0]
            }

            if ( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d06d      	beq.n	8007ac4 <PrepareFrame+0x4d4>
 80079e8:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <PrepareFrame+0x4a0>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d069      	beq.n	8007ac4 <PrepareFrame+0x4d4>
                LoRaMacBuffer[pktHeaderLen++] = framePort;
 80079f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80079fa:	4619      	mov	r1, r3
 80079fc:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <PrepareFrame+0x488>)
 80079fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a02:	5453      	strb	r3, [r2, r1]
                if ((pktHeaderLen + LoRaMacTxPayloadLen) > (LORAMAC_PHY_MAXPAYLOAD - 4))  {
 8007a04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a08:	4a21      	ldr	r2, [pc, #132]	; (8007a90 <PrepareFrame+0x4a0>)
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	2bfb      	cmp	r3, #251	; 0xfb
 8007a10:	dd09      	ble.n	8007a26 <PrepareFrame+0x436>
                    LoRaMacTxPayloadLen = LORAMAC_PHY_MAXPAYLOAD - 4 - pktHeaderLen;
 8007a12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007a16:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8007a1a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	33fb      	adds	r3, #251	; 0xfb
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <PrepareFrame+0x4a0>)
 8007a24:	701a      	strb	r2, [r3, #0]
                }

                if ( framePort == 0 ) {
 8007a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d136      	bne.n	8007a9c <PrepareFrame+0x4ac>
                    // Reset buffer index as the mac commands are being sent on port 0
                    MacCommandsBufferIndex = 0;
 8007a2e:	4b14      	ldr	r3, [pc, #80]	; (8007a80 <PrepareFrame+0x490>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK,
 8007a34:	4b16      	ldr	r3, [pc, #88]	; (8007a90 <PrepareFrame+0x4a0>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	b299      	uxth	r1, r3
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <PrepareFrame+0x484>)
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <PrepareFrame+0x48c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
                                           UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8007a42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK,
 8007a46:	4c0c      	ldr	r4, [pc, #48]	; (8007a78 <PrepareFrame+0x488>)
 8007a48:	4422      	add	r2, r4
 8007a4a:	9202      	str	r2, [sp, #8]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <PrepareFrame+0x4a8>)
 8007a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a58:	f001 fcca 	bl	80093f0 <LoRaMacPayloadEncrypt>
 8007a5c:	e032      	b.n	8007ac4 <PrepareFrame+0x4d4>
 8007a5e:	bf00      	nop
 8007a60:	20000360 	.word	0x20000360
 8007a64:	20000a70 	.word	0x20000a70
 8007a68:	20000114 	.word	0x20000114
 8007a6c:	20000a71 	.word	0x20000a71
 8007a70:	20000365 	.word	0x20000365
 8007a74:	20000144 	.word	0x20000144
 8007a78:	20000150 	.word	0x20000150
 8007a7c:	20000354 	.word	0x20000354
 8007a80:	20000367 	.word	0x20000367
 8007a84:	2000036c 	.word	0x2000036c
 8007a88:	20000368 	.word	0x20000368
 8007a8c:	200003ec 	.word	0x200003ec
 8007a90:	20000252 	.word	0x20000252
 8007a94:	20000366 	.word	0x20000366
 8007a98:	20000120 	.word	0x20000120
                } else {
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK,
 8007a9c:	4b3c      	ldr	r3, [pc, #240]	; (8007b90 <PrepareFrame+0x5a0>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b299      	uxth	r1, r3
 8007aa2:	4b3c      	ldr	r3, [pc, #240]	; (8007b94 <PrepareFrame+0x5a4>)
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	4b3c      	ldr	r3, [pc, #240]	; (8007b98 <PrepareFrame+0x5a8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
                                           UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8007aaa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK,
 8007aae:	4c3b      	ldr	r4, [pc, #236]	; (8007b9c <PrepareFrame+0x5ac>)
 8007ab0:	4422      	add	r2, r4
 8007ab2:	9202      	str	r2, [sp, #8]
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4603      	mov	r3, r0
 8007abc:	4a38      	ldr	r2, [pc, #224]	; (8007ba0 <PrepareFrame+0x5b0>)
 8007abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ac0:	f001 fc96 	bl	80093f0 <LoRaMacPayloadEncrypt>
                }
            }
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8007ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <PrepareFrame+0x5a0>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	4b33      	ldr	r3, [pc, #204]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007ad6:	801a      	strh	r2, [r3, #0]

            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 8007ad8:	4b32      	ldr	r3, [pc, #200]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007ada:	8819      	ldrh	r1, [r3, #0]
 8007adc:	4b2d      	ldr	r3, [pc, #180]	; (8007b94 <PrepareFrame+0x5a4>)
 8007ade:	6818      	ldr	r0, [r3, #0]
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <PrepareFrame+0x5a8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f107 0214 	add.w	r2, r7, #20
 8007ae8:	9202      	str	r2, [sp, #8]
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4603      	mov	r3, r0
 8007af2:	4a2d      	ldr	r2, [pc, #180]	; (8007ba8 <PrepareFrame+0x5b8>)
 8007af4:	4829      	ldr	r0, [pc, #164]	; (8007b9c <PrepareFrame+0x5ac>)
 8007af6:	f001 fc15 	bl	8009324 <LoRaMacComputeMic>

            LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 8007afa:	6979      	ldr	r1, [r7, #20]
 8007afc:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	b2c9      	uxtb	r1, r1
 8007b04:	4b25      	ldr	r3, [pc, #148]	; (8007b9c <PrepareFrame+0x5ac>)
 8007b06:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen + 1] = ( mic >> 8 ) & 0xFF;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	0a1a      	lsrs	r2, r3, #8
 8007b0c:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	b2d1      	uxtb	r1, r2
 8007b14:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <PrepareFrame+0x5ac>)
 8007b16:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 2] = ( mic >> 16 ) & 0xFF;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	0c1a      	lsrs	r2, r3, #16
 8007b1c:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	3302      	adds	r3, #2
 8007b22:	b2d1      	uxtb	r1, r2
 8007b24:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <PrepareFrame+0x5ac>)
 8007b26:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 3] = ( mic >> 24 ) & 0xFF;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	0e1a      	lsrs	r2, r3, #24
 8007b2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	3303      	adds	r3, #3
 8007b32:	b2d1      	uxtb	r1, r2
 8007b34:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <PrepareFrame+0x5ac>)
 8007b36:	54d1      	strb	r1, [r2, r3]

            LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 8007b38:	4b1a      	ldr	r3, [pc, #104]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	4b18      	ldr	r3, [pc, #96]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007b42:	801a      	strh	r2, [r3, #0]

            break;
 8007b44:	e01f      	b.n	8007b86 <PrepareFrame+0x596>
        case FRAME_TYPE_PROPRIETARY:
            if ( ( fBuffer != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01b      	beq.n	8007b84 <PrepareFrame+0x594>
 8007b4c:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <PrepareFrame+0x5a0>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d017      	beq.n	8007b84 <PrepareFrame+0x594>
                memcpy1( LoRaMacBuffer + pktHeaderLen, ( uint8_t * ) fBuffer, LoRaMacTxPayloadLen );
 8007b54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007b58:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <PrepareFrame+0x5ac>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <PrepareFrame+0x5a0>)
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	b292      	uxth	r2, r2
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f008 ff66 	bl	8010a36 <memcpy1>
                LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8007b6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <PrepareFrame+0x5a0>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <PrepareFrame+0x5b4>)
 8007b7c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8007b7e:	e001      	b.n	8007b84 <PrepareFrame+0x594>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007b80:	2302      	movs	r3, #2
 8007b82:	e001      	b.n	8007b88 <PrepareFrame+0x598>
            break;
 8007b84:	bf00      	nop
    }
    return LORAMAC_STATUS_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3734      	adds	r7, #52	; 0x34
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}
 8007b90:	20000252 	.word	0x20000252
 8007b94:	20000144 	.word	0x20000144
 8007b98:	20000354 	.word	0x20000354
 8007b9c:	20000150 	.word	0x20000150
 8007ba0:	20000130 	.word	0x20000130
 8007ba4:	20000250 	.word	0x20000250
 8007ba8:	20000120 	.word	0x20000120

08007bac <SendFrameOnChannel>:



extern void calRTC();
LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b088      	sub	sp, #32
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]

    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 8007bbe:	4b2e      	ldr	r3, [pc, #184]	; (8007c78 <SendFrameOnChannel+0xcc>)
 8007bc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007bc4:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 8007bc6:	4b2c      	ldr	r3, [pc, #176]	; (8007c78 <SendFrameOnChannel+0xcc>)
 8007bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8007bcc:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 8007bce:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <SendFrameOnChannel+0xcc>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 8007bd4:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <SendFrameOnChannel+0xcc>)
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = LoRaMacBufferPktLen;
 8007bda:	4b28      	ldr	r3, [pc, #160]	; (8007c7c <SendFrameOnChannel+0xd0>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8007be0:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <SendFrameOnChannel+0xd4>)
 8007be2:	7818      	ldrb	r0, [r3, #0]
 8007be4:	f107 020f 	add.w	r2, r7, #15
 8007be8:	f107 0110 	add.w	r1, r7, #16
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <SendFrameOnChannel+0xd8>)
 8007bee:	f002 fa05 	bl	8009ffc <RegionTxConfig>

    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_ERROR );
 8007bf2:	2001      	movs	r0, #1
 8007bf4:	f001 fad6 	bl	80091a4 <LoRaMacConfirmQueueSetStatusCmn>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007bf8:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <SendFrameOnChannel+0xdc>)
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	705a      	strb	r2, [r3, #1]
    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	; (8007c78 <SendFrameOnChannel+0xcc>)
 8007c00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	4b20      	ldr	r3, [pc, #128]	; (8007c88 <SendFrameOnChannel+0xdc>)
 8007c08:	709a      	strb	r2, [r3, #2]
    McpsConfirm.TxPower = txPower;
 8007c0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <SendFrameOnChannel+0xdc>)
 8007c10:	70da      	strb	r2, [r3, #3]
    McpsConfirm.Channel = channel;
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	; (8007c88 <SendFrameOnChannel+0xdc>)
 8007c16:	6113      	str	r3, [r2, #16]

    // Store the time on air
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 8007c18:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <SendFrameOnChannel+0xd8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1a      	ldr	r2, [pc, #104]	; (8007c88 <SendFrameOnChannel+0xdc>)
 8007c1e:	6093      	str	r3, [r2, #8]
    MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 8007c20:	4b18      	ldr	r3, [pc, #96]	; (8007c84 <SendFrameOnChannel+0xd8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <SendFrameOnChannel+0xe0>)
 8007c26:	6053      	str	r3, [r2, #4]
//    calRTC();
    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c2c:	4818      	ldr	r0, [pc, #96]	; (8007c90 <SendFrameOnChannel+0xe4>)
 8007c2e:	f008 fe03 	bl	8010838 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007c32:	4817      	ldr	r0, [pc, #92]	; (8007c90 <SendFrameOnChannel+0xe4>)
 8007c34:	f008 fbfc 	bl	8010430 <TimerStart>

    if ( IsLoRaMacNetworkJoined == false ) {
 8007c38:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <SendFrameOnChannel+0xe8>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f083 0301 	eor.w	r3, r3, #1
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <SendFrameOnChannel+0xa6>
        JoinRequestTrials++;
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <SendFrameOnChannel+0xec>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <SendFrameOnChannel+0xec>)
 8007c50:	701a      	strb	r2, [r3, #0]
    }
    // Send now
    Radio.Send( LoRaMacBuffer, LoRaMacBufferPktLen );
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <SendFrameOnChannel+0xf0>)
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	4a09      	ldr	r2, [pc, #36]	; (8007c7c <SendFrameOnChannel+0xd0>)
 8007c58:	8812      	ldrh	r2, [r2, #0]
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4810      	ldr	r0, [pc, #64]	; (8007ca0 <SendFrameOnChannel+0xf4>)
 8007c60:	4798      	blx	r3

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007c62:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <SendFrameOnChannel+0xf8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	4a0e      	ldr	r2, [pc, #56]	; (8007ca4 <SendFrameOnChannel+0xf8>)
 8007c6c:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20000a70 	.word	0x20000a70
 8007c7c:	20000250 	.word	0x20000250
 8007c80:	20000114 	.word	0x20000114
 8007c84:	200004c0 	.word	0x200004c0
 8007c88:	200009b8 	.word	0x200009b8
 8007c8c:	2000098c 	.word	0x2000098c
 8007c90:	20000484 	.word	0x20000484
 8007c94:	2000035d 	.word	0x2000035d
 8007c98:	20000a0c 	.word	0x20000a0c
 8007c9c:	080130d4 	.word	0x080130d4
 8007ca0:	20000150 	.word	0x20000150
 8007ca4:	20000480 	.word	0x20000480

08007ca8 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = Channel;
 8007cb2:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <SetTxContinuousWave+0x68>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = LoRaMacParams.ChannelsDatarate;
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <SetTxContinuousWave+0x6c>)
 8007cba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007cbe:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = LoRaMacParams.ChannelsTxPower;
 8007cc0:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <SetTxContinuousWave+0x6c>)
 8007cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8007cc6:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = LoRaMacParams.MaxEirp;
 8007cc8:	4b12      	ldr	r3, [pc, #72]	; (8007d14 <SetTxContinuousWave+0x6c>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = LoRaMacParams.AntennaGain;
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <SetTxContinuousWave+0x6c>)
 8007cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd2:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8007cd4:	88fb      	ldrh	r3, [r7, #6]
 8007cd6:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( LoRaMacRegion, &continuousWave );
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <SetTxContinuousWave+0x70>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f107 0208 	add.w	r2, r7, #8
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f002 fa57 	bl	800a196 <RegionSetContinuousWave>

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007ce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007cec:	480b      	ldr	r0, [pc, #44]	; (8007d1c <SetTxContinuousWave+0x74>)
 8007cee:	f008 fda3 	bl	8010838 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007cf2:	480a      	ldr	r0, [pc, #40]	; (8007d1c <SetTxContinuousWave+0x74>)
 8007cf4:	f008 fb9c 	bl	8010430 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <SetTxContinuousWave+0x78>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	4a07      	ldr	r2, [pc, #28]	; (8007d20 <SetTxContinuousWave+0x78>)
 8007d02:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	20000479 	.word	0x20000479
 8007d14:	20000a70 	.word	0x20000a70
 8007d18:	20000114 	.word	0x20000114
 8007d1c:	20000484 	.word	0x20000484
 8007d20:	20000480 	.word	0x20000480

08007d24 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	80fb      	strh	r3, [r7, #6]
 8007d30:	4613      	mov	r3, r2
 8007d32:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <SetTxContinuousWave1+0x44>)
 8007d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d38:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	6838      	ldr	r0, [r7, #0]
 8007d40:	4798      	blx	r3

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d46:	4809      	ldr	r0, [pc, #36]	; (8007d6c <SetTxContinuousWave1+0x48>)
 8007d48:	f008 fd76 	bl	8010838 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007d4c:	4807      	ldr	r0, [pc, #28]	; (8007d6c <SetTxContinuousWave1+0x48>)
 8007d4e:	f008 fb6f 	bl	8010430 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <SetTxContinuousWave1+0x4c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <SetTxContinuousWave1+0x4c>)
 8007d5c:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	080130d4 	.word	0x080130d4
 8007d6c:	20000484 	.word	0x20000484
 8007d70:	20000480 	.word	0x20000480

08007d74 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacCallback_t *callbacks,
                                       LoRaMacRegion_t region )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if ( primitives == NULL ) {
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <LoRaMacInitialization+0x18>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e1db      	b.n	8008144 <LoRaMacInitialization+0x3d0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <LoRaMacInitialization+0x38>
        ( primitives->MacMcpsIndication == NULL ) ||
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <LoRaMacInitialization+0x38>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <LoRaMacInitialization+0x38>
        ( primitives->MacMlmeIndication == NULL ) ) {
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <LoRaMacInitialization+0x3c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e1c9      	b.n	8008144 <LoRaMacInitialization+0x3d0>
    }
    // Verify if the region is supported
    if ( RegionIsActive( region ) == false ) {
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f002 f850 	bl	8009e58 <RegionIsActive>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f083 0301 	eor.w	r3, r3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <LoRaMacInitialization+0x54>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8007dc4:	230a      	movs	r3, #10
 8007dc6:	e1bd      	b.n	8008144 <LoRaMacInitialization+0x3d0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f001 f903 	bl	8008fd4 <LoRaMacConfirmQueueInit>

    LoRaMacPrimitives = primitives;
 8007dce:	4ab0      	ldr	r2, [pc, #704]	; (8008090 <LoRaMacInitialization+0x31c>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks = callbacks;
 8007dd4:	4aaf      	ldr	r2, [pc, #700]	; (8008094 <LoRaMacInitialization+0x320>)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	6013      	str	r3, [r2, #0]
    LoRaMacRegion = region;
 8007dda:	4aaf      	ldr	r2, [pc, #700]	; (8008098 <LoRaMacInitialization+0x324>)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	7013      	strb	r3, [r2, #0]

    if(IsLoRaMacNetworkJoined==false){
 8007de0:	4bae      	ldr	r3, [pc, #696]	; (800809c <LoRaMacInitialization+0x328>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f083 0301 	eor.w	r3, r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 813d 	beq.w	800806a <LoRaMacInitialization+0x2f6>
    LoRaMacFlags.Value = 0;
 8007df0:	4bab      	ldr	r3, [pc, #684]	; (80080a0 <LoRaMacInitialization+0x32c>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]

    LoRaMacDeviceClass = CLASS_A;
 8007df6:	4bab      	ldr	r3, [pc, #684]	; (80080a4 <LoRaMacInitialization+0x330>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
    LoRaMacState = LORAMAC_IDLE;
 8007dfc:	4baa      	ldr	r3, [pc, #680]	; (80080a8 <LoRaMacInitialization+0x334>)
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]

    JoinRequestTrials = 0;
 8007e02:	4baa      	ldr	r3, [pc, #680]	; (80080ac <LoRaMacInitialization+0x338>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
    MaxJoinRequestTrials = 1;
 8007e08:	4ba9      	ldr	r3, [pc, #676]	; (80080b0 <LoRaMacInitialization+0x33c>)
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	701a      	strb	r2, [r3, #0]

    // Reset duty cycle times
    AggregatedLastTxDoneTime = 0;
 8007e0e:	4ba9      	ldr	r3, [pc, #676]	; (80080b4 <LoRaMacInitialization+0x340>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
    AggregatedTimeOff = 0;
 8007e14:	4ba8      	ldr	r3, [pc, #672]	; (80080b8 <LoRaMacInitialization+0x344>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007e1a:	230b      	movs	r3, #11
 8007e1c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007e1e:	4b9e      	ldr	r3, [pc, #632]	; (8008098 <LoRaMacInitialization+0x324>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f107 0214 	add.w	r2, r7, #20
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f002 f825 	bl	8009e78 <RegionGetPhyParam>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	613b      	str	r3, [r7, #16]
    DutyCycleOn = ( bool ) phyParam.Value;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bf14      	ite	ne
 8007e38:	2301      	movne	r3, #1
 8007e3a:	2300      	moveq	r3, #0
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	4b9f      	ldr	r3, [pc, #636]	; (80080bc <LoRaMacInitialization+0x348>)
 8007e40:	701a      	strb	r2, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007e42:	2308      	movs	r3, #8
 8007e44:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007e46:	4b94      	ldr	r3, [pc, #592]	; (8008098 <LoRaMacInitialization+0x324>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f107 0214 	add.w	r2, r7, #20
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f002 f811 	bl	8009e78 <RegionGetPhyParam>
 8007e56:	4603      	mov	r3, r0
 8007e58:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	b25a      	sxtb	r2, r3
 8007e5e:	4b98      	ldr	r3, [pc, #608]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007e60:	701a      	strb	r2, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8007e62:	2305      	movs	r3, #5
 8007e64:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007e66:	4b8c      	ldr	r3, [pc, #560]	; (8008098 <LoRaMacInitialization+0x324>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	f107 0214 	add.w	r2, r7, #20
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f002 f801 	bl	8009e78 <RegionGetPhyParam>
 8007e76:	4603      	mov	r3, r0
 8007e78:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	b25a      	sxtb	r2, r3
 8007e7e:	4b90      	ldr	r3, [pc, #576]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007e80:	705a      	strb	r2, [r3, #1]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007e82:	230c      	movs	r3, #12
 8007e84:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007e86:	4b84      	ldr	r3, [pc, #528]	; (8008098 <LoRaMacInitialization+0x324>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	f107 0214 	add.w	r2, r7, #20
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fff1 	bl	8009e78 <RegionGetPhyParam>
 8007e96:	4603      	mov	r3, r0
 8007e98:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.MaxRxWindow = phyParam.Value;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4a88      	ldr	r2, [pc, #544]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007e9e:	60d3      	str	r3, [r2, #12]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8007ea0:	230d      	movs	r3, #13
 8007ea2:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007ea4:	4b7c      	ldr	r3, [pc, #496]	; (8008098 <LoRaMacInitialization+0x324>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f107 0214 	add.w	r2, r7, #20
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 ffe2 	bl	8009e78 <RegionGetPhyParam>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	4a81      	ldr	r2, [pc, #516]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007ebc:	6113      	str	r3, [r2, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8007ebe:	230e      	movs	r3, #14
 8007ec0:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007ec2:	4b75      	ldr	r3, [pc, #468]	; (8008098 <LoRaMacInitialization+0x324>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	f107 0214 	add.w	r2, r7, #20
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 ffd3 	bl	8009e78 <RegionGetPhyParam>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4a79      	ldr	r2, [pc, #484]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007eda:	6153      	str	r3, [r2, #20]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8007edc:	230f      	movs	r3, #15
 8007ede:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007ee0:	4b6d      	ldr	r3, [pc, #436]	; (8008098 <LoRaMacInitialization+0x324>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	f107 0214 	add.w	r2, r7, #20
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 ffc4 	bl	8009e78 <RegionGetPhyParam>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	4a72      	ldr	r2, [pc, #456]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007ef8:	6193      	str	r3, [r2, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8007efa:	2310      	movs	r3, #16
 8007efc:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007efe:	4b66      	ldr	r3, [pc, #408]	; (8008098 <LoRaMacInitialization+0x324>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f107 0214 	add.w	r2, r7, #20
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 ffb5 	bl	8009e78 <RegionGetPhyParam>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007f16:	61d3      	str	r3, [r2, #28]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8007f18:	2313      	movs	r3, #19
 8007f1a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007f1c:	4b5e      	ldr	r3, [pc, #376]	; (8008098 <LoRaMacInitialization+0x324>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f107 0214 	add.w	r2, r7, #20
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 ffa6 	bl	8009e78 <RegionGetPhyParam>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	4b62      	ldr	r3, [pc, #392]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007f36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8007f3a:	2314      	movs	r3, #20
 8007f3c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007f3e:	4b56      	ldr	r3, [pc, #344]	; (8008098 <LoRaMacInitialization+0x324>)
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f107 0214 	add.w	r2, r7, #20
 8007f46:	4611      	mov	r1, r2
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 ff95 	bl	8009e78 <RegionGetPhyParam>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4a5a      	ldr	r2, [pc, #360]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007f56:	6253      	str	r3, [r2, #36]	; 0x24

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8007f58:	2315      	movs	r3, #21
 8007f5a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007f5c:	4b4e      	ldr	r3, [pc, #312]	; (8008098 <LoRaMacInitialization+0x324>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f107 0214 	add.w	r2, r7, #20
 8007f64:	4611      	mov	r1, r2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 ff86 	bl	8009e78 <RegionGetPhyParam>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	4b52      	ldr	r3, [pc, #328]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8007f7a:	231a      	movs	r3, #26
 8007f7c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007f7e:	4b46      	ldr	r3, [pc, #280]	; (8008098 <LoRaMacInitialization+0x324>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f107 0214 	add.w	r2, r7, #20
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 ff75 	bl	8009e78 <RegionGetPhyParam>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b4a      	ldr	r3, [pc, #296]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007f98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8007f9c:	231b      	movs	r3, #27
 8007f9e:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007fa0:	4b3d      	ldr	r3, [pc, #244]	; (8008098 <LoRaMacInitialization+0x324>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f107 0214 	add.w	r2, r7, #20
 8007fa8:	4611      	mov	r1, r2
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 ff64 	bl	8009e78 <RegionGetPhyParam>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	4b41      	ldr	r3, [pc, #260]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007fba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8007fbe:	231c      	movs	r3, #28
 8007fc0:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007fc2:	4b35      	ldr	r3, [pc, #212]	; (8008098 <LoRaMacInitialization+0x324>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f107 0214 	add.w	r2, r7, #20
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 ff53 	bl	8009e78 <RegionGetPhyParam>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.MaxEirp = phyParam.fValue;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	4a39      	ldr	r2, [pc, #228]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007fda:	6313      	str	r3, [r2, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8007fdc:	231d      	movs	r3, #29
 8007fde:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007fe0:	4b2d      	ldr	r3, [pc, #180]	; (8008098 <LoRaMacInitialization+0x324>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f107 0214 	add.w	r2, r7, #20
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f001 ff44 	bl	8009e78 <RegionGetPhyParam>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.AntennaGain = phyParam.fValue;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	4a32      	ldr	r2, [pc, #200]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8007ff8:	6353      	str	r3, [r2, #52]	; 0x34

    RegionInitDefaults( LoRaMacRegion, INIT_TYPE_INIT );
 8007ffa:	4b27      	ldr	r3, [pc, #156]	; (8008098 <LoRaMacInitialization+0x324>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f001 ff63 	bl	8009ecc <RegionInitDefaults>

    // Init parameters which are not set in function ResetMacParameters
    LoRaMacParams.RepeaterSupport = false;
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacParamsDefaults.ChannelsNbRep = 1;
 800800e:	4b2c      	ldr	r3, [pc, #176]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2020 	strb.w	r2, [r3, #32]
    LoRaMacParamsDefaults.SystemMaxRxError = 10;
 8008016:	4b2a      	ldr	r3, [pc, #168]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8008018:	220a      	movs	r2, #10
 800801a:	605a      	str	r2, [r3, #4]
    LoRaMacParamsDefaults.MinRxSymbols = 6;
 800801c:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <LoRaMacInitialization+0x34c>)
 800801e:	2206      	movs	r2, #6
 8008020:	721a      	strb	r2, [r3, #8]

    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 8008022:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008028:	6053      	str	r3, [r2, #4]
    LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols;
 800802a:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <LoRaMacInitialization+0x34c>)
 800802c:	7a1a      	ldrb	r2, [r3, #8]
 800802e:	4b25      	ldr	r3, [pc, #148]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008030:	721a      	strb	r2, [r3, #8]
    LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 8008032:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4a23      	ldr	r2, [pc, #140]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008038:	60d3      	str	r3, [r2, #12]
    LoRaMacParams.ReceiveDelay1 = LoRaMacParamsDefaults.ReceiveDelay1;
 800803a:	4b21      	ldr	r3, [pc, #132]	; (80080c0 <LoRaMacInitialization+0x34c>)
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	4a21      	ldr	r2, [pc, #132]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008040:	6113      	str	r3, [r2, #16]
    LoRaMacParams.ReceiveDelay2 = LoRaMacParamsDefaults.ReceiveDelay2;
 8008042:	4b1f      	ldr	r3, [pc, #124]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008048:	6153      	str	r3, [r2, #20]
    LoRaMacParams.JoinAcceptDelay1 = LoRaMacParamsDefaults.JoinAcceptDelay1;
 800804a:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <LoRaMacInitialization+0x34c>)
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008050:	6193      	str	r3, [r2, #24]
    LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 8008052:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <LoRaMacInitialization+0x34c>)
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008058:	61d3      	str	r3, [r2, #28]
    LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 800805a:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <LoRaMacInitialization+0x34c>)
 800805c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008060:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <LoRaMacInitialization+0x350>)
 8008062:	f883 2020 	strb.w	r2, [r3, #32]

      ResetMacParameters( );
 8008066:	f7ff fa03 	bl	8007470 <ResetMacParameters>
    }

    // Initialize timers
    TimerInit( &MacStateCheckTimer, OnMacStateCheckTimerEvent );
 800806a:	4917      	ldr	r1, [pc, #92]	; (80080c8 <LoRaMacInitialization+0x354>)
 800806c:	4817      	ldr	r0, [pc, #92]	; (80080cc <LoRaMacInitialization+0x358>)
 800806e:	f008 f9c5 	bl	80103fc <TimerInit>
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8008072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008076:	4815      	ldr	r0, [pc, #84]	; (80080cc <LoRaMacInitialization+0x358>)
 8008078:	f008 fbde 	bl	8010838 <TimerSetValue>

    TimerInit( &TxDelayedTimer, OnTxDelayedTimerEvent );
 800807c:	4914      	ldr	r1, [pc, #80]	; (80080d0 <LoRaMacInitialization+0x35c>)
 800807e:	4815      	ldr	r0, [pc, #84]	; (80080d4 <LoRaMacInitialization+0x360>)
 8008080:	f008 f9bc 	bl	80103fc <TimerInit>
    TimerInit( &RxWindowTimer1, OnRxWindow1TimerEvent );
 8008084:	4914      	ldr	r1, [pc, #80]	; (80080d8 <LoRaMacInitialization+0x364>)
 8008086:	4815      	ldr	r0, [pc, #84]	; (80080dc <LoRaMacInitialization+0x368>)
 8008088:	f008 f9b8 	bl	80103fc <TimerInit>
 800808c:	e028      	b.n	80080e0 <LoRaMacInitialization+0x36c>
 800808e:	bf00      	nop
 8008090:	20000498 	.word	0x20000498
 8008094:	2000049c 	.word	0x2000049c
 8008098:	20000114 	.word	0x20000114
 800809c:	2000035d 	.word	0x2000035d
 80080a0:	20000a10 	.word	0x20000a10
 80080a4:	2000014c 	.word	0x2000014c
 80080a8:	20000480 	.word	0x20000480
 80080ac:	20000a0c 	.word	0x20000a0c
 80080b0:	200009b4 	.word	0x200009b4
 80080b4:	20000470 	.word	0x20000470
 80080b8:	20000474 	.word	0x20000474
 80080bc:	20000478 	.word	0x20000478
 80080c0:	20000a14 	.word	0x20000a14
 80080c4:	20000a70 	.word	0x20000a70
 80080c8:	08005e89 	.word	0x08005e89
 80080cc:	20000484 	.word	0x20000484
 80080d0:	08006369 	.word	0x08006369
 80080d4:	20000a54 	.word	0x20000a54
 80080d8:	08006419 	.word	0x08006419
 80080dc:	200009f8 	.word	0x200009f8
    TimerInit( &RxWindowTimer2, OnRxWindow2TimerEvent );
 80080e0:	491a      	ldr	r1, [pc, #104]	; (800814c <LoRaMacInitialization+0x3d8>)
 80080e2:	481b      	ldr	r0, [pc, #108]	; (8008150 <LoRaMacInitialization+0x3dc>)
 80080e4:	f008 f98a 	bl	80103fc <TimerInit>
    TimerInit( &AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80080e8:	491a      	ldr	r1, [pc, #104]	; (8008154 <LoRaMacInitialization+0x3e0>)
 80080ea:	481b      	ldr	r0, [pc, #108]	; (8008158 <LoRaMacInitialization+0x3e4>)
 80080ec:	f008 f986 	bl	80103fc <TimerInit>

    // Store the current initialization time
    LoRaMacInitializationTime = TimerGetCurrentTime( );
 80080f0:	f008 fbbb 	bl	801086a <TimerGetCurrentTime>
 80080f4:	4603      	mov	r3, r0
 80080f6:	4a19      	ldr	r2, [pc, #100]	; (800815c <LoRaMacInitialization+0x3e8>)
 80080f8:	6013      	str	r3, [r2, #0]

    // Initialize Radio driver
    RadioEvents.TxDone = OnRadioTxDone;
 80080fa:	4b19      	ldr	r3, [pc, #100]	; (8008160 <LoRaMacInitialization+0x3ec>)
 80080fc:	4a19      	ldr	r2, [pc, #100]	; (8008164 <LoRaMacInitialization+0x3f0>)
 80080fe:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRadioRxDone;
 8008100:	4b17      	ldr	r3, [pc, #92]	; (8008160 <LoRaMacInitialization+0x3ec>)
 8008102:	4a19      	ldr	r2, [pc, #100]	; (8008168 <LoRaMacInitialization+0x3f4>)
 8008104:	609a      	str	r2, [r3, #8]
    RadioEvents.RxError = OnRadioRxError;
 8008106:	4b16      	ldr	r3, [pc, #88]	; (8008160 <LoRaMacInitialization+0x3ec>)
 8008108:	4a18      	ldr	r2, [pc, #96]	; (800816c <LoRaMacInitialization+0x3f8>)
 800810a:	611a      	str	r2, [r3, #16]
    RadioEvents.TxTimeout = OnRadioTxTimeout;
 800810c:	4b14      	ldr	r3, [pc, #80]	; (8008160 <LoRaMacInitialization+0x3ec>)
 800810e:	4a18      	ldr	r2, [pc, #96]	; (8008170 <LoRaMacInitialization+0x3fc>)
 8008110:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRadioRxTimeout;
 8008112:	4b13      	ldr	r3, [pc, #76]	; (8008160 <LoRaMacInitialization+0x3ec>)
 8008114:	4a17      	ldr	r2, [pc, #92]	; (8008174 <LoRaMacInitialization+0x400>)
 8008116:	60da      	str	r2, [r3, #12]

    Radio.Init( &RadioEvents );
 8008118:	4b17      	ldr	r3, [pc, #92]	; (8008178 <LoRaMacInitialization+0x404>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4810      	ldr	r0, [pc, #64]	; (8008160 <LoRaMacInitialization+0x3ec>)
 800811e:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
 8008120:	4b15      	ldr	r3, [pc, #84]	; (8008178 <LoRaMacInitialization+0x404>)
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	4798      	blx	r3
 8008126:	4603      	mov	r3, r0
 8008128:	4618      	mov	r0, r3
 800812a:	f008 fc5f 	bl	80109ec <srand1>

    PublicNetwork = true;
 800812e:	4b13      	ldr	r3, [pc, #76]	; (800817c <LoRaMacInitialization+0x408>)
 8008130:	2201      	movs	r2, #1
 8008132:	701a      	strb	r2, [r3, #0]
    Radio.SetPublicNetwork(true);
 8008134:	4b10      	ldr	r3, [pc, #64]	; (8008178 <LoRaMacInitialization+0x404>)
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008138:	2001      	movs	r0, #1
 800813a:	4798      	blx	r3
    Radio.Sleep( );
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <LoRaMacInitialization+0x404>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	080064b5 	.word	0x080064b5
 8008150:	200009a0 	.word	0x200009a0
 8008154:	080065ad 	.word	0x080065ad
 8008158:	20000ac8 	.word	0x20000ac8
 800815c:	2000047c 	.word	0x2000047c
 8008160:	200004a0 	.word	0x200004a0
 8008164:	08005191 	.word	0x08005191
 8008168:	08005355 	.word	0x08005355
 800816c:	08005cf1 	.word	0x08005cf1
 8008170:	08005cad 	.word	0x08005cad
 8008174:	08005dbd 	.word	0x08005dbd
 8008178:	080130d4 	.word	0x080130d4
 800817c:	2000014d 	.word	0x2000014d

08008180 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t *txInfo )
{
 8008180:	b590      	push	{r4, r7, lr}
 8008182:	b08d      	sub	sp, #52	; 0x34
 8008184:	af02      	add	r7, sp, #8
 8008186:	4603      	mov	r3, r0
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	71fb      	strb	r3, [r7, #7]
    AdrNextParams_t adrNext;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800818c:	4b42      	ldr	r3, [pc, #264]	; (8008298 <LoRaMacQueryTxPossible+0x118>)
 800818e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008192:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8008194:	4b40      	ldr	r3, [pc, #256]	; (8008298 <LoRaMacQueryTxPossible+0x118>)
 8008196:	f993 3000 	ldrsb.w	r3, [r3]
 800819a:	73bb      	strb	r3, [r7, #14]
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 800819c:	4b3f      	ldr	r3, [pc, #252]	; (800829c <LoRaMacQueryTxPossible+0x11c>)
 800819e:	781a      	ldrb	r2, [r3, #0]
 80081a0:	4b3f      	ldr	r3, [pc, #252]	; (80082a0 <LoRaMacQueryTxPossible+0x120>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ( txInfo == NULL ) {
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <LoRaMacQueryTxPossible+0x34>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e06d      	b.n	8008290 <LoRaMacQueryTxPossible+0x110>
    }

    // Setup ADR request
    adrNext.UpdateChanMask = false;
 80081b4:	2300      	movs	r3, #0
 80081b6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = AdrCtrlOn;
 80081b8:	4b3a      	ldr	r3, [pc, #232]	; (80082a4 <LoRaMacQueryTxPossible+0x124>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = AdrAckCounter;
 80081be:	4b3a      	ldr	r3, [pc, #232]	; (80082a8 <LoRaMacQueryTxPossible+0x128>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	61fb      	str	r3, [r7, #28]
    adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 80081c4:	4b39      	ldr	r3, [pc, #228]	; (80082ac <LoRaMacQueryTxPossible+0x12c>)
 80081c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80081ca:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 80081ce:	4b37      	ldr	r3, [pc, #220]	; (80082ac <LoRaMacQueryTxPossible+0x12c>)
 80081d0:	f993 3000 	ldrsb.w	r3, [r3]
 80081d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 80081d8:	4b34      	ldr	r3, [pc, #208]	; (80082ac <LoRaMacQueryTxPossible+0x12c>)
 80081da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    RegionAdrNext( LoRaMacRegion, &adrNext, &datarate, &txPower, &AdrAckCounter );
 80081e2:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <LoRaMacQueryTxPossible+0x130>)
 80081e4:	7818      	ldrb	r0, [r3, #0]
 80081e6:	f107 030e 	add.w	r3, r7, #14
 80081ea:	f107 020f 	add.w	r2, r7, #15
 80081ee:	f107 0118 	add.w	r1, r7, #24
 80081f2:	4c2d      	ldr	r4, [pc, #180]	; (80082a8 <LoRaMacQueryTxPossible+0x128>)
 80081f4:	9400      	str	r4, [sp, #0]
 80081f6:	f001 feba 	bl	8009f6e <RegionAdrNext>

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 80081fa:	4b2c      	ldr	r3, [pc, #176]	; (80082ac <LoRaMacQueryTxPossible+0x12c>)
 80081fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008200:	75bb      	strb	r3, [r7, #22]
    getPhy.Datarate = datarate;
 8008202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008206:	757b      	strb	r3, [r7, #21]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008208:	2309      	movs	r3, #9
 800820a:	753b      	strb	r3, [r7, #20]

    // Change request in case repeater is supported
    if( LoRaMacParams.RepeaterSupport == true ) {
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <LoRaMacQueryTxPossible+0x12c>)
 800820e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008212:	2b00      	cmp	r3, #0
 8008214:	d001      	beq.n	800821a <LoRaMacQueryTxPossible+0x9a>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008216:	230a      	movs	r3, #10
 8008218:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800821a:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <LoRaMacQueryTxPossible+0x130>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	f107 0214 	add.w	r2, r7, #20
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f001 fe27 	bl	8009e78 <RegionGetPhyParam>
 800822a:	4603      	mov	r3, r0
 800822c:	613b      	str	r3, [r7, #16]
    txInfo->CurrentPayloadSize = phyParam.Value;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	705a      	strb	r2, [r3, #1]

    // Verify if the fOpts fit into the maximum payload
    if ( txInfo->CurrentPayloadSize >= fOptLen ) {
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	785b      	ldrb	r3, [r3, #1]
 800823a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800823e:	429a      	cmp	r2, r3
 8008240:	d808      	bhi.n	8008254 <LoRaMacQueryTxPossible+0xd4>
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize - fOptLen;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	785a      	ldrb	r2, [r3, #1]
 8008246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	b2da      	uxtb	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	701a      	strb	r2, [r3, #0]
 8008252:	e00c      	b.n	800826e <LoRaMacQueryTxPossible+0xee>
    } else {
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	785a      	ldrb	r2, [r3, #1]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	701a      	strb	r2, [r3, #0]
        // The fOpts don't fit into the maximum payload. Omit the MAC commands to
        // ensure that another uplink is possible.
        fOptLen = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        MacCommandsBufferIndex = 0;
 8008262:	4b0e      	ldr	r3, [pc, #56]	; (800829c <LoRaMacQueryTxPossible+0x11c>)
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
        MacCommandsBufferToRepeatIndex = 0;
 8008268:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <LoRaMacQueryTxPossible+0x120>)
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if the fOpts and the payload fit into the maximum payload
    if ( ValidatePayloadLength( size, datarate, fOptLen ) == false ) {
 800826e:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8008272:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fa2d 	bl	80066d8 <ValidatePayloadLength>
 800827e:	4603      	mov	r3, r0
 8008280:	f083 0301 	eor.w	r3, r3, #1
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <LoRaMacQueryTxPossible+0x10e>
        return LORAMAC_STATUS_LENGTH_ERROR;
 800828a:	2308      	movs	r3, #8
 800828c:	e000      	b.n	8008290 <LoRaMacQueryTxPossible+0x110>
    }
    return LORAMAC_STATUS_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	372c      	adds	r7, #44	; 0x2c
 8008294:	46bd      	mov	sp, r7
 8008296:	bd90      	pop	{r4, r7, pc}
 8008298:	20000a14 	.word	0x20000a14
 800829c:	20000367 	.word	0x20000367
 80082a0:	20000368 	.word	0x20000368
 80082a4:	2000035e 	.word	0x2000035e
 80082a8:	20000360 	.word	0x20000360
 80082ac:	20000a70 	.word	0x20000a70
 80082b0:	20000114 	.word	0x20000114

080082b4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if ( mibGet == NULL ) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <LoRaMacMibGetRequestConfirm+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e10d      	b.n	80084e6 <LoRaMacMibGetRequestConfirm+0x232>
    }

    switch ( mibGet->Type ) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b1e      	cmp	r3, #30
 80082d0:	f200 8105 	bhi.w	80084de <LoRaMacMibGetRequestConfirm+0x22a>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <LoRaMacMibGetRequestConfirm+0x28>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	08008359 	.word	0x08008359
 80082e0:	08008363 	.word	0x08008363
 80082e4:	0800836d 	.word	0x0800836d
 80082e8:	08008377 	.word	0x08008377
 80082ec:	08008381 	.word	0x08008381
 80082f0:	0800838b 	.word	0x0800838b
 80082f4:	08008393 	.word	0x08008393
 80082f8:	0800839b 	.word	0x0800839b
 80082fc:	080083a5 	.word	0x080083a5
 8008300:	080083b1 	.word	0x080083b1
 8008304:	080083d1 	.word	0x080083d1
 8008308:	080083e3 	.word	0x080083e3
 800830c:	08008415 	.word	0x08008415
 8008310:	080083f5 	.word	0x080083f5
 8008314:	08008435 	.word	0x08008435
 8008318:	08008441 	.word	0x08008441
 800831c:	0800844b 	.word	0x0800844b
 8008320:	08008455 	.word	0x08008455
 8008324:	0800845f 	.word	0x0800845f
 8008328:	08008469 	.word	0x08008469
 800832c:	08008473 	.word	0x08008473
 8008330:	0800847f 	.word	0x0800847f
 8008334:	08008497 	.word	0x08008497
 8008338:	0800848b 	.word	0x0800848b
 800833c:	080084a3 	.word	0x080084a3
 8008340:	080084ad 	.word	0x080084ad
 8008344:	080084b7 	.word	0x080084b7
 8008348:	080084df 	.word	0x080084df
 800834c:	080084c1 	.word	0x080084c1
 8008350:	080084cb 	.word	0x080084cb
 8008354:	080084d5 	.word	0x080084d5
        case MIB_DEVICE_CLASS: {
            mibGet->Param.Class = LoRaMacDeviceClass;
 8008358:	4b65      	ldr	r3, [pc, #404]	; (80084f0 <LoRaMacMibGetRequestConfirm+0x23c>)
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	711a      	strb	r2, [r3, #4]
            break;
 8008360:	e0c0      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NETWORK_JOINED: {
            mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 8008362:	4b64      	ldr	r3, [pc, #400]	; (80084f4 <LoRaMacMibGetRequestConfirm+0x240>)
 8008364:	781a      	ldrb	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	711a      	strb	r2, [r3, #4]
            break;
 800836a:	e0bb      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_ADR: {
            mibGet->Param.AdrEnable = AdrCtrlOn;
 800836c:	4b62      	ldr	r3, [pc, #392]	; (80084f8 <LoRaMacMibGetRequestConfirm+0x244>)
 800836e:	781a      	ldrb	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	711a      	strb	r2, [r3, #4]
            break;
 8008374:	e0b6      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NET_ID: {
            mibGet->Param.NetID = LoRaMacNetID;
 8008376:	4b61      	ldr	r3, [pc, #388]	; (80084fc <LoRaMacMibGetRequestConfirm+0x248>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	605a      	str	r2, [r3, #4]
            break;
 800837e:	e0b1      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_DEV_ADDR: {
            mibGet->Param.DevAddr = LoRaMacDevAddr;
 8008380:	4b5f      	ldr	r3, [pc, #380]	; (8008500 <LoRaMacMibGetRequestConfirm+0x24c>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	605a      	str	r2, [r3, #4]
            break;
 8008388:	e0ac      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NWK_SKEY: {
            mibGet->Param.NwkSKey = LoRaMacNwkSKey;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a5d      	ldr	r2, [pc, #372]	; (8008504 <LoRaMacMibGetRequestConfirm+0x250>)
 800838e:	605a      	str	r2, [r3, #4]
            break;
 8008390:	e0a8      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_APP_SKEY: {
            mibGet->Param.AppSKey = LoRaMacAppSKey;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a5c      	ldr	r2, [pc, #368]	; (8008508 <LoRaMacMibGetRequestConfirm+0x254>)
 8008396:	605a      	str	r2, [r3, #4]
            break;
 8008398:	e0a4      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_PUBLIC_NETWORK: {
            mibGet->Param.EnablePublicNetwork = PublicNetwork;
 800839a:	4b5c      	ldr	r3, [pc, #368]	; (800850c <LoRaMacMibGetRequestConfirm+0x258>)
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	711a      	strb	r2, [r3, #4]
            break;
 80083a2:	e09f      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_REPEATER_SUPPORT: {
            mibGet->Param.EnableRepeaterSupport = LoRaMacParams.RepeaterSupport;
 80083a4:	4b5a      	ldr	r3, [pc, #360]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 80083a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	711a      	strb	r2, [r3, #4]
            break;
 80083ae:	e099      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS: {
            getPhy.Attribute = PHY_CHANNELS;
 80083b0:	2319      	movs	r3, #25
 80083b2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80083b4:	4b57      	ldr	r3, [pc, #348]	; (8008514 <LoRaMacMibGetRequestConfirm+0x260>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f107 0210 	add.w	r2, r7, #16
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fd5a 	bl	8009e78 <RegionGetPhyParam>
 80083c4:	4603      	mov	r3, r0
 80083c6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	605a      	str	r2, [r3, #4]
            break;
 80083ce:	e089      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RX2_CHANNEL: {
            mibGet->Param.Rx2Channel = LoRaMacParams.Rx2Channel;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a4f      	ldr	r2, [pc, #316]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 80083d4:	3304      	adds	r3, #4
 80083d6:	3224      	adds	r2, #36	; 0x24
 80083d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083dc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80083e0:	e080      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RX2_DEFAULT_CHANNEL: {
            mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a4c      	ldr	r2, [pc, #304]	; (8008518 <LoRaMacMibGetRequestConfirm+0x264>)
 80083e6:	3304      	adds	r3, #4
 80083e8:	3224      	adds	r2, #36	; 0x24
 80083ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083ee:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80083f2:	e077      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_MASK: {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80083f4:	2317      	movs	r3, #23
 80083f6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80083f8:	4b46      	ldr	r3, [pc, #280]	; (8008514 <LoRaMacMibGetRequestConfirm+0x260>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	f107 0210 	add.w	r2, r7, #16
 8008400:	4611      	mov	r1, r2
 8008402:	4618      	mov	r0, r3
 8008404:	f001 fd38 	bl	8009e78 <RegionGetPhyParam>
 8008408:	4603      	mov	r3, r0
 800840a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	605a      	str	r2, [r3, #4]
            break;
 8008412:	e067      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_MASK: {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8008414:	2316      	movs	r3, #22
 8008416:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008418:	4b3e      	ldr	r3, [pc, #248]	; (8008514 <LoRaMacMibGetRequestConfirm+0x260>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f107 0210 	add.w	r2, r7, #16
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f001 fd28 	bl	8009e78 <RegionGetPhyParam>
 8008428:	4603      	mov	r3, r0
 800842a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	605a      	str	r2, [r3, #4]
            break;
 8008432:	e057      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_NB_REP: {
            mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 8008434:	4b36      	ldr	r3, [pc, #216]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008436:	f893 2020 	ldrb.w	r2, [r3, #32]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	711a      	strb	r2, [r3, #4]
            break;
 800843e:	e051      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MAX_RX_WINDOW_DURATION: {
            mibGet->Param.MaxRxWindow = LoRaMacParams.MaxRxWindow;
 8008440:	4b33      	ldr	r3, [pc, #204]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	605a      	str	r2, [r3, #4]
            break;
 8008448:	e04c      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RECEIVE_DELAY_1: {
            mibGet->Param.ReceiveDelay1 = LoRaMacParams.ReceiveDelay1;
 800844a:	4b31      	ldr	r3, [pc, #196]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	605a      	str	r2, [r3, #4]
            break;
 8008452:	e047      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RECEIVE_DELAY_2: {
            mibGet->Param.ReceiveDelay2 = LoRaMacParams.ReceiveDelay2;
 8008454:	4b2e      	ldr	r3, [pc, #184]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	605a      	str	r2, [r3, #4]
            break;
 800845c:	e042      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_JOIN_ACCEPT_DELAY_1: {
            mibGet->Param.JoinAcceptDelay1 = LoRaMacParams.JoinAcceptDelay1;
 800845e:	4b2c      	ldr	r3, [pc, #176]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	605a      	str	r2, [r3, #4]
            break;
 8008466:	e03d      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_JOIN_ACCEPT_DELAY_2: {
            mibGet->Param.JoinAcceptDelay2 = LoRaMacParams.JoinAcceptDelay2;
 8008468:	4b29      	ldr	r3, [pc, #164]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	605a      	str	r2, [r3, #4]
            break;
 8008470:	e038      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE: {
            mibGet->Param.ChannelsDefaultDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8008472:	4b29      	ldr	r3, [pc, #164]	; (8008518 <LoRaMacMibGetRequestConfirm+0x264>)
 8008474:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	711a      	strb	r2, [r3, #4]
            break;
 800847c:	e032      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DATARATE: {
            mibGet->Param.ChannelsDatarate = LoRaMacParams.ChannelsDatarate;
 800847e:	4b24      	ldr	r3, [pc, #144]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008480:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	711a      	strb	r2, [r3, #4]
            break;
 8008488:	e02c      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER: {
            mibGet->Param.ChannelsDefaultTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 800848a:	4b23      	ldr	r3, [pc, #140]	; (8008518 <LoRaMacMibGetRequestConfirm+0x264>)
 800848c:	f993 2000 	ldrsb.w	r2, [r3]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	711a      	strb	r2, [r3, #4]
            break;
 8008494:	e026      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_TX_POWER: {
            mibGet->Param.ChannelsTxPower = LoRaMacParams.ChannelsTxPower;
 8008496:	4b1e      	ldr	r3, [pc, #120]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008498:	f993 2000 	ldrsb.w	r2, [r3]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	711a      	strb	r2, [r3, #4]
            break;
 80084a0:	e020      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_UPLINK_COUNTER: {
            mibGet->Param.UpLinkCounter = UpLinkCounter;
 80084a2:	4b1e      	ldr	r3, [pc, #120]	; (800851c <LoRaMacMibGetRequestConfirm+0x268>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]
            break;
 80084aa:	e01b      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_DOWNLINK_COUNTER: {
            mibGet->Param.DownLinkCounter = DownLinkCounter;
 80084ac:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <LoRaMacMibGetRequestConfirm+0x26c>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	605a      	str	r2, [r3, #4]
            break;
 80084b4:	e016      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MULTICAST_CHANNEL: {
            mibGet->Param.MulticastList = MulticastChannels;
 80084b6:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <LoRaMacMibGetRequestConfirm+0x270>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	605a      	str	r2, [r3, #4]
            break;
 80084be:	e011      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_SYSTEM_MAX_RX_ERROR: {
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 80084c0:	4b13      	ldr	r3, [pc, #76]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	605a      	str	r2, [r3, #4]
            break;
 80084c8:	e00c      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MIN_RX_SYMBOLS: {
            mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 80084ca:	4b11      	ldr	r3, [pc, #68]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 80084cc:	7a1a      	ldrb	r2, [r3, #8]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	711a      	strb	r2, [r3, #4]
            break;
 80084d2:	e007      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_ANTENNA_GAIN: {
            mibGet->Param.AntennaGain = LoRaMacParams.AntennaGain;
 80084d4:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <LoRaMacMibGetRequestConfirm+0x25c>)
 80084d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
            break;
 80084dc:	e002      	b.n	80084e4 <LoRaMacMibGetRequestConfirm+0x230>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80084de:	2302      	movs	r3, #2
 80084e0:	75fb      	strb	r3, [r7, #23]
            break;
 80084e2:	bf00      	nop
    }

    return status;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	2000014c 	.word	0x2000014c
 80084f4:	2000035d 	.word	0x2000035d
 80084f8:	2000035e 	.word	0x2000035e
 80084fc:	20000140 	.word	0x20000140
 8008500:	20000144 	.word	0x20000144
 8008504:	20000120 	.word	0x20000120
 8008508:	20000130 	.word	0x20000130
 800850c:	2000014d 	.word	0x2000014d
 8008510:	20000a70 	.word	0x20000a70
 8008514:	20000114 	.word	0x20000114
 8008518:	20000a14 	.word	0x20000a14
 800851c:	20000354 	.word	0x20000354
 8008520:	20000358 	.word	0x20000358
 8008524:	20000148 	.word	0x20000148

08008528 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b089      	sub	sp, #36	; 0x24
 800852c:	af02      	add	r7, sp, #8
 800852e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if ( mibSet == NULL ) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <LoRaMacMibSetRequestConfirm+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800853a:	2303      	movs	r3, #3
 800853c:	e235      	b.n	80089aa <LoRaMacMibSetRequestConfirm+0x482>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 800853e:	4bb1      	ldr	r3, [pc, #708]	; (8008804 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <LoRaMacMibSetRequestConfirm+0x26>
        return LORAMAC_STATUS_BUSY;
 800854a:	2301      	movs	r3, #1
 800854c:	e22d      	b.n	80089aa <LoRaMacMibSetRequestConfirm+0x482>
    }

    switch ( mibSet->Type ) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b1e      	cmp	r3, #30
 8008554:	f200 8220 	bhi.w	8008998 <LoRaMacMibSetRequestConfirm+0x470>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <LoRaMacMibSetRequestConfirm+0x38>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	080085dd 	.word	0x080085dd
 8008564:	080085ed 	.word	0x080085ed
 8008568:	080085f7 	.word	0x080085f7
 800856c:	08008601 	.word	0x08008601
 8008570:	0800860b 	.word	0x0800860b
 8008574:	08008615 	.word	0x08008615
 8008578:	08008633 	.word	0x08008633
 800857c:	08008651 	.word	0x08008651
 8008580:	08008667 	.word	0x08008667
 8008584:	08008999 	.word	0x08008999
 8008588:	08008673 	.word	0x08008673
 800858c:	08008747 	.word	0x08008747
 8008590:	080087b3 	.word	0x080087b3
 8008594:	08008785 	.word	0x08008785
 8008598:	080087e1 	.word	0x080087e1
 800859c:	0800884d 	.word	0x0800884d
 80085a0:	08008857 	.word	0x08008857
 80085a4:	08008861 	.word	0x08008861
 80085a8:	0800886b 	.word	0x0800886b
 80085ac:	08008875 	.word	0x08008875
 80085b0:	0800887f 	.word	0x0800887f
 80085b4:	080088ad 	.word	0x080088ad
 80085b8:	08008909 	.word	0x08008909
 80085bc:	080088db 	.word	0x080088db
 80085c0:	08008937 	.word	0x08008937
 80085c4:	08008941 	.word	0x08008941
 80085c8:	08008979 	.word	0x08008979
 80085cc:	08008989 	.word	0x08008989
 80085d0:	0800894b 	.word	0x0800894b
 80085d4:	0800895d 	.word	0x0800895d
 80085d8:	0800896f 	.word	0x0800896f
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	791b      	ldrb	r3, [r3, #4]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe f829 	bl	8006638 <SwitchClass>
 80085e6:	4603      	mov	r3, r0
 80085e8:	75fb      	strb	r3, [r7, #23]
            break;
 80085ea:	e1dd      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NETWORK_JOINED:
        {
            IsLoRaMacNetworkJoined = mibSet->Param.IsNetworkJoined;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	791a      	ldrb	r2, [r3, #4]
 80085f0:	4b85      	ldr	r3, [pc, #532]	; (8008808 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80085f2:	701a      	strb	r2, [r3, #0]
            break;
 80085f4:	e1d8      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_ADR: {
            AdrCtrlOn = mibSet->Param.AdrEnable;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	791a      	ldrb	r2, [r3, #4]
 80085fa:	4b84      	ldr	r3, [pc, #528]	; (800880c <LoRaMacMibSetRequestConfirm+0x2e4>)
 80085fc:	701a      	strb	r2, [r3, #0]
            break;
 80085fe:	e1d3      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NET_ID: {
            LoRaMacNetID = mibSet->Param.NetID;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	4a82      	ldr	r2, [pc, #520]	; (8008810 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8008606:	6013      	str	r3, [r2, #0]
            break;
 8008608:	e1ce      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_DEV_ADDR: {
            LoRaMacDevAddr = mibSet->Param.DevAddr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	4a81      	ldr	r2, [pc, #516]	; (8008814 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8008610:	6013      	str	r3, [r2, #0]
            break;
 8008612:	e1c9      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NWK_SKEY: {
            if ( mibSet->Param.NwkSKey != NULL ) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d007      	beq.n	800862c <LoRaMacMibSetRequestConfirm+0x104>
                memcpy1( LoRaMacNwkSKey, mibSet->Param.NwkSKey,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	2210      	movs	r2, #16
 8008622:	4619      	mov	r1, r3
 8008624:	487c      	ldr	r0, [pc, #496]	; (8008818 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8008626:	f008 fa06 	bl	8010a36 <memcpy1>
                         sizeof( LoRaMacNwkSKey ) );
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800862a:	e1bd      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800862c:	2303      	movs	r3, #3
 800862e:	75fb      	strb	r3, [r7, #23]
            break;
 8008630:	e1ba      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_APP_SKEY: {
            if ( mibSet->Param.AppSKey != NULL ) {
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d007      	beq.n	800864a <LoRaMacMibSetRequestConfirm+0x122>
                memcpy1( LoRaMacAppSKey, mibSet->Param.AppSKey,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2210      	movs	r2, #16
 8008640:	4619      	mov	r1, r3
 8008642:	4876      	ldr	r0, [pc, #472]	; (800881c <LoRaMacMibSetRequestConfirm+0x2f4>)
 8008644:	f008 f9f7 	bl	8010a36 <memcpy1>
                         sizeof( LoRaMacAppSKey ) );
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008648:	e1ae      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800864a:	2303      	movs	r3, #3
 800864c:	75fb      	strb	r3, [r7, #23]
            break;
 800864e:	e1ab      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_PUBLIC_NETWORK: {
            PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	791a      	ldrb	r2, [r3, #4]
 8008654:	4b72      	ldr	r3, [pc, #456]	; (8008820 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8008656:	701a      	strb	r2, [r3, #0]
            Radio.SetPublicNetwork(mibSet->Param.EnablePublicNetwork);
 8008658:	4b72      	ldr	r3, [pc, #456]	; (8008824 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800865a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	7912      	ldrb	r2, [r2, #4]
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
            break;
 8008664:	e1a0      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_REPEATER_SUPPORT: {
             LoRaMacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	791a      	ldrb	r2, [r3, #4]
 800866a:	4b6f      	ldr	r3, [pc, #444]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 800866c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            break;
 8008670:	e19a      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RX2_CHANNEL: {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7a1b      	ldrb	r3, [r3, #8]
 8008676:	b25b      	sxtb	r3, r3
 8008678:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800867a:	4b6b      	ldr	r3, [pc, #428]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 800867c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008680:	727b      	strb	r3, [r7, #9]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true ) {
 8008682:	4b6a      	ldr	r3, [pc, #424]	; (800882c <LoRaMacMibSetRequestConfirm+0x304>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f107 0108 	add.w	r1, r7, #8
 800868a:	2206      	movs	r2, #6
 800868c:	4618      	mov	r0, r3
 800868e:	f001 fc32 	bl	8009ef6 <RegionVerify>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d053      	beq.n	8008740 <LoRaMacMibSetRequestConfirm+0x218>
                memcpy(&LoRaMacParams.Rx2Channel, &mibSet->Param.Rx2Channel, sizeof(LoRaMacParams.Rx2Channel));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	2208      	movs	r2, #8
 800869e:	4619      	mov	r1, r3
 80086a0:	4863      	ldr	r0, [pc, #396]	; (8008830 <LoRaMacMibSetRequestConfirm+0x308>)
 80086a2:	f00a f8f3 	bl	801288c <memcpy>
                if ( ( LoRaMacDeviceClass == CLASS_C ) && ( IsLoRaMacNetworkJoined == true ) ) {
 80086a6:	4b63      	ldr	r3, [pc, #396]	; (8008834 <LoRaMacMibSetRequestConfirm+0x30c>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	f040 8177 	bne.w	800899e <LoRaMacMibSetRequestConfirm+0x476>
 80086b0:	4b55      	ldr	r3, [pc, #340]	; (8008808 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8172 	beq.w	800899e <LoRaMacMibSetRequestConfirm+0x476>
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 80086ba:	4b5c      	ldr	r3, [pc, #368]	; (800882c <LoRaMacMibSetRequestConfirm+0x304>)
 80086bc:	7818      	ldrb	r0, [r3, #0]
                                                     LoRaMacParams.Rx2Channel.Datarate,
 80086be:	4b5a      	ldr	r3, [pc, #360]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80086c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 80086c4:	b259      	sxtb	r1, r3
 80086c6:	4b58      	ldr	r3, [pc, #352]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80086c8:	7a1a      	ldrb	r2, [r3, #8]
 80086ca:	4b57      	ldr	r3, [pc, #348]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	4c5a      	ldr	r4, [pc, #360]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 80086d0:	9400      	str	r4, [sp, #0]
 80086d2:	f001 fc64 	bl	8009f9e <RegionComputeRxWindowParameters>
                                                     LoRaMacParams.MinRxSymbols,
                                                     LoRaMacParams.SystemMaxRxError,
                                                     &RxWindow2Config );

                    RxWindow2Config.Channel = Channel;
 80086d6:	4b59      	ldr	r3, [pc, #356]	; (800883c <LoRaMacMibSetRequestConfirm+0x314>)
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	4b57      	ldr	r3, [pc, #348]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 80086dc:	701a      	strb	r2, [r3, #0]
                    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 80086de:	4b52      	ldr	r3, [pc, #328]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	4a55      	ldr	r2, [pc, #340]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 80086e4:	6053      	str	r3, [r2, #4]
                    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80086e6:	4b50      	ldr	r3, [pc, #320]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80086e8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80086ec:	4b52      	ldr	r3, [pc, #328]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 80086ee:	741a      	strb	r2, [r3, #16]
                    RxWindow2Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 80086f0:	4b4d      	ldr	r3, [pc, #308]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80086f2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80086f6:	4b50      	ldr	r3, [pc, #320]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 80086f8:	745a      	strb	r2, [r3, #17]
                    RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80086fa:	4b4f      	ldr	r3, [pc, #316]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	74da      	strb	r2, [r3, #19]
                    RxWindow2Config.RxContinuous = true;
 8008700:	4b4d      	ldr	r3, [pc, #308]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 8008702:	2201      	movs	r2, #1
 8008704:	749a      	strb	r2, [r3, #18]

                    Radio.Sleep();
 8008706:	4b47      	ldr	r3, [pc, #284]	; (8008824 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	4798      	blx	r3
                    if ( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t * )&McpsIndication.RxDatarate ) == true ) {
 800870c:	4b47      	ldr	r3, [pc, #284]	; (800882c <LoRaMacMibSetRequestConfirm+0x304>)
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	4a4b      	ldr	r2, [pc, #300]	; (8008840 <LoRaMacMibSetRequestConfirm+0x318>)
 8008712:	4949      	ldr	r1, [pc, #292]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fc5c 	bl	8009fd2 <RegionRxConfig>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00c      	beq.n	800873a <LoRaMacMibSetRequestConfirm+0x212>
                        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8008720:	4b45      	ldr	r3, [pc, #276]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 8008722:	7c9b      	ldrb	r3, [r3, #18]
 8008724:	4a40      	ldr	r2, [pc, #256]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 8008726:	68d2      	ldr	r2, [r2, #12]
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f7fd ff68 	bl	8006600 <RxWindowSetup>
                        RxSlot = RxWindow2Config.RxSlot;
 8008730:	4b41      	ldr	r3, [pc, #260]	; (8008838 <LoRaMacMibSetRequestConfirm+0x310>)
 8008732:	7cda      	ldrb	r2, [r3, #19]
 8008734:	4b43      	ldr	r3, [pc, #268]	; (8008844 <LoRaMacMibSetRequestConfirm+0x31c>)
 8008736:	701a      	strb	r2, [r3, #0]
                    }
                }
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008738:	e131      	b.n	800899e <LoRaMacMibSetRequestConfirm+0x476>
                        status = LORAMAC_STATUS_PARAMETER_INVALID;
 800873a:	2303      	movs	r3, #3
 800873c:	75fb      	strb	r3, [r7, #23]
            break;
 800873e:	e12e      	b.n	800899e <LoRaMacMibSetRequestConfirm+0x476>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008740:	2303      	movs	r3, #3
 8008742:	75fb      	strb	r3, [r7, #23]
            break;
 8008744:	e12b      	b.n	800899e <LoRaMacMibSetRequestConfirm+0x476>
        }
        case MIB_RX2_DEFAULT_CHANNEL: {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	7a1b      	ldrb	r3, [r3, #8]
 800874a:	b25b      	sxtb	r3, r3
 800874c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800874e:	4b36      	ldr	r3, [pc, #216]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 8008750:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008754:	727b      	strb	r3, [r7, #9]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true ) {
 8008756:	4b35      	ldr	r3, [pc, #212]	; (800882c <LoRaMacMibSetRequestConfirm+0x304>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f107 0108 	add.w	r1, r7, #8
 800875e:	2206      	movs	r2, #6
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fbc8 	bl	8009ef6 <RegionVerify>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <LoRaMacMibSetRequestConfirm+0x256>
                LoRaMacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800876c:	4b36      	ldr	r3, [pc, #216]	; (8008848 <LoRaMacMibSetRequestConfirm+0x320>)
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	3324      	adds	r3, #36	; 0x24
 8008772:	3204      	adds	r2, #4
 8008774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008778:	e883 0003 	stmia.w	r3, {r0, r1}
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800877c:	e114      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800877e:	2303      	movs	r3, #3
 8008780:	75fb      	strb	r3, [r7, #23]
            break;
 8008782:	e111      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_MASK: {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800878a:	2301      	movs	r3, #1
 800878c:	743b      	strb	r3, [r7, #16]

            if ( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false ) {
 800878e:	4b27      	ldr	r3, [pc, #156]	; (800882c <LoRaMacMibSetRequestConfirm+0x304>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	f107 020c 	add.w	r2, r7, #12
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fbd5 	bl	8009f48 <RegionChanMaskSet>
 800879e:	4603      	mov	r3, r0
 80087a0:	f083 0301 	eor.w	r3, r3, #1
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80fb 	beq.w	80089a2 <LoRaMacMibSetRequestConfirm+0x47a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80087ac:	2303      	movs	r3, #3
 80087ae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80087b0:	e0f7      	b.n	80089a2 <LoRaMacMibSetRequestConfirm+0x47a>
        }
        case MIB_CHANNELS_MASK: {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	743b      	strb	r3, [r7, #16]

            if ( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false ) {
 80087bc:	4b1b      	ldr	r3, [pc, #108]	; (800882c <LoRaMacMibSetRequestConfirm+0x304>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	f107 020c 	add.w	r2, r7, #12
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 fbbe 	bl	8009f48 <RegionChanMaskSet>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f083 0301 	eor.w	r3, r3, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 80e6 	beq.w	80089a6 <LoRaMacMibSetRequestConfirm+0x47e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80087da:	2303      	movs	r3, #3
 80087dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80087de:	e0e2      	b.n	80089a6 <LoRaMacMibSetRequestConfirm+0x47e>
        }
        case MIB_CHANNELS_NB_REP: {
            if ( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	791b      	ldrb	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d009      	beq.n	80087fc <LoRaMacMibSetRequestConfirm+0x2d4>
                 ( mibSet->Param.ChannelNbRep <= 15 ) ) {
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	791b      	ldrb	r3, [r3, #4]
            if ( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 80087ec:	2b0f      	cmp	r3, #15
 80087ee:	d805      	bhi.n	80087fc <LoRaMacMibSetRequestConfirm+0x2d4>
                LoRaMacParams.ChannelsNbRep = mibSet->Param.ChannelNbRep;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	791a      	ldrb	r2, [r3, #4]
 80087f4:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <LoRaMacMibSetRequestConfirm+0x300>)
 80087f6:	f883 2020 	strb.w	r2, [r3, #32]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80087fa:	e0d5      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80087fc:	2303      	movs	r3, #3
 80087fe:	75fb      	strb	r3, [r7, #23]
            break;
 8008800:	e0d2      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
 8008802:	bf00      	nop
 8008804:	20000480 	.word	0x20000480
 8008808:	2000035d 	.word	0x2000035d
 800880c:	2000035e 	.word	0x2000035e
 8008810:	20000140 	.word	0x20000140
 8008814:	20000144 	.word	0x20000144
 8008818:	20000120 	.word	0x20000120
 800881c:	20000130 	.word	0x20000130
 8008820:	2000014d 	.word	0x2000014d
 8008824:	080130d4 	.word	0x080130d4
 8008828:	20000a70 	.word	0x20000a70
 800882c:	20000114 	.word	0x20000114
 8008830:	20000a94 	.word	0x20000a94
 8008834:	2000014c 	.word	0x2000014c
 8008838:	20000adc 	.word	0x20000adc
 800883c:	20000479 	.word	0x20000479
 8008840:	200009e4 	.word	0x200009e4
 8008844:	20000a6c 	.word	0x20000a6c
 8008848:	20000a14 	.word	0x20000a14
        }
        case MIB_MAX_RX_WINDOW_DURATION: {
            LoRaMacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4a58      	ldr	r2, [pc, #352]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008852:	60d3      	str	r3, [r2, #12]
            break;
 8008854:	e0a8      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RECEIVE_DELAY_1: {
            LoRaMacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4a56      	ldr	r2, [pc, #344]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800885c:	6113      	str	r3, [r2, #16]
            break;
 800885e:	e0a3      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RECEIVE_DELAY_2: {
            LoRaMacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	4a53      	ldr	r2, [pc, #332]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008866:	6153      	str	r3, [r2, #20]
            break;
 8008868:	e09e      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_JOIN_ACCEPT_DELAY_1: {
            LoRaMacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	4a51      	ldr	r2, [pc, #324]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008870:	6193      	str	r3, [r2, #24]
            break;
 8008872:	e099      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_JOIN_ACCEPT_DELAY_2: {
            LoRaMacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a4e      	ldr	r2, [pc, #312]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800887a:	61d3      	str	r3, [r2, #28]
            break;
 800887c:	e094      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE: {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008884:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_DR ) == true ) {
 8008886:	4b4c      	ldr	r3, [pc, #304]	; (80089b8 <LoRaMacMibSetRequestConfirm+0x490>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f107 0108 	add.w	r1, r7, #8
 800888e:	2205      	movs	r2, #5
 8008890:	4618      	mov	r0, r3
 8008892:	f001 fb30 	bl	8009ef6 <RegionVerify>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <LoRaMacMibSetRequestConfirm+0x37e>
                LoRaMacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800889c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80088a0:	4b46      	ldr	r3, [pc, #280]	; (80089bc <LoRaMacMibSetRequestConfirm+0x494>)
 80088a2:	705a      	strb	r2, [r3, #1]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80088a4:	e080      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80088a6:	2303      	movs	r3, #3
 80088a8:	75fb      	strb	r3, [r7, #23]
            break;
 80088aa:	e07d      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DATARATE: {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80088b2:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true ) {
 80088b4:	4b40      	ldr	r3, [pc, #256]	; (80089b8 <LoRaMacMibSetRequestConfirm+0x490>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f107 0108 	add.w	r1, r7, #8
 80088bc:	2204      	movs	r2, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fb19 	bl	8009ef6 <RegionVerify>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <LoRaMacMibSetRequestConfirm+0x3ac>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80088ca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80088ce:	4b39      	ldr	r3, [pc, #228]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 80088d0:	705a      	strb	r2, [r3, #1]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80088d2:	e069      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80088d4:	2303      	movs	r3, #3
 80088d6:	75fb      	strb	r3, [r7, #23]
            break;
 80088d8:	e066      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER: {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80088e0:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_POWER ) == true ) {
 80088e2:	4b35      	ldr	r3, [pc, #212]	; (80089b8 <LoRaMacMibSetRequestConfirm+0x490>)
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	f107 0108 	add.w	r1, r7, #8
 80088ea:	2208      	movs	r2, #8
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fb02 	bl	8009ef6 <RegionVerify>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <LoRaMacMibSetRequestConfirm+0x3da>
                LoRaMacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80088f8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80088fc:	4b2f      	ldr	r3, [pc, #188]	; (80089bc <LoRaMacMibSetRequestConfirm+0x494>)
 80088fe:	701a      	strb	r2, [r3, #0]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008900:	e052      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
            break;
 8008906:	e04f      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_TX_POWER: {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800890e:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_POWER ) == true ) {
 8008910:	4b29      	ldr	r3, [pc, #164]	; (80089b8 <LoRaMacMibSetRequestConfirm+0x490>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	2207      	movs	r2, #7
 800891a:	4618      	mov	r0, r3
 800891c:	f001 faeb 	bl	8009ef6 <RegionVerify>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d004      	beq.n	8008930 <LoRaMacMibSetRequestConfirm+0x408>
                LoRaMacParams.ChannelsTxPower = verify.TxPower;
 8008926:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800892a:	4b22      	ldr	r3, [pc, #136]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800892c:	701a      	strb	r2, [r3, #0]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800892e:	e03b      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008930:	2303      	movs	r3, #3
 8008932:	75fb      	strb	r3, [r7, #23]
            break;
 8008934:	e038      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_UPLINK_COUNTER: {
            UpLinkCounter = mibSet->Param.UpLinkCounter;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	4a21      	ldr	r2, [pc, #132]	; (80089c0 <LoRaMacMibSetRequestConfirm+0x498>)
 800893c:	6013      	str	r3, [r2, #0]
            break;
 800893e:	e033      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_DOWNLINK_COUNTER: {
            DownLinkCounter = mibSet->Param.DownLinkCounter;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	4a1f      	ldr	r2, [pc, #124]	; (80089c4 <LoRaMacMibSetRequestConfirm+0x49c>)
 8008946:	6013      	str	r3, [r2, #0]
            break;
 8008948:	e02e      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_SYSTEM_MAX_RX_ERROR: {
            LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4a1b      	ldr	r2, [pc, #108]	; (80089bc <LoRaMacMibSetRequestConfirm+0x494>)
 8008950:	6053      	str	r3, [r2, #4]
 8008952:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <LoRaMacMibSetRequestConfirm+0x494>)
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	4a17      	ldr	r2, [pc, #92]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008958:	6053      	str	r3, [r2, #4]
            break;
 800895a:	e025      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MIN_RX_SYMBOLS: {
            LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	791a      	ldrb	r2, [r3, #4]
 8008960:	4b16      	ldr	r3, [pc, #88]	; (80089bc <LoRaMacMibSetRequestConfirm+0x494>)
 8008962:	721a      	strb	r2, [r3, #8]
 8008964:	4b15      	ldr	r3, [pc, #84]	; (80089bc <LoRaMacMibSetRequestConfirm+0x494>)
 8008966:	7a1a      	ldrb	r2, [r3, #8]
 8008968:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800896a:	721a      	strb	r2, [r3, #8]
            break;
 800896c:	e01c      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_ANTENNA_GAIN: {
            LoRaMacParams.AntennaGain = mibSet->Param.AntennaGain;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	4a10      	ldr	r2, [pc, #64]	; (80089b4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008974:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8008976:	e017      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MULTICAST_CHANNEL: {
            status = LoRaMacMulticastChannelLink(mibSet->Param.MulticastList);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	f000 f84f 	bl	8008a20 <LoRaMacMulticastChannelLink>
 8008982:	4603      	mov	r3, r0
 8008984:	75fb      	strb	r3, [r7, #23]
            break;
 8008986:	e00f      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MULTICAST_CHANNEL_DEL: {
            status = LoRaMacMulticastChannelUnlink(mibSet->Param.MulticastList);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 f87f 	bl	8008a90 <LoRaMacMulticastChannelUnlink>
 8008992:	4603      	mov	r3, r0
 8008994:	75fb      	strb	r3, [r7, #23]
            break;
 8008996:	e007      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008998:	2302      	movs	r3, #2
 800899a:	75fb      	strb	r3, [r7, #23]
            break;
 800899c:	e004      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 800899e:	bf00      	nop
 80089a0:	e002      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 80089a2:	bf00      	nop
 80089a4:	e000      	b.n	80089a8 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 80089a6:	bf00      	nop
        }
    }

    return status;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	371c      	adds	r7, #28
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd90      	pop	{r4, r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20000a70 	.word	0x20000a70
 80089b8:	20000114 	.word	0x20000114
 80089bc:	20000a14 	.word	0x20000a14
 80089c0:	20000354 	.word	0x20000354
 80089c4:	20000358 	.word	0x20000358

080089c8 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4604      	mov	r4, r0
 80089d0:	4638      	mov	r0, r7
 80089d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80089d6:	4623      	mov	r3, r4
 80089d8:	73fb      	strb	r3, [r7, #15]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 80089da:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <LoRaMacChannelAdd+0x50>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d007      	beq.n	80089f6 <LoRaMacChannelAdd+0x2e>
        if ( ( LoRaMacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG ) {
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <LoRaMacChannelAdd+0x50>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0320 	and.w	r3, r3, #32
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <LoRaMacChannelAdd+0x2e>
            return LORAMAC_STATUS_BUSY;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e00c      	b.n	8008a10 <LoRaMacChannelAdd+0x48>
        }
    }

    channelAdd.NewChannel = &params;
 80089f6:	463b      	mov	r3, r7
 80089f8:	613b      	str	r3, [r7, #16]
    channelAdd.ChannelId = id;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	753b      	strb	r3, [r7, #20]

    return RegionChannelAdd( LoRaMacRegion, &channelAdd );
 80089fe:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <LoRaMacChannelAdd+0x54>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	f107 0210 	add.w	r2, r7, #16
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fbb1 	bl	800a170 <RegionChannelAdd>
 8008a0e:	4603      	mov	r3, r0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd90      	pop	{r4, r7, pc}
 8008a18:	20000480 	.word	0x20000480
 8008a1c:	20000114 	.word	0x20000114

08008a20 <LoRaMacMulticastChannelLink>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMulticastChannelLink( MulticastParams_t *channelParam )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
    if ( channelParam == NULL ) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <LoRaMacMulticastChannelLink+0x12>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e024      	b.n	8008a7c <LoRaMacMulticastChannelLink+0x5c>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <LoRaMacMulticastChannelLink+0x68>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <LoRaMacMulticastChannelLink+0x22>
        return LORAMAC_STATUS_BUSY;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e01c      	b.n	8008a7c <LoRaMacMulticastChannelLink+0x5c>
    }


    // Reset downlink counter
    channelParam->DownLinkCounter = 0;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	625a      	str	r2, [r3, #36]	; 0x24
    channelParam->Next = NULL;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	639a      	str	r2, [r3, #56]	; 0x38

    if ( MulticastChannels == NULL ) {
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <LoRaMacMulticastChannelLink+0x6c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d103      	bne.n	8008a5e <LoRaMacMulticastChannelLink+0x3e>
        // New node is the fist element
        MulticastChannels = channelParam;
 8008a56:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <LoRaMacMulticastChannelLink+0x6c>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	e00d      	b.n	8008a7a <LoRaMacMulticastChannelLink+0x5a>
    } else {
        MulticastParams_t *cur = MulticastChannels;
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <LoRaMacMulticastChannelLink+0x6c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]

        // Search the last node in the list
        while ( cur->Next != NULL ) {
 8008a64:	e002      	b.n	8008a6c <LoRaMacMulticastChannelLink+0x4c>
            cur = cur->Next;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	60fb      	str	r3, [r7, #12]
        while ( cur->Next != NULL ) {
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1f8      	bne.n	8008a66 <LoRaMacMulticastChannelLink+0x46>
        }
        // This function always finds the last node
        cur->Next = channelParam;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
    }

    return LORAMAC_STATUS_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	20000480 	.word	0x20000480
 8008a8c:	20000148 	.word	0x20000148

08008a90 <LoRaMacMulticastChannelUnlink>:

LoRaMacStatus_t LoRaMacMulticastChannelUnlink( MulticastParams_t *channelParam )
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    if ( channelParam == NULL ) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <LoRaMacMulticastChannelUnlink+0x12>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e031      	b.n	8008b06 <LoRaMacMulticastChannelUnlink+0x76>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 8008aa2:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <LoRaMacMulticastChannelUnlink+0x80>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <LoRaMacMulticastChannelUnlink+0x22>
        return LORAMAC_STATUS_BUSY;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e029      	b.n	8008b06 <LoRaMacMulticastChannelUnlink+0x76>
    }

    if ( MulticastChannels != NULL ) {
 8008ab2:	4b18      	ldr	r3, [pc, #96]	; (8008b14 <LoRaMacMulticastChannelUnlink+0x84>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d024      	beq.n	8008b04 <LoRaMacMulticastChannelUnlink+0x74>
        if ( MulticastChannels == channelParam ) {
 8008aba:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <LoRaMacMulticastChannelUnlink+0x84>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d104      	bne.n	8008ace <LoRaMacMulticastChannelUnlink+0x3e>
            // First element
            MulticastChannels = channelParam->Next;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <LoRaMacMulticastChannelUnlink+0x84>)
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	e017      	b.n	8008afe <LoRaMacMulticastChannelUnlink+0x6e>
        } else {
            MulticastParams_t *cur = MulticastChannels;
 8008ace:	4b11      	ldr	r3, [pc, #68]	; (8008b14 <LoRaMacMulticastChannelUnlink+0x84>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]

            // Search the node in the list
            while ( cur->Next && cur->Next != channelParam ) {
 8008ad4:	e002      	b.n	8008adc <LoRaMacMulticastChannelUnlink+0x4c>
                cur = cur->Next;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	60fb      	str	r3, [r7, #12]
            while ( cur->Next && cur->Next != channelParam ) {
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <LoRaMacMulticastChannelUnlink+0x5e>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d1f3      	bne.n	8008ad6 <LoRaMacMulticastChannelUnlink+0x46>
            }
            // If we found the node, remove it
            if ( cur->Next ) {
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <LoRaMacMulticastChannelUnlink+0x6e>
                cur->Next = channelParam->Next;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
            }
        }
        channelParam->Next = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	639a      	str	r2, [r3, #56]	; 0x38
    }

    return LORAMAC_STATUS_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr
 8008b10:	20000480 	.word	0x20000480
 8008b14:	20000148 	.word	0x20000148

08008b18 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008b20:	2302      	movs	r3, #2
 8008b22:	77fb      	strb	r3, [r7, #31]
    MlmeConfirmQueue_t queueElement;
    AlternateDrParams_t altDr;
    VerifyParams_t verify;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    if ( mlmeRequest == NULL ) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <LoRaMacMlmeRequest+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e0f6      	b.n	8008d1c <LoRaMacMlmeRequest+0x204>
    }
    if( LoRaMacState != LORAMAC_IDLE )
 8008b2e:	4b7d      	ldr	r3, [pc, #500]	; (8008d24 <LoRaMacMlmeRequest+0x20c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e0f0      	b.n	8008d1c <LoRaMacMlmeRequest+0x204>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8008b3a:	f000 fbe3 	bl	8009304 <LoRaMacConfirmQueueIsFull>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0e9      	b.n	8008d1c <LoRaMacMlmeRequest+0x204>
    }

    switch ( mlmeRequest->Type ) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	f200 80d1 	bhi.w	8008cf4 <LoRaMacMlmeRequest+0x1dc>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <LoRaMacMlmeRequest+0x40>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b69 	.word	0x08008b69
 8008b5c:	08008c57 	.word	0x08008c57
 8008b60:	08008c89 	.word	0x08008c89
 8008b64:	08008cbb 	.word	0x08008cbb
        case MLME_JOIN: {
            if ( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d007      	beq.n	8008b80 <LoRaMacMlmeRequest+0x68>
                 ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
            if ( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <LoRaMacMlmeRequest+0x68>
                 ( mlmeRequest->Req.Join.AppKey == NULL ) )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	68db      	ldr	r3, [r3, #12]
                 ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <LoRaMacMlmeRequest+0x6c>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e0cb      	b.n	8008d1c <LoRaMacMlmeRequest+0x204>
            }
            // Verify the parameter NbTrials for the join procedure
            verify.NbJoinTrials = mlmeRequest->Req.Join.NbTrials;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7c1b      	ldrb	r3, [r3, #16]
 8008b88:	743b      	strb	r3, [r7, #16]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_NB_JOIN_TRIALS ) == false ) {
 8008b8a:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <LoRaMacMlmeRequest+0x210>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	f107 0110 	add.w	r1, r7, #16
 8008b92:	2231      	movs	r2, #49	; 0x31
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f9ae 	bl	8009ef6 <RegionVerify>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f083 0301 	eor.w	r3, r3, #1
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00f      	beq.n	8008bc6 <LoRaMacMlmeRequest+0xae>
                // Value not supported, get default
                getPhy.Attribute = PHY_DEF_NB_JOIN_TRIALS;
 8008ba6:	2332      	movs	r3, #50	; 0x32
 8008ba8:	733b      	strb	r3, [r7, #12]
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008baa:	4b5f      	ldr	r3, [pc, #380]	; (8008d28 <LoRaMacMlmeRequest+0x210>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f107 020c 	add.w	r2, r7, #12
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 f95f 	bl	8009e78 <RegionGetPhyParam>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	60bb      	str	r3, [r7, #8]
                mlmeRequest->Req.Join.NbTrials = ( uint8_t ) phyParam.Value;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	741a      	strb	r2, [r3, #16]
            }

            LoRaMacFlags.Bits.MlmeReq = 1;
 8008bc6:	4a59      	ldr	r2, [pc, #356]	; (8008d2c <LoRaMacMlmeRequest+0x214>)
 8008bc8:	7813      	ldrb	r3, [r2, #0]
 8008bca:	f043 0308 	orr.w	r3, r3, #8
 8008bce:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	763b      	strb	r3, [r7, #24]

            LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	4a55      	ldr	r2, [pc, #340]	; (8008d30 <LoRaMacMlmeRequest+0x218>)
 8008bdc:	6013      	str	r3, [r2, #0]
            LoRaMacAppEui = mlmeRequest->Req.Join.AppEui;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	4a54      	ldr	r2, [pc, #336]	; (8008d34 <LoRaMacMlmeRequest+0x21c>)
 8008be4:	6013      	str	r3, [r2, #0]
            LoRaMacAppKey = mlmeRequest->Req.Join.AppKey;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	4a53      	ldr	r2, [pc, #332]	; (8008d38 <LoRaMacMlmeRequest+0x220>)
 8008bec:	6013      	str	r3, [r2, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8008bee:	2307      	movs	r3, #7
 8008bf0:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008bf6:	f107 0318 	add.w	r3, r7, #24
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fa12 	bl	8009024 <LoRaMacConfirmQueueAdd>
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7c1a      	ldrb	r2, [r3, #16]
 8008c04:	4b4d      	ldr	r3, [pc, #308]	; (8008d3c <LoRaMacMlmeRequest+0x224>)
 8008c06:	701a      	strb	r2, [r3, #0]

            // Reset variable JoinRequestTrials
            JoinRequestTrials = 0;
 8008c08:	4b4d      	ldr	r3, [pc, #308]	; (8008d40 <LoRaMacMlmeRequest+0x228>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	701a      	strb	r2, [r3, #0]

            // Setup header information
            macHdr.Value = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	773b      	strb	r3, [r7, #28]
            macHdr.Bits.MType  = FRAME_TYPE_JOIN_REQ;
 8008c12:	7f3b      	ldrb	r3, [r7, #28]
 8008c14:	f36f 1347 	bfc	r3, #5, #3
 8008c18:	773b      	strb	r3, [r7, #28]
            ResetMacParameters( );
 8008c1a:	f7fe fc29 	bl	8007470 <ResetMacParameters>
            altDr.NbTrials = JoinRequestTrials + 1;
 8008c1e:	4b48      	ldr	r3, [pc, #288]	; (8008d40 <LoRaMacMlmeRequest+0x228>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3301      	adds	r3, #1
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	82bb      	strh	r3, [r7, #20]
            LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8008c2a:	4b3f      	ldr	r3, [pc, #252]	; (8008d28 <LoRaMacMlmeRequest+0x210>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f107 0214 	add.w	r2, r7, #20
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f001 fa5e 	bl	800a0f6 <RegionAlternateDr>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	4b41      	ldr	r3, [pc, #260]	; (8008d44 <LoRaMacMlmeRequest+0x22c>)
 8008c40:	705a      	strb	r2, [r3, #1]
            status = Send( &macHdr, 0, NULL, 0 );
 8008c42:	f107 001c 	add.w	r0, r7, #28
 8008c46:	2300      	movs	r3, #0
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	f7fe fa96 	bl	800717c <Send>
 8008c50:	4603      	mov	r3, r0
 8008c52:	77fb      	strb	r3, [r7, #31]
            break;
 8008c54:	e04f      	b.n	8008cf6 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_LINK_CHECK: {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 8008c56:	4a35      	ldr	r2, [pc, #212]	; (8008d2c <LoRaMacMlmeRequest+0x214>)
 8008c58:	7813      	ldrb	r3, [r2, #0]
 8008c5a:	f043 0308 	orr.w	r3, r3, #8
 8008c5e:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008c6e:	f107 0318 	add.w	r3, r7, #24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f9d6 	bl	8009024 <LoRaMacConfirmQueueAdd>

            // LoRaMac will send this command piggy-pack
            status = AddMacCommand( MOTE_MAC_LINK_CHECK_REQ, 0, 0 );
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	2002      	movs	r0, #2
 8008c7e:	f7fd fd99 	bl	80067b4 <AddMacCommand>
 8008c82:	4603      	mov	r3, r0
 8008c84:	77fb      	strb	r3, [r7, #31]
            break;
 8008c86:	e036      	b.n	8008cf6 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_TXCW: {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 8008c88:	4a28      	ldr	r2, [pc, #160]	; (8008d2c <LoRaMacMlmeRequest+0x214>)
 8008c8a:	7813      	ldrb	r3, [r2, #0]
 8008c8c:	f043 0308 	orr.w	r3, r3, #8
 8008c90:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008ca0:	f107 0318 	add.w	r3, r7, #24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f9bd 	bl	8009024 <LoRaMacConfirmQueueAdd>

            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	889b      	ldrh	r3, [r3, #4]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fffa 	bl	8007ca8 <SetTxContinuousWave>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	77fb      	strb	r3, [r7, #31]
            break;
 8008cb8:	e01d      	b.n	8008cf6 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_TXCW_1:
        {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 8008cba:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <LoRaMacMlmeRequest+0x214>)
 8008cbc:	7813      	ldrb	r3, [r2, #0]
 8008cbe:	f043 0308 	orr.w	r3, r3, #8
 8008cc2:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008cd2:	f107 0318 	add.w	r3, r7, #24
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f9a4 	bl	8009024 <LoRaMacConfirmQueueAdd>

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	8898      	ldrh	r0, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6899      	ldr	r1, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7b1b      	ldrb	r3, [r3, #12]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f7ff f81b 	bl	8007d24 <SetTxContinuousWave1>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	77fb      	strb	r3, [r7, #31]
            break;
 8008cf2:	e000      	b.n	8008cf6 <LoRaMacMlmeRequest+0x1de>
        }
        default:
            break;
 8008cf4:	bf00      	nop
    }
    if ( status != LORAMAC_STATUS_OK ) {
 8008cf6:	7ffb      	ldrb	r3, [r7, #31]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00e      	beq.n	8008d1a <LoRaMacMlmeRequest+0x202>
        NodeAckRequested = false;
 8008cfc:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <LoRaMacMlmeRequest+0x230>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
        LoRaMacConfirmQueueRemoveLast( );
 8008d02:	f000 f9c3 	bl	800908c <LoRaMacConfirmQueueRemoveLast>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8008d06:	f000 faf3 	bl	80092f0 <LoRaMacConfirmQueueGetCnt>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d104      	bne.n	8008d1a <LoRaMacMlmeRequest+0x202>
        {
            LoRaMacFlags.Bits.MlmeReq = 0;
 8008d10:	4a06      	ldr	r2, [pc, #24]	; (8008d2c <LoRaMacMlmeRequest+0x214>)
 8008d12:	7813      	ldrb	r3, [r2, #0]
 8008d14:	f36f 03c3 	bfc	r3, #3, #1
 8008d18:	7013      	strb	r3, [r2, #0]
        }
    }
    return status;
 8008d1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000480 	.word	0x20000480
 8008d28:	20000114 	.word	0x20000114
 8008d2c:	20000a10 	.word	0x20000a10
 8008d30:	20000118 	.word	0x20000118
 8008d34:	2000011c 	.word	0x2000011c
 8008d38:	20000ac4 	.word	0x20000ac4
 8008d3c:	200009b4 	.word	0x200009b4
 8008d40:	20000a0c 	.word	0x20000a0c
 8008d44:	20000a70 	.word	0x20000a70
 8008d48:	20000364 	.word	0x20000364

08008d4c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b08a      	sub	sp, #40	; 0x28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008d54:	2302      	movs	r3, #2
 8008d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void *fBuffer;
    uint16_t fBufferSize;
    int8_t datarate;
    bool readyToSend = false;
 8008d60:	2300      	movs	r3, #0
 8008d62:	773b      	strb	r3, [r7, #28]

    if ( mcpsRequest == NULL ) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e0ce      	b.n	8008f0c <LoRaMacMcpsRequest+0x1c0>
    }
    if ( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 8008d6e:	4b69      	ldr	r3, [pc, #420]	; (8008f14 <LoRaMacMcpsRequest+0x1c8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <LoRaMacMcpsRequest+0x3a>
         ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED ) ) {
 8008d7a:	4b66      	ldr	r3, [pc, #408]	; (8008f14 <LoRaMacMcpsRequest+0x1c8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
    if ( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <LoRaMacMcpsRequest+0x3e>
        return LORAMAC_STATUS_BUSY;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e0c0      	b.n	8008f0c <LoRaMacMcpsRequest+0x1c0>
    }

    macHdr.Value = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	743b      	strb	r3, [r7, #16]
    memset1 ( ( uint8_t * ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 8008d8e:	2214      	movs	r2, #20
 8008d90:	2100      	movs	r1, #0
 8008d92:	4861      	ldr	r0, [pc, #388]	; (8008f18 <LoRaMacMcpsRequest+0x1cc>)
 8008d94:	f007 fe8a 	bl	8010aac <memset1>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d98:	4b5f      	ldr	r3, [pc, #380]	; (8008f18 <LoRaMacMcpsRequest+0x1cc>)
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	705a      	strb	r2, [r3, #1]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    AckTimeoutRetriesCounter = 1;
 8008d9e:	4b5f      	ldr	r3, [pc, #380]	; (8008f1c <LoRaMacMcpsRequest+0x1d0>)
 8008da0:	2201      	movs	r2, #1
 8008da2:	701a      	strb	r2, [r3, #0]

    switch ( mcpsRequest->Type ) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d037      	beq.n	8008e1c <LoRaMacMcpsRequest+0xd0>
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	dc48      	bgt.n	8008e42 <LoRaMacMcpsRequest+0xf6>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <LoRaMacMcpsRequest+0x6e>
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d018      	beq.n	8008dea <LoRaMacMcpsRequest+0x9e>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8008db8:	e043      	b.n	8008e42 <LoRaMacMcpsRequest+0xf6>
            readyToSend = true;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = 1;
 8008dbe:	4b58      	ldr	r3, [pc, #352]	; (8008f20 <LoRaMacMcpsRequest+0x1d4>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8008dc4:	7c3b      	ldrb	r3, [r7, #16]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f362 1347 	bfi	r3, r2, #5, #3
 8008dcc:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	899b      	ldrh	r3, [r3, #12]
 8008de0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	7b9b      	ldrb	r3, [r3, #14]
 8008de6:	777b      	strb	r3, [r7, #29]
            break;
 8008de8:	e02c      	b.n	8008e44 <LoRaMacMcpsRequest+0xf8>
            readyToSend = true;
 8008dea:	2301      	movs	r3, #1
 8008dec:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7bda      	ldrb	r2, [r3, #15]
 8008df2:	4b4b      	ldr	r3, [pc, #300]	; (8008f20 <LoRaMacMcpsRequest+0x1d4>)
 8008df4:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8008df6:	7c3b      	ldrb	r3, [r7, #16]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	f362 1347 	bfi	r3, r2, #5, #3
 8008dfe:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	791b      	ldrb	r3, [r3, #4]
 8008e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	899b      	ldrh	r3, [r3, #12]
 8008e12:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7b9b      	ldrb	r3, [r3, #14]
 8008e18:	777b      	strb	r3, [r7, #29]
            break;
 8008e1a:	e013      	b.n	8008e44 <LoRaMacMcpsRequest+0xf8>
            readyToSend = true;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = 1;
 8008e20:	4b3f      	ldr	r3, [pc, #252]	; (8008f20 <LoRaMacMcpsRequest+0x1d4>)
 8008e22:	2201      	movs	r2, #1
 8008e24:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8008e26:	7c3b      	ldrb	r3, [r7, #16]
 8008e28:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8008e2c:	743b      	strb	r3, [r7, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	891b      	ldrh	r3, [r3, #8]
 8008e38:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	7a9b      	ldrb	r3, [r3, #10]
 8008e3e:	777b      	strb	r3, [r7, #29]
            break;
 8008e40:	e000      	b.n	8008e44 <LoRaMacMcpsRequest+0xf8>
            break;
 8008e42:	bf00      	nop
    }

    // Filter fPorts
    if( IsFPortAllowed( fPort ) == false )
 8008e44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7fe fbb5 	bl	80075b8 <IsFPortAllowed>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f083 0301 	eor.w	r3, r3, #1
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <LoRaMacMcpsRequest+0x112>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e056      	b.n	8008f0c <LoRaMacMcpsRequest+0x1c0>
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	763b      	strb	r3, [r7, #24]
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008e62:	4b30      	ldr	r3, [pc, #192]	; (8008f24 <LoRaMacMcpsRequest+0x1d8>)
 8008e64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008e68:	76bb      	strb	r3, [r7, #26]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008e6a:	4b2f      	ldr	r3, [pc, #188]	; (8008f28 <LoRaMacMcpsRequest+0x1dc>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f107 0218 	add.w	r2, r7, #24
 8008e72:	4611      	mov	r1, r2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 ffff 	bl	8009e78 <RegionGetPhyParam>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	617b      	str	r3, [r7, #20]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, phyParam.Value );
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008e84:	4293      	cmp	r3, r2
 8008e86:	bf38      	it	cc
 8008e88:	4613      	movcc	r3, r2
 8008e8a:	777b      	strb	r3, [r7, #29]

    if ( readyToSend == true ) {
 8008e8c:	7f3b      	ldrb	r3, [r7, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d03a      	beq.n	8008f08 <LoRaMacMcpsRequest+0x1bc>
        if ( AdrCtrlOn == false ) {
 8008e92:	4b26      	ldr	r3, [pc, #152]	; (8008f2c <LoRaMacMcpsRequest+0x1e0>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	f083 0301 	eor.w	r3, r3, #1
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d017      	beq.n	8008ed0 <LoRaMacMcpsRequest+0x184>
            verify.DatarateParams.Datarate = datarate;
 8008ea0:	7f7b      	ldrb	r3, [r7, #29]
 8008ea2:	733b      	strb	r3, [r7, #12]
            verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008ea4:	4b1f      	ldr	r3, [pc, #124]	; (8008f24 <LoRaMacMcpsRequest+0x1d8>)
 8008ea6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008eaa:	73bb      	strb	r3, [r7, #14]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true ) {
 8008eac:	4b1e      	ldr	r3, [pc, #120]	; (8008f28 <LoRaMacMcpsRequest+0x1dc>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f107 010c 	add.w	r1, r7, #12
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 f81d 	bl	8009ef6 <RegionVerify>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <LoRaMacMcpsRequest+0x180>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008ec2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8008ec6:	4b17      	ldr	r3, [pc, #92]	; (8008f24 <LoRaMacMcpsRequest+0x1d8>)
 8008ec8:	705a      	strb	r2, [r3, #1]
 8008eca:	e001      	b.n	8008ed0 <LoRaMacMcpsRequest+0x184>
            } else {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e01d      	b.n	8008f0c <LoRaMacMcpsRequest+0x1c0>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8008ed0:	8bfb      	ldrh	r3, [r7, #30]
 8008ed2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008ed6:	f107 0010 	add.w	r0, r7, #16
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	f7fe f94e 	bl	800717c <Send>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ( status == LORAMAC_STATUS_OK ) {
 8008ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <LoRaMacMcpsRequest+0x1b6>
            McpsConfirm.McpsRequest = mcpsRequest->Type;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	781a      	ldrb	r2, [r3, #0]
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <LoRaMacMcpsRequest+0x1cc>)
 8008ef4:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.McpsReq = 1;
 8008ef6:	4a0e      	ldr	r2, [pc, #56]	; (8008f30 <LoRaMacMcpsRequest+0x1e4>)
 8008ef8:	7813      	ldrb	r3, [r2, #0]
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	7013      	strb	r3, [r2, #0]
 8008f00:	e002      	b.n	8008f08 <LoRaMacMcpsRequest+0x1bc>
        } else {
            NodeAckRequested = false;
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <LoRaMacMcpsRequest+0x1e8>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
        }
    }

    return status;
 8008f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3728      	adds	r7, #40	; 0x28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	20000480 	.word	0x20000480
 8008f18:	200009b8 	.word	0x200009b8
 8008f1c:	2000000a 	.word	0x2000000a
 8008f20:	20000009 	.word	0x20000009
 8008f24:	20000a70 	.word	0x20000a70
 8008f28:	20000114 	.word	0x20000114
 8008f2c:	2000035e 	.word	0x2000035e
 8008f30:	20000a10 	.word	0x20000a10
 8008f34:	20000364 	.word	0x20000364

08008f38 <IncreaseBufferPointer>:
 */
LoRaMacEventInfoStatus_t CommonStatus;


static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <IncreaseBufferPointer+0x28>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d102      	bne.n	8008f4e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = MlmeConfirmQueue;
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <IncreaseBufferPointer+0x2c>)
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e002      	b.n	8008f54 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8008f54:	687b      	ldr	r3, [r7, #4]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr
 8008f60:	200004d8 	.word	0x200004d8
 8008f64:	200004c8 	.word	0x200004c8

08008f68 <DecreaseBufferPointer>:

static MlmeConfirmQueue_t* DecreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == MlmeConfirmQueue )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a07      	ldr	r2, [pc, #28]	; (8008f90 <DecreaseBufferPointer+0x28>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d102      	bne.n	8008f7e <DecreaseBufferPointer+0x16>
    {
        // Reset to the last element
        bufferPointer = &MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1];
 8008f78:	4b06      	ldr	r3, [pc, #24]	; (8008f94 <DecreaseBufferPointer+0x2c>)
 8008f7a:	607b      	str	r3, [r7, #4]
 8008f7c:	e002      	b.n	8008f84 <DecreaseBufferPointer+0x1c>
    }
    else
    {
        bufferPointer--;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3b04      	subs	r3, #4
 8008f82:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8008f84:	687b      	ldr	r3, [r7, #4]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr
 8008f90:	200004c8 	.word	0x200004c8
 8008f94:	200004d8 	.word	0x200004d8

08008f98 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	617b      	str	r3, [r7, #20]

    do
    {
        if( element->Request == request )
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	7bfa      	ldrb	r2, [r7, #15]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d101      	bne.n	8008fb8 <GetElement+0x20>
        {
            // We have found the element
            return element;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	e008      	b.n	8008fca <GetElement+0x32>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 8008fb8:	6978      	ldr	r0, [r7, #20]
 8008fba:	f7ff ffbd 	bl	8008f38 <IncreaseBufferPointer>
 8008fbe:	6178      	str	r0, [r7, #20]
        }
    }while( element != bufferEnd );
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d1f0      	bne.n	8008faa <GetElement+0x12>

    return NULL;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <LoRaMacConfirmQueueInit>:


void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
    Primitives = primitives;
 8008fdc:	4a0b      	ldr	r2, [pc, #44]	; (800900c <LoRaMacConfirmQueueInit+0x38>)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6013      	str	r3, [r2, #0]

    // Init counter
    MlmeConfirmQueueCnt = 0;
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <LoRaMacConfirmQueueInit+0x3c>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]

    // Init buffer
    BufferStart = MlmeConfirmQueue;
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <LoRaMacConfirmQueueInit+0x40>)
 8008fea:	4a0b      	ldr	r2, [pc, #44]	; (8009018 <LoRaMacConfirmQueueInit+0x44>)
 8008fec:	601a      	str	r2, [r3, #0]
    BufferEnd = MlmeConfirmQueue;
 8008fee:	4b0b      	ldr	r3, [pc, #44]	; (800901c <LoRaMacConfirmQueueInit+0x48>)
 8008ff0:	4a09      	ldr	r2, [pc, #36]	; (8009018 <LoRaMacConfirmQueueInit+0x44>)
 8008ff2:	601a      	str	r2, [r3, #0]

    memset1( (uint8_t*) MlmeConfirmQueue, 0xFF, sizeof( MlmeConfirmQueue ) );
 8008ff4:	2214      	movs	r2, #20
 8008ff6:	21ff      	movs	r1, #255	; 0xff
 8008ff8:	4807      	ldr	r0, [pc, #28]	; (8009018 <LoRaMacConfirmQueueInit+0x44>)
 8008ffa:	f007 fd57 	bl	8010aac <memset1>

    // Common status
    CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ffe:	4b08      	ldr	r3, [pc, #32]	; (8009020 <LoRaMacConfirmQueueInit+0x4c>)
 8009000:	2201      	movs	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	200004c4 	.word	0x200004c4
 8009010:	200004dc 	.word	0x200004dc
 8009014:	20000af8 	.word	0x20000af8
 8009018:	200004c8 	.word	0x200004c8
 800901c:	20000afc 	.word	0x20000afc
 8009020:	20000af4 	.word	0x20000af4

08009024 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
    if( MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800902c:	4b15      	ldr	r3, [pc, #84]	; (8009084 <LoRaMacConfirmQueueAdd+0x60>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b04      	cmp	r3, #4
 8009032:	d901      	bls.n	8009038 <LoRaMacConfirmQueueAdd+0x14>
    {
        // Protect the buffer against overwrites
        return false;
 8009034:	2300      	movs	r3, #0
 8009036:	e021      	b.n	800907c <LoRaMacConfirmQueueAdd+0x58>
    }

    // Add the element to the ring buffer
    BufferEnd->Request = mlmeConfirm->Request;
 8009038:	4b13      	ldr	r3, [pc, #76]	; (8009088 <LoRaMacConfirmQueueAdd+0x64>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	701a      	strb	r2, [r3, #0]
    BufferEnd->Status = mlmeConfirm->Status;
 8009042:	4b11      	ldr	r3, [pc, #68]	; (8009088 <LoRaMacConfirmQueueAdd+0x64>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	7852      	ldrb	r2, [r2, #1]
 800904a:	705a      	strb	r2, [r3, #1]
    BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800904c:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <LoRaMacConfirmQueueAdd+0x64>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	78d2      	ldrb	r2, [r2, #3]
 8009054:	70da      	strb	r2, [r3, #3]
    BufferEnd->ReadyToHandle = false;
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <LoRaMacConfirmQueueAdd+0x64>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	709a      	strb	r2, [r3, #2]
    // Increase counter
    MlmeConfirmQueueCnt++;
 800905e:	4b09      	ldr	r3, [pc, #36]	; (8009084 <LoRaMacConfirmQueueAdd+0x60>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	b2da      	uxtb	r2, r3
 8009066:	4b07      	ldr	r3, [pc, #28]	; (8009084 <LoRaMacConfirmQueueAdd+0x60>)
 8009068:	701a      	strb	r2, [r3, #0]
    // Update end pointer
    BufferEnd = IncreaseBufferPointer( BufferEnd );
 800906a:	4b07      	ldr	r3, [pc, #28]	; (8009088 <LoRaMacConfirmQueueAdd+0x64>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff ff62 	bl	8008f38 <IncreaseBufferPointer>
 8009074:	4603      	mov	r3, r0
 8009076:	4a04      	ldr	r2, [pc, #16]	; (8009088 <LoRaMacConfirmQueueAdd+0x64>)
 8009078:	6013      	str	r3, [r2, #0]

    return true;
 800907a:	2301      	movs	r3, #1
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200004dc 	.word	0x200004dc
 8009088:	20000afc 	.word	0x20000afc

0800908c <LoRaMacConfirmQueueRemoveLast>:

bool LoRaMacConfirmQueueRemoveLast( void )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt == 0 )
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <LoRaMacConfirmQueueRemoveLast+0x34>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <LoRaMacConfirmQueueRemoveLast+0x10>
    {
        return false;
 8009098:	2300      	movs	r3, #0
 800909a:	e00e      	b.n	80090ba <LoRaMacConfirmQueueRemoveLast+0x2e>
    }

    // Increase counter
    MlmeConfirmQueueCnt--;
 800909c:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <LoRaMacConfirmQueueRemoveLast+0x34>)
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <LoRaMacConfirmQueueRemoveLast+0x34>)
 80090a6:	701a      	strb	r2, [r3, #0]
    // Update start pointer
    BufferEnd = DecreaseBufferPointer( BufferEnd );
 80090a8:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <LoRaMacConfirmQueueRemoveLast+0x38>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff ff5b 	bl	8008f68 <DecreaseBufferPointer>
 80090b2:	4603      	mov	r3, r0
 80090b4:	4a03      	ldr	r2, [pc, #12]	; (80090c4 <LoRaMacConfirmQueueRemoveLast+0x38>)
 80090b6:	6013      	str	r3, [r2, #0]

    return true;
 80090b8:	2301      	movs	r3, #1
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	200004dc 	.word	0x200004dc
 80090c4:	20000afc 	.word	0x20000afc

080090c8 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt == 0 )
 80090cc:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <LoRaMacConfirmQueueRemoveFirst+0x34>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <LoRaMacConfirmQueueRemoveFirst+0x10>
    {
        return false;
 80090d4:	2300      	movs	r3, #0
 80090d6:	e00e      	b.n	80090f6 <LoRaMacConfirmQueueRemoveFirst+0x2e>
    }

    // Increase counter
    MlmeConfirmQueueCnt--;
 80090d8:	4b08      	ldr	r3, [pc, #32]	; (80090fc <LoRaMacConfirmQueueRemoveFirst+0x34>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	3b01      	subs	r3, #1
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <LoRaMacConfirmQueueRemoveFirst+0x34>)
 80090e2:	701a      	strb	r2, [r3, #0]
    // Update start pointer
    BufferStart = IncreaseBufferPointer( BufferStart );
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff ff25 	bl	8008f38 <IncreaseBufferPointer>
 80090ee:	4603      	mov	r3, r0
 80090f0:	4a03      	ldr	r2, [pc, #12]	; (8009100 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80090f2:	6013      	str	r3, [r2, #0]

    return true;
 80090f4:	2301      	movs	r3, #1
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	200004dc 	.word	0x200004dc
 8009100:	20000af8 	.word	0x20000af8

08009104 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	460a      	mov	r2, r1
 800910e:	71fb      	strb	r3, [r7, #7]
 8009110:	4613      	mov	r3, r2
 8009112:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]

    if( MlmeConfirmQueueCnt > 0 )
 8009118:	4b0c      	ldr	r3, [pc, #48]	; (800914c <LoRaMacConfirmQueueSetStatus+0x48>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d011      	beq.n	8009144 <LoRaMacConfirmQueueSetStatus+0x40>
    {
        element = GetElement( request, BufferStart, BufferEnd );
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <LoRaMacConfirmQueueSetStatus+0x4c>)
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <LoRaMacConfirmQueueSetStatus+0x50>)
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	79bb      	ldrb	r3, [r7, #6]
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff ff34 	bl	8008f98 <GetElement>
 8009130:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <LoRaMacConfirmQueueSetStatus+0x40>
        {
            element->Status = status;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	79fa      	ldrb	r2, [r7, #7]
 800913c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200004dc 	.word	0x200004dc
 8009150:	20000af8 	.word	0x20000af8
 8009154:	20000afc 	.word	0x20000afc

08009158 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]

    if( MlmeConfirmQueueCnt > 0 )
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <LoRaMacConfirmQueueGetStatus+0x40>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00e      	beq.n	800918c <LoRaMacConfirmQueueGetStatus+0x34>
    {
        element = GetElement( request, BufferStart, BufferEnd );
 800916e:	4b0b      	ldr	r3, [pc, #44]	; (800919c <LoRaMacConfirmQueueGetStatus+0x44>)
 8009170:	6819      	ldr	r1, [r3, #0]
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <LoRaMacConfirmQueueGetStatus+0x48>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	4618      	mov	r0, r3
 800917a:	f7ff ff0d 	bl	8008f98 <GetElement>
 800917e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <LoRaMacConfirmQueueGetStatus+0x34>
        {
            return element->Status;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	785b      	ldrb	r3, [r3, #1]
 800918a:	e000      	b.n	800918e <LoRaMacConfirmQueueGetStatus+0x36>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800918c:	2301      	movs	r3, #1
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	200004dc 	.word	0x200004dc
 800919c:	20000af8 	.word	0x20000af8
 80091a0:	20000afc 	.word	0x20000afc

080091a4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = BufferStart;
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <LoRaMacConfirmQueueSetStatusCmn+0x54>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]

    CommonStatus = status;
 80091b4:	4a11      	ldr	r2, [pc, #68]	; (80091fc <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	7013      	strb	r3, [r2, #0]

    if( MlmeConfirmQueueCnt > 0 )
 80091ba:	4b11      	ldr	r3, [pc, #68]	; (8009200 <LoRaMacConfirmQueueSetStatusCmn+0x5c>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d015      	beq.n	80091ee <LoRaMacConfirmQueueSetStatusCmn+0x4a>
    {
        do
        {
            element->Status = status;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	79fa      	ldrb	r2, [r7, #7]
 80091c6:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	78db      	ldrb	r3, [r3, #3]
 80091cc:	f083 0301 	eor.w	r3, r3, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <LoRaMacConfirmQueueSetStatusCmn+0x38>
            {
                element->ReadyToHandle = true;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff feab 	bl	8008f38 <IncreaseBufferPointer>
 80091e2:	60f8      	str	r0, [r7, #12]
        }while( element != BufferEnd );
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d1e9      	bne.n	80091c2 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
    }
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000af8 	.word	0x20000af8
 80091fc:	20000af4 	.word	0x20000af4
 8009200:	200004dc 	.word	0x200004dc
 8009204:	20000afc 	.word	0x20000afc

08009208 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
    return CommonStatus;
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 800920e:	781b      	ldrb	r3, [r3, #0]
}
 8009210:	4618      	mov	r0, r3
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr
 8009218:	20000af4 	.word	0x20000af4

0800921c <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, BufferStart, BufferEnd ) != NULL )
 8009226:	4b09      	ldr	r3, [pc, #36]	; (800924c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8009228:	6819      	ldr	r1, [r3, #0]
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <LoRaMacConfirmQueueIsCmdActive+0x34>)
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff feb1 	bl	8008f98 <GetElement>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000af8 	.word	0x20000af8
 8009250:	20000afc 	.word	0x20000afc

08009254 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = MlmeConfirmQueueCnt;
 800925c:	4b21      	ldr	r3, [pc, #132]	; (80092e4 <LoRaMacConfirmQueueHandleCb+0x90>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8009262:	2300      	movs	r3, #0
 8009264:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
 800926a:	e032      	b.n	80092d2 <LoRaMacConfirmQueueHandleCb+0x7e>
    {
        mlmeConfirm->MlmeRequest = BufferStart->Request;
 800926c:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	781a      	ldrb	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = BufferStart->Status;
 8009276:	4b1c      	ldr	r3, [pc, #112]	; (80092e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	785a      	ldrb	r2, [r3, #1]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	705a      	strb	r2, [r3, #1]
        readyToHandle = BufferStart->ReadyToHandle;
 8009280:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	789b      	ldrb	r3, [r3, #2]
 8009286:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8009288:	7b7b      	ldrb	r3, [r7, #13]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d005      	beq.n	800929a <LoRaMacConfirmQueueHandleCb+0x46>
        {
            Primitives->MacMlmeConfirm( mlmeConfirm );
 800928e:	4b17      	ldr	r3, [pc, #92]	; (80092ec <LoRaMacConfirmQueueHandleCb+0x98>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
 8009298:	e00b      	b.n	80092b2 <LoRaMacConfirmQueueHandleCb+0x5e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = BufferStart->Request;
 800929a:	4b13      	ldr	r3, [pc, #76]	; (80092e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = BufferStart->Status;
 80092a2:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = BufferStart->RestrictCommonReadyToHandle;
 80092aa:	4b0f      	ldr	r3, [pc, #60]	; (80092e8 <LoRaMacConfirmQueueHandleCb+0x94>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	78db      	ldrb	r3, [r3, #3]
 80092b0:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80092b2:	f7ff ff09 	bl	80090c8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80092b6:	7b7b      	ldrb	r3, [r7, #13]
 80092b8:	f083 0301 	eor.w	r3, r3, #1
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d004      	beq.n	80092cc <LoRaMacConfirmQueueHandleCb+0x78>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff feac 	bl	8009024 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	3301      	adds	r3, #1
 80092d0:	73fb      	strb	r3, [r7, #15]
 80092d2:	7bfa      	ldrb	r2, [r7, #15]
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d3c8      	bcc.n	800926c <LoRaMacConfirmQueueHandleCb+0x18>
        }
    }
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	200004dc 	.word	0x200004dc
 80092e8:	20000af8 	.word	0x20000af8
 80092ec:	200004c4 	.word	0x200004c4

080092f0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
    return MlmeConfirmQueueCnt;
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <LoRaMacConfirmQueueGetCnt+0x10>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bc80      	pop	{r7}
 80092fe:	4770      	bx	lr
 8009300:	200004dc 	.word	0x200004dc

08009304 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <LoRaMacConfirmQueueIsFull+0x1c>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b04      	cmp	r3, #4
 800930e:	d901      	bls.n	8009314 <LoRaMacConfirmQueueIsFull+0x10>
    {
        return true;
 8009310:	2301      	movs	r3, #1
 8009312:	e000      	b.n	8009316 <LoRaMacConfirmQueueIsFull+0x12>
    }
    else
    {
        return false;
 8009314:	2300      	movs	r3, #0
    }
}
 8009316:	4618      	mov	r0, r3
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	200004dc 	.word	0x200004dc

08009324 <LoRaMacComputeMic>:
 * \param [IN]  dir             Frame direction [0: uplink, 1: downlink]
 * \param [IN]  sequenceCounter Frame sequence counter
 * \param [OUT] mic Computed MIC field
 */
void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	607a      	str	r2, [r7, #4]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	460b      	mov	r3, r1
 8009332:	817b      	strh	r3, [r7, #10]
    MicBlockB0[5] = dir;
 8009334:	4a2b      	ldr	r2, [pc, #172]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 8009336:	7e3b      	ldrb	r3, [r7, #24]
 8009338:	7153      	strb	r3, [r2, #5]
    
    MicBlockB0[6] = ( address ) & 0xFF;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	b2da      	uxtb	r2, r3
 800933e:	4b29      	ldr	r3, [pc, #164]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 8009340:	719a      	strb	r2, [r3, #6]
    MicBlockB0[7] = ( address >> 8 ) & 0xFF;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	0a1b      	lsrs	r3, r3, #8
 8009346:	b2da      	uxtb	r2, r3
 8009348:	4b26      	ldr	r3, [pc, #152]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 800934a:	71da      	strb	r2, [r3, #7]
    MicBlockB0[8] = ( address >> 16 ) & 0xFF;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	0c1b      	lsrs	r3, r3, #16
 8009350:	b2da      	uxtb	r2, r3
 8009352:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 8009354:	721a      	strb	r2, [r3, #8]
    MicBlockB0[9] = ( address >> 24 ) & 0xFF;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	0e1b      	lsrs	r3, r3, #24
 800935a:	b2da      	uxtb	r2, r3
 800935c:	4b21      	ldr	r3, [pc, #132]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 800935e:	725a      	strb	r2, [r3, #9]

    MicBlockB0[10] = ( sequenceCounter ) & 0xFF;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	b2da      	uxtb	r2, r3
 8009364:	4b1f      	ldr	r3, [pc, #124]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 8009366:	729a      	strb	r2, [r3, #10]
    MicBlockB0[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4b1d      	ldr	r3, [pc, #116]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 8009370:	72da      	strb	r2, [r3, #11]
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	0c1b      	lsrs	r3, r3, #16
 8009376:	b2da      	uxtb	r2, r3
 8009378:	4b1a      	ldr	r3, [pc, #104]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 800937a:	731a      	strb	r2, [r3, #12]
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	0e1b      	lsrs	r3, r3, #24
 8009380:	b2da      	uxtb	r2, r3
 8009382:	4b18      	ldr	r3, [pc, #96]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 8009384:	735a      	strb	r2, [r3, #13]

    MicBlockB0[15] = size & 0xFF;
 8009386:	897b      	ldrh	r3, [r7, #10]
 8009388:	b2da      	uxtb	r2, r3
 800938a:	4b16      	ldr	r3, [pc, #88]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 800938c:	73da      	strb	r2, [r3, #15]

    AES_CMAC_Init( AesCmacCtx );
 800938e:	4816      	ldr	r0, [pc, #88]	; (80093e8 <LoRaMacComputeMic+0xc4>)
 8009390:	f002 fb13 	bl	800b9ba <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4814      	ldr	r0, [pc, #80]	; (80093e8 <LoRaMacComputeMic+0xc4>)
 8009398:	f002 fb28 	bl	800b9ec <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
 800939c:	2210      	movs	r2, #16
 800939e:	4911      	ldr	r1, [pc, #68]	; (80093e4 <LoRaMacComputeMic+0xc0>)
 80093a0:	4811      	ldr	r0, [pc, #68]	; (80093e8 <LoRaMacComputeMic+0xc4>)
 80093a2:	f002 fb32 	bl	800ba0a <AES_CMAC_Update>
    
    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 80093a6:	897b      	ldrh	r3, [r7, #10]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	68f9      	ldr	r1, [r7, #12]
 80093ae:	480e      	ldr	r0, [pc, #56]	; (80093e8 <LoRaMacComputeMic+0xc4>)
 80093b0:	f002 fb2b 	bl	800ba0a <AES_CMAC_Update>
    
    AES_CMAC_Final( Mic, AesCmacCtx );
 80093b4:	490c      	ldr	r1, [pc, #48]	; (80093e8 <LoRaMacComputeMic+0xc4>)
 80093b6:	480d      	ldr	r0, [pc, #52]	; (80093ec <LoRaMacComputeMic+0xc8>)
 80093b8:	f002 fbd7 	bl	800bb6a <AES_CMAC_Final>
    
    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 80093bc:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <LoRaMacComputeMic+0xc8>)
 80093be:	78db      	ldrb	r3, [r3, #3]
 80093c0:	061a      	lsls	r2, r3, #24
 80093c2:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <LoRaMacComputeMic+0xc8>)
 80093c4:	789b      	ldrb	r3, [r3, #2]
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	431a      	orrs	r2, r3
 80093ca:	4b08      	ldr	r3, [pc, #32]	; (80093ec <LoRaMacComputeMic+0xc8>)
 80093cc:	785b      	ldrb	r3, [r3, #1]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	4313      	orrs	r3, r2
 80093d2:	4a06      	ldr	r2, [pc, #24]	; (80093ec <LoRaMacComputeMic+0xc8>)
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	601a      	str	r2, [r3, #0]
}
 80093dc:	bf00      	nop
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	2000000c 	.word	0x2000000c
 80093e8:	200005f4 	.word	0x200005f4
 80093ec:	200004e0 	.word	0x200004e0

080093f0 <LoRaMacPayloadEncrypt>:

void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	460b      	mov	r3, r1
 80093fe:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint8_t bufferIndex = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	757b      	strb	r3, [r7, #21]
    uint16_t ctr = 1;
 8009404:	2301      	movs	r3, #1
 8009406:	827b      	strh	r3, [r7, #18]

    memset1( AesContext.ksch, '\0', 240 );
 8009408:	22f0      	movs	r2, #240	; 0xf0
 800940a:	2100      	movs	r1, #0
 800940c:	4848      	ldr	r0, [pc, #288]	; (8009530 <LoRaMacPayloadEncrypt+0x140>)
 800940e:	f007 fb4d 	bl	8010aac <memset1>
    aes_set_key( key, 16, &AesContext );
 8009412:	4a47      	ldr	r2, [pc, #284]	; (8009530 <LoRaMacPayloadEncrypt+0x140>)
 8009414:	2110      	movs	r1, #16
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 feb8 	bl	800b18c <aes_set_key>

    aBlock[5] = dir;
 800941c:	4a45      	ldr	r2, [pc, #276]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 800941e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009422:	7153      	strb	r3, [r2, #5]

    aBlock[6] = ( address ) & 0xFF;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	b2da      	uxtb	r2, r3
 8009428:	4b42      	ldr	r3, [pc, #264]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 800942a:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b40      	ldr	r3, [pc, #256]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 8009434:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	0c1b      	lsrs	r3, r3, #16
 800943a:	b2da      	uxtb	r2, r3
 800943c:	4b3d      	ldr	r3, [pc, #244]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 800943e:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	0e1b      	lsrs	r3, r3, #24
 8009444:	b2da      	uxtb	r2, r3
 8009446:	4b3b      	ldr	r3, [pc, #236]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 8009448:	725a      	strb	r2, [r3, #9]

    aBlock[10] = ( sequenceCounter ) & 0xFF;
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	b2da      	uxtb	r2, r3
 800944e:	4b39      	ldr	r3, [pc, #228]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 8009450:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	0a1b      	lsrs	r3, r3, #8
 8009456:	b2da      	uxtb	r2, r3
 8009458:	4b36      	ldr	r3, [pc, #216]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 800945a:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	0c1b      	lsrs	r3, r3, #16
 8009460:	b2da      	uxtb	r2, r3
 8009462:	4b34      	ldr	r3, [pc, #208]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 8009464:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	0e1b      	lsrs	r3, r3, #24
 800946a:	b2da      	uxtb	r2, r3
 800946c:	4b31      	ldr	r3, [pc, #196]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 800946e:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 8009470:	e02d      	b.n	80094ce <LoRaMacPayloadEncrypt+0xde>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 8009472:	8a7b      	ldrh	r3, [r7, #18]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	4b2f      	ldr	r3, [pc, #188]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 8009478:	73da      	strb	r2, [r3, #15]
        ctr++;
 800947a:	8a7b      	ldrh	r3, [r7, #18]
 800947c:	3301      	adds	r3, #1
 800947e:	827b      	strh	r3, [r7, #18]
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009480:	4a2b      	ldr	r2, [pc, #172]	; (8009530 <LoRaMacPayloadEncrypt+0x140>)
 8009482:	492d      	ldr	r1, [pc, #180]	; (8009538 <LoRaMacPayloadEncrypt+0x148>)
 8009484:	482b      	ldr	r0, [pc, #172]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 8009486:	f001 ff5f 	bl	800b348 <aes_encrypt>
        for( i = 0; i < 16; i++ )
 800948a:	2300      	movs	r3, #0
 800948c:	82fb      	strh	r3, [r7, #22]
 800948e:	e015      	b.n	80094bc <LoRaMacPayloadEncrypt+0xcc>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009490:	7d7a      	ldrb	r2, [r7, #21]
 8009492:	8afb      	ldrh	r3, [r7, #22]
 8009494:	4413      	add	r3, r2
 8009496:	461a      	mov	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4413      	add	r3, r2
 800949c:	7819      	ldrb	r1, [r3, #0]
 800949e:	8afb      	ldrh	r3, [r7, #22]
 80094a0:	4a25      	ldr	r2, [pc, #148]	; (8009538 <LoRaMacPayloadEncrypt+0x148>)
 80094a2:	5cd2      	ldrb	r2, [r2, r3]
 80094a4:	7d78      	ldrb	r0, [r7, #21]
 80094a6:	8afb      	ldrh	r3, [r7, #22]
 80094a8:	4403      	add	r3, r0
 80094aa:	4618      	mov	r0, r3
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	4403      	add	r3, r0
 80094b0:	404a      	eors	r2, r1
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80094b6:	8afb      	ldrh	r3, [r7, #22]
 80094b8:	3301      	adds	r3, #1
 80094ba:	82fb      	strh	r3, [r7, #22]
 80094bc:	8afb      	ldrh	r3, [r7, #22]
 80094be:	2b0f      	cmp	r3, #15
 80094c0:	d9e6      	bls.n	8009490 <LoRaMacPayloadEncrypt+0xa0>
        }
        size -= 16;
 80094c2:	897b      	ldrh	r3, [r7, #10]
 80094c4:	3b10      	subs	r3, #16
 80094c6:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80094c8:	7d7b      	ldrb	r3, [r7, #21]
 80094ca:	3310      	adds	r3, #16
 80094cc:	757b      	strb	r3, [r7, #21]
    while( size >= 16 )
 80094ce:	897b      	ldrh	r3, [r7, #10]
 80094d0:	2b0f      	cmp	r3, #15
 80094d2:	d8ce      	bhi.n	8009472 <LoRaMacPayloadEncrypt+0x82>
    }

    if( size > 0 )
 80094d4:	897b      	ldrh	r3, [r7, #10]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d025      	beq.n	8009526 <LoRaMacPayloadEncrypt+0x136>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 80094da:	8a7b      	ldrh	r3, [r7, #18]
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	4b15      	ldr	r3, [pc, #84]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 80094e0:	73da      	strb	r2, [r3, #15]
        aes_encrypt( aBlock, sBlock, &AesContext );
 80094e2:	4a13      	ldr	r2, [pc, #76]	; (8009530 <LoRaMacPayloadEncrypt+0x140>)
 80094e4:	4914      	ldr	r1, [pc, #80]	; (8009538 <LoRaMacPayloadEncrypt+0x148>)
 80094e6:	4813      	ldr	r0, [pc, #76]	; (8009534 <LoRaMacPayloadEncrypt+0x144>)
 80094e8:	f001 ff2e 	bl	800b348 <aes_encrypt>
        for( i = 0; i < size; i++ )
 80094ec:	2300      	movs	r3, #0
 80094ee:	82fb      	strh	r3, [r7, #22]
 80094f0:	e015      	b.n	800951e <LoRaMacPayloadEncrypt+0x12e>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80094f2:	7d7a      	ldrb	r2, [r7, #21]
 80094f4:	8afb      	ldrh	r3, [r7, #22]
 80094f6:	4413      	add	r3, r2
 80094f8:	461a      	mov	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4413      	add	r3, r2
 80094fe:	7819      	ldrb	r1, [r3, #0]
 8009500:	8afb      	ldrh	r3, [r7, #22]
 8009502:	4a0d      	ldr	r2, [pc, #52]	; (8009538 <LoRaMacPayloadEncrypt+0x148>)
 8009504:	5cd2      	ldrb	r2, [r2, r3]
 8009506:	7d78      	ldrb	r0, [r7, #21]
 8009508:	8afb      	ldrh	r3, [r7, #22]
 800950a:	4403      	add	r3, r0
 800950c:	4618      	mov	r0, r3
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	4403      	add	r3, r0
 8009512:	404a      	eors	r2, r1
 8009514:	b2d2      	uxtb	r2, r2
 8009516:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < size; i++ )
 8009518:	8afb      	ldrh	r3, [r7, #22]
 800951a:	3301      	adds	r3, #1
 800951c:	82fb      	strh	r3, [r7, #22]
 800951e:	8afa      	ldrh	r2, [r7, #22]
 8009520:	897b      	ldrh	r3, [r7, #10]
 8009522:	429a      	cmp	r2, r3
 8009524:	d3e5      	bcc.n	80094f2 <LoRaMacPayloadEncrypt+0x102>
        }
    }
}
 8009526:	bf00      	nop
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000500 	.word	0x20000500
 8009534:	2000001c 	.word	0x2000001c
 8009538:	200004f0 	.word	0x200004f0

0800953c <LoRaMacPayloadDecrypt>:

void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af04      	add	r7, sp, #16
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	607a      	str	r2, [r7, #4]
 8009546:	603b      	str	r3, [r7, #0]
 8009548:	460b      	mov	r3, r1
 800954a:	817b      	strh	r3, [r7, #10]
    LoRaMacPayloadEncrypt( buffer, size, key, address, dir, sequenceCounter, decBuffer );
 800954c:	8979      	ldrh	r1, [r7, #10]
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	9302      	str	r3, [sp, #8]
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	7e3b      	ldrb	r3, [r7, #24]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff ff46 	bl	80093f0 <LoRaMacPayloadEncrypt>
}
 8009564:	bf00      	nop
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <LoRaMacJoinComputeMic>:

void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	460b      	mov	r3, r1
 800957a:	817b      	strh	r3, [r7, #10]
    AES_CMAC_Init( AesCmacCtx );
 800957c:	4812      	ldr	r0, [pc, #72]	; (80095c8 <LoRaMacJoinComputeMic+0x5c>)
 800957e:	f002 fa1c 	bl	800b9ba <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4810      	ldr	r0, [pc, #64]	; (80095c8 <LoRaMacJoinComputeMic+0x5c>)
 8009586:	f002 fa31 	bl	800b9ec <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 800958a:	897b      	ldrh	r3, [r7, #10]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	68f9      	ldr	r1, [r7, #12]
 8009592:	480d      	ldr	r0, [pc, #52]	; (80095c8 <LoRaMacJoinComputeMic+0x5c>)
 8009594:	f002 fa39 	bl	800ba0a <AES_CMAC_Update>

    AES_CMAC_Final( Mic, AesCmacCtx );
 8009598:	490b      	ldr	r1, [pc, #44]	; (80095c8 <LoRaMacJoinComputeMic+0x5c>)
 800959a:	480c      	ldr	r0, [pc, #48]	; (80095cc <LoRaMacJoinComputeMic+0x60>)
 800959c:	f002 fae5 	bl	800bb6a <AES_CMAC_Final>

    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 80095a0:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <LoRaMacJoinComputeMic+0x60>)
 80095a2:	78db      	ldrb	r3, [r3, #3]
 80095a4:	061a      	lsls	r2, r3, #24
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <LoRaMacJoinComputeMic+0x60>)
 80095a8:	789b      	ldrb	r3, [r3, #2]
 80095aa:	041b      	lsls	r3, r3, #16
 80095ac:	431a      	orrs	r2, r3
 80095ae:	4b07      	ldr	r3, [pc, #28]	; (80095cc <LoRaMacJoinComputeMic+0x60>)
 80095b0:	785b      	ldrb	r3, [r3, #1]
 80095b2:	021b      	lsls	r3, r3, #8
 80095b4:	4313      	orrs	r3, r2
 80095b6:	4a05      	ldr	r2, [pc, #20]	; (80095cc <LoRaMacJoinComputeMic+0x60>)
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	601a      	str	r2, [r3, #0]
}
 80095c0:	bf00      	nop
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	200005f4 	.word	0x200005f4
 80095cc:	200004e0 	.word	0x200004e0

080095d0 <LoRaMacJoinDecrypt>:

void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	607a      	str	r2, [r7, #4]
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	460b      	mov	r3, r1
 80095de:	817b      	strh	r3, [r7, #10]
    memset1( AesContext.ksch, '\0', 240 );
 80095e0:	22f0      	movs	r2, #240	; 0xf0
 80095e2:	2100      	movs	r1, #0
 80095e4:	480e      	ldr	r0, [pc, #56]	; (8009620 <LoRaMacJoinDecrypt+0x50>)
 80095e6:	f007 fa61 	bl	8010aac <memset1>
    aes_set_key( key, 16, &AesContext );
 80095ea:	4a0d      	ldr	r2, [pc, #52]	; (8009620 <LoRaMacJoinDecrypt+0x50>)
 80095ec:	2110      	movs	r1, #16
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f001 fdcc 	bl	800b18c <aes_set_key>
    aes_encrypt( buffer, decBuffer, &AesContext );
 80095f4:	4a0a      	ldr	r2, [pc, #40]	; (8009620 <LoRaMacJoinDecrypt+0x50>)
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f001 fea5 	bl	800b348 <aes_encrypt>
    // Check if optional CFList is included
    if( size >= 16 )
 80095fe:	897b      	ldrh	r3, [r7, #10]
 8009600:	2b0f      	cmp	r3, #15
 8009602:	d908      	bls.n	8009616 <LoRaMacJoinDecrypt+0x46>
    {
        aes_encrypt( buffer + 16, decBuffer + 16, &AesContext );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f103 0010 	add.w	r0, r3, #16
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	3310      	adds	r3, #16
 800960e:	4a04      	ldr	r2, [pc, #16]	; (8009620 <LoRaMacJoinDecrypt+0x50>)
 8009610:	4619      	mov	r1, r3
 8009612:	f001 fe99 	bl	800b348 <aes_encrypt>
    }
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20000500 	.word	0x20000500

08009624 <LoRaMacJoinComputeSKeys>:

void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	603b      	str	r3, [r7, #0]
 8009630:	4613      	mov	r3, r2
 8009632:	80fb      	strh	r3, [r7, #6]
    uint8_t nonce[16];
    uint8_t *pDevNonce = ( uint8_t * )&devNonce;
 8009634:	1dbb      	adds	r3, r7, #6
 8009636:	627b      	str	r3, [r7, #36]	; 0x24
    
    memset1( AesContext.ksch, '\0', 240 );
 8009638:	22f0      	movs	r2, #240	; 0xf0
 800963a:	2100      	movs	r1, #0
 800963c:	4825      	ldr	r0, [pc, #148]	; (80096d4 <LoRaMacJoinComputeSKeys+0xb0>)
 800963e:	f007 fa35 	bl	8010aac <memset1>
    aes_set_key( key, 16, &AesContext );
 8009642:	4a24      	ldr	r2, [pc, #144]	; (80096d4 <LoRaMacJoinComputeSKeys+0xb0>)
 8009644:	2110      	movs	r1, #16
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f001 fda0 	bl	800b18c <aes_set_key>

    memset1( nonce, 0, sizeof( nonce ) );
 800964c:	f107 0314 	add.w	r3, r7, #20
 8009650:	2210      	movs	r2, #16
 8009652:	2100      	movs	r1, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f007 fa29 	bl	8010aac <memset1>
    nonce[0] = 0x01;
 800965a:	2301      	movs	r3, #1
 800965c:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 800965e:	f107 0314 	add.w	r3, r7, #20
 8009662:	3301      	adds	r3, #1
 8009664:	2206      	movs	r2, #6
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	4618      	mov	r0, r3
 800966a:	f007 f9e4 	bl	8010a36 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 800966e:	f107 0314 	add.w	r3, r7, #20
 8009672:	3307      	adds	r3, #7
 8009674:	2202      	movs	r2, #2
 8009676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009678:	4618      	mov	r0, r3
 800967a:	f007 f9dc 	bl	8010a36 <memcpy1>
    aes_encrypt( nonce, nwkSKey, &AesContext );
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	4a14      	ldr	r2, [pc, #80]	; (80096d4 <LoRaMacJoinComputeSKeys+0xb0>)
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f001 fe5e 	bl	800b348 <aes_encrypt>

    memset1( nonce, 0, sizeof( nonce ) );
 800968c:	f107 0314 	add.w	r3, r7, #20
 8009690:	2210      	movs	r2, #16
 8009692:	2100      	movs	r1, #0
 8009694:	4618      	mov	r0, r3
 8009696:	f007 fa09 	bl	8010aac <memset1>
    nonce[0] = 0x02;
 800969a:	2302      	movs	r3, #2
 800969c:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 800969e:	f107 0314 	add.w	r3, r7, #20
 80096a2:	3301      	adds	r3, #1
 80096a4:	2206      	movs	r2, #6
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f007 f9c4 	bl	8010a36 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 80096ae:	f107 0314 	add.w	r3, r7, #20
 80096b2:	3307      	adds	r3, #7
 80096b4:	2202      	movs	r2, #2
 80096b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096b8:	4618      	mov	r0, r3
 80096ba:	f007 f9bc 	bl	8010a36 <memcpy1>
    aes_encrypt( nonce, appSKey, &AesContext );
 80096be:	f107 0314 	add.w	r3, r7, #20
 80096c2:	4a04      	ldr	r2, [pc, #16]	; (80096d4 <LoRaMacJoinComputeSKeys+0xb0>)
 80096c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 fe3e 	bl	800b348 <aes_encrypt>
}
 80096cc:	bf00      	nop
 80096ce:	3728      	adds	r7, #40	; 0x28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20000500 	.word	0x20000500

080096d8 <SendFrame>:
 * \brief   Prepares the payload of the frame
 *
 * \retval  [0: frame could be send, 1: error]
 */
bool SendFrame( void )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b086      	sub	sp, #24
 80096dc:	af00      	add	r7, sp, #0
	lwan_dev_params_update();
 80096de:	f000 f9c3 	bl	8009a68 <lwan_dev_params_update>
	
	McpsReq_t mcpsReq;
	LoRaMacTxInfo_t txInfo;

	if( LoRaMacQueryTxPossible( appDataSize, &txInfo ) != LORAMAC_STATUS_OK )
 80096e2:	4b2b      	ldr	r3, [pc, #172]	; (8009790 <SendFrame+0xb8>)
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	1d3a      	adds	r2, r7, #4
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fd48 	bl	8008180 <LoRaMacQueryTxPossible>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00d      	beq.n	8009712 <SendFrame+0x3a>
	{
		// Send empty frame in order to flush MAC commands
		DebugPrintf("payload length error ...\r\n");
 80096f6:	4827      	ldr	r0, [pc, #156]	; (8009794 <SendFrame+0xbc>)
 80096f8:	f007 f94c 	bl	8010994 <DebugPrintf>
		mcpsReq.Type = MCPS_UNCONFIRMED;
 80096fc:	2300      	movs	r3, #0
 80096fe:	723b      	strb	r3, [r7, #8]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8009700:	2300      	movs	r3, #0
 8009702:	613b      	str	r3, [r7, #16]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	82bb      	strh	r3, [r7, #20]
		mcpsReq.Req.Unconfirmed.Datarate = currentDrForNoAdr;
 8009708:	4b23      	ldr	r3, [pc, #140]	; (8009798 <SendFrame+0xc0>)
 800970a:	f993 3000 	ldrsb.w	r3, [r3]
 800970e:	75bb      	strb	r3, [r7, #22]
 8009710:	e02e      	b.n	8009770 <SendFrame+0x98>
	}
	else
	{
		if( isTxConfirmed == false )
 8009712:	4b22      	ldr	r3, [pc, #136]	; (800979c <SendFrame+0xc4>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	f083 0301 	eor.w	r3, r3, #1
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <SendFrame+0x6e>
		{
			DebugPrintf("unconfirmed uplink sending ...\r\n");
 8009720:	481f      	ldr	r0, [pc, #124]	; (80097a0 <SendFrame+0xc8>)
 8009722:	f007 f937 	bl	8010994 <DebugPrintf>
			mcpsReq.Type = MCPS_UNCONFIRMED;
 8009726:	2300      	movs	r3, #0
 8009728:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Unconfirmed.fPort = appPort;
 800972a:	4b1e      	ldr	r3, [pc, #120]	; (80097a4 <SendFrame+0xcc>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Unconfirmed.fBuffer = appData;
 8009730:	4b1d      	ldr	r3, [pc, #116]	; (80097a8 <SendFrame+0xd0>)
 8009732:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Unconfirmed.fBufferSize = appDataSize;
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <SendFrame+0xb8>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Unconfirmed.Datarate = currentDrForNoAdr;
 800973c:	4b16      	ldr	r3, [pc, #88]	; (8009798 <SendFrame+0xc0>)
 800973e:	f993 3000 	ldrsb.w	r3, [r3]
 8009742:	75bb      	strb	r3, [r7, #22]
 8009744:	e014      	b.n	8009770 <SendFrame+0x98>
		}
		else
		{
			DebugPrintf("confirmed uplink sending ...\r\n");
 8009746:	4819      	ldr	r0, [pc, #100]	; (80097ac <SendFrame+0xd4>)
 8009748:	f007 f924 	bl	8010994 <DebugPrintf>
			mcpsReq.Type = MCPS_CONFIRMED;
 800974c:	2301      	movs	r3, #1
 800974e:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Confirmed.fPort = appPort;
 8009750:	4b14      	ldr	r3, [pc, #80]	; (80097a4 <SendFrame+0xcc>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Confirmed.fBuffer = appData;
 8009756:	4b14      	ldr	r3, [pc, #80]	; (80097a8 <SendFrame+0xd0>)
 8009758:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Confirmed.fBufferSize = appDataSize;
 800975a:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <SendFrame+0xb8>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Confirmed.NbTrials = confirmedNbTrials;
 8009762:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <SendFrame+0xd8>)
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	75fb      	strb	r3, [r7, #23]
			mcpsReq.Req.Confirmed.Datarate = currentDrForNoAdr;
 8009768:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <SendFrame+0xc0>)
 800976a:	f993 3000 	ldrsb.w	r3, [r3]
 800976e:	75bb      	strb	r3, [r7, #22]
		}
	}
	if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8009770:	f107 0308 	add.w	r3, r7, #8
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff fae9 	bl	8008d4c <LoRaMacMcpsRequest>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <SendFrame+0xac>
	{
		return false;
 8009780:	2300      	movs	r3, #0
 8009782:	e000      	b.n	8009786 <SendFrame+0xae>
	}
	return true;
 8009784:	2301      	movs	r3, #1
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	2000002c 	.word	0x2000002c
 8009794:	08012b60 	.word	0x08012b60
 8009798:	20000bb4 	.word	0x20000bb4
 800979c:	20000082 	.word	0x20000082
 80097a0:	08012b7c 	.word	0x08012b7c
 80097a4:	20000083 	.word	0x20000083
 80097a8:	20000b34 	.word	0x20000b34
 80097ac:	08012ba0 	.word	0x08012ba0
 80097b0:	20000084 	.word	0x20000084

080097b4 <OnTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnTxNextPacketTimerEvent( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	; 0x28
 80097b8:	af00      	add	r7, sp, #0
	MibRequestConfirm_t mibReq;
	LoRaMacStatus_t status;

	TimerStop( &TxNextPacketTimer );
 80097ba:	481b      	ldr	r0, [pc, #108]	; (8009828 <OnTxNextPacketTimerEvent+0x74>)
 80097bc:	f006 ff80 	bl	80106c0 <TimerStop>

	mibReq.Type = MIB_NETWORK_JOINED;
 80097c0:	2301      	movs	r3, #1
 80097c2:	763b      	strb	r3, [r7, #24]
	status = LoRaMacMibGetRequestConfirm( &mibReq );
 80097c4:	f107 0318 	add.w	r3, r7, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fd73 	bl	80082b4 <LoRaMacMibGetRequestConfirm>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( status == LORAMAC_STATUS_OK )
 80097d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d121      	bne.n	8009820 <OnTxNextPacketTimerEvent+0x6c>
	{
		if( mibReq.Param.IsNetworkJoined == true )
 80097dc:	7f3b      	ldrb	r3, [r7, #28]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <OnTxNextPacketTimerEvent+0x3c>
		{
			deviceState = DEVICE_STATE_SEND;
 80097e2:	4b12      	ldr	r3, [pc, #72]	; (800982c <OnTxNextPacketTimerEvent+0x78>)
 80097e4:	2202      	movs	r2, #2
 80097e6:	701a      	strb	r2, [r3, #0]
			nextTx = true;
 80097e8:	4b11      	ldr	r3, [pc, #68]	; (8009830 <OnTxNextPacketTimerEvent+0x7c>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	701a      	strb	r2, [r3, #0]
			{
				deviceState = DEVICE_STATE_CYCLE;
			}
		}
	}
}
 80097ee:	e017      	b.n	8009820 <OnTxNextPacketTimerEvent+0x6c>
			mlmeReq.Type = MLME_JOIN;
 80097f0:	2300      	movs	r3, #0
 80097f2:	713b      	strb	r3, [r7, #4]
			mlmeReq.Req.Join.DevEui = devEui;
 80097f4:	4b0f      	ldr	r3, [pc, #60]	; (8009834 <OnTxNextPacketTimerEvent+0x80>)
 80097f6:	60bb      	str	r3, [r7, #8]
			mlmeReq.Req.Join.AppEui = appEui;
 80097f8:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <OnTxNextPacketTimerEvent+0x84>)
 80097fa:	60fb      	str	r3, [r7, #12]
			mlmeReq.Req.Join.AppKey = appKey;
 80097fc:	4b0f      	ldr	r3, [pc, #60]	; (800983c <OnTxNextPacketTimerEvent+0x88>)
 80097fe:	613b      	str	r3, [r7, #16]
			mlmeReq.Req.Join.NbTrials = 1;
 8009800:	2301      	movs	r3, #1
 8009802:	753b      	strb	r3, [r7, #20]
			if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 8009804:	1d3b      	adds	r3, r7, #4
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff f986 	bl	8008b18 <LoRaMacMlmeRequest>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d103      	bne.n	800981a <OnTxNextPacketTimerEvent+0x66>
				deviceState = DEVICE_STATE_SLEEP;
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <OnTxNextPacketTimerEvent+0x78>)
 8009814:	2204      	movs	r2, #4
 8009816:	701a      	strb	r2, [r3, #0]
}
 8009818:	e002      	b.n	8009820 <OnTxNextPacketTimerEvent+0x6c>
				deviceState = DEVICE_STATE_CYCLE;
 800981a:	4b04      	ldr	r3, [pc, #16]	; (800982c <OnTxNextPacketTimerEvent+0x78>)
 800981c:	2203      	movs	r2, #3
 800981e:	701a      	strb	r2, [r3, #0]
}
 8009820:	bf00      	nop
 8009822:	3728      	adds	r7, #40	; 0x28
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20000b04 	.word	0x20000b04
 800982c:	20000b00 	.word	0x20000b00
 8009830:	2000002d 	.word	0x2000002d
 8009834:	20000030 	.word	0x20000030
 8009838:	2000076c 	.word	0x2000076c
 800983c:	20000038 	.word	0x20000038

08009840 <McpsConfirm>:
 *
 * \param   [IN] mcpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	785b      	ldrb	r3, [r3, #1]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <McpsConfirm+0x26>
	{
		switch( mcpsConfirm->McpsRequest )
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b03      	cmp	r3, #3
 8009856:	d008      	beq.n	800986a <McpsConfirm+0x2a>
 8009858:	2b03      	cmp	r3, #3
 800985a:	dc08      	bgt.n	800986e <McpsConfirm+0x2e>
 800985c:	2b00      	cmp	r3, #0
 800985e:	d008      	beq.n	8009872 <McpsConfirm+0x32>
 8009860:	2b01      	cmp	r3, #1
 8009862:	d008      	beq.n	8009876 <McpsConfirm+0x36>
			case MCPS_PROPRIETARY:
			{
				break;
			}
			default:
				break;
 8009864:	e003      	b.n	800986e <McpsConfirm+0x2e>
		}
	}
 8009866:	bf00      	nop
 8009868:	e006      	b.n	8009878 <McpsConfirm+0x38>
				break;
 800986a:	bf00      	nop
 800986c:	e004      	b.n	8009878 <McpsConfirm+0x38>
				break;
 800986e:	bf00      	nop
 8009870:	e002      	b.n	8009878 <McpsConfirm+0x38>
				break;
 8009872:	bf00      	nop
 8009874:	e000      	b.n	8009878 <McpsConfirm+0x38>
				break;
 8009876:	bf00      	nop
	nextTx = true;
 8009878:	4b03      	ldr	r3, [pc, #12]	; (8009888 <McpsConfirm+0x48>)
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr
 8009888:	2000002d 	.word	0x2000002d

0800988c <downLinkDataHandle>:
	return 0;
}


void __attribute__((weak)) downLinkDataHandle(McpsIndication_t *mcpsIndication)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	DebugPrintf("+REV DATA:%s,RXSIZE %d,PORT %d\r\n",mcpsIndication->RxSlot?"RXWIN2":"RXWIN1",mcpsIndication->BufferSize,mcpsIndication->Port);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	7c5b      	ldrb	r3, [r3, #17]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <downLinkDataHandle+0x14>
 800989c:	4914      	ldr	r1, [pc, #80]	; (80098f0 <downLinkDataHandle+0x64>)
 800989e:	e000      	b.n	80098a2 <downLinkDataHandle+0x16>
 80098a0:	4914      	ldr	r1, [pc, #80]	; (80098f4 <downLinkDataHandle+0x68>)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	7b1b      	ldrb	r3, [r3, #12]
 80098a6:	461a      	mov	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	78db      	ldrb	r3, [r3, #3]
 80098ac:	4812      	ldr	r0, [pc, #72]	; (80098f8 <downLinkDataHandle+0x6c>)
 80098ae:	f007 f871 	bl	8010994 <DebugPrintf>
	DebugPrintf("+REV DATA:");
 80098b2:	4812      	ldr	r0, [pc, #72]	; (80098fc <downLinkDataHandle+0x70>)
 80098b4:	f007 f86e 	bl	8010994 <DebugPrintf>
	for(uint8_t i=0;i<mcpsIndication->BufferSize;i++)
 80098b8:	2300      	movs	r3, #0
 80098ba:	73fb      	strb	r3, [r7, #15]
 80098bc:	e00b      	b.n	80098d6 <downLinkDataHandle+0x4a>
	{
		DebugPrintf("%02X",mcpsIndication->Buffer[i]);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	4413      	add	r3, r2
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	4619      	mov	r1, r3
 80098ca:	480d      	ldr	r0, [pc, #52]	; (8009900 <downLinkDataHandle+0x74>)
 80098cc:	f007 f862 	bl	8010994 <DebugPrintf>
	for(uint8_t i=0;i<mcpsIndication->BufferSize;i++)
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	3301      	adds	r3, #1
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	7b1b      	ldrb	r3, [r3, #12]
 80098da:	7bfa      	ldrb	r2, [r7, #15]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d3ee      	bcc.n	80098be <downLinkDataHandle+0x32>
	}
	DebugPrintf("\r\n");
 80098e0:	4808      	ldr	r0, [pc, #32]	; (8009904 <downLinkDataHandle+0x78>)
 80098e2:	f007 f857 	bl	8010994 <DebugPrintf>
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	08012bc0 	.word	0x08012bc0
 80098f4:	08012bc8 	.word	0x08012bc8
 80098f8:	08012bd0 	.word	0x08012bd0
 80098fc:	08012bf4 	.word	0x08012bf4
 8009900:	08012c00 	.word	0x08012c00
 8009904:	08012c08 	.word	0x08012c08

08009908 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d135      	bne.n	8009984 <McpsIndication+0x7c>
	{
		return;
	}
	DebugPrintf( "receive data: rssi = %d, snr = %d, datarate = %d\r\n", mcpsIndication->Rssi, (int)mcpsIndication->Snr,(int)mcpsIndication->RxDatarate);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800991e:	4619      	mov	r1, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	791b      	ldrb	r3, [r3, #4]
 800992c:	4817      	ldr	r0, [pc, #92]	; (800998c <McpsIndication+0x84>)
 800992e:	f007 f831 	bl	8010994 <DebugPrintf>
	switch( mcpsIndication->McpsIndication )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d80a      	bhi.n	8009950 <McpsIndication+0x48>
 800993a:	a201      	add	r2, pc, #4	; (adr r2, 8009940 <McpsIndication+0x38>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	08009951 	.word	0x08009951
 8009944:	08009951 	.word	0x08009951
 8009948:	08009951 	.word	0x08009951
 800994c:	08009951 	.word	0x08009951
		case MCPS_MULTICAST:
		{
			break;
		}
		default:
			break;
 8009950:	bf00      	nop

	// Check Multicast
	// Check Port
	// Check Datarate
	// Check FramePending
	if( mcpsIndication->FramePending == true )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	795b      	ldrb	r3, [r3, #5]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d101      	bne.n	800995e <McpsIndication+0x56>
	{
		// The server signals that it has pending data to be sent.
		// We schedule an uplink as soon as possible to flush the server.
		OnTxNextPacketTimerEvent( );
 800995a:	f7ff ff2b 	bl	80097b4 <OnTxNextPacketTimerEvent>
	// Check Buffer
	// Check BufferSize
	// Check Rssi
	// Check Snr
	// Check RxSlot
	if( mcpsIndication->RxData == true )
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	7b5b      	ldrb	r3, [r3, #13]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <McpsIndication+0x64>
	{
		downLinkDataHandle(mcpsIndication);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff ff90 	bl	800988c <downLinkDataHandle>
	}

	if(mcpsIndication->AckReceived)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	7c9b      	ldrb	r3, [r3, #18]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <McpsIndication+0x74>
	{
		WurdeBestaetigt = true;
 8009974:	4b06      	ldr	r3, [pc, #24]	; (8009990 <McpsIndication+0x88>)
 8009976:	2201      	movs	r2, #1
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	e004      	b.n	8009986 <McpsIndication+0x7e>
	}else{
		WurdeBestaetigt = false;
 800997c:	4b04      	ldr	r3, [pc, #16]	; (8009990 <McpsIndication+0x88>)
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	e000      	b.n	8009986 <McpsIndication+0x7e>
		return;
 8009984:	bf00      	nop
	}
}
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	08012c0c 	.word	0x08012c0c
 8009990:	2000098a 	.word	0x2000098a

08009994 <dev_time_updated>:


void __attribute__((weak)) dev_time_updated()
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	DebugPrintf("device time updated\r\n");
 8009998:	4802      	ldr	r0, [pc, #8]	; (80099a4 <dev_time_updated+0x10>)
 800999a:	f006 fffb 	bl	8010994 <DebugPrintf>
}
 800999e:	bf00      	nop
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	08012c40 	.word	0x08012c40

080099a8 <MlmeConfirm>:
 *
 * \param   [IN] mlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
	switch( mlmeConfirm->MlmeRequest )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	2b05      	cmp	r3, #5
 80099b6:	d026      	beq.n	8009a06 <MlmeConfirm+0x5e>
 80099b8:	2b05      	cmp	r3, #5
 80099ba:	dc2b      	bgt.n	8009a14 <MlmeConfirm+0x6c>
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <MlmeConfirm+0x1e>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d029      	beq.n	8009a18 <MlmeConfirm+0x70>
				dev_time_updated();
			}
			break;
		}
		default:
			break;
 80099c4:	e026      	b.n	8009a14 <MlmeConfirm+0x6c>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	785b      	ldrb	r3, [r3, #1]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10d      	bne.n	80099ea <MlmeConfirm+0x42>
				DebugPrintf("joined\r\n");
 80099ce:	4818      	ldr	r0, [pc, #96]	; (8009a30 <MlmeConfirm+0x88>)
 80099d0:	f006 ffe0 	bl	8010994 <DebugPrintf>
				if(passthroughMode == false)
 80099d4:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <MlmeConfirm+0x8c>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f083 0301 	eor.w	r3, r3, #1
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01c      	beq.n	8009a1c <MlmeConfirm+0x74>
					deviceState = DEVICE_STATE_SEND;
 80099e2:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <MlmeConfirm+0x90>)
 80099e4:	2202      	movs	r2, #2
 80099e6:	701a      	strb	r2, [r3, #0]
			break;
 80099e8:	e018      	b.n	8009a1c <MlmeConfirm+0x74>
				uint32_t rejoin_delay = 30000;
 80099ea:	f247 5330 	movw	r3, #30000	; 0x7530
 80099ee:	60fb      	str	r3, [r7, #12]
				DebugPrintf("join failed, join again at 30s later\r\n");
 80099f0:	4812      	ldr	r0, [pc, #72]	; (8009a3c <MlmeConfirm+0x94>)
 80099f2:	f006 ffcf 	bl	8010994 <DebugPrintf>
				TimerSetValue( &TxNextPacketTimer, rejoin_delay );
 80099f6:	68f9      	ldr	r1, [r7, #12]
 80099f8:	4811      	ldr	r0, [pc, #68]	; (8009a40 <MlmeConfirm+0x98>)
 80099fa:	f006 ff1d 	bl	8010838 <TimerSetValue>
				TimerStart( &TxNextPacketTimer );
 80099fe:	4810      	ldr	r0, [pc, #64]	; (8009a40 <MlmeConfirm+0x98>)
 8009a00:	f006 fd16 	bl	8010430 <TimerStart>
			break;
 8009a04:	e00a      	b.n	8009a1c <MlmeConfirm+0x74>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d108      	bne.n	8009a20 <MlmeConfirm+0x78>
				dev_time_updated();
 8009a0e:	f7ff ffc1 	bl	8009994 <dev_time_updated>
			break;
 8009a12:	e005      	b.n	8009a20 <MlmeConfirm+0x78>
			break;
 8009a14:	bf00      	nop
 8009a16:	e004      	b.n	8009a22 <MlmeConfirm+0x7a>
			break;
 8009a18:	bf00      	nop
 8009a1a:	e002      	b.n	8009a22 <MlmeConfirm+0x7a>
			break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <MlmeConfirm+0x7a>
			break;
 8009a20:	bf00      	nop
	}
	nextTx = true;
 8009a22:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <MlmeConfirm+0x9c>)
 8009a24:	2201      	movs	r2, #1
 8009a26:	701a      	strb	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	08012c58 	.word	0x08012c58
 8009a34:	2000070c 	.word	0x2000070c
 8009a38:	20000b00 	.word	0x20000b00
 8009a3c:	08012c64 	.word	0x08012c64
 8009a40:	20000b04 	.word	0x20000b04
 8009a44:	2000002d 	.word	0x2000002d

08009a48 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] mlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
	switch( mlmeIndication->MlmeIndication )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	d102      	bne.n	8009a5e <MlmeIndication+0x16>
	{
		case MLME_SCHEDULE_UPLINK:
		{// The MAC signals that we shall provide an uplink as soon as possible
			OnTxNextPacketTimerEvent( );
 8009a58:	f7ff feac 	bl	80097b4 <OnTxNextPacketTimerEvent>
			break;
 8009a5c:	e000      	b.n	8009a60 <MlmeIndication+0x18>
		}
		default:
			break;
 8009a5e:	bf00      	nop
	}
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <lwan_dev_params_update>:


void lwan_dev_params_update( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b092      	sub	sp, #72	; 0x48
 8009a6c:	af00      	add	r7, sp, #0
#if defined( REGION_EU868 )
	LoRaMacChannelAdd( 3, ( ChannelParams_t )EU868_LC4 );
 8009a6e:	4a28      	ldr	r2, [pc, #160]	; (8009b10 <lwan_dev_params_update+0xa8>)
 8009a70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a74:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009a7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a80:	2003      	movs	r0, #3
 8009a82:	f7fe ffa1 	bl	80089c8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 4, ( ChannelParams_t )EU868_LC5 );
 8009a86:	4a23      	ldr	r2, [pc, #140]	; (8009b14 <lwan_dev_params_update+0xac>)
 8009a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a98:	2004      	movs	r0, #4
 8009a9a:	f7fe ff95 	bl	80089c8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 5, ( ChannelParams_t )EU868_LC6 );
 8009a9e:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <lwan_dev_params_update+0xb0>)
 8009aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ab0:	2005      	movs	r0, #5
 8009ab2:	f7fe ff89 	bl	80089c8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 6, ( ChannelParams_t )EU868_LC7 );
 8009ab6:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <lwan_dev_params_update+0xb4>)
 8009ab8:	f107 0318 	add.w	r3, r7, #24
 8009abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8009abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009ac2:	f107 0318 	add.w	r3, r7, #24
 8009ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ac8:	2006      	movs	r0, #6
 8009aca:	f7fe ff7d 	bl	80089c8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 7, ( ChannelParams_t )EU868_LC8 );
 8009ace:	4a14      	ldr	r2, [pc, #80]	; (8009b20 <lwan_dev_params_update+0xb8>)
 8009ad0:	f107 030c 	add.w	r3, r7, #12
 8009ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ad6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009ada:	f107 030c 	add.w	r3, r7, #12
 8009ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ae0:	2007      	movs	r0, #7
 8009ae2:	f7fe ff71 	bl	80089c8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 7, ( ChannelParams_t )AS923_LC8 );
#endif

	MibRequestConfirm_t mibReq;

	mibReq.Type = MIB_CHANNELS_DEFAULT_MASK;
 8009ae6:	230d      	movs	r3, #13
 8009ae8:	703b      	strb	r3, [r7, #0]
	mibReq.Param.ChannelsMask = userChannelsMask;
 8009aea:	4b0e      	ldr	r3, [pc, #56]	; (8009b24 <lwan_dev_params_update+0xbc>)
 8009aec:	607b      	str	r3, [r7, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 8009aee:	463b      	mov	r3, r7
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fd19 	bl	8008528 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_CHANNELS_MASK;
 8009af6:	230c      	movs	r3, #12
 8009af8:	703b      	strb	r3, [r7, #0]
	mibReq.Param.ChannelsMask = userChannelsMask;
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <lwan_dev_params_update+0xbc>)
 8009afc:	607b      	str	r3, [r7, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 8009afe:	463b      	mov	r3, r7
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe fd11 	bl	8008528 <LoRaMacMibSetRequestConfirm>
}
 8009b06:	bf00      	nop
 8009b08:	3748      	adds	r7, #72	; 0x48
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	08012c8c 	.word	0x08012c8c
 8009b14:	08012c98 	.word	0x08012c98
 8009b18:	08012ca4 	.word	0x08012ca4
 8009b1c:	08012cb0 	.word	0x08012cb0
 8009b20:	08012cbc 	.word	0x08012cbc
 8009b24:	2000006c 	.word	0x2000006c

08009b28 <LoraWanInit>:
LoRaMacPrimitives_t LoRaMacPrimitive;
LoRaMacCallback_t LoRaMacCallback;


void LoraWanInit(DeviceClass_t lorawanClass,LoRaMacRegion_t region)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	460a      	mov	r2, r1
 8009b32:	71fb      	strb	r3, [r7, #7]
 8009b34:	4613      	mov	r3, r2
 8009b36:	71bb      	strb	r3, [r7, #6]
	DebugPrintf("\r\nLoRaWAN ");
 8009b38:	4855      	ldr	r0, [pc, #340]	; (8009c90 <LoraWanInit+0x168>)
 8009b3a:	f006 ff2b 	bl	8010994 <DebugPrintf>
	switch(region)
 8009b3e:	79bb      	ldrb	r3, [r7, #6]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	2b0b      	cmp	r3, #11
 8009b44:	d846      	bhi.n	8009bd4 <LoraWanInit+0xac>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <LoraWanInit+0x24>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b8d 	.word	0x08009b8d
 8009b50:	08009b95 	.word	0x08009b95
 8009b54:	08009b9d 	.word	0x08009b9d
 8009b58:	08009ba5 	.word	0x08009ba5
 8009b5c:	08009bad 	.word	0x08009bad
 8009b60:	08009bb5 	.word	0x08009bb5
 8009b64:	08009bbd 	.word	0x08009bbd
 8009b68:	08009bc5 	.word	0x08009bc5
 8009b6c:	08009bcd 	.word	0x08009bcd
 8009b70:	08009bd5 	.word	0x08009bd5
 8009b74:	08009b7d 	.word	0x08009b7d
 8009b78:	08009b85 	.word	0x08009b85
	{
		case LORAMAC_REGION_AS923_AS1:
			DebugPrintf("AS923(AS1:922.0-923.4MHz)");
 8009b7c:	4845      	ldr	r0, [pc, #276]	; (8009c94 <LoraWanInit+0x16c>)
 8009b7e:	f006 ff09 	bl	8010994 <DebugPrintf>
			break;
 8009b82:	e027      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_AS923_AS2:
			DebugPrintf("AS923(AS2:923.2-924.6MHz)");
 8009b84:	4844      	ldr	r0, [pc, #272]	; (8009c98 <LoraWanInit+0x170>)
 8009b86:	f006 ff05 	bl	8010994 <DebugPrintf>
			break;
 8009b8a:	e023      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_AU915:
			DebugPrintf("AU915");
 8009b8c:	4843      	ldr	r0, [pc, #268]	; (8009c9c <LoraWanInit+0x174>)
 8009b8e:	f006 ff01 	bl	8010994 <DebugPrintf>
			break;
 8009b92:	e01f      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_CN470:
			DebugPrintf("CN470");
 8009b94:	4842      	ldr	r0, [pc, #264]	; (8009ca0 <LoraWanInit+0x178>)
 8009b96:	f006 fefd 	bl	8010994 <DebugPrintf>
			break;
 8009b9a:	e01b      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_CN779:
			DebugPrintf("CN779");
 8009b9c:	4841      	ldr	r0, [pc, #260]	; (8009ca4 <LoraWanInit+0x17c>)
 8009b9e:	f006 fef9 	bl	8010994 <DebugPrintf>
			break;
 8009ba2:	e017      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_EU433:
			DebugPrintf("EU433");
 8009ba4:	4840      	ldr	r0, [pc, #256]	; (8009ca8 <LoraWanInit+0x180>)
 8009ba6:	f006 fef5 	bl	8010994 <DebugPrintf>
			break;
 8009baa:	e013      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_EU868:
			DebugPrintf("EU868");
 8009bac:	483f      	ldr	r0, [pc, #252]	; (8009cac <LoraWanInit+0x184>)
 8009bae:	f006 fef1 	bl	8010994 <DebugPrintf>
			break;
 8009bb2:	e00f      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_KR920:
			DebugPrintf("KR920");
 8009bb4:	483e      	ldr	r0, [pc, #248]	; (8009cb0 <LoraWanInit+0x188>)
 8009bb6:	f006 feed 	bl	8010994 <DebugPrintf>
			break;
 8009bba:	e00b      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_IN865:
			DebugPrintf("IN865");
 8009bbc:	483d      	ldr	r0, [pc, #244]	; (8009cb4 <LoraWanInit+0x18c>)
 8009bbe:	f006 fee9 	bl	8010994 <DebugPrintf>
			break;
 8009bc2:	e007      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_US915:
			DebugPrintf("US915");
 8009bc4:	483c      	ldr	r0, [pc, #240]	; (8009cb8 <LoraWanInit+0x190>)
 8009bc6:	f006 fee5 	bl	8010994 <DebugPrintf>
			break;
 8009bca:	e003      	b.n	8009bd4 <LoraWanInit+0xac>
		case LORAMAC_REGION_US915_HYBRID:
			DebugPrintf("US915_HYBRID ");
 8009bcc:	483b      	ldr	r0, [pc, #236]	; (8009cbc <LoraWanInit+0x194>)
 8009bce:	f006 fee1 	bl	8010994 <DebugPrintf>
			break;
 8009bd2:	bf00      	nop
	}
	DebugPrintf(" Class %X start!\r\n\r\n",loraWanClass+10);
 8009bd4:	4b3a      	ldr	r3, [pc, #232]	; (8009cc0 <LoraWanInit+0x198>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	330a      	adds	r3, #10
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4839      	ldr	r0, [pc, #228]	; (8009cc4 <LoraWanInit+0x19c>)
 8009bde:	f006 fed9 	bl	8010994 <DebugPrintf>

	if(region == LORAMAC_REGION_AS923_AS1 || region == LORAMAC_REGION_AS923_AS2)
 8009be2:	79bb      	ldrb	r3, [r7, #6]
 8009be4:	2b0b      	cmp	r3, #11
 8009be6:	d002      	beq.n	8009bee <LoraWanInit+0xc6>
 8009be8:	79bb      	ldrb	r3, [r7, #6]
 8009bea:	2b0c      	cmp	r3, #12
 8009bec:	d101      	bne.n	8009bf2 <LoraWanInit+0xca>
		region = LORAMAC_REGION_AS923;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	71bb      	strb	r3, [r7, #6]
	MibRequestConfirm_t mibReq;

	LoRaMacPrimitive.MacMcpsConfirm = McpsConfirm;
 8009bf2:	4b35      	ldr	r3, [pc, #212]	; (8009cc8 <LoraWanInit+0x1a0>)
 8009bf4:	4a35      	ldr	r2, [pc, #212]	; (8009ccc <LoraWanInit+0x1a4>)
 8009bf6:	601a      	str	r2, [r3, #0]
	LoRaMacPrimitive.MacMcpsIndication = McpsIndication;
 8009bf8:	4b33      	ldr	r3, [pc, #204]	; (8009cc8 <LoraWanInit+0x1a0>)
 8009bfa:	4a35      	ldr	r2, [pc, #212]	; (8009cd0 <LoraWanInit+0x1a8>)
 8009bfc:	605a      	str	r2, [r3, #4]
	LoRaMacPrimitive.MacMlmeConfirm = MlmeConfirm;
 8009bfe:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <LoraWanInit+0x1a0>)
 8009c00:	4a34      	ldr	r2, [pc, #208]	; (8009cd4 <LoraWanInit+0x1ac>)
 8009c02:	609a      	str	r2, [r3, #8]
	LoRaMacPrimitive.MacMlmeIndication = MlmeIndication;
 8009c04:	4b30      	ldr	r3, [pc, #192]	; (8009cc8 <LoraWanInit+0x1a0>)
 8009c06:	4a34      	ldr	r2, [pc, #208]	; (8009cd8 <LoraWanInit+0x1b0>)
 8009c08:	60da      	str	r2, [r3, #12]
	LoRaMacCallback.GetBatteryLevel = BoardGetBatteryLevel;
 8009c0a:	4b34      	ldr	r3, [pc, #208]	; (8009cdc <LoraWanInit+0x1b4>)
 8009c0c:	4a34      	ldr	r2, [pc, #208]	; (8009ce0 <LoraWanInit+0x1b8>)
 8009c0e:	601a      	str	r2, [r3, #0]
	LoRaMacCallback.GetTemperatureLevel = NULL;
 8009c10:	4b32      	ldr	r3, [pc, #200]	; (8009cdc <LoraWanInit+0x1b4>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	605a      	str	r2, [r3, #4]
	LoRaMacInitialization( &LoRaMacPrimitive, &LoRaMacCallback,region);
 8009c16:	79bb      	ldrb	r3, [r7, #6]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	4930      	ldr	r1, [pc, #192]	; (8009cdc <LoraWanInit+0x1b4>)
 8009c1c:	482a      	ldr	r0, [pc, #168]	; (8009cc8 <LoraWanInit+0x1a0>)
 8009c1e:	f7fe f8a9 	bl	8007d74 <LoRaMacInitialization>

	TimerStop( &TxNextPacketTimer );
 8009c22:	4830      	ldr	r0, [pc, #192]	; (8009ce4 <LoraWanInit+0x1bc>)
 8009c24:	f006 fd4c 	bl	80106c0 <TimerStop>
	TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
 8009c28:	492f      	ldr	r1, [pc, #188]	; (8009ce8 <LoraWanInit+0x1c0>)
 8009c2a:	482e      	ldr	r0, [pc, #184]	; (8009ce4 <LoraWanInit+0x1bc>)
 8009c2c:	f006 fbe6 	bl	80103fc <TimerInit>

	mibReq.Type = MIB_ADR;
 8009c30:	2302      	movs	r3, #2
 8009c32:	733b      	strb	r3, [r7, #12]
	mibReq.Param.AdrEnable = loraWanAdr;
 8009c34:	4b2d      	ldr	r3, [pc, #180]	; (8009cec <LoraWanInit+0x1c4>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	743b      	strb	r3, [r7, #16]
	LoRaMacMibSetRequestConfirm( &mibReq );
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe fc72 	bl	8008528 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_PUBLIC_NETWORK;
 8009c44:	2307      	movs	r3, #7
 8009c46:	733b      	strb	r3, [r7, #12]
	mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	743b      	strb	r3, [r7, #16]
	LoRaMacMibSetRequestConfirm( &mibReq );
 8009c4c:	f107 030c 	add.w	r3, r7, #12
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fc69 	bl	8008528 <LoRaMacMibSetRequestConfirm>

	lwan_dev_params_update();
 8009c56:	f7ff ff07 	bl	8009a68 <lwan_dev_params_update>

	mibReq.Type = MIB_DEVICE_CLASS;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	733b      	strb	r3, [r7, #12]
	LoRaMacMibGetRequestConfirm( &mibReq );
 8009c5e:	f107 030c 	add.w	r3, r7, #12
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fb26 	bl	80082b4 <LoRaMacMibGetRequestConfirm>
	
	if(loraWanClass != mibReq.Param.Class)
 8009c68:	7c3a      	ldrb	r2, [r7, #16]
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <LoraWanInit+0x198>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d007      	beq.n	8009c82 <LoraWanInit+0x15a>
	{
		mibReq.Param.Class = loraWanClass;
 8009c72:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <LoraWanInit+0x198>)
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	743b      	strb	r3, [r7, #16]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009c78:	f107 030c 	add.w	r3, r7, #12
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fc53 	bl	8008528 <LoRaMacMibSetRequestConfirm>
	}

	deviceState = DEVICE_STATE_JOIN;
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <LoraWanInit+0x1c8>)
 8009c84:	2201      	movs	r2, #1
 8009c86:	701a      	strb	r2, [r3, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	08012cc8 	.word	0x08012cc8
 8009c94:	08012cd4 	.word	0x08012cd4
 8009c98:	08012cf0 	.word	0x08012cf0
 8009c9c:	08012d0c 	.word	0x08012d0c
 8009ca0:	08012d14 	.word	0x08012d14
 8009ca4:	08012d1c 	.word	0x08012d1c
 8009ca8:	08012d24 	.word	0x08012d24
 8009cac:	08012d2c 	.word	0x08012d2c
 8009cb0:	08012d34 	.word	0x08012d34
 8009cb4:	08012d3c 	.word	0x08012d3c
 8009cb8:	08012d44 	.word	0x08012d44
 8009cbc:	08012d4c 	.word	0x08012d4c
 8009cc0:	20000774 	.word	0x20000774
 8009cc4:	08012d5c 	.word	0x08012d5c
 8009cc8:	20000b1c 	.word	0x20000b1c
 8009ccc:	08009841 	.word	0x08009841
 8009cd0:	08009909 	.word	0x08009909
 8009cd4:	080099a9 	.word	0x080099a9
 8009cd8:	08009a49 	.word	0x08009a49
 8009cdc:	20000b2c 	.word	0x20000b2c
 8009ce0:	0800b559 	.word	0x0800b559
 8009ce4:	20000b04 	.word	0x20000b04
 8009ce8:	080097b5 	.word	0x080097b5
 8009cec:	20000081 	.word	0x20000081
 8009cf0:	20000b00 	.word	0x20000b00

08009cf4 <LoraWanJoin>:

void LoraWanJoin()
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af00      	add	r7, sp, #0
	if( overTheAirActivation )
 8009cfa:	4b30      	ldr	r3, [pc, #192]	; (8009dbc <LoraWanJoin+0xc8>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d019      	beq.n	8009d36 <LoraWanJoin+0x42>
	{
		//DebugPrintf("joining...");
		MlmeReq_t mlmeReq;
		
		mlmeReq.Type = MLME_JOIN;
 8009d02:	2300      	movs	r3, #0
 8009d04:	733b      	strb	r3, [r7, #12]
		mlmeReq.Req.Join.DevEui = devEui;
 8009d06:	4b2e      	ldr	r3, [pc, #184]	; (8009dc0 <LoraWanJoin+0xcc>)
 8009d08:	613b      	str	r3, [r7, #16]
		mlmeReq.Req.Join.AppEui = appEui;
 8009d0a:	4b2e      	ldr	r3, [pc, #184]	; (8009dc4 <LoraWanJoin+0xd0>)
 8009d0c:	617b      	str	r3, [r7, #20]
		mlmeReq.Req.Join.AppKey = appKey;
 8009d0e:	4b2e      	ldr	r3, [pc, #184]	; (8009dc8 <LoraWanJoin+0xd4>)
 8009d10:	61bb      	str	r3, [r7, #24]
		mlmeReq.Req.Join.NbTrials = 3;
 8009d12:	2303      	movs	r3, #3
 8009d14:	773b      	strb	r3, [r7, #28]

        if( nextTx == true )
 8009d16:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <LoraWanJoin+0xd8>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <LoraWanJoin+0x3a>
        {
        	DebugPrintf("+JOIN:STARTING...\r\n");
 8009d1e:	482c      	ldr	r0, [pc, #176]	; (8009dd0 <LoraWanJoin+0xdc>)
 8009d20:	f006 fe38 	bl	8010994 <DebugPrintf>
        	LoRaMacMlmeRequest( &mlmeReq );
 8009d24:	f107 030c 	add.w	r3, r7, #12
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe fef5 	bl	8008b18 <LoRaMacMlmeRequest>
        }
        deviceState = DEVICE_STATE_SLEEP;
 8009d2e:	4b29      	ldr	r3, [pc, #164]	; (8009dd4 <LoraWanJoin+0xe0>)
 8009d30:	2204      	movs	r2, #4
 8009d32:	701a      	strb	r2, [r3, #0]
		mibReq.Param.IsNetworkJoined = true;
		LoRaMacMibSetRequestConfirm( &mibReq );
		
		deviceState = DEVICE_STATE_SEND;
	}
}
 8009d34:	e03e      	b.n	8009db4 <LoraWanJoin+0xc0>
        if( devAddr == 0 )
 8009d36:	4b28      	ldr	r3, [pc, #160]	; (8009dd8 <LoraWanJoin+0xe4>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10e      	bne.n	8009d5c <LoraWanJoin+0x68>
            srand1( BoardGetRandomSeed( ) );
 8009d3e:	f001 fbeb 	bl	800b518 <BoardGetRandomSeed>
 8009d42:	4603      	mov	r3, r0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f006 fe51 	bl	80109ec <srand1>
            devAddr = randr( 0, 0x01FFFFFF );
 8009d4a:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f006 fe5a 	bl	8010a08 <randr>
 8009d54:	4603      	mov	r3, r0
 8009d56:	461a      	mov	r2, r3
 8009d58:	4b1f      	ldr	r3, [pc, #124]	; (8009dd8 <LoraWanJoin+0xe4>)
 8009d5a:	601a      	str	r2, [r3, #0]
		mibReq.Type = MIB_NET_ID;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	703b      	strb	r3, [r7, #0]
		mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009d60:	2300      	movs	r3, #0
 8009d62:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009d64:	463b      	mov	r3, r7
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe fbde 	bl	8008528 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_DEV_ADDR;
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	703b      	strb	r3, [r7, #0]
		mibReq.Param.DevAddr = devAddr;
 8009d70:	4b19      	ldr	r3, [pc, #100]	; (8009dd8 <LoraWanJoin+0xe4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009d76:	463b      	mov	r3, r7
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fbd5 	bl	8008528 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NWK_SKEY;
 8009d7e:	2305      	movs	r3, #5
 8009d80:	703b      	strb	r3, [r7, #0]
		mibReq.Param.NwkSKey = nwkSKey;
 8009d82:	4b16      	ldr	r3, [pc, #88]	; (8009ddc <LoraWanJoin+0xe8>)
 8009d84:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009d86:	463b      	mov	r3, r7
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fbcd 	bl	8008528 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_APP_SKEY;
 8009d8e:	2306      	movs	r3, #6
 8009d90:	703b      	strb	r3, [r7, #0]
		mibReq.Param.AppSKey = appSKey;
 8009d92:	4b13      	ldr	r3, [pc, #76]	; (8009de0 <LoraWanJoin+0xec>)
 8009d94:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009d96:	463b      	mov	r3, r7
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fbc5 	bl	8008528 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NETWORK_JOINED;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	703b      	strb	r3, [r7, #0]
		mibReq.Param.IsNetworkJoined = true;
 8009da2:	2301      	movs	r3, #1
 8009da4:	713b      	strb	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009da6:	463b      	mov	r3, r7
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe fbbd 	bl	8008528 <LoRaMacMibSetRequestConfirm>
		deviceState = DEVICE_STATE_SEND;
 8009dae:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <LoraWanJoin+0xe0>)
 8009db0:	2202      	movs	r2, #2
 8009db2:	701a      	strb	r2, [r3, #0]
}
 8009db4:	bf00      	nop
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20000080 	.word	0x20000080
 8009dc0:	20000030 	.word	0x20000030
 8009dc4:	2000076c 	.word	0x2000076c
 8009dc8:	20000038 	.word	0x20000038
 8009dcc:	2000002d 	.word	0x2000002d
 8009dd0:	08012d74 	.word	0x08012d74
 8009dd4:	20000b00 	.word	0x20000b00
 8009dd8:	20000068 	.word	0x20000068
 8009ddc:	20000048 	.word	0x20000048
 8009de0:	20000058 	.word	0x20000058

08009de4 <LoraWanSend>:

void LoraWanSend()
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
	if( nextTx == true )
 8009dea:	4b10      	ldr	r3, [pc, #64]	; (8009e2c <LoraWanSend+0x48>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d017      	beq.n	8009e22 <LoraWanSend+0x3e>
	{
		MibRequestConfirm_t mibReq;
		mibReq.Type = MIB_DEVICE_CLASS;
 8009df2:	2300      	movs	r3, #0
 8009df4:	713b      	strb	r3, [r7, #4]
		LoRaMacMibGetRequestConfirm( &mibReq );
 8009df6:	1d3b      	adds	r3, r7, #4
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fe fa5b 	bl	80082b4 <LoRaMacMibGetRequestConfirm>

		if(loraWanClass != mibReq.Param.Class)
 8009dfe:	7a3a      	ldrb	r2, [r7, #8]
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <LoraWanSend+0x4c>)
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d006      	beq.n	8009e16 <LoraWanSend+0x32>
		{
			mibReq.Param.Class = loraWanClass;
 8009e08:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <LoraWanSend+0x4c>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	723b      	strb	r3, [r7, #8]
			LoRaMacMibSetRequestConfirm( &mibReq );
 8009e0e:	1d3b      	adds	r3, r7, #4
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fe fb89 	bl	8008528 <LoRaMacMibSetRequestConfirm>
		}

		nextTx = SendFrame( );
 8009e16:	f7ff fc5f 	bl	80096d8 <SendFrame>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <LoraWanSend+0x48>)
 8009e20:	701a      	strb	r2, [r3, #0]
	}
}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	2000002d 	.word	0x2000002d
 8009e30:	20000774 	.word	0x20000774

08009e34 <LoraWanCycle>:

void LoraWanCycle(uint32_t dutyCycle)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	TimerSetValue( &TxNextPacketTimer, dutyCycle );
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	4805      	ldr	r0, [pc, #20]	; (8009e54 <LoraWanCycle+0x20>)
 8009e40:	f006 fcfa 	bl	8010838 <TimerSetValue>
	TimerStart( &TxNextPacketTimer );
 8009e44:	4803      	ldr	r0, [pc, #12]	; (8009e54 <LoraWanCycle+0x20>)
 8009e46:	f006 faf3 	bl	8010430 <TimerStart>
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000b04 	.word	0x20000b04

08009e58 <RegionIsActive>:
#define US915_HYBRID_APPLY_DR_OFFSET( )
#define US915_HYBRID_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009e62:	79fb      	ldrb	r3, [r7, #7]
 8009e64:	2b05      	cmp	r3, #5
 8009e66:	d101      	bne.n	8009e6c <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        US915_HYBRID_IS_ACTIVE( );
        default:
        {
            return false;
 8009e6c:	2300      	movs	r3, #0
        }
    }
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	6039      	str	r1, [r7, #0]
 8009e82:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8009e84:	2300      	movs	r3, #0
 8009e86:	60bb      	str	r3, [r7, #8]
    switch( region )
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	2b05      	cmp	r3, #5
 8009e8c:	d105      	bne.n	8009e9a <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8009e8e:	6838      	ldr	r0, [r7, #0]
 8009e90:	f007 fb64 	bl	801155c <RegionEU868GetPhyParam>
 8009e94:	4603      	mov	r3, r0
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e001      	b.n	8009e9e <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        US915_HYBRID_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	6039      	str	r1, [r7, #0]
 8009eb4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	2b05      	cmp	r3, #5
 8009eba:	d103      	bne.n	8009ec4 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8009ebc:	6838      	ldr	r0, [r7, #0]
 8009ebe:	f007 fc57 	bl	8011770 <RegionEU868SetBandTxDone>
 8009ec2:	e000      	b.n	8009ec6 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        US915_HYBRID_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8009ec4:	bf00      	nop
        }
    }
}
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitType_t type )
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	460a      	mov	r2, r1
 8009ed6:	71fb      	strb	r3, [r7, #7]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	d104      	bne.n	8009eec <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8009ee2:	79bb      	ldrb	r3, [r7, #6]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f007 fc65 	bl	80117b4 <RegionEU868InitDefaults>
 8009eea:	e000      	b.n	8009eee <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        US915_HYBRID_INIT_DEFAULTS( );
        default:
        {
            break;
 8009eec:	bf00      	nop
        }
    }
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	4603      	mov	r3, r0
 8009efe:	6039      	str	r1, [r7, #0]
 8009f00:	71fb      	strb	r3, [r7, #7]
 8009f02:	4613      	mov	r3, r2
 8009f04:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	d106      	bne.n	8009f1a <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8009f0c:	79bb      	ldrb	r3, [r7, #6]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6838      	ldr	r0, [r7, #0]
 8009f12:	f007 fc8d 	bl	8011830 <RegionEU868Verify>
 8009f16:	4603      	mov	r3, r0
 8009f18:	e000      	b.n	8009f1c <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        US915_HYBRID_VERIFY( );
        default:
        {
            return false;
 8009f1a:	2300      	movs	r3, #0
        }
    }
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009f30:	79fb      	ldrb	r3, [r7, #7]
 8009f32:	2b05      	cmp	r3, #5
 8009f34:	d103      	bne.n	8009f3e <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8009f36:	6838      	ldr	r0, [r7, #0]
 8009f38:	f007 fd30 	bl	801199c <RegionEU868ApplyCFList>
 8009f3c:	e000      	b.n	8009f40 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        US915_HYBRID_APPLY_CF_LIST( );
        default:
        {
            break;
 8009f3e:	bf00      	nop
        }
    }
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b05      	cmp	r3, #5
 8009f58:	d104      	bne.n	8009f64 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8009f5a:	6838      	ldr	r0, [r7, #0]
 8009f5c:	f007 fd8a 	bl	8011a74 <RegionEU868ChanMaskSet>
 8009f60:	4603      	mov	r3, r0
 8009f62:	e000      	b.n	8009f66 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        US915_HYBRID_CHAN_MASK_SET( );
        default:
        {
            return false;
 8009f64:	2300      	movs	r3, #0
        }
    }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3708      	adds	r7, #8
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <RegionAdrNext>:

bool RegionAdrNext( LoRaMacRegion_t region, AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
 8009f78:	603b      	str	r3, [r7, #0]
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	2b05      	cmp	r3, #5
 8009f82:	d107      	bne.n	8009f94 <RegionAdrNext+0x26>
        AS923_ADR_NEXT( );
        AU915_ADR_NEXT( );
        CN470_ADR_NEXT( );
        CN779_ADR_NEXT( );
        EU433_ADR_NEXT( );
        EU868_ADR_NEXT( );
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	68b8      	ldr	r0, [r7, #8]
 8009f8c:	f007 fd98 	bl	8011ac0 <RegionEU868AdrNext>
 8009f90:	4603      	mov	r3, r0
 8009f92:	e000      	b.n	8009f96 <RegionAdrNext+0x28>
        IN865_ADR_NEXT( );
        US915_ADR_NEXT( );
        US915_HYBRID_ADR_NEXT( );
        default:
        {
            return false;
 8009f94:	2300      	movs	r3, #0
        }
    }
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	603b      	str	r3, [r7, #0]
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
 8009faa:	460b      	mov	r3, r1
 8009fac:	71bb      	strb	r3, [r7, #6]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	717b      	strb	r3, [r7, #5]
    switch( region )
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	2b05      	cmp	r3, #5
 8009fb6:	d107      	bne.n	8009fc8 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009fb8:	7979      	ldrb	r1, [r7, #5]
 8009fba:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	f007 fde1 	bl	8011b88 <RegionEU868ComputeRxWindowParameters>
 8009fc6:	e000      	b.n	8009fca <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_HYBRID_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8009fc8:	bf00      	nop
        }
    }
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	4603      	mov	r3, r0
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b05      	cmp	r3, #5
 8009fe4:	d105      	bne.n	8009ff2 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	68b8      	ldr	r0, [r7, #8]
 8009fea:	f007 fe23 	bl	8011c34 <RegionEU868RxConfig>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	e000      	b.n	8009ff4 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        US915_HYBRID_RX_CONFIG( );
        default:
        {
            return false;
 8009ff2:	2300      	movs	r3, #0
        }
    }
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	60b9      	str	r1, [r7, #8]
 800a004:	607a      	str	r2, [r7, #4]
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	4603      	mov	r3, r0
 800a00a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	2b05      	cmp	r3, #5
 800a010:	d106      	bne.n	800a020 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	68b8      	ldr	r0, [r7, #8]
 800a018:	f007 fed2 	bl	8011dc0 <RegionEU868TxConfig>
 800a01c:	4603      	mov	r3, r0
 800a01e:	e000      	b.n	800a022 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        US915_HYBRID_TX_CONFIG( );
        default:
        {
            return false;
 800a020:	2300      	movs	r3, #0
        }
    }
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b086      	sub	sp, #24
 800a02e:	af02      	add	r7, sp, #8
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b05      	cmp	r3, #5
 800a03e:	d109      	bne.n	800a054 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	68b8      	ldr	r0, [r7, #8]
 800a04c:	f007 ff70 	bl	8011f30 <RegionEU868LinkAdrReq>
 800a050:	4603      	mov	r3, r0
 800a052:	e000      	b.n	800a056 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        US915_HYBRID_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800a054:	2300      	movs	r3, #0
        }
    }
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	4603      	mov	r3, r0
 800a066:	6039      	str	r1, [r7, #0]
 800a068:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	2b05      	cmp	r3, #5
 800a06e:	d104      	bne.n	800a07a <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 800a070:	6838      	ldr	r0, [r7, #0]
 800a072:	f008 f82d 	bl	80120d0 <RegionEU868RxParamSetupReq>
 800a076:	4603      	mov	r3, r0
 800a078:	e000      	b.n	800a07c <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        US915_HYBRID_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800a07a:	2300      	movs	r3, #0
        }
    }
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	6039      	str	r1, [r7, #0]
 800a08e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	2b05      	cmp	r3, #5
 800a094:	d104      	bne.n	800a0a0 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 800a096:	6838      	ldr	r0, [r7, #0]
 800a098:	f008 f856 	bl	8012148 <RegionEU868NewChannelReq>
 800a09c:	4603      	mov	r3, r0
 800a09e:	e000      	b.n	800a0a2 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        US915_HYBRID_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800a0a0:	2300      	movs	r3, #0
        }
    }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	6039      	str	r1, [r7, #0]
 800a0b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b05      	cmp	r3, #5
 800a0ba:	d104      	bne.n	800a0c6 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 800a0bc:	6838      	ldr	r0, [r7, #0]
 800a0be:	f008 f89f 	bl	8012200 <RegionEU868TxParamSetupReq>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	e000      	b.n	800a0c8 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        US915_HYBRID_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800a0c6:	2300      	movs	r3, #0
        }
    }
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	6039      	str	r1, [r7, #0]
 800a0da:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	d104      	bne.n	800a0ec <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 800a0e2:	6838      	ldr	r0, [r7, #0]
 800a0e4:	f008 f898 	bl	8012218 <RegionEU868DlChannelReq>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	e000      	b.n	800a0ee <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        US915_HYBRID_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800a0ec:	2300      	movs	r3, #0
        }
    }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, AlternateDrParams_t* alternateDr )
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	6039      	str	r1, [r7, #0]
 800a100:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a102:	79fb      	ldrb	r3, [r7, #7]
 800a104:	2b05      	cmp	r3, #5
 800a106:	d104      	bne.n	800a112 <RegionAlternateDr+0x1c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 800a108:	6838      	ldr	r0, [r7, #0]
 800a10a:	f008 f8c7 	bl	801229c <RegionEU868AlternateDr>
 800a10e:	4603      	mov	r3, r0
 800a110:	e000      	b.n	800a114 <RegionAlternateDr+0x1e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        US915_HYBRID_ALTERNATE_DR( );
        default:
        {
            return 0;
 800a112:	2300      	movs	r3, #0
        }
    }
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	d103      	bne.n	800a136 <RegionCalcBackOff+0x1a>
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
 800a12e:	6838      	ldr	r0, [r7, #0]
 800a130:	f008 f906 	bl	8012340 <RegionEU868CalcBackOff>
 800a134:	e000      	b.n	800a138 <RegionCalcBackOff+0x1c>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        US915_HYBRID_CALC_BACKOFF( );
        default:
        {
            break;
 800a136:	bf00      	nop
        }
    }
}
 800a138:	bf00      	nop
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <RegionNextChannel>:

bool RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b05      	cmp	r3, #5
 800a154:	d107      	bne.n	800a166 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	68b8      	ldr	r0, [r7, #8]
 800a15e:	f008 f95f 	bl	8012420 <RegionEU868NextChannel>
 800a162:	4603      	mov	r3, r0
 800a164:	e000      	b.n	800a168 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        US915_HYBRID_NEXT_CHANNEL( );
        default:
        {
            return false;
 800a166:	2300      	movs	r3, #0
        }
    }
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a17c:	79fb      	ldrb	r3, [r7, #7]
 800a17e:	2b05      	cmp	r3, #5
 800a180:	d104      	bne.n	800a18c <RegionChannelAdd+0x1c>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 800a182:	6838      	ldr	r0, [r7, #0]
 800a184:	f008 f9e4 	bl	8012550 <RegionEU868ChannelAdd>
 800a188:	4603      	mov	r3, r0
 800a18a:	e000      	b.n	800a18e <RegionChannelAdd+0x1e>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        US915_HYBRID_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800a18c:	2303      	movs	r3, #3
        }
    }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	4603      	mov	r3, r0
 800a19e:	6039      	str	r1, [r7, #0]
 800a1a0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 800a1a2:	79fb      	ldrb	r3, [r7, #7]
 800a1a4:	2b05      	cmp	r3, #5
 800a1a6:	d103      	bne.n	800a1b0 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800a1a8:	6838      	ldr	r0, [r7, #0]
 800a1aa:	f008 fabf 	bl	801272c <RegionEU868SetContinuousWave>
 800a1ae:	e000      	b.n	800a1b2 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        US915_HYBRID_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 800a1b0:	bf00      	nop
        }
    }
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800a1ba:	b590      	push	{r4, r7, lr}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	71fb      	strb	r3, [r7, #7]
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	71bb      	strb	r3, [r7, #6]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	717b      	strb	r3, [r7, #5]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	713b      	strb	r3, [r7, #4]
    switch( region )
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	2b05      	cmp	r3, #5
 800a1dc:	d109      	bne.n	800a1f2 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 800a1de:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800a1e2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800a1e6:	79bb      	ldrb	r3, [r7, #6]
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f008 faeb 	bl	80127c4 <RegionEU868ApplyDrOffset>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	e000      	b.n	800a1f4 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        US915_HYBRID_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800a1f2:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <CountChannels>:
#define BACKOFF_DC_24_HOURS     3



static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	460a      	mov	r2, r1
 800a206:	80fb      	strh	r3, [r7, #6]
 800a208:	4613      	mov	r3, r2
 800a20a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 800a210:	2300      	movs	r3, #0
 800a212:	73bb      	strb	r3, [r7, #14]
 800a214:	e011      	b.n	800a23a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800a216:	88fa      	ldrh	r2, [r7, #6]
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	2101      	movs	r1, #1
 800a21c:	fa01 f303 	lsl.w	r3, r1, r3
 800a220:	401a      	ands	r2, r3
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	2101      	movs	r1, #1
 800a226:	fa01 f303 	lsl.w	r3, r1, r3
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d102      	bne.n	800a234 <CountChannels+0x38>
        {
            nbActiveBits++;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	3301      	adds	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 800a234:	7bbb      	ldrb	r3, [r7, #14]
 800a236:	3301      	adds	r3, #1
 800a238:	73bb      	strb	r3, [r7, #14]
 800a23a:	7bba      	ldrb	r2, [r7, #14]
 800a23c:	797b      	ldrb	r3, [r7, #5]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d3e9      	bcc.n	800a216 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 800a242:	7bfb      	ldrb	r3, [r7, #15]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	bc80      	pop	{r7}
 800a24c:	4770      	bx	lr
	...

0800a250 <RegionCommonGetJoinDc>:



uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	81fb      	strh	r3, [r7, #14]

    if( elapsedTime < 3600000 )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a0a      	ldr	r2, [pc, #40]	; (800a288 <RegionCommonGetJoinDc+0x38>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d202      	bcs.n	800a26a <RegionCommonGetJoinDc+0x1a>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 800a264:	2301      	movs	r3, #1
 800a266:	81fb      	strh	r3, [r7, #14]
 800a268:	e008      	b.n	800a27c <RegionCommonGetJoinDc+0x2c>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a07      	ldr	r2, [pc, #28]	; (800a28c <RegionCommonGetJoinDc+0x3c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d202      	bcs.n	800a278 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 800a272:	2302      	movs	r3, #2
 800a274:	81fb      	strh	r3, [r7, #14]
 800a276:	e001      	b.n	800a27c <RegionCommonGetJoinDc+0x2c>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800a278:	2303      	movs	r3, #3
 800a27a:	81fb      	strh	r3, [r7, #14]
    }
    return dutyCycle;
 800a27c:	89fb      	ldrh	r3, [r7, #14]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	bc80      	pop	{r7}
 800a286:	4770      	bx	lr
 800a288:	0036ee80 	.word	0x0036ee80
 800a28c:	025c3f80 	.word	0x025c3f80

0800a290 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6039      	str	r1, [r7, #0]
 800a298:	4611      	mov	r1, r2
 800a29a:	461a      	mov	r2, r3
 800a29c:	4603      	mov	r3, r0
 800a29e:	71fb      	strb	r3, [r7, #7]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	71bb      	strb	r3, [r7, #6]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800a2a8:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800a2ac:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800a2b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 f866 	bl	800a386 <RegionCommonValueInRange>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e05c      	b.n	800a37e <RegionCommonChanVerifyDr+0xee>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]
 800a2cc:	e052      	b.n	800a374 <RegionCommonChanVerifyDr+0xe4>
    {
        //4.29 workaround for when disable all channles not return server 0306 but return 0304
        if (channelsMask[k] == 0)
 800a2ce:	7bbb      	ldrb	r3, [r7, #14]
 800a2d0:	005b      	lsls	r3, r3, #1
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <RegionCommonChanVerifyDr+0x50>
            return true;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e04e      	b.n	800a37e <RegionCommonChanVerifyDr+0xee>
        for( uint8_t j = 0; j < 16; j++ )
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	737b      	strb	r3, [r7, #13]
 800a2e4:	e03d      	b.n	800a362 <RegionCommonChanVerifyDr+0xd2>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	7b7b      	ldrb	r3, [r7, #13]
 800a2f4:	fa42 f303 	asr.w	r3, r2, r3
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d02d      	beq.n	800a35c <RegionCommonChanVerifyDr+0xcc>
            {// Check datarate validity for enabled channels
#ifdef CONFIG_LINKWAN 
                if( RegionCommonValueInRange( dr, ( channels[(i + j) % 8].DrRange.Fields.Min & 0x0F ),
                                                  ( channels[(i + j) % 8].DrRange.Fields.Max & 0x0F ) ) == 1 )
#else
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a300:	7bfa      	ldrb	r2, [r7, #15]
 800a302:	7b7b      	ldrb	r3, [r7, #13]
 800a304:	4413      	add	r3, r2
 800a306:	461a      	mov	r2, r3
 800a308:	4613      	mov	r3, r2
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	461a      	mov	r2, r3
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	4413      	add	r3, r2
 800a316:	7a1b      	ldrb	r3, [r3, #8]
 800a318:	f343 0303 	sbfx	r3, r3, #0, #4
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	f003 030f 	and.w	r3, r3, #15
 800a322:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800a324:	7bfa      	ldrb	r2, [r7, #15]
 800a326:	7b7b      	ldrb	r3, [r7, #13]
 800a328:	4413      	add	r3, r2
 800a32a:	461a      	mov	r2, r3
 800a32c:	4613      	mov	r3, r2
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	461a      	mov	r2, r3
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	4413      	add	r3, r2
 800a33a:	7a1b      	ldrb	r3, [r3, #8]
 800a33c:	f343 1303 	sbfx	r3, r3, #4, #4
 800a340:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a342:	f003 030f 	and.w	r3, r3, #15
 800a346:	b25a      	sxtb	r2, r3
 800a348:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 f81a 	bl	800a386 <RegionCommonValueInRange>
 800a352:	4603      	mov	r3, r0
 800a354:	2b01      	cmp	r3, #1
 800a356:	d101      	bne.n	800a35c <RegionCommonChanVerifyDr+0xcc>
#endif
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800a358:	2301      	movs	r3, #1
 800a35a:	e010      	b.n	800a37e <RegionCommonChanVerifyDr+0xee>
        for( uint8_t j = 0; j < 16; j++ )
 800a35c:	7b7b      	ldrb	r3, [r7, #13]
 800a35e:	3301      	adds	r3, #1
 800a360:	737b      	strb	r3, [r7, #13]
 800a362:	7b7b      	ldrb	r3, [r7, #13]
 800a364:	2b0f      	cmp	r3, #15
 800a366:	d9be      	bls.n	800a2e6 <RegionCommonChanVerifyDr+0x56>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a368:	7bfb      	ldrb	r3, [r7, #15]
 800a36a:	3310      	adds	r3, #16
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	3301      	adds	r3, #1
 800a372:	73bb      	strb	r3, [r7, #14]
 800a374:	7bfa      	ldrb	r2, [r7, #15]
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d3a8      	bcc.n	800a2ce <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800a386:	b480      	push	{r7}
 800a388:	b083      	sub	sp, #12
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	4603      	mov	r3, r0
 800a38e:	71fb      	strb	r3, [r7, #7]
 800a390:	460b      	mov	r3, r1
 800a392:	71bb      	strb	r3, [r7, #6]
 800a394:	4613      	mov	r3, r2
 800a396:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800a398:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a39c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	db07      	blt.n	800a3b4 <RegionCommonValueInRange+0x2e>
 800a3a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a3a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	dc01      	bgt.n	800a3b4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e000      	b.n	800a3b6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bc80      	pop	{r7}
 800a3be:	4770      	bx	lr

0800a3c0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	70fb      	strb	r3, [r7, #3]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	091b      	lsrs	r3, r3, #4
 800a3d4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800a3d6:	78bb      	ldrb	r3, [r7, #2]
 800a3d8:	091b      	lsrs	r3, r3, #4
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	7bfa      	ldrb	r2, [r7, #15]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d803      	bhi.n	800a3ea <RegionCommonChanDisable+0x2a>
 800a3e2:	78fa      	ldrb	r2, [r7, #3]
 800a3e4:	78bb      	ldrb	r3, [r7, #2]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d301      	bcc.n	800a3ee <RegionCommonChanDisable+0x2e>
    {
        return false;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e017      	b.n	800a41e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	b21a      	sxth	r2, r3
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	f003 030f 	and.w	r3, r3, #15
 800a400:	2101      	movs	r1, #1
 800a402:	fa01 f303 	lsl.w	r3, r1, r3
 800a406:	b21b      	sxth	r3, r3
 800a408:	43db      	mvns	r3, r3
 800a40a:	b21b      	sxth	r3, r3
 800a40c:	4013      	ands	r3, r2
 800a40e:	b219      	sxth	r1, r3
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4413      	add	r3, r2
 800a418:	b28a      	uxth	r2, r1
 800a41a:	801a      	strh	r2, [r3, #0]

    return true;
 800a41c:	2301      	movs	r3, #1
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	bc80      	pop	{r7}
 800a426:	4770      	bx	lr

0800a428 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
 800a434:	4613      	mov	r3, r2
 800a436:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800a442:	2300      	movs	r3, #0
 800a444:	e018      	b.n	800a478 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a446:	78fb      	ldrb	r3, [r7, #3]
 800a448:	73bb      	strb	r3, [r7, #14]
 800a44a:	e010      	b.n	800a46e <RegionCommonCountChannels+0x46>
        else
        {
            nbChannels += CountChannels( channelsMask[i], 8 );
        }
#else
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a44c:	7bbb      	ldrb	r3, [r7, #14]
 800a44e:	005b      	lsls	r3, r3, #1
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	2110      	movs	r1, #16
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff fecf 	bl	800a1fc <CountChannels>
 800a45e:	4603      	mov	r3, r0
 800a460:	461a      	mov	r2, r3
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	4413      	add	r3, r2
 800a466:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	3301      	adds	r3, #1
 800a46c:	73bb      	strb	r3, [r7, #14]
 800a46e:	7bba      	ldrb	r2, [r7, #14]
 800a470:	78bb      	ldrb	r3, [r7, #2]
 800a472:	429a      	cmp	r2, r3
 800a474:	d3ea      	bcc.n	800a44c <RegionCommonCountChannels+0x24>
#endif
    }

    return nbChannels;
 800a476:	7bfb      	ldrb	r3, [r7, #15]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d016      	beq.n	800a4c2 <RegionCommonChanMaskCopy+0x42>
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d013      	beq.n	800a4c2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
 800a49e:	e00c      	b.n	800a4ba <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	441a      	add	r2, r3
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	68f9      	ldr	r1, [r7, #12]
 800a4ae:	440b      	add	r3, r1
 800a4b0:	8812      	ldrh	r2, [r2, #0]
 800a4b2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	75fb      	strb	r3, [r7, #23]
 800a4ba:	7dfa      	ldrb	r2, [r7, #23]
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d3ee      	bcc.n	800a4a0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800a4c2:	bf00      	nop
 800a4c4:	371c      	adds	r7, #28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bc80      	pop	{r7}
 800a4ca:	4770      	bx	lr

0800a4cc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	73fb      	strb	r3, [r7, #15]
    if (joined == true) {
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <RegionCommonSetBandTxDone+0x1c>
        band->LastTxDoneTime = lastTxDone;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	609a      	str	r2, [r3, #8]
    } else {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800a4e6:	e005      	b.n	800a4f4 <RegionCommonSetBandTxDone+0x28>
        band->LastTxDoneTime = lastTxDone;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	605a      	str	r2, [r3, #4]
}
 800a4f4:	bf00      	nop
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr

0800a4fe <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800a4fe:	b590      	push	{r4, r7, lr}
 800a500:	b087      	sub	sp, #28
 800a502:	af00      	add	r7, sp, #0
 800a504:	603a      	str	r2, [r7, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	4603      	mov	r3, r0
 800a50a:	71fb      	strb	r3, [r7, #7]
 800a50c:	460b      	mov	r3, r1
 800a50e:	71bb      	strb	r3, [r7, #6]
 800a510:	4613      	mov	r3, r2
 800a512:	717b      	strb	r3, [r7, #5]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800a51a:	2300      	movs	r3, #0
 800a51c:	74fb      	strb	r3, [r7, #19]
 800a51e:	e0a9      	b.n	800a674 <RegionCommonUpdateBandTimeOff+0x176>
    {
        if( joined == false )
 800a520:	79fb      	ldrb	r3, [r7, #7]
 800a522:	f083 0301 	eor.w	r3, r3, #1
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d053      	beq.n	800a5d4 <RegionCommonUpdateBandTimeOff+0xd6>
        {
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800a52c:	7cfb      	ldrb	r3, [r7, #19]
 800a52e:	011b      	lsls	r3, r3, #4
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	4413      	add	r3, r2
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	4618      	mov	r0, r3
 800a538:	f006 f99e 	bl	8010878 <TimerGetElapsedTime>
 800a53c:	4604      	mov	r4, r0
 800a53e:	79bb      	ldrb	r3, [r7, #6]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <RegionCommonUpdateBandTimeOff+0x5a>
 800a544:	7cfb      	ldrb	r3, [r7, #19]
 800a546:	011b      	lsls	r3, r3, #4
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	4413      	add	r3, r2
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	4618      	mov	r0, r3
 800a550:	f006 f992 	bl	8010878 <TimerGetElapsedTime>
 800a554:	4603      	mov	r3, r0
 800a556:	e000      	b.n	800a55a <RegionCommonUpdateBandTimeOff+0x5c>
 800a558:	2300      	movs	r3, #0
 800a55a:	42a3      	cmp	r3, r4
 800a55c:	d209      	bcs.n	800a572 <RegionCommonUpdateBandTimeOff+0x74>
 800a55e:	7cfb      	ldrb	r3, [r7, #19]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	4413      	add	r3, r2
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	f006 f985 	bl	8010878 <TimerGetElapsedTime>
 800a56e:	4603      	mov	r3, r0
 800a570:	e00d      	b.n	800a58e <RegionCommonUpdateBandTimeOff+0x90>
 800a572:	79bb      	ldrb	r3, [r7, #6]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <RegionCommonUpdateBandTimeOff+0x8e>
 800a578:	7cfb      	ldrb	r3, [r7, #19]
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	4413      	add	r3, r2
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	4618      	mov	r0, r3
 800a584:	f006 f978 	bl	8010878 <TimerGetElapsedTime>
 800a588:	4603      	mov	r3, r0
 800a58a:	e000      	b.n	800a58e <RegionCommonUpdateBandTimeOff+0x90>
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 800a590:	7cfb      	ldrb	r3, [r7, #19]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	4413      	add	r3, r2
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d305      	bcc.n	800a5ac <RegionCommonUpdateBandTimeOff+0xae>
            {
                bands[i].TimeOff = 0;
 800a5a0:	7cfb      	ldrb	r3, [r7, #19]
 800a5a2:	011b      	lsls	r3, r3, #4
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 800a5ac:	7cfb      	ldrb	r3, [r7, #19]
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d059      	beq.n	800a66e <RegionCommonUpdateBandTimeOff+0x170>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 800a5ba:	7cfb      	ldrb	r3, [r7, #19]
 800a5bc:	011b      	lsls	r3, r3, #4
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	bf28      	it	cs
 800a5ce:	4613      	movcs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	e04c      	b.n	800a66e <RegionCommonUpdateBandTimeOff+0x170>
            }
        }
        else
        {
            if( dutyCycle == true )
 800a5d4:	79bb      	ldrb	r3, [r7, #6]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d041      	beq.n	800a65e <RegionCommonUpdateBandTimeOff+0x160>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 800a5da:	7cfb      	ldrb	r3, [r7, #19]
 800a5dc:	011b      	lsls	r3, r3, #4
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	68dc      	ldr	r4, [r3, #12]
 800a5e4:	7cfb      	ldrb	r3, [r7, #19]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f006 f942 	bl	8010878 <TimerGetElapsedTime>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	429c      	cmp	r4, r3
 800a5f8:	d805      	bhi.n	800a606 <RegionCommonUpdateBandTimeOff+0x108>
                {
                    bands[i].TimeOff = 0;
 800a5fa:	7cfb      	ldrb	r3, [r7, #19]
 800a5fc:	011b      	lsls	r3, r3, #4
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	4413      	add	r3, r2
 800a602:	2200      	movs	r2, #0
 800a604:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 800a606:	7cfb      	ldrb	r3, [r7, #19]
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d02c      	beq.n	800a66e <RegionCommonUpdateBandTimeOff+0x170>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 800a614:	7cfb      	ldrb	r3, [r7, #19]
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	4413      	add	r3, r2
 800a61c:	68dc      	ldr	r4, [r3, #12]
 800a61e:	7cfb      	ldrb	r3, [r7, #19]
 800a620:	011b      	lsls	r3, r3, #4
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	4413      	add	r3, r2
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f006 f925 	bl	8010878 <TimerGetElapsedTime>
 800a62e:	4603      	mov	r3, r0
 800a630:	1ae3      	subs	r3, r4, r3
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	429a      	cmp	r2, r3
 800a636:	d90f      	bls.n	800a658 <RegionCommonUpdateBandTimeOff+0x15a>
 800a638:	7cfb      	ldrb	r3, [r7, #19]
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	4413      	add	r3, r2
 800a640:	68dc      	ldr	r4, [r3, #12]
 800a642:	7cfb      	ldrb	r3, [r7, #19]
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4413      	add	r3, r2
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f006 f913 	bl	8010878 <TimerGetElapsedTime>
 800a652:	4603      	mov	r3, r0
 800a654:	1ae3      	subs	r3, r4, r3
 800a656:	e000      	b.n	800a65a <RegionCommonUpdateBandTimeOff+0x15c>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e007      	b.n	800a66e <RegionCommonUpdateBandTimeOff+0x170>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 800a662:	7cfb      	ldrb	r3, [r7, #19]
 800a664:	011b      	lsls	r3, r3, #4
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	4413      	add	r3, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800a66e:	7cfb      	ldrb	r3, [r7, #19]
 800a670:	3301      	adds	r3, #1
 800a672:	74fb      	strb	r3, [r7, #19]
 800a674:	7cfa      	ldrb	r2, [r7, #19]
 800a676:	797b      	ldrb	r3, [r7, #5]
 800a678:	429a      	cmp	r2, r3
 800a67a:	f4ff af51 	bcc.w	800a520 <RegionCommonUpdateBandTimeOff+0x22>
            }
        }
    }
    return nextTxDelay;
 800a67e:	697b      	ldr	r3, [r7, #20]
}
 800a680:	4618      	mov	r0, r3
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	bd90      	pop	{r4, r7, pc}

0800a688 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, LinkAdrParams_t* linkAdrParams )
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d13f      	bne.n	800a71e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	b25a      	sxtb	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a6b0:	f003 030f 	and.w	r3, r3, #15
 800a6b4:	b25a      	sxtb	r2, r3
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	091b      	lsrs	r3, r3, #4
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	b25a      	sxtb	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	889b      	ldrh	r3, [r3, #4]
 800a6dc:	b21a      	sxth	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3303      	adds	r3, #3
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	b21b      	sxth	r3, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	b21b      	sxth	r3, r3
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	791a      	ldrb	r2, [r3, #4]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	091b      	lsrs	r3, r3, #4
 800a700:	b2db      	uxtb	r3, r3
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	b2da      	uxtb	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	b2da      	uxtb	r2, r3
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800a71a:	2305      	movs	r3, #5
 800a71c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	bc80      	pop	{r7}
 800a728:	4770      	bx	lr
	...

0800a72c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800a72c:	b5b0      	push	{r4, r5, r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	2201      	movs	r2, #1
 800a73c:	fa02 f303 	lsl.w	r3, r2, r3
 800a740:	4618      	mov	r0, r3
 800a742:	f7f5 fe6f 	bl	8000424 <__aeabi_i2d>
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	6838      	ldr	r0, [r7, #0]
 800a74c:	f7f5 fe5a 	bl	8000404 <__aeabi_ui2d>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 fff8 	bl	800074c <__aeabi_ddiv>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4610      	mov	r0, r2
 800a762:	4619      	mov	r1, r3
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	4b04      	ldr	r3, [pc, #16]	; (800a77c <RegionCommonComputeSymbolTimeLoRa+0x50>)
 800a76a:	f7f5 fec5 	bl	80004f8 <__aeabi_dmul>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
}
 800a772:	4610      	mov	r0, r2
 800a774:	4619      	mov	r1, r3
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bdb0      	pop	{r4, r5, r7, pc}
 800a77c:	408f4000 	.word	0x408f4000

0800a780 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	71fb      	strb	r3, [r7, #7]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f5 fe39 	bl	8000404 <__aeabi_ui2d>
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	f04f 0000 	mov.w	r0, #0
 800a79a:	4905      	ldr	r1, [pc, #20]	; (800a7b0 <RegionCommonComputeSymbolTimeFsk+0x30>)
 800a79c:	f7f5 ffd6 	bl	800074c <__aeabi_ddiv>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
}
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	40200000 	.word	0x40200000

0800a7b4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800a7b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a7c0:	603b      	str	r3, [r7, #0]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	71fb      	strb	r3, [r7, #7]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a7c6:	79fc      	ldrb	r4, [r7, #7]
 800a7c8:	79fb      	ldrb	r3, [r7, #7]
 800a7ca:	3b04      	subs	r3, #4
 800a7cc:	005b      	lsls	r3, r3, #1
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7f5 fe28 	bl	8000424 <__aeabi_i2d>
 800a7d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7d8:	f7f5 fe8e 	bl	80004f8 <__aeabi_dmul>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4690      	mov	r8, r2
 800a7e2:	4699      	mov	r9, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7f5 fe0b 	bl	8000404 <__aeabi_ui2d>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	f7f5 fcc9 	bl	800018c <__adddf3>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4610      	mov	r0, r2
 800a800:	4619      	mov	r1, r3
 800a802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a806:	f7f5 ffa1 	bl	800074c <__aeabi_ddiv>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4610      	mov	r0, r2
 800a810:	4619      	mov	r1, r3
 800a812:	f008 f851 	bl	80128b8 <ceil>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4610      	mov	r0, r2
 800a81c:	4619      	mov	r1, r3
 800a81e:	f7f6 f92d 	bl	8000a7c <__aeabi_d2uiz>
 800a822:	4603      	mov	r3, r0
 800a824:	4622      	mov	r2, r4
 800a826:	429a      	cmp	r2, r3
 800a828:	bf38      	it	cc
 800a82a:	461a      	movcc	r2, r3
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	601a      	str	r2, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800a830:	f04f 0200 	mov.w	r2, #0
 800a834:	4b21      	ldr	r3, [pc, #132]	; (800a8bc <RegionCommonComputeRxWindowParameters+0x108>)
 800a836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a83a:	f7f5 fe5d 	bl	80004f8 <__aeabi_dmul>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	4614      	mov	r4, r2
 800a844:	461d      	mov	r5, r3
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f5 fdda 	bl	8000404 <__aeabi_ui2d>
 800a850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a854:	f7f5 fe50 	bl	80004f8 <__aeabi_dmul>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4610      	mov	r0, r2
 800a85e:	4619      	mov	r1, r3
 800a860:	f04f 0200 	mov.w	r2, #0
 800a864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a868:	f7f5 ff70 	bl	800074c <__aeabi_ddiv>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4620      	mov	r0, r4
 800a872:	4629      	mov	r1, r5
 800a874:	f7f5 fc88 	bl	8000188 <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	461d      	mov	r5, r3
 800a880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a882:	f7f5 fdbf 	bl	8000404 <__aeabi_ui2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	4620      	mov	r0, r4
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7f5 fc7b 	bl	8000188 <__aeabi_dsub>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	4610      	mov	r0, r2
 800a898:	4619      	mov	r1, r3
 800a89a:	f008 f80d 	bl	80128b8 <ceil>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f7f6 f8c1 	bl	8000a2c <__aeabi_d2iz>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	601a      	str	r2, [r3, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a8ba:	bf00      	nop
 800a8bc:	40100000 	.word	0x40100000

0800a8c0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
 800a8cc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8d6:	005b      	lsls	r3, r3, #1
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7f6 f9a5 	bl	8000c28 <__aeabi_ui2f>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	68b8      	ldr	r0, [r7, #8]
 800a8e4:	f7f6 f8ee 	bl	8000ac4 <__aeabi_fsub>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7f6 f8e9 	bl	8000ac4 <__aeabi_fsub>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7f5 fda7 	bl	8000448 <__aeabi_f2d>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	4610      	mov	r0, r2
 800a900:	4619      	mov	r1, r3
 800a902:	f008 f859 	bl	80129b8 <floor>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4610      	mov	r0, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	f7f6 f88d 	bl	8000a2c <__aeabi_d2iz>
 800a912:	4603      	mov	r3, r0
 800a914:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800a916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3718      	adds	r7, #24
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a922:	b480      	push	{r7}
 800a924:	b083      	sub	sp, #12
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3301      	adds	r3, #1
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	7852      	ldrb	r2, [r2, #1]
 800a93c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3302      	adds	r3, #2
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	7892      	ldrb	r2, [r2, #2]
 800a946:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3303      	adds	r3, #3
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	78d2      	ldrb	r2, [r2, #3]
 800a950:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3304      	adds	r3, #4
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	7912      	ldrb	r2, [r2, #4]
 800a95a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3305      	adds	r3, #5
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	7952      	ldrb	r2, [r2, #5]
 800a964:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	3306      	adds	r3, #6
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	7992      	ldrb	r2, [r2, #6]
 800a96e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3307      	adds	r3, #7
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	79d2      	ldrb	r2, [r2, #7]
 800a978:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3308      	adds	r3, #8
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	7a12      	ldrb	r2, [r2, #8]
 800a982:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3309      	adds	r3, #9
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	7a52      	ldrb	r2, [r2, #9]
 800a98c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	330a      	adds	r3, #10
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	7a92      	ldrb	r2, [r2, #10]
 800a996:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	330b      	adds	r3, #11
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	7ad2      	ldrb	r2, [r2, #11]
 800a9a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	330c      	adds	r3, #12
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	7b12      	ldrb	r2, [r2, #12]
 800a9aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	330d      	adds	r3, #13
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	7b52      	ldrb	r2, [r2, #13]
 800a9b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	330e      	adds	r3, #14
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	7b92      	ldrb	r2, [r2, #14]
 800a9be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	330f      	adds	r3, #15
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	7bd2      	ldrb	r2, [r2, #15]
 800a9c8:	701a      	strb	r2, [r3, #0]
#endif
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc80      	pop	{r7}
 800a9d2:	4770      	bx	lr

0800a9d4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a9e2:	e007      	b.n	800a9f4 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	1c53      	adds	r3, r2, #1
 800a9e8:	60bb      	str	r3, [r7, #8]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	1c59      	adds	r1, r3, #1
 800a9ee:	60f9      	str	r1, [r7, #12]
 800a9f0:	7812      	ldrb	r2, [r2, #0]
 800a9f2:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	1e5a      	subs	r2, r3, #1
 800a9f8:	71fa      	strb	r2, [r7, #7]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f2      	bne.n	800a9e4 <copy_block_nn+0x10>
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bc80      	pop	{r7}
 800aa08:	4770      	bx	lr

0800aa0a <xor_block>:

static void xor_block( void *d, const void *s )
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	781a      	ldrb	r2, [r3, #0]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4053      	eors	r3, r2
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	3301      	adds	r3, #1
 800aa28:	7819      	ldrb	r1, [r3, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3301      	adds	r3, #1
 800aa34:	404a      	eors	r2, r1
 800aa36:	b2d2      	uxtb	r2, r2
 800aa38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	7819      	ldrb	r1, [r3, #0]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	3302      	adds	r3, #2
 800aa44:	781a      	ldrb	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3302      	adds	r3, #2
 800aa4a:	404a      	eors	r2, r1
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3303      	adds	r3, #3
 800aa54:	7819      	ldrb	r1, [r3, #0]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	3303      	adds	r3, #3
 800aa5a:	781a      	ldrb	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3303      	adds	r3, #3
 800aa60:	404a      	eors	r2, r1
 800aa62:	b2d2      	uxtb	r2, r2
 800aa64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	7819      	ldrb	r1, [r3, #0]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3304      	adds	r3, #4
 800aa76:	404a      	eors	r2, r1
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3305      	adds	r3, #5
 800aa80:	7819      	ldrb	r1, [r3, #0]
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	3305      	adds	r3, #5
 800aa86:	781a      	ldrb	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	3305      	adds	r3, #5
 800aa8c:	404a      	eors	r2, r1
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3306      	adds	r3, #6
 800aa96:	7819      	ldrb	r1, [r3, #0]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	3306      	adds	r3, #6
 800aa9c:	781a      	ldrb	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3306      	adds	r3, #6
 800aaa2:	404a      	eors	r2, r1
 800aaa4:	b2d2      	uxtb	r2, r2
 800aaa6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3307      	adds	r3, #7
 800aaac:	7819      	ldrb	r1, [r3, #0]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	3307      	adds	r3, #7
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3307      	adds	r3, #7
 800aab8:	404a      	eors	r2, r1
 800aaba:	b2d2      	uxtb	r2, r2
 800aabc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3308      	adds	r3, #8
 800aac2:	7819      	ldrb	r1, [r3, #0]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3308      	adds	r3, #8
 800aace:	404a      	eors	r2, r1
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3309      	adds	r3, #9
 800aad8:	7819      	ldrb	r1, [r3, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	3309      	adds	r3, #9
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3309      	adds	r3, #9
 800aae4:	404a      	eors	r2, r1
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	330a      	adds	r3, #10
 800aaee:	7819      	ldrb	r1, [r3, #0]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	330a      	adds	r3, #10
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	330a      	adds	r3, #10
 800aafa:	404a      	eors	r2, r1
 800aafc:	b2d2      	uxtb	r2, r2
 800aafe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	330b      	adds	r3, #11
 800ab04:	7819      	ldrb	r1, [r3, #0]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	330b      	adds	r3, #11
 800ab0a:	781a      	ldrb	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	330b      	adds	r3, #11
 800ab10:	404a      	eors	r2, r1
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	7819      	ldrb	r1, [r3, #0]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	330c      	adds	r3, #12
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	330c      	adds	r3, #12
 800ab26:	404a      	eors	r2, r1
 800ab28:	b2d2      	uxtb	r2, r2
 800ab2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	330d      	adds	r3, #13
 800ab30:	7819      	ldrb	r1, [r3, #0]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	330d      	adds	r3, #13
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	330d      	adds	r3, #13
 800ab3c:	404a      	eors	r2, r1
 800ab3e:	b2d2      	uxtb	r2, r2
 800ab40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	330e      	adds	r3, #14
 800ab46:	7819      	ldrb	r1, [r3, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	330e      	adds	r3, #14
 800ab4c:	781a      	ldrb	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	330e      	adds	r3, #14
 800ab52:	404a      	eors	r2, r1
 800ab54:	b2d2      	uxtb	r2, r2
 800ab56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	330f      	adds	r3, #15
 800ab5c:	7819      	ldrb	r1, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	330f      	adds	r3, #15
 800ab62:	781a      	ldrb	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	330f      	adds	r3, #15
 800ab68:	404a      	eors	r2, r1
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
#endif
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bc80      	pop	{r7}
 800ab76:	4770      	bx	lr

0800ab78 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	781a      	ldrb	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	4053      	eors	r3, r2
 800ab8e:	b2da      	uxtb	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	3301      	adds	r3, #1
 800ab98:	7819      	ldrb	r1, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	781a      	ldrb	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3301      	adds	r3, #1
 800aba4:	404a      	eors	r2, r1
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	3302      	adds	r3, #2
 800abae:	7819      	ldrb	r1, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3302      	adds	r3, #2
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3302      	adds	r3, #2
 800abba:	404a      	eors	r2, r1
 800abbc:	b2d2      	uxtb	r2, r2
 800abbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	3303      	adds	r3, #3
 800abc4:	7819      	ldrb	r1, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3303      	adds	r3, #3
 800abca:	781a      	ldrb	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3303      	adds	r3, #3
 800abd0:	404a      	eors	r2, r1
 800abd2:	b2d2      	uxtb	r2, r2
 800abd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	3304      	adds	r3, #4
 800abda:	7819      	ldrb	r1, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	3304      	adds	r3, #4
 800abe0:	781a      	ldrb	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3304      	adds	r3, #4
 800abe6:	404a      	eors	r2, r1
 800abe8:	b2d2      	uxtb	r2, r2
 800abea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	3305      	adds	r3, #5
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3305      	adds	r3, #5
 800abf6:	781a      	ldrb	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3305      	adds	r3, #5
 800abfc:	404a      	eors	r2, r1
 800abfe:	b2d2      	uxtb	r2, r2
 800ac00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	3306      	adds	r3, #6
 800ac06:	7819      	ldrb	r1, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3306      	adds	r3, #6
 800ac0c:	781a      	ldrb	r2, [r3, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3306      	adds	r3, #6
 800ac12:	404a      	eors	r2, r1
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	3307      	adds	r3, #7
 800ac1c:	7819      	ldrb	r1, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3307      	adds	r3, #7
 800ac22:	781a      	ldrb	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3307      	adds	r3, #7
 800ac28:	404a      	eors	r2, r1
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3308      	adds	r3, #8
 800ac32:	7819      	ldrb	r1, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3308      	adds	r3, #8
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	404a      	eors	r2, r1
 800ac40:	b2d2      	uxtb	r2, r2
 800ac42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	3309      	adds	r3, #9
 800ac48:	7819      	ldrb	r1, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	3309      	adds	r3, #9
 800ac4e:	781a      	ldrb	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3309      	adds	r3, #9
 800ac54:	404a      	eors	r2, r1
 800ac56:	b2d2      	uxtb	r2, r2
 800ac58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	330a      	adds	r3, #10
 800ac5e:	7819      	ldrb	r1, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	330a      	adds	r3, #10
 800ac64:	781a      	ldrb	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	330a      	adds	r3, #10
 800ac6a:	404a      	eors	r2, r1
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	330b      	adds	r3, #11
 800ac74:	7819      	ldrb	r1, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	330b      	adds	r3, #11
 800ac7a:	781a      	ldrb	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	330b      	adds	r3, #11
 800ac80:	404a      	eors	r2, r1
 800ac82:	b2d2      	uxtb	r2, r2
 800ac84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	330c      	adds	r3, #12
 800ac8a:	7819      	ldrb	r1, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	330c      	adds	r3, #12
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	330c      	adds	r3, #12
 800ac96:	404a      	eors	r2, r1
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	330d      	adds	r3, #13
 800aca0:	7819      	ldrb	r1, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	330d      	adds	r3, #13
 800aca6:	781a      	ldrb	r2, [r3, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	330d      	adds	r3, #13
 800acac:	404a      	eors	r2, r1
 800acae:	b2d2      	uxtb	r2, r2
 800acb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	330e      	adds	r3, #14
 800acb6:	7819      	ldrb	r1, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	330e      	adds	r3, #14
 800acbc:	781a      	ldrb	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	330e      	adds	r3, #14
 800acc2:	404a      	eors	r2, r1
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	330f      	adds	r3, #15
 800accc:	7819      	ldrb	r1, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	330f      	adds	r3, #15
 800acd2:	781a      	ldrb	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	330f      	adds	r3, #15
 800acd8:	404a      	eors	r2, r1
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fe88 	bl	800aa0a <xor_block>
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
	...

0800ad04 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	461a      	mov	r2, r3
 800ad12:	4b48      	ldr	r3, [pc, #288]	; (800ae34 <shift_sub_rows+0x130>)
 800ad14:	5c9a      	ldrb	r2, [r3, r2]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	4619      	mov	r1, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4a43      	ldr	r2, [pc, #268]	; (800ae34 <shift_sub_rows+0x130>)
 800ad28:	5c52      	ldrb	r2, [r2, r1]
 800ad2a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	4619      	mov	r1, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3308      	adds	r3, #8
 800ad38:	4a3e      	ldr	r2, [pc, #248]	; (800ae34 <shift_sub_rows+0x130>)
 800ad3a:	5c52      	ldrb	r2, [r2, r1]
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	330c      	adds	r3, #12
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	4619      	mov	r1, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	330c      	adds	r3, #12
 800ad4a:	4a3a      	ldr	r2, [pc, #232]	; (800ae34 <shift_sub_rows+0x130>)
 800ad4c:	5c52      	ldrb	r2, [r2, r1]
 800ad4e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3305      	adds	r3, #5
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a34      	ldr	r2, [pc, #208]	; (800ae34 <shift_sub_rows+0x130>)
 800ad64:	5c52      	ldrb	r2, [r2, r1]
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3309      	adds	r3, #9
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	3305      	adds	r3, #5
 800ad74:	4a2f      	ldr	r2, [pc, #188]	; (800ae34 <shift_sub_rows+0x130>)
 800ad76:	5c52      	ldrb	r2, [r2, r1]
 800ad78:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	330d      	adds	r3, #13
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	4619      	mov	r1, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3309      	adds	r3, #9
 800ad86:	4a2b      	ldr	r2, [pc, #172]	; (800ae34 <shift_sub_rows+0x130>)
 800ad88:	5c52      	ldrb	r2, [r2, r1]
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	7bfa      	ldrb	r2, [r7, #15]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	330d      	adds	r3, #13
 800ad92:	4928      	ldr	r1, [pc, #160]	; (800ae34 <shift_sub_rows+0x130>)
 800ad94:	5c8a      	ldrb	r2, [r1, r2]
 800ad96:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	789b      	ldrb	r3, [r3, #2]
 800ad9c:	73fb      	strb	r3, [r7, #15]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	330a      	adds	r3, #10
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	4619      	mov	r1, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	3302      	adds	r3, #2
 800adaa:	4a22      	ldr	r2, [pc, #136]	; (800ae34 <shift_sub_rows+0x130>)
 800adac:	5c52      	ldrb	r2, [r2, r1]
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	7bfa      	ldrb	r2, [r7, #15]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	330a      	adds	r3, #10
 800adb6:	491f      	ldr	r1, [pc, #124]	; (800ae34 <shift_sub_rows+0x130>)
 800adb8:	5c8a      	ldrb	r2, [r1, r2]
 800adba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	799b      	ldrb	r3, [r3, #6]
 800adc0:	73fb      	strb	r3, [r7, #15]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	330e      	adds	r3, #14
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	4619      	mov	r1, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3306      	adds	r3, #6
 800adce:	4a19      	ldr	r2, [pc, #100]	; (800ae34 <shift_sub_rows+0x130>)
 800add0:	5c52      	ldrb	r2, [r2, r1]
 800add2:	701a      	strb	r2, [r3, #0]
 800add4:	7bfa      	ldrb	r2, [r7, #15]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	330e      	adds	r3, #14
 800adda:	4916      	ldr	r1, [pc, #88]	; (800ae34 <shift_sub_rows+0x130>)
 800addc:	5c8a      	ldrb	r2, [r1, r2]
 800adde:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	7bdb      	ldrb	r3, [r3, #15]
 800ade4:	73fb      	strb	r3, [r7, #15]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	330b      	adds	r3, #11
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	4619      	mov	r1, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	330f      	adds	r3, #15
 800adf2:	4a10      	ldr	r2, [pc, #64]	; (800ae34 <shift_sub_rows+0x130>)
 800adf4:	5c52      	ldrb	r2, [r2, r1]
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3307      	adds	r3, #7
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	4619      	mov	r1, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	330b      	adds	r3, #11
 800ae04:	4a0b      	ldr	r2, [pc, #44]	; (800ae34 <shift_sub_rows+0x130>)
 800ae06:	5c52      	ldrb	r2, [r2, r1]
 800ae08:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3303      	adds	r3, #3
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	4619      	mov	r1, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3307      	adds	r3, #7
 800ae16:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <shift_sub_rows+0x130>)
 800ae18:	5c52      	ldrb	r2, [r2, r1]
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	7bfa      	ldrb	r2, [r7, #15]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	3303      	adds	r3, #3
 800ae22:	4904      	ldr	r1, [pc, #16]	; (800ae34 <shift_sub_rows+0x130>)
 800ae24:	5c8a      	ldrb	r2, [r1, r2]
 800ae26:	701a      	strb	r2, [r3, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	3714      	adds	r7, #20
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bc80      	pop	{r7}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	08012dbc 	.word	0x08012dbc

0800ae38 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ae40:	f107 0308 	add.w	r3, r7, #8
 800ae44:	6879      	ldr	r1, [r7, #4]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff fd6b 	bl	800a922 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ae4c:	7a3b      	ldrb	r3, [r7, #8]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4b9a      	ldr	r3, [pc, #616]	; (800b0bc <mix_sub_columns+0x284>)
 800ae52:	5c9a      	ldrb	r2, [r3, r2]
 800ae54:	7b7b      	ldrb	r3, [r7, #13]
 800ae56:	4619      	mov	r1, r3
 800ae58:	4b99      	ldr	r3, [pc, #612]	; (800b0c0 <mix_sub_columns+0x288>)
 800ae5a:	5c5b      	ldrb	r3, [r3, r1]
 800ae5c:	4053      	eors	r3, r2
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	7cbb      	ldrb	r3, [r7, #18]
 800ae62:	4619      	mov	r1, r3
 800ae64:	4b97      	ldr	r3, [pc, #604]	; (800b0c4 <mix_sub_columns+0x28c>)
 800ae66:	5c5b      	ldrb	r3, [r3, r1]
 800ae68:	4053      	eors	r3, r2
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4b94      	ldr	r3, [pc, #592]	; (800b0c4 <mix_sub_columns+0x28c>)
 800ae72:	5c5b      	ldrb	r3, [r3, r1]
 800ae74:	4053      	eors	r3, r2
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ae7c:	7a3b      	ldrb	r3, [r7, #8]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	4b90      	ldr	r3, [pc, #576]	; (800b0c4 <mix_sub_columns+0x28c>)
 800ae82:	5c9a      	ldrb	r2, [r3, r2]
 800ae84:	7b7b      	ldrb	r3, [r7, #13]
 800ae86:	4619      	mov	r1, r3
 800ae88:	4b8c      	ldr	r3, [pc, #560]	; (800b0bc <mix_sub_columns+0x284>)
 800ae8a:	5c5b      	ldrb	r3, [r3, r1]
 800ae8c:	4053      	eors	r3, r2
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	7cbb      	ldrb	r3, [r7, #18]
 800ae92:	4619      	mov	r1, r3
 800ae94:	4b8a      	ldr	r3, [pc, #552]	; (800b0c0 <mix_sub_columns+0x288>)
 800ae96:	5c5b      	ldrb	r3, [r3, r1]
 800ae98:	4053      	eors	r3, r2
 800ae9a:	b2d9      	uxtb	r1, r3
 800ae9c:	7dfb      	ldrb	r3, [r7, #23]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4b88      	ldr	r3, [pc, #544]	; (800b0c4 <mix_sub_columns+0x28c>)
 800aea2:	5c9a      	ldrb	r2, [r3, r2]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3301      	adds	r3, #1
 800aea8:	404a      	eors	r2, r1
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800aeae:	7a3b      	ldrb	r3, [r7, #8]
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	4b84      	ldr	r3, [pc, #528]	; (800b0c4 <mix_sub_columns+0x28c>)
 800aeb4:	5c9a      	ldrb	r2, [r3, r2]
 800aeb6:	7b7b      	ldrb	r3, [r7, #13]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4b82      	ldr	r3, [pc, #520]	; (800b0c4 <mix_sub_columns+0x28c>)
 800aebc:	5c5b      	ldrb	r3, [r3, r1]
 800aebe:	4053      	eors	r3, r2
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	7cbb      	ldrb	r3, [r7, #18]
 800aec4:	4619      	mov	r1, r3
 800aec6:	4b7d      	ldr	r3, [pc, #500]	; (800b0bc <mix_sub_columns+0x284>)
 800aec8:	5c5b      	ldrb	r3, [r3, r1]
 800aeca:	4053      	eors	r3, r2
 800aecc:	b2d9      	uxtb	r1, r3
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b7b      	ldr	r3, [pc, #492]	; (800b0c0 <mix_sub_columns+0x288>)
 800aed4:	5c9a      	ldrb	r2, [r3, r2]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3302      	adds	r3, #2
 800aeda:	404a      	eors	r2, r1
 800aedc:	b2d2      	uxtb	r2, r2
 800aede:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800aee0:	7a3b      	ldrb	r3, [r7, #8]
 800aee2:	461a      	mov	r2, r3
 800aee4:	4b76      	ldr	r3, [pc, #472]	; (800b0c0 <mix_sub_columns+0x288>)
 800aee6:	5c9a      	ldrb	r2, [r3, r2]
 800aee8:	7b7b      	ldrb	r3, [r7, #13]
 800aeea:	4619      	mov	r1, r3
 800aeec:	4b75      	ldr	r3, [pc, #468]	; (800b0c4 <mix_sub_columns+0x28c>)
 800aeee:	5c5b      	ldrb	r3, [r3, r1]
 800aef0:	4053      	eors	r3, r2
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	7cbb      	ldrb	r3, [r7, #18]
 800aef6:	4619      	mov	r1, r3
 800aef8:	4b72      	ldr	r3, [pc, #456]	; (800b0c4 <mix_sub_columns+0x28c>)
 800aefa:	5c5b      	ldrb	r3, [r3, r1]
 800aefc:	4053      	eors	r3, r2
 800aefe:	b2d9      	uxtb	r1, r3
 800af00:	7dfb      	ldrb	r3, [r7, #23]
 800af02:	461a      	mov	r2, r3
 800af04:	4b6d      	ldr	r3, [pc, #436]	; (800b0bc <mix_sub_columns+0x284>)
 800af06:	5c9a      	ldrb	r2, [r3, r2]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3303      	adds	r3, #3
 800af0c:	404a      	eors	r2, r1
 800af0e:	b2d2      	uxtb	r2, r2
 800af10:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800af12:	7b3b      	ldrb	r3, [r7, #12]
 800af14:	461a      	mov	r2, r3
 800af16:	4b69      	ldr	r3, [pc, #420]	; (800b0bc <mix_sub_columns+0x284>)
 800af18:	5c9a      	ldrb	r2, [r3, r2]
 800af1a:	7c7b      	ldrb	r3, [r7, #17]
 800af1c:	4619      	mov	r1, r3
 800af1e:	4b68      	ldr	r3, [pc, #416]	; (800b0c0 <mix_sub_columns+0x288>)
 800af20:	5c5b      	ldrb	r3, [r3, r1]
 800af22:	4053      	eors	r3, r2
 800af24:	b2da      	uxtb	r2, r3
 800af26:	7dbb      	ldrb	r3, [r7, #22]
 800af28:	4619      	mov	r1, r3
 800af2a:	4b66      	ldr	r3, [pc, #408]	; (800b0c4 <mix_sub_columns+0x28c>)
 800af2c:	5c5b      	ldrb	r3, [r3, r1]
 800af2e:	4053      	eors	r3, r2
 800af30:	b2d9      	uxtb	r1, r3
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	461a      	mov	r2, r3
 800af36:	4b63      	ldr	r3, [pc, #396]	; (800b0c4 <mix_sub_columns+0x28c>)
 800af38:	5c9a      	ldrb	r2, [r3, r2]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3304      	adds	r3, #4
 800af3e:	404a      	eors	r2, r1
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800af44:	7b3b      	ldrb	r3, [r7, #12]
 800af46:	461a      	mov	r2, r3
 800af48:	4b5e      	ldr	r3, [pc, #376]	; (800b0c4 <mix_sub_columns+0x28c>)
 800af4a:	5c9a      	ldrb	r2, [r3, r2]
 800af4c:	7c7b      	ldrb	r3, [r7, #17]
 800af4e:	4619      	mov	r1, r3
 800af50:	4b5a      	ldr	r3, [pc, #360]	; (800b0bc <mix_sub_columns+0x284>)
 800af52:	5c5b      	ldrb	r3, [r3, r1]
 800af54:	4053      	eors	r3, r2
 800af56:	b2da      	uxtb	r2, r3
 800af58:	7dbb      	ldrb	r3, [r7, #22]
 800af5a:	4619      	mov	r1, r3
 800af5c:	4b58      	ldr	r3, [pc, #352]	; (800b0c0 <mix_sub_columns+0x288>)
 800af5e:	5c5b      	ldrb	r3, [r3, r1]
 800af60:	4053      	eors	r3, r2
 800af62:	b2d9      	uxtb	r1, r3
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	461a      	mov	r2, r3
 800af68:	4b56      	ldr	r3, [pc, #344]	; (800b0c4 <mix_sub_columns+0x28c>)
 800af6a:	5c9a      	ldrb	r2, [r3, r2]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	3305      	adds	r3, #5
 800af70:	404a      	eors	r2, r1
 800af72:	b2d2      	uxtb	r2, r2
 800af74:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800af76:	7b3b      	ldrb	r3, [r7, #12]
 800af78:	461a      	mov	r2, r3
 800af7a:	4b52      	ldr	r3, [pc, #328]	; (800b0c4 <mix_sub_columns+0x28c>)
 800af7c:	5c9a      	ldrb	r2, [r3, r2]
 800af7e:	7c7b      	ldrb	r3, [r7, #17]
 800af80:	4619      	mov	r1, r3
 800af82:	4b50      	ldr	r3, [pc, #320]	; (800b0c4 <mix_sub_columns+0x28c>)
 800af84:	5c5b      	ldrb	r3, [r3, r1]
 800af86:	4053      	eors	r3, r2
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	7dbb      	ldrb	r3, [r7, #22]
 800af8c:	4619      	mov	r1, r3
 800af8e:	4b4b      	ldr	r3, [pc, #300]	; (800b0bc <mix_sub_columns+0x284>)
 800af90:	5c5b      	ldrb	r3, [r3, r1]
 800af92:	4053      	eors	r3, r2
 800af94:	b2d9      	uxtb	r1, r3
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	461a      	mov	r2, r3
 800af9a:	4b49      	ldr	r3, [pc, #292]	; (800b0c0 <mix_sub_columns+0x288>)
 800af9c:	5c9a      	ldrb	r2, [r3, r2]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3306      	adds	r3, #6
 800afa2:	404a      	eors	r2, r1
 800afa4:	b2d2      	uxtb	r2, r2
 800afa6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800afa8:	7b3b      	ldrb	r3, [r7, #12]
 800afaa:	461a      	mov	r2, r3
 800afac:	4b44      	ldr	r3, [pc, #272]	; (800b0c0 <mix_sub_columns+0x288>)
 800afae:	5c9a      	ldrb	r2, [r3, r2]
 800afb0:	7c7b      	ldrb	r3, [r7, #17]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4b43      	ldr	r3, [pc, #268]	; (800b0c4 <mix_sub_columns+0x28c>)
 800afb6:	5c5b      	ldrb	r3, [r3, r1]
 800afb8:	4053      	eors	r3, r2
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	7dbb      	ldrb	r3, [r7, #22]
 800afbe:	4619      	mov	r1, r3
 800afc0:	4b40      	ldr	r3, [pc, #256]	; (800b0c4 <mix_sub_columns+0x28c>)
 800afc2:	5c5b      	ldrb	r3, [r3, r1]
 800afc4:	4053      	eors	r3, r2
 800afc6:	b2d9      	uxtb	r1, r3
 800afc8:	7afb      	ldrb	r3, [r7, #11]
 800afca:	461a      	mov	r2, r3
 800afcc:	4b3b      	ldr	r3, [pc, #236]	; (800b0bc <mix_sub_columns+0x284>)
 800afce:	5c9a      	ldrb	r2, [r3, r2]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3307      	adds	r3, #7
 800afd4:	404a      	eors	r2, r1
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800afda:	7c3b      	ldrb	r3, [r7, #16]
 800afdc:	461a      	mov	r2, r3
 800afde:	4b37      	ldr	r3, [pc, #220]	; (800b0bc <mix_sub_columns+0x284>)
 800afe0:	5c9a      	ldrb	r2, [r3, r2]
 800afe2:	7d7b      	ldrb	r3, [r7, #21]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4b36      	ldr	r3, [pc, #216]	; (800b0c0 <mix_sub_columns+0x288>)
 800afe8:	5c5b      	ldrb	r3, [r3, r1]
 800afea:	4053      	eors	r3, r2
 800afec:	b2da      	uxtb	r2, r3
 800afee:	7abb      	ldrb	r3, [r7, #10]
 800aff0:	4619      	mov	r1, r3
 800aff2:	4b34      	ldr	r3, [pc, #208]	; (800b0c4 <mix_sub_columns+0x28c>)
 800aff4:	5c5b      	ldrb	r3, [r3, r1]
 800aff6:	4053      	eors	r3, r2
 800aff8:	b2d9      	uxtb	r1, r3
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	461a      	mov	r2, r3
 800affe:	4b31      	ldr	r3, [pc, #196]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b000:	5c9a      	ldrb	r2, [r3, r2]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3308      	adds	r3, #8
 800b006:	404a      	eors	r2, r1
 800b008:	b2d2      	uxtb	r2, r2
 800b00a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b00c:	7c3b      	ldrb	r3, [r7, #16]
 800b00e:	461a      	mov	r2, r3
 800b010:	4b2c      	ldr	r3, [pc, #176]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b012:	5c9a      	ldrb	r2, [r3, r2]
 800b014:	7d7b      	ldrb	r3, [r7, #21]
 800b016:	4619      	mov	r1, r3
 800b018:	4b28      	ldr	r3, [pc, #160]	; (800b0bc <mix_sub_columns+0x284>)
 800b01a:	5c5b      	ldrb	r3, [r3, r1]
 800b01c:	4053      	eors	r3, r2
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	7abb      	ldrb	r3, [r7, #10]
 800b022:	4619      	mov	r1, r3
 800b024:	4b26      	ldr	r3, [pc, #152]	; (800b0c0 <mix_sub_columns+0x288>)
 800b026:	5c5b      	ldrb	r3, [r3, r1]
 800b028:	4053      	eors	r3, r2
 800b02a:	b2d9      	uxtb	r1, r3
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	461a      	mov	r2, r3
 800b030:	4b24      	ldr	r3, [pc, #144]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b032:	5c9a      	ldrb	r2, [r3, r2]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3309      	adds	r3, #9
 800b038:	404a      	eors	r2, r1
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b03e:	7c3b      	ldrb	r3, [r7, #16]
 800b040:	461a      	mov	r2, r3
 800b042:	4b20      	ldr	r3, [pc, #128]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b044:	5c9a      	ldrb	r2, [r3, r2]
 800b046:	7d7b      	ldrb	r3, [r7, #21]
 800b048:	4619      	mov	r1, r3
 800b04a:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b04c:	5c5b      	ldrb	r3, [r3, r1]
 800b04e:	4053      	eors	r3, r2
 800b050:	b2da      	uxtb	r2, r3
 800b052:	7abb      	ldrb	r3, [r7, #10]
 800b054:	4619      	mov	r1, r3
 800b056:	4b19      	ldr	r3, [pc, #100]	; (800b0bc <mix_sub_columns+0x284>)
 800b058:	5c5b      	ldrb	r3, [r3, r1]
 800b05a:	4053      	eors	r3, r2
 800b05c:	b2d9      	uxtb	r1, r3
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	461a      	mov	r2, r3
 800b062:	4b17      	ldr	r3, [pc, #92]	; (800b0c0 <mix_sub_columns+0x288>)
 800b064:	5c9a      	ldrb	r2, [r3, r2]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	330a      	adds	r3, #10
 800b06a:	404a      	eors	r2, r1
 800b06c:	b2d2      	uxtb	r2, r2
 800b06e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b070:	7c3b      	ldrb	r3, [r7, #16]
 800b072:	461a      	mov	r2, r3
 800b074:	4b12      	ldr	r3, [pc, #72]	; (800b0c0 <mix_sub_columns+0x288>)
 800b076:	5c9a      	ldrb	r2, [r3, r2]
 800b078:	7d7b      	ldrb	r3, [r7, #21]
 800b07a:	4619      	mov	r1, r3
 800b07c:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b07e:	5c5b      	ldrb	r3, [r3, r1]
 800b080:	4053      	eors	r3, r2
 800b082:	b2da      	uxtb	r2, r3
 800b084:	7abb      	ldrb	r3, [r7, #10]
 800b086:	4619      	mov	r1, r3
 800b088:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <mix_sub_columns+0x28c>)
 800b08a:	5c5b      	ldrb	r3, [r3, r1]
 800b08c:	4053      	eors	r3, r2
 800b08e:	b2d9      	uxtb	r1, r3
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	461a      	mov	r2, r3
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <mix_sub_columns+0x284>)
 800b096:	5c9a      	ldrb	r2, [r3, r2]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	330b      	adds	r3, #11
 800b09c:	404a      	eors	r2, r1
 800b09e:	b2d2      	uxtb	r2, r2
 800b0a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b0a2:	7d3b      	ldrb	r3, [r7, #20]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	4b05      	ldr	r3, [pc, #20]	; (800b0bc <mix_sub_columns+0x284>)
 800b0a8:	5c9a      	ldrb	r2, [r3, r2]
 800b0aa:	7a7b      	ldrb	r3, [r7, #9]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4b04      	ldr	r3, [pc, #16]	; (800b0c0 <mix_sub_columns+0x288>)
 800b0b0:	5c5b      	ldrb	r3, [r3, r1]
 800b0b2:	4053      	eors	r3, r2
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	7bbb      	ldrb	r3, [r7, #14]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	e005      	b.n	800b0c8 <mix_sub_columns+0x290>
 800b0bc:	08012ebc 	.word	0x08012ebc
 800b0c0:	08012fbc 	.word	0x08012fbc
 800b0c4:	08012dbc 	.word	0x08012dbc
 800b0c8:	4b2d      	ldr	r3, [pc, #180]	; (800b180 <mix_sub_columns+0x348>)
 800b0ca:	5c5b      	ldrb	r3, [r3, r1]
 800b0cc:	4053      	eors	r3, r2
 800b0ce:	b2d9      	uxtb	r1, r3
 800b0d0:	7cfb      	ldrb	r3, [r7, #19]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4b2a      	ldr	r3, [pc, #168]	; (800b180 <mix_sub_columns+0x348>)
 800b0d6:	5c9a      	ldrb	r2, [r3, r2]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	330c      	adds	r3, #12
 800b0dc:	404a      	eors	r2, r1
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b0e2:	7d3b      	ldrb	r3, [r7, #20]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b26      	ldr	r3, [pc, #152]	; (800b180 <mix_sub_columns+0x348>)
 800b0e8:	5c9a      	ldrb	r2, [r3, r2]
 800b0ea:	7a7b      	ldrb	r3, [r7, #9]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4b25      	ldr	r3, [pc, #148]	; (800b184 <mix_sub_columns+0x34c>)
 800b0f0:	5c5b      	ldrb	r3, [r3, r1]
 800b0f2:	4053      	eors	r3, r2
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4b23      	ldr	r3, [pc, #140]	; (800b188 <mix_sub_columns+0x350>)
 800b0fc:	5c5b      	ldrb	r3, [r3, r1]
 800b0fe:	4053      	eors	r3, r2
 800b100:	b2d9      	uxtb	r1, r3
 800b102:	7cfb      	ldrb	r3, [r7, #19]
 800b104:	461a      	mov	r2, r3
 800b106:	4b1e      	ldr	r3, [pc, #120]	; (800b180 <mix_sub_columns+0x348>)
 800b108:	5c9a      	ldrb	r2, [r3, r2]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	330d      	adds	r3, #13
 800b10e:	404a      	eors	r2, r1
 800b110:	b2d2      	uxtb	r2, r2
 800b112:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b114:	7d3b      	ldrb	r3, [r7, #20]
 800b116:	461a      	mov	r2, r3
 800b118:	4b19      	ldr	r3, [pc, #100]	; (800b180 <mix_sub_columns+0x348>)
 800b11a:	5c9a      	ldrb	r2, [r3, r2]
 800b11c:	7a7b      	ldrb	r3, [r7, #9]
 800b11e:	4619      	mov	r1, r3
 800b120:	4b17      	ldr	r3, [pc, #92]	; (800b180 <mix_sub_columns+0x348>)
 800b122:	5c5b      	ldrb	r3, [r3, r1]
 800b124:	4053      	eors	r3, r2
 800b126:	b2da      	uxtb	r2, r3
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	4619      	mov	r1, r3
 800b12c:	4b15      	ldr	r3, [pc, #84]	; (800b184 <mix_sub_columns+0x34c>)
 800b12e:	5c5b      	ldrb	r3, [r3, r1]
 800b130:	4053      	eors	r3, r2
 800b132:	b2d9      	uxtb	r1, r3
 800b134:	7cfb      	ldrb	r3, [r7, #19]
 800b136:	461a      	mov	r2, r3
 800b138:	4b13      	ldr	r3, [pc, #76]	; (800b188 <mix_sub_columns+0x350>)
 800b13a:	5c9a      	ldrb	r2, [r3, r2]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	330e      	adds	r3, #14
 800b140:	404a      	eors	r2, r1
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b146:	7d3b      	ldrb	r3, [r7, #20]
 800b148:	461a      	mov	r2, r3
 800b14a:	4b0f      	ldr	r3, [pc, #60]	; (800b188 <mix_sub_columns+0x350>)
 800b14c:	5c9a      	ldrb	r2, [r3, r2]
 800b14e:	7a7b      	ldrb	r3, [r7, #9]
 800b150:	4619      	mov	r1, r3
 800b152:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <mix_sub_columns+0x348>)
 800b154:	5c5b      	ldrb	r3, [r3, r1]
 800b156:	4053      	eors	r3, r2
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	4619      	mov	r1, r3
 800b15e:	4b08      	ldr	r3, [pc, #32]	; (800b180 <mix_sub_columns+0x348>)
 800b160:	5c5b      	ldrb	r3, [r3, r1]
 800b162:	4053      	eors	r3, r2
 800b164:	b2d9      	uxtb	r1, r3
 800b166:	7cfb      	ldrb	r3, [r7, #19]
 800b168:	461a      	mov	r2, r3
 800b16a:	4b06      	ldr	r3, [pc, #24]	; (800b184 <mix_sub_columns+0x34c>)
 800b16c:	5c9a      	ldrb	r2, [r3, r2]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	330f      	adds	r3, #15
 800b172:	404a      	eors	r2, r1
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
  }
 800b178:	bf00      	nop
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	08012dbc 	.word	0x08012dbc
 800b184:	08012ebc 	.word	0x08012ebc
 800b188:	08012fbc 	.word	0x08012fbc

0800b18c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	3b10      	subs	r3, #16
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	bf8c      	ite	hi
 800b1a2:	2201      	movhi	r2, #1
 800b1a4:	2200      	movls	r2, #0
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	d10d      	bne.n	800b1c8 <aes_set_key+0x3c>
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b1b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	bf14      	ite	ne
 800b1be:	2301      	movne	r3, #1
 800b1c0:	2300      	moveq	r3, #0
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d105      	bne.n	800b1d4 <aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b1d0:	23ff      	movs	r3, #255	; 0xff
 800b1d2:	e0b2      	b.n	800b33a <aes_set_key+0x1ae>
        break;
 800b1d4:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	7afa      	ldrb	r2, [r7, #11]
 800b1da:	68f9      	ldr	r1, [r7, #12]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff fbf9 	bl	800a9d4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b1e2:	7afb      	ldrb	r3, [r7, #11]
 800b1e4:	331c      	adds	r3, #28
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b1ec:	7c7b      	ldrb	r3, [r7, #17]
 800b1ee:	091b      	lsrs	r3, r3, #4
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
 800b1fe:	75fb      	strb	r3, [r7, #23]
 800b200:	2301      	movs	r3, #1
 800b202:	75bb      	strb	r3, [r7, #22]
 800b204:	e093      	b.n	800b32e <aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	3b04      	subs	r3, #4
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	5cd3      	ldrb	r3, [r2, r3]
 800b20e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	3b03      	subs	r3, #3
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	5cd3      	ldrb	r3, [r2, r3]
 800b218:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	3b02      	subs	r3, #2
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	5cd3      	ldrb	r3, [r2, r3]
 800b222:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	3b01      	subs	r3, #1
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	5cd3      	ldrb	r3, [r2, r3]
 800b22c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	7afa      	ldrb	r2, [r7, #11]
 800b232:	fbb3 f1f2 	udiv	r1, r3, r2
 800b236:	fb02 f201 	mul.w	r2, r2, r1
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d127      	bne.n	800b292 <aes_set_key+0x106>
        {
            tt = t0;
 800b242:	7d7b      	ldrb	r3, [r7, #21]
 800b244:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b246:	7d3b      	ldrb	r3, [r7, #20]
 800b248:	4a3e      	ldr	r2, [pc, #248]	; (800b344 <aes_set_key+0x1b8>)
 800b24a:	5cd2      	ldrb	r2, [r2, r3]
 800b24c:	7dbb      	ldrb	r3, [r7, #22]
 800b24e:	4053      	eors	r3, r2
 800b250:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b252:	7cfb      	ldrb	r3, [r7, #19]
 800b254:	4a3b      	ldr	r2, [pc, #236]	; (800b344 <aes_set_key+0x1b8>)
 800b256:	5cd3      	ldrb	r3, [r2, r3]
 800b258:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b25a:	7cbb      	ldrb	r3, [r7, #18]
 800b25c:	4a39      	ldr	r2, [pc, #228]	; (800b344 <aes_set_key+0x1b8>)
 800b25e:	5cd3      	ldrb	r3, [r2, r3]
 800b260:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b262:	7c3b      	ldrb	r3, [r7, #16]
 800b264:	4a37      	ldr	r2, [pc, #220]	; (800b344 <aes_set_key+0x1b8>)
 800b266:	5cd3      	ldrb	r3, [r2, r3]
 800b268:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b26a:	7dbb      	ldrb	r3, [r7, #22]
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	b25a      	sxtb	r2, r3
 800b270:	7dbb      	ldrb	r3, [r7, #22]
 800b272:	09db      	lsrs	r3, r3, #7
 800b274:	b2db      	uxtb	r3, r3
 800b276:	4619      	mov	r1, r3
 800b278:	0049      	lsls	r1, r1, #1
 800b27a:	440b      	add	r3, r1
 800b27c:	4619      	mov	r1, r3
 800b27e:	00c8      	lsls	r0, r1, #3
 800b280:	4619      	mov	r1, r3
 800b282:	4603      	mov	r3, r0
 800b284:	440b      	add	r3, r1
 800b286:	b2db      	uxtb	r3, r3
 800b288:	b25b      	sxtb	r3, r3
 800b28a:	4053      	eors	r3, r2
 800b28c:	b25b      	sxtb	r3, r3
 800b28e:	75bb      	strb	r3, [r7, #22]
 800b290:	e01c      	b.n	800b2cc <aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b292:	7afb      	ldrb	r3, [r7, #11]
 800b294:	2b18      	cmp	r3, #24
 800b296:	d919      	bls.n	800b2cc <aes_set_key+0x140>
 800b298:	7dfb      	ldrb	r3, [r7, #23]
 800b29a:	7afa      	ldrb	r2, [r7, #11]
 800b29c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2a0:	fb02 f201 	mul.w	r2, r2, r1
 800b2a4:	1a9b      	subs	r3, r3, r2
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b10      	cmp	r3, #16
 800b2aa:	d10f      	bne.n	800b2cc <aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b2ac:	7d7b      	ldrb	r3, [r7, #21]
 800b2ae:	4a25      	ldr	r2, [pc, #148]	; (800b344 <aes_set_key+0x1b8>)
 800b2b0:	5cd3      	ldrb	r3, [r2, r3]
 800b2b2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b2b4:	7d3b      	ldrb	r3, [r7, #20]
 800b2b6:	4a23      	ldr	r2, [pc, #140]	; (800b344 <aes_set_key+0x1b8>)
 800b2b8:	5cd3      	ldrb	r3, [r2, r3]
 800b2ba:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b2bc:	7cfb      	ldrb	r3, [r7, #19]
 800b2be:	4a21      	ldr	r2, [pc, #132]	; (800b344 <aes_set_key+0x1b8>)
 800b2c0:	5cd3      	ldrb	r3, [r2, r3]
 800b2c2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b2c4:	7cbb      	ldrb	r3, [r7, #18]
 800b2c6:	4a1f      	ldr	r2, [pc, #124]	; (800b344 <aes_set_key+0x1b8>)
 800b2c8:	5cd3      	ldrb	r3, [r2, r3]
 800b2ca:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b2cc:	7dfa      	ldrb	r2, [r7, #23]
 800b2ce:	7afb      	ldrb	r3, [r7, #11]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b2d4:	7c3b      	ldrb	r3, [r7, #16]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	5cd1      	ldrb	r1, [r2, r3]
 800b2da:	7dfb      	ldrb	r3, [r7, #23]
 800b2dc:	7d7a      	ldrb	r2, [r7, #21]
 800b2de:	404a      	eors	r2, r1
 800b2e0:	b2d1      	uxtb	r1, r2
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b2e6:	7c3b      	ldrb	r3, [r7, #16]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	5cd1      	ldrb	r1, [r2, r3]
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	7d3a      	ldrb	r2, [r7, #20]
 800b2f4:	404a      	eors	r2, r1
 800b2f6:	b2d1      	uxtb	r1, r2
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b2fc:	7c3b      	ldrb	r3, [r7, #16]
 800b2fe:	3302      	adds	r3, #2
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	5cd1      	ldrb	r1, [r2, r3]
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	3302      	adds	r3, #2
 800b308:	7cfa      	ldrb	r2, [r7, #19]
 800b30a:	404a      	eors	r2, r1
 800b30c:	b2d1      	uxtb	r1, r2
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b312:	7c3b      	ldrb	r3, [r7, #16]
 800b314:	3303      	adds	r3, #3
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	5cd1      	ldrb	r1, [r2, r3]
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	3303      	adds	r3, #3
 800b31e:	7cba      	ldrb	r2, [r7, #18]
 800b320:	404a      	eors	r2, r1
 800b322:	b2d1      	uxtb	r1, r2
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b328:	7dfb      	ldrb	r3, [r7, #23]
 800b32a:	3304      	adds	r3, #4
 800b32c:	75fb      	strb	r3, [r7, #23]
 800b32e:	7dfa      	ldrb	r2, [r7, #23]
 800b330:	7c7b      	ldrb	r3, [r7, #17]
 800b332:	429a      	cmp	r2, r3
 800b334:	f4ff af67 	bcc.w	800b206 <aes_set_key+0x7a>
    }
    return 0;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	08012dbc 	.word	0x08012dbc

0800b348 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08a      	sub	sp, #40	; 0x28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d038      	beq.n	800b3d0 <aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	f107 0314 	add.w	r3, r7, #20
 800b364:	68f9      	ldr	r1, [r7, #12]
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fc06 	bl	800ab78 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b36c:	2301      	movs	r3, #1
 800b36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b372:	e014      	b.n	800b39e <aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b374:	f107 0314 	add.w	r3, r7, #20
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff fd5d 	bl	800ae38 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b384:	0112      	lsls	r2, r2, #4
 800b386:	441a      	add	r2, r3
 800b388:	f107 0314 	add.w	r3, r7, #20
 800b38c:	4611      	mov	r1, r2
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff fcaa 	bl	800ace8 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b398:	3301      	adds	r3, #1
 800b39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b3a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d3e3      	bcc.n	800b374 <aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b3ac:	f107 0314 	add.w	r3, r7, #20
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff fca7 	bl	800ad04 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b3bc:	0112      	lsls	r2, r2, #4
 800b3be:	441a      	add	r2, r3
 800b3c0:	f107 0314 	add.w	r3, r7, #20
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	68b8      	ldr	r0, [r7, #8]
 800b3c8:	f7ff fbd6 	bl	800ab78 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	e000      	b.n	800b3d2 <aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b3d0:	23ff      	movs	r3, #255	; 0xff
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3728      	adds	r7, #40	; 0x28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
	...

0800b3dc <OnCalibrateSystemWakeupTimeTimerEvent>:

/*!
* Callback indicating the end of the system wake-up time calibration
*/
static void OnCalibrateSystemWakeupTimeTimerEvent( void )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
  TimerStop( &CalibrateSystemWakeupTimeTimer );
 800b3e0:	4803      	ldr	r0, [pc, #12]	; (800b3f0 <OnCalibrateSystemWakeupTimeTimerEvent+0x14>)
 800b3e2:	f005 f96d 	bl	80106c0 <TimerStop>
  SystemWakeupTimeCalibrated = true;
 800b3e6:	4b03      	ldr	r3, [pc, #12]	; (800b3f4 <OnCalibrateSystemWakeupTimeTimerEvent+0x18>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000710 	.word	0x20000710
 800b3f4:	20000725 	.word	0x20000725

0800b3f8 <BoardDisableIrq>:
* \remark Interrupt should only be fully disabled once the value is 0
*/
static uint8_t IrqNestLevel = 0;

void BoardDisableIrq( void )
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b3fc:	b672      	cpsid	i
}
 800b3fe:	bf00      	nop
  __disable_irq( );
  IrqNestLevel++;
 800b400:	4b04      	ldr	r3, [pc, #16]	; (800b414 <BoardDisableIrq+0x1c>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	b2da      	uxtb	r2, r3
 800b408:	4b02      	ldr	r3, [pc, #8]	; (800b414 <BoardDisableIrq+0x1c>)
 800b40a:	701a      	strb	r2, [r3, #0]
}
 800b40c:	bf00      	nop
 800b40e:	46bd      	mov	sp, r7
 800b410:	bc80      	pop	{r7}
 800b412:	4770      	bx	lr
 800b414:	20000726 	.word	0x20000726

0800b418 <BoardEnableIrq>:

void BoardEnableIrq( void )
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
  IrqNestLevel--;
 800b41c:	4b07      	ldr	r3, [pc, #28]	; (800b43c <BoardEnableIrq+0x24>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	3b01      	subs	r3, #1
 800b422:	b2da      	uxtb	r2, r3
 800b424:	4b05      	ldr	r3, [pc, #20]	; (800b43c <BoardEnableIrq+0x24>)
 800b426:	701a      	strb	r2, [r3, #0]
  if( IrqNestLevel == 0 )
 800b428:	4b04      	ldr	r3, [pc, #16]	; (800b43c <BoardEnableIrq+0x24>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <BoardEnableIrq+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800b430:	b662      	cpsie	i
}
 800b432:	bf00      	nop
  {
    __enable_irq( );
  }
}
 800b434:	bf00      	nop
 800b436:	46bd      	mov	sp, r7
 800b438:	bc80      	pop	{r7}
 800b43a:	4770      	bx	lr
 800b43c:	20000726 	.word	0x20000726

0800b440 <BoardInitMcu>:
    }
  }
}

void BoardInitMcu( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af02      	add	r7, sp, #8
#if defined ADC_measurement
    SystemClock_Config();
#endif
  if( McuInitialized == false )
 800b446:	4b17      	ldr	r3, [pc, #92]	; (800b4a4 <BoardInitMcu+0x64>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	f083 0301 	eor.w	r3, r3, #1
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <BoardInitMcu+0x22>
    // Set the Vector Table base location at 0x3000
    SCB->VTOR = FLASH_BASE | 0x3000;
#endif
    //HAL_Init( );
    
    SystemClockConfig( );
 800b454:	f000 f996 	bl	800b784 <SystemClockConfig>
	USB_VCP_init();
	HAL_Delay( 3000 ); //wait for usb init
	DebugPrintf("USB CDC init done!\r\n");
#endif

    RtcInit( );
 800b458:	f001 fb90 	bl	800cb7c <RtcInit>
    
    BoardUnusedIoInit( );
 800b45c:	f000 f8d0 	bl	800b600 <BoardUnusedIoInit>
 800b460:	e001      	b.n	800b466 <BoardInitMcu+0x26>
//#warning "Commented for test!"
  }
  else
  {
    SystemClockReConfig( );
 800b462:	f000 fa45 	bl	800b8f0 <SystemClockReConfig>
//#warning "Commented for test!"
  }

  SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800b466:	f04f 33ff 	mov.w	r3, #4294967295
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	2305      	movs	r3, #5
 800b46e:	2206      	movs	r2, #6
 800b470:	2107      	movs	r1, #7
 800b472:	480d      	ldr	r0, [pc, #52]	; (800b4a8 <BoardInitMcu+0x68>)
 800b474:	f002 f8bc 	bl	800d5f0 <SpiInit>
  SX1276IoInit( );
 800b478:	f002 fc86 	bl	800dd88 <SX1276IoInit>

  if( McuInitialized == false )
 800b47c:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <BoardInitMcu+0x64>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f083 0301 	eor.w	r3, r3, #1
 800b484:	b2db      	uxtb	r3, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <BoardInitMcu+0x5e>
  {
    McuInitialized = true;
 800b48a:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <BoardInitMcu+0x64>)
 800b48c:	2201      	movs	r2, #1
 800b48e:	701a      	strb	r2, [r3, #0]
    if( GetBoardPowerSource( ) == BATTERY_POWER )
 800b490:	f000 fa8c 	bl	800b9ac <GetBoardPowerSource>
 800b494:	4603      	mov	r3, r0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <BoardInitMcu+0x5e>
    {
      CalibrateSystemWakeupTime( );
 800b49a:	f000 fa01 	bl	800b8a0 <CalibrateSystemWakeupTime>
    }
  }
}
 800b49e:	bf00      	nop
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000724 	.word	0x20000724
 800b4a8:	20001344 	.word	0x20001344

0800b4ac <BoardDeInitMcu>:

void BoardDeInitMcu( void )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af02      	add	r7, sp, #8
  Gpio_t ioPin;
  
  SpiDeInit( &SX1276.Spi );
 800b4b2:	4818      	ldr	r0, [pc, #96]	; (800b514 <BoardDeInitMcu+0x68>)
 800b4b4:	f002 f99c 	bl	800d7f0 <SpiDeInit>
  SX1276IoDeInit( );
 800b4b8:	f002 fcac 	bl	800de14 <SX1276IoDeInit>
  
  GpioInit( &ioPin, OSC_HSE_IN, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4bc:	1d38      	adds	r0, r7, #4
 800b4be:	2300      	movs	r3, #0
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	2203      	movs	r2, #3
 800b4ca:	2160      	movs	r1, #96	; 0x60
 800b4cc:	f000 ffa4 	bl	800c418 <GpioInit>
  GpioInit( &ioPin, OSC_HSE_OUT, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4d0:	1d38      	adds	r0, r7, #4
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2203      	movs	r2, #3
 800b4de:	2161      	movs	r1, #97	; 0x61
 800b4e0:	f000 ff9a 	bl	800c418 <GpioInit>
  
  GpioInit( &ioPin, OSC_LSE_IN, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4e4:	1d38      	adds	r0, r7, #4
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	212e      	movs	r1, #46	; 0x2e
 800b4f4:	f000 ff90 	bl	800c418 <GpioInit>
  GpioInit( &ioPin, OSC_LSE_OUT, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4f8:	1d38      	adds	r0, r7, #4
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9301      	str	r3, [sp, #4]
 800b4fe:	2300      	movs	r3, #0
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	2300      	movs	r3, #0
 800b504:	2200      	movs	r2, #0
 800b506:	212f      	movs	r1, #47	; 0x2f
 800b508:	f000 ff86 	bl	800c418 <GpioInit>
}
 800b50c:	bf00      	nop
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20001344 	.word	0x20001344

0800b518 <BoardGetRandomSeed>:

uint32_t BoardGetRandomSeed( void )
{
 800b518:	b480      	push	{r7}
 800b51a:	af00      	add	r7, sp, #0
  return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <BoardGetRandomSeed+0x1c>)
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	4b05      	ldr	r3, [pc, #20]	; (800b538 <BoardGetRandomSeed+0x20>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	405a      	eors	r2, r3
 800b526:	4b05      	ldr	r3, [pc, #20]	; (800b53c <BoardGetRandomSeed+0x24>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4053      	eors	r3, r2
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr
 800b534:	1ff80050 	.word	0x1ff80050
 800b538:	1ff80054 	.word	0x1ff80054
 800b53c:	1ff80064 	.word	0x1ff80064

0800b540 <BoardBatteryMeasureVolage>:
#define BATTERY_SHUTDOWN_LEVEL                      3100 // mV

static uint16_t BatteryVoltage = BATTERY_MAX_LEVEL;

uint16_t BoardBatteryMeasureVolage( void )
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
  //    uint16_t vdd = 0;
  //    uint16_t vref = VREFINT_CAL;
  //    uint16_t vdiv = 0;
  uint16_t batteryVoltage = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	80fb      	strh	r3, [r7, #6]
  //    batteryVoltage = vdd * ( ( float )vdiv / ( float )ADC_MAX_VALUE );
  //
  //    //                                vDiv
  //    // Divider bridge  VBAT <-> 470k -<--|-->- 470k <-> GND => vBat = 2 * vDiv
  //    batteryVoltage = 2 * batteryVoltage;
  return batteryVoltage;
 800b54a:	88fb      	ldrh	r3, [r7, #6]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	bc80      	pop	{r7}
 800b554:	4770      	bx	lr
	...

0800b558 <BoardGetBatteryLevel>:
{
  return BatteryVoltage;
}

uint8_t BoardGetBatteryLevel( void )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	71fb      	strb	r3, [r7, #7]
  
  BatteryVoltage = BoardBatteryMeasureVolage( );
 800b562:	f7ff ffed 	bl	800b540 <BoardBatteryMeasureVolage>
 800b566:	4603      	mov	r3, r0
 800b568:	461a      	mov	r2, r3
 800b56a:	4b23      	ldr	r3, [pc, #140]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b56c:	801a      	strh	r2, [r3, #0]
  
  if( GetBoardPowerSource( ) == USB_POWER )
 800b56e:	f000 fa1d 	bl	800b9ac <GetBoardPowerSource>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <BoardGetBatteryLevel+0x26>
  {
    batteryLevel = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	71fb      	strb	r3, [r7, #7]
 800b57c:	e036      	b.n	800b5ec <BoardGetBatteryLevel+0x94>
  }
  else
  {
    if( BatteryVoltage >= BATTERY_MAX_LEVEL )
 800b57e:	4b1e      	ldr	r3, [pc, #120]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	f241 0235 	movw	r2, #4149	; 0x1035
 800b586:	4293      	cmp	r3, r2
 800b588:	d902      	bls.n	800b590 <BoardGetBatteryLevel+0x38>
    {
      batteryLevel = 254;
 800b58a:	23fe      	movs	r3, #254	; 0xfe
 800b58c:	71fb      	strb	r3, [r7, #7]
 800b58e:	e02d      	b.n	800b5ec <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_MIN_LEVEL ) && ( BatteryVoltage < BATTERY_MAX_LEVEL ) )
 800b590:	4b19      	ldr	r3, [pc, #100]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b598:	d918      	bls.n	800b5cc <BoardGetBatteryLevel+0x74>
 800b59a:	4b17      	ldr	r3, [pc, #92]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	f241 0235 	movw	r2, #4149	; 0x1035
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d812      	bhi.n	800b5cc <BoardGetBatteryLevel+0x74>
    {
      batteryLevel = ( ( 253 * ( BatteryVoltage - BATTERY_MIN_LEVEL ) ) / ( BATTERY_MAX_LEVEL - BATTERY_MIN_LEVEL ) ) + 1;
 800b5a6:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	f5a3 6248 	sub.w	r2, r3, #3200	; 0xc80
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	019b      	lsls	r3, r3, #6
 800b5b2:	1a9b      	subs	r3, r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	4a10      	ldr	r2, [pc, #64]	; (800b5fc <BoardGetBatteryLevel+0xa4>)
 800b5ba:	fb82 1203 	smull	r1, r2, r2, r3
 800b5be:	1212      	asrs	r2, r2, #8
 800b5c0:	17db      	asrs	r3, r3, #31
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	71fb      	strb	r3, [r7, #7]
 800b5ca:	e00f      	b.n	800b5ec <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_SHUTDOWN_LEVEL ) && ( BatteryVoltage <= BATTERY_MIN_LEVEL ) )
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d907      	bls.n	800b5e8 <BoardGetBatteryLevel+0x90>
 800b5d8:	4b07      	ldr	r3, [pc, #28]	; (800b5f8 <BoardGetBatteryLevel+0xa0>)
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b5e0:	d802      	bhi.n	800b5e8 <BoardGetBatteryLevel+0x90>
    {
      batteryLevel = 1;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	71fb      	strb	r3, [r7, #7]
 800b5e6:	e001      	b.n	800b5ec <BoardGetBatteryLevel+0x94>
    }
    else //if( BatteryVoltage <= BATTERY_SHUTDOWN_LEVEL )
    {
      batteryLevel = 255;
 800b5e8:	23ff      	movs	r3, #255	; 0xff
 800b5ea:	71fb      	strb	r3, [r7, #7]
      //GpioInit( &DcDcEnable, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
      //GpioInit( &BoardPowerDown, BOARD_POWER_DOWN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    }
  }
  return batteryLevel;
 800b5ec:	79fb      	ldrb	r3, [r7, #7]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	2000002e 	.word	0x2000002e
 800b5fc:	44fc3a35 	.word	0x44fc3a35

0800b600 <BoardUnusedIoInit>:

static void BoardUnusedIoInit( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af02      	add	r7, sp, #8
  Gpio_t ioPin;

	GpioInit( &ioPin, UNUSEDPINPA0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b606:	1d38      	adds	r0, r7, #4
 800b608:	2300      	movs	r3, #0
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	2300      	movs	r3, #0
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	2300      	movs	r3, #0
 800b612:	2203      	movs	r2, #3
 800b614:	2100      	movs	r1, #0
 800b616:	f000 feff 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b61a:	1d38      	adds	r0, r7, #4
 800b61c:	2300      	movs	r3, #0
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	2300      	movs	r3, #0
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	2300      	movs	r3, #0
 800b626:	2203      	movs	r2, #3
 800b628:	2101      	movs	r1, #1
 800b62a:	f000 fef5 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b62e:	1d38      	adds	r0, r7, #4
 800b630:	2300      	movs	r3, #0
 800b632:	9301      	str	r3, [sp, #4]
 800b634:	2300      	movs	r3, #0
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	2300      	movs	r3, #0
 800b63a:	2203      	movs	r2, #3
 800b63c:	2102      	movs	r1, #2
 800b63e:	f000 feeb 	bl	800c418 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPA3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPA8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b642:	1d38      	adds	r0, r7, #4
 800b644:	2300      	movs	r3, #0
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	2300      	movs	r3, #0
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	2300      	movs	r3, #0
 800b64e:	2203      	movs	r2, #3
 800b650:	2108      	movs	r1, #8
 800b652:	f000 fee1 	bl	800c418 <GpioInit>
#if !defined( USE_DEBUGGER )
	//GpioInit( &ioPin, UNUSEDPINPA9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );  // TX
	//GpioInit( &ioPin, UNUSEDPINPA10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // RX
	GpioInit( &ioPin, UNUSEDPINPA11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DM
 800b656:	1d38      	adds	r0, r7, #4
 800b658:	2300      	movs	r3, #0
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	2300      	movs	r3, #0
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	2300      	movs	r3, #0
 800b662:	2203      	movs	r2, #3
 800b664:	210b      	movs	r1, #11
 800b666:	f000 fed7 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DP
 800b66a:	1d38      	adds	r0, r7, #4
 800b66c:	2300      	movs	r3, #0
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	2300      	movs	r3, #0
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	2300      	movs	r3, #0
 800b676:	2203      	movs	r2, #3
 800b678:	210c      	movs	r1, #12
 800b67a:	f000 fecd 	bl	800c418 <GpioInit>
	//GpioInit( &ioPin, UNUSEDPINPA13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWDIO
	//GpioInit( &ioPin, UNUSEDPINPA14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWCLK
#endif
	GpioInit( &ioPin, UNUSEDPINPA15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b67e:	1d38      	adds	r0, r7, #4
 800b680:	2300      	movs	r3, #0
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	2300      	movs	r3, #0
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	2300      	movs	r3, #0
 800b68a:	2203      	movs	r2, #3
 800b68c:	210f      	movs	r1, #15
 800b68e:	f000 fec3 	bl	800c418 <GpioInit>

	GpioInit( &ioPin, UNUSEDPINPB0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b692:	1d38      	adds	r0, r7, #4
 800b694:	2300      	movs	r3, #0
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	2300      	movs	r3, #0
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	2300      	movs	r3, #0
 800b69e:	2203      	movs	r2, #3
 800b6a0:	2110      	movs	r1, #16
 800b6a2:	f000 feb9 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b6a6:	1d38      	adds	r0, r7, #4
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2203      	movs	r2, #3
 800b6b4:	2111      	movs	r1, #17
 800b6b6:	f000 feaf 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b6ba:	1d38      	adds	r0, r7, #4
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9301      	str	r3, [sp, #4]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	2203      	movs	r2, #3
 800b6c8:	2112      	movs	r1, #18
 800b6ca:	f000 fea5 	bl	800c418 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b6ce:	1d38      	adds	r0, r7, #4
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2203      	movs	r2, #3
 800b6dc:	2114      	movs	r1, #20
 800b6de:	f000 fe9b 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b6e2:	1d38      	adds	r0, r7, #4
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	2115      	movs	r1, #21
 800b6f2:	f000 fe91 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b6f6:	1d38      	adds	r0, r7, #4
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	2300      	movs	r3, #0
 800b702:	2203      	movs	r2, #3
 800b704:	2116      	movs	r1, #22
 800b706:	f000 fe87 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b70a:	1d38      	adds	r0, r7, #4
 800b70c:	2300      	movs	r3, #0
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	2300      	movs	r3, #0
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	2300      	movs	r3, #0
 800b716:	2203      	movs	r2, #3
 800b718:	2117      	movs	r1, #23
 800b71a:	f000 fe7d 	bl	800c418 <GpioInit>
	//GpioInit( &ioPin, UNUSEDPINPB8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b71e:	1d38      	adds	r0, r7, #4
 800b720:	2300      	movs	r3, #0
 800b722:	9301      	str	r3, [sp, #4]
 800b724:	2300      	movs	r3, #0
 800b726:	9300      	str	r3, [sp, #0]
 800b728:	2300      	movs	r3, #0
 800b72a:	2203      	movs	r2, #3
 800b72c:	2119      	movs	r1, #25
 800b72e:	f000 fe73 	bl	800c418 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPB11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b732:	1d38      	adds	r0, r7, #4
 800b734:	2300      	movs	r3, #0
 800b736:	9301      	str	r3, [sp, #4]
 800b738:	2300      	movs	r3, #0
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	2300      	movs	r3, #0
 800b73e:	2203      	movs	r2, #3
 800b740:	211c      	movs	r1, #28
 800b742:	f000 fe69 	bl	800c418 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b746:	1d38      	adds	r0, r7, #4
 800b748:	2300      	movs	r3, #0
 800b74a:	9301      	str	r3, [sp, #4]
 800b74c:	2300      	movs	r3, #0
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	2300      	movs	r3, #0
 800b752:	2203      	movs	r2, #3
 800b754:	211d      	movs	r1, #29
 800b756:	f000 fe5f 	bl	800c418 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPB15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );

	GpioInit( &ioPin, UNUSEDPINPC13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b75a:	1d38      	adds	r0, r7, #4
 800b75c:	2300      	movs	r3, #0
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	2300      	movs	r3, #0
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	2203      	movs	r2, #3
 800b768:	212d      	movs	r1, #45	; 0x2d
 800b76a:	f000 fe55 	bl	800c418 <GpioInit>
#if defined( USE_DEBUGGER )
  HAL_DBGMCU_EnableDBGStopMode( );
  HAL_DBGMCU_EnableDBGSleepMode( );
  HAL_DBGMCU_EnableDBGStandbyMode( );
#else
  HAL_DBGMCU_EnableDBGStopMode( );
 800b76e:	f7f5 fe39 	bl	80013e4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGSleepMode( );
 800b772:	f7f5 fe29 	bl	80013c8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStandbyMode( );
 800b776:	f7f5 fe43 	bl	8001400 <HAL_DBGMCU_EnableDBGStandbyMode>
  */
  //���ã����͹����¹ر�SWD�������޷���STLINK������¼���򣡣���
  //    GpioInit( &ioPin, SWDIO, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //    GpioInit( &ioPin, SWCLK, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
	...

0800b784 <SystemClockConfig>:

void SystemClockConfig( void )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b096      	sub	sp, #88	; 0x58
 800b788:	af00      	add	r7, sp, #0


	/****************************************************************************************************/
	/*                      HSI->SYS                HSE->PLL->USB                                       */
#elif !defined( USE_DEBUGGER )
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b78a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b78e:	2234      	movs	r2, #52	; 0x34
 800b790:	2100      	movs	r1, #0
 800b792:	4618      	mov	r0, r3
 800b794:	f007 f888 	bl	80128a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b798:	f107 0310 	add.w	r3, r7, #16
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	605a      	str	r2, [r3, #4]
 800b7a2:	609a      	str	r2, [r3, #8]
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b7a8:	f107 0308 	add.w	r3, r7, #8
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b7b2:	4b38      	ldr	r3, [pc, #224]	; (800b894 <SystemClockConfig+0x110>)
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	4a37      	ldr	r2, [pc, #220]	; (800b894 <SystemClockConfig+0x110>)
 800b7b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7bc:	6253      	str	r3, [r2, #36]	; 0x24
 800b7be:	4b35      	ldr	r3, [pc, #212]	; (800b894 <SystemClockConfig+0x110>)
 800b7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7c6:	607b      	str	r3, [r7, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b7ca:	4b33      	ldr	r3, [pc, #204]	; (800b898 <SystemClockConfig+0x114>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b7d2:	4a31      	ldr	r2, [pc, #196]	; (800b898 <SystemClockConfig+0x114>)
 800b7d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b7d8:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800b7da:	2307      	movs	r3, #7
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b7ee:	2302      	movs	r3, #2
 800b7f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b7f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b7f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800b7f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b7fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800b7fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b802:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b808:	4618      	mov	r0, r3
 800b80a:	f7f6 ff0f 	bl	800262c <HAL_RCC_OscConfig>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <SystemClockConfig+0x94>
  {
    Error_Handler();
 800b814:	f001 f9ac 	bl	800cb70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b818:	230f      	movs	r3, #15
 800b81a:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b81c:	2301      	movs	r3, #1
 800b81e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b820:	2300      	movs	r3, #0
 800b822:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b824:	2300      	movs	r3, #0
 800b826:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b828:	2300      	movs	r3, #0
 800b82a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800b82c:	f107 0310 	add.w	r3, r7, #16
 800b830:	2101      	movs	r1, #1
 800b832:	4618      	mov	r0, r3
 800b834:	f7f7 fa2a 	bl	8002c8c <HAL_RCC_ClockConfig>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <SystemClockConfig+0xbe>
  {
    Error_Handler();
 800b83e:	f001 f997 	bl	800cb70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b842:	2301      	movs	r3, #1
 800b844:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b84a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b84c:	f107 0308 	add.w	r3, r7, #8
 800b850:	4618      	mov	r0, r3
 800b852:	f7f7 fcaf 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <SystemClockConfig+0xdc>
  {
    Error_Handler();
 800b85c:	f001 f988 	bl	800cb70 <Error_Handler>
  }
#endif
  /**************************************************END***********************************************/


  HAL_SYSTICK_Config( HAL_RCC_GetHCLKFreq( ) / 1000 );
 800b860:	f7f7 fc16 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 800b864:	4603      	mov	r3, r0
 800b866:	4a0d      	ldr	r2, [pc, #52]	; (800b89c <SystemClockConfig+0x118>)
 800b868:	fba2 2303 	umull	r2, r3, r2, r3
 800b86c:	099b      	lsrs	r3, r3, #6
 800b86e:	4618      	mov	r0, r3
 800b870:	f7f6 f96b 	bl	8001b4a <HAL_SYSTICK_Config>
  
  HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 800b874:	2004      	movs	r0, #4
 800b876:	f7f6 f975 	bl	8001b64 <HAL_SYSTICK_CLKSourceConfig>
  
  // HAL_NVIC_GetPriorityGrouping
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800b87a:	2003      	movs	r0, #3
 800b87c:	f7f6 f930 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>
  
  // SysTick_IRQn interrupt configuration
  HAL_NVIC_SetPriority( SysTick_IRQn, 0, 0 );
 800b880:	2200      	movs	r2, #0
 800b882:	2100      	movs	r1, #0
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	f7f6 f935 	bl	8001af6 <HAL_NVIC_SetPriority>
}
 800b88c:	bf00      	nop
 800b88e:	3758      	adds	r7, #88	; 0x58
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	40023800 	.word	0x40023800
 800b898:	40007000 	.word	0x40007000
 800b89c:	10624dd3 	.word	0x10624dd3

0800b8a0 <CalibrateSystemWakeupTime>:

void CalibrateSystemWakeupTime( void )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	af00      	add	r7, sp, #0
  if( SystemWakeupTimeCalibrated == false )
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	; (800b8e4 <CalibrateSystemWakeupTime+0x44>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f083 0301 	eor.w	r3, r3, #1
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d015      	beq.n	800b8de <CalibrateSystemWakeupTime+0x3e>
  {
    TimerInit( &CalibrateSystemWakeupTimeTimer, OnCalibrateSystemWakeupTimeTimerEvent );
 800b8b2:	490d      	ldr	r1, [pc, #52]	; (800b8e8 <CalibrateSystemWakeupTime+0x48>)
 800b8b4:	480d      	ldr	r0, [pc, #52]	; (800b8ec <CalibrateSystemWakeupTime+0x4c>)
 800b8b6:	f004 fda1 	bl	80103fc <TimerInit>
    TimerSetValue( &CalibrateSystemWakeupTimeTimer, 1000 );
 800b8ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b8be:	480b      	ldr	r0, [pc, #44]	; (800b8ec <CalibrateSystemWakeupTime+0x4c>)
 800b8c0:	f004 ffba 	bl	8010838 <TimerSetValue>
    TimerStart( &CalibrateSystemWakeupTimeTimer );
 800b8c4:	4809      	ldr	r0, [pc, #36]	; (800b8ec <CalibrateSystemWakeupTime+0x4c>)
 800b8c6:	f004 fdb3 	bl	8010430 <TimerStart>
    while( SystemWakeupTimeCalibrated == false )
 800b8ca:	e001      	b.n	800b8d0 <CalibrateSystemWakeupTime+0x30>
    {
    	//HAL_Delay(2);
    	TimerLowPowerHandler( ); //开启低功耗模式时注释这里将导致收发窗口对不上
 800b8cc:	f004 fffa 	bl	80108c4 <TimerLowPowerHandler>
    while( SystemWakeupTimeCalibrated == false )
 800b8d0:	4b04      	ldr	r3, [pc, #16]	; (800b8e4 <CalibrateSystemWakeupTime+0x44>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f083 0301 	eor.w	r3, r3, #1
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1f6      	bne.n	800b8cc <CalibrateSystemWakeupTime+0x2c>
    }
  }
}
 800b8de:	bf00      	nop
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20000725 	.word	0x20000725
 800b8e8:	0800b3dd 	.word	0x0800b3dd
 800b8ec:	20000710 	.word	0x20000710

0800b8f0 <SystemClockReConfig>:

void SystemClockReConfig( void )
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b8f6:	4b29      	ldr	r3, [pc, #164]	; (800b99c <SystemClockReConfig+0xac>)
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	4a28      	ldr	r2, [pc, #160]	; (800b99c <SystemClockReConfig+0xac>)
 800b8fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b900:	6253      	str	r3, [r2, #36]	; 0x24
 800b902:	4b26      	ldr	r3, [pc, #152]	; (800b99c <SystemClockReConfig+0xac>)
 800b904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b90a:	607b      	str	r3, [r7, #4]
 800b90c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 800b90e:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <SystemClockReConfig+0xb0>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b916:	4a22      	ldr	r2, [pc, #136]	; (800b9a0 <SystemClockReConfig+0xb0>)
 800b918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b91c:	6013      	str	r3, [r2, #0]
  
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800b91e:	4b21      	ldr	r3, [pc, #132]	; (800b9a4 <SystemClockReConfig+0xb4>)
 800b920:	2201      	movs	r2, #1
 800b922:	601a      	str	r2, [r3, #0]
  __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 800b924:	4b1d      	ldr	r3, [pc, #116]	; (800b99c <SystemClockReConfig+0xac>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800b92c:	4a1b      	ldr	r2, [pc, #108]	; (800b99c <SystemClockReConfig+0xac>)
 800b92e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b932:	6053      	str	r3, [r2, #4]
  //__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST((uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> POSITION_VAL(RCC_ICSCR_HSITRIM)));

    
  /* Wait till HSI is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSIRDY ) == RESET )
 800b934:	bf00      	nop
 800b936:	4b19      	ldr	r3, [pc, #100]	; (800b99c <SystemClockReConfig+0xac>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f003 0302 	and.w	r3, r3, #2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d0f9      	beq.n	800b936 <SystemClockReConfig+0x46>
	{
	}
#if !defined( USE_DEBUGGER ) || defined( USB_VCP )
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 800b942:	4b16      	ldr	r3, [pc, #88]	; (800b99c <SystemClockReConfig+0xac>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a15      	ldr	r2, [pc, #84]	; (800b99c <SystemClockReConfig+0xac>)
 800b948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b94c:	6013      	str	r3, [r2, #0]
  /* Enable PLL */
	__HAL_RCC_PLL_ENABLE( );
 800b94e:	4b16      	ldr	r3, [pc, #88]	; (800b9a8 <SystemClockReConfig+0xb8>)
 800b950:	2201      	movs	r2, #1
 800b952:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSERDY ) == RESET )
 800b954:	bf00      	nop
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <SystemClockReConfig+0xac>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0f9      	beq.n	800b956 <SystemClockReConfig+0x66>
	{
	}

  /* Wait till PLL is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET )
 800b962:	bf00      	nop
 800b964:	4b0d      	ldr	r3, [pc, #52]	; (800b99c <SystemClockReConfig+0xac>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f9      	beq.n	800b964 <SystemClockReConfig+0x74>
	{
	}


	/* Select PLL as system clock source */
	__HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_HSI );
 800b970:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <SystemClockReConfig+0xac>)
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	f023 0303 	bic.w	r3, r3, #3
 800b978:	4a08      	ldr	r2, [pc, #32]	; (800b99c <SystemClockReConfig+0xac>)
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	6093      	str	r3, [r2, #8]

	/* Wait till PLL is used as system clock source */
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_HSI )
 800b980:	bf00      	nop
 800b982:	4b06      	ldr	r3, [pc, #24]	; (800b99c <SystemClockReConfig+0xac>)
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f003 030c 	and.w	r3, r3, #12
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d1f9      	bne.n	800b982 <SystemClockReConfig+0x92>
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK )
	{
	}
	/*PLL->SYS*/
#endif
}
 800b98e:	bf00      	nop
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	bc80      	pop	{r7}
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	40023800 	.word	0x40023800
 800b9a0:	40007000 	.word	0x40007000
 800b9a4:	42470000 	.word	0x42470000
 800b9a8:	42470060 	.word	0x42470060

0800b9ac <GetBoardPowerSource>:
  HAL_SYSTICK_IRQHandler( );
}
*/

uint8_t GetBoardPowerSource( void )
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	af00      	add	r7, sp, #0
  else
  {
    return USB_POWER;
  }
#else
  return BATTERY_POWER;
 800b9b0:	2301      	movs	r3, #1
#endif
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bc80      	pop	{r7}
 800b9b8:	4770      	bx	lr

0800b9ba <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b082      	sub	sp, #8
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	33f1      	adds	r3, #241	; 0xf1
 800b9c6:	2210      	movs	r2, #16
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f005 f86e 	bl	8010aac <memset1>
            ctx->M_n = 0;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	22f0      	movs	r2, #240	; 0xf0
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f005 f864 	bl	8010aac <memset1>
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	2110      	movs	r1, #16
 800b9fc:	6838      	ldr	r0, [r7, #0]
 800b9fe:	f7ff fbc5 	bl	800b18c <aes_set_key>
}
 800ba02:	bf00      	nop
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b08c      	sub	sp, #48	; 0x30
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	60f8      	str	r0, [r7, #12]
 800ba12:	60b9      	str	r1, [r7, #8]
 800ba14:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 808f 	beq.w	800bb40 <AES_CMAC_Update+0x136>
                  mlen = MIN(16 - ctx->M_n, len);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ba28:	f1c3 0310 	rsb	r3, r3, #16
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	bf28      	it	cs
 800ba32:	4613      	movcs	r3, r2
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ba42:	4413      	add	r3, r2
 800ba44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba46:	b292      	uxth	r2, r2
 800ba48:	68b9      	ldr	r1, [r7, #8]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f004 fff3 	bl	8010a36 <memcpy1>
                    ctx->M_n += mlen;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	441a      	add	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ba66:	2b0f      	cmp	r3, #15
 800ba68:	d97b      	bls.n	800bb62 <AES_CMAC_Update+0x158>
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d077      	beq.n	800bb62 <AES_CMAC_Update+0x158>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800ba72:	2300      	movs	r3, #0
 800ba74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba76:	e015      	b.n	800baa4 <AES_CMAC_Update+0x9a>
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7c:	4413      	add	r3, r2
 800ba7e:	33f1      	adds	r3, #241	; 0xf1
 800ba80:	781a      	ldrb	r2, [r3, #0]
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba86:	440b      	add	r3, r1
 800ba88:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	4053      	eors	r3, r2
 800ba90:	b2d9      	uxtb	r1, r3
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	4413      	add	r3, r2
 800ba98:	33f1      	adds	r3, #241	; 0xf1
 800ba9a:	460a      	mov	r2, r1
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa0:	3301      	adds	r3, #1
 800baa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa6:	2b0f      	cmp	r3, #15
 800baa8:	dde6      	ble.n	800ba78 <AES_CMAC_Update+0x6e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	33f1      	adds	r3, #241	; 0xf1
 800bab4:	68fa      	ldr	r2, [r7, #12]
 800bab6:	4619      	mov	r1, r3
 800bab8:	f7ff fc46 	bl	800b348 <aes_encrypt>
                    data += mlen;
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac0:	4413      	add	r3, r2
 800bac2:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	1ad3      	subs	r3, r2, r3
 800baca:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800bacc:	e038      	b.n	800bb40 <AES_CMAC_Update+0x136>

                    XOR(data, ctx->X);
 800bace:	2300      	movs	r3, #0
 800bad0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bad2:	e013      	b.n	800bafc <AES_CMAC_Update+0xf2>
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	4413      	add	r3, r2
 800bada:	33f1      	adds	r3, #241	; 0xf1
 800badc:	781a      	ldrb	r2, [r3, #0]
 800bade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae0:	68b9      	ldr	r1, [r7, #8]
 800bae2:	440b      	add	r3, r1
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	4053      	eors	r3, r2
 800bae8:	b2d9      	uxtb	r1, r3
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	4413      	add	r3, r2
 800baf0:	33f1      	adds	r3, #241	; 0xf1
 800baf2:	460a      	mov	r2, r1
 800baf4:	701a      	strb	r2, [r3, #0]
 800baf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf8:	3301      	adds	r3, #1
 800bafa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	2b0f      	cmp	r3, #15
 800bb00:	dde8      	ble.n	800bad4 <AES_CMAC_Update+0xca>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bb08:	f107 0314 	add.w	r3, r7, #20
 800bb0c:	2210      	movs	r2, #16
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f004 ff91 	bl	8010a36 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f107 0114 	add.w	r1, r7, #20
 800bb1a:	f107 0314 	add.w	r3, r7, #20
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff fc12 	bl	800b348 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	33f1      	adds	r3, #241	; 0xf1
 800bb28:	f107 0114 	add.w	r1, r7, #20
 800bb2c:	2210      	movs	r2, #16
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f004 ff81 	bl	8010a36 <memcpy1>

                    data += 16;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	3310      	adds	r3, #16
 800bb38:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3b10      	subs	r3, #16
 800bb3e:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b10      	cmp	r3, #16
 800bb44:	d8c3      	bhi.n	800bace <AES_CMAC_Update+0xc4>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	b292      	uxth	r2, r2
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f004 ff6f 	bl	8010a36 <memcpy1>
            ctx->M_n = len;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bb60:	e000      	b.n	800bb64 <AES_CMAC_Update+0x15a>
                            return;
 800bb62:	bf00      	nop
}
 800bb64:	3730      	adds	r7, #48	; 0x30
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b092      	sub	sp, #72	; 0x48
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800bb74:	f107 031c 	add.w	r3, r7, #28
 800bb78:	2210      	movs	r2, #16
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f004 ff95 	bl	8010aac <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	f107 011c 	add.w	r1, r7, #28
 800bb88:	f107 031c 	add.w	r3, r7, #28
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7ff fbdb 	bl	800b348 <aes_encrypt>

            if (K[0] & 0x80) {
 800bb92:	7f3b      	ldrb	r3, [r7, #28]
 800bb94:	b25b      	sxtb	r3, r3
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da31      	bge.n	800bbfe <AES_CMAC_Final+0x94>
                    LSHIFT(K, K);
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb9e:	e01c      	b.n	800bbda <AES_CMAC_Final+0x70>
 800bba0:	f107 021c 	add.w	r2, r7, #28
 800bba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bba6:	4413      	add	r3, r2
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	b25a      	sxtb	r2, r3
 800bbae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bbb6:	440b      	add	r3, r1
 800bbb8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bbbc:	09db      	lsrs	r3, r3, #7
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	b25b      	sxtb	r3, r3
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	b25b      	sxtb	r3, r3
 800bbc6:	b2d9      	uxtb	r1, r3
 800bbc8:	f107 021c 	add.w	r2, r7, #28
 800bbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbce:	4413      	add	r3, r2
 800bbd0:	460a      	mov	r2, r1
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	647b      	str	r3, [r7, #68]	; 0x44
 800bbda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbdc:	2b0e      	cmp	r3, #14
 800bbde:	dddf      	ble.n	800bba0 <AES_CMAC_Final+0x36>
 800bbe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                   K[15] ^= 0x87;
 800bbec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bbf0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bbf4:	43db      	mvns	r3, r3
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbfc:	e028      	b.n	800bc50 <AES_CMAC_Final+0xe6>
            } else
                    LSHIFT(K, K);
 800bbfe:	2300      	movs	r3, #0
 800bc00:	643b      	str	r3, [r7, #64]	; 0x40
 800bc02:	e01c      	b.n	800bc3e <AES_CMAC_Final+0xd4>
 800bc04:	f107 021c 	add.w	r2, r7, #28
 800bc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc0a:	4413      	add	r3, r2
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	005b      	lsls	r3, r3, #1
 800bc10:	b25a      	sxtb	r2, r3
 800bc12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc14:	3301      	adds	r3, #1
 800bc16:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bc1a:	440b      	add	r3, r1
 800bc1c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bc20:	09db      	lsrs	r3, r3, #7
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b25b      	sxtb	r3, r3
 800bc2a:	b2d9      	uxtb	r1, r3
 800bc2c:	f107 021c 	add.w	r2, r7, #28
 800bc30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc32:	4413      	add	r3, r2
 800bc34:	460a      	mov	r2, r1
 800bc36:	701a      	strb	r2, [r3, #0]
 800bc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	643b      	str	r3, [r7, #64]	; 0x40
 800bc3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc40:	2b0e      	cmp	r3, #14
 800bc42:	dddf      	ble.n	800bc04 <AES_CMAC_Final+0x9a>
 800bc44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


            if (ctx->M_n == 16) {
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bc56:	2b10      	cmp	r3, #16
 800bc58:	d11d      	bne.n	800bc96 <AES_CMAC_Final+0x12c>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5e:	e016      	b.n	800bc8e <AES_CMAC_Final+0x124>
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc64:	4413      	add	r3, r2
 800bc66:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bc6a:	781a      	ldrb	r2, [r3, #0]
 800bc6c:	f107 011c 	add.w	r1, r7, #28
 800bc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc72:	440b      	add	r3, r1
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	4053      	eors	r3, r2
 800bc78:	b2d9      	uxtb	r1, r3
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7e:	4413      	add	r3, r2
 800bc80:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bc84:	460a      	mov	r2, r1
 800bc86:	701a      	strb	r2, [r3, #0]
 800bc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc90:	2b0f      	cmp	r3, #15
 800bc92:	dde5      	ble.n	800bc60 <AES_CMAC_Final+0xf6>
 800bc94:	e098      	b.n	800bdc8 <AES_CMAC_Final+0x25e>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800bc96:	7f3b      	ldrb	r3, [r7, #28]
 800bc98:	b25b      	sxtb	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	da31      	bge.n	800bd02 <AES_CMAC_Final+0x198>
                          LSHIFT(K, K);
 800bc9e:	2300      	movs	r3, #0
 800bca0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bca2:	e01c      	b.n	800bcde <AES_CMAC_Final+0x174>
 800bca4:	f107 021c 	add.w	r2, r7, #28
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	4413      	add	r3, r2
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	005b      	lsls	r3, r3, #1
 800bcb0:	b25a      	sxtb	r2, r3
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bcba:	440b      	add	r3, r1
 800bcbc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bcc0:	09db      	lsrs	r3, r3, #7
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	b25b      	sxtb	r3, r3
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	b25b      	sxtb	r3, r3
 800bcca:	b2d9      	uxtb	r1, r3
 800bccc:	f107 021c 	add.w	r2, r7, #28
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	4413      	add	r3, r2
 800bcd4:	460a      	mov	r2, r1
 800bcd6:	701a      	strb	r2, [r3, #0]
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	3301      	adds	r3, #1
 800bcdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	2b0e      	cmp	r3, #14
 800bce2:	dddf      	ble.n	800bca4 <AES_CMAC_Final+0x13a>
 800bce4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                          K[15] ^= 0x87;
 800bcf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcf4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800bcf8:	43db      	mvns	r3, r3
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd00:	e028      	b.n	800bd54 <AES_CMAC_Final+0x1ea>
                  } else
                           LSHIFT(K, K);
 800bd02:	2300      	movs	r3, #0
 800bd04:	637b      	str	r3, [r7, #52]	; 0x34
 800bd06:	e01c      	b.n	800bd42 <AES_CMAC_Final+0x1d8>
 800bd08:	f107 021c 	add.w	r2, r7, #28
 800bd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0e:	4413      	add	r3, r2
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	b25a      	sxtb	r2, r3
 800bd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd18:	3301      	adds	r3, #1
 800bd1a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bd1e:	440b      	add	r3, r1
 800bd20:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bd24:	09db      	lsrs	r3, r3, #7
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	b25b      	sxtb	r3, r3
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	b25b      	sxtb	r3, r3
 800bd2e:	b2d9      	uxtb	r1, r3
 800bd30:	f107 021c 	add.w	r2, r7, #28
 800bd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd36:	4413      	add	r3, r2
 800bd38:	460a      	mov	r2, r1
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3e:	3301      	adds	r3, #1
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
 800bd42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd44:	2b0e      	cmp	r3, #14
 800bd46:	dddf      	ble.n	800bd08 <AES_CMAC_Final+0x19e>
 800bd48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	2280      	movs	r2, #128	; 0x80
 800bd60:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800bd64:	e007      	b.n	800bd76 <AES_CMAC_Final+0x20c>
                         ctx->M_last[ctx->M_n] = 0;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	4413      	add	r3, r2
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd7c:	1c5a      	adds	r2, r3, #1
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd8a:	2b0f      	cmp	r3, #15
 800bd8c:	d9eb      	bls.n	800bd66 <AES_CMAC_Final+0x1fc>
   
                  XOR(K, ctx->M_last);
 800bd8e:	2300      	movs	r3, #0
 800bd90:	633b      	str	r3, [r7, #48]	; 0x30
 800bd92:	e016      	b.n	800bdc2 <AES_CMAC_Final+0x258>
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	4413      	add	r3, r2
 800bd9a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bd9e:	781a      	ldrb	r2, [r3, #0]
 800bda0:	f107 011c 	add.w	r1, r7, #28
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	440b      	add	r3, r1
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	4053      	eors	r3, r2
 800bdac:	b2d9      	uxtb	r1, r3
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	4413      	add	r3, r2
 800bdb4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bdb8:	460a      	mov	r2, r1
 800bdba:	701a      	strb	r2, [r3, #0]
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	633b      	str	r3, [r7, #48]	; 0x30
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	2b0f      	cmp	r3, #15
 800bdc6:	dde5      	ble.n	800bd94 <AES_CMAC_Final+0x22a>


           }
           XOR(ctx->M_last, ctx->X);
 800bdc8:	2300      	movs	r3, #0
 800bdca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdcc:	e015      	b.n	800bdfa <AES_CMAC_Final+0x290>
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	4413      	add	r3, r2
 800bdd4:	33f1      	adds	r3, #241	; 0xf1
 800bdd6:	781a      	ldrb	r2, [r3, #0]
 800bdd8:	6839      	ldr	r1, [r7, #0]
 800bdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bddc:	440b      	add	r3, r1
 800bdde:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	4053      	eors	r3, r2
 800bde6:	b2d9      	uxtb	r1, r3
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdec:	4413      	add	r3, r2
 800bdee:	33f1      	adds	r3, #241	; 0xf1
 800bdf0:	460a      	mov	r2, r1
 800bdf2:	701a      	strb	r2, [r3, #0]
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	2b0f      	cmp	r3, #15
 800bdfe:	dde6      	ble.n	800bdce <AES_CMAC_Final+0x264>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800be06:	f107 030c 	add.w	r3, r7, #12
 800be0a:	2210      	movs	r2, #16
 800be0c:	4618      	mov	r0, r3
 800be0e:	f004 fe12 	bl	8010a36 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	6879      	ldr	r1, [r7, #4]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fa94 	bl	800b348 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800be20:	f107 031c 	add.w	r3, r7, #28
 800be24:	2210      	movs	r2, #16
 800be26:	2100      	movs	r1, #0
 800be28:	4618      	mov	r0, r3
 800be2a:	f004 fe3f 	bl	8010aac <memset1>

}
 800be2e:	bf00      	nop
 800be30:	3748      	adds	r7, #72	; 0x48
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7f5 fa84 	bl	800134c <HAL_Delay>
}
 800be44:	bf00      	nop
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <FifoNext>:
Maintainer: Miguel Luis and Gregory Cristian
*/
#include "fifo.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	807b      	strh	r3, [r7, #2]
    return ( index + 1 ) % fifo->Size;
 800be58:	887b      	ldrh	r3, [r7, #2]
 800be5a:	3301      	adds	r3, #1
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	8912      	ldrh	r2, [r2, #8]
 800be60:	fb93 f1f2 	sdiv	r1, r3, r2
 800be64:	fb02 f201 	mul.w	r2, r2, r1
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	b29b      	uxth	r3, r3
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	bc80      	pop	{r7}
 800be74:	4770      	bx	lr

0800be76 <FifoPop>:
    fifo->End = FifoNext( fifo, fifo->End );
    fifo->Data[fifo->End] = data;
}

uint8_t FifoPop( Fifo_t *fifo )
{
 800be76:	b590      	push	{r4, r7, lr}
 800be78:	b085      	sub	sp, #20
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
    uint8_t data = fifo->Data[FifoNext( fifo, fifo->Begin )];
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685c      	ldr	r4, [r3, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	4619      	mov	r1, r3
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7ff ffdf 	bl	800be4c <FifoNext>
 800be8e:	4603      	mov	r3, r0
 800be90:	4423      	add	r3, r4
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	73fb      	strb	r3, [r7, #15]

    fifo->Begin = FifoNext( fifo, fifo->Begin );
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff ffd5 	bl	800be4c <FifoNext>
 800bea2:	4603      	mov	r3, r0
 800bea4:	461a      	mov	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	801a      	strh	r2, [r3, #0]
    return data;
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd90      	pop	{r4, r7, pc}

0800beb4 <IsFifoEmpty>:
    fifo->Begin = 0;
    fifo->End = 0;
}

bool IsFifoEmpty( Fifo_t *fifo )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
    return ( fifo->Begin == fifo->End );
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	881a      	ldrh	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	885b      	ldrh	r3, [r3, #2]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	bf0c      	ite	eq
 800bec8:	2301      	moveq	r3, #1
 800beca:	2300      	movne	r3, #0
 800becc:	b2db      	uxtb	r3, r3
}
 800bece:	4618      	mov	r0, r3
 800bed0:	370c      	adds	r7, #12
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bc80      	pop	{r7}
 800bed6:	4770      	bx	lr

0800bed8 <GpioMcuInit>:
extern bool BewegungInterruptAusgeloest;

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08c      	sub	sp, #48	; 0x30
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	4608      	mov	r0, r1
 800bee2:	4611      	mov	r1, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	4603      	mov	r3, r0
 800bee8:	70fb      	strb	r3, [r7, #3]
 800beea:	460b      	mov	r3, r1
 800beec:	70bb      	strb	r3, [r7, #2]
 800beee:	4613      	mov	r3, r2
 800bef0:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    obj->pin = pin;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	78fa      	ldrb	r2, [r7, #3]
 800bef6:	701a      	strb	r2, [r3, #0]

    if( pin == NC )
 800bef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800befc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf00:	f000 80b5 	beq.w	800c06e <GpioMcuInit+0x196>
    {
        return;
    }

    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f993 3000 	ldrsb.w	r3, [r3]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	f003 030f 	and.w	r3, r3, #15
 800bf10:	2201      	movs	r2, #1
 800bf12:	fa02 f303 	lsl.w	r3, r2, r3
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f993 3000 	ldrsb.w	r3, [r3]
 800bf22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10f      	bne.n	800bf4a <GpioMcuInit+0x72>
    {
        obj->port = GPIOA;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a52      	ldr	r2, [pc, #328]	; (800c078 <GpioMcuInit+0x1a0>)
 800bf2e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800bf30:	4b52      	ldr	r3, [pc, #328]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf32:	69db      	ldr	r3, [r3, #28]
 800bf34:	4a51      	ldr	r2, [pc, #324]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	61d3      	str	r3, [r2, #28]
 800bf3c:	4b4f      	ldr	r3, [pc, #316]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	61bb      	str	r3, [r7, #24]
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	e053      	b.n	800bff2 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f993 3000 	ldrsb.w	r3, [r3]
 800bf50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf54:	2b10      	cmp	r3, #16
 800bf56:	d10f      	bne.n	800bf78 <GpioMcuInit+0xa0>
    {
        obj->port = GPIOB;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a49      	ldr	r2, [pc, #292]	; (800c080 <GpioMcuInit+0x1a8>)
 800bf5c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 800bf5e:	4b47      	ldr	r3, [pc, #284]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	4a46      	ldr	r2, [pc, #280]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf64:	f043 0302 	orr.w	r3, r3, #2
 800bf68:	61d3      	str	r3, [r2, #28]
 800bf6a:	4b44      	ldr	r3, [pc, #272]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	617b      	str	r3, [r7, #20]
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	e03c      	b.n	800bff2 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f993 3000 	ldrsb.w	r3, [r3]
 800bf7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d10f      	bne.n	800bfa6 <GpioMcuInit+0xce>
    {
        obj->port = GPIOC;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a3e      	ldr	r2, [pc, #248]	; (800c084 <GpioMcuInit+0x1ac>)
 800bf8a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800bf8c:	4b3b      	ldr	r3, [pc, #236]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf8e:	69db      	ldr	r3, [r3, #28]
 800bf90:	4a3a      	ldr	r2, [pc, #232]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf92:	f043 0304 	orr.w	r3, r3, #4
 800bf96:	61d3      	str	r3, [r2, #28]
 800bf98:	4b38      	ldr	r3, [pc, #224]	; (800c07c <GpioMcuInit+0x1a4>)
 800bf9a:	69db      	ldr	r3, [r3, #28]
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	613b      	str	r3, [r7, #16]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	e025      	b.n	800bff2 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f993 3000 	ldrsb.w	r3, [r3]
 800bfac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfb0:	2b30      	cmp	r3, #48	; 0x30
 800bfb2:	d10f      	bne.n	800bfd4 <GpioMcuInit+0xfc>
    {
        obj->port = GPIOD;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a34      	ldr	r2, [pc, #208]	; (800c088 <GpioMcuInit+0x1b0>)
 800bfb8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 800bfba:	4b30      	ldr	r3, [pc, #192]	; (800c07c <GpioMcuInit+0x1a4>)
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	4a2f      	ldr	r2, [pc, #188]	; (800c07c <GpioMcuInit+0x1a4>)
 800bfc0:	f043 0308 	orr.w	r3, r3, #8
 800bfc4:	61d3      	str	r3, [r2, #28]
 800bfc6:	4b2d      	ldr	r3, [pc, #180]	; (800c07c <GpioMcuInit+0x1a4>)
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	f003 0308 	and.w	r3, r3, #8
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	e00e      	b.n	800bff2 <GpioMcuInit+0x11a>
    }
    else
    {
        obj->port = GPIOH;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a2d      	ldr	r2, [pc, #180]	; (800c08c <GpioMcuInit+0x1b4>)
 800bfd8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 800bfda:	4b28      	ldr	r3, [pc, #160]	; (800c07c <GpioMcuInit+0x1a4>)
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	4a27      	ldr	r2, [pc, #156]	; (800c07c <GpioMcuInit+0x1a4>)
 800bfe0:	f043 0320 	orr.w	r3, r3, #32
 800bfe4:	61d3      	str	r3, [r2, #28]
 800bfe6:	4b25      	ldr	r3, [pc, #148]	; (800c07c <GpioMcuInit+0x1a4>)
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	60bb      	str	r3, [r7, #8]
 800bff0:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	885b      	ldrh	r3, [r3, #2]
 800bff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = obj->pull = type;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bffe:	729a      	strb	r2, [r3, #10]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	7a9b      	ldrb	r3, [r3, #10]
 800c004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c006:	2302      	movs	r3, #2
 800c008:	62bb      	str	r3, [r7, #40]	; 0x28

    if( mode == PIN_INPUT )
 800c00a:	78bb      	ldrb	r3, [r7, #2]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d102      	bne.n	800c016 <GpioMcuInit+0x13e>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c010:	2300      	movs	r3, #0
 800c012:	623b      	str	r3, [r7, #32]
 800c014:	e01b      	b.n	800c04e <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ANALOGIC )
 800c016:	78bb      	ldrb	r3, [r7, #2]
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d102      	bne.n	800c022 <GpioMcuInit+0x14a>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800c01c:	2303      	movs	r3, #3
 800c01e:	623b      	str	r3, [r7, #32]
 800c020:	e015      	b.n	800c04e <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800c022:	78bb      	ldrb	r3, [r7, #2]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d10a      	bne.n	800c03e <GpioMcuInit+0x166>
    {
        if( config == PIN_OPEN_DRAIN )
 800c028:	787b      	ldrb	r3, [r7, #1]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d102      	bne.n	800c034 <GpioMcuInit+0x15c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800c02e:	2312      	movs	r3, #18
 800c030:	623b      	str	r3, [r7, #32]
 800c032:	e001      	b.n	800c038 <GpioMcuInit+0x160>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c034:	2302      	movs	r3, #2
 800c036:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800c038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c03c:	e007      	b.n	800c04e <GpioMcuInit+0x176>
    }
    else // mode output
    {
        if( config == PIN_OPEN_DRAIN )
 800c03e:	787b      	ldrb	r3, [r7, #1]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d102      	bne.n	800c04a <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800c044:	2311      	movs	r3, #17
 800c046:	623b      	str	r3, [r7, #32]
 800c048:	e001      	b.n	800c04e <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c04a:	2301      	movs	r3, #1
 800c04c:	623b      	str	r3, [r7, #32]
        }
    }

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 800c04e:	78bb      	ldrb	r3, [r7, #2]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d103      	bne.n	800c05c <GpioMcuInit+0x184>
    {
        GpioMcuWrite( obj, value );
 800c054:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f92c 	bl	800c2b4 <GpioMcuWrite>
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	f107 021c 	add.w	r2, r7, #28
 800c064:	4611      	mov	r1, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f7f5 ffd4 	bl	8002014 <HAL_GPIO_Init>
 800c06c:	e000      	b.n	800c070 <GpioMcuInit+0x198>
        return;
 800c06e:	bf00      	nop
}
 800c070:	3730      	adds	r7, #48	; 0x30
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40020000 	.word	0x40020000
 800c07c:	40023800 	.word	0x40023800
 800c080:	40020400 	.word	0x40020400
 800c084:	40020800 	.word	0x40020800
 800c088:	40020c00 	.word	0x40020c00
 800c08c:	40021400 	.word	0x40021400

0800c090 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08c      	sub	sp, #48	; 0x30
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	607b      	str	r3, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	72fb      	strb	r3, [r7, #11]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 800c0a6:	2306      	movs	r3, #6
 800c0a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 80f9 	beq.w	800c2a6 <GpioMcuSetInterrupt+0x216>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	885b      	ldrh	r3, [r3, #2]
 800c0b8:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 800c0ba:	7afb      	ldrb	r3, [r7, #11]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d103      	bne.n	800c0c8 <GpioMcuSetInterrupt+0x38>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c0c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c0c4:	61bb      	str	r3, [r7, #24]
 800c0c6:	e009      	b.n	800c0dc <GpioMcuSetInterrupt+0x4c>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 800c0c8:	7afb      	ldrb	r3, [r7, #11]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d103      	bne.n	800c0d6 <GpioMcuSetInterrupt+0x46>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800c0ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e002      	b.n	800c0dc <GpioMcuSetInterrupt+0x4c>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800c0d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800c0da:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = obj->pull;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	7a9b      	ldrb	r3, [r3, #10]
 800c0e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f107 0214 	add.w	r2, r7, #20
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7f5 ff8f 	bl	8002014 <HAL_GPIO_Init>

    switch( irqPriority )
 800c0f6:	7abb      	ldrb	r3, [r7, #10]
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d00f      	beq.n	800c11c <GpioMcuSetInterrupt+0x8c>
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	dc10      	bgt.n	800c122 <GpioMcuSetInterrupt+0x92>
 800c100:	2b01      	cmp	r3, #1
 800c102:	dc02      	bgt.n	800c10a <GpioMcuSetInterrupt+0x7a>
 800c104:	2b00      	cmp	r3, #0
 800c106:	da03      	bge.n	800c110 <GpioMcuSetInterrupt+0x80>
 800c108:	e00b      	b.n	800c122 <GpioMcuSetInterrupt+0x92>
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d003      	beq.n	800c116 <GpioMcuSetInterrupt+0x86>
 800c10e:	e008      	b.n	800c122 <GpioMcuSetInterrupt+0x92>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 800c110:	2303      	movs	r3, #3
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c114:	e008      	b.n	800c128 <GpioMcuSetInterrupt+0x98>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800c116:	2302      	movs	r3, #2
 800c118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c11a:	e005      	b.n	800c128 <GpioMcuSetInterrupt+0x98>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800c11c:	2301      	movs	r3, #1
 800c11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c120:	e002      	b.n	800c128 <GpioMcuSetInterrupt+0x98>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c126:	bf00      	nop
    }

    switch( obj->pinIndex )
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	885b      	ldrh	r3, [r3, #2]
 800c12c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c130:	f000 809d 	beq.w	800c26e <GpioMcuSetInterrupt+0x1de>
 800c134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c138:	f300 809d 	bgt.w	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c13c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c140:	f000 8095 	beq.w	800c26e <GpioMcuSetInterrupt+0x1de>
 800c144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c148:	f300 8095 	bgt.w	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c14c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c150:	f000 808d 	beq.w	800c26e <GpioMcuSetInterrupt+0x1de>
 800c154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c158:	f300 808d 	bgt.w	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c160:	f000 8085 	beq.w	800c26e <GpioMcuSetInterrupt+0x1de>
 800c164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c168:	f300 8085 	bgt.w	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c170:	d07d      	beq.n	800c26e <GpioMcuSetInterrupt+0x1de>
 800c172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c176:	dc7e      	bgt.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17c:	d077      	beq.n	800c26e <GpioMcuSetInterrupt+0x1de>
 800c17e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c182:	dc78      	bgt.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c188:	d06d      	beq.n	800c266 <GpioMcuSetInterrupt+0x1d6>
 800c18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c18e:	dc72      	bgt.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c194:	d067      	beq.n	800c266 <GpioMcuSetInterrupt+0x1d6>
 800c196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c19a:	dc6c      	bgt.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c19c:	2b80      	cmp	r3, #128	; 0x80
 800c19e:	d062      	beq.n	800c266 <GpioMcuSetInterrupt+0x1d6>
 800c1a0:	2b80      	cmp	r3, #128	; 0x80
 800c1a2:	dc68      	bgt.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	dc47      	bgt.n	800c238 <GpioMcuSetInterrupt+0x1a8>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dd64      	ble.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	2b1f      	cmp	r3, #31
 800c1b0:	d861      	bhi.n	800c276 <GpioMcuSetInterrupt+0x1e6>
 800c1b2:	a201      	add	r2, pc, #4	; (adr r2, 800c1b8 <GpioMcuSetInterrupt+0x128>)
 800c1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b8:	0800c23f 	.word	0x0800c23f
 800c1bc:	0800c247 	.word	0x0800c247
 800c1c0:	0800c277 	.word	0x0800c277
 800c1c4:	0800c24f 	.word	0x0800c24f
 800c1c8:	0800c277 	.word	0x0800c277
 800c1cc:	0800c277 	.word	0x0800c277
 800c1d0:	0800c277 	.word	0x0800c277
 800c1d4:	0800c257 	.word	0x0800c257
 800c1d8:	0800c277 	.word	0x0800c277
 800c1dc:	0800c277 	.word	0x0800c277
 800c1e0:	0800c277 	.word	0x0800c277
 800c1e4:	0800c277 	.word	0x0800c277
 800c1e8:	0800c277 	.word	0x0800c277
 800c1ec:	0800c277 	.word	0x0800c277
 800c1f0:	0800c277 	.word	0x0800c277
 800c1f4:	0800c25f 	.word	0x0800c25f
 800c1f8:	0800c277 	.word	0x0800c277
 800c1fc:	0800c277 	.word	0x0800c277
 800c200:	0800c277 	.word	0x0800c277
 800c204:	0800c277 	.word	0x0800c277
 800c208:	0800c277 	.word	0x0800c277
 800c20c:	0800c277 	.word	0x0800c277
 800c210:	0800c277 	.word	0x0800c277
 800c214:	0800c277 	.word	0x0800c277
 800c218:	0800c277 	.word	0x0800c277
 800c21c:	0800c277 	.word	0x0800c277
 800c220:	0800c277 	.word	0x0800c277
 800c224:	0800c277 	.word	0x0800c277
 800c228:	0800c277 	.word	0x0800c277
 800c22c:	0800c277 	.word	0x0800c277
 800c230:	0800c277 	.word	0x0800c277
 800c234:	0800c267 	.word	0x0800c267
 800c238:	2b40      	cmp	r3, #64	; 0x40
 800c23a:	d014      	beq.n	800c266 <GpioMcuSetInterrupt+0x1d6>
    case GPIO_PIN_14:
    case GPIO_PIN_15:
        IRQnb = EXTI15_10_IRQn;
        break;
    default:
        break;
 800c23c:	e01b      	b.n	800c276 <GpioMcuSetInterrupt+0x1e6>
        IRQnb = EXTI0_IRQn;
 800c23e:	2306      	movs	r3, #6
 800c240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c244:	e018      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI1_IRQn;
 800c246:	2307      	movs	r3, #7
 800c248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c24c:	e014      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI2_IRQn;
 800c24e:	2308      	movs	r3, #8
 800c250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c254:	e010      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI3_IRQn;
 800c256:	2309      	movs	r3, #9
 800c258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c25c:	e00c      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI4_IRQn;
 800c25e:	230a      	movs	r3, #10
 800c260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c264:	e008      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI9_5_IRQn;
 800c266:	2317      	movs	r3, #23
 800c268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c26c:	e004      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI15_10_IRQn;
 800c26e:	2328      	movs	r3, #40	; 0x28
 800c270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c274:	e000      	b.n	800c278 <GpioMcuSetInterrupt+0x1e8>
        break;
 800c276:	bf00      	nop
    }

    GpioIrq[( obj->pin ) & 0x0F] = irqHandler;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f993 3000 	ldrsb.w	r3, [r3]
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 030f 	and.w	r3, r3, #15
 800c284:	490a      	ldr	r1, [pc, #40]	; (800c2b0 <GpioMcuSetInterrupt+0x220>)
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800c28c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c290:	2200      	movs	r2, #0
 800c292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c294:	4618      	mov	r0, r3
 800c296:	f7f5 fc2e 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800c29a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f5 fc45 	bl	8001b2e <HAL_NVIC_EnableIRQ>
 800c2a4:	e000      	b.n	800c2a8 <GpioMcuSetInterrupt+0x218>
        return;
 800c2a6:	bf00      	nop
}
 800c2a8:	3730      	adds	r7, #48	; 0x30
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000728 	.word	0x20000728

0800c2b4 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f993 3000 	ldrsb.w	r3, [r3]
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d009      	beq.n	800c2e2 <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6858      	ldr	r0, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	885b      	ldrh	r3, [r3, #2]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	b2d2      	uxtb	r2, r2
 800c2da:	4619      	mov	r1, r3
 800c2dc:	f7f6 f8fa 	bl	80024d4 <HAL_GPIO_WritePin>
 800c2e0:	e000      	b.n	800c2e4 <GpioMcuWrite+0x30>
        return;
 800c2e2:	bf00      	nop
}
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c2ee:	f000 fd6f 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	f7f6 f906 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c2f8:	bf00      	nop
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c300:	f000 fd66 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800c304:	2002      	movs	r0, #2
 800c306:	f7f6 f8fd 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c30a:	bf00      	nop
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c312:	f000 fd5d 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800c316:	2004      	movs	r0, #4
 800c318:	f7f6 f8f4 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c31c:	bf00      	nop
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c324:	f000 fd54 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800c328:	2008      	movs	r0, #8
 800c32a:	f7f6 f8eb 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c32e:	bf00      	nop
 800c330:	bd80      	pop	{r7, pc}

0800c332 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 800c332:	b580      	push	{r7, lr}
 800c334:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c336:	f000 fd4b 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800c33a:	2010      	movs	r0, #16
 800c33c:	f7f6 f8e2 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c340:	bf00      	nop
 800c342:	bd80      	pop	{r7, pc}

0800c344 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c348:	f000 fd42 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800c34c:	2020      	movs	r0, #32
 800c34e:	f7f6 f8d9 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800c352:	2040      	movs	r0, #64	; 0x40
 800c354:	f7f6 f8d6 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800c358:	2080      	movs	r0, #128	; 0x80
 800c35a:	f7f6 f8d3 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800c35e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c362:	f7f6 f8cf 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800c366:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c36a:	f7f6 f8cb 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c36e:	bf00      	nop
 800c370:	bd80      	pop	{r7, pc}

0800c372 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 800c372:	b580      	push	{r7, lr}
 800c374:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c376:	f000 fd2b 	bl	800cdd0 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800c37a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c37e:	f7f6 f8c1 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800c382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c386:	f7f6 f8bd 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800c38a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c38e:	f7f6 f8b9 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800c392:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c396:	f7f6 f8b5 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800c39a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c39e:	f7f6 f8b1 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800c3a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c3a6:	f7f6 f8ad 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
}
 800c3aa:	bf00      	nop
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	80fb      	strh	r3, [r7, #6]
	if(gpioPin == GPIO_PIN_15) // If The INT Source Is EXTI Line15-10 (B15 Pin)
 800c3ba:	88fb      	ldrh	r3, [r7, #6]
 800c3bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3c0:	d105      	bne.n	800c3ce <HAL_GPIO_EXTI_Callback+0x1e>
    {
    	BewegungInterruptAusgeloest = true;
 800c3c2:	4b12      	ldr	r3, [pc, #72]	; (800c40c <HAL_GPIO_EXTI_Callback+0x5c>)
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 800c3c8:	4a11      	ldr	r2, [pc, #68]	; (800c410 <HAL_GPIO_EXTI_Callback+0x60>)
 800c3ca:	88fb      	ldrh	r3, [r7, #6]
 800c3cc:	6153      	str	r3, [r2, #20]
    }

    uint8_t callbackIndex = 0;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800c3d2:	88fb      	ldrh	r3, [r7, #6]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d009      	beq.n	800c3ec <HAL_GPIO_EXTI_Callback+0x3c>
    {
        while( gpioPin != 0x01 )
 800c3d8:	e005      	b.n	800c3e6 <HAL_GPIO_EXTI_Callback+0x36>
        {
            gpioPin = gpioPin >> 1;
 800c3da:	88fb      	ldrh	r3, [r7, #6]
 800c3dc:	085b      	lsrs	r3, r3, #1
 800c3de:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800c3e6:	88fb      	ldrh	r3, [r7, #6]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d1f6      	bne.n	800c3da <HAL_GPIO_EXTI_Callback+0x2a>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	4a09      	ldr	r2, [pc, #36]	; (800c414 <HAL_GPIO_EXTI_Callback+0x64>)
 800c3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d004      	beq.n	800c402 <HAL_GPIO_EXTI_Callback+0x52>
    {
        GpioIrq[callbackIndex]( );
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	4a06      	ldr	r2, [pc, #24]	; (800c414 <HAL_GPIO_EXTI_Callback+0x64>)
 800c3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c400:	4798      	blx	r3
    }
}
 800c402:	bf00      	nop
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000989 	.word	0x20000989
 800c410:	40010400 	.word	0x40010400
 800c414:	20000728 	.word	0x20000728

0800c418 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	4608      	mov	r0, r1
 800c422:	4611      	mov	r1, r2
 800c424:	461a      	mov	r2, r3
 800c426:	4603      	mov	r3, r0
 800c428:	70fb      	strb	r3, [r7, #3]
 800c42a:	460b      	mov	r3, r1
 800c42c:	70bb      	strb	r3, [r7, #2]
 800c42e:	4613      	mov	r3, r2
 800c430:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 800c432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c436:	111b      	asrs	r3, r3, #4
 800c438:	b25b      	sxtb	r3, r3
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	2b06      	cmp	r3, #6
 800c43e:	d80b      	bhi.n	800c458 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800c440:	7878      	ldrb	r0, [r7, #1]
 800c442:	78ba      	ldrb	r2, [r7, #2]
 800c444:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	9301      	str	r3, [sp, #4]
 800c44c:	7c3b      	ldrb	r3, [r7, #16]
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	4603      	mov	r3, r0
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7ff fd40 	bl	800bed8 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 800c458:	bf00      	nop
 800c45a:	3708      	adds	r7, #8
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	607b      	str	r3, [r7, #4]
 800c46a:	460b      	mov	r3, r1
 800c46c:	72fb      	strb	r3, [r7, #11]
 800c46e:	4613      	mov	r3, r2
 800c470:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f993 3000 	ldrsb.w	r3, [r3]
 800c478:	111b      	asrs	r3, r3, #4
 800c47a:	b25b      	sxtb	r3, r3
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	2b06      	cmp	r3, #6
 800c480:	d805      	bhi.n	800c48e <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800c482:	7aba      	ldrb	r2, [r7, #10]
 800c484:	7af9      	ldrb	r1, [r7, #11]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7ff fe01 	bl	800c090 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800c48e:	bf00      	nop
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f993 3000 	ldrsb.w	r3, [r3]
 800c4a6:	111b      	asrs	r3, r3, #4
 800c4a8:	b25b      	sxtb	r3, r3
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b06      	cmp	r3, #6
 800c4ae:	d803      	bhi.n	800c4b8 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff fefe 	bl	800c2b4 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <prepareTxFrame>:
		und kopiere den float-Wert des Breitengrads und des Längengrads in die Payload

	Keine Parameter
	Kein Rückgabewert
*/
static void prepareTxFrame(){
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
	//GNSS-Modul Power-On
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2108      	movs	r1, #8
 800c4ca:	4834      	ldr	r0, [pc, #208]	; (800c59c <prepareTxFrame+0xdc>)
 800c4cc:	f7f6 f802 	bl	80024d4 <HAL_GPIO_WritePin>
	HAL_Delay(500);											//Warte für Initialisierung des Moduls
 800c4d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c4d4:	f7f4 ff3a 	bl	800134c <HAL_Delay>

	uint32_t StartTimer = HAL_GetTick();					//Erfasse Startzeit
 800c4d8:	f7f4 ff2e 	bl	8001338 <HAL_GetTick>
 800c4dc:	60f8      	str	r0, [r7, #12]
	uint32_t LoopTimer = 0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	60bb      	str	r3, [r7, #8]
	uint32_t TickDifferenz = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	607b      	str	r3, [r7, #4]
	DatenErhalten = false;
 800c4e6:	4b2e      	ldr	r3, [pc, #184]	; (800c5a0 <prepareTxFrame+0xe0>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]


	while(!DatenErhalten){
 800c4ec:	e032      	b.n	800c554 <prepareTxFrame+0x94>
		GNSS_GetPVTData(&GNSS_Handle);						//Erfasse Standort
 800c4ee:	482d      	ldr	r0, [pc, #180]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c4f0:	f004 fc1e 	bl	8010d30 <GNSS_GetPVTData>
		GNSS_ParseBuffer(&GNSS_Handle);						//Parse erhaltene Antwort
 800c4f4:	482b      	ldr	r0, [pc, #172]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c4f6:	f004 fbba 	bl	8010c6e <GNSS_ParseBuffer>

		if(GNSS_Handle.hAcc > 5000 && GNSS_Handle.vAcc > 5000 &&
 800c4fa:	4b2a      	ldr	r3, [pc, #168]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c4fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800c500:	f241 3288 	movw	r2, #5000	; 0x1388
 800c504:	4293      	cmp	r3, r2
 800c506:	d916      	bls.n	800c536 <prepareTxFrame+0x76>
 800c508:	4b26      	ldr	r3, [pc, #152]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c50a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c50e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c512:	4293      	cmp	r3, r2
 800c514:	d90f      	bls.n	800c536 <prepareTxFrame+0x76>
				GNSS_Handle.hAcc < 1000000 && GNSS_Handle.vAcc < 1000000){
 800c516:	4b23      	ldr	r3, [pc, #140]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c518:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		if(GNSS_Handle.hAcc > 5000 && GNSS_Handle.vAcc > 5000 &&
 800c51c:	4a22      	ldr	r2, [pc, #136]	; (800c5a8 <prepareTxFrame+0xe8>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d809      	bhi.n	800c536 <prepareTxFrame+0x76>
				GNSS_Handle.hAcc < 1000000 && GNSS_Handle.vAcc < 1000000){
 800c522:	4b20      	ldr	r3, [pc, #128]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c524:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c528:	4a1f      	ldr	r2, [pc, #124]	; (800c5a8 <prepareTxFrame+0xe8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d803      	bhi.n	800c536 <prepareTxFrame+0x76>
			DatenErhalten = true;
 800c52e:	4b1c      	ldr	r3, [pc, #112]	; (800c5a0 <prepareTxFrame+0xe0>)
 800c530:	2201      	movs	r2, #1
 800c532:	701a      	strb	r2, [r3, #0]
			continue;
 800c534:	e00e      	b.n	800c554 <prepareTxFrame+0x94>
		}

		LoopTimer = HAL_GetTick();					//Erfasse Durchlaufszeit und die Differenz
 800c536:	f7f4 feff 	bl	8001338 <HAL_GetTick>
 800c53a:	60b8      	str	r0, [r7, #8]
		TickDifferenz = LoopTimer - StartTimer;
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	607b      	str	r3, [r7, #4]

		//Falls Differenz größer als 400 Sekunden, dann brich Erfassung ab
		if(TickDifferenz>400000){
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a19      	ldr	r2, [pc, #100]	; (800c5ac <prepareTxFrame+0xec>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d80b      	bhi.n	800c564 <prepareTxFrame+0xa4>
			break;
		}
		HAL_Delay(1000);
 800c54c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c550:	f7f4 fefc 	bl	800134c <HAL_Delay>
	while(!DatenErhalten){
 800c554:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <prepareTxFrame+0xe0>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	f083 0301 	eor.w	r3, r3, #1
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1c5      	bne.n	800c4ee <prepareTxFrame+0x2e>
 800c562:	e000      	b.n	800c566 <prepareTxFrame+0xa6>
			break;
 800c564:	bf00      	nop
	}
	//GNSS-Modul Power-Off
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800c566:	2201      	movs	r2, #1
 800c568:	2108      	movs	r1, #8
 800c56a:	480c      	ldr	r0, [pc, #48]	; (800c59c <prepareTxFrame+0xdc>)
 800c56c:	f7f5 ffb2 	bl	80024d4 <HAL_GPIO_WritePin>

	if(DatenErhalten){
 800c570:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <prepareTxFrame+0xe0>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00c      	beq.n	800c592 <prepareTxFrame+0xd2>
	    appDataSize = 8;
 800c578:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <prepareTxFrame+0xf0>)
 800c57a:	2208      	movs	r2, #8
 800c57c:	701a      	strb	r2, [r3, #0]
 800c57e:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
	    memcpy(&appData[0], &GNSS_Handle.fLat,4);
 800c584:	4a0b      	ldr	r2, [pc, #44]	; (800c5b4 <prepareTxFrame+0xf4>)
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	4b06      	ldr	r3, [pc, #24]	; (800c5a4 <prepareTxFrame+0xe4>)
 800c58a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
	    memcpy(&appData[4], &GNSS_Handle.fLon,4);
 800c58e:	4a09      	ldr	r2, [pc, #36]	; (800c5b4 <prepareTxFrame+0xf4>)
 800c590:	6053      	str	r3, [r2, #4]
	}
}
 800c592:	bf00      	nop
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	40020400 	.word	0x40020400
 800c5a0:	20000768 	.word	0x20000768
 800c5a4:	200010e8 	.word	0x200010e8
 800c5a8:	000f423f 	.word	0x000f423f
 800c5ac:	00061a80 	.word	0x00061a80
 800c5b0:	2000002c 	.word	0x2000002c
 800c5b4:	20000b34 	.word	0x20000b34

0800c5b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c5bc:	f7f4 fe58 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c5c0:	f000 f89c 	bl	800c6fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c5c4:	f000 fa60 	bl	800ca88 <MX_GPIO_Init>
  MX_DMA_Init();
 800c5c8:	f000 fa38 	bl	800ca3c <MX_DMA_Init>
  MX_RTC_Init();
 800c5cc:	f000 f94a 	bl	800c864 <MX_RTC_Init>
  MX_SPI1_Init();
 800c5d0:	f000 f9d4 	bl	800c97c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800c5d4:	f000 fa08 	bl	800c9e8 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800c5d8:	f000 f8ec 	bl	800c7b4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  //Initialisierung des STM32 durch Heltec-Bibliothek
  //Clock, RTC, unbenutze GPIOs, SPI, LoRa-Chip SX1276
  BoardInitMcu();
 800c5dc:	f7fe ff30 	bl	800b440 <BoardInitMcu>

  //Initialisierung der Bool-Variablen für den Bewegungssensor
  //BewegungInterruptAusgeloest = false;
  //WurdeBewegt = true;
  BewegungssensorInit();
 800c5e0:	f7f8 fd98 	bl	8005114 <BewegungssensorInit>

  //globale Variable für Feststellung, ob Bestätigung vom LoRaWAN-Netzwerk erhalten
  //auf Wahr, damit im Falle von unbestätigten Nachrichten keine Veränderungen vorgenommen werden müssen.
  WurdeBestaetigt = true;
 800c5e4:	4b3b      	ldr	r3, [pc, #236]	; (800c6d4 <main+0x11c>)
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	701a      	strb	r2, [r3, #0]

  //Initialisierung des Struct für GNSS-Standorterfassung
  //alle Werte werden auf 0 gesetzt
  GNSS_Init(&GNSS_Handle, &huart1);
 800c5ea:	493b      	ldr	r1, [pc, #236]	; (800c6d8 <main+0x120>)
 800c5ec:	483b      	ldr	r0, [pc, #236]	; (800c6dc <main+0x124>)
 800c5ee:	f004 fa76 	bl	8010ade <GNSS_Init>

  //Initialisierungszustand für kommende switch-Maschine
  deviceState = DEVICE_STATE_INIT;
 800c5f2:	4b3b      	ldr	r3, [pc, #236]	; (800c6e0 <main+0x128>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800c5f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c5fc:	f7f4 fea6 	bl	800134c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	switch( deviceState )
 800c600:	4b37      	ldr	r3, [pc, #220]	; (800c6e0 <main+0x128>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b04      	cmp	r3, #4
 800c606:	d860      	bhi.n	800c6ca <main+0x112>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <main+0x58>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c625 	.word	0x0800c625
 800c614:	0800c63d 	.word	0x0800c63d
 800c618:	0800c643 	.word	0x0800c643
 800c61c:	0800c667 	.word	0x0800c667
 800c620:	0800c6c1 	.word	0x0800c6c1
		{
			case DEVICE_STATE_INIT:
			{
				//Einstellung des LoRa-Chips mit den oben definierten Variablen (Klasse, ISM-Band...)
				LoraWanInit(loraWanClass,loraWanRegion);
 800c624:	4b2f      	ldr	r3, [pc, #188]	; (800c6e4 <main+0x12c>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	4a2f      	ldr	r2, [pc, #188]	; (800c6e8 <main+0x130>)
 800c62a:	7812      	ldrb	r2, [r2, #0]
 800c62c:	4611      	mov	r1, r2
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fd fa7a 	bl	8009b28 <LoraWanInit>

				//Übergang in Join-Zustand
				deviceState = DEVICE_STATE_JOIN;
 800c634:	4b2a      	ldr	r3, [pc, #168]	; (800c6e0 <main+0x128>)
 800c636:	2201      	movs	r2, #1
 800c638:	701a      	strb	r2, [r3, #0]

				break;
 800c63a:	e04a      	b.n	800c6d2 <main+0x11a>
			{
				//Versuch, einem LoRaWAN-Netzwerk mit den festgelegten Aktivierungsmodus und den dazugehörigen EUIs/Schlüsseln beizutreten
				//Bei Erfolg, gehe in Send-Zustand
				//Ansonsten versuche erneut mit ggf angepasster Datenrate

				LoraWanJoin();
 800c63c:	f7fd fb5a 	bl	8009cf4 <LoraWanJoin>
				break;
 800c640:	e047      	b.n	800c6d2 <main+0x11a>
			{
				//Falls Bewegung erkannt,
				//dann Erfassung des Standortes
					//Falls Standort erfasst, dann Absenden der LoRa-Nachricht
					//und Aktivierung des Bewegungssensor (Zustandpins des Sensors auf High setzen)
				if(WurdeBewegt)
 800c642:	4b2a      	ldr	r3, [pc, #168]	; (800c6ec <main+0x134>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d009      	beq.n	800c65e <main+0xa6>
				{
					prepareTxFrame();
 800c64a:	f7ff ff39 	bl	800c4c0 <prepareTxFrame>
					if(DatenErhalten){
 800c64e:	4b28      	ldr	r3, [pc, #160]	; (800c6f0 <main+0x138>)
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <main+0xa6>
						LoraWanSend();
 800c656:	f7fd fbc5 	bl	8009de4 <LoraWanSend>
						HoleDenBewegungssensorAusDemSchlaf();
 800c65a:	f7f8 fd8d 	bl	8005178 <HoleDenBewegungssensorAusDemSchlaf>
					}
				}

				//Übergang in den Cycle-Zustand
				deviceState = DEVICE_STATE_CYCLE;
 800c65e:	4b20      	ldr	r3, [pc, #128]	; (800c6e0 <main+0x128>)
 800c660:	2203      	movs	r2, #3
 800c662:	701a      	strb	r2, [r3, #0]
				break;
 800c664:	e035      	b.n	800c6d2 <main+0x11a>
			}
			case DEVICE_STATE_CYCLE:
			{
				// Schedule next packet transmission
				txDutyCycleTime = appTxDutyCycle + randr( 0, APP_TX_DUTYCYCLE_RND );
 800c666:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c66a:	2000      	movs	r0, #0
 800c66c:	f004 f9cc 	bl	8010a08 <randr>
 800c670:	4603      	mov	r3, r0
 800c672:	461a      	mov	r2, r3
 800c674:	4b1f      	ldr	r3, [pc, #124]	; (800c6f4 <main+0x13c>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4413      	add	r3, r2
 800c67a:	4a1f      	ldr	r2, [pc, #124]	; (800c6f8 <main+0x140>)
 800c67c:	6013      	str	r3, [r2, #0]
					//je nach Resultat (bei Erfolg) Übergang in Sleep- oder (bei Fehlschlag) in Cycle-Zustand

				//Falls Standort erfasst und Bestätigung erhalten, dann normale Schlafdauer und zurücksetzen der Prüfvariablen auf Falsch
				//Ansonsten halbe Schlafszeit für erneuten Versuch

				if(DatenErhalten && WurdeBestaetigt){
 800c67e:	4b1c      	ldr	r3, [pc, #112]	; (800c6f0 <main+0x138>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00c      	beq.n	800c6a0 <main+0xe8>
 800c686:	4b13      	ldr	r3, [pc, #76]	; (800c6d4 <main+0x11c>)
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d008      	beq.n	800c6a0 <main+0xe8>
					LoraWanCycle(txDutyCycleTime);
 800c68e:	4b1a      	ldr	r3, [pc, #104]	; (800c6f8 <main+0x140>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f7fd fbce 	bl	8009e34 <LoraWanCycle>
					WurdeBewegt = false;					//Erfasste Bewegung erfolgreich abgearbeitet und Standort übermittelt, neue darf erfasst werden.
 800c698:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <main+0x134>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	e005      	b.n	800c6ac <main+0xf4>
				}else{
					LoraWanCycle(txDutyCycleTime/2);
 800c6a0:	4b15      	ldr	r3, [pc, #84]	; (800c6f8 <main+0x140>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	085b      	lsrs	r3, r3, #1
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fd fbc4 	bl	8009e34 <LoraWanCycle>
				}
				WurdeBestaetigt = false;
 800c6ac:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <main+0x11c>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	701a      	strb	r2, [r3, #0]
				GNSSDataReset(&GNSS_Handle);
 800c6b2:	480a      	ldr	r0, [pc, #40]	; (800c6dc <main+0x124>)
 800c6b4:	f004 fa64 	bl	8010b80 <GNSSDataReset>
				//Übergang in den Sleep-Zustand
				deviceState = DEVICE_STATE_SLEEP;
 800c6b8:	4b09      	ldr	r3, [pc, #36]	; (800c6e0 <main+0x128>)
 800c6ba:	2204      	movs	r2, #4
 800c6bc:	701a      	strb	r2, [r3, #0]
				break;
 800c6be:	e008      	b.n	800c6d2 <main+0x11a>
			}
			case DEVICE_STATE_SLEEP:
			{
				//Aktivierung des Tiefschlafes (inklusive deaktivieren des SysTick Timers für Verhinderung eines Interrupts)
				//Nach dem Aufwachen befindet sich die Ausführung nach der Funktion
				TimerLowPowerHandler( );
 800c6c0:	f004 f900 	bl	80108c4 <TimerLowPowerHandler>

				//Prüfe, ob der Interrupt des Bewegungssensors aktiviert wurde
					//Ist dem so, dann setze WurdeBewegt auf wahr, setze den Sensor in den Schlafmodus
					//und gehe erneut in den Tiefschlaf zum Aufwachen durch den Timer
				PruefeInterruptStatus();
 800c6c4:	f7f8 fd36 	bl	8005134 <PruefeInterruptStatus>
				break;
 800c6c8:	e003      	b.n	800c6d2 <main+0x11a>
			}
			default:
			{
				deviceState = DEVICE_STATE_INIT;
 800c6ca:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <main+0x128>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	701a      	strb	r2, [r3, #0]
				break;
 800c6d0:	bf00      	nop
  	switch( deviceState )
 800c6d2:	e795      	b.n	800c600 <main+0x48>
 800c6d4:	2000098a 	.word	0x2000098a
 800c6d8:	20001084 	.word	0x20001084
 800c6dc:	200010e8 	.word	0x200010e8
 800c6e0:	20000b00 	.word	0x20000b00
 800c6e4:	20000774 	.word	0x20000774
 800c6e8:	20000078 	.word	0x20000078
 800c6ec:	20000988 	.word	0x20000988
 800c6f0:	20000768 	.word	0x20000768
 800c6f4:	2000007c 	.word	0x2000007c
 800c6f8:	20000b18 	.word	0x20000b18

0800c6fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b094      	sub	sp, #80	; 0x50
 800c700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c702:	f107 031c 	add.w	r3, r7, #28
 800c706:	2234      	movs	r2, #52	; 0x34
 800c708:	2100      	movs	r1, #0
 800c70a:	4618      	mov	r0, r3
 800c70c:	f006 f8cc 	bl	80128a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c710:	f107 0308 	add.w	r3, r7, #8
 800c714:	2200      	movs	r2, #0
 800c716:	601a      	str	r2, [r3, #0]
 800c718:	605a      	str	r2, [r3, #4]
 800c71a:	609a      	str	r2, [r3, #8]
 800c71c:	60da      	str	r2, [r3, #12]
 800c71e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c720:	463b      	mov	r3, r7
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c728:	4b21      	ldr	r3, [pc, #132]	; (800c7b0 <SystemClock_Config+0xb4>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800c730:	4a1f      	ldr	r2, [pc, #124]	; (800c7b0 <SystemClock_Config+0xb4>)
 800c732:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c736:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800c738:	2306      	movs	r3, #6
 800c73a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c73c:	2301      	movs	r3, #1
 800c73e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c740:	2301      	movs	r3, #1
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c744:	2310      	movs	r3, #16
 800c746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c748:	2300      	movs	r3, #0
 800c74a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c74c:	f107 031c 	add.w	r3, r7, #28
 800c750:	4618      	mov	r0, r3
 800c752:	f7f5 ff6b 	bl	800262c <HAL_RCC_OscConfig>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800c75c:	f000 fa08 	bl	800cb70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c760:	230f      	movs	r3, #15
 800c762:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c764:	2301      	movs	r3, #1
 800c766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c768:	2300      	movs	r3, #0
 800c76a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c76c:	2300      	movs	r3, #0
 800c76e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c770:	2300      	movs	r3, #0
 800c772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c774:	f107 0308 	add.w	r3, r7, #8
 800c778:	2100      	movs	r1, #0
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f6 fa86 	bl	8002c8c <HAL_RCC_ClockConfig>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800c786:	f000 f9f3 	bl	800cb70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c78a:	2301      	movs	r3, #1
 800c78c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c78e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c792:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c794:	463b      	mov	r3, r7
 800c796:	4618      	mov	r0, r3
 800c798:	f7f6 fd0c 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d001      	beq.n	800c7a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800c7a2:	f000 f9e5 	bl	800cb70 <Error_Handler>
  }
}
 800c7a6:	bf00      	nop
 800c7a8:	3750      	adds	r7, #80	; 0x50
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	40007000 	.word	0x40007000

0800c7b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c7ba:	1d3b      	adds	r3, r7, #4
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	605a      	str	r2, [r3, #4]
 800c7c2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800c7c4:	4b25      	ldr	r3, [pc, #148]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7c6:	4a26      	ldr	r2, [pc, #152]	; (800c860 <MX_ADC_Init+0xac>)
 800c7c8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c7ca:	4b24      	ldr	r3, [pc, #144]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c7d0:	4b22      	ldr	r3, [pc, #136]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c7d6:	4b21      	ldr	r3, [pc, #132]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c7dc:	4b1f      	ldr	r3, [pc, #124]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c7e2:	4b1e      	ldr	r3, [pc, #120]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800c7e8:	4b1c      	ldr	r3, [pc, #112]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800c7ee:	4b1b      	ldr	r3, [pc, #108]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800c7f4:	4b19      	ldr	r3, [pc, #100]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800c7fa:	4b18      	ldr	r3, [pc, #96]	; (800c85c <MX_ADC_Init+0xa8>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800c802:	4b16      	ldr	r3, [pc, #88]	; (800c85c <MX_ADC_Init+0xa8>)
 800c804:	2201      	movs	r2, #1
 800c806:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800c808:	4b14      	ldr	r3, [pc, #80]	; (800c85c <MX_ADC_Init+0xa8>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c810:	4b12      	ldr	r3, [pc, #72]	; (800c85c <MX_ADC_Init+0xa8>)
 800c812:	2210      	movs	r2, #16
 800c814:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c816:	4b11      	ldr	r3, [pc, #68]	; (800c85c <MX_ADC_Init+0xa8>)
 800c818:	2200      	movs	r2, #0
 800c81a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800c81c:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <MX_ADC_Init+0xa8>)
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800c824:	480d      	ldr	r0, [pc, #52]	; (800c85c <MX_ADC_Init+0xa8>)
 800c826:	f7f4 fdf9 	bl	800141c <HAL_ADC_Init>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800c830:	f000 f99e 	bl	800cb70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c834:	2302      	movs	r3, #2
 800c836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c838:	2301      	movs	r3, #1
 800c83a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800c83c:	2300      	movs	r3, #0
 800c83e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c840:	1d3b      	adds	r3, r7, #4
 800c842:	4619      	mov	r1, r3
 800c844:	4805      	ldr	r0, [pc, #20]	; (800c85c <MX_ADC_Init+0xa8>)
 800c846:	f7f4 ff2f 	bl	80016a8 <HAL_ADC_ConfigChannel>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800c850:	f000 f98e 	bl	800cb70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800c854:	bf00      	nop
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	20001258 	.word	0x20001258
 800c860:	40012400 	.word	0x40012400

0800c864 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b090      	sub	sp, #64	; 0x40
 800c868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c86a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]
 800c872:	605a      	str	r2, [r3, #4]
 800c874:	609a      	str	r2, [r3, #8]
 800c876:	60da      	str	r2, [r3, #12]
 800c878:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c87a:	2300      	movs	r3, #0
 800c87c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800c87e:	463b      	mov	r3, r7
 800c880:	2228      	movs	r2, #40	; 0x28
 800c882:	2100      	movs	r1, #0
 800c884:	4618      	mov	r0, r3
 800c886:	f006 f80f 	bl	80128a8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c88a:	4b3a      	ldr	r3, [pc, #232]	; (800c974 <MX_RTC_Init+0x110>)
 800c88c:	4a3a      	ldr	r2, [pc, #232]	; (800c978 <MX_RTC_Init+0x114>)
 800c88e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c890:	4b38      	ldr	r3, [pc, #224]	; (800c974 <MX_RTC_Init+0x110>)
 800c892:	2200      	movs	r2, #0
 800c894:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c896:	4b37      	ldr	r3, [pc, #220]	; (800c974 <MX_RTC_Init+0x110>)
 800c898:	227f      	movs	r2, #127	; 0x7f
 800c89a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c89c:	4b35      	ldr	r3, [pc, #212]	; (800c974 <MX_RTC_Init+0x110>)
 800c89e:	22ff      	movs	r2, #255	; 0xff
 800c8a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c8a2:	4b34      	ldr	r3, [pc, #208]	; (800c974 <MX_RTC_Init+0x110>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c8a8:	4b32      	ldr	r3, [pc, #200]	; (800c974 <MX_RTC_Init+0x110>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c8ae:	4b31      	ldr	r3, [pc, #196]	; (800c974 <MX_RTC_Init+0x110>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c8b4:	482f      	ldr	r0, [pc, #188]	; (800c974 <MX_RTC_Init+0x110>)
 800c8b6:	f7f6 fd4b 	bl	8003350 <HAL_RTC_Init>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800c8c0:	f000 f956 	bl	800cb70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800c8de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4823      	ldr	r0, [pc, #140]	; (800c974 <MX_RTC_Init+0x110>)
 800c8e8:	f7f6 fdc3 	bl	8003472 <HAL_RTC_SetTime>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d001      	beq.n	800c8f6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800c8f2:	f000 f93d 	bl	800cb70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800c902:	2301      	movs	r3, #1
 800c904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800c90e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c912:	2201      	movs	r2, #1
 800c914:	4619      	mov	r1, r3
 800c916:	4817      	ldr	r0, [pc, #92]	; (800c974 <MX_RTC_Init+0x110>)
 800c918:	f7f6 febc 	bl	8003694 <HAL_RTC_SetDate>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800c922:	f000 f925 	bl	800cb70 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800c926:	2300      	movs	r3, #0
 800c928:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800c92e:	2300      	movs	r3, #0
 800c930:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800c932:	2300      	movs	r3, #0
 800c934:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c93a:	2300      	movs	r3, #0
 800c93c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800c93e:	2300      	movs	r3, #0
 800c940:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800c942:	2300      	movs	r3, #0
 800c944:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800c946:	2300      	movs	r3, #0
 800c948:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800c950:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c954:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800c956:	463b      	mov	r3, r7
 800c958:	2201      	movs	r2, #1
 800c95a:	4619      	mov	r1, r3
 800c95c:	4805      	ldr	r0, [pc, #20]	; (800c974 <MX_RTC_Init+0x110>)
 800c95e:	f7f6 ff84 	bl	800386a <HAL_RTC_SetAlarm>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800c968:	f000 f902 	bl	800cb70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c96c:	bf00      	nop
 800c96e:	3740      	adds	r7, #64	; 0x40
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	200010c8 	.word	0x200010c8
 800c978:	40002800 	.word	0x40002800

0800c97c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c980:	4b17      	ldr	r3, [pc, #92]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c982:	4a18      	ldr	r2, [pc, #96]	; (800c9e4 <MX_SPI1_Init+0x68>)
 800c984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c986:	4b16      	ldr	r3, [pc, #88]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c98c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c98e:	4b14      	ldr	r3, [pc, #80]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c990:	2200      	movs	r2, #0
 800c992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c994:	4b12      	ldr	r3, [pc, #72]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c996:	2200      	movs	r2, #0
 800c998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c99a:	4b11      	ldr	r3, [pc, #68]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c99c:	2200      	movs	r2, #0
 800c99e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c9a0:	4b0f      	ldr	r3, [pc, #60]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c9a6:	4b0e      	ldr	r3, [pc, #56]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c9ae:	4b0c      	ldr	r3, [pc, #48]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c9b4:	4b0a      	ldr	r3, [pc, #40]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c9ba:	4b09      	ldr	r3, [pc, #36]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9c0:	4b07      	ldr	r3, [pc, #28]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c9c6:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c9cc:	4804      	ldr	r0, [pc, #16]	; (800c9e0 <MX_SPI1_Init+0x64>)
 800c9ce:	f7f7 fbee 	bl	80041ae <HAL_SPI_Init>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c9d8:	f000 f8ca 	bl	800cb70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c9dc:	bf00      	nop
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20001200 	.word	0x20001200
 800c9e4:	40013000 	.word	0x40013000

0800c9e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c9ec:	4b11      	ldr	r3, [pc, #68]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800c9ee:	4a12      	ldr	r2, [pc, #72]	; (800ca38 <MX_USART1_UART_Init+0x50>)
 800c9f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c9f2:	4b10      	ldr	r3, [pc, #64]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800c9f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c9f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ca00:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ca06:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800ca0e:	220c      	movs	r2, #12
 800ca10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca12:	4b08      	ldr	r3, [pc, #32]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ca18:	4b06      	ldr	r3, [pc, #24]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ca1e:	4805      	ldr	r0, [pc, #20]	; (800ca34 <MX_USART1_UART_Init+0x4c>)
 800ca20:	f7f7 fc76 	bl	8004310 <HAL_UART_Init>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ca2a:	f000 f8a1 	bl	800cb70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ca2e:	bf00      	nop
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	20001084 	.word	0x20001084
 800ca38:	40013800 	.word	0x40013800

0800ca3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ca42:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <MX_DMA_Init+0x48>)
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	4a0f      	ldr	r2, [pc, #60]	; (800ca84 <MX_DMA_Init+0x48>)
 800ca48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca4c:	61d3      	str	r3, [r2, #28]
 800ca4e:	4b0d      	ldr	r3, [pc, #52]	; (800ca84 <MX_DMA_Init+0x48>)
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca56:	607b      	str	r3, [r7, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	200e      	movs	r0, #14
 800ca60:	f7f5 f849 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800ca64:	200e      	movs	r0, #14
 800ca66:	f7f5 f862 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	200f      	movs	r0, #15
 800ca70:	f7f5 f841 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800ca74:	200f      	movs	r0, #15
 800ca76:	f7f5 f85a 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 800ca7a:	bf00      	nop
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	40023800 	.word	0x40023800

0800ca88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08a      	sub	sp, #40	; 0x28
 800ca8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca8e:	f107 0314 	add.w	r3, r7, #20
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	605a      	str	r2, [r3, #4]
 800ca98:	609a      	str	r2, [r3, #8]
 800ca9a:	60da      	str	r2, [r3, #12]
 800ca9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca9e:	4b32      	ldr	r3, [pc, #200]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800caa0:	69db      	ldr	r3, [r3, #28]
 800caa2:	4a31      	ldr	r2, [pc, #196]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800caa4:	f043 0304 	orr.w	r3, r3, #4
 800caa8:	61d3      	str	r3, [r2, #28]
 800caaa:	4b2f      	ldr	r3, [pc, #188]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800caac:	69db      	ldr	r3, [r3, #28]
 800caae:	f003 0304 	and.w	r3, r3, #4
 800cab2:	613b      	str	r3, [r7, #16]
 800cab4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cab6:	4b2c      	ldr	r3, [pc, #176]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	4a2b      	ldr	r2, [pc, #172]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cabc:	f043 0320 	orr.w	r3, r3, #32
 800cac0:	61d3      	str	r3, [r2, #28]
 800cac2:	4b29      	ldr	r3, [pc, #164]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	f003 0320 	and.w	r3, r3, #32
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cace:	4b26      	ldr	r3, [pc, #152]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	4a25      	ldr	r2, [pc, #148]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cad4:	f043 0301 	orr.w	r3, r3, #1
 800cad8:	61d3      	str	r3, [r2, #28]
 800cada:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cadc:	69db      	ldr	r3, [r3, #28]
 800cade:	f003 0301 	and.w	r3, r3, #1
 800cae2:	60bb      	str	r3, [r7, #8]
 800cae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cae6:	4b20      	ldr	r3, [pc, #128]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	4a1f      	ldr	r2, [pc, #124]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800caec:	f043 0302 	orr.w	r3, r3, #2
 800caf0:	61d3      	str	r3, [r2, #28]
 800caf2:	4b1d      	ldr	r3, [pc, #116]	; (800cb68 <MX_GPIO_Init+0xe0>)
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	607b      	str	r3, [r7, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_8, GPIO_PIN_RESET);
 800cafe:	2200      	movs	r2, #0
 800cb00:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800cb04:	4819      	ldr	r0, [pc, #100]	; (800cb6c <MX_GPIO_Init+0xe4>)
 800cb06:	f7f5 fce5 	bl	80024d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	2108      	movs	r1, #8
 800cb0e:	4817      	ldr	r0, [pc, #92]	; (800cb6c <MX_GPIO_Init+0xe4>)
 800cb10:	f7f5 fce0 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB3 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_8;
 800cb14:	f244 1308 	movw	r3, #16648	; 0x4108
 800cb18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb22:	2300      	movs	r3, #0
 800cb24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb26:	f107 0314 	add.w	r3, r7, #20
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	480f      	ldr	r0, [pc, #60]	; (800cb6c <MX_GPIO_Init+0xe4>)
 800cb2e:	f7f5 fa71 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800cb32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cb38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800cb3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb42:	f107 0314 	add.w	r3, r7, #20
 800cb46:	4619      	mov	r1, r3
 800cb48:	4808      	ldr	r0, [pc, #32]	; (800cb6c <MX_GPIO_Init+0xe4>)
 800cb4a:	f7f5 fa63 	bl	8002014 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	2028      	movs	r0, #40	; 0x28
 800cb54:	f7f4 ffcf 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800cb58:	2028      	movs	r0, #40	; 0x28
 800cb5a:	f7f4 ffe8 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 800cb5e:	bf00      	nop
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	40023800 	.word	0x40023800
 800cb6c:	40020400 	.word	0x40020400

0800cb70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800cb70:	b480      	push	{r7}
 800cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800cb74:	bf00      	nop
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bc80      	pop	{r7}
 800cb7a:	4770      	bx	lr

0800cb7c <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b088      	sub	sp, #32
 800cb80:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitialized == false )
 800cb82:	4b29      	ldr	r3, [pc, #164]	; (800cc28 <RtcInit+0xac>)
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	f083 0301 	eor.w	r3, r3, #1
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d047      	beq.n	800cc20 <RtcInit+0xa4>
    {
        __HAL_RCC_RTC_ENABLE( );
 800cb90:	4b26      	ldr	r3, [pc, #152]	; (800cc2c <RtcInit+0xb0>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance = RTC;
 800cb96:	4b26      	ldr	r3, [pc, #152]	; (800cc30 <RtcInit+0xb4>)
 800cb98:	4a26      	ldr	r2, [pc, #152]	; (800cc34 <RtcInit+0xb8>)
 800cb9a:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800cb9c:	4b24      	ldr	r3, [pc, #144]	; (800cc30 <RtcInit+0xb4>)
 800cb9e:	2200      	movs	r2, #0
 800cba0:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 3;
 800cba2:	4b23      	ldr	r3, [pc, #140]	; (800cc30 <RtcInit+0xb4>)
 800cba4:	2203      	movs	r2, #3
 800cba6:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 3;
 800cba8:	4b21      	ldr	r3, [pc, #132]	; (800cc30 <RtcInit+0xb4>)
 800cbaa:	2203      	movs	r2, #3
 800cbac:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800cbae:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <RtcInit+0xb4>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800cbb4:	4b1e      	ldr	r3, [pc, #120]	; (800cc30 <RtcInit+0xb4>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800cbba:	4b1d      	ldr	r3, [pc, #116]	; (800cc30 <RtcInit+0xb4>)
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 800cbc0:	481b      	ldr	r0, [pc, #108]	; (800cc30 <RtcInit+0xb4>)
 800cbc2:	f7f6 fbc5 	bl	8003350 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800cbd2:	2306      	movs	r3, #6
 800cbd4:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 800cbd6:	1d3b      	adds	r3, r7, #4
 800cbd8:	3302      	adds	r3, #2
 800cbda:	2200      	movs	r2, #0
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4814      	ldr	r0, [pc, #80]	; (800cc30 <RtcInit+0xb4>)
 800cbe0:	f7f6 fd58 	bl	8003694 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 800cbfc:	1d3b      	adds	r3, r7, #4
 800cbfe:	3308      	adds	r3, #8
 800cc00:	2200      	movs	r2, #0
 800cc02:	4619      	mov	r1, r3
 800cc04:	480a      	ldr	r0, [pc, #40]	; (800cc30 <RtcInit+0xb4>)
 800cc06:	f7f6 fc34 	bl	8003472 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 4, 0 );
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2104      	movs	r1, #4
 800cc0e:	2029      	movs	r0, #41	; 0x29
 800cc10:	f7f4 ff71 	bl	8001af6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 800cc14:	2029      	movs	r0, #41	; 0x29
 800cc16:	f7f4 ff8a 	bl	8001b2e <HAL_NVIC_EnableIRQ>
        RtcInitialized = true;
 800cc1a:	4b03      	ldr	r3, [pc, #12]	; (800cc28 <RtcInit+0xac>)
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	701a      	strb	r2, [r3, #0]
    }
}
 800cc20:	bf00      	nop
 800cc22:	3720      	adds	r7, #32
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	2000079c 	.word	0x2000079c
 800cc2c:	424706d8 	.word	0x424706d8
 800cc30:	2000077c 	.word	0x2000077c
 800cc34:	40002800 	.word	0x40002800

0800cc38 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f94f 	bl	800cee4 <RtcStartWakeUpAlarm>
}
 800cc46:	bf00      	nop
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 800cc58:	4b15      	ldr	r3, [pc, #84]	; (800ccb0 <RtcGetAdjustedTimeoutValue+0x60>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d90c      	bls.n	800cc7c <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800cc62:	4b14      	ldr	r3, [pc, #80]	; (800ccb4 <RtcGetAdjustedTimeoutValue+0x64>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d007      	beq.n	800cc7c <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800cc6c:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <RtcGetAdjustedTimeoutValue+0x64>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800cc72:	4b0f      	ldr	r3, [pc, #60]	; (800ccb0 <RtcGetAdjustedTimeoutValue+0x60>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	607b      	str	r3, [r7, #4]
        }
    }

    if( timeout > McuWakeUpTime )
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <RtcGetAdjustedTimeoutValue+0x60>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d90e      	bls.n	800cca4 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)
        if( timeout < 50 ) // 50 ms
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b31      	cmp	r3, #49	; 0x31
 800cc8a:	d803      	bhi.n	800cc94 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800cc8c:	4b0a      	ldr	r3, [pc, #40]	; (800ccb8 <RtcGetAdjustedTimeoutValue+0x68>)
 800cc8e:	2200      	movs	r2, #0
 800cc90:	701a      	strb	r2, [r3, #0]
 800cc92:	e007      	b.n	800cca4 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 800cc94:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <RtcGetAdjustedTimeoutValue+0x68>)
 800cc96:	2201      	movs	r2, #1
 800cc98:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800cc9a:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <RtcGetAdjustedTimeoutValue+0x60>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	607b      	str	r3, [r7, #4]
        }
    }
    return  timeout;
 800cca4:	687b      	ldr	r3, [r7, #4]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bc80      	pop	{r7}
 800ccae:	4770      	bx	lr
 800ccb0:	200007a0 	.word	0x200007a0
 800ccb4:	20000779 	.word	0x20000779
 800ccb8:	2000077a 	.word	0x2000077a

0800ccbc <RtcGetTimerValue>:

TimerTime_t RtcGetTimerValue( void )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	af00      	add	r7, sp, #0
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	f000 fb35 	bl	800d330 <RtcConvertCalendarTickToTimerTime>
 800ccc6:	4603      	mov	r3, r0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <RtcGetElapsedAlarmTime>:

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f000 fb28 	bl	800d330 <RtcConvertCalendarTickToTimerTime>
 800cce0:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 800cce2:	480a      	ldr	r0, [pc, #40]	; (800cd0c <RtcGetElapsedAlarmTime+0x40>)
 800cce4:	f000 fb24 	bl	800d330 <RtcConvertCalendarTickToTimerTime>
 800cce8:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d204      	bcs.n	800ccfc <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	e002      	b.n	800cd02 <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	1ad3      	subs	r3, r2, r3
    }
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200012ac 	.word	0x200012ac

0800cd10 <RtcComputeElapsedTime>:
{
    return( RtcGetTimerValue( ) + futureEventInTime );
}

TimerTime_t RtcComputeElapsedTime( TimerTime_t eventInTime )
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
    TimerTime_t elapsedTime = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60fb      	str	r3, [r7, #12]

    // Needed at boot, cannot compute with 0 or elapsed time will be equal to current time
    if( eventInTime == 0 )
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <RtcComputeElapsedTime+0x16>
    {
        return 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	e00f      	b.n	800cd46 <RtcComputeElapsedTime+0x36>
    }

    elapsedTime = RtcConvertCalendarTickToTimerTime( NULL );
 800cd26:	2000      	movs	r0, #0
 800cd28:	f000 fb02 	bl	800d330 <RtcConvertCalendarTickToTimerTime>
 800cd2c:	60f8      	str	r0, [r7, #12]

    if( elapsedTime < eventInTime )
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d204      	bcs.n	800cd40 <RtcComputeElapsedTime+0x30>
    { // roll over of the counter
        return( elapsedTime + ( 0xFFFFFFFF - eventInTime ) );
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	e002      	b.n	800cd46 <RtcComputeElapsedTime+0x36>
    }
    else
    {
        return( elapsedTime - eventInTime );
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	1ad3      	subs	r3, r2, r3
    }
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
	...

0800cd50 <BlockLowPowerDuringTask>:

void BlockLowPowerDuringTask ( bool status )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800cd5a:	79fb      	ldrb	r3, [r7, #7]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 800cd60:	f000 f836 	bl	800cdd0 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 800cd64:	4a03      	ldr	r2, [pc, #12]	; (800cd74 <BlockLowPowerDuringTask+0x24>)
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	7013      	strb	r3, [r2, #0]
}
 800cd6a:	bf00      	nop
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	2000077b 	.word	0x2000077b

0800cd78 <RtcEnterLowPowerStopMode>:

void RtcEnterLowPowerStopMode( void )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
    if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
 800cd7c:	4b11      	ldr	r3, [pc, #68]	; (800cdc4 <RtcEnterLowPowerStopMode+0x4c>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	f083 0301 	eor.w	r3, r3, #1
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d019      	beq.n	800cdbe <RtcEnterLowPowerStopMode+0x46>
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	; (800cdc8 <RtcEnterLowPowerStopMode+0x50>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d015      	beq.n	800cdbe <RtcEnterLowPowerStopMode+0x46>
    {
        BoardDeInitMcu( );
 800cd92:	f7fe fb8b 	bl	800b4ac <BoardDeInitMcu>

        // Disable the Power Voltage Detector
        HAL_PWR_DisablePVD( );
 800cd96:	f7f5 fbcd 	bl	8002534 <HAL_PWR_DisablePVD>

        SET_BIT( PWR->CR, PWR_CR_CWUF );
 800cd9a:	4b0c      	ldr	r3, [pc, #48]	; (800cdcc <RtcEnterLowPowerStopMode+0x54>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a0b      	ldr	r2, [pc, #44]	; (800cdcc <RtcEnterLowPowerStopMode+0x54>)
 800cda0:	f043 0304 	orr.w	r3, r3, #4
 800cda4:	6013      	str	r3, [r2, #0]

        // Enable Ultra low power mode
        HAL_PWREx_EnableUltraLowPower( );
 800cda6:	f7f5 fc26 	bl	80025f6 <HAL_PWREx_EnableUltraLowPower>

        // Enable the fast wake up from Ultra low power mode
        HAL_PWREx_EnableFastWakeUp( );
 800cdaa:	f7f5 fc09 	bl	80025c0 <HAL_PWREx_EnableFastWakeUp>

        //Deaktiviere das Inkrementieren des SysTick Timers, Verhinderung eines Interrupts zum Aufwecken des Boards
        HAL_SuspendTick();
 800cdae:	f7f4 faef 	bl	8001390 <HAL_SuspendTick>

        // Enter Stop Mode
        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	2001      	movs	r0, #1
 800cdb6:	f7f5 fbd7 	bl	8002568 <HAL_PWR_EnterSTOPMode>

        //Aktiviere das Inkrementieren des SysTick Timers
        HAL_ResumeTick();
 800cdba:	f7f4 faf7 	bl	80013ac <HAL_ResumeTick>

    }
}
 800cdbe:	bf00      	nop
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	2000077b 	.word	0x2000077b
 800cdc8:	2000077a 	.word	0x2000077a
 800cdcc:	40007000 	.word	0x40007000

0800cdd0 <RtcRecoverMcuStatus>:

void RtcRecoverMcuStatus( void )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	af00      	add	r7, sp, #0
    // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
    if( __HAL_PWR_GET_FLAG( PWR_FLAG_WU ) != RESET )
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <RtcRecoverMcuStatus+0x44>)
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d106      	bne.n	800cdee <RtcRecoverMcuStatus+0x1e>
    {
        __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 800cde0:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <RtcRecoverMcuStatus+0x44>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a0b      	ldr	r2, [pc, #44]	; (800ce14 <RtcRecoverMcuStatus+0x44>)
 800cde6:	f043 0304 	orr.w	r3, r3, #4
 800cdea:	6013      	str	r3, [r2, #0]
 800cdec:	e002      	b.n	800cdf4 <RtcRecoverMcuStatus+0x24>
    }
    else
    {
        NonScheduledWakeUp = true;
 800cdee:	4b0a      	ldr	r3, [pc, #40]	; (800ce18 <RtcRecoverMcuStatus+0x48>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	701a      	strb	r2, [r3, #0]
    }
    // check the clk source and set to full speed if we are coming from sleep mode
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800cdf4:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <RtcRecoverMcuStatus+0x4c>)
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	f003 030c 	and.w	r3, r3, #12
 800cdfc:	2b04      	cmp	r3, #4
 800cdfe:	d005      	beq.n	800ce0c <RtcRecoverMcuStatus+0x3c>
        ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 800ce00:	4b06      	ldr	r3, [pc, #24]	; (800ce1c <RtcRecoverMcuStatus+0x4c>)
 800ce02:	689b      	ldr	r3, [r3, #8]
 800ce04:	f003 030c 	and.w	r3, r3, #12
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d101      	bne.n	800ce10 <RtcRecoverMcuStatus+0x40>
    {
        BoardInitMcu( );
 800ce0c:	f7fe fb18 	bl	800b440 <BoardInitMcu>
    }
}
 800ce10:	bf00      	nop
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	40007000 	.word	0x40007000
 800ce18:	20000779 	.word	0x20000779
 800ce1c:	40023800 	.word	0x40023800

0800ce20 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b094      	sub	sp, #80	; 0x50
 800ce24:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t stop = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	64bb      	str	r3, [r7, #72]	; 0x48
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 800ce2e:	4b29      	ldr	r3, [pc, #164]	; (800ced4 <RtcComputeWakeUpTime+0xb4>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	f083 0301 	eor.w	r3, r3, #1
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d047      	beq.n	800cecc <RtcComputeWakeUpTime+0xac>
    {
        now = RtcGetCalendar( );
 800ce3c:	1d3b      	adds	r3, r7, #4
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 fb8e 	bl	800d560 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800ce44:	f107 0120 	add.w	r1, r7, #32
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce4e:	4822      	ldr	r0, [pc, #136]	; (800ced8 <RtcComputeWakeUpTime+0xb8>)
 800ce50:	f7f6 ffe3 	bl	8003e1a <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800ce54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ce58:	461a      	mov	r2, r3
 800ce5a:	233c      	movs	r3, #60	; 0x3c
 800ce5c:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800ce60:	fb01 f303 	mul.w	r3, r1, r3
 800ce64:	441a      	add	r2, r3
 800ce66:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce6a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800ce6e:	fb01 f303 	mul.w	r3, r1, r3
 800ce72:	4413      	add	r3, r2
 800ce74:	64fb      	str	r3, [r7, #76]	; 0x4c
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	233c      	movs	r3, #60	; 0x3c
 800ce7c:	7b79      	ldrb	r1, [r7, #13]
 800ce7e:	fb01 f303 	mul.w	r3, r1, r3
 800ce82:	441a      	add	r2, r3
 800ce84:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce88:	7b39      	ldrb	r1, [r7, #12]
 800ce8a:	fb01 f303 	mul.w	r3, r1, r3
 800ce8e:	4413      	add	r3, r2
 800ce90:	64bb      	str	r3, [r7, #72]	; 0x48

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 800ce92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7f3 fab3 	bl	8000404 <__aeabi_ui2d>
 800ce9e:	f04f 0200 	mov.w	r2, #0
 800cea2:	4b0e      	ldr	r3, [pc, #56]	; (800cedc <RtcComputeWakeUpTime+0xbc>)
 800cea4:	f7f3 fb28 	bl	80004f8 <__aeabi_dmul>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4610      	mov	r0, r2
 800ceae:	4619      	mov	r1, r3
 800ceb0:	f005 fd02 	bl	80128b8 <ceil>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4619      	mov	r1, r3
 800cebc:	f7f3 fdde 	bl	8000a7c <__aeabi_d2uiz>
 800cec0:	4603      	mov	r3, r0
 800cec2:	4a07      	ldr	r2, [pc, #28]	; (800cee0 <RtcComputeWakeUpTime+0xc0>)
 800cec4:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 800cec6:	4b03      	ldr	r3, [pc, #12]	; (800ced4 <RtcComputeWakeUpTime+0xb4>)
 800cec8:	2201      	movs	r2, #1
 800ceca:	701a      	strb	r2, [r3, #0]
    }
}
 800cecc:	bf00      	nop
 800cece:	3750      	adds	r7, #80	; 0x50
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	2000079d 	.word	0x2000079d
 800ced8:	2000077c 	.word	0x2000077c
 800cedc:	3fdf4000 	.word	0x3fdf4000
 800cee0:	200007a0 	.word	0x200007a0

0800cee4 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800cee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee6:	b0a1      	sub	sp, #132	; 0x84
 800cee8:	af06      	add	r7, sp, #24
 800ceea:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800ceec:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cef0:	4826      	ldr	r0, [pc, #152]	; (800cf8c <RtcStartWakeUpAlarm+0xa8>)
 800cef2:	f7f6 ff07 	bl	8003d04 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800cef6:	4825      	ldr	r0, [pc, #148]	; (800cf8c <RtcStartWakeUpAlarm+0xa8>)
 800cef8:	f7f7 f8fa 	bl	80040f0 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800cefc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 fb2d 	bl	800d560 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800cf06:	4b22      	ldr	r3, [pc, #136]	; (800cf90 <RtcStartWakeUpAlarm+0xac>)
 800cf08:	461d      	mov	r5, r3
 800cf0a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cf0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cf16:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800cf1a:	f107 0630 	add.w	r6, r7, #48	; 0x30
 800cf1e:	466d      	mov	r5, sp
 800cf20:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800cf24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf28:	6823      	ldr	r3, [r4, #0]
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cf30:	cb0c      	ldmia	r3, {r2, r3}
 800cf32:	6879      	ldr	r1, [r7, #4]
 800cf34:	4630      	mov	r0, r6
 800cf36:	f000 f82f 	bl	800cf98 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800cf3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	627b      	str	r3, [r7, #36]	; 0x24
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	72fb      	strb	r3, [r7, #11]

    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800cf4c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cf50:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800cf52:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cf56:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 800cf58:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cf5c:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800cf5e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800cf62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    //SubSeconds must be added manual, this part can't config by CubeMX
	alarmStructure.AlarmTime.SubSeconds = 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	60fb      	str	r3, [r7, #12]
	alarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	617b      	str	r3, [r7, #20]
    alarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	61bb      	str	r3, [r7, #24]
    alarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	623b      	str	r3, [r7, #32]

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4803      	ldr	r0, [pc, #12]	; (800cf8c <RtcStartWakeUpAlarm+0xa8>)
 800cf80:	f7f6 fd88 	bl	8003a94 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800cf84:	bf00      	nop
 800cf86:	376c      	adds	r7, #108	; 0x6c
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf8c:	2000077c 	.word	0x2000077c
 800cf90:	200012ac 	.word	0x200012ac
 800cf94:	00000000 	.word	0x00000000

0800cf98 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 800cf98:	b082      	sub	sp, #8
 800cf9a:	b5b0      	push	{r4, r5, r7, lr}
 800cf9c:	b092      	sub	sp, #72	; 0x48
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	6039      	str	r1, [r7, #0]
 800cfa4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cfa8:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 800cfac:	f107 040c 	add.w	r4, r7, #12
 800cfb0:	f107 0558 	add.w	r5, r7, #88	; 0x58
 800cfb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cfbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 800cfc0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800cfc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 800cfc8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800cfcc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    uint16_t hours = now.CalendarTime.Hours;
 800cfd0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800cfd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t days = now.CalendarDate.Date;
 800cfd8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800cfdc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    double timeoutValueTemp = 0.0;
 800cfe0:	f04f 0200 	mov.w	r2, #0
 800cfe4:	f04f 0300 	mov.w	r3, #0
 800cfe8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double timeoutValue = 0.0;
 800cfec:	f04f 0200 	mov.w	r2, #0
 800cff0:	f04f 0300 	mov.w	r3, #0
 800cff4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double error = 0.0;
 800cff8:	f04f 0200 	mov.w	r2, #0
 800cffc:	f04f 0300 	mov.w	r3, #0
 800d000:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800d004:	4ac2      	ldr	r2, [pc, #776]	; (800d310 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800d006:	4613      	mov	r3, r2
 800d008:	00db      	lsls	r3, r3, #3
 800d00a:	1a9b      	subs	r3, r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4618      	mov	r0, r3
 800d010:	f7f3 f9f8 	bl	8000404 <__aeabi_ui2d>
 800d014:	f04f 0200 	mov.w	r2, #0
 800d018:	4bbe      	ldr	r3, [pc, #760]	; (800d314 <RtcComputeTimerTimeToAlarmTick+0x37c>)
 800d01a:	f7f3 fa6d 	bl	80004f8 <__aeabi_dmul>
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	4610      	mov	r0, r2
 800d024:	4619      	mov	r1, r3
 800d026:	f7f3 fd29 	bl	8000a7c <__aeabi_d2uiz>
 800d02a:	4602      	mov	r2, r0
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	4293      	cmp	r3, r2
 800d030:	bf28      	it	cs
 800d032:	4613      	movcs	r3, r2
 800d034:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d101      	bne.n	800d040 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800d03c:	2301      	movs	r3, #1
 800d03e:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 800d040:	6838      	ldr	r0, [r7, #0]
 800d042:	f7f3 f9df 	bl	8000404 <__aeabi_ui2d>
 800d046:	a3b0      	add	r3, pc, #704	; (adr r3, 800d308 <RtcComputeTimerTimeToAlarmTick+0x370>)
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 fa54 	bl	80004f8 <__aeabi_dmul>
 800d050:	4602      	mov	r2, r0
 800d052:	460b      	mov	r3, r1
 800d054:	4610      	mov	r0, r2
 800d056:	4619      	mov	r1, r3
 800d058:	f005 fd2e 	bl	8012ab8 <round>
 800d05c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 800d060:	6838      	ldr	r0, [r7, #0]
 800d062:	f7f3 f9cf 	bl	8000404 <__aeabi_ui2d>
 800d066:	a3a8      	add	r3, pc, #672	; (adr r3, 800d308 <RtcComputeTimerTimeToAlarmTick+0x370>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	f7f3 fa44 	bl	80004f8 <__aeabi_dmul>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 800d078:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d07c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d080:	f7f3 f882 	bl	8000188 <__aeabi_dsub>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 800d08c:	4ba2      	ldr	r3, [pc, #648]	; (800d318 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4618      	mov	r0, r3
 800d092:	f7f3 f9c7 	bl	8000424 <__aeabi_i2d>
 800d096:	4604      	mov	r4, r0
 800d098:	460d      	mov	r5, r1
 800d09a:	f04f 0200 	mov.w	r2, #0
 800d09e:	4b9f      	ldr	r3, [pc, #636]	; (800d31c <RtcComputeTimerTimeToAlarmTick+0x384>)
 800d0a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d0a4:	f7f3 fa28 	bl	80004f8 <__aeabi_dmul>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	f7f3 f86c 	bl	800018c <__adddf3>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	f7f3 fcb6 	bl	8000a2c <__aeabi_d2iz>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4a95      	ldr	r2, [pc, #596]	; (800d318 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d0c4:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 800d0c6:	4b94      	ldr	r3, [pc, #592]	; (800d318 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800d0ce:	db25      	blt.n	800d11c <RtcComputeTimerTimeToAlarmTick+0x184>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 800d0d0:	4b91      	ldr	r3, [pc, #580]	; (800d318 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b8f      	ldr	r3, [pc, #572]	; (800d318 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800d0dc:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800d0de:	f04f 0200 	mov.w	r2, #0
 800d0e2:	4b8f      	ldr	r3, [pc, #572]	; (800d320 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800d0e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d0e8:	f7f3 f850 	bl	800018c <__adddf3>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800d0f4:	e012      	b.n	800d11c <RtcComputeTimerTimeToAlarmTick+0x184>
    {
        timeoutValue -= SecondsInDay;
 800d0f6:	4b86      	ldr	r3, [pc, #536]	; (800d310 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f3 f983 	bl	8000404 <__aeabi_ui2d>
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d106:	f7f3 f83f 	bl	8000188 <__aeabi_dsub>
 800d10a:	4602      	mov	r2, r0
 800d10c:	460b      	mov	r3, r1
 800d10e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        days++;
 800d112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d116:	3301      	adds	r3, #1
 800d118:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( timeoutValue >= SecondsInDay )
 800d11c:	4b7c      	ldr	r3, [pc, #496]	; (800d310 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800d11e:	4618      	mov	r0, r3
 800d120:	f7f3 f970 	bl	8000404 <__aeabi_ui2d>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d12c:	f7f3 fc6a 	bl	8000a04 <__aeabi_dcmpge>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1df      	bne.n	800d0f6 <RtcComputeTimerTimeToAlarmTick+0x15e>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800d136:	e013      	b.n	800d160 <RtcComputeTimerTimeToAlarmTick+0x1c8>
    {
        timeoutValue -= SecondsInHour;
 800d138:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f3 f971 	bl	8000424 <__aeabi_i2d>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d14a:	f7f3 f81d 	bl	8000188 <__aeabi_dsub>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        hours++;
 800d156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d15a:	3301      	adds	r3, #1
 800d15c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( timeoutValue >= SecondsInHour )
 800d160:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800d164:	4618      	mov	r0, r3
 800d166:	f7f3 f95d 	bl	8000424 <__aeabi_i2d>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d172:	f7f3 fc47 	bl	8000a04 <__aeabi_dcmpge>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1dd      	bne.n	800d138 <RtcComputeTimerTimeToAlarmTick+0x1a0>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800d17c:	e012      	b.n	800d1a4 <RtcComputeTimerTimeToAlarmTick+0x20c>
    {
        timeoutValue -= SecondsInMinute;
 800d17e:	233c      	movs	r3, #60	; 0x3c
 800d180:	4618      	mov	r0, r3
 800d182:	f7f3 f94f 	bl	8000424 <__aeabi_i2d>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d18e:	f7f2 fffb 	bl	8000188 <__aeabi_dsub>
 800d192:	4602      	mov	r2, r0
 800d194:	460b      	mov	r3, r1
 800d196:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        minutes++;
 800d19a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d19e:	3301      	adds	r3, #1
 800d1a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( timeoutValue >= SecondsInMinute )
 800d1a4:	233c      	movs	r3, #60	; 0x3c
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f3 f93c 	bl	8000424 <__aeabi_i2d>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d1b4:	f7f3 fc26 	bl	8000a04 <__aeabi_dcmpge>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1df      	bne.n	800d17e <RtcComputeTimerTimeToAlarmTick+0x1e6>
    }

    // Calculate seconds
    seconds += timeoutValue;
 800d1be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7f3 f92e 	bl	8000424 <__aeabi_i2d>
 800d1c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d1cc:	f7f2 ffde 	bl	800018c <__adddf3>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	f7f3 fc50 	bl	8000a7c <__aeabi_d2uiz>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    // Correct for modulo
    while( seconds >= 60 )
 800d1e2:	e009      	b.n	800d1f8 <RtcComputeTimerTimeToAlarmTick+0x260>
    {
        seconds -= 60;
 800d1e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d1e8:	3b3c      	subs	r3, #60	; 0x3c
 800d1ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        minutes++;
 800d1ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( seconds >= 60 )
 800d1f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d1fc:	2b3b      	cmp	r3, #59	; 0x3b
 800d1fe:	d8f1      	bhi.n	800d1e4 <RtcComputeTimerTimeToAlarmTick+0x24c>
    }

    while( minutes >= 60 )
 800d200:	e009      	b.n	800d216 <RtcComputeTimerTimeToAlarmTick+0x27e>
    {
        minutes -= 60;
 800d202:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d206:	3b3c      	subs	r3, #60	; 0x3c
 800d208:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        hours++;
 800d20c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d210:	3301      	adds	r3, #1
 800d212:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( minutes >= 60 )
 800d216:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d21a:	2b3b      	cmp	r3, #59	; 0x3b
 800d21c:	d8f1      	bhi.n	800d202 <RtcComputeTimerTimeToAlarmTick+0x26a>
    }

    while( hours >= HoursInDay )
 800d21e:	e00b      	b.n	800d238 <RtcComputeTimerTimeToAlarmTick+0x2a0>
    {
        hours -= HoursInDay;
 800d220:	2318      	movs	r3, #24
 800d222:	b29b      	uxth	r3, r3
 800d224:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        days++;
 800d22e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d232:	3301      	adds	r3, #1
 800d234:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( hours >= HoursInDay )
 800d238:	2318      	movs	r3, #24
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d240:	429a      	cmp	r2, r3
 800d242:	d2ed      	bcs.n	800d220 <RtcComputeTimerTimeToAlarmTick+0x288>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800d244:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <RtcComputeTimerTimeToAlarmTick+0x2c8>
 800d24c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800d250:	461a      	mov	r2, r3
 800d252:	4b34      	ldr	r3, [pc, #208]	; (800d324 <RtcComputeTimerTimeToAlarmTick+0x38c>)
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	4413      	add	r3, r2
 800d258:	f003 0303 	and.w	r3, r3, #3
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d118      	bne.n	800d292 <RtcComputeTimerTimeToAlarmTick+0x2fa>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800d260:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d264:	3b01      	subs	r3, #1
 800d266:	4a30      	ldr	r2, [pc, #192]	; (800d328 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800d268:	5cd3      	ldrb	r3, [r2, r3]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d270:	429a      	cmp	r2, r3
 800d272:	d926      	bls.n	800d2c2 <RtcComputeTimerTimeToAlarmTick+0x32a>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800d274:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d278:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800d27c:	3a01      	subs	r2, #1
 800d27e:	492a      	ldr	r1, [pc, #168]	; (800d328 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800d280:	5c8a      	ldrb	r2, [r1, r2]
 800d282:	fb93 f1f2 	sdiv	r1, r3, r2
 800d286:	fb02 f201 	mul.w	r2, r2, r1
 800d28a:	1a9b      	subs	r3, r3, r2
 800d28c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800d290:	e017      	b.n	800d2c2 <RtcComputeTimerTimeToAlarmTick+0x32a>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 800d292:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d296:	3b01      	subs	r3, #1
 800d298:	4a24      	ldr	r2, [pc, #144]	; (800d32c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800d29a:	5cd3      	ldrb	r3, [r2, r3]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d90d      	bls.n	800d2c2 <RtcComputeTimerTimeToAlarmTick+0x32a>
        {
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 800d2a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2aa:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800d2ae:	3a01      	subs	r2, #1
 800d2b0:	491e      	ldr	r1, [pc, #120]	; (800d32c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800d2b2:	5c8a      	ldrb	r2, [r1, r2]
 800d2b4:	fb93 f1f2 	sdiv	r1, r3, r2
 800d2b8:	fb02 f201 	mul.w	r2, r2, r1
 800d2bc:	1a9b      	subs	r3, r3, r2
 800d2be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 800d2c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 800d2ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 800d2d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800d2da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	743b      	strb	r3, [r7, #16]

    return calendar;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	461d      	mov	r5, r3
 800d2e6:	f107 040c 	add.w	r4, r7, #12
 800d2ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d2ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d2f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	3748      	adds	r7, #72	; 0x48
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d300:	b002      	add	sp, #8
 800d302:	4770      	bx	lr
 800d304:	f3af 8000 	nop.w
 800d308:	d2f1a9fc 	.word	0xd2f1a9fc
 800d30c:	4000624d 	.word	0x4000624d
 800d310:	00015180 	.word	0x00015180
 800d314:	3fdf4000 	.word	0x3fdf4000
 800d318:	200007a4 	.word	0x200007a4
 800d31c:	408f4000 	.word	0x408f4000
 800d320:	3ff00000 	.word	0x3ff00000
 800d324:	20000776 	.word	0x20000776
 800d328:	080130c8 	.word	0x080130c8
 800d32c:	080130bc 	.word	0x080130bc

0800d330 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 800d330:	b5b0      	push	{r4, r5, r7, lr}
 800d332:	b08e      	sub	sp, #56	; 0x38
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	62bb      	str	r3, [r7, #40]	; 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	f04f 0300 	mov.w	r3, #0
 800d344:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d105      	bne.n	800d35a <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800d34e:	f107 030c 	add.w	r3, r7, #12
 800d352:	4618      	mov	r0, r3
 800d354:	f000 f904 	bl	800d560 <RtcGetCalendar>
 800d358:	e009      	b.n	800d36e <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f107 040c 	add.w	r4, r7, #12
 800d360:	461d      	mov	r5, r3
 800d362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d36a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800d36e:	2300      	movs	r3, #0
 800d370:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d372:	e02c      	b.n	800d3ce <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800d374:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d005      	beq.n	800d388 <RtcConvertCalendarTickToTimerTime+0x58>
 800d37c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	b29b      	uxth	r3, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10e      	bne.n	800d3a6 <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 800d388:	4b5d      	ldr	r3, [pc, #372]	; (800d500 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f3 f83a 	bl	8000404 <__aeabi_ui2d>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d398:	f7f2 fef8 	bl	800018c <__adddf3>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d3a4:	e00d      	b.n	800d3c2 <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 800d3a6:	4b57      	ldr	r3, [pc, #348]	; (800d504 <RtcConvertCalendarTickToTimerTime+0x1d4>)
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7f3 f82b 	bl	8000404 <__aeabi_ui2d>
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d3b6:	f7f2 fee9 	bl	800018c <__adddf3>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	460b      	mov	r3, r1
 800d3be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800d3c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d3ce:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800d3d2:	7c7b      	ldrb	r3, [r7, #17]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	89bb      	ldrh	r3, [r7, #12]
 800d3d8:	440b      	add	r3, r1
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	dbca      	blt.n	800d374 <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800d3de:	7c7b      	ldrb	r3, [r7, #17]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d007      	beq.n	800d3f4 <RtcConvertCalendarTickToTimerTime+0xc4>
 800d3e4:	7c7b      	ldrb	r3, [r7, #17]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	89bb      	ldrh	r3, [r7, #12]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f003 0303 	and.w	r3, r3, #3
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d124      	bne.n	800d43e <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800d3fa:	e019      	b.n	800d430 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800d3fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d400:	4a41      	ldr	r2, [pc, #260]	; (800d508 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 800d402:	5cd3      	ldrb	r3, [r2, r3]
 800d404:	461a      	mov	r2, r3
 800d406:	4b41      	ldr	r3, [pc, #260]	; (800d50c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d408:	fb03 f302 	mul.w	r3, r3, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7f2 fff9 	bl	8000404 <__aeabi_ui2d>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d41a:	f7f2 feb7 	bl	800018c <__adddf3>
 800d41e:	4602      	mov	r2, r0
 800d420:	460b      	mov	r3, r1
 800d422:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800d426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d42a:	3301      	adds	r3, #1
 800d42c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800d430:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	3b01      	subs	r3, #1
 800d438:	429a      	cmp	r2, r3
 800d43a:	dbdf      	blt.n	800d3fc <RtcConvertCalendarTickToTimerTime+0xcc>
 800d43c:	e023      	b.n	800d486 <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800d43e:	2300      	movs	r3, #0
 800d440:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800d444:	e019      	b.n	800d47a <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800d446:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d44a:	4a31      	ldr	r2, [pc, #196]	; (800d510 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 800d44c:	5cd3      	ldrb	r3, [r2, r3]
 800d44e:	461a      	mov	r2, r3
 800d450:	4b2e      	ldr	r3, [pc, #184]	; (800d50c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d452:	fb03 f302 	mul.w	r3, r3, r2
 800d456:	4618      	mov	r0, r3
 800d458:	f7f2 ffd4 	bl	8000404 <__aeabi_ui2d>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d464:	f7f2 fe92 	bl	800018c <__adddf3>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800d470:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d474:	3301      	adds	r3, #1
 800d476:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800d47a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d47e:	7bfb      	ldrb	r3, [r7, #15]
 800d480:	3b01      	subs	r3, #1
 800d482:	429a      	cmp	r2, r3
 800d484:	dbdf      	blt.n	800d446 <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800d486:	7dbb      	ldrb	r3, [r7, #22]
 800d488:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800d48a:	7d3b      	ldrb	r3, [r7, #20]
 800d48c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800d490:	fb02 f203 	mul.w	r2, r2, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 800d494:	7d7b      	ldrb	r3, [r7, #21]
 800d496:	203c      	movs	r0, #60	; 0x3c
 800d498:	fb00 f303 	mul.w	r3, r0, r3
 800d49c:	4413      	add	r3, r2
 800d49e:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 800d4a0:	7c3b      	ldrb	r3, [r7, #16]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	4b19      	ldr	r3, [pc, #100]	; (800d50c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d4a6:	fb03 f301 	mul.w	r3, r3, r1
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800d4aa:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7f2 ffa9 	bl	8000404 <__aeabi_ui2d>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4ba:	f7f2 fe67 	bl	800018c <__adddf3>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 800d4c6:	f04f 0200 	mov.w	r2, #0
 800d4ca:	4b12      	ldr	r3, [pc, #72]	; (800d514 <RtcConvertCalendarTickToTimerTime+0x1e4>)
 800d4cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4d0:	f7f3 f812 	bl	80004f8 <__aeabi_dmul>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounter = round( timeCounterTemp );
 800d4dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d4e0:	f005 faea 	bl	8012ab8 <round>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	f7f3 fac6 	bl	8000a7c <__aeabi_d2uiz>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	62bb      	str	r3, [r7, #40]	; 0x28
    return ( timeCounter );
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3738      	adds	r7, #56	; 0x38
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bdb0      	pop	{r4, r5, r7, pc}
 800d4fe:	bf00      	nop
 800d500:	01e28500 	.word	0x01e28500
 800d504:	01e13380 	.word	0x01e13380
 800d508:	080130c8 	.word	0x080130c8
 800d50c:	00015180 	.word	0x00015180
 800d510:	080130bc 	.word	0x080130bc
 800d514:	3fdf4000 	.word	0x3fdf4000

0800d518 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	2b63      	cmp	r3, #99	; 0x63
 800d526:	d102      	bne.n	800d52e <RtcCheckCalendarRollOver+0x16>
    {
        CalendarRollOverReady = true;
 800d528:	4b0b      	ldr	r3, [pc, #44]	; (800d558 <RtcCheckCalendarRollOver+0x40>)
 800d52a:	2201      	movs	r2, #1
 800d52c:	701a      	strb	r2, [r3, #0]
    }

    if( ( CalendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800d52e:	4b0a      	ldr	r3, [pc, #40]	; (800d558 <RtcCheckCalendarRollOver+0x40>)
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00b      	beq.n	800d54e <RtcCheckCalendarRollOver+0x36>
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d108      	bne.n	800d54e <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CalendarRollOverReady = false;
 800d53c:	4b06      	ldr	r3, [pc, #24]	; (800d558 <RtcCheckCalendarRollOver+0x40>)
 800d53e:	2200      	movs	r2, #0
 800d540:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800d542:	4b06      	ldr	r3, [pc, #24]	; (800d55c <RtcCheckCalendarRollOver+0x44>)
 800d544:	881b      	ldrh	r3, [r3, #0]
 800d546:	3364      	adds	r3, #100	; 0x64
 800d548:	b29a      	uxth	r2, r3
 800d54a:	4b04      	ldr	r3, [pc, #16]	; (800d55c <RtcCheckCalendarRollOver+0x44>)
 800d54c:	801a      	strh	r2, [r3, #0]
    }
}
 800d54e:	bf00      	nop
 800d550:	370c      	adds	r7, #12
 800d552:	46bd      	mov	sp, r7
 800d554:	bc80      	pop	{r7}
 800d556:	4770      	bx	lr
 800d558:	20000778 	.word	0x20000778
 800d55c:	20000776 	.word	0x20000776

0800d560 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800d560:	b5b0      	push	{r4, r5, r7, lr}
 800d562:	b08a      	sub	sp, #40	; 0x28
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800d568:	f107 030c 	add.w	r3, r7, #12
 800d56c:	3308      	adds	r3, #8
 800d56e:	2200      	movs	r2, #0
 800d570:	4619      	mov	r1, r3
 800d572:	4810      	ldr	r0, [pc, #64]	; (800d5b4 <RtcGetCalendar+0x54>)
 800d574:	f7f6 f831 	bl	80035da <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 800d578:	f107 030c 	add.w	r3, r7, #12
 800d57c:	3302      	adds	r3, #2
 800d57e:	2200      	movs	r2, #0
 800d580:	4619      	mov	r1, r3
 800d582:	480c      	ldr	r0, [pc, #48]	; (800d5b4 <RtcGetCalendar+0x54>)
 800d584:	f7f6 f924 	bl	80037d0 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 800d588:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <RtcGetCalendar+0x58>)
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 800d58e:	7c7b      	ldrb	r3, [r7, #17]
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff ffc1 	bl	800d518 <RtcCheckCalendarRollOver>
    return calendar;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	461d      	mov	r5, r3
 800d59a:	f107 040c 	add.w	r4, r7, #12
 800d59e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d5a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d5a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	3728      	adds	r7, #40	; 0x28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	2000077c 	.word	0x2000077c
 800d5b8:	20000776 	.word	0x20000776

0800d5bc <RTC_Alarm_IRQHandler>:

/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
void RTC_Alarm_IRQHandler( void )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	af00      	add	r7, sp, #0
HAL_ResumeTick();
 800d5c0:	f7f3 fef4 	bl	80013ac <HAL_ResumeTick>
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 800d5c4:	4809      	ldr	r0, [pc, #36]	; (800d5ec <RTC_Alarm_IRQHandler+0x30>)
 800d5c6:	f7f6 fcb3 	bl	8003f30 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800d5ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d5ce:	4807      	ldr	r0, [pc, #28]	; (800d5ec <RTC_Alarm_IRQHandler+0x30>)
 800d5d0:	f7f6 fb98 	bl	8003d04 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 800d5d4:	f7ff fbfc 	bl	800cdd0 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 800d5d8:	f7ff fc22 	bl	800ce20 <RtcComputeWakeUpTime>
    BlockLowPowerDuringTask( false );
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f7ff fbb7 	bl	800cd50 <BlockLowPowerDuringTask>

    TimerIrqHandler( );
 800d5e2:	f003 f815 	bl	8010610 <TimerIrqHandler>
}
 800d5e6:	bf00      	nop
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	2000077c 	.word	0x2000077c

0800d5f0 <SpiInit>:
    SPI_1 = ( uint32_t )SPI1_BASE,
    SPI_2 = ( uint32_t )SPI2_BASE,
}SPIName;

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	4608      	mov	r0, r1
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	4603      	mov	r3, r0
 800d600:	70fb      	strb	r3, [r7, #3]
 800d602:	460b      	mov	r3, r1
 800d604:	70bb      	strb	r3, [r7, #2]
 800d606:	4613      	mov	r3, r2
 800d608:	707b      	strb	r3, [r7, #1]
    BoardDisableIrq( );
 800d60a:	f7fd fef5 	bl	800b3f8 <BoardDisableIrq>

    // Choose SPI interface according to the given pins
    if( mosi == PA_7 )
 800d60e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d612:	2b07      	cmp	r3, #7
 800d614:	d169      	bne.n	800d6ea <SpiInit+0xfa>
    {
        __HAL_RCC_SPI1_FORCE_RESET( );
 800d616:	4b72      	ldr	r3, [pc, #456]	; (800d7e0 <SpiInit+0x1f0>)
 800d618:	695b      	ldr	r3, [r3, #20]
 800d61a:	4a71      	ldr	r2, [pc, #452]	; (800d7e0 <SpiInit+0x1f0>)
 800d61c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d620:	6153      	str	r3, [r2, #20]
        __HAL_RCC_SPI1_RELEASE_RESET( );
 800d622:	4b6f      	ldr	r3, [pc, #444]	; (800d7e0 <SpiInit+0x1f0>)
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	4a6e      	ldr	r2, [pc, #440]	; (800d7e0 <SpiInit+0x1f0>)
 800d628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d62c:	6153      	str	r3, [r2, #20]

        __HAL_RCC_SPI1_CLK_ENABLE( );
 800d62e:	4b6c      	ldr	r3, [pc, #432]	; (800d7e0 <SpiInit+0x1f0>)
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	4a6b      	ldr	r2, [pc, #428]	; (800d7e0 <SpiInit+0x1f0>)
 800d634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d638:	6213      	str	r3, [r2, #32]
 800d63a:	4b69      	ldr	r3, [pc, #420]	; (800d7e0 <SpiInit+0x1f0>)
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d642:	60fb      	str	r3, [r7, #12]
 800d644:	68fb      	ldr	r3, [r7, #12]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI1_BASE;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a66      	ldr	r2, [pc, #408]	; (800d7e4 <SpiInit+0x1f4>)
 800d64a:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d652:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d656:	2305      	movs	r3, #5
 800d658:	9301      	str	r3, [sp, #4]
 800d65a:	2302      	movs	r3, #2
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	2300      	movs	r3, #0
 800d660:	2202      	movs	r2, #2
 800d662:	f7fe fed9 	bl	800c418 <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d66c:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d670:	2305      	movs	r3, #5
 800d672:	9301      	str	r3, [sp, #4]
 800d674:	2302      	movs	r3, #2
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	2300      	movs	r3, #0
 800d67a:	2202      	movs	r2, #2
 800d67c:	f7fe fecc 	bl	800c418 <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d686:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d68a:	2305      	movs	r3, #5
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	2302      	movs	r3, #2
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	2300      	movs	r3, #0
 800d694:	2202      	movs	r2, #2
 800d696:	f7fe febf 	bl	800c418 <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d6a0:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d6a4:	2305      	movs	r3, #5
 800d6a6:	9301      	str	r3, [sp, #4]
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f7fe feb2 	bl	800c418 <GpioInit>

        if( nss == NC )
 800d6b4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6bc:	d10c      	bne.n	800d6d8 <SpiInit+0xe8>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6c4:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	9300      	str	r3, [sp, #0]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f8d1 	bl	800d878 <SpiFormat>
 800d6d6:	e075      	b.n	800d7c4 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d6d8:	2301      	movs	r3, #1
 800d6da:	9300      	str	r3, [sp, #0]
 800d6dc:	2300      	movs	r3, #0
 800d6de:	2200      	movs	r2, #0
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f8c8 	bl	800d878 <SpiFormat>
 800d6e8:	e06c      	b.n	800d7c4 <SpiInit+0x1d4>
        }
    }
    else if( mosi == PB_15 )
 800d6ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6ee:	2b1f      	cmp	r3, #31
 800d6f0:	d168      	bne.n	800d7c4 <SpiInit+0x1d4>
    {
        __HAL_RCC_SPI2_FORCE_RESET( );
 800d6f2:	4b3b      	ldr	r3, [pc, #236]	; (800d7e0 <SpiInit+0x1f0>)
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	4a3a      	ldr	r2, [pc, #232]	; (800d7e0 <SpiInit+0x1f0>)
 800d6f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d6fc:	6193      	str	r3, [r2, #24]
        __HAL_RCC_SPI2_RELEASE_RESET( );
 800d6fe:	4b38      	ldr	r3, [pc, #224]	; (800d7e0 <SpiInit+0x1f0>)
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	4a37      	ldr	r2, [pc, #220]	; (800d7e0 <SpiInit+0x1f0>)
 800d704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d708:	6193      	str	r3, [r2, #24]

        __HAL_RCC_SPI2_CLK_ENABLE( );
 800d70a:	4b35      	ldr	r3, [pc, #212]	; (800d7e0 <SpiInit+0x1f0>)
 800d70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70e:	4a34      	ldr	r2, [pc, #208]	; (800d7e0 <SpiInit+0x1f0>)
 800d710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d714:	6253      	str	r3, [r2, #36]	; 0x24
 800d716:	4b32      	ldr	r3, [pc, #200]	; (800d7e0 <SpiInit+0x1f0>)
 800d718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d71e:	60bb      	str	r3, [r7, #8]
 800d720:	68bb      	ldr	r3, [r7, #8]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI2_BASE;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a30      	ldr	r2, [pc, #192]	; (800d7e8 <SpiInit+0x1f8>)
 800d726:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d72e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d732:	2305      	movs	r3, #5
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	2302      	movs	r3, #2
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	2300      	movs	r3, #0
 800d73c:	2202      	movs	r2, #2
 800d73e:	f7fe fe6b 	bl	800c418 <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d748:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d74c:	2305      	movs	r3, #5
 800d74e:	9301      	str	r3, [sp, #4]
 800d750:	2302      	movs	r3, #2
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	2300      	movs	r3, #0
 800d756:	2202      	movs	r2, #2
 800d758:	f7fe fe5e 	bl	800c418 <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d762:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d766:	2305      	movs	r3, #5
 800d768:	9301      	str	r3, [sp, #4]
 800d76a:	2302      	movs	r3, #2
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	2300      	movs	r3, #0
 800d770:	2202      	movs	r2, #2
 800d772:	f7fe fe51 	bl	800c418 <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d77c:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d780:	2305      	movs	r3, #5
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	2301      	movs	r3, #1
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	2300      	movs	r3, #0
 800d78a:	2202      	movs	r2, #2
 800d78c:	f7fe fe44 	bl	800c418 <GpioInit>

        if( nss == NC )
 800d790:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d798:	d10c      	bne.n	800d7b4 <SpiInit+0x1c4>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7a0:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f863 	bl	800d878 <SpiFormat>
 800d7b2:	e007      	b.n	800d7c4 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	2100      	movs	r1, #0
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f85a 	bl	800d878 <SpiFormat>
        }
    }
    SpiFrequency( obj, 10000000 );
 800d7c4:	4909      	ldr	r1, [pc, #36]	; (800d7ec <SpiInit+0x1fc>)
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f898 	bl	800d8fc <SpiFrequency>

    HAL_SPI_Init( &obj->Spi );
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7f6 fced 	bl	80041ae <HAL_SPI_Init>
		//DebugPrintf("abc");

    BoardEnableIrq( );
 800d7d4:	f7fd fe20 	bl	800b418 <BoardEnableIrq>
}
 800d7d8:	bf00      	nop
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	40023800 	.word	0x40023800
 800d7e4:	40013000 	.word	0x40013000
 800d7e8:	40003800 	.word	0x40003800
 800d7ec:	00989680 	.word	0x00989680

0800d7f0 <SpiDeInit>:

void SpiDeInit( Spi_t *obj )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af02      	add	r7, sp, #8
 800d7f6:	6078      	str	r0, [r7, #4]
    HAL_SPI_DeInit( &obj->Spi );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7f6 fd60 	bl	80042c0 <HAL_SPI_DeInit>

    GpioInit( &obj->Mosi, obj->Mosi.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f993 1058 	ldrsb.w	r1, [r3, #88]	; 0x58
 800d80c:	2300      	movs	r3, #0
 800d80e:	9301      	str	r3, [sp, #4]
 800d810:	2300      	movs	r3, #0
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	2300      	movs	r3, #0
 800d816:	2201      	movs	r2, #1
 800d818:	f7fe fdfe 	bl	800c418 <GpioInit>
    GpioInit( &obj->Miso, obj->Miso.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_DOWN, 0 );
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f993 1064 	ldrsb.w	r1, [r3, #100]	; 0x64
 800d828:	2300      	movs	r3, #0
 800d82a:	9301      	str	r3, [sp, #4]
 800d82c:	2302      	movs	r3, #2
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	2300      	movs	r3, #0
 800d832:	2201      	movs	r2, #1
 800d834:	f7fe fdf0 	bl	800c418 <GpioInit>
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f993 1070 	ldrsb.w	r1, [r3, #112]	; 0x70
 800d844:	2300      	movs	r3, #0
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	2300      	movs	r3, #0
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	2300      	movs	r3, #0
 800d84e:	2201      	movs	r2, #1
 800d850:	f7fe fde2 	bl	800c418 <GpioInit>
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f993 107c 	ldrsb.w	r1, [r3, #124]	; 0x7c
 800d860:	2301      	movs	r3, #1
 800d862:	9301      	str	r3, [sp, #4]
 800d864:	2301      	movs	r3, #1
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	2300      	movs	r3, #0
 800d86a:	2201      	movs	r2, #1
 800d86c:	f7fe fdd4 	bl	800c418 <GpioInit>
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <SpiFormat>:

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	4608      	mov	r0, r1
 800d882:	4611      	mov	r1, r2
 800d884:	461a      	mov	r2, r3
 800d886:	4603      	mov	r3, r0
 800d888:	70fb      	strb	r3, [r7, #3]
 800d88a:	460b      	mov	r3, r1
 800d88c:	70bb      	strb	r3, [r7, #2]
 800d88e:	4613      	mov	r3, r2
 800d890:	707b      	strb	r3, [r7, #1]
    obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	609a      	str	r2, [r3, #8]
    if( bits == SPI_DATASIZE_8BIT )
 800d898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d103      	bne.n	800d8a8 <SpiFormat+0x30>
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	60da      	str	r2, [r3, #12]
 800d8a6:	e003      	b.n	800d8b0 <SpiFormat+0x38>
    }
    else
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8ae:	60da      	str	r2, [r3, #12]
    }
    obj->Spi.Init.CLKPolarity = cpol;
 800d8b0:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	611a      	str	r2, [r3, #16]
    obj->Spi.Init.CLKPhase = cpha;
 800d8b8:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	615a      	str	r2, [r3, #20]
    obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	621a      	str	r2, [r3, #32]
    obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	625a      	str	r2, [r3, #36]	; 0x24
    obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	629a      	str	r2, [r3, #40]	; 0x28
    obj->Spi.Init.CRCPolynomial = 7;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2207      	movs	r2, #7
 800d8d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if( slave == 0 )
 800d8d8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d104      	bne.n	800d8ea <SpiFormat+0x72>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d8e6:	605a      	str	r2, [r3, #4]
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
    }
}
 800d8e8:	e002      	b.n	800d8f0 <SpiFormat+0x78>
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	605a      	str	r2, [r3, #4]
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bc80      	pop	{r7}
 800d8f8:	4770      	bx	lr
	...

0800d8fc <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b087      	sub	sp, #28
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
    uint32_t divisor = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	617b      	str	r3, [r7, #20]
    uint32_t sysClkTmp = SystemCoreClock;
 800d90a:	4b1b      	ldr	r3, [pc, #108]	; (800d978 <SpiFrequency+0x7c>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	613b      	str	r3, [r7, #16]
    uint32_t baudRate;

    while( sysClkTmp > hz )
 800d910:	e008      	b.n	800d924 <SpiFrequency+0x28>
    {
        divisor++;
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	3301      	adds	r3, #1
 800d916:	617b      	str	r3, [r7, #20]
        sysClkTmp = ( sysClkTmp >> 1 );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	085b      	lsrs	r3, r3, #1
 800d91c:	613b      	str	r3, [r7, #16]

        if( divisor >= 7 )
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2b06      	cmp	r3, #6
 800d922:	d804      	bhi.n	800d92e <SpiFrequency+0x32>
    while( sysClkTmp > hz )
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d8f2      	bhi.n	800d912 <SpiFrequency+0x16>
 800d92c:	e000      	b.n	800d930 <SpiFrequency+0x34>
        {
            break;
 800d92e:	bf00      	nop
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f003 0304 	and.w	r3, r3, #4
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <SpiFrequency+0x42>
 800d93a:	2200      	movs	r2, #0
 800d93c:	e000      	b.n	800d940 <SpiFrequency+0x44>
 800d93e:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <SpiFrequency+0x52>
 800d94a:	2300      	movs	r3, #0
 800d94c:	e000      	b.n	800d950 <SpiFrequency+0x54>
 800d94e:	2310      	movs	r3, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d950:	4313      	orrs	r3, r2
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	f002 0201 	and.w	r2, r2, #1
 800d958:	2a00      	cmp	r2, #0
 800d95a:	d101      	bne.n	800d960 <SpiFrequency+0x64>
 800d95c:	2200      	movs	r2, #0
 800d95e:	e000      	b.n	800d962 <SpiFrequency+0x66>
 800d960:	2208      	movs	r2, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d962:	4313      	orrs	r3, r2
 800d964:	60fb      	str	r3, [r7, #12]

    obj->Spi.Init.BaudRatePrescaler = baudRate;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	61da      	str	r2, [r3, #28]
}
 800d96c:	bf00      	nop
 800d96e:	371c      	adds	r7, #28
 800d970:	46bd      	mov	sp, r7
 800d972:	bc80      	pop	{r7}
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	200000a0 	.word	0x200000a0

0800d97c <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( obj->Spi.Instance ) == NULL )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &obj->Spi );
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d99e:	601a      	str	r2, [r3, #0]

    BoardDisableIrq( );
 800d9a0:	f7fd fd2a 	bl	800b3f8 <BoardDisableIrq>

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_TXE ) == RESET );
 800d9a4:	bf00      	nop
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d1f8      	bne.n	800d9a6 <SpiInOut+0x2a>
    obj->Spi.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 800d9b4:	887a      	ldrh	r2, [r7, #2]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	b2d2      	uxtb	r2, r2
 800d9bc:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_RXNE ) == RESET );
 800d9be:	bf00      	nop
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	f003 0301 	and.w	r3, r3, #1
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d1f8      	bne.n	800d9c0 <SpiInOut+0x44>
    rxData = ( uint16_t ) obj->Spi.Instance->DR;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	73fb      	strb	r3, [r7, #15]

    BoardEnableIrq( );
 800d9d6:	f7fd fd1f 	bl	800b418 <BoardEnableIrq>

    return( rxData );
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
 800d9dc:	b29b      	uxth	r3, r3
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
	...

0800d9e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800d9ee:	4b14      	ldr	r3, [pc, #80]	; (800da40 <HAL_MspInit+0x58>)
 800d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f2:	4a13      	ldr	r2, [pc, #76]	; (800da40 <HAL_MspInit+0x58>)
 800d9f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9f8:	6253      	str	r3, [r2, #36]	; 0x24
 800d9fa:	4b11      	ldr	r3, [pc, #68]	; (800da40 <HAL_MspInit+0x58>)
 800d9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da02:	60fb      	str	r3, [r7, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da06:	4b0e      	ldr	r3, [pc, #56]	; (800da40 <HAL_MspInit+0x58>)
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	4a0d      	ldr	r2, [pc, #52]	; (800da40 <HAL_MspInit+0x58>)
 800da0c:	f043 0301 	orr.w	r3, r3, #1
 800da10:	6213      	str	r3, [r2, #32]
 800da12:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <HAL_MspInit+0x58>)
 800da14:	6a1b      	ldr	r3, [r3, #32]
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	60bb      	str	r3, [r7, #8]
 800da1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800da1e:	4b08      	ldr	r3, [pc, #32]	; (800da40 <HAL_MspInit+0x58>)
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	4a07      	ldr	r2, [pc, #28]	; (800da40 <HAL_MspInit+0x58>)
 800da24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da28:	6253      	str	r3, [r2, #36]	; 0x24
 800da2a:	4b05      	ldr	r3, [pc, #20]	; (800da40 <HAL_MspInit+0x58>)
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da32:	607b      	str	r3, [r7, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800da36:	bf00      	nop
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bc80      	pop	{r7}
 800da3e:	4770      	bx	lr
 800da40:	40023800 	.word	0x40023800

0800da44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08a      	sub	sp, #40	; 0x28
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da4c:	f107 0314 	add.w	r3, r7, #20
 800da50:	2200      	movs	r2, #0
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	605a      	str	r2, [r3, #4]
 800da56:	609a      	str	r2, [r3, #8]
 800da58:	60da      	str	r2, [r3, #12]
 800da5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a15      	ldr	r2, [pc, #84]	; (800dab8 <HAL_ADC_MspInit+0x74>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d123      	bne.n	800daae <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800da66:	4b15      	ldr	r3, [pc, #84]	; (800dabc <HAL_ADC_MspInit+0x78>)
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	4a14      	ldr	r2, [pc, #80]	; (800dabc <HAL_ADC_MspInit+0x78>)
 800da6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da70:	6213      	str	r3, [r2, #32]
 800da72:	4b12      	ldr	r3, [pc, #72]	; (800dabc <HAL_ADC_MspInit+0x78>)
 800da74:	6a1b      	ldr	r3, [r3, #32]
 800da76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da7a:	613b      	str	r3, [r7, #16]
 800da7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da7e:	4b0f      	ldr	r3, [pc, #60]	; (800dabc <HAL_ADC_MspInit+0x78>)
 800da80:	69db      	ldr	r3, [r3, #28]
 800da82:	4a0e      	ldr	r2, [pc, #56]	; (800dabc <HAL_ADC_MspInit+0x78>)
 800da84:	f043 0301 	orr.w	r3, r3, #1
 800da88:	61d3      	str	r3, [r2, #28]
 800da8a:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <HAL_ADC_MspInit+0x78>)
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	60fb      	str	r3, [r7, #12]
 800da94:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800da96:	2304      	movs	r3, #4
 800da98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800da9a:	2303      	movs	r3, #3
 800da9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800daa2:	f107 0314 	add.w	r3, r7, #20
 800daa6:	4619      	mov	r1, r3
 800daa8:	4805      	ldr	r0, [pc, #20]	; (800dac0 <HAL_ADC_MspInit+0x7c>)
 800daaa:	f7f4 fab3 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800daae:	bf00      	nop
 800dab0:	3728      	adds	r7, #40	; 0x28
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	40012400 	.word	0x40012400
 800dabc:	40023800 	.word	0x40023800
 800dac0:	40020000 	.word	0x40020000

0800dac4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a05      	ldr	r2, [pc, #20]	; (800dae8 <HAL_RTC_MspInit+0x24>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d102      	bne.n	800dadc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800dad6:	4b05      	ldr	r3, [pc, #20]	; (800daec <HAL_RTC_MspInit+0x28>)
 800dad8:	2201      	movs	r2, #1
 800dada:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bc80      	pop	{r7}
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	40002800 	.word	0x40002800
 800daec:	424706d8 	.word	0x424706d8

0800daf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08a      	sub	sp, #40	; 0x28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daf8:	f107 0314 	add.w	r3, r7, #20
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	605a      	str	r2, [r3, #4]
 800db02:	609a      	str	r2, [r3, #8]
 800db04:	60da      	str	r2, [r3, #12]
 800db06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a17      	ldr	r2, [pc, #92]	; (800db6c <HAL_SPI_MspInit+0x7c>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d127      	bne.n	800db62 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800db12:	4b17      	ldr	r3, [pc, #92]	; (800db70 <HAL_SPI_MspInit+0x80>)
 800db14:	6a1b      	ldr	r3, [r3, #32]
 800db16:	4a16      	ldr	r2, [pc, #88]	; (800db70 <HAL_SPI_MspInit+0x80>)
 800db18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800db1c:	6213      	str	r3, [r2, #32]
 800db1e:	4b14      	ldr	r3, [pc, #80]	; (800db70 <HAL_SPI_MspInit+0x80>)
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db26:	613b      	str	r3, [r7, #16]
 800db28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db2a:	4b11      	ldr	r3, [pc, #68]	; (800db70 <HAL_SPI_MspInit+0x80>)
 800db2c:	69db      	ldr	r3, [r3, #28]
 800db2e:	4a10      	ldr	r2, [pc, #64]	; (800db70 <HAL_SPI_MspInit+0x80>)
 800db30:	f043 0301 	orr.w	r3, r3, #1
 800db34:	61d3      	str	r3, [r2, #28]
 800db36:	4b0e      	ldr	r3, [pc, #56]	; (800db70 <HAL_SPI_MspInit+0x80>)
 800db38:	69db      	ldr	r3, [r3, #28]
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	60fb      	str	r3, [r7, #12]
 800db40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800db42:	23e0      	movs	r3, #224	; 0xe0
 800db44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db46:	2302      	movs	r3, #2
 800db48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db4e:	2303      	movs	r3, #3
 800db50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800db52:	2305      	movs	r3, #5
 800db54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db56:	f107 0314 	add.w	r3, r7, #20
 800db5a:	4619      	mov	r1, r3
 800db5c:	4805      	ldr	r0, [pc, #20]	; (800db74 <HAL_SPI_MspInit+0x84>)
 800db5e:	f7f4 fa59 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800db62:	bf00      	nop
 800db64:	3728      	adds	r7, #40	; 0x28
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	40013000 	.word	0x40013000
 800db70:	40023800 	.word	0x40023800
 800db74:	40020000 	.word	0x40020000

0800db78 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a08      	ldr	r2, [pc, #32]	; (800dba8 <HAL_SPI_MspDeInit+0x30>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d109      	bne.n	800db9e <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800db8a:	4b08      	ldr	r3, [pc, #32]	; (800dbac <HAL_SPI_MspDeInit+0x34>)
 800db8c:	6a1b      	ldr	r3, [r3, #32]
 800db8e:	4a07      	ldr	r2, [pc, #28]	; (800dbac <HAL_SPI_MspDeInit+0x34>)
 800db90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db94:	6213      	str	r3, [r2, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800db96:	21e0      	movs	r1, #224	; 0xe0
 800db98:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <HAL_SPI_MspDeInit+0x38>)
 800db9a:	f7f4 fbbb 	bl	8002314 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800db9e:	bf00      	nop
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	40013000 	.word	0x40013000
 800dbac:	40023800 	.word	0x40023800
 800dbb0:	40020000 	.word	0x40020000

0800dbb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b08a      	sub	sp, #40	; 0x28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbbc:	f107 0314 	add.w	r3, r7, #20
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	605a      	str	r2, [r3, #4]
 800dbc6:	609a      	str	r2, [r3, #8]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a41      	ldr	r2, [pc, #260]	; (800dcd8 <HAL_UART_MspInit+0x124>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d17c      	bne.n	800dcd0 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800dbd6:	4b41      	ldr	r3, [pc, #260]	; (800dcdc <HAL_UART_MspInit+0x128>)
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	4a40      	ldr	r2, [pc, #256]	; (800dcdc <HAL_UART_MspInit+0x128>)
 800dbdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dbe0:	6213      	str	r3, [r2, #32]
 800dbe2:	4b3e      	ldr	r3, [pc, #248]	; (800dcdc <HAL_UART_MspInit+0x128>)
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbea:	613b      	str	r3, [r7, #16]
 800dbec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbee:	4b3b      	ldr	r3, [pc, #236]	; (800dcdc <HAL_UART_MspInit+0x128>)
 800dbf0:	69db      	ldr	r3, [r3, #28]
 800dbf2:	4a3a      	ldr	r2, [pc, #232]	; (800dcdc <HAL_UART_MspInit+0x128>)
 800dbf4:	f043 0301 	orr.w	r3, r3, #1
 800dbf8:	61d3      	str	r3, [r2, #28]
 800dbfa:	4b38      	ldr	r3, [pc, #224]	; (800dcdc <HAL_UART_MspInit+0x128>)
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	60fb      	str	r3, [r7, #12]
 800dc04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800dc06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800dc0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc14:	2303      	movs	r3, #3
 800dc16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dc18:	2307      	movs	r3, #7
 800dc1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc1c:	f107 0314 	add.w	r3, r7, #20
 800dc20:	4619      	mov	r1, r3
 800dc22:	482f      	ldr	r0, [pc, #188]	; (800dce0 <HAL_UART_MspInit+0x12c>)
 800dc24:	f7f4 f9f6 	bl	8002014 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800dc28:	4b2e      	ldr	r3, [pc, #184]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc2a:	4a2f      	ldr	r2, [pc, #188]	; (800dce8 <HAL_UART_MspInit+0x134>)
 800dc2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dc2e:	4b2d      	ldr	r3, [pc, #180]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc30:	2210      	movs	r2, #16
 800dc32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dc34:	4b2b      	ldr	r3, [pc, #172]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800dc3a:	4b2a      	ldr	r3, [pc, #168]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc3c:	2280      	movs	r2, #128	; 0x80
 800dc3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dc40:	4b28      	ldr	r3, [pc, #160]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dc46:	4b27      	ldr	r3, [pc, #156]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800dc4c:	4b25      	ldr	r3, [pc, #148]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800dc52:	4b24      	ldr	r3, [pc, #144]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800dc58:	4822      	ldr	r0, [pc, #136]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc5a:	f7f3 ffab 	bl	8001bb4 <HAL_DMA_Init>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800dc64:	f7fe ff84 	bl	800cb70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4a1e      	ldr	r2, [pc, #120]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc6c:	635a      	str	r2, [r3, #52]	; 0x34
 800dc6e:	4a1d      	ldr	r2, [pc, #116]	; (800dce4 <HAL_UART_MspInit+0x130>)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800dc74:	4b1d      	ldr	r3, [pc, #116]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc76:	4a1e      	ldr	r2, [pc, #120]	; (800dcf0 <HAL_UART_MspInit+0x13c>)
 800dc78:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800dc7a:	4b1c      	ldr	r3, [pc, #112]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dc80:	4b1a      	ldr	r3, [pc, #104]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800dc86:	4b19      	ldr	r3, [pc, #100]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc88:	2280      	movs	r2, #128	; 0x80
 800dc8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800dc8c:	4b17      	ldr	r3, [pc, #92]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800dc92:	4b16      	ldr	r3, [pc, #88]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800dc98:	4b14      	ldr	r3, [pc, #80]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800dca4:	4811      	ldr	r0, [pc, #68]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dca6:	f7f3 ff85 	bl	8001bb4 <HAL_DMA_Init>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d001      	beq.n	800dcb4 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 800dcb0:	f7fe ff5e 	bl	800cb70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	4a0d      	ldr	r2, [pc, #52]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcba:	4a0c      	ldr	r2, [pc, #48]	; (800dcec <HAL_UART_MspInit+0x138>)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	2025      	movs	r0, #37	; 0x25
 800dcc6:	f7f3 ff16 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800dcca:	2025      	movs	r0, #37	; 0x25
 800dccc:	f7f3 ff2f 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800dcd0:	bf00      	nop
 800dcd2:	3728      	adds	r7, #40	; 0x28
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	40013800 	.word	0x40013800
 800dcdc:	40023800 	.word	0x40023800
 800dce0:	40020000 	.word	0x40020000
 800dce4:	20000ffc 	.word	0x20000ffc
 800dce8:	40026044 	.word	0x40026044
 800dcec:	20001040 	.word	0x20001040
 800dcf0:	40026058 	.word	0x40026058

0800dcf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800dcf8:	bf00      	nop
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bc80      	pop	{r7}
 800dcfe:	4770      	bx	lr

0800dd00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dd04:	e7fe      	b.n	800dd04 <HardFault_Handler+0x4>

0800dd06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dd06:	b480      	push	{r7}
 800dd08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dd0a:	e7fe      	b.n	800dd0a <MemManage_Handler+0x4>

0800dd0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dd10:	e7fe      	b.n	800dd10 <BusFault_Handler+0x4>

0800dd12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dd12:	b480      	push	{r7}
 800dd14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dd16:	e7fe      	b.n	800dd16 <UsageFault_Handler+0x4>

0800dd18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800dd1c:	bf00      	nop
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bc80      	pop	{r7}
 800dd22:	4770      	bx	lr

0800dd24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dd24:	b480      	push	{r7}
 800dd26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dd28:	bf00      	nop
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bc80      	pop	{r7}
 800dd2e:	4770      	bx	lr

0800dd30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dd30:	b480      	push	{r7}
 800dd32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dd34:	bf00      	nop
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bc80      	pop	{r7}
 800dd3a:	4770      	bx	lr

0800dd3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dd40:	f7f3 fae8 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler( );
 800dd44:	f7f3 ff2a 	bl	8001b9c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800dd48:	bf00      	nop
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800dd50:	4802      	ldr	r0, [pc, #8]	; (800dd5c <DMA1_Channel4_IRQHandler+0x10>)
 800dd52:	f7f4 f881 	bl	8001e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800dd56:	bf00      	nop
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20000ffc 	.word	0x20000ffc

0800dd60 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800dd64:	4802      	ldr	r0, [pc, #8]	; (800dd70 <DMA1_Channel5_IRQHandler+0x10>)
 800dd66:	f7f4 f877 	bl	8001e58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800dd6a:	bf00      	nop
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20001040 	.word	0x20001040

0800dd74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800dd78:	4802      	ldr	r0, [pc, #8]	; (800dd84 <USART1_IRQHandler+0x10>)
 800dd7a:	f7f6 fc99 	bl	80046b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800dd7e:	bf00      	nop
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20001084 	.word	0x20001084

0800dd88 <SX1276IoInit>:
  SX1276SetPublicNetwork,
  SX1276GetWakeupTime
};

void SX1276IoInit( void )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af02      	add	r7, sp, #8
//	GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
//	GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
  
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800dd8e:	2301      	movs	r3, #1
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	2301      	movs	r3, #1
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	2300      	movs	r3, #0
 800dd98:	2201      	movs	r2, #1
 800dd9a:	2104      	movs	r1, #4
 800dd9c:	480c      	ldr	r0, [pc, #48]	; (800ddd0 <SX1276IoInit+0x48>)
 800dd9e:	f7fe fb3b 	bl	800c418 <GpioInit>

	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800dda2:	2300      	movs	r3, #0
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	2301      	movs	r3, #1
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	2200      	movs	r2, #0
 800ddae:	211b      	movs	r1, #27
 800ddb0:	4808      	ldr	r0, [pc, #32]	; (800ddd4 <SX1276IoInit+0x4c>)
 800ddb2:	f7fe fb31 	bl	800c418 <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	2301      	movs	r3, #1
 800ddbc:	9300      	str	r3, [sp, #0]
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	211a      	movs	r1, #26
 800ddc4:	4804      	ldr	r0, [pc, #16]	; (800ddd8 <SX1276IoInit+0x50>)
 800ddc6:	f7fe fb27 	bl	800c418 <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800ddca:	bf00      	nop
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	200013c0 	.word	0x200013c0
 800ddd4:	200012fc 	.word	0x200012fc
 800ddd8:	20001308 	.word	0x20001308

0800dddc <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2203      	movs	r2, #3
 800ddea:	2101      	movs	r1, #1
 800ddec:	4807      	ldr	r0, [pc, #28]	; (800de0c <SX1276IoIrqInit+0x30>)
 800ddee:	f7fe fb37 	bl	800c460 <GpioSetInterrupt>
	GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2203      	movs	r2, #3
 800ddfa:	2101      	movs	r1, #1
 800ddfc:	4804      	ldr	r0, [pc, #16]	; (800de10 <SX1276IoIrqInit+0x34>)
 800ddfe:	f7fe fb2f 	bl	800c460 <GpioSetInterrupt>
//	GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
//	GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
//	GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
//	GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
}
 800de02:	bf00      	nop
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	200012fc 	.word	0x200012fc
 800de10:	20001308 	.word	0x20001308

0800de14 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af02      	add	r7, sp, #8
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800de1a:	2301      	movs	r3, #1
 800de1c:	9301      	str	r3, [sp, #4]
 800de1e:	2300      	movs	r3, #0
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	2300      	movs	r3, #0
 800de24:	2201      	movs	r2, #1
 800de26:	2104      	movs	r1, #4
 800de28:	480c      	ldr	r0, [pc, #48]	; (800de5c <SX1276IoDeInit+0x48>)
 800de2a:	f7fe faf5 	bl	800c418 <GpioInit>
	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800de2e:	2300      	movs	r3, #0
 800de30:	9301      	str	r3, [sp, #4]
 800de32:	2300      	movs	r3, #0
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	2300      	movs	r3, #0
 800de38:	2200      	movs	r2, #0
 800de3a:	211b      	movs	r1, #27
 800de3c:	4808      	ldr	r0, [pc, #32]	; (800de60 <SX1276IoDeInit+0x4c>)
 800de3e:	f7fe faeb 	bl	800c418 <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800de42:	2300      	movs	r3, #0
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	2300      	movs	r3, #0
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	2300      	movs	r3, #0
 800de4c:	2200      	movs	r2, #0
 800de4e:	211a      	movs	r1, #26
 800de50:	4804      	ldr	r0, [pc, #16]	; (800de64 <SX1276IoDeInit+0x50>)
 800de52:	f7fe fae1 	bl	800c418 <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 800de56:	bf00      	nop
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	200013c0 	.word	0x200013c0
 800de60:	200012fc 	.word	0x200012fc
 800de64:	20001308 	.word	0x20001308

0800de68 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 800de68:	b590      	push	{r4, r7, lr}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	71fb      	strb	r3, [r7, #7]
  uint8_t paConfig = 0;
 800de72:	2300      	movs	r3, #0
 800de74:	73fb      	strb	r3, [r7, #15]
  uint8_t paDac = 0;
 800de76:	2300      	movs	r3, #0
 800de78:	73bb      	strb	r3, [r7, #14]
  
  paConfig = SX1276Read( REG_PACONFIG );
 800de7a:	2009      	movs	r0, #9
 800de7c:	f001 fcba 	bl	800f7f4 <SX1276Read>
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]
  paDac = SX1276Read( REG_PADAC );
 800de84:	204d      	movs	r0, #77	; 0x4d
 800de86:	f001 fcb5 	bl	800f7f4 <SX1276Read>
 800de8a:	4603      	mov	r3, r0
 800de8c:	73bb      	strb	r3, [r7, #14]
  
  paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800de8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de96:	b25c      	sxtb	r4, r3
 800de98:	4b45      	ldr	r3, [pc, #276]	; (800dfb0 <SX1276SetRfTxPower+0x148>)
 800de9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 f888 	bl	800dfb4 <SX1276GetPaSelect>
 800dea4:	4603      	mov	r3, r0
 800dea6:	b25b      	sxtb	r3, r3
 800dea8:	4323      	orrs	r3, r4
 800deaa:	b25b      	sxtb	r3, r3
 800deac:	73fb      	strb	r3, [r7, #15]
  paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800deae:	7bfb      	ldrb	r3, [r7, #15]
 800deb0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800deb4:	73fb      	strb	r3, [r7, #15]
  
  if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800deb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deba:	2b00      	cmp	r3, #0
 800debc:	da4e      	bge.n	800df5c <SX1276SetRfTxPower+0xf4>
  {
    if( power > 17 )
 800debe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dec2:	2b11      	cmp	r3, #17
 800dec4:	dd04      	ble.n	800ded0 <SX1276SetRfTxPower+0x68>
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	f043 0307 	orr.w	r3, r3, #7
 800decc:	73bb      	strb	r3, [r7, #14]
 800dece:	e008      	b.n	800dee2 <SX1276SetRfTxPower+0x7a>
    }
    else
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800ded0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ded4:	f023 0307 	bic.w	r3, r3, #7
 800ded8:	b25b      	sxtb	r3, r3
 800deda:	f043 0304 	orr.w	r3, r3, #4
 800dede:	b25b      	sxtb	r3, r3
 800dee0:	73bb      	strb	r3, [r7, #14]
    }
    if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800dee2:	7bbb      	ldrb	r3, [r7, #14]
 800dee4:	f003 0307 	and.w	r3, r3, #7
 800dee8:	2b07      	cmp	r3, #7
 800deea:	d11b      	bne.n	800df24 <SX1276SetRfTxPower+0xbc>
    {
      if( power < 5 )
 800deec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800def0:	2b04      	cmp	r3, #4
 800def2:	dc01      	bgt.n	800def8 <SX1276SetRfTxPower+0x90>
      {
        power = 5;
 800def4:	2305      	movs	r3, #5
 800def6:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 20 )
 800def8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800defc:	2b14      	cmp	r3, #20
 800defe:	dd01      	ble.n	800df04 <SX1276SetRfTxPower+0x9c>
      {
        power = 20;
 800df00:	2314      	movs	r3, #20
 800df02:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800df04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df08:	f023 030f 	bic.w	r3, r3, #15
 800df0c:	b25a      	sxtb	r2, r3
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	3b05      	subs	r3, #5
 800df12:	b2db      	uxtb	r3, r3
 800df14:	b25b      	sxtb	r3, r3
 800df16:	f003 030f 	and.w	r3, r3, #15
 800df1a:	b25b      	sxtb	r3, r3
 800df1c:	4313      	orrs	r3, r2
 800df1e:	b25b      	sxtb	r3, r3
 800df20:	73fb      	strb	r3, [r7, #15]
 800df22:	e037      	b.n	800df94 <SX1276SetRfTxPower+0x12c>
    }
    else
    {
      if( power < 2 )
 800df24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	dc01      	bgt.n	800df30 <SX1276SetRfTxPower+0xc8>
      {
        power = 2;
 800df2c:	2302      	movs	r3, #2
 800df2e:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 17 )
 800df30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df34:	2b11      	cmp	r3, #17
 800df36:	dd01      	ble.n	800df3c <SX1276SetRfTxPower+0xd4>
      {
        power = 17;
 800df38:	2311      	movs	r3, #17
 800df3a:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800df3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df40:	f023 030f 	bic.w	r3, r3, #15
 800df44:	b25a      	sxtb	r2, r3
 800df46:	79fb      	ldrb	r3, [r7, #7]
 800df48:	3b02      	subs	r3, #2
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	b25b      	sxtb	r3, r3
 800df4e:	f003 030f 	and.w	r3, r3, #15
 800df52:	b25b      	sxtb	r3, r3
 800df54:	4313      	orrs	r3, r2
 800df56:	b25b      	sxtb	r3, r3
 800df58:	73fb      	strb	r3, [r7, #15]
 800df5a:	e01b      	b.n	800df94 <SX1276SetRfTxPower+0x12c>
    }
  }
  else
  {
    if( power < -1 )
 800df5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df64:	da01      	bge.n	800df6a <SX1276SetRfTxPower+0x102>
    {
      power = -1;
 800df66:	23ff      	movs	r3, #255	; 0xff
 800df68:	71fb      	strb	r3, [r7, #7]
    }
    if( power > 14 )
 800df6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df6e:	2b0e      	cmp	r3, #14
 800df70:	dd01      	ble.n	800df76 <SX1276SetRfTxPower+0x10e>
    {
      power = 14;
 800df72:	230e      	movs	r3, #14
 800df74:	71fb      	strb	r3, [r7, #7]
    }
    paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800df76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df7a:	f023 030f 	bic.w	r3, r3, #15
 800df7e:	b25a      	sxtb	r2, r3
 800df80:	79fb      	ldrb	r3, [r7, #7]
 800df82:	3301      	adds	r3, #1
 800df84:	b2db      	uxtb	r3, r3
 800df86:	b25b      	sxtb	r3, r3
 800df88:	f003 030f 	and.w	r3, r3, #15
 800df8c:	b25b      	sxtb	r3, r3
 800df8e:	4313      	orrs	r3, r2
 800df90:	b25b      	sxtb	r3, r3
 800df92:	73fb      	strb	r3, [r7, #15]
  }
  SX1276Write( REG_PACONFIG, paConfig );
 800df94:	7bfb      	ldrb	r3, [r7, #15]
 800df96:	4619      	mov	r1, r3
 800df98:	2009      	movs	r0, #9
 800df9a:	f001 fc19 	bl	800f7d0 <SX1276Write>
  SX1276Write( REG_PADAC, paDac );
 800df9e:	7bbb      	ldrb	r3, [r7, #14]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	204d      	movs	r0, #77	; 0x4d
 800dfa4:	f001 fc14 	bl	800f7d0 <SX1276Write>
}
 800dfa8:	bf00      	nop
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd90      	pop	{r4, r7, pc}
 800dfb0:	200012f0 	.word	0x200012f0

0800dfb4 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]

    return RF_PACONFIG_PASELECT_PABOOST;
 800dfbc:	2380      	movs	r3, #128	; 0x80

}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	370c      	adds	r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bc80      	pop	{r7}
 800dfc6:	4770      	bx	lr

0800dfc8 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	71fb      	strb	r3, [r7, #7]
  if( RadioIsActive != status )
 800dfd2:	4b0b      	ldr	r3, [pc, #44]	; (800e000 <SX1276SetAntSwLowPower+0x38>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	79fa      	ldrb	r2, [r7, #7]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d00d      	beq.n	800dff8 <SX1276SetAntSwLowPower+0x30>
  {
    RadioIsActive = status;
 800dfdc:	4a08      	ldr	r2, [pc, #32]	; (800e000 <SX1276SetAntSwLowPower+0x38>)
 800dfde:	79fb      	ldrb	r3, [r7, #7]
 800dfe0:	7013      	strb	r3, [r2, #0]
    
    if( status == false )
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	f083 0301 	eor.w	r3, r3, #1
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d002      	beq.n	800dff4 <SX1276SetAntSwLowPower+0x2c>
    {
      SX1276AntSwInit( );
 800dfee:	f000 f809 	bl	800e004 <SX1276AntSwInit>
    else
    {
      SX1276AntSwDeInit( );
    }
  }
}
 800dff2:	e001      	b.n	800dff8 <SX1276SetAntSwLowPower+0x30>
      SX1276AntSwDeInit( );
 800dff4:	f000 f80c 	bl	800e010 <SX1276AntSwDeInit>
}
 800dff8:	bf00      	nop
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	200007a8 	.word	0x200007a8

0800e004 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 800e004:	b480      	push	{r7}
 800e006:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800e008:	bf00      	nop
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bc80      	pop	{r7}
 800e00e:	4770      	bx	lr

0800e010 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 800e010:	b480      	push	{r7}
 800e012:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); 
}
 800e014:	bf00      	nop
 800e016:	46bd      	mov	sp, r7
 800e018:	bc80      	pop	{r7}
 800e01a:	4770      	bx	lr

0800e01c <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	71fb      	strb	r3, [r7, #7]
  switch( opMode )
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	2b03      	cmp	r3, #3
  case RFLR_OPMODE_RECEIVER_SINGLE:
  case RFLR_OPMODE_CAD:
  default:
//    GpioWrite( &rftrx1, 0 );
//    GpioWrite( &rftrx2, 1 );
    break;
 800e02a:	bf00      	nop
  }
}
 800e02c:	bf00      	nop
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	bc80      	pop	{r7}
 800e034:	4770      	bx	lr

0800e036 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800e036:	b480      	push	{r7}
 800e038:	b083      	sub	sp, #12
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 800e03e:	2301      	movs	r3, #1
}
 800e040:	4618      	mov	r0, r3
 800e042:	370c      	adds	r7, #12
 800e044:	46bd      	mov	sp, r7
 800e046:	bc80      	pop	{r7}
 800e048:	4770      	bx	lr
	...

0800e04c <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 800e054:	4a24      	ldr	r2, [pc, #144]	; (800e0e8 <SX1276Init+0x9c>)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800e05a:	4924      	ldr	r1, [pc, #144]	; (800e0ec <SX1276Init+0xa0>)
 800e05c:	4824      	ldr	r0, [pc, #144]	; (800e0f0 <SX1276Init+0xa4>)
 800e05e:	f002 f9cd 	bl	80103fc <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800e062:	4922      	ldr	r1, [pc, #136]	; (800e0ec <SX1276Init+0xa0>)
 800e064:	4823      	ldr	r0, [pc, #140]	; (800e0f4 <SX1276Init+0xa8>)
 800e066:	f002 f9c9 	bl	80103fc <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800e06a:	4920      	ldr	r1, [pc, #128]	; (800e0ec <SX1276Init+0xa0>)
 800e06c:	4822      	ldr	r0, [pc, #136]	; (800e0f8 <SX1276Init+0xac>)
 800e06e:	f002 f9c5 	bl	80103fc <TimerInit>

    SX1276Reset( );
 800e072:	f001 fb0d 	bl	800f690 <SX1276Reset>

    RxChainCalibration( );
 800e076:	f000 f8e3 	bl	800e240 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e07a:	2000      	movs	r0, #0
 800e07c:	f001 fb2a 	bl	800f6d4 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800e080:	481e      	ldr	r0, [pc, #120]	; (800e0fc <SX1276Init+0xb0>)
 800e082:	f7ff feab 	bl	800dddc <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e086:	2300      	movs	r3, #0
 800e088:	73fb      	strb	r3, [r7, #15]
 800e08a:	e01f      	b.n	800e0cc <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800e08c:	7bfa      	ldrb	r2, [r7, #15]
 800e08e:	491c      	ldr	r1, [pc, #112]	; (800e100 <SX1276Init+0xb4>)
 800e090:	4613      	mov	r3, r2
 800e092:	005b      	lsls	r3, r3, #1
 800e094:	4413      	add	r3, r2
 800e096:	440b      	add	r3, r1
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f001 fb42 	bl	800f724 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800e0a0:	7bfa      	ldrb	r2, [r7, #15]
 800e0a2:	4917      	ldr	r1, [pc, #92]	; (800e100 <SX1276Init+0xb4>)
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	4413      	add	r3, r2
 800e0aa:	440b      	add	r3, r1
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	7818      	ldrb	r0, [r3, #0]
 800e0b0:	7bfa      	ldrb	r2, [r7, #15]
 800e0b2:	4913      	ldr	r1, [pc, #76]	; (800e100 <SX1276Init+0xb4>)
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	4413      	add	r3, r2
 800e0ba:	440b      	add	r3, r1
 800e0bc:	3302      	adds	r3, #2
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f001 fb85 	bl	800f7d0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800e0c6:	7bfb      	ldrb	r3, [r7, #15]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	73fb      	strb	r3, [r7, #15]
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
 800e0ce:	2b0f      	cmp	r3, #15
 800e0d0:	d9dc      	bls.n	800e08c <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f001 fb26 	bl	800f724 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	; (800e104 <SX1276Init+0xb8>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800e0e0:	bf00      	nop
 800e0e2:	3710      	adds	r7, #16
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	200007ac 	.word	0x200007ac
 800e0ec:	0800f9d5 	.word	0x0800f9d5
 800e0f0:	200012c8 	.word	0x200012c8
 800e0f4:	20001430 	.word	0x20001430
 800e0f8:	200012dc 	.word	0x200012dc
 800e0fc:	20000088 	.word	0x20000088
 800e100:	08013134 	.word	0x08013134
 800e104:	200012f0 	.word	0x200012f0

0800e108 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800e108:	b480      	push	{r7}
 800e10a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800e10c:	4b03      	ldr	r3, [pc, #12]	; (800e11c <SX1276GetStatus+0x14>)
 800e10e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
}
 800e112:	4618      	mov	r0, r3
 800e114:	46bd      	mov	sp, r7
 800e116:	bc80      	pop	{r7}
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	200012f0 	.word	0x200012f0

0800e120 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 800e128:	4a17      	ldr	r2, [pc, #92]	; (800e188 <SX1276SetChannel+0x68>)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7f2 f967 	bl	8000404 <__aeabi_ui2d>
 800e136:	a312      	add	r3, pc, #72	; (adr r3, 800e180 <SX1276SetChannel+0x60>)
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	f7f2 fb06 	bl	800074c <__aeabi_ddiv>
 800e140:	4602      	mov	r2, r0
 800e142:	460b      	mov	r3, r1
 800e144:	4610      	mov	r0, r2
 800e146:	4619      	mov	r1, r3
 800e148:	f7f2 fc98 	bl	8000a7c <__aeabi_d2uiz>
 800e14c:	4603      	mov	r3, r0
 800e14e:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	0c1b      	lsrs	r3, r3, #16
 800e154:	b2db      	uxtb	r3, r3
 800e156:	4619      	mov	r1, r3
 800e158:	2006      	movs	r0, #6
 800e15a:	f001 fb39 	bl	800f7d0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	0a1b      	lsrs	r3, r3, #8
 800e162:	b2db      	uxtb	r3, r3
 800e164:	4619      	mov	r1, r3
 800e166:	2007      	movs	r0, #7
 800e168:	f001 fb32 	bl	800f7d0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	4619      	mov	r1, r3
 800e172:	2008      	movs	r0, #8
 800e174:	f001 fb2c 	bl	800f7d0 <SX1276Write>
}
 800e178:	bf00      	nop
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	00000000 	.word	0x00000000
 800e184:	404e8480 	.word	0x404e8480
 800e188:	200012f0 	.word	0x200012f0

0800e18c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	4603      	mov	r3, r0
 800e194:	6039      	str	r1, [r7, #0]
 800e196:	71fb      	strb	r3, [r7, #7]
 800e198:	4613      	mov	r3, r2
 800e19a:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 800e1a0:	79fb      	ldrb	r3, [r7, #7]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f001 fabe 	bl	800f724 <SX1276SetModem>

    SX1276SetChannel( freq );
 800e1a8:	6838      	ldr	r0, [r7, #0]
 800e1aa:	f7ff ffb9 	bl	800e120 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800e1ae:	2005      	movs	r0, #5
 800e1b0:	f001 fa90 	bl	800f6d4 <SX1276SetOpMode>

    DelayMs( 1 );
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	f7fd fe3e 	bl	800be36 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f001 fa29 	bl	800f614 <SX1276ReadRssi>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800e1c6:	f000 ff07 	bl	800efd8 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800e1ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e1ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	dd01      	ble.n	800e1da <SX1276IsChannelFree+0x4e>
    {
        return false;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	e000      	b.n	800e1dc <SX1276IsChannelFree+0x50>
    }
    return true;
 800e1da:	2301      	movs	r3, #1
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800e1ee:	2001      	movs	r0, #1
 800e1f0:	f001 fa98 	bl	800f724 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800e1f4:	21ff      	movs	r1, #255	; 0xff
 800e1f6:	2011      	movs	r0, #17
 800e1f8:	f001 faea 	bl	800f7d0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800e1fc:	2005      	movs	r0, #5
 800e1fe:	f001 fa69 	bl	800f6d4 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800e202:	2300      	movs	r3, #0
 800e204:	71fb      	strb	r3, [r7, #7]
 800e206:	e011      	b.n	800e22c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 800e208:	2001      	movs	r0, #1
 800e20a:	f7fd fe14 	bl	800be36 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800e20e:	202c      	movs	r0, #44	; 0x2c
 800e210:	f001 faf0 	bl	800f7f4 <SX1276Read>
 800e214:	4603      	mov	r3, r0
 800e216:	f003 0201 	and.w	r2, r3, #1
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	fa02 f303 	lsl.w	r3, r2, r3
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	4313      	orrs	r3, r2
 800e224:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	3301      	adds	r3, #1
 800e22a:	71fb      	strb	r3, [r7, #7]
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	2b1f      	cmp	r3, #31
 800e230:	d9ea      	bls.n	800e208 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800e232:	f000 fed1 	bl	800efd8 <SX1276SetSleep>

    return rnd;
 800e236:	683b      	ldr	r3, [r7, #0]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 800e240:	b590      	push	{r4, r7, lr}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800e246:	2009      	movs	r0, #9
 800e248:	f001 fad4 	bl	800f7f4 <SX1276Read>
 800e24c:	4603      	mov	r3, r0
 800e24e:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e250:	2006      	movs	r0, #6
 800e252:	f001 facf 	bl	800f7f4 <SX1276Read>
 800e256:	4603      	mov	r3, r0
 800e258:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e25a:	2007      	movs	r0, #7
 800e25c:	f001 faca 	bl	800f7f4 <SX1276Read>
 800e260:	4603      	mov	r3, r0
 800e262:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e264:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800e266:	2008      	movs	r0, #8
 800e268:	f001 fac4 	bl	800f7f4 <SX1276Read>
 800e26c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800e26e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e270:	4618      	mov	r0, r3
 800e272:	f7f2 f8c7 	bl	8000404 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800e276:	a324      	add	r3, pc, #144	; (adr r3, 800e308 <RxChainCalibration+0xc8>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f93c 	bl	80004f8 <__aeabi_dmul>
 800e280:	4602      	mov	r2, r0
 800e282:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800e284:	4610      	mov	r0, r2
 800e286:	4619      	mov	r1, r3
 800e288:	f7f2 fbf8 	bl	8000a7c <__aeabi_d2uiz>
 800e28c:	4603      	mov	r3, r0
 800e28e:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800e290:	2100      	movs	r1, #0
 800e292:	2009      	movs	r0, #9
 800e294:	f001 fa9c 	bl	800f7d0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e298:	203b      	movs	r0, #59	; 0x3b
 800e29a:	f001 faab 	bl	800f7f4 <SX1276Read>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	203b      	movs	r0, #59	; 0x3b
 800e2aa:	f001 fa91 	bl	800f7d0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e2ae:	bf00      	nop
 800e2b0:	203b      	movs	r0, #59	; 0x3b
 800e2b2:	f001 fa9f 	bl	800f7f4 <SX1276Read>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f003 0320 	and.w	r3, r3, #32
 800e2bc:	2b20      	cmp	r3, #32
 800e2be:	d0f7      	beq.n	800e2b0 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800e2c0:	4813      	ldr	r0, [pc, #76]	; (800e310 <RxChainCalibration+0xd0>)
 800e2c2:	f7ff ff2d 	bl	800e120 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800e2c6:	203b      	movs	r0, #59	; 0x3b
 800e2c8:	f001 fa94 	bl	800f7f4 <SX1276Read>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	203b      	movs	r0, #59	; 0x3b
 800e2d8:	f001 fa7a 	bl	800f7d0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800e2dc:	bf00      	nop
 800e2de:	203b      	movs	r0, #59	; 0x3b
 800e2e0:	f001 fa88 	bl	800f7f4 <SX1276Read>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	f003 0320 	and.w	r3, r3, #32
 800e2ea:	2b20      	cmp	r3, #32
 800e2ec:	d0f7      	beq.n	800e2de <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	2009      	movs	r0, #9
 800e2f4:	f001 fa6c 	bl	800f7d0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800e2f8:	6838      	ldr	r0, [r7, #0]
 800e2fa:	f7ff ff11 	bl	800e120 <SX1276SetChannel>
}
 800e2fe:	bf00      	nop
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	bd90      	pop	{r4, r7, pc}
 800e306:	bf00      	nop
 800e308:	00000000 	.word	0x00000000
 800e30c:	404e8480 	.word	0x404e8480
 800e310:	33bca100 	.word	0x33bca100

0800e314 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800e31c:	2300      	movs	r3, #0
 800e31e:	73fb      	strb	r3, [r7, #15]
 800e320:	e017      	b.n	800e352 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800e322:	7bfb      	ldrb	r3, [r7, #15]
 800e324:	4a0f      	ldr	r2, [pc, #60]	; (800e364 <GetFskBandwidthRegValue+0x50>)
 800e326:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d30d      	bcc.n	800e34c <GetFskBandwidthRegValue+0x38>
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	3301      	adds	r3, #1
 800e334:	4a0b      	ldr	r2, [pc, #44]	; (800e364 <GetFskBandwidthRegValue+0x50>)
 800e336:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d205      	bcs.n	800e34c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800e340:	7bfb      	ldrb	r3, [r7, #15]
 800e342:	4a08      	ldr	r2, [pc, #32]	; (800e364 <GetFskBandwidthRegValue+0x50>)
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	4413      	add	r3, r2
 800e348:	791b      	ldrb	r3, [r3, #4]
 800e34a:	e006      	b.n	800e35a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	3301      	adds	r3, #1
 800e350:	73fb      	strb	r3, [r7, #15]
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	2b14      	cmp	r3, #20
 800e356:	d9e4      	bls.n	800e322 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800e358:	e7fe      	b.n	800e358 <GetFskBandwidthRegValue+0x44>
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	bc80      	pop	{r7}
 800e362:	4770      	bx	lr
 800e364:	08013164 	.word	0x08013164

0800e368 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800e368:	b5b0      	push	{r4, r5, r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60b9      	str	r1, [r7, #8]
 800e370:	607a      	str	r2, [r7, #4]
 800e372:	461a      	mov	r2, r3
 800e374:	4603      	mov	r3, r0
 800e376:	73fb      	strb	r3, [r7, #15]
 800e378:	4613      	mov	r3, r2
 800e37a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
 800e37e:	4618      	mov	r0, r3
 800e380:	f001 f9d0 	bl	800f724 <SX1276SetModem>

    switch( modem )
 800e384:	7bfb      	ldrb	r3, [r7, #15]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d003      	beq.n	800e392 <SX1276SetRxConfig+0x2a>
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	f000 80d2 	beq.w	800e534 <SX1276SetRxConfig+0x1cc>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e390:	e206      	b.n	800e7a0 <SX1276SetRxConfig+0x438>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e392:	4a97      	ldr	r2, [pc, #604]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800e39a:	4a95      	ldr	r2, [pc, #596]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800e3a2:	4a93      	ldr	r2, [pc, #588]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3a4:	6a3b      	ldr	r3, [r7, #32]
 800e3a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e3aa:	4a91      	ldr	r2, [pc, #580]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e3b0:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800e3b4:	4a8e      	ldr	r2, [pc, #568]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e3ba:	f882 30fb 	strb.w	r3, [r2, #251]	; 0xfb
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e3be:	4a8c      	ldr	r2, [pc, #560]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e3c4:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e3c8:	4a89      	ldr	r2, [pc, #548]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e3ce:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800e3d2:	4a87      	ldr	r2, [pc, #540]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e3d8:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e3dc:	4a84      	ldr	r2, [pc, #528]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e3de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3e0:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.RxSingleTimeout = symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1e3;
 800e3e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f2 f81c 	bl	8000424 <__aeabi_i2d>
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	460d      	mov	r5, r1
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7f2 f807 	bl	8000404 <__aeabi_ui2d>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	f04f 0000 	mov.w	r0, #0
 800e3fe:	497d      	ldr	r1, [pc, #500]	; (800e5f4 <SX1276SetRxConfig+0x28c>)
 800e400:	f7f2 f9a4 	bl	800074c <__aeabi_ddiv>
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4610      	mov	r0, r2
 800e40a:	4619      	mov	r1, r3
 800e40c:	f04f 0200 	mov.w	r2, #0
 800e410:	4b79      	ldr	r3, [pc, #484]	; (800e5f8 <SX1276SetRxConfig+0x290>)
 800e412:	f7f2 f871 	bl	80004f8 <__aeabi_dmul>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4620      	mov	r0, r4
 800e41c:	4629      	mov	r1, r5
 800e41e:	f7f2 f86b 	bl	80004f8 <__aeabi_dmul>
 800e422:	4602      	mov	r2, r0
 800e424:	460b      	mov	r3, r1
 800e426:	4610      	mov	r0, r2
 800e428:	4619      	mov	r1, r3
 800e42a:	f04f 0200 	mov.w	r2, #0
 800e42e:	4b73      	ldr	r3, [pc, #460]	; (800e5fc <SX1276SetRxConfig+0x294>)
 800e430:	f7f2 f862 	bl	80004f8 <__aeabi_dmul>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4610      	mov	r0, r2
 800e43a:	4619      	mov	r1, r3
 800e43c:	f7f2 fb1e 	bl	8000a7c <__aeabi_d2uiz>
 800e440:	4603      	mov	r3, r0
 800e442:	4a6b      	ldr	r2, [pc, #428]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e444:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7f1 ffdb 	bl	8000404 <__aeabi_ui2d>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	a165      	add	r1, pc, #404	; (adr r1, 800e5e8 <SX1276SetRxConfig+0x280>)
 800e454:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e458:	f7f2 f978 	bl	800074c <__aeabi_ddiv>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4610      	mov	r0, r2
 800e462:	4619      	mov	r1, r3
 800e464:	f7f2 fb0a 	bl	8000a7c <__aeabi_d2uiz>
 800e468:	4603      	mov	r3, r0
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	0a1b      	lsrs	r3, r3, #8
 800e472:	b2db      	uxtb	r3, r3
 800e474:	4619      	mov	r1, r3
 800e476:	2002      	movs	r0, #2
 800e478:	f001 f9aa 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	4619      	mov	r1, r3
 800e482:	2003      	movs	r0, #3
 800e484:	f001 f9a4 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800e488:	68b8      	ldr	r0, [r7, #8]
 800e48a:	f7ff ff43 	bl	800e314 <GetFskBandwidthRegValue>
 800e48e:	4603      	mov	r3, r0
 800e490:	4619      	mov	r1, r3
 800e492:	2012      	movs	r0, #18
 800e494:	f001 f99c 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800e498:	6a38      	ldr	r0, [r7, #32]
 800e49a:	f7ff ff3b 	bl	800e314 <GetFskBandwidthRegValue>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	2013      	movs	r0, #19
 800e4a4:	f001 f994 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e4a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4aa:	0a1b      	lsrs	r3, r3, #8
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	2025      	movs	r0, #37	; 0x25
 800e4b4:	f001 f98c 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e4b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	4619      	mov	r1, r3
 800e4be:	2026      	movs	r0, #38	; 0x26
 800e4c0:	f001 f986 	bl	800f7d0 <SX1276Write>
            if( fixLen == 1 )
 800e4c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d006      	beq.n	800e4da <SX1276SetRxConfig+0x172>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800e4cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	2032      	movs	r0, #50	; 0x32
 800e4d4:	f001 f97c 	bl	800f7d0 <SX1276Write>
 800e4d8:	e003      	b.n	800e4e2 <SX1276SetRxConfig+0x17a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800e4da:	21ff      	movs	r1, #255	; 0xff
 800e4dc:	2032      	movs	r0, #50	; 0x32
 800e4de:	f001 f977 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e4e2:	2030      	movs	r0, #48	; 0x30
 800e4e4:	f001 f986 	bl	800f7f4 <SX1276Read>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e4ec:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800e4f0:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e4f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e4f6:	2a00      	cmp	r2, #0
 800e4f8:	d001      	beq.n	800e4fe <SX1276SetRxConfig+0x196>
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	e001      	b.n	800e502 <SX1276SetRxConfig+0x19a>
 800e4fe:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e502:	4313      	orrs	r3, r2
 800e504:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800e506:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e50a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e50c:	b25b      	sxtb	r3, r3
 800e50e:	4313      	orrs	r3, r2
 800e510:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e512:	b2db      	uxtb	r3, r3
 800e514:	4619      	mov	r1, r3
 800e516:	2030      	movs	r0, #48	; 0x30
 800e518:	f001 f95a 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e51c:	2031      	movs	r0, #49	; 0x31
 800e51e:	f001 f969 	bl	800f7f4 <SX1276Read>
 800e522:	4603      	mov	r3, r0
 800e524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	4619      	mov	r1, r3
 800e52c:	2031      	movs	r0, #49	; 0x31
 800e52e:	f001 f94f 	bl	800f7d0 <SX1276Write>
        break;
 800e532:	e135      	b.n	800e7a0 <SX1276SetRxConfig+0x438>
            if( bandwidth > 2 )
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	2b02      	cmp	r3, #2
 800e538:	d900      	bls.n	800e53c <SX1276SetRxConfig+0x1d4>
                while( 1 );
 800e53a:	e7fe      	b.n	800e53a <SX1276SetRxConfig+0x1d2>
            bandwidth += 7;
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	3307      	adds	r3, #7
 800e540:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e542:	4a2b      	ldr	r2, [pc, #172]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800e54a:	4a29      	ldr	r2, [pc, #164]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800e552:	4a27      	ldr	r2, [pc, #156]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e554:	7bbb      	ldrb	r3, [r7, #14]
 800e556:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e55a:	4a25      	ldr	r2, [pc, #148]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e55e:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e562:	4a23      	ldr	r2, [pc, #140]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e564:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e568:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800e56c:	4a20      	ldr	r2, [pc, #128]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e56e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e572:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e576:	4a1e      	ldr	r2, [pc, #120]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e578:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e57c:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e580:	4a1b      	ldr	r2, [pc, #108]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e582:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e586:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e58a:	4a19      	ldr	r2, [pc, #100]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e58c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e590:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e594:	4a16      	ldr	r2, [pc, #88]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e596:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e59a:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800e59e:	4a14      	ldr	r2, [pc, #80]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e5a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e5a4:	f882 312e 	strb.w	r3, [r2, #302]	; 0x12e
            if( datarate > 12 )
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b0c      	cmp	r3, #12
 800e5ac:	d902      	bls.n	800e5b4 <SX1276SetRxConfig+0x24c>
                datarate = 12;
 800e5ae:	230c      	movs	r3, #12
 800e5b0:	607b      	str	r3, [r7, #4]
 800e5b2:	e004      	b.n	800e5be <SX1276SetRxConfig+0x256>
            else if( datarate < 6 )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b05      	cmp	r3, #5
 800e5b8:	d801      	bhi.n	800e5be <SX1276SetRxConfig+0x256>
                datarate = 6;
 800e5ba:	2306      	movs	r3, #6
 800e5bc:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	2b07      	cmp	r3, #7
 800e5c2:	d105      	bne.n	800e5d0 <SX1276SetRxConfig+0x268>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b0b      	cmp	r3, #11
 800e5c8:	d008      	beq.n	800e5dc <SX1276SetRxConfig+0x274>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b0c      	cmp	r3, #12
 800e5ce:	d005      	beq.n	800e5dc <SX1276SetRxConfig+0x274>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b08      	cmp	r3, #8
 800e5d4:	d114      	bne.n	800e600 <SX1276SetRxConfig+0x298>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b0c      	cmp	r3, #12
 800e5da:	d111      	bne.n	800e600 <SX1276SetRxConfig+0x298>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e5dc:	4b04      	ldr	r3, [pc, #16]	; (800e5f0 <SX1276SetRxConfig+0x288>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800e5e4:	e010      	b.n	800e608 <SX1276SetRxConfig+0x2a0>
 800e5e6:	bf00      	nop
 800e5e8:	00000000 	.word	0x00000000
 800e5ec:	417e8480 	.word	0x417e8480
 800e5f0:	200012f0 	.word	0x200012f0
 800e5f4:	3ff00000 	.word	0x3ff00000
 800e5f8:	40200000 	.word	0x40200000
 800e5fc:	408f4000 	.word	0x408f4000
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e600:	4b69      	ldr	r3, [pc, #420]	; (800e7a8 <SX1276SetRxConfig+0x440>)
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e608:	201d      	movs	r0, #29
 800e60a:	f001 f8f3 	bl	800f7f4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	b2db      	uxtb	r3, r3
 800e612:	011b      	lsls	r3, r3, #4
 800e614:	b2da      	uxtb	r2, r3
 800e616:	7bbb      	ldrb	r3, [r7, #14]
 800e618:	005b      	lsls	r3, r3, #1
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	4313      	orrs	r3, r2
 800e61e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e620:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e624:	4313      	orrs	r3, r2
 800e626:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e628:	4619      	mov	r1, r3
 800e62a:	201d      	movs	r0, #29
 800e62c:	f001 f8d0 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e630:	201e      	movs	r0, #30
 800e632:	f001 f8df 	bl	800f7f4 <SX1276Read>
 800e636:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800e638:	f003 0308 	and.w	r3, r3, #8
 800e63c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	011b      	lsls	r3, r3, #4
 800e644:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800e646:	4313      	orrs	r3, r2
 800e648:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e64a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	b2db      	uxtb	r3, r3
 800e652:	4313      	orrs	r3, r2
 800e654:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e656:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e658:	0a1b      	lsrs	r3, r3, #8
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	f003 0303 	and.w	r3, r3, #3
 800e662:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e664:	4313      	orrs	r3, r2
 800e666:	b2db      	uxtb	r3, r3
 800e668:	4619      	mov	r1, r3
 800e66a:	201e      	movs	r0, #30
 800e66c:	f001 f8b0 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e670:	2026      	movs	r0, #38	; 0x26
 800e672:	f001 f8bf 	bl	800f7f4 <SX1276Read>
 800e676:	4603      	mov	r3, r0
 800e678:	b25b      	sxtb	r3, r3
 800e67a:	f023 0308 	bic.w	r3, r3, #8
 800e67e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e680:	4b49      	ldr	r3, [pc, #292]	; (800e7a8 <SX1276SetRxConfig+0x440>)
 800e682:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e686:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e688:	b25b      	sxtb	r3, r3
 800e68a:	4313      	orrs	r3, r2
 800e68c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	4619      	mov	r1, r3
 800e692:	2026      	movs	r0, #38	; 0x26
 800e694:	f001 f89c 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800e698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	4619      	mov	r1, r3
 800e69e:	201f      	movs	r0, #31
 800e6a0:	f001 f896 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e6a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6a6:	0a1b      	lsrs	r3, r3, #8
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	2020      	movs	r0, #32
 800e6b0:	f001 f88e 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e6b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	2021      	movs	r0, #33	; 0x21
 800e6bc:	f001 f888 	bl	800f7d0 <SX1276Write>
            if( fixLen == 1 )
 800e6c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d005      	beq.n	800e6d4 <SX1276SetRxConfig+0x36c>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800e6c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	2022      	movs	r0, #34	; 0x22
 800e6d0:	f001 f87e 	bl	800f7d0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e6d4:	4b34      	ldr	r3, [pc, #208]	; (800e7a8 <SX1276SetRxConfig+0x440>)
 800e6d6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d011      	beq.n	800e702 <SX1276SetRxConfig+0x39a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e6de:	2044      	movs	r0, #68	; 0x44
 800e6e0:	f001 f888 	bl	800f7f4 <SX1276Read>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	2044      	movs	r0, #68	; 0x44
 800e6f0:	f001 f86e 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e6f4:	4b2c      	ldr	r3, [pc, #176]	; (800e7a8 <SX1276SetRxConfig+0x440>)
 800e6f6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	2024      	movs	r0, #36	; 0x24
 800e6fe:	f001 f867 	bl	800f7d0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b09      	cmp	r3, #9
 800e706:	d10e      	bne.n	800e726 <SX1276SetRxConfig+0x3be>
 800e708:	4b27      	ldr	r3, [pc, #156]	; (800e7a8 <SX1276SetRxConfig+0x440>)
 800e70a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e70e:	4a27      	ldr	r2, [pc, #156]	; (800e7ac <SX1276SetRxConfig+0x444>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d908      	bls.n	800e726 <SX1276SetRxConfig+0x3be>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800e714:	2102      	movs	r1, #2
 800e716:	2036      	movs	r0, #54	; 0x36
 800e718:	f001 f85a 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 800e71c:	2164      	movs	r1, #100	; 0x64
 800e71e:	203a      	movs	r0, #58	; 0x3a
 800e720:	f001 f856 	bl	800f7d0 <SX1276Write>
 800e724:	e00f      	b.n	800e746 <SX1276SetRxConfig+0x3de>
            else if( bandwidth == 9 )
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b09      	cmp	r3, #9
 800e72a:	d108      	bne.n	800e73e <SX1276SetRxConfig+0x3d6>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800e72c:	2102      	movs	r1, #2
 800e72e:	2036      	movs	r0, #54	; 0x36
 800e730:	f001 f84e 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 800e734:	217f      	movs	r1, #127	; 0x7f
 800e736:	203a      	movs	r0, #58	; 0x3a
 800e738:	f001 f84a 	bl	800f7d0 <SX1276Write>
 800e73c:	e003      	b.n	800e746 <SX1276SetRxConfig+0x3de>
                SX1276Write( REG_LR_TEST36, 0x03 );
 800e73e:	2103      	movs	r1, #3
 800e740:	2036      	movs	r0, #54	; 0x36
 800e742:	f001 f845 	bl	800f7d0 <SX1276Write>
            if( datarate == 6 )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b06      	cmp	r3, #6
 800e74a:	d114      	bne.n	800e776 <SX1276SetRxConfig+0x40e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e74c:	2031      	movs	r0, #49	; 0x31
 800e74e:	f001 f851 	bl	800f7f4 <SX1276Read>
 800e752:	4603      	mov	r3, r0
 800e754:	b25b      	sxtb	r3, r3
 800e756:	f023 0307 	bic.w	r3, r3, #7
 800e75a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e75c:	f043 0305 	orr.w	r3, r3, #5
 800e760:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e762:	b2db      	uxtb	r3, r3
 800e764:	4619      	mov	r1, r3
 800e766:	2031      	movs	r0, #49	; 0x31
 800e768:	f001 f832 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e76c:	210c      	movs	r1, #12
 800e76e:	2037      	movs	r0, #55	; 0x37
 800e770:	f001 f82e 	bl	800f7d0 <SX1276Write>
        break;
 800e774:	e013      	b.n	800e79e <SX1276SetRxConfig+0x436>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e776:	2031      	movs	r0, #49	; 0x31
 800e778:	f001 f83c 	bl	800f7f4 <SX1276Read>
 800e77c:	4603      	mov	r3, r0
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	f023 0307 	bic.w	r3, r3, #7
 800e784:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e786:	f043 0303 	orr.w	r3, r3, #3
 800e78a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	4619      	mov	r1, r3
 800e790:	2031      	movs	r0, #49	; 0x31
 800e792:	f001 f81d 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e796:	210a      	movs	r1, #10
 800e798:	2037      	movs	r0, #55	; 0x37
 800e79a:	f001 f819 	bl	800f7d0 <SX1276Write>
        break;
 800e79e:	bf00      	nop
}
 800e7a0:	bf00      	nop
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e7a8:	200012f0 	.word	0x200012f0
 800e7ac:	1f4add40 	.word	0x1f4add40

0800e7b0 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60ba      	str	r2, [r7, #8]
 800e7b8:	607b      	str	r3, [r7, #4]
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73fb      	strb	r3, [r7, #15]
 800e7be:	460b      	mov	r3, r1
 800e7c0:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800e7c2:	7bfb      	ldrb	r3, [r7, #15]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f000 ffad 	bl	800f724 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 800e7ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff fb4a 	bl	800de68 <SX1276SetRfTxPower>

    switch( modem )
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <SX1276SetTxConfig+0x32>
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	f000 809d 	beq.w	800e91a <SX1276SetTxConfig+0x16a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e7e0:	e191      	b.n	800eb06 <SX1276SetTxConfig+0x356>
            SX1276.Settings.Fsk.Power = power;
 800e7e2:	4abd      	ldr	r2, [pc, #756]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e7e4:	7bbb      	ldrb	r3, [r7, #14]
 800e7e6:	f882 30e4 	strb.w	r3, [r2, #228]	; 0xe4
            SX1276.Settings.Fsk.Fdev = fdev;
 800e7ea:	4abb      	ldr	r2, [pc, #748]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e7f2:	4ab9      	ldr	r2, [pc, #740]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800e7fa:	4ab7      	ldr	r2, [pc, #732]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e802:	4ab5      	ldr	r2, [pc, #724]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e804:	8c3b      	ldrh	r3, [r7, #32]
 800e806:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e80a:	4ab3      	ldr	r2, [pc, #716]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e80c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e810:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e814:	4ab0      	ldr	r2, [pc, #704]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e816:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e81a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e81e:	4aae      	ldr	r2, [pc, #696]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e820:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e824:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e828:	4aab      	ldr	r2, [pc, #684]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800e830:	68b8      	ldr	r0, [r7, #8]
 800e832:	f7f1 fde7 	bl	8000404 <__aeabi_ui2d>
 800e836:	a3a4      	add	r3, pc, #656	; (adr r3, 800eac8 <SX1276SetTxConfig+0x318>)
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	f7f1 ff86 	bl	800074c <__aeabi_ddiv>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4610      	mov	r0, r2
 800e846:	4619      	mov	r1, r3
 800e848:	f7f2 f918 	bl	8000a7c <__aeabi_d2uiz>
 800e84c:	4603      	mov	r3, r0
 800e84e:	b29b      	uxth	r3, r3
 800e850:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	0a1b      	lsrs	r3, r3, #8
 800e856:	b2db      	uxtb	r3, r3
 800e858:	4619      	mov	r1, r3
 800e85a:	2004      	movs	r0, #4
 800e85c:	f000 ffb8 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	4619      	mov	r1, r3
 800e866:	2005      	movs	r0, #5
 800e868:	f000 ffb2 	bl	800f7d0 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e86c:	69b8      	ldr	r0, [r7, #24]
 800e86e:	f7f1 fdc9 	bl	8000404 <__aeabi_ui2d>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	a196      	add	r1, pc, #600	; (adr r1, 800ead0 <SX1276SetTxConfig+0x320>)
 800e878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e87c:	f7f1 ff66 	bl	800074c <__aeabi_ddiv>
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	4610      	mov	r0, r2
 800e886:	4619      	mov	r1, r3
 800e888:	f7f2 f8f8 	bl	8000a7c <__aeabi_d2uiz>
 800e88c:	4603      	mov	r3, r0
 800e88e:	b29b      	uxth	r3, r3
 800e890:	61bb      	str	r3, [r7, #24]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	0a1b      	lsrs	r3, r3, #8
 800e896:	b2db      	uxtb	r3, r3
 800e898:	4619      	mov	r1, r3
 800e89a:	2002      	movs	r0, #2
 800e89c:	f000 ff98 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	2003      	movs	r0, #3
 800e8a8:	f000 ff92 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e8ac:	8c3b      	ldrh	r3, [r7, #32]
 800e8ae:	0a1b      	lsrs	r3, r3, #8
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	2025      	movs	r0, #37	; 0x25
 800e8b8:	f000 ff8a 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800e8bc:	8c3b      	ldrh	r3, [r7, #32]
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	2026      	movs	r0, #38	; 0x26
 800e8c4:	f000 ff84 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e8c8:	2030      	movs	r0, #48	; 0x30
 800e8ca:	f000 ff93 	bl	800f7f4 <SX1276Read>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e8d2:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800e8d6:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e8d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e8dc:	2a00      	cmp	r2, #0
 800e8de:	d001      	beq.n	800e8e4 <SX1276SetTxConfig+0x134>
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	e001      	b.n	800e8e8 <SX1276SetTxConfig+0x138>
 800e8e4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800e8ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8f0:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e8f2:	b25b      	sxtb	r3, r3
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	2030      	movs	r0, #48	; 0x30
 800e8fe:	f000 ff67 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e902:	2031      	movs	r0, #49	; 0x31
 800e904:	f000 ff76 	bl	800f7f4 <SX1276Read>
 800e908:	4603      	mov	r3, r0
 800e90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	4619      	mov	r1, r3
 800e912:	2031      	movs	r0, #49	; 0x31
 800e914:	f000 ff5c 	bl	800f7d0 <SX1276Write>
        break;
 800e918:	e0f5      	b.n	800eb06 <SX1276SetTxConfig+0x356>
            SX1276.Settings.LoRa.Power = power;
 800e91a:	4a6f      	ldr	r2, [pc, #444]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e91c:	7bbb      	ldrb	r3, [r7, #14]
 800e91e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            if( bandwidth > 2 )
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2b02      	cmp	r3, #2
 800e926:	d900      	bls.n	800e92a <SX1276SetTxConfig+0x17a>
                while( 1 );
 800e928:	e7fe      	b.n	800e928 <SX1276SetTxConfig+0x178>
            bandwidth += 7;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3307      	adds	r3, #7
 800e92e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e930:	4a69      	ldr	r2, [pc, #420]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800e938:	4a67      	ldr	r2, [pc, #412]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800e940:	4a65      	ldr	r2, [pc, #404]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e942:	7f3b      	ldrb	r3, [r7, #28]
 800e944:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e948:	4a63      	ldr	r2, [pc, #396]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e94a:	8c3b      	ldrh	r3, [r7, #32]
 800e94c:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e950:	4a61      	ldr	r2, [pc, #388]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e956:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e95a:	4a5f      	ldr	r2, [pc, #380]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e95c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e960:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e964:	4a5c      	ldr	r2, [pc, #368]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e966:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e96a:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e96e:	4a5a      	ldr	r2, [pc, #360]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e970:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e974:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e978:	4a57      	ldr	r2, [pc, #348]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e97a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e97e:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e982:	4a55      	ldr	r2, [pc, #340]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e986:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
            if( datarate > 12 )
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	2b0c      	cmp	r3, #12
 800e98e:	d902      	bls.n	800e996 <SX1276SetTxConfig+0x1e6>
                datarate = 12;
 800e990:	230c      	movs	r3, #12
 800e992:	61bb      	str	r3, [r7, #24]
 800e994:	e004      	b.n	800e9a0 <SX1276SetTxConfig+0x1f0>
            else if( datarate < 6 )
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	2b05      	cmp	r3, #5
 800e99a:	d801      	bhi.n	800e9a0 <SX1276SetTxConfig+0x1f0>
                datarate = 6;
 800e99c:	2306      	movs	r3, #6
 800e99e:	61bb      	str	r3, [r7, #24]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b07      	cmp	r3, #7
 800e9a4:	d105      	bne.n	800e9b2 <SX1276SetTxConfig+0x202>
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	2b0b      	cmp	r3, #11
 800e9aa:	d008      	beq.n	800e9be <SX1276SetTxConfig+0x20e>
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	2b0c      	cmp	r3, #12
 800e9b0:	d005      	beq.n	800e9be <SX1276SetTxConfig+0x20e>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b08      	cmp	r3, #8
 800e9b6:	d107      	bne.n	800e9c8 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	2b0c      	cmp	r3, #12
 800e9bc:	d104      	bne.n	800e9c8 <SX1276SetTxConfig+0x218>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e9be:	4b46      	ldr	r3, [pc, #280]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800e9c6:	e003      	b.n	800e9d0 <SX1276SetTxConfig+0x220>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e9c8:	4b43      	ldr	r3, [pc, #268]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e9d0:	4b41      	ldr	r3, [pc, #260]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e9d2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d011      	beq.n	800e9fe <SX1276SetTxConfig+0x24e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e9da:	2044      	movs	r0, #68	; 0x44
 800e9dc:	f000 ff0a 	bl	800f7f4 <SX1276Read>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	2044      	movs	r0, #68	; 0x44
 800e9ec:	f000 fef0 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e9f0:	4b39      	ldr	r3, [pc, #228]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800e9f2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	2024      	movs	r0, #36	; 0x24
 800e9fa:	f000 fee9 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e9fe:	201d      	movs	r0, #29
 800ea00:	f000 fef8 	bl	800f7f4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	011b      	lsls	r3, r3, #4
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	7f3b      	ldrb	r3, [r7, #28]
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	4313      	orrs	r3, r2
 800ea14:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ea16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800ea1e:	4619      	mov	r1, r3
 800ea20:	201d      	movs	r0, #29
 800ea22:	f000 fed5 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800ea26:	201e      	movs	r0, #30
 800ea28:	f000 fee4 	bl	800f7f4 <SX1276Read>
 800ea2c:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800ea2e:	f003 030b 	and.w	r3, r3, #11
 800ea32:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	011b      	lsls	r3, r3, #4
 800ea3a:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800ea40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	201e      	movs	r0, #30
 800ea50:	f000 febe 	bl	800f7d0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800ea54:	2026      	movs	r0, #38	; 0x26
 800ea56:	f000 fecd 	bl	800f7f4 <SX1276Read>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	b25b      	sxtb	r3, r3
 800ea5e:	f023 0308 	bic.w	r3, r3, #8
 800ea62:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800ea64:	4b1c      	ldr	r3, [pc, #112]	; (800ead8 <SX1276SetTxConfig+0x328>)
 800ea66:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800ea6a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800ea6c:	b25b      	sxtb	r3, r3
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	4619      	mov	r1, r3
 800ea76:	2026      	movs	r0, #38	; 0x26
 800ea78:	f000 feaa 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800ea7c:	8c3b      	ldrh	r3, [r7, #32]
 800ea7e:	0a1b      	lsrs	r3, r3, #8
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4619      	mov	r1, r3
 800ea86:	2020      	movs	r0, #32
 800ea88:	f000 fea2 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800ea8c:	8c3b      	ldrh	r3, [r7, #32]
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	4619      	mov	r1, r3
 800ea92:	2021      	movs	r0, #33	; 0x21
 800ea94:	f000 fe9c 	bl	800f7d0 <SX1276Write>
            if( datarate == 6 )
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	2b06      	cmp	r3, #6
 800ea9c:	d11e      	bne.n	800eadc <SX1276SetTxConfig+0x32c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ea9e:	2031      	movs	r0, #49	; 0x31
 800eaa0:	f000 fea8 	bl	800f7f4 <SX1276Read>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	b25b      	sxtb	r3, r3
 800eaa8:	f023 0307 	bic.w	r3, r3, #7
 800eaac:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800eaae:	f043 0305 	orr.w	r3, r3, #5
 800eab2:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	4619      	mov	r1, r3
 800eab8:	2031      	movs	r0, #49	; 0x31
 800eaba:	f000 fe89 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800eabe:	210c      	movs	r1, #12
 800eac0:	2037      	movs	r0, #55	; 0x37
 800eac2:	f000 fe85 	bl	800f7d0 <SX1276Write>
        break;
 800eac6:	e01d      	b.n	800eb04 <SX1276SetTxConfig+0x354>
 800eac8:	00000000 	.word	0x00000000
 800eacc:	404e8480 	.word	0x404e8480
 800ead0:	00000000 	.word	0x00000000
 800ead4:	417e8480 	.word	0x417e8480
 800ead8:	200012f0 	.word	0x200012f0
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800eadc:	2031      	movs	r0, #49	; 0x31
 800eade:	f000 fe89 	bl	800f7f4 <SX1276Read>
 800eae2:	4603      	mov	r3, r0
 800eae4:	b25b      	sxtb	r3, r3
 800eae6:	f023 0307 	bic.w	r3, r3, #7
 800eaea:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800eaec:	f043 0303 	orr.w	r3, r3, #3
 800eaf0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	2031      	movs	r0, #49	; 0x31
 800eaf8:	f000 fe6a 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800eafc:	210a      	movs	r1, #10
 800eafe:	2037      	movs	r0, #55	; 0x37
 800eb00:	f000 fe66 	bl	800f7d0 <SX1276Write>
        break;
 800eb04:	bf00      	nop
}
 800eb06:	bf00      	nop
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop

0800eb10 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800eb10:	b5b0      	push	{r4, r5, r7, lr}
 800eb12:	b094      	sub	sp, #80	; 0x50
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4603      	mov	r3, r0
 800eb18:	460a      	mov	r2, r1
 800eb1a:	71fb      	strb	r3, [r7, #7]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 800eb20:	2300      	movs	r3, #0
 800eb22:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 800eb24:	79fb      	ldrb	r3, [r7, #7]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d003      	beq.n	800eb32 <SX1276GetTimeOnAir+0x22>
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	f000 808e 	beq.w	800ec4c <SX1276GetTimeOnAir+0x13c>
 800eb30:	e17c      	b.n	800ee2c <SX1276GetTimeOnAir+0x31c>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800eb32:	4bc9      	ldr	r3, [pc, #804]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800eb34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800eb38:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800eb3a:	2027      	movs	r0, #39	; 0x27
 800eb3c:	f000 fe5a 	bl	800f7f4 <SX1276Read>
 800eb40:	4603      	mov	r3, r0
 800eb42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800eb46:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800eb48:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7f1 fc6a 	bl	8000424 <__aeabi_i2d>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800eb54:	49c0      	ldr	r1, [pc, #768]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800eb56:	f891 10fa 	ldrb.w	r1, [r1, #250]	; 0xfa
 800eb5a:	2900      	cmp	r1, #0
 800eb5c:	d004      	beq.n	800eb68 <SX1276GetTimeOnAir+0x58>
 800eb5e:	f04f 0000 	mov.w	r0, #0
 800eb62:	f04f 0100 	mov.w	r1, #0
 800eb66:	e002      	b.n	800eb6e <SX1276GetTimeOnAir+0x5e>
 800eb68:	f04f 0000 	mov.w	r0, #0
 800eb6c:	49bb      	ldr	r1, [pc, #748]	; (800ee5c <SX1276GetTimeOnAir+0x34c>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800eb6e:	f7f1 fb0d 	bl	800018c <__adddf3>
 800eb72:	4602      	mov	r2, r0
 800eb74:	460b      	mov	r3, r1
 800eb76:	4614      	mov	r4, r2
 800eb78:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800eb7a:	2030      	movs	r0, #48	; 0x30
 800eb7c:	f000 fe3a 	bl	800f7f4 <SX1276Read>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d003      	beq.n	800eb92 <SX1276GetTimeOnAir+0x82>
 800eb8a:	f04f 0000 	mov.w	r0, #0
 800eb8e:	49b3      	ldr	r1, [pc, #716]	; (800ee5c <SX1276GetTimeOnAir+0x34c>)
 800eb90:	e003      	b.n	800eb9a <SX1276GetTimeOnAir+0x8a>
 800eb92:	f04f 0000 	mov.w	r0, #0
 800eb96:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	462b      	mov	r3, r5
 800eb9e:	f7f1 faf5 	bl	800018c <__adddf3>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	4614      	mov	r4, r2
 800eba8:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800ebaa:	79bb      	ldrb	r3, [r7, #6]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7f1 fc39 	bl	8000424 <__aeabi_i2d>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7f1 fae7 	bl	800018c <__adddf3>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	4614      	mov	r4, r2
 800ebc4:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800ebc6:	4ba4      	ldr	r3, [pc, #656]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ebc8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d004      	beq.n	800ebda <SX1276GetTimeOnAir+0xca>
 800ebd0:	f04f 0000 	mov.w	r0, #0
 800ebd4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ebd8:	e003      	b.n	800ebe2 <SX1276GetTimeOnAir+0xd2>
 800ebda:	f04f 0000 	mov.w	r0, #0
 800ebde:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	f7f1 fad1 	bl	800018c <__adddf3>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	4610      	mov	r0, r2
 800ebf0:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800ebf2:	f04f 0200 	mov.w	r2, #0
 800ebf6:	4b9a      	ldr	r3, [pc, #616]	; (800ee60 <SX1276GetTimeOnAir+0x350>)
 800ebf8:	f7f1 fc7e 	bl	80004f8 <__aeabi_dmul>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	460b      	mov	r3, r1
 800ec00:	4614      	mov	r4, r2
 800ec02:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 800ec04:	4b94      	ldr	r3, [pc, #592]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ec06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7f1 fbfa 	bl	8000404 <__aeabi_ui2d>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	4620      	mov	r0, r4
 800ec16:	4629      	mov	r1, r5
 800ec18:	f7f1 fd98 	bl	800074c <__aeabi_ddiv>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	460b      	mov	r3, r1
 800ec20:	4610      	mov	r0, r2
 800ec22:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800ec24:	f04f 0200 	mov.w	r2, #0
 800ec28:	4b8e      	ldr	r3, [pc, #568]	; (800ee64 <SX1276GetTimeOnAir+0x354>)
 800ec2a:	f7f1 fc65 	bl	80004f8 <__aeabi_dmul>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	460b      	mov	r3, r1
 800ec32:	4610      	mov	r0, r2
 800ec34:	4619      	mov	r1, r3
 800ec36:	f003 ff3f 	bl	8012ab8 <round>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	4610      	mov	r0, r2
 800ec40:	4619      	mov	r1, r3
 800ec42:	f7f1 ff1b 	bl	8000a7c <__aeabi_d2uiz>
 800ec46:	4603      	mov	r3, r0
 800ec48:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800ec4a:	e0ef      	b.n	800ee2c <SX1276GetTimeOnAir+0x31c>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800ec4c:	f04f 0200 	mov.w	r2, #0
 800ec50:	f04f 0300 	mov.w	r3, #0
 800ec54:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800ec58:	4b7f      	ldr	r3, [pc, #508]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ec5a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ec5e:	2b09      	cmp	r3, #9
 800ec60:	d012      	beq.n	800ec88 <SX1276GetTimeOnAir+0x178>
 800ec62:	2b09      	cmp	r3, #9
 800ec64:	d816      	bhi.n	800ec94 <SX1276GetTimeOnAir+0x184>
 800ec66:	2b07      	cmp	r3, #7
 800ec68:	d002      	beq.n	800ec70 <SX1276GetTimeOnAir+0x160>
 800ec6a:	2b08      	cmp	r3, #8
 800ec6c:	d006      	beq.n	800ec7c <SX1276GetTimeOnAir+0x16c>
 800ec6e:	e011      	b.n	800ec94 <SX1276GetTimeOnAir+0x184>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 800ec70:	a371      	add	r3, pc, #452	; (adr r3, 800ee38 <SX1276GetTimeOnAir+0x328>)
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800ec7a:	e00b      	b.n	800ec94 <SX1276GetTimeOnAir+0x184>
            case 8: // 250 kHz
                bw = 250e3;
 800ec7c:	a370      	add	r3, pc, #448	; (adr r3, 800ee40 <SX1276GetTimeOnAir+0x330>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800ec86:	e005      	b.n	800ec94 <SX1276GetTimeOnAir+0x184>
            case 9: // 500 kHz
                bw = 500e3;
 800ec88:	a36f      	add	r3, pc, #444	; (adr r3, 800ee48 <SX1276GetTimeOnAir+0x338>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800ec92:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800ec94:	4b70      	ldr	r3, [pc, #448]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ec96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	fa02 f303 	lsl.w	r3, r2, r3
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7f1 fbbf 	bl	8000424 <__aeabi_i2d>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ecae:	f7f1 fd4d 	bl	800074c <__aeabi_ddiv>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            double ts = 1 / rs;
 800ecba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ecbe:	f04f 0000 	mov.w	r0, #0
 800ecc2:	4966      	ldr	r1, [pc, #408]	; (800ee5c <SX1276GetTimeOnAir+0x34c>)
 800ecc4:	f7f1 fd42 	bl	800074c <__aeabi_ddiv>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	460b      	mov	r3, r1
 800eccc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800ecd0:	4b61      	ldr	r3, [pc, #388]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ecd2:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7f1 fba4 	bl	8000424 <__aeabi_i2d>
 800ecdc:	f04f 0200 	mov.w	r2, #0
 800ece0:	4b61      	ldr	r3, [pc, #388]	; (800ee68 <SX1276GetTimeOnAir+0x358>)
 800ece2:	f7f1 fa53 	bl	800018c <__adddf3>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ecee:	f7f1 fc03 	bl	80004f8 <__aeabi_dmul>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ecfa:	79bb      	ldrb	r3, [r7, #6]
 800ecfc:	00db      	lsls	r3, r3, #3
 800ecfe:	461a      	mov	r2, r3
 800ed00:	4b55      	ldr	r3, [pc, #340]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ed02:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800ed0a:	4a53      	ldr	r2, [pc, #332]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ed0c:	f892 212a 	ldrb.w	r2, [r2, #298]	; 0x12a
 800ed10:	0112      	lsls	r2, r2, #4
 800ed12:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800ed14:	4b50      	ldr	r3, [pc, #320]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ed16:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d001      	beq.n	800ed22 <SX1276GetTimeOnAir+0x212>
 800ed1e:	2314      	movs	r3, #20
 800ed20:	e000      	b.n	800ed24 <SX1276GetTimeOnAir+0x214>
 800ed22:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7f1 fb6b 	bl	8000404 <__aeabi_ui2d>
 800ed2e:	4604      	mov	r4, r0
 800ed30:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800ed32:	4b49      	ldr	r3, [pc, #292]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ed34:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800ed38:	4b47      	ldr	r3, [pc, #284]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ed3a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <SX1276GetTimeOnAir+0x236>
 800ed42:	2302      	movs	r3, #2
 800ed44:	e000      	b.n	800ed48 <SX1276GetTimeOnAir+0x238>
 800ed46:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800ed48:	1ad3      	subs	r3, r2, r3
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7f1 fb59 	bl	8000404 <__aeabi_ui2d>
 800ed52:	4602      	mov	r2, r0
 800ed54:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ed56:	4620      	mov	r0, r4
 800ed58:	4629      	mov	r1, r5
 800ed5a:	f7f1 fcf7 	bl	800074c <__aeabi_ddiv>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	460b      	mov	r3, r1
 800ed62:	4610      	mov	r0, r2
 800ed64:	4619      	mov	r1, r3
 800ed66:	f003 fda7 	bl	80128b8 <ceil>
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	460d      	mov	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800ed6e:	4b3a      	ldr	r3, [pc, #232]	; (800ee58 <SX1276GetTimeOnAir+0x348>)
 800ed70:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800ed74:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7f1 fb54 	bl	8000424 <__aeabi_i2d>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ed80:	4620      	mov	r0, r4
 800ed82:	4629      	mov	r1, r5
 800ed84:	f7f1 fbb8 	bl	80004f8 <__aeabi_dmul>
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800ed90:	f04f 0200 	mov.w	r2, #0
 800ed94:	f04f 0300 	mov.w	r3, #0
 800ed98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ed9c:	f7f1 fe3c 	bl	8000a18 <__aeabi_dcmpgt>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d002      	beq.n	800edac <SX1276GetTimeOnAir+0x29c>
 800eda6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edaa:	e003      	b.n	800edb4 <SX1276GetTimeOnAir+0x2a4>
 800edac:	f04f 0000 	mov.w	r0, #0
 800edb0:	f04f 0100 	mov.w	r1, #0
 800edb4:	f04f 0200 	mov.w	r2, #0
 800edb8:	4b29      	ldr	r3, [pc, #164]	; (800ee60 <SX1276GetTimeOnAir+0x350>)
 800edba:	f7f1 f9e7 	bl	800018c <__adddf3>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 800edc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800edca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edce:	f7f1 fb93 	bl	80004f8 <__aeabi_dmul>
 800edd2:	4602      	mov	r2, r0
 800edd4:	460b      	mov	r3, r1
 800edd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800edda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800edde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ede2:	f7f1 f9d3 	bl	800018c <__adddf3>
 800ede6:	4602      	mov	r2, r0
 800ede8:	460b      	mov	r3, r1
 800edea:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800edee:	f04f 0200 	mov.w	r2, #0
 800edf2:	4b1c      	ldr	r3, [pc, #112]	; (800ee64 <SX1276GetTimeOnAir+0x354>)
 800edf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800edf8:	f7f1 fb7e 	bl	80004f8 <__aeabi_dmul>
 800edfc:	4602      	mov	r2, r0
 800edfe:	460b      	mov	r3, r1
 800ee00:	4610      	mov	r0, r2
 800ee02:	4619      	mov	r1, r3
 800ee04:	a312      	add	r3, pc, #72	; (adr r3, 800ee50 <SX1276GetTimeOnAir+0x340>)
 800ee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0a:	f7f1 f9bf 	bl	800018c <__adddf3>
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	4610      	mov	r0, r2
 800ee14:	4619      	mov	r1, r3
 800ee16:	f003 fdcf 	bl	80129b8 <floor>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4610      	mov	r0, r2
 800ee20:	4619      	mov	r1, r3
 800ee22:	f7f1 fe2b 	bl	8000a7c <__aeabi_d2uiz>
 800ee26:	4603      	mov	r3, r0
 800ee28:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800ee2a:	bf00      	nop
    }
    return airTime;
 800ee2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3750      	adds	r7, #80	; 0x50
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bdb0      	pop	{r4, r5, r7, pc}
 800ee36:	bf00      	nop
 800ee38:	00000000 	.word	0x00000000
 800ee3c:	40fe8480 	.word	0x40fe8480
 800ee40:	00000000 	.word	0x00000000
 800ee44:	410e8480 	.word	0x410e8480
 800ee48:	00000000 	.word	0x00000000
 800ee4c:	411e8480 	.word	0x411e8480
 800ee50:	d916872b 	.word	0xd916872b
 800ee54:	3feff7ce 	.word	0x3feff7ce
 800ee58:	200012f0 	.word	0x200012f0
 800ee5c:	3ff00000 	.word	0x3ff00000
 800ee60:	40200000 	.word	0x40200000
 800ee64:	408f4000 	.word	0x408f4000
 800ee68:	40110000 	.word	0x40110000

0800ee6c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	460b      	mov	r3, r1
 800ee76:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800ee7c:	4b54      	ldr	r3, [pc, #336]	; (800efd0 <SX1276Send+0x164>)
 800ee7e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d002      	beq.n	800ee8c <SX1276Send+0x20>
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d04a      	beq.n	800ef20 <SX1276Send+0xb4>
 800ee8a:	e09a      	b.n	800efc2 <SX1276Send+0x156>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800ee8c:	4b50      	ldr	r3, [pc, #320]	; (800efd0 <SX1276Send+0x164>)
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = size;
 800ee94:	78fb      	ldrb	r3, [r7, #3]
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	4b4d      	ldr	r3, [pc, #308]	; (800efd0 <SX1276Send+0x164>)
 800ee9a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

            if( SX1276.Settings.Fsk.FixLen == false )
 800ee9e:	4b4c      	ldr	r3, [pc, #304]	; (800efd0 <SX1276Send+0x164>)
 800eea0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800eea4:	f083 0301 	eor.w	r3, r3, #1
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d005      	beq.n	800eeba <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800eeae:	1cfb      	adds	r3, r7, #3
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f000 fd1a 	bl	800f8ec <SX1276WriteFifo>
 800eeb8:	e004      	b.n	800eec4 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800eeba:	78fb      	ldrb	r3, [r7, #3]
 800eebc:	4619      	mov	r1, r3
 800eebe:	2032      	movs	r0, #50	; 0x32
 800eec0:	f000 fc86 	bl	800f7d0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800eec4:	78fb      	ldrb	r3, [r7, #3]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d007      	beq.n	800eeda <SX1276Send+0x6e>
 800eeca:	78fb      	ldrb	r3, [r7, #3]
 800eecc:	2b40      	cmp	r3, #64	; 0x40
 800eece:	d804      	bhi.n	800eeda <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800eed0:	78fa      	ldrb	r2, [r7, #3]
 800eed2:	4b3f      	ldr	r3, [pc, #252]	; (800efd0 <SX1276Send+0x164>)
 800eed4:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 800eed8:	e00a      	b.n	800eef0 <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800eeda:	78fb      	ldrb	r3, [r7, #3]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	461a      	mov	r2, r3
 800eee0:	6879      	ldr	r1, [r7, #4]
 800eee2:	483c      	ldr	r0, [pc, #240]	; (800efd4 <SX1276Send+0x168>)
 800eee4:	f001 fda7 	bl	8010a36 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800eee8:	4b39      	ldr	r3, [pc, #228]	; (800efd0 <SX1276Send+0x164>)
 800eeea:	2220      	movs	r2, #32
 800eeec:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800eef0:	4b37      	ldr	r3, [pc, #220]	; (800efd0 <SX1276Send+0x164>)
 800eef2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 fcf7 	bl	800f8ec <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800eefe:	4b34      	ldr	r3, [pc, #208]	; (800efd0 <SX1276Send+0x164>)
 800ef00:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800ef04:	4b32      	ldr	r3, [pc, #200]	; (800efd0 <SX1276Send+0x164>)
 800ef06:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	4413      	add	r3, r2
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	4b2f      	ldr	r3, [pc, #188]	; (800efd0 <SX1276Send+0x164>)
 800ef12:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800ef16:	4b2e      	ldr	r3, [pc, #184]	; (800efd0 <SX1276Send+0x164>)
 800ef18:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ef1c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ef1e:	e050      	b.n	800efc2 <SX1276Send+0x156>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800ef20:	4b2b      	ldr	r3, [pc, #172]	; (800efd0 <SX1276Send+0x164>)
 800ef22:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00f      	beq.n	800ef4a <SX1276Send+0xde>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800ef2a:	2033      	movs	r0, #51	; 0x33
 800ef2c:	f000 fc62 	bl	800f7f4 <SX1276Read>
 800ef30:	4603      	mov	r3, r0
 800ef32:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	4619      	mov	r1, r3
 800ef3a:	2033      	movs	r0, #51	; 0x33
 800ef3c:	f000 fc48 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800ef40:	2119      	movs	r1, #25
 800ef42:	203b      	movs	r0, #59	; 0x3b
 800ef44:	f000 fc44 	bl	800f7d0 <SX1276Write>
 800ef48:	e013      	b.n	800ef72 <SX1276Send+0x106>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800ef4a:	2033      	movs	r0, #51	; 0x33
 800ef4c:	f000 fc52 	bl	800f7f4 <SX1276Read>
 800ef50:	4603      	mov	r3, r0
 800ef52:	b25b      	sxtb	r3, r3
 800ef54:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800ef58:	b25b      	sxtb	r3, r3
 800ef5a:	f043 0301 	orr.w	r3, r3, #1
 800ef5e:	b25b      	sxtb	r3, r3
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	4619      	mov	r1, r3
 800ef64:	2033      	movs	r0, #51	; 0x33
 800ef66:	f000 fc33 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800ef6a:	211d      	movs	r1, #29
 800ef6c:	203b      	movs	r0, #59	; 0x3b
 800ef6e:	f000 fc2f 	bl	800f7d0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ef72:	78fa      	ldrb	r2, [r7, #3]
 800ef74:	4b16      	ldr	r3, [pc, #88]	; (800efd0 <SX1276Send+0x164>)
 800ef76:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ef7a:	78fb      	ldrb	r3, [r7, #3]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	2022      	movs	r0, #34	; 0x22
 800ef80:	f000 fc26 	bl	800f7d0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800ef84:	2100      	movs	r1, #0
 800ef86:	200e      	movs	r0, #14
 800ef88:	f000 fc22 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	200d      	movs	r0, #13
 800ef90:	f000 fc1e 	bl	800f7d0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800ef94:	2001      	movs	r0, #1
 800ef96:	f000 fc2d 	bl	800f7f4 <SX1276Read>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d104      	bne.n	800efae <SX1276Send+0x142>
            {
                SX1276SetStby( );
 800efa4:	f000 f830 	bl	800f008 <SX1276SetStby>
                DelayMs( 1 );
 800efa8:	2001      	movs	r0, #1
 800efaa:	f7fc ff44 	bl	800be36 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800efae:	78fb      	ldrb	r3, [r7, #3]
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fc9a 	bl	800f8ec <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800efb8:	4b05      	ldr	r3, [pc, #20]	; (800efd0 <SX1276Send+0x164>)
 800efba:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800efbe:	60fb      	str	r3, [r7, #12]
        }
        break;
 800efc0:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 fa26 	bl	800f414 <SX1276SetTx>
}
 800efc8:	bf00      	nop
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	200012f0 	.word	0x200012f0
 800efd4:	200007b0 	.word	0x200007b0

0800efd8 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800efdc:	4807      	ldr	r0, [pc, #28]	; (800effc <SX1276SetSleep+0x24>)
 800efde:	f001 fb6f 	bl	80106c0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800efe2:	4807      	ldr	r0, [pc, #28]	; (800f000 <SX1276SetSleep+0x28>)
 800efe4:	f001 fb6c 	bl	80106c0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800efe8:	2000      	movs	r0, #0
 800efea:	f000 fb73 	bl	800f6d4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800efee:	4b05      	ldr	r3, [pc, #20]	; (800f004 <SX1276SetSleep+0x2c>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800eff6:	bf00      	nop
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	20001430 	.word	0x20001430
 800f000:	200012c8 	.word	0x200012c8
 800f004:	200012f0 	.word	0x200012f0

0800f008 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800f00c:	4807      	ldr	r0, [pc, #28]	; (800f02c <SX1276SetStby+0x24>)
 800f00e:	f001 fb57 	bl	80106c0 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800f012:	4807      	ldr	r0, [pc, #28]	; (800f030 <SX1276SetStby+0x28>)
 800f014:	f001 fb54 	bl	80106c0 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800f018:	2001      	movs	r0, #1
 800f01a:	f000 fb5b 	bl	800f6d4 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800f01e:	4b05      	ldr	r3, [pc, #20]	; (800f034 <SX1276SetStby+0x2c>)
 800f020:	2200      	movs	r2, #0
 800f022:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800f026:	bf00      	nop
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20001430 	.word	0x20001430
 800f030:	200012c8 	.word	0x200012c8
 800f034:	200012f0 	.word	0x200012f0

0800f038 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800f040:	2300      	movs	r3, #0
 800f042:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800f044:	4bc4      	ldr	r3, [pc, #784]	; (800f358 <SX1276SetRx+0x320>)
 800f046:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <SX1276SetRx+0x1c>
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d03e      	beq.n	800f0d0 <SX1276SetRx+0x98>
 800f052:	e19b      	b.n	800f38c <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800f054:	4bc0      	ldr	r3, [pc, #768]	; (800f358 <SX1276SetRx+0x320>)
 800f056:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f05a:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f05c:	2040      	movs	r0, #64	; 0x40
 800f05e:	f000 fbc9 	bl	800f7f4 <SX1276Read>
 800f062:	4603      	mov	r3, r0
 800f064:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800f066:	f003 0303 	and.w	r3, r3, #3
 800f06a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800f06c:	f043 030c 	orr.w	r3, r3, #12
 800f070:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f072:	b2db      	uxtb	r3, r3
 800f074:	4619      	mov	r1, r3
 800f076:	2040      	movs	r0, #64	; 0x40
 800f078:	f000 fbaa 	bl	800f7d0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f07c:	2041      	movs	r0, #65	; 0x41
 800f07e:	f000 fbb9 	bl	800f7f4 <SX1276Read>
 800f082:	4603      	mov	r3, r0
 800f084:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	4619      	mov	r1, r3
 800f08c:	2041      	movs	r0, #65	; 0x41
 800f08e:	f000 fb9f 	bl	800f7d0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f092:	2035      	movs	r0, #53	; 0x35
 800f094:	f000 fbae 	bl	800f7f4 <SX1276Read>
 800f098:	4603      	mov	r3, r0
 800f09a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	4bad      	ldr	r3, [pc, #692]	; (800f358 <SX1276SetRx+0x320>)
 800f0a2:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800f0a6:	211e      	movs	r1, #30
 800f0a8:	200d      	movs	r0, #13
 800f0aa:	f000 fb91 	bl	800f7d0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f0ae:	4baa      	ldr	r3, [pc, #680]	; (800f358 <SX1276SetRx+0x320>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f0b6:	4ba8      	ldr	r3, [pc, #672]	; (800f358 <SX1276SetRx+0x320>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f0be:	4ba6      	ldr	r3, [pc, #664]	; (800f358 <SX1276SetRx+0x320>)
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f0c6:	4ba4      	ldr	r3, [pc, #656]	; (800f358 <SX1276SetRx+0x320>)
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
        }
        break;
 800f0ce:	e15d      	b.n	800f38c <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800f0d0:	4ba1      	ldr	r3, [pc, #644]	; (800f358 <SX1276SetRx+0x320>)
 800f0d2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00f      	beq.n	800f0fa <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800f0da:	2033      	movs	r0, #51	; 0x33
 800f0dc:	f000 fb8a 	bl	800f7f4 <SX1276Read>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	2033      	movs	r0, #51	; 0x33
 800f0ec:	f000 fb70 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800f0f0:	2119      	movs	r1, #25
 800f0f2:	203b      	movs	r0, #59	; 0x3b
 800f0f4:	f000 fb6c 	bl	800f7d0 <SX1276Write>
 800f0f8:	e013      	b.n	800f122 <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800f0fa:	2033      	movs	r0, #51	; 0x33
 800f0fc:	f000 fb7a 	bl	800f7f4 <SX1276Read>
 800f100:	4603      	mov	r3, r0
 800f102:	b25b      	sxtb	r3, r3
 800f104:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800f108:	b25b      	sxtb	r3, r3
 800f10a:	f043 0301 	orr.w	r3, r3, #1
 800f10e:	b25b      	sxtb	r3, r3
 800f110:	b2db      	uxtb	r3, r3
 800f112:	4619      	mov	r1, r3
 800f114:	2033      	movs	r0, #51	; 0x33
 800f116:	f000 fb5b 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800f11a:	211d      	movs	r1, #29
 800f11c:	203b      	movs	r0, #59	; 0x3b
 800f11e:	f000 fb57 	bl	800f7d0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800f122:	4b8d      	ldr	r3, [pc, #564]	; (800f358 <SX1276SetRx+0x320>)
 800f124:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f128:	2b08      	cmp	r3, #8
 800f12a:	f200 80d6 	bhi.w	800f2da <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800f12e:	2031      	movs	r0, #49	; 0x31
 800f130:	f000 fb60 	bl	800f7f4 <SX1276Read>
 800f134:	4603      	mov	r3, r0
 800f136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	4619      	mov	r1, r3
 800f13e:	2031      	movs	r0, #49	; 0x31
 800f140:	f000 fb46 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800f144:	2100      	movs	r1, #0
 800f146:	2030      	movs	r0, #48	; 0x30
 800f148:	f000 fb42 	bl	800f7d0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800f14c:	4b82      	ldr	r3, [pc, #520]	; (800f358 <SX1276SetRx+0x320>)
 800f14e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f152:	2b08      	cmp	r3, #8
 800f154:	f200 80cc 	bhi.w	800f2f0 <SX1276SetRx+0x2b8>
 800f158:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <SX1276SetRx+0x128>)
 800f15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15e:	bf00      	nop
 800f160:	0800f185 	.word	0x0800f185
 800f164:	0800f1b9 	.word	0x0800f1b9
 800f168:	0800f1ed 	.word	0x0800f1ed
 800f16c:	0800f221 	.word	0x0800f221
 800f170:	0800f255 	.word	0x0800f255
 800f174:	0800f289 	.word	0x0800f289
 800f178:	0800f2bd 	.word	0x0800f2bd
 800f17c:	0800f2c7 	.word	0x0800f2c7
 800f180:	0800f2d1 	.word	0x0800f2d1
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800f184:	2148      	movs	r1, #72	; 0x48
 800f186:	202f      	movs	r0, #47	; 0x2f
 800f188:	f000 fb22 	bl	800f7d0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800f18c:	4b72      	ldr	r3, [pc, #456]	; (800f358 <SX1276SetRx+0x320>)
 800f18e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f192:	4618      	mov	r0, r3
 800f194:	f7f1 f936 	bl	8000404 <__aeabi_ui2d>
 800f198:	a363      	add	r3, pc, #396	; (adr r3, 800f328 <SX1276SetRx+0x2f0>)
 800f19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19e:	f7f0 fff5 	bl	800018c <__adddf3>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	f7f1 fc67 	bl	8000a7c <__aeabi_d2uiz>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fe ffb5 	bl	800e120 <SX1276SetChannel>
                    break;
 800f1b6:	e09b      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f1b8:	2144      	movs	r1, #68	; 0x44
 800f1ba:	202f      	movs	r0, #47	; 0x2f
 800f1bc:	f000 fb08 	bl	800f7d0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 800f1c0:	4b65      	ldr	r3, [pc, #404]	; (800f358 <SX1276SetRx+0x320>)
 800f1c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7f1 f91c 	bl	8000404 <__aeabi_ui2d>
 800f1cc:	a358      	add	r3, pc, #352	; (adr r3, 800f330 <SX1276SetRx+0x2f8>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f0 ffdb 	bl	800018c <__adddf3>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	4610      	mov	r0, r2
 800f1dc:	4619      	mov	r1, r3
 800f1de:	f7f1 fc4d 	bl	8000a7c <__aeabi_d2uiz>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7fe ff9b 	bl	800e120 <SX1276SetChannel>
                    break;
 800f1ea:	e081      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f1ec:	2144      	movs	r1, #68	; 0x44
 800f1ee:	202f      	movs	r0, #47	; 0x2f
 800f1f0:	f000 faee 	bl	800f7d0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800f1f4:	4b58      	ldr	r3, [pc, #352]	; (800f358 <SX1276SetRx+0x320>)
 800f1f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7f1 f902 	bl	8000404 <__aeabi_ui2d>
 800f200:	a34d      	add	r3, pc, #308	; (adr r3, 800f338 <SX1276SetRx+0x300>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	f7f0 ffc1 	bl	800018c <__adddf3>
 800f20a:	4602      	mov	r2, r0
 800f20c:	460b      	mov	r3, r1
 800f20e:	4610      	mov	r0, r2
 800f210:	4619      	mov	r1, r3
 800f212:	f7f1 fc33 	bl	8000a7c <__aeabi_d2uiz>
 800f216:	4603      	mov	r3, r0
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fe ff81 	bl	800e120 <SX1276SetChannel>
                    break;
 800f21e:	e067      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f220:	2144      	movs	r1, #68	; 0x44
 800f222:	202f      	movs	r0, #47	; 0x2f
 800f224:	f000 fad4 	bl	800f7d0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 800f228:	4b4b      	ldr	r3, [pc, #300]	; (800f358 <SX1276SetRx+0x320>)
 800f22a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f22e:	4618      	mov	r0, r3
 800f230:	f7f1 f8e8 	bl	8000404 <__aeabi_ui2d>
 800f234:	a342      	add	r3, pc, #264	; (adr r3, 800f340 <SX1276SetRx+0x308>)
 800f236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23a:	f7f0 ffa7 	bl	800018c <__adddf3>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	4610      	mov	r0, r2
 800f244:	4619      	mov	r1, r3
 800f246:	f7f1 fc19 	bl	8000a7c <__aeabi_d2uiz>
 800f24a:	4603      	mov	r3, r0
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe ff67 	bl	800e120 <SX1276SetChannel>
                    break;
 800f252:	e04d      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f254:	2144      	movs	r1, #68	; 0x44
 800f256:	202f      	movs	r0, #47	; 0x2f
 800f258:	f000 faba 	bl	800f7d0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800f25c:	4b3e      	ldr	r3, [pc, #248]	; (800f358 <SX1276SetRx+0x320>)
 800f25e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f262:	4618      	mov	r0, r3
 800f264:	f7f1 f8ce 	bl	8000404 <__aeabi_ui2d>
 800f268:	a337      	add	r3, pc, #220	; (adr r3, 800f348 <SX1276SetRx+0x310>)
 800f26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26e:	f7f0 ff8d 	bl	800018c <__adddf3>
 800f272:	4602      	mov	r2, r0
 800f274:	460b      	mov	r3, r1
 800f276:	4610      	mov	r0, r2
 800f278:	4619      	mov	r1, r3
 800f27a:	f7f1 fbff 	bl	8000a7c <__aeabi_d2uiz>
 800f27e:	4603      	mov	r3, r0
 800f280:	4618      	mov	r0, r3
 800f282:	f7fe ff4d 	bl	800e120 <SX1276SetChannel>
                    break;
 800f286:	e033      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800f288:	2144      	movs	r1, #68	; 0x44
 800f28a:	202f      	movs	r0, #47	; 0x2f
 800f28c:	f000 faa0 	bl	800f7d0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 800f290:	4b31      	ldr	r3, [pc, #196]	; (800f358 <SX1276SetRx+0x320>)
 800f292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f296:	4618      	mov	r0, r3
 800f298:	f7f1 f8b4 	bl	8000404 <__aeabi_ui2d>
 800f29c:	a32c      	add	r3, pc, #176	; (adr r3, 800f350 <SX1276SetRx+0x318>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 ff73 	bl	800018c <__adddf3>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4610      	mov	r0, r2
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	f7f1 fbe5 	bl	8000a7c <__aeabi_d2uiz>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7fe ff33 	bl	800e120 <SX1276SetChannel>
                    break;
 800f2ba:	e019      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f2bc:	2140      	movs	r1, #64	; 0x40
 800f2be:	202f      	movs	r0, #47	; 0x2f
 800f2c0:	f000 fa86 	bl	800f7d0 <SX1276Write>
                    break;
 800f2c4:	e014      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f2c6:	2140      	movs	r1, #64	; 0x40
 800f2c8:	202f      	movs	r0, #47	; 0x2f
 800f2ca:	f000 fa81 	bl	800f7d0 <SX1276Write>
                    break;
 800f2ce:	e00f      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800f2d0:	2140      	movs	r1, #64	; 0x40
 800f2d2:	202f      	movs	r0, #47	; 0x2f
 800f2d4:	f000 fa7c 	bl	800f7d0 <SX1276Write>
                    break;
 800f2d8:	e00a      	b.n	800f2f0 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800f2da:	2031      	movs	r0, #49	; 0x31
 800f2dc:	f000 fa8a 	bl	800f7f4 <SX1276Read>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	2031      	movs	r0, #49	; 0x31
 800f2ec:	f000 fa70 	bl	800f7d0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800f2f0:	4b19      	ldr	r3, [pc, #100]	; (800f358 <SX1276SetRx+0x320>)
 800f2f2:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800f2f6:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f2f8:	4b17      	ldr	r3, [pc, #92]	; (800f358 <SX1276SetRx+0x320>)
 800f2fa:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d02c      	beq.n	800f35c <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f302:	211d      	movs	r1, #29
 800f304:	2011      	movs	r0, #17
 800f306:	f000 fa63 	bl	800f7d0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800f30a:	2040      	movs	r0, #64	; 0x40
 800f30c:	f000 fa72 	bl	800f7f4 <SX1276Read>
 800f310:	4603      	mov	r3, r0
 800f312:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800f316:	b2db      	uxtb	r3, r3
 800f318:	4619      	mov	r1, r3
 800f31a:	2040      	movs	r0, #64	; 0x40
 800f31c:	f000 fa58 	bl	800f7d0 <SX1276Write>
 800f320:	e02b      	b.n	800f37a <SX1276SetRx+0x342>
 800f322:	bf00      	nop
 800f324:	f3af 8000 	nop.w
 800f328:	00000000 	.word	0x00000000
 800f32c:	40be8200 	.word	0x40be8200
 800f330:	00000000 	.word	0x00000000
 800f334:	40c45a00 	.word	0x40c45a00
 800f338:	00000000 	.word	0x00000000
 800f33c:	40ce8200 	.word	0x40ce8200
 800f340:	00000000 	.word	0x00000000
 800f344:	40d45780 	.word	0x40d45780
 800f348:	00000000 	.word	0x00000000
 800f34c:	40de8480 	.word	0x40de8480
 800f350:	00000000 	.word	0x00000000
 800f354:	40e458c0 	.word	0x40e458c0
 800f358:	200012f0 	.word	0x200012f0
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f35c:	211f      	movs	r1, #31
 800f35e:	2011      	movs	r0, #17
 800f360:	f000 fa36 	bl	800f7d0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800f364:	2040      	movs	r0, #64	; 0x40
 800f366:	f000 fa45 	bl	800f7f4 <SX1276Read>
 800f36a:	4603      	mov	r3, r0
 800f36c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f370:	b2db      	uxtb	r3, r3
 800f372:	4619      	mov	r1, r3
 800f374:	2040      	movs	r0, #64	; 0x40
 800f376:	f000 fa2b 	bl	800f7d0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800f37a:	2100      	movs	r1, #0
 800f37c:	200f      	movs	r0, #15
 800f37e:	f000 fa27 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800f382:	2100      	movs	r1, #0
 800f384:	200d      	movs	r0, #13
 800f386:	f000 fa23 	bl	800f7d0 <SX1276Write>
        }
        break;
 800f38a:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800f38c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f390:	2100      	movs	r1, #0
 800f392:	481c      	ldr	r0, [pc, #112]	; (800f404 <SX1276SetRx+0x3cc>)
 800f394:	f003 fa88 	bl	80128a8 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800f398:	4b1b      	ldr	r3, [pc, #108]	; (800f408 <SX1276SetRx+0x3d0>)
 800f39a:	2201      	movs	r2, #1
 800f39c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    if( timeout != 0 )
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d006      	beq.n	800f3b4 <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f3a6:	6879      	ldr	r1, [r7, #4]
 800f3a8:	4818      	ldr	r0, [pc, #96]	; (800f40c <SX1276SetRx+0x3d4>)
 800f3aa:	f001 fa45 	bl	8010838 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800f3ae:	4817      	ldr	r0, [pc, #92]	; (800f40c <SX1276SetRx+0x3d4>)
 800f3b0:	f001 f83e 	bl	8010430 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800f3b4:	4b14      	ldr	r3, [pc, #80]	; (800f408 <SX1276SetRx+0x3d0>)
 800f3b6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d113      	bne.n	800f3e6 <SX1276SetRx+0x3ae>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f3be:	2005      	movs	r0, #5
 800f3c0:	f000 f988 	bl	800f6d4 <SX1276SetOpMode>

        if( rxContinuous == false )
 800f3c4:	7bfb      	ldrb	r3, [r7, #15]
 800f3c6:	f083 0301 	eor.w	r3, r3, #1
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d014      	beq.n	800f3fa <SX1276SetRx+0x3c2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800f3d0:	4b0d      	ldr	r3, [pc, #52]	; (800f408 <SX1276SetRx+0x3d0>)
 800f3d2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	480d      	ldr	r0, [pc, #52]	; (800f410 <SX1276SetRx+0x3d8>)
 800f3da:	f001 fa2d 	bl	8010838 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800f3de:	480c      	ldr	r0, [pc, #48]	; (800f410 <SX1276SetRx+0x3d8>)
 800f3e0:	f001 f826 	bl	8010430 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800f3e4:	e009      	b.n	800f3fa <SX1276SetRx+0x3c2>
        if( rxContinuous == true )
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d003      	beq.n	800f3f4 <SX1276SetRx+0x3bc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800f3ec:	2005      	movs	r0, #5
 800f3ee:	f000 f971 	bl	800f6d4 <SX1276SetOpMode>
}
 800f3f2:	e002      	b.n	800f3fa <SX1276SetRx+0x3c2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800f3f4:	2006      	movs	r0, #6
 800f3f6:	f000 f96d 	bl	800f6d4 <SX1276SetOpMode>
}
 800f3fa:	bf00      	nop
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	200007b0 	.word	0x200007b0
 800f408:	200012f0 	.word	0x200012f0
 800f40c:	20001430 	.word	0x20001430
 800f410:	200012dc 	.word	0x200012dc

0800f414 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f41c:	6879      	ldr	r1, [r7, #4]
 800f41e:	4837      	ldr	r0, [pc, #220]	; (800f4fc <SX1276SetTx+0xe8>)
 800f420:	f001 fa0a 	bl	8010838 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800f424:	4b36      	ldr	r3, [pc, #216]	; (800f500 <SX1276SetTx+0xec>)
 800f426:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <SX1276SetTx+0x20>
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d026      	beq.n	800f480 <SX1276SetTx+0x6c>
 800f432:	e054      	b.n	800f4de <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f434:	2040      	movs	r0, #64	; 0x40
 800f436:	f000 f9dd 	bl	800f7f4 <SX1276Read>
 800f43a:	4603      	mov	r3, r0
 800f43c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800f43e:	f003 0303 	and.w	r3, r3, #3
 800f442:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 800f444:	f043 0310 	orr.w	r3, r3, #16
 800f448:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	4619      	mov	r1, r3
 800f44e:	2040      	movs	r0, #64	; 0x40
 800f450:	f000 f9be 	bl	800f7d0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f454:	2041      	movs	r0, #65	; 0x41
 800f456:	f000 f9cd 	bl	800f7f4 <SX1276Read>
 800f45a:	4603      	mov	r3, r0
 800f45c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f460:	b2db      	uxtb	r3, r3
 800f462:	4619      	mov	r1, r3
 800f464:	2041      	movs	r0, #65	; 0x41
 800f466:	f000 f9b3 	bl	800f7d0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f46a:	2035      	movs	r0, #53	; 0x35
 800f46c:	f000 f9c2 	bl	800f7f4 <SX1276Read>
 800f470:	4603      	mov	r3, r0
 800f472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f476:	b2da      	uxtb	r2, r3
 800f478:	4b21      	ldr	r3, [pc, #132]	; (800f500 <SX1276SetTx+0xec>)
 800f47a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
        }
        break;
 800f47e:	e02e      	b.n	800f4de <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f480:	4b1f      	ldr	r3, [pc, #124]	; (800f500 <SX1276SetTx+0xec>)
 800f482:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800f486:	2b00      	cmp	r3, #0
 800f488:	d014      	beq.n	800f4b4 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f48a:	21f5      	movs	r1, #245	; 0xf5
 800f48c:	2011      	movs	r0, #17
 800f48e:	f000 f99f 	bl	800f7d0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800f492:	2040      	movs	r0, #64	; 0x40
 800f494:	f000 f9ae 	bl	800f7f4 <SX1276Read>
 800f498:	4603      	mov	r3, r0
 800f49a:	b25b      	sxtb	r3, r3
 800f49c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800f4a0:	b25b      	sxtb	r3, r3
 800f4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4a6:	b25b      	sxtb	r3, r3
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	2040      	movs	r0, #64	; 0x40
 800f4ae:	f000 f98f 	bl	800f7d0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800f4b2:	e013      	b.n	800f4dc <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f4b4:	21f7      	movs	r1, #247	; 0xf7
 800f4b6:	2011      	movs	r0, #17
 800f4b8:	f000 f98a 	bl	800f7d0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800f4bc:	2040      	movs	r0, #64	; 0x40
 800f4be:	f000 f999 	bl	800f7f4 <SX1276Read>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	b25b      	sxtb	r3, r3
 800f4c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4ca:	b25b      	sxtb	r3, r3
 800f4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4d0:	b25b      	sxtb	r3, r3
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	2040      	movs	r0, #64	; 0x40
 800f4d8:	f000 f97a 	bl	800f7d0 <SX1276Write>
        break;
 800f4dc:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800f4de:	4b08      	ldr	r3, [pc, #32]	; (800f500 <SX1276SetTx+0xec>)
 800f4e0:	2202      	movs	r2, #2
 800f4e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800f4e6:	4805      	ldr	r0, [pc, #20]	; (800f4fc <SX1276SetTx+0xe8>)
 800f4e8:	f000 ffa2 	bl	8010430 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800f4ec:	2003      	movs	r0, #3
 800f4ee:	f000 f8f1 	bl	800f6d4 <SX1276SetOpMode>
}
 800f4f2:	bf00      	nop
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	200012c8 	.word	0x200012c8
 800f500:	200012f0 	.word	0x200012f0

0800f504 <SX1276StartCad>:

void SX1276StartCad( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800f508:	4b10      	ldr	r3, [pc, #64]	; (800f54c <SX1276StartCad+0x48>)
 800f50a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d019      	beq.n	800f546 <SX1276StartCad+0x42>
 800f512:	2b01      	cmp	r3, #1
 800f514:	d000      	beq.n	800f518 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800f516:	e017      	b.n	800f548 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f518:	21fa      	movs	r1, #250	; 0xfa
 800f51a:	2011      	movs	r0, #17
 800f51c:	f000 f958 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800f520:	2040      	movs	r0, #64	; 0x40
 800f522:	f000 f967 	bl	800f7f4 <SX1276Read>
 800f526:	4603      	mov	r3, r0
 800f528:	f023 0303 	bic.w	r3, r3, #3
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	4619      	mov	r1, r3
 800f530:	2040      	movs	r0, #64	; 0x40
 800f532:	f000 f94d 	bl	800f7d0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800f536:	4b05      	ldr	r3, [pc, #20]	; (800f54c <SX1276StartCad+0x48>)
 800f538:	2203      	movs	r2, #3
 800f53a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800f53e:	2007      	movs	r0, #7
 800f540:	f000 f8c8 	bl	800f6d4 <SX1276SetOpMode>
        break;
 800f544:	e000      	b.n	800f548 <SX1276StartCad+0x44>
        break;
 800f546:	bf00      	nop
    }
}
 800f548:	bf00      	nop
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	200012f0 	.word	0x200012f0

0800f550 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b08e      	sub	sp, #56	; 0x38
 800f554:	af0a      	add	r7, sp, #40	; 0x28
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	70fb      	strb	r3, [r7, #3]
 800f55c:	4613      	mov	r3, r2
 800f55e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800f560:	883b      	ldrh	r3, [r7, #0]
 800f562:	4618      	mov	r0, r3
 800f564:	f7f0 ff5e 	bl	8000424 <__aeabi_i2d>
 800f568:	f04f 0200 	mov.w	r2, #0
 800f56c:	4b26      	ldr	r3, [pc, #152]	; (800f608 <SX1276SetTxContinuousWave+0xb8>)
 800f56e:	f7f0 ffc3 	bl	80004f8 <__aeabi_dmul>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	4610      	mov	r0, r2
 800f578:	4619      	mov	r1, r3
 800f57a:	f7f1 fa7f 	bl	8000a7c <__aeabi_d2uiz>
 800f57e:	4603      	mov	r3, r0
 800f580:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7fe fdcc 	bl	800e120 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800f588:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	9308      	str	r3, [sp, #32]
 800f590:	2300      	movs	r3, #0
 800f592:	9307      	str	r3, [sp, #28]
 800f594:	2300      	movs	r3, #0
 800f596:	9306      	str	r3, [sp, #24]
 800f598:	2300      	movs	r3, #0
 800f59a:	9305      	str	r3, [sp, #20]
 800f59c:	2300      	movs	r3, #0
 800f59e:	9304      	str	r3, [sp, #16]
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	9303      	str	r3, [sp, #12]
 800f5a4:	2305      	movs	r3, #5
 800f5a6:	9302      	str	r3, [sp, #8]
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	9301      	str	r3, [sp, #4]
 800f5ac:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800f5b0:	9300      	str	r3, [sp, #0]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	f7ff f8fa 	bl	800e7b0 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800f5bc:	2031      	movs	r0, #49	; 0x31
 800f5be:	f000 f919 	bl	800f7f4 <SX1276Read>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	2031      	movs	r0, #49	; 0x31
 800f5ce:	f000 f8ff 	bl	800f7d0 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800f5d2:	21f0      	movs	r1, #240	; 0xf0
 800f5d4:	2040      	movs	r0, #64	; 0x40
 800f5d6:	f000 f8fb 	bl	800f7d0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800f5da:	21a0      	movs	r1, #160	; 0xa0
 800f5dc:	2041      	movs	r0, #65	; 0x41
 800f5de:	f000 f8f7 	bl	800f7d0 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800f5e2:	68f9      	ldr	r1, [r7, #12]
 800f5e4:	4809      	ldr	r0, [pc, #36]	; (800f60c <SX1276SetTxContinuousWave+0xbc>)
 800f5e6:	f001 f927 	bl	8010838 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 800f5ea:	4b09      	ldr	r3, [pc, #36]	; (800f610 <SX1276SetTxContinuousWave+0xc0>)
 800f5ec:	2202      	movs	r2, #2
 800f5ee:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800f5f2:	4806      	ldr	r0, [pc, #24]	; (800f60c <SX1276SetTxContinuousWave+0xbc>)
 800f5f4:	f000 ff1c 	bl	8010430 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800f5f8:	2003      	movs	r0, #3
 800f5fa:	f000 f86b 	bl	800f6d4 <SX1276SetOpMode>
}
 800f5fe:	bf00      	nop
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	408f4000 	.word	0x408f4000
 800f60c:	200012c8 	.word	0x200012c8
 800f610:	200012f0 	.word	0x200012f0

0800f614 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	4603      	mov	r3, r0
 800f61c:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800f61e:	2300      	movs	r3, #0
 800f620:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800f622:	79fb      	ldrb	r3, [r7, #7]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d002      	beq.n	800f62e <SX1276ReadRssi+0x1a>
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d00b      	beq.n	800f644 <SX1276ReadRssi+0x30>
 800f62c:	e022      	b.n	800f674 <SX1276ReadRssi+0x60>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800f62e:	2011      	movs	r0, #17
 800f630:	f000 f8e0 	bl	800f7f4 <SX1276Read>
 800f634:	4603      	mov	r3, r0
 800f636:	085b      	lsrs	r3, r3, #1
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	425b      	negs	r3, r3
 800f63e:	b29b      	uxth	r3, r3
 800f640:	81fb      	strh	r3, [r7, #14]
        break;
 800f642:	e01b      	b.n	800f67c <SX1276ReadRssi+0x68>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f644:	4b10      	ldr	r3, [pc, #64]	; (800f688 <SX1276ReadRssi+0x74>)
 800f646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f64a:	4a10      	ldr	r2, [pc, #64]	; (800f68c <SX1276ReadRssi+0x78>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d908      	bls.n	800f662 <SX1276ReadRssi+0x4e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800f650:	201b      	movs	r0, #27
 800f652:	f000 f8cf 	bl	800f7f4 <SX1276Read>
 800f656:	4603      	mov	r3, r0
 800f658:	b29b      	uxth	r3, r3
 800f65a:	3b9d      	subs	r3, #157	; 0x9d
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800f660:	e00c      	b.n	800f67c <SX1276ReadRssi+0x68>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800f662:	201b      	movs	r0, #27
 800f664:	f000 f8c6 	bl	800f7f4 <SX1276Read>
 800f668:	4603      	mov	r3, r0
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	3ba4      	subs	r3, #164	; 0xa4
 800f66e:	b29b      	uxth	r3, r3
 800f670:	81fb      	strh	r3, [r7, #14]
        break;
 800f672:	e003      	b.n	800f67c <SX1276ReadRssi+0x68>
    default:
        rssi = -1;
 800f674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f678:	81fb      	strh	r3, [r7, #14]
        break;
 800f67a:	bf00      	nop
    }
    return rssi;
 800f67c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	200012f0 	.word	0x200012f0
 800f68c:	1f4add40 	.word	0x1f4add40

0800f690 <SX1276Reset>:

void SX1276Reset( void )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800f696:	2300      	movs	r3, #0
 800f698:	9301      	str	r3, [sp, #4]
 800f69a:	2300      	movs	r3, #0
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	2103      	movs	r1, #3
 800f6a4:	480a      	ldr	r0, [pc, #40]	; (800f6d0 <SX1276Reset+0x40>)
 800f6a6:	f7fc feb7 	bl	800c418 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	f7fc fbc3 	bl	800be36 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	9301      	str	r3, [sp, #4]
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2103      	movs	r1, #3
 800f6be:	4804      	ldr	r0, [pc, #16]	; (800f6d0 <SX1276Reset+0x40>)
 800f6c0:	f7fc feaa 	bl	800c418 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 800f6c4:	2006      	movs	r0, #6
 800f6c6:	f7fc fbb6 	bl	800be36 <DelayMs>
}
 800f6ca:	bf00      	nop
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	200012f0 	.word	0x200012f0

0800f6d4 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d103      	bne.n	800f6ec <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 800f6e4:	2001      	movs	r0, #1
 800f6e6:	f7fe fc6f 	bl	800dfc8 <SX1276SetAntSwLowPower>
 800f6ea:	e006      	b.n	800f6fa <SX1276SetOpMode+0x26>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f7fe fc6b 	bl	800dfc8 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fc91 	bl	800e01c <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f6fa:	2001      	movs	r0, #1
 800f6fc:	f000 f87a 	bl	800f7f4 <SX1276Read>
 800f700:	4603      	mov	r3, r0
 800f702:	b25b      	sxtb	r3, r3
 800f704:	f023 0307 	bic.w	r3, r3, #7
 800f708:	b25a      	sxtb	r2, r3
 800f70a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f70e:	4313      	orrs	r3, r2
 800f710:	b25b      	sxtb	r3, r3
 800f712:	b2db      	uxtb	r3, r3
 800f714:	4619      	mov	r1, r3
 800f716:	2001      	movs	r0, #1
 800f718:	f000 f85a 	bl	800f7d0 <SX1276Write>
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	4603      	mov	r3, r0
 800f72c:	71fb      	strb	r3, [r7, #7]
    assert_param( ( SX1276.Spi.Spi.Instance != NULL ) );

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800f72e:	2001      	movs	r0, #1
 800f730:	f000 f860 	bl	800f7f4 <SX1276Read>
 800f734:	4603      	mov	r3, r0
 800f736:	b25b      	sxtb	r3, r3
 800f738:	2b00      	cmp	r3, #0
 800f73a:	da04      	bge.n	800f746 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 800f73c:	4b23      	ldr	r3, [pc, #140]	; (800f7cc <SX1276SetModem+0xa8>)
 800f73e:	2201      	movs	r2, #1
 800f740:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800f744:	e003      	b.n	800f74e <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 800f746:	4b21      	ldr	r3, [pc, #132]	; (800f7cc <SX1276SetModem+0xa8>)
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    }

    if( SX1276.Settings.Modem == modem )
 800f74e:	4b1f      	ldr	r3, [pc, #124]	; (800f7cc <SX1276SetModem+0xa8>)
 800f750:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f754:	79fa      	ldrb	r2, [r7, #7]
 800f756:	429a      	cmp	r2, r3
 800f758:	d034      	beq.n	800f7c4 <SX1276SetModem+0xa0>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 800f75a:	4a1c      	ldr	r2, [pc, #112]	; (800f7cc <SX1276SetModem+0xa8>)
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    switch( SX1276.Settings.Modem )
 800f762:	4b1a      	ldr	r3, [pc, #104]	; (800f7cc <SX1276SetModem+0xa8>)
 800f764:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d015      	beq.n	800f798 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 800f76c:	f7ff fc34 	bl	800efd8 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800f770:	2001      	movs	r0, #1
 800f772:	f000 f83f 	bl	800f7f4 <SX1276Read>
 800f776:	4603      	mov	r3, r0
 800f778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	4619      	mov	r1, r3
 800f780:	2001      	movs	r0, #1
 800f782:	f000 f825 	bl	800f7d0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f786:	2100      	movs	r1, #0
 800f788:	2040      	movs	r0, #64	; 0x40
 800f78a:	f000 f821 	bl	800f7d0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800f78e:	2130      	movs	r1, #48	; 0x30
 800f790:	2041      	movs	r0, #65	; 0x41
 800f792:	f000 f81d 	bl	800f7d0 <SX1276Write>
        break;
 800f796:	e016      	b.n	800f7c6 <SX1276SetModem+0xa2>
    case MODEM_LORA:
        SX1276SetSleep( );
 800f798:	f7ff fc1e 	bl	800efd8 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800f79c:	2001      	movs	r0, #1
 800f79e:	f000 f829 	bl	800f7f4 <SX1276Read>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	2001      	movs	r0, #1
 800f7ae:	f000 f80f 	bl	800f7d0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	2040      	movs	r0, #64	; 0x40
 800f7b6:	f000 f80b 	bl	800f7d0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	2041      	movs	r0, #65	; 0x41
 800f7be:	f000 f807 	bl	800f7d0 <SX1276Write>
        break;
 800f7c2:	e000      	b.n	800f7c6 <SX1276SetModem+0xa2>
        return;
 800f7c4:	bf00      	nop
    }
}
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	200012f0 	.word	0x200012f0

0800f7d0 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	460a      	mov	r2, r1
 800f7da:	71fb      	strb	r3, [r7, #7]
 800f7dc:	4613      	mov	r3, r2
 800f7de:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800f7e0:	1db9      	adds	r1, r7, #6
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f000 f816 	bl	800f818 <SX1276WriteBuffer>
}
 800f7ec:	bf00      	nop
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800f7fe:	f107 010f 	add.w	r1, r7, #15
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	2201      	movs	r2, #1
 800f806:	4618      	mov	r0, r3
 800f808:	f000 f83a 	bl	800f880 <SX1276ReadBuffer>
    return data;
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	6039      	str	r1, [r7, #0]
 800f822:	71fb      	strb	r3, [r7, #7]
 800f824:	4613      	mov	r3, r2
 800f826:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f828:	2100      	movs	r1, #0
 800f82a:	4813      	ldr	r0, [pc, #76]	; (800f878 <SX1276WriteBuffer+0x60>)
 800f82c:	f7fc fe33 	bl	800c496 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f836:	b2db      	uxtb	r3, r3
 800f838:	b29b      	uxth	r3, r3
 800f83a:	4619      	mov	r1, r3
 800f83c:	480f      	ldr	r0, [pc, #60]	; (800f87c <SX1276WriteBuffer+0x64>)
 800f83e:	f7fe f89d 	bl	800d97c <SpiInOut>
    for( i = 0; i < size; i++ )
 800f842:	2300      	movs	r3, #0
 800f844:	73fb      	strb	r3, [r7, #15]
 800f846:	e00b      	b.n	800f860 <SX1276WriteBuffer+0x48>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 800f848:	7bfb      	ldrb	r3, [r7, #15]
 800f84a:	683a      	ldr	r2, [r7, #0]
 800f84c:	4413      	add	r3, r2
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	b29b      	uxth	r3, r3
 800f852:	4619      	mov	r1, r3
 800f854:	4809      	ldr	r0, [pc, #36]	; (800f87c <SX1276WriteBuffer+0x64>)
 800f856:	f7fe f891 	bl	800d97c <SpiInOut>
    for( i = 0; i < size; i++ )
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
 800f85c:	3301      	adds	r3, #1
 800f85e:	73fb      	strb	r3, [r7, #15]
 800f860:	7bfa      	ldrb	r2, [r7, #15]
 800f862:	79bb      	ldrb	r3, [r7, #6]
 800f864:	429a      	cmp	r2, r3
 800f866:	d3ef      	bcc.n	800f848 <SX1276WriteBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f868:	2101      	movs	r1, #1
 800f86a:	4803      	ldr	r0, [pc, #12]	; (800f878 <SX1276WriteBuffer+0x60>)
 800f86c:	f7fc fe13 	bl	800c496 <GpioWrite>
}
 800f870:	bf00      	nop
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	200013c0 	.word	0x200013c0
 800f87c:	20001344 	.word	0x20001344

0800f880 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b084      	sub	sp, #16
 800f884:	af00      	add	r7, sp, #0
 800f886:	4603      	mov	r3, r0
 800f888:	6039      	str	r1, [r7, #0]
 800f88a:	71fb      	strb	r3, [r7, #7]
 800f88c:	4613      	mov	r3, r2
 800f88e:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f890:	2100      	movs	r1, #0
 800f892:	4814      	ldr	r0, [pc, #80]	; (800f8e4 <SX1276ReadBuffer+0x64>)
 800f894:	f7fc fdff 	bl	800c496 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 800f898:	79fb      	ldrb	r3, [r7, #7]
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4810      	ldr	r0, [pc, #64]	; (800f8e8 <SX1276ReadBuffer+0x68>)
 800f8a6:	f7fe f869 	bl	800d97c <SpiInOut>

    for( i = 0; i < size; i++ )
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73fb      	strb	r3, [r7, #15]
 800f8ae:	e00d      	b.n	800f8cc <SX1276ReadBuffer+0x4c>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	480d      	ldr	r0, [pc, #52]	; (800f8e8 <SX1276ReadBuffer+0x68>)
 800f8b4:	f7fe f862 	bl	800d97c <SpiInOut>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
 800f8be:	683a      	ldr	r2, [r7, #0]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	b2ca      	uxtb	r2, r1
 800f8c4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800f8c6:	7bfb      	ldrb	r3, [r7, #15]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	73fb      	strb	r3, [r7, #15]
 800f8cc:	7bfa      	ldrb	r2, [r7, #15]
 800f8ce:	79bb      	ldrb	r3, [r7, #6]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d3ed      	bcc.n	800f8b0 <SX1276ReadBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	4803      	ldr	r0, [pc, #12]	; (800f8e4 <SX1276ReadBuffer+0x64>)
 800f8d8:	f7fc fddd 	bl	800c496 <GpioWrite>
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	200013c0 	.word	0x200013c0
 800f8e8:	20001344 	.word	0x20001344

0800f8ec <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800f8f8:	78fb      	ldrb	r3, [r7, #3]
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	2000      	movs	r0, #0
 800f900:	f7ff ff8a 	bl	800f818 <SX1276WriteBuffer>
}
 800f904:	bf00      	nop
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	460b      	mov	r3, r1
 800f916:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800f918:	78fb      	ldrb	r3, [r7, #3]
 800f91a:	461a      	mov	r2, r3
 800f91c:	6879      	ldr	r1, [r7, #4]
 800f91e:	2000      	movs	r0, #0
 800f920:	f7ff ffae 	bl	800f880 <SX1276ReadBuffer>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	460a      	mov	r2, r1
 800f936:	71fb      	strb	r3, [r7, #7]
 800f938:	4613      	mov	r3, r2
 800f93a:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800f93c:	79fb      	ldrb	r3, [r7, #7]
 800f93e:	4618      	mov	r0, r3
 800f940:	f7ff fef0 	bl	800f724 <SX1276SetModem>

    switch( modem )
 800f944:	79fb      	ldrb	r3, [r7, #7]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d002      	beq.n	800f950 <SX1276SetMaxPayloadLength+0x24>
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	d00e      	beq.n	800f96c <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800f94e:	e014      	b.n	800f97a <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 800f950:	4b0c      	ldr	r3, [pc, #48]	; (800f984 <SX1276SetMaxPayloadLength+0x58>)
 800f952:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f956:	f083 0301 	eor.w	r3, r3, #1
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00b      	beq.n	800f978 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800f960:	79bb      	ldrb	r3, [r7, #6]
 800f962:	4619      	mov	r1, r3
 800f964:	2032      	movs	r0, #50	; 0x32
 800f966:	f7ff ff33 	bl	800f7d0 <SX1276Write>
        break;
 800f96a:	e005      	b.n	800f978 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800f96c:	79bb      	ldrb	r3, [r7, #6]
 800f96e:	4619      	mov	r1, r3
 800f970:	2023      	movs	r0, #35	; 0x23
 800f972:	f7ff ff2d 	bl	800f7d0 <SX1276Write>
        break;
 800f976:	e000      	b.n	800f97a <SX1276SetMaxPayloadLength+0x4e>
        break;
 800f978:	bf00      	nop
}
 800f97a:	bf00      	nop
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	200012f0 	.word	0x200012f0

0800f988 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	4603      	mov	r3, r0
 800f990:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 800f992:	2001      	movs	r0, #1
 800f994:	f7ff fec6 	bl	800f724 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800f998:	4a09      	ldr	r2, [pc, #36]	; (800f9c0 <SX1276SetPublicNetwork+0x38>)
 800f99a:	79fb      	ldrb	r3, [r7, #7]
 800f99c:	f882 3134 	strb.w	r3, [r2, #308]	; 0x134
    if( enable == true )
 800f9a0:	79fb      	ldrb	r3, [r7, #7]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d004      	beq.n	800f9b0 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800f9a6:	2134      	movs	r1, #52	; 0x34
 800f9a8:	2039      	movs	r0, #57	; 0x39
 800f9aa:	f7ff ff11 	bl	800f7d0 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 800f9ae:	e003      	b.n	800f9b8 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800f9b0:	2112      	movs	r1, #18
 800f9b2:	2039      	movs	r0, #57	; 0x39
 800f9b4:	f7ff ff0c 	bl	800f7d0 <SX1276Write>
}
 800f9b8:	bf00      	nop
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	200012f0 	.word	0x200012f0

0800f9c4 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	af00      	add	r7, sp, #0
    return  RADIO_WAKEUP_TIME;
 800f9c8:	2301      	movs	r3, #1
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bc80      	pop	{r7}
 800f9d0:	4770      	bx	lr
	...

0800f9d4 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800f9da:	4b4e      	ldr	r3, [pc, #312]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800f9dc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d002      	beq.n	800f9ea <SX1276OnTimeoutIrq+0x16>
 800f9e4:	2b02      	cmp	r3, #2
 800f9e6:	d046      	beq.n	800fa76 <SX1276OnTimeoutIrq+0xa2>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800f9e8:	e090      	b.n	800fb0c <SX1276OnTimeoutIrq+0x138>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800f9ea:	4b4a      	ldr	r3, [pc, #296]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800f9ec:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d132      	bne.n	800fa5a <SX1276OnTimeoutIrq+0x86>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f9f4:	4b47      	ldr	r3, [pc, #284]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f9fc:	4b45      	ldr	r3, [pc, #276]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800fa04:	4b43      	ldr	r3, [pc, #268]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800fa06:	2200      	movs	r2, #0
 800fa08:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800fa0c:	4b41      	ldr	r3, [pc, #260]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800fa14:	210b      	movs	r1, #11
 800fa16:	203e      	movs	r0, #62	; 0x3e
 800fa18:	f7ff feda 	bl	800f7d0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800fa1c:	2110      	movs	r1, #16
 800fa1e:	203f      	movs	r0, #63	; 0x3f
 800fa20:	f7ff fed6 	bl	800f7d0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800fa24:	4b3b      	ldr	r3, [pc, #236]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800fa26:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00e      	beq.n	800fa4c <SX1276OnTimeoutIrq+0x78>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800fa2e:	200d      	movs	r0, #13
 800fa30:	f7ff fee0 	bl	800f7f4 <SX1276Read>
 800fa34:	4603      	mov	r3, r0
 800fa36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	200d      	movs	r0, #13
 800fa40:	f7ff fec6 	bl	800f7d0 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800fa44:	4834      	ldr	r0, [pc, #208]	; (800fb18 <SX1276OnTimeoutIrq+0x144>)
 800fa46:	f000 fcf3 	bl	8010430 <TimerStart>
 800fa4a:	e006      	b.n	800fa5a <SX1276OnTimeoutIrq+0x86>
                SX1276.Settings.State = RF_IDLE;
 800fa4c:	4b31      	ldr	r3, [pc, #196]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                TimerStop( &RxTimeoutSyncWord );
 800fa54:	4830      	ldr	r0, [pc, #192]	; (800fb18 <SX1276OnTimeoutIrq+0x144>)
 800fa56:	f000 fe33 	bl	80106c0 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fa5a:	4b30      	ldr	r3, [pc, #192]	; (800fb1c <SX1276OnTimeoutIrq+0x148>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d051      	beq.n	800fb06 <SX1276OnTimeoutIrq+0x132>
 800fa62:	4b2e      	ldr	r3, [pc, #184]	; (800fb1c <SX1276OnTimeoutIrq+0x148>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d04c      	beq.n	800fb06 <SX1276OnTimeoutIrq+0x132>
            RadioEvents->RxTimeout( );
 800fa6c:	4b2b      	ldr	r3, [pc, #172]	; (800fb1c <SX1276OnTimeoutIrq+0x148>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	4798      	blx	r3
        break;
 800fa74:	e047      	b.n	800fb06 <SX1276OnTimeoutIrq+0x132>
        SX1276Reset( );
 800fa76:	f7ff fe0b 	bl	800f690 <SX1276Reset>
        RxChainCalibration( );
 800fa7a:	f7fe fbe1 	bl	800e240 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f7ff fe28 	bl	800f6d4 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800fa84:	2300      	movs	r3, #0
 800fa86:	71fb      	strb	r3, [r7, #7]
 800fa88:	e01f      	b.n	800faca <SX1276OnTimeoutIrq+0xf6>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800fa8a:	79fa      	ldrb	r2, [r7, #7]
 800fa8c:	4924      	ldr	r1, [pc, #144]	; (800fb20 <SX1276OnTimeoutIrq+0x14c>)
 800fa8e:	4613      	mov	r3, r2
 800fa90:	005b      	lsls	r3, r3, #1
 800fa92:	4413      	add	r3, r2
 800fa94:	440b      	add	r3, r1
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff fe43 	bl	800f724 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800fa9e:	79fa      	ldrb	r2, [r7, #7]
 800faa0:	491f      	ldr	r1, [pc, #124]	; (800fb20 <SX1276OnTimeoutIrq+0x14c>)
 800faa2:	4613      	mov	r3, r2
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	4413      	add	r3, r2
 800faa8:	440b      	add	r3, r1
 800faaa:	3301      	adds	r3, #1
 800faac:	7818      	ldrb	r0, [r3, #0]
 800faae:	79fa      	ldrb	r2, [r7, #7]
 800fab0:	491b      	ldr	r1, [pc, #108]	; (800fb20 <SX1276OnTimeoutIrq+0x14c>)
 800fab2:	4613      	mov	r3, r2
 800fab4:	005b      	lsls	r3, r3, #1
 800fab6:	4413      	add	r3, r2
 800fab8:	440b      	add	r3, r1
 800faba:	3302      	adds	r3, #2
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	4619      	mov	r1, r3
 800fac0:	f7ff fe86 	bl	800f7d0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800fac4:	79fb      	ldrb	r3, [r7, #7]
 800fac6:	3301      	adds	r3, #1
 800fac8:	71fb      	strb	r3, [r7, #7]
 800faca:	79fb      	ldrb	r3, [r7, #7]
 800facc:	2b0f      	cmp	r3, #15
 800face:	d9dc      	bls.n	800fa8a <SX1276OnTimeoutIrq+0xb6>
        SX1276SetModem( MODEM_FSK );
 800fad0:	2000      	movs	r0, #0
 800fad2:	f7ff fe27 	bl	800f724 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800fad6:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800fad8:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800fadc:	4618      	mov	r0, r3
 800fade:	f7ff ff53 	bl	800f988 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800fae2:	4b0c      	ldr	r3, [pc, #48]	; (800fb14 <SX1276OnTimeoutIrq+0x140>)
 800fae4:	2200      	movs	r2, #0
 800fae6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800faea:	4b0c      	ldr	r3, [pc, #48]	; (800fb1c <SX1276OnTimeoutIrq+0x148>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d00b      	beq.n	800fb0a <SX1276OnTimeoutIrq+0x136>
 800faf2:	4b0a      	ldr	r3, [pc, #40]	; (800fb1c <SX1276OnTimeoutIrq+0x148>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d006      	beq.n	800fb0a <SX1276OnTimeoutIrq+0x136>
            RadioEvents->TxTimeout( );
 800fafc:	4b07      	ldr	r3, [pc, #28]	; (800fb1c <SX1276OnTimeoutIrq+0x148>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	4798      	blx	r3
        break;
 800fb04:	e001      	b.n	800fb0a <SX1276OnTimeoutIrq+0x136>
        break;
 800fb06:	bf00      	nop
 800fb08:	e000      	b.n	800fb0c <SX1276OnTimeoutIrq+0x138>
        break;
 800fb0a:	bf00      	nop
    }
}
 800fb0c:	bf00      	nop
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	200012f0 	.word	0x200012f0
 800fb18:	200012dc 	.word	0x200012dc
 800fb1c:	200007ac 	.word	0x200007ac
 800fb20:	08013134 	.word	0x08013134

0800fb24 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 800fb24:	b590      	push	{r4, r7, lr}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	70fb      	strb	r3, [r7, #3]
	//DebugPrintf("0");
    switch( SX1276.Settings.State )
 800fb2e:	4ba9      	ldr	r3, [pc, #676]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fb30:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d003      	beq.n	800fb40 <SX1276OnDio0Irq+0x1c>
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	f000 81f4 	beq.w	800ff26 <SX1276OnDio0Irq+0x402>
                }
                break;
            }
            break;
        default:
            break;
 800fb3e:	e211      	b.n	800ff64 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 800fb40:	4ba4      	ldr	r3, [pc, #656]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fb42:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d003      	beq.n	800fb52 <SX1276OnDio0Irq+0x2e>
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	f000 80f2 	beq.w	800fd34 <SX1276OnDio0Irq+0x210>
                break;
 800fb50:	e1e8      	b.n	800ff24 <SX1276OnDio0Irq+0x400>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800fb52:	4ba0      	ldr	r3, [pc, #640]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fb54:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d051      	beq.n	800fc00 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800fb5c:	203f      	movs	r0, #63	; 0x3f
 800fb5e:	f7ff fe49 	bl	800f7f4 <SX1276Read>
 800fb62:	4603      	mov	r3, r0
 800fb64:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800fb66:	78fb      	ldrb	r3, [r7, #3]
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	f003 0302 	and.w	r3, r3, #2
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d046      	beq.n	800fc00 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800fb72:	210b      	movs	r1, #11
 800fb74:	203e      	movs	r0, #62	; 0x3e
 800fb76:	f7ff fe2b 	bl	800f7d0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800fb7a:	2110      	movs	r1, #16
 800fb7c:	203f      	movs	r0, #63	; 0x3f
 800fb7e:	f7ff fe27 	bl	800f7d0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800fb82:	4895      	ldr	r0, [pc, #596]	; (800fdd8 <SX1276OnDio0Irq+0x2b4>)
 800fb84:	f000 fd9c 	bl	80106c0 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800fb88:	4b92      	ldr	r3, [pc, #584]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fb8a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800fb8e:	f083 0301 	eor.w	r3, r3, #1
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d007      	beq.n	800fba8 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 800fb98:	4890      	ldr	r0, [pc, #576]	; (800fddc <SX1276OnDio0Irq+0x2b8>)
 800fb9a:	f000 fd91 	bl	80106c0 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800fb9e:	4b8d      	ldr	r3, [pc, #564]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800fba6:	e00d      	b.n	800fbc4 <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800fba8:	200d      	movs	r0, #13
 800fbaa:	f7ff fe23 	bl	800f7f4 <SX1276Read>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	200d      	movs	r0, #13
 800fbba:	f7ff fe09 	bl	800f7d0 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800fbbe:	4887      	ldr	r0, [pc, #540]	; (800fddc <SX1276OnDio0Irq+0x2b8>)
 800fbc0:	f000 fc36 	bl	8010430 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800fbc4:	4b86      	ldr	r3, [pc, #536]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d008      	beq.n	800fbde <SX1276OnDio0Irq+0xba>
 800fbcc:	4b84      	ldr	r3, [pc, #528]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d003      	beq.n	800fbde <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 800fbd6:	4b82      	ldr	r3, [pc, #520]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800fbde:	4b7d      	ldr	r3, [pc, #500]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800fbe6:	4b7b      	ldr	r3, [pc, #492]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800fbee:	4b79      	ldr	r3, [pc, #484]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800fbf6:	4b77      	ldr	r3, [pc, #476]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                        break;
 800fbfe:	e191      	b.n	800ff24 <SX1276OnDio0Irq+0x400>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800fc00:	4b74      	ldr	r3, [pc, #464]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc02:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d133      	bne.n	800fc72 <SX1276OnDio0Irq+0x14e>
 800fc0a:	4b72      	ldr	r3, [pc, #456]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc0c:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d12e      	bne.n	800fc72 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800fc14:	4b6f      	ldr	r3, [pc, #444]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc16:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800fc1a:	f083 0301 	eor.w	r3, r3, #1
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d004      	beq.n	800fc2e <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800fc24:	2101      	movs	r1, #1
 800fc26:	486f      	ldr	r0, [pc, #444]	; (800fde4 <SX1276OnDio0Irq+0x2c0>)
 800fc28:	f7ff fe70 	bl	800f90c <SX1276ReadFifo>
 800fc2c:	e007      	b.n	800fc3e <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800fc2e:	2032      	movs	r0, #50	; 0x32
 800fc30:	f7ff fde0 	bl	800f7f4 <SX1276Read>
 800fc34:	4603      	mov	r3, r0
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	4b66      	ldr	r3, [pc, #408]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc3a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fc3e:	4b65      	ldr	r3, [pc, #404]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc40:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fc44:	461a      	mov	r2, r3
 800fc46:	4b68      	ldr	r3, [pc, #416]	; (800fde8 <SX1276OnDio0Irq+0x2c4>)
 800fc48:	18d0      	adds	r0, r2, r3
 800fc4a:	4b62      	ldr	r3, [pc, #392]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc4c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fc50:	b2da      	uxtb	r2, r3
 800fc52:	4b60      	ldr	r3, [pc, #384]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc54:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	4619      	mov	r1, r3
 800fc60:	f7ff fe54 	bl	800f90c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fc64:	4b5b      	ldr	r3, [pc, #364]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc66:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800fc6a:	4b5a      	ldr	r3, [pc, #360]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc6c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800fc70:	e018      	b.n	800fca4 <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fc72:	4b58      	ldr	r3, [pc, #352]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc74:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b5b      	ldr	r3, [pc, #364]	; (800fde8 <SX1276OnDio0Irq+0x2c4>)
 800fc7c:	18d0      	adds	r0, r2, r3
 800fc7e:	4b55      	ldr	r3, [pc, #340]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc80:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fc84:	b2da      	uxtb	r2, r3
 800fc86:	4b53      	ldr	r3, [pc, #332]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc88:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	4619      	mov	r1, r3
 800fc94:	f7ff fe3a 	bl	800f90c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fc98:	4b4e      	ldr	r3, [pc, #312]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fc9a:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800fc9e:	4b4d      	ldr	r3, [pc, #308]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fca0:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                TimerStop( &RxTimeoutTimer );
 800fca4:	484c      	ldr	r0, [pc, #304]	; (800fdd8 <SX1276OnDio0Irq+0x2b4>)
 800fca6:	f000 fd0b 	bl	80106c0 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800fcaa:	4b4a      	ldr	r3, [pc, #296]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fcac:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800fcb0:	f083 0301 	eor.w	r3, r3, #1
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d007      	beq.n	800fcca <SX1276OnDio0Irq+0x1a6>
                    SX1276.Settings.State = RF_IDLE;
 800fcba:	4b46      	ldr	r3, [pc, #280]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutSyncWord );
 800fcc2:	4846      	ldr	r0, [pc, #280]	; (800fddc <SX1276OnDio0Irq+0x2b8>)
 800fcc4:	f000 fcfc 	bl	80106c0 <TimerStop>
 800fcc8:	e00d      	b.n	800fce6 <SX1276OnDio0Irq+0x1c2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800fcca:	200d      	movs	r0, #13
 800fccc:	f7ff fd92 	bl	800f7f4 <SX1276Read>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	4619      	mov	r1, r3
 800fcda:	200d      	movs	r0, #13
 800fcdc:	f7ff fd78 	bl	800f7d0 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800fce0:	483e      	ldr	r0, [pc, #248]	; (800fddc <SX1276OnDio0Irq+0x2b8>)
 800fce2:	f000 fba5 	bl	8010430 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fce6:	4b3e      	ldr	r3, [pc, #248]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d011      	beq.n	800fd12 <SX1276OnDio0Irq+0x1ee>
 800fcee:	4b3c      	ldr	r3, [pc, #240]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00c      	beq.n	800fd12 <SX1276OnDio0Irq+0x1ee>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800fcf8:	4b39      	ldr	r3, [pc, #228]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	689c      	ldr	r4, [r3, #8]
 800fcfe:	4b35      	ldr	r3, [pc, #212]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd00:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800fd04:	4b33      	ldr	r3, [pc, #204]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd06:	f993 310a 	ldrsb.w	r3, [r3, #266]	; 0x10a
 800fd0a:	b21a      	sxth	r2, r3
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	4836      	ldr	r0, [pc, #216]	; (800fde8 <SX1276OnDio0Irq+0x2c4>)
 800fd10:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800fd12:	4b30      	ldr	r3, [pc, #192]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800fd1a:	4b2e      	ldr	r3, [pc, #184]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800fd22:	4b2c      	ldr	r3, [pc, #176]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                SX1276.Settings.FskPacketHandler.Size = 0;
 800fd2a:	4b2a      	ldr	r3, [pc, #168]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                break;
 800fd32:	e0f7      	b.n	800ff24 <SX1276OnDio0Irq+0x400>
                    int8_t snr = 0;
 800fd34:	2300      	movs	r3, #0
 800fd36:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800fd38:	2140      	movs	r1, #64	; 0x40
 800fd3a:	2012      	movs	r0, #18
 800fd3c:	f7ff fd48 	bl	800f7d0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800fd40:	2012      	movs	r0, #18
 800fd42:	f7ff fd57 	bl	800f7f4 <SX1276Read>
 800fd46:	4603      	mov	r3, r0
 800fd48:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800fd4a:	78fb      	ldrb	r3, [r7, #3]
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	f003 0320 	and.w	r3, r3, #32
 800fd52:	2b20      	cmp	r3, #32
 800fd54:	d122      	bne.n	800fd9c <SX1276OnDio0Irq+0x278>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800fd56:	2120      	movs	r1, #32
 800fd58:	2012      	movs	r0, #18
 800fd5a:	f7ff fd39 	bl	800f7d0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800fd5e:	4b1d      	ldr	r3, [pc, #116]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd60:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800fd64:	f083 0301 	eor.w	r3, r3, #1
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d003      	beq.n	800fd76 <SX1276OnDio0Irq+0x252>
                            SX1276.Settings.State = RF_IDLE;
 800fd6e:	4b19      	ldr	r3, [pc, #100]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                        TimerStop( &RxTimeoutTimer );
 800fd76:	4818      	ldr	r0, [pc, #96]	; (800fdd8 <SX1276OnDio0Irq+0x2b4>)
 800fd78:	f000 fca2 	bl	80106c0 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800fd7c:	4b18      	ldr	r3, [pc, #96]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 80cc 	beq.w	800ff1e <SX1276OnDio0Irq+0x3fa>
 800fd86:	4b16      	ldr	r3, [pc, #88]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	691b      	ldr	r3, [r3, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 80c6 	beq.w	800ff1e <SX1276OnDio0Irq+0x3fa>
                            RadioEvents->RxError( );
 800fd92:	4b13      	ldr	r3, [pc, #76]	; (800fde0 <SX1276OnDio0Irq+0x2bc>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	691b      	ldr	r3, [r3, #16]
 800fd98:	4798      	blx	r3
                        break;
 800fd9a:	e0c0      	b.n	800ff1e <SX1276OnDio0Irq+0x3fa>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800fd9c:	2019      	movs	r0, #25
 800fd9e:	f7ff fd29 	bl	800f7f4 <SX1276Read>
 800fda2:	4603      	mov	r3, r0
 800fda4:	b25a      	sxtb	r2, r3
 800fda6:	4b0b      	ldr	r3, [pc, #44]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fda8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800fdac:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fdae:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	da1a      	bge.n	800fdec <SX1276OnDio0Irq+0x2c8>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800fdb6:	4b07      	ldr	r3, [pc, #28]	; (800fdd4 <SX1276OnDio0Irq+0x2b0>)
 800fdb8:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800fdbc:	425b      	negs	r3, r3
 800fdbe:	109b      	asrs	r3, r3, #2
 800fdc0:	b25b      	sxtb	r3, r3
 800fdc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdc6:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 800fdc8:	79fb      	ldrb	r3, [r7, #7]
 800fdca:	425b      	negs	r3, r3
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	71fb      	strb	r3, [r7, #7]
 800fdd0:	e014      	b.n	800fdfc <SX1276OnDio0Irq+0x2d8>
 800fdd2:	bf00      	nop
 800fdd4:	200012f0 	.word	0x200012f0
 800fdd8:	20001430 	.word	0x20001430
 800fddc:	200012dc 	.word	0x200012dc
 800fde0:	200007ac 	.word	0x200007ac
 800fde4:	20001402 	.word	0x20001402
 800fde8:	200007b0 	.word	0x200007b0
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800fdec:	4b5f      	ldr	r3, [pc, #380]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fdee:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800fdf2:	109b      	asrs	r3, r3, #2
 800fdf4:	b25b      	sxtb	r3, r3
 800fdf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdfa:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800fdfc:	201a      	movs	r0, #26
 800fdfe:	f7ff fcf9 	bl	800f7f4 <SX1276Read>
 800fe02:	4603      	mov	r3, r0
 800fe04:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800fe06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	da2d      	bge.n	800fe6a <SX1276OnDio0Irq+0x346>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fe0e:	4b57      	ldr	r3, [pc, #348]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fe10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe14:	4a56      	ldr	r2, [pc, #344]	; (800ff70 <SX1276OnDio0Irq+0x44c>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d913      	bls.n	800fe42 <SX1276OnDio0Irq+0x31e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800fe1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fe1e:	111b      	asrs	r3, r3, #4
 800fe20:	b21b      	sxth	r3, r3
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	88bb      	ldrh	r3, [r7, #4]
 800fe26:	4413      	add	r3, r2
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	4413      	add	r3, r2
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	3b9d      	subs	r3, #157	; 0x9d
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	b21a      	sxth	r2, r3
 800fe3a:	4b4c      	ldr	r3, [pc, #304]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fe3c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800fe40:	e036      	b.n	800feb0 <SX1276OnDio0Irq+0x38c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800fe42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fe46:	111b      	asrs	r3, r3, #4
 800fe48:	b21b      	sxth	r3, r3
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	88bb      	ldrh	r3, [r7, #4]
 800fe4e:	4413      	add	r3, r2
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	4413      	add	r3, r2
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	3ba4      	subs	r3, #164	; 0xa4
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	b21a      	sxth	r2, r3
 800fe62:	4b42      	ldr	r3, [pc, #264]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fe64:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800fe68:	e022      	b.n	800feb0 <SX1276OnDio0Irq+0x38c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fe6a:	4b40      	ldr	r3, [pc, #256]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fe6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe70:	4a3f      	ldr	r2, [pc, #252]	; (800ff70 <SX1276OnDio0Irq+0x44c>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d90e      	bls.n	800fe94 <SX1276OnDio0Irq+0x370>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800fe76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fe7a:	111b      	asrs	r3, r3, #4
 800fe7c:	b21b      	sxth	r3, r3
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	88bb      	ldrh	r3, [r7, #4]
 800fe82:	4413      	add	r3, r2
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	3b9d      	subs	r3, #157	; 0x9d
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	b21a      	sxth	r2, r3
 800fe8c:	4b37      	ldr	r3, [pc, #220]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fe8e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800fe92:	e00d      	b.n	800feb0 <SX1276OnDio0Irq+0x38c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800fe94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fe98:	111b      	asrs	r3, r3, #4
 800fe9a:	b21b      	sxth	r3, r3
 800fe9c:	b29a      	uxth	r2, r3
 800fe9e:	88bb      	ldrh	r3, [r7, #4]
 800fea0:	4413      	add	r3, r2
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	3ba4      	subs	r3, #164	; 0xa4
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	b21a      	sxth	r2, r3
 800feaa:	4b30      	ldr	r3, [pc, #192]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800feac:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800feb0:	2013      	movs	r0, #19
 800feb2:	f7ff fc9f 	bl	800f7f4 <SX1276Read>
 800feb6:	4603      	mov	r3, r0
 800feb8:	461a      	mov	r2, r3
 800feba:	4b2c      	ldr	r3, [pc, #176]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800febc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800fec0:	4b2a      	ldr	r3, [pc, #168]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fec2:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800fec6:	4619      	mov	r1, r3
 800fec8:	482a      	ldr	r0, [pc, #168]	; (800ff74 <SX1276OnDio0Irq+0x450>)
 800feca:	f7ff fd1f 	bl	800f90c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800fece:	4b27      	ldr	r3, [pc, #156]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fed0:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800fed4:	f083 0301 	eor.w	r3, r3, #1
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d003      	beq.n	800fee6 <SX1276OnDio0Irq+0x3c2>
                        SX1276.Settings.State = RF_IDLE;
 800fede:	4b23      	ldr	r3, [pc, #140]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800fee0:	2200      	movs	r2, #0
 800fee2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutTimer );
 800fee6:	4824      	ldr	r0, [pc, #144]	; (800ff78 <SX1276OnDio0Irq+0x454>)
 800fee8:	f000 fbea 	bl	80106c0 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800feec:	4b23      	ldr	r3, [pc, #140]	; (800ff7c <SX1276OnDio0Irq+0x458>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d016      	beq.n	800ff22 <SX1276OnDio0Irq+0x3fe>
 800fef4:	4b21      	ldr	r3, [pc, #132]	; (800ff7c <SX1276OnDio0Irq+0x458>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d011      	beq.n	800ff22 <SX1276OnDio0Irq+0x3fe>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800fefe:	4b1f      	ldr	r3, [pc, #124]	; (800ff7c <SX1276OnDio0Irq+0x458>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	689c      	ldr	r4, [r3, #8]
 800ff04:	4b19      	ldr	r3, [pc, #100]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800ff06:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800ff0a:	b299      	uxth	r1, r3
 800ff0c:	4b17      	ldr	r3, [pc, #92]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800ff0e:	f9b3 213a 	ldrsh.w	r2, [r3, #314]	; 0x13a
 800ff12:	4b16      	ldr	r3, [pc, #88]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800ff14:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800ff18:	4816      	ldr	r0, [pc, #88]	; (800ff74 <SX1276OnDio0Irq+0x450>)
 800ff1a:	47a0      	blx	r4
                break;
 800ff1c:	e001      	b.n	800ff22 <SX1276OnDio0Irq+0x3fe>
                        break;
 800ff1e:	bf00      	nop
 800ff20:	e020      	b.n	800ff64 <SX1276OnDio0Irq+0x440>
                break;
 800ff22:	bf00      	nop
            break;
 800ff24:	e01e      	b.n	800ff64 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 800ff26:	4816      	ldr	r0, [pc, #88]	; (800ff80 <SX1276OnDio0Irq+0x45c>)
 800ff28:	f000 fbca 	bl	80106c0 <TimerStop>
            switch( SX1276.Settings.Modem )
 800ff2c:	4b0f      	ldr	r3, [pc, #60]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800ff2e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d103      	bne.n	800ff3e <SX1276OnDio0Irq+0x41a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800ff36:	2108      	movs	r1, #8
 800ff38:	2012      	movs	r0, #18
 800ff3a:	f7ff fc49 	bl	800f7d0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800ff3e:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <SX1276OnDio0Irq+0x448>)
 800ff40:	2200      	movs	r2, #0
 800ff42:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ff46:	4b0d      	ldr	r3, [pc, #52]	; (800ff7c <SX1276OnDio0Irq+0x458>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d008      	beq.n	800ff60 <SX1276OnDio0Irq+0x43c>
 800ff4e:	4b0b      	ldr	r3, [pc, #44]	; (800ff7c <SX1276OnDio0Irq+0x458>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d003      	beq.n	800ff60 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 800ff58:	4b08      	ldr	r3, [pc, #32]	; (800ff7c <SX1276OnDio0Irq+0x458>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4798      	blx	r3
                break;
 800ff60:	bf00      	nop
            break;
 800ff62:	bf00      	nop
    }
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd90      	pop	{r4, r7, pc}
 800ff6c:	200012f0 	.word	0x200012f0
 800ff70:	1f4add40 	.word	0x1f4add40
 800ff74:	200007b0 	.word	0x200007b0
 800ff78:	20001430 	.word	0x20001430
 800ff7c:	200007ac 	.word	0x200007ac
 800ff80:	200012c8 	.word	0x200012c8

0800ff84 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
	//DebugPrintf("1");
    switch( SX1276.Settings.State )
 800ff88:	4b6a      	ldr	r3, [pc, #424]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ff8a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d003      	beq.n	800ff9a <SX1276OnDio1Irq+0x16>
 800ff92:	2b02      	cmp	r3, #2
 800ff94:	f000 8083 	beq.w	801009e <SX1276OnDio1Irq+0x11a>
            default:
                break;
            }
            break;
        default:
            break;
 800ff98:	e0ca      	b.n	8010130 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800ff9a:	4b66      	ldr	r3, [pc, #408]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ff9c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <SX1276OnDio1Irq+0x26>
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d060      	beq.n	801006a <SX1276OnDio1Irq+0xe6>
                break;
 800ffa8:	e078      	b.n	801009c <SX1276OnDio1Irq+0x118>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800ffaa:	4b62      	ldr	r3, [pc, #392]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ffac:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d119      	bne.n	800ffe8 <SX1276OnDio1Irq+0x64>
 800ffb4:	4b5f      	ldr	r3, [pc, #380]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ffb6:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d114      	bne.n	800ffe8 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800ffbe:	4b5d      	ldr	r3, [pc, #372]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ffc0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800ffc4:	f083 0301 	eor.w	r3, r3, #1
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d004      	beq.n	800ffd8 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800ffce:	2101      	movs	r1, #1
 800ffd0:	4859      	ldr	r0, [pc, #356]	; (8010138 <SX1276OnDio1Irq+0x1b4>)
 800ffd2:	f7ff fc9b 	bl	800f90c <SX1276ReadFifo>
 800ffd6:	e007      	b.n	800ffe8 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800ffd8:	2032      	movs	r0, #50	; 0x32
 800ffda:	f7ff fc0b 	bl	800f7f4 <SX1276Read>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	b29a      	uxth	r2, r3
 800ffe2:	4b54      	ldr	r3, [pc, #336]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ffe4:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 800ffe8:	4b52      	ldr	r3, [pc, #328]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800ffea:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800ffee:	461a      	mov	r2, r3
 800fff0:	4b50      	ldr	r3, [pc, #320]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800fff2:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	4a4e      	ldr	r2, [pc, #312]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 800fffa:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 800fffe:	4293      	cmp	r3, r2
 8010000:	dd19      	ble.n	8010036 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 8010002:	4b4c      	ldr	r3, [pc, #304]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010004:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010008:	461a      	mov	r2, r3
 801000a:	4b4c      	ldr	r3, [pc, #304]	; (801013c <SX1276OnDio1Irq+0x1b8>)
 801000c:	4413      	add	r3, r2
 801000e:	4a49      	ldr	r2, [pc, #292]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010010:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 8010014:	4611      	mov	r1, r2
 8010016:	4618      	mov	r0, r3
 8010018:	f7ff fc78 	bl	800f90c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 801001c:	4b45      	ldr	r3, [pc, #276]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 801001e:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 8010022:	4b44      	ldr	r3, [pc, #272]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010024:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8010028:	b29b      	uxth	r3, r3
 801002a:	4413      	add	r3, r2
 801002c:	b29a      	uxth	r2, r3
 801002e:	4b41      	ldr	r3, [pc, #260]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010030:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 8010034:	e032      	b.n	801009c <SX1276OnDio1Irq+0x118>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8010036:	4b3f      	ldr	r3, [pc, #252]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010038:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 801003c:	461a      	mov	r2, r3
 801003e:	4b3f      	ldr	r3, [pc, #252]	; (801013c <SX1276OnDio1Irq+0x1b8>)
 8010040:	18d0      	adds	r0, r2, r3
 8010042:	4b3c      	ldr	r3, [pc, #240]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010044:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8010048:	b2da      	uxtb	r2, r3
 801004a:	4b3a      	ldr	r3, [pc, #232]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 801004c:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010050:	b2db      	uxtb	r3, r3
 8010052:	1ad3      	subs	r3, r2, r3
 8010054:	b2db      	uxtb	r3, r3
 8010056:	4619      	mov	r1, r3
 8010058:	f7ff fc58 	bl	800f90c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801005c:	4b35      	ldr	r3, [pc, #212]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 801005e:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8010062:	4b34      	ldr	r3, [pc, #208]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010064:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 8010068:	e018      	b.n	801009c <SX1276OnDio1Irq+0x118>
                TimerStop( &RxTimeoutTimer );
 801006a:	4835      	ldr	r0, [pc, #212]	; (8010140 <SX1276OnDio1Irq+0x1bc>)
 801006c:	f000 fb28 	bl	80106c0 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8010070:	2180      	movs	r1, #128	; 0x80
 8010072:	2012      	movs	r0, #18
 8010074:	f7ff fbac 	bl	800f7d0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8010078:	4b2e      	ldr	r3, [pc, #184]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 801007a:	2200      	movs	r2, #0
 801007c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8010080:	4b30      	ldr	r3, [pc, #192]	; (8010144 <SX1276OnDio1Irq+0x1c0>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d008      	beq.n	801009a <SX1276OnDio1Irq+0x116>
 8010088:	4b2e      	ldr	r3, [pc, #184]	; (8010144 <SX1276OnDio1Irq+0x1c0>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d003      	beq.n	801009a <SX1276OnDio1Irq+0x116>
                    RadioEvents->RxTimeout( );
 8010092:	4b2c      	ldr	r3, [pc, #176]	; (8010144 <SX1276OnDio1Irq+0x1c0>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	4798      	blx	r3
                break;
 801009a:	bf00      	nop
            break;
 801009c:	e048      	b.n	8010130 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 801009e:	4b25      	ldr	r3, [pc, #148]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100a0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d001      	beq.n	80100ac <SX1276OnDio1Irq+0x128>
 80100a8:	2b01      	cmp	r3, #1
                break;
 80100aa:	e040      	b.n	801012e <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80100ac:	4b21      	ldr	r3, [pc, #132]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100ae:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 80100b2:	461a      	mov	r2, r3
 80100b4:	4b1f      	ldr	r3, [pc, #124]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100b6:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	4a1d      	ldr	r2, [pc, #116]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100be:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 80100c2:	4293      	cmp	r3, r2
 80100c4:	dd19      	ble.n	80100fa <SX1276OnDio1Irq+0x176>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80100c6:	4b1b      	ldr	r3, [pc, #108]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100c8:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b1b      	ldr	r3, [pc, #108]	; (801013c <SX1276OnDio1Irq+0x1b8>)
 80100d0:	4413      	add	r3, r2
 80100d2:	4a18      	ldr	r2, [pc, #96]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100d4:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 80100d8:	4611      	mov	r1, r2
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff fc06 	bl	800f8ec <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80100e0:	4b14      	ldr	r3, [pc, #80]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100e2:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 80100e6:	4b13      	ldr	r3, [pc, #76]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100e8:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	4413      	add	r3, r2
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	4b10      	ldr	r3, [pc, #64]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100f4:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 80100f8:	e018      	b.n	801012c <SX1276OnDio1Irq+0x1a8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80100fa:	4b0e      	ldr	r3, [pc, #56]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 80100fc:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010100:	461a      	mov	r2, r3
 8010102:	4b0e      	ldr	r3, [pc, #56]	; (801013c <SX1276OnDio1Irq+0x1b8>)
 8010104:	18d0      	adds	r0, r2, r3
 8010106:	4b0b      	ldr	r3, [pc, #44]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010108:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 801010c:	b2da      	uxtb	r2, r3
 801010e:	4b09      	ldr	r3, [pc, #36]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010110:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8010114:	b2db      	uxtb	r3, r3
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	b2db      	uxtb	r3, r3
 801011a:	4619      	mov	r1, r3
 801011c:	f7ff fbe6 	bl	800f8ec <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8010120:	4b04      	ldr	r3, [pc, #16]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010122:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8010126:	4b03      	ldr	r3, [pc, #12]	; (8010134 <SX1276OnDio1Irq+0x1b0>)
 8010128:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 801012c:	bf00      	nop
            break;
 801012e:	bf00      	nop
    }
}
 8010130:	bf00      	nop
 8010132:	bd80      	pop	{r7, pc}
 8010134:	200012f0 	.word	0x200012f0
 8010138:	20001402 	.word	0x20001402
 801013c:	200007b0 	.word	0x200007b0
 8010140:	20001430 	.word	0x20001430
 8010144:	200007ac 	.word	0x200007ac

08010148 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 8010148:	b598      	push	{r3, r4, r7, lr}
 801014a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801014c:	4b5e      	ldr	r3, [pc, #376]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 801014e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8010152:	2b01      	cmp	r3, #1
 8010154:	d003      	beq.n	801015e <SX1276OnDio2Irq+0x16>
 8010156:	2b02      	cmp	r3, #2
 8010158:	f000 8084 	beq.w	8010264 <SX1276OnDio2Irq+0x11c>
            default:
                break;
            }
            break;
        default:
            break;
 801015c:	e0ae      	b.n	80102bc <SX1276OnDio2Irq+0x174>
            switch( SX1276.Settings.Modem )
 801015e:	4b5a      	ldr	r3, [pc, #360]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010160:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010164:	2b00      	cmp	r3, #0
 8010166:	d002      	beq.n	801016e <SX1276OnDio2Irq+0x26>
 8010168:	2b01      	cmp	r3, #1
 801016a:	d058      	beq.n	801021e <SX1276OnDio2Irq+0xd6>
                break;
 801016c:	e079      	b.n	8010262 <SX1276OnDio2Irq+0x11a>
                if( SX1276.DIO4.port == NULL )
 801016e:	4b56      	ldr	r3, [pc, #344]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010172:	2b00      	cmp	r3, #0
 8010174:	d103      	bne.n	801017e <SX1276OnDio2Irq+0x36>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8010176:	4b54      	ldr	r3, [pc, #336]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010178:	2201      	movs	r2, #1
 801017a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 801017e:	4b52      	ldr	r3, [pc, #328]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010180:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010184:	2b01      	cmp	r3, #1
 8010186:	d169      	bne.n	801025c <SX1276OnDio2Irq+0x114>
 8010188:	4b4f      	ldr	r3, [pc, #316]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 801018a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 801018e:	2b00      	cmp	r3, #0
 8010190:	d164      	bne.n	801025c <SX1276OnDio2Irq+0x114>
                    TimerStop( &RxTimeoutSyncWord );
 8010192:	484e      	ldr	r0, [pc, #312]	; (80102cc <SX1276OnDio2Irq+0x184>)
 8010194:	f000 fa94 	bl	80106c0 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8010198:	4b4b      	ldr	r3, [pc, #300]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 801019a:	2201      	movs	r2, #1
 801019c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80101a0:	2011      	movs	r0, #17
 80101a2:	f7ff fb27 	bl	800f7f4 <SX1276Read>
 80101a6:	4603      	mov	r3, r0
 80101a8:	085b      	lsrs	r3, r3, #1
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	425b      	negs	r3, r3
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	b25a      	sxtb	r2, r3
 80101b2:	4b45      	ldr	r3, [pc, #276]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 80101b4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80101b8:	201b      	movs	r0, #27
 80101ba:	f7ff fb1b 	bl	800f7f4 <SX1276Read>
 80101be:	4603      	mov	r3, r0
 80101c0:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 80101c2:	201c      	movs	r0, #28
 80101c4:	f7ff fb16 	bl	800f7f4 <SX1276Read>
 80101c8:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80101ca:	4323      	orrs	r3, r4
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7f0 f929 	bl	8000424 <__aeabi_i2d>
 80101d2:	4602      	mov	r2, r0
 80101d4:	460b      	mov	r3, r1
 80101d6:	4610      	mov	r0, r2
 80101d8:	4619      	mov	r1, r3
 80101da:	f7f0 fc27 	bl	8000a2c <__aeabi_d2iz>
 80101de:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7f0 f91f 	bl	8000424 <__aeabi_i2d>
 80101e6:	a336      	add	r3, pc, #216	; (adr r3, 80102c0 <SX1276OnDio2Irq+0x178>)
 80101e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ec:	f7f0 f984 	bl	80004f8 <__aeabi_dmul>
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80101f4:	4610      	mov	r0, r2
 80101f6:	4619      	mov	r1, r3
 80101f8:	f7f0 fc18 	bl	8000a2c <__aeabi_d2iz>
 80101fc:	4603      	mov	r3, r0
 80101fe:	4a32      	ldr	r2, [pc, #200]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010200:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8010204:	200c      	movs	r0, #12
 8010206:	f7ff faf5 	bl	800f7f4 <SX1276Read>
 801020a:	4603      	mov	r3, r0
 801020c:	095b      	lsrs	r3, r3, #5
 801020e:	b2db      	uxtb	r3, r3
 8010210:	f003 0307 	and.w	r3, r3, #7
 8010214:	b2da      	uxtb	r2, r3
 8010216:	4b2c      	ldr	r3, [pc, #176]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010218:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                break;
 801021c:	e01e      	b.n	801025c <SX1276OnDio2Irq+0x114>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801021e:	4b2a      	ldr	r3, [pc, #168]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010220:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8010224:	2b00      	cmp	r3, #0
 8010226:	d01b      	beq.n	8010260 <SX1276OnDio2Irq+0x118>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8010228:	2102      	movs	r1, #2
 801022a:	2012      	movs	r0, #18
 801022c:	f7ff fad0 	bl	800f7d0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8010230:	4b27      	ldr	r3, [pc, #156]	; (80102d0 <SX1276OnDio2Irq+0x188>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d013      	beq.n	8010260 <SX1276OnDio2Irq+0x118>
 8010238:	4b25      	ldr	r3, [pc, #148]	; (80102d0 <SX1276OnDio2Irq+0x188>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	695b      	ldr	r3, [r3, #20]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00e      	beq.n	8010260 <SX1276OnDio2Irq+0x118>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8010242:	4b23      	ldr	r3, [pc, #140]	; (80102d0 <SX1276OnDio2Irq+0x188>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	695c      	ldr	r4, [r3, #20]
 8010248:	201c      	movs	r0, #28
 801024a:	f7ff fad3 	bl	800f7f4 <SX1276Read>
 801024e:	4603      	mov	r3, r0
 8010250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010254:	b2db      	uxtb	r3, r3
 8010256:	4618      	mov	r0, r3
 8010258:	47a0      	blx	r4
                break;
 801025a:	e001      	b.n	8010260 <SX1276OnDio2Irq+0x118>
                break;
 801025c:	bf00      	nop
 801025e:	e02d      	b.n	80102bc <SX1276OnDio2Irq+0x174>
                break;
 8010260:	bf00      	nop
            break;
 8010262:	e02b      	b.n	80102bc <SX1276OnDio2Irq+0x174>
            switch( SX1276.Settings.Modem )
 8010264:	4b18      	ldr	r3, [pc, #96]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010266:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 801026a:	2b00      	cmp	r3, #0
 801026c:	d020      	beq.n	80102b0 <SX1276OnDio2Irq+0x168>
 801026e:	2b01      	cmp	r3, #1
 8010270:	d120      	bne.n	80102b4 <SX1276OnDio2Irq+0x16c>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8010272:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <SX1276OnDio2Irq+0x180>)
 8010274:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8010278:	2b00      	cmp	r3, #0
 801027a:	d01d      	beq.n	80102b8 <SX1276OnDio2Irq+0x170>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801027c:	2102      	movs	r1, #2
 801027e:	2012      	movs	r0, #18
 8010280:	f7ff faa6 	bl	800f7d0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8010284:	4b12      	ldr	r3, [pc, #72]	; (80102d0 <SX1276OnDio2Irq+0x188>)
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d015      	beq.n	80102b8 <SX1276OnDio2Irq+0x170>
 801028c:	4b10      	ldr	r3, [pc, #64]	; (80102d0 <SX1276OnDio2Irq+0x188>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	695b      	ldr	r3, [r3, #20]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d010      	beq.n	80102b8 <SX1276OnDio2Irq+0x170>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8010296:	4b0e      	ldr	r3, [pc, #56]	; (80102d0 <SX1276OnDio2Irq+0x188>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	695c      	ldr	r4, [r3, #20]
 801029c:	201c      	movs	r0, #28
 801029e:	f7ff faa9 	bl	800f7f4 <SX1276Read>
 80102a2:	4603      	mov	r3, r0
 80102a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	4618      	mov	r0, r3
 80102ac:	47a0      	blx	r4
                break;
 80102ae:	e003      	b.n	80102b8 <SX1276OnDio2Irq+0x170>
                break;
 80102b0:	bf00      	nop
 80102b2:	e002      	b.n	80102ba <SX1276OnDio2Irq+0x172>
                break;
 80102b4:	bf00      	nop
 80102b6:	e000      	b.n	80102ba <SX1276OnDio2Irq+0x172>
                break;
 80102b8:	bf00      	nop
            break;
 80102ba:	bf00      	nop
    }
}
 80102bc:	bf00      	nop
 80102be:	bd98      	pop	{r3, r4, r7, pc}
 80102c0:	00000000 	.word	0x00000000
 80102c4:	404e8480 	.word	0x404e8480
 80102c8:	200012f0 	.word	0x200012f0
 80102cc:	200012dc 	.word	0x200012dc
 80102d0:	200007ac 	.word	0x200007ac

080102d4 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80102d8:	4b1d      	ldr	r3, [pc, #116]	; (8010350 <SX1276OnDio3Irq+0x7c>)
 80102da:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d030      	beq.n	8010344 <SX1276OnDio3Irq+0x70>
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d000      	beq.n	80102e8 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80102e6:	e030      	b.n	801034a <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80102e8:	2012      	movs	r0, #18
 80102ea:	f7ff fa83 	bl	800f7f4 <SX1276Read>
 80102ee:	4603      	mov	r3, r0
 80102f0:	f003 0301 	and.w	r3, r3, #1
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d112      	bne.n	801031e <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80102f8:	2105      	movs	r1, #5
 80102fa:	2012      	movs	r0, #18
 80102fc:	f7ff fa68 	bl	800f7d0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010300:	4b14      	ldr	r3, [pc, #80]	; (8010354 <SX1276OnDio3Irq+0x80>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d01f      	beq.n	8010348 <SX1276OnDio3Irq+0x74>
 8010308:	4b12      	ldr	r3, [pc, #72]	; (8010354 <SX1276OnDio3Irq+0x80>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	699b      	ldr	r3, [r3, #24]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d01a      	beq.n	8010348 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 8010312:	4b10      	ldr	r3, [pc, #64]	; (8010354 <SX1276OnDio3Irq+0x80>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	2001      	movs	r0, #1
 801031a:	4798      	blx	r3
        break;
 801031c:	e014      	b.n	8010348 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801031e:	2104      	movs	r1, #4
 8010320:	2012      	movs	r0, #18
 8010322:	f7ff fa55 	bl	800f7d0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010326:	4b0b      	ldr	r3, [pc, #44]	; (8010354 <SX1276OnDio3Irq+0x80>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00c      	beq.n	8010348 <SX1276OnDio3Irq+0x74>
 801032e:	4b09      	ldr	r3, [pc, #36]	; (8010354 <SX1276OnDio3Irq+0x80>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d007      	beq.n	8010348 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 8010338:	4b06      	ldr	r3, [pc, #24]	; (8010354 <SX1276OnDio3Irq+0x80>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	699b      	ldr	r3, [r3, #24]
 801033e:	2000      	movs	r0, #0
 8010340:	4798      	blx	r3
        break;
 8010342:	e001      	b.n	8010348 <SX1276OnDio3Irq+0x74>
        break;
 8010344:	bf00      	nop
 8010346:	e000      	b.n	801034a <SX1276OnDio3Irq+0x76>
        break;
 8010348:	bf00      	nop
    }
}
 801034a:	bf00      	nop
 801034c:	bd80      	pop	{r7, pc}
 801034e:	bf00      	nop
 8010350:	200012f0 	.word	0x200012f0
 8010354:	200007ac 	.word	0x200007ac

08010358 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8010358:	b480      	push	{r7}
 801035a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801035c:	4b0c      	ldr	r3, [pc, #48]	; (8010390 <SX1276OnDio4Irq+0x38>)
 801035e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010362:	2b00      	cmp	r3, #0
 8010364:	d002      	beq.n	801036c <SX1276OnDio4Irq+0x14>
 8010366:	2b01      	cmp	r3, #1
 8010368:	d00a      	beq.n	8010380 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801036a:	e00c      	b.n	8010386 <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801036c:	4b08      	ldr	r3, [pc, #32]	; (8010390 <SX1276OnDio4Irq+0x38>)
 801036e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010372:	2b00      	cmp	r3, #0
 8010374:	d106      	bne.n	8010384 <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8010376:	4b06      	ldr	r3, [pc, #24]	; (8010390 <SX1276OnDio4Irq+0x38>)
 8010378:	2201      	movs	r2, #1
 801037a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        break;
 801037e:	e001      	b.n	8010384 <SX1276OnDio4Irq+0x2c>
        break;
 8010380:	bf00      	nop
 8010382:	e000      	b.n	8010386 <SX1276OnDio4Irq+0x2e>
        break;
 8010384:	bf00      	nop
    }
}
 8010386:	bf00      	nop
 8010388:	46bd      	mov	sp, r7
 801038a:	bc80      	pop	{r7}
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop
 8010390:	200012f0 	.word	0x200012f0

08010394 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010394:	b480      	push	{r7}
 8010396:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8010398:	4b15      	ldr	r3, [pc, #84]	; (80103f0 <SystemInit+0x5c>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a14      	ldr	r2, [pc, #80]	; (80103f0 <SystemInit+0x5c>)
 801039e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103a2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80103a4:	4b12      	ldr	r3, [pc, #72]	; (80103f0 <SystemInit+0x5c>)
 80103a6:	689a      	ldr	r2, [r3, #8]
 80103a8:	4911      	ldr	r1, [pc, #68]	; (80103f0 <SystemInit+0x5c>)
 80103aa:	4b12      	ldr	r3, [pc, #72]	; (80103f4 <SystemInit+0x60>)
 80103ac:	4013      	ands	r3, r2
 80103ae:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80103b0:	4b0f      	ldr	r3, [pc, #60]	; (80103f0 <SystemInit+0x5c>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a0e      	ldr	r2, [pc, #56]	; (80103f0 <SystemInit+0x5c>)
 80103b6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80103ba:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80103be:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80103c0:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <SystemInit+0x5c>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a0a      	ldr	r2, [pc, #40]	; (80103f0 <SystemInit+0x5c>)
 80103c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103ca:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80103cc:	4b08      	ldr	r3, [pc, #32]	; (80103f0 <SystemInit+0x5c>)
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	4a07      	ldr	r2, [pc, #28]	; (80103f0 <SystemInit+0x5c>)
 80103d2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80103d6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80103d8:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <SystemInit+0x5c>)
 80103da:	2200      	movs	r2, #0
 80103dc:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80103de:	4b06      	ldr	r3, [pc, #24]	; (80103f8 <SystemInit+0x64>)
 80103e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80103e4:	609a      	str	r2, [r3, #8]
#endif
}
 80103e6:	bf00      	nop
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bc80      	pop	{r7}
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	40023800 	.word	0x40023800
 80103f4:	88ffc00c 	.word	0x88ffc00c
 80103f8:	e000ed00 	.word	0xe000ed00

080103fc <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2200      	movs	r2, #0
 8010422:	611a      	str	r2, [r3, #16]
}
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	bc80      	pop	{r7}
 801042c:	4770      	bx	lr
	...

08010430 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b084      	sub	sp, #16
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 801043c:	2300      	movs	r3, #0
 801043e:	60bb      	str	r3, [r7, #8]

    BoardDisableIrq( );
 8010440:	f7fa ffda 	bl	800b3f8 <BoardDisableIrq>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d005      	beq.n	8010456 <TimerStart+0x26>
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f000 f9d8 	bl	8010800 <TimerExists>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d002      	beq.n	801045c <TimerStart+0x2c>
    {
        BoardEnableIrq( );
 8010456:	f7fa ffdf 	bl	800b418 <BoardEnableIrq>
        return;
 801045a:	e03e      	b.n	80104da <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 801046a:	4b1d      	ldr	r3, [pc, #116]	; (80104e0 <TimerStart+0xb0>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f8a1 	bl	80105c0 <TimerInsertNewHeadTimer>
 801047e:	e02a      	b.n	80104d6 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 8010480:	4b17      	ldr	r3, [pc, #92]	; (80104e0 <TimerStart+0xb0>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	7a1b      	ldrb	r3, [r3, #8]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d013      	beq.n	80104b2 <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 801048a:	f000 f9e7 	bl	801085c <TimerGetValue>
 801048e:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 8010490:	4b13      	ldr	r3, [pc, #76]	; (80104e0 <TimerStart+0xb0>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	429a      	cmp	r2, r3
 801049a:	d903      	bls.n	80104a4 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 801049c:	4b10      	ldr	r3, [pc, #64]	; (80104e0 <TimerStart+0xb0>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 80104a4:	4b0e      	ldr	r3, [pc, #56]	; (80104e0 <TimerStart+0xb0>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	60bb      	str	r3, [r7, #8]
 80104b0:	e003      	b.n	80104ba <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 80104b2:	4b0b      	ldr	r3, [pc, #44]	; (80104e0 <TimerStart+0xb0>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	68ba      	ldr	r2, [r7, #8]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d904      	bls.n	80104ce <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f87a 	bl	80105c0 <TimerInsertNewHeadTimer>
 80104cc:	e003      	b.n	80104d6 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 80104ce:	68b9      	ldr	r1, [r7, #8]
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f000 f807 	bl	80104e4 <TimerInsertTimer>
        }
    }
    BoardEnableIrq( );
 80104d6:	f7fa ff9f 	bl	800b418 <BoardEnableIrq>
}
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	200008b4 	.word	0x200008b4

080104e4 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 80104e4:	b480      	push	{r7}
 80104e6:	b087      	sub	sp, #28
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 80104ee:	2300      	movs	r3, #0
 80104f0:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 80104f2:	2300      	movs	r3, #0
 80104f4:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 80104f6:	4b31      	ldr	r3, [pc, #196]	; (80105bc <TimerInsertTimer+0xd8>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 80104fc:	4b2f      	ldr	r3, [pc, #188]	; (80105bc <TimerInsertTimer+0xd8>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d10c      	bne.n	8010524 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	1ad2      	subs	r2, r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 8010522:	e045      	b.n	80105b0 <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	683a      	ldr	r2, [r7, #0]
 801052e:	4413      	add	r3, r2
 8010530:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8010532:	e039      	b.n	80105a8 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	693a      	ldr	r2, [r7, #16]
 801053a:	429a      	cmp	r2, r3
 801053c:	d916      	bls.n	801056c <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	1ad2      	subs	r2, r2, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d006      	beq.n	801055e <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	1ad2      	subs	r2, r2, r3
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	611a      	str	r2, [r3, #16]
                break;
 801056a:	e021      	b.n	80105b0 <TimerInsertTimer+0xcc>
                prev = cur;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	691b      	ldr	r3, [r3, #16]
 8010574:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10e      	bne.n	801059a <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	1ad2      	subs	r2, r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	611a      	str	r2, [r3, #16]
                    break;
 8010598:	e00a      	b.n	80105b0 <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	693a      	ldr	r2, [r7, #16]
 80105a4:	4413      	add	r3, r2
 80105a6:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d1c2      	bne.n	8010534 <TimerInsertTimer+0x50>
}
 80105ae:	e7ff      	b.n	80105b0 <TimerInsertTimer+0xcc>
 80105b0:	bf00      	nop
 80105b2:	371c      	adds	r7, #28
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bc80      	pop	{r7}
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	200008b4 	.word	0x200008b4

080105c0 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 80105ca:	4b10      	ldr	r3, [pc, #64]	; (801060c <TimerInsertNewHeadTimer+0x4c>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d008      	beq.n	80105e8 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	1ad2      	subs	r2, r2, r3
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	2200      	movs	r2, #0
 80105e6:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2201      	movs	r2, #1
 80105f2:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 80105f4:	4a05      	ldr	r2, [pc, #20]	; (801060c <TimerInsertNewHeadTimer+0x4c>)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 80105fa:	4b04      	ldr	r3, [pc, #16]	; (801060c <TimerInsertNewHeadTimer+0x4c>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4618      	mov	r0, r3
 8010600:	f000 f946 	bl	8010890 <TimerSetTimeout>
}
 8010604:	bf00      	nop
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	200008b4 	.word	0x200008b4

08010610 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 8010616:	2300      	movs	r3, #0
 8010618:	607b      	str	r3, [r7, #4]

    // Early out when TimerListHead is null to prevent null pointer
    if ( TimerListHead == NULL )
 801061a:	4b28      	ldr	r3, [pc, #160]	; (80106bc <TimerIrqHandler+0xac>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d048      	beq.n	80106b4 <TimerIrqHandler+0xa4>
    {
        return;
    }

    elapsedTime = TimerGetValue( );
 8010622:	f000 f91b 	bl	801085c <TimerGetValue>
 8010626:	6078      	str	r0, [r7, #4]

    if( elapsedTime >= TimerListHead->Timestamp )
 8010628:	4b24      	ldr	r3, [pc, #144]	; (80106bc <TimerIrqHandler+0xac>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	429a      	cmp	r2, r3
 8010632:	d304      	bcc.n	801063e <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 8010634:	4b21      	ldr	r3, [pc, #132]	; (80106bc <TimerIrqHandler+0xac>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]
 801063c:	e007      	b.n	801064e <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 801063e:	4b1f      	ldr	r3, [pc, #124]	; (80106bc <TimerIrqHandler+0xac>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	4b1d      	ldr	r3, [pc, #116]	; (80106bc <TimerIrqHandler+0xac>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	687a      	ldr	r2, [r7, #4]
 801064a:	1a8a      	subs	r2, r1, r2
 801064c:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 801064e:	4b1b      	ldr	r3, [pc, #108]	; (80106bc <TimerIrqHandler+0xac>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	2200      	movs	r2, #0
 8010654:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8010656:	e00e      	b.n	8010676 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 8010658:	4b18      	ldr	r3, [pc, #96]	; (80106bc <TimerIrqHandler+0xac>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 801065e:	4b17      	ldr	r3, [pc, #92]	; (80106bc <TimerIrqHandler+0xac>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	691b      	ldr	r3, [r3, #16]
 8010664:	4a15      	ldr	r2, [pc, #84]	; (80106bc <TimerIrqHandler+0xac>)
 8010666:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8010676:	4b11      	ldr	r3, [pc, #68]	; (80106bc <TimerIrqHandler+0xac>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d004      	beq.n	8010688 <TimerIrqHandler+0x78>
 801067e:	4b0f      	ldr	r3, [pc, #60]	; (80106bc <TimerIrqHandler+0xac>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d0e7      	beq.n	8010658 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 8010688:	4b0c      	ldr	r3, [pc, #48]	; (80106bc <TimerIrqHandler+0xac>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d012      	beq.n	80106b6 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 8010690:	4b0a      	ldr	r3, [pc, #40]	; (80106bc <TimerIrqHandler+0xac>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	7a1b      	ldrb	r3, [r3, #8]
 8010696:	f083 0301 	eor.w	r3, r3, #1
 801069a:	b2db      	uxtb	r3, r3
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00a      	beq.n	80106b6 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 80106a0:	4b06      	ldr	r3, [pc, #24]	; (80106bc <TimerIrqHandler+0xac>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2201      	movs	r2, #1
 80106a6:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 80106a8:	4b04      	ldr	r3, [pc, #16]	; (80106bc <TimerIrqHandler+0xac>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 f8ef 	bl	8010890 <TimerSetTimeout>
 80106b2:	e000      	b.n	80106b6 <TimerIrqHandler+0xa6>
        return;
 80106b4:	bf00      	nop
        }
    }
}
 80106b6:	3708      	adds	r7, #8
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	200008b4 	.word	0x200008b4

080106c0 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
    BoardDisableIrq( );
 80106c8:	f7fa fe96 	bl	800b3f8 <BoardDisableIrq>

    uint32_t elapsedTime = 0;
 80106cc:	2300      	movs	r3, #0
 80106ce:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 80106d0:	2300      	movs	r3, #0
 80106d2:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 80106d4:	4b49      	ldr	r3, [pc, #292]	; (80107fc <TimerStop+0x13c>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 80106da:	4b48      	ldr	r3, [pc, #288]	; (80107fc <TimerStop+0x13c>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 80106e0:	4b46      	ldr	r3, [pc, #280]	; (80107fc <TimerStop+0x13c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d002      	beq.n	80106ee <TimerStop+0x2e>
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <TimerStop+0x34>
    {
        BoardEnableIrq( );
 80106ee:	f7fa fe93 	bl	800b418 <BoardEnableIrq>
        return;
 80106f2:	e080      	b.n	80107f6 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 80106f4:	4b41      	ldr	r3, [pc, #260]	; (80107fc <TimerStop+0x13c>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d152      	bne.n	80107a4 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 80106fe:	4b3f      	ldr	r3, [pc, #252]	; (80107fc <TimerStop+0x13c>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	7a1b      	ldrb	r3, [r3, #8]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d033      	beq.n	8010770 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 8010708:	f000 f8a8 	bl	801085c <TimerGetValue>
 801070c:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	697a      	ldr	r2, [r7, #20]
 8010714:	429a      	cmp	r2, r3
 8010716:	d902      	bls.n	801071e <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 8010728:	4b34      	ldr	r3, [pc, #208]	; (80107fc <TimerStop+0x13c>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	691b      	ldr	r3, [r3, #16]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d01a      	beq.n	8010768 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 8010732:	4b32      	ldr	r3, [pc, #200]	; (80107fc <TimerStop+0x13c>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2200      	movs	r2, #0
 8010738:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 801073a:	4b30      	ldr	r3, [pc, #192]	; (80107fc <TimerStop+0x13c>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	691b      	ldr	r3, [r3, #16]
 8010740:	4a2e      	ldr	r2, [pc, #184]	; (80107fc <TimerStop+0x13c>)
 8010742:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 8010744:	4b2d      	ldr	r3, [pc, #180]	; (80107fc <TimerStop+0x13c>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	6819      	ldr	r1, [r3, #0]
 801074a:	4b2c      	ldr	r3, [pc, #176]	; (80107fc <TimerStop+0x13c>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68ba      	ldr	r2, [r7, #8]
 8010750:	440a      	add	r2, r1
 8010752:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 8010754:	4b29      	ldr	r3, [pc, #164]	; (80107fc <TimerStop+0x13c>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2201      	movs	r2, #1
 801075a:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 801075c:	4b27      	ldr	r3, [pc, #156]	; (80107fc <TimerStop+0x13c>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	4618      	mov	r0, r3
 8010762:	f000 f895 	bl	8010890 <TimerSetTimeout>
 8010766:	e044      	b.n	80107f2 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8010768:	4b24      	ldr	r3, [pc, #144]	; (80107fc <TimerStop+0x13c>)
 801076a:	2200      	movs	r2, #0
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	e040      	b.n	80107f2 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8010770:	4b22      	ldr	r3, [pc, #136]	; (80107fc <TimerStop+0x13c>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	691b      	ldr	r3, [r3, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d010      	beq.n	801079c <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8010780:	4b1e      	ldr	r3, [pc, #120]	; (80107fc <TimerStop+0x13c>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	691b      	ldr	r3, [r3, #16]
 8010786:	4a1d      	ldr	r2, [pc, #116]	; (80107fc <TimerStop+0x13c>)
 8010788:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 801078a:	4b1c      	ldr	r3, [pc, #112]	; (80107fc <TimerStop+0x13c>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	6819      	ldr	r1, [r3, #0]
 8010790:	4b1a      	ldr	r3, [pc, #104]	; (80107fc <TimerStop+0x13c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	440a      	add	r2, r1
 8010798:	601a      	str	r2, [r3, #0]
 801079a:	e02a      	b.n	80107f2 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 801079c:	4b17      	ldr	r3, [pc, #92]	; (80107fc <TimerStop+0x13c>)
 801079e:	2200      	movs	r2, #0
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	e026      	b.n	80107f2 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 80107aa:	e01f      	b.n	80107ec <TimerStop+0x12c>
        {
            if( cur == obj )
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d116      	bne.n	80107e2 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	691b      	ldr	r3, [r3, #16]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d00c      	beq.n	80107d6 <TimerStop+0x116>
                {
                    cur = cur->Next;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	68fa      	ldr	r2, [r7, #12]
 80107c6:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681a      	ldr	r2, [r3, #0]
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	441a      	add	r2, r3
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 80107d4:	e00d      	b.n	80107f2 <TimerStop+0x132>
                    cur = NULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	611a      	str	r2, [r3, #16]
                break;
 80107e0:	e007      	b.n	80107f2 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	691b      	ldr	r3, [r3, #16]
 80107ea:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1dc      	bne.n	80107ac <TimerStop+0xec>
            }
        }
    }
    BoardEnableIrq( );
 80107f2:	f7fa fe11 	bl	800b418 <BoardEnableIrq>
}
 80107f6:	3718      	adds	r7, #24
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	200008b4 	.word	0x200008b4

08010800 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8010800:	b480      	push	{r7}
 8010802:	b085      	sub	sp, #20
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8010808:	4b0a      	ldr	r3, [pc, #40]	; (8010834 <TimerExists+0x34>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 801080e:	e008      	b.n	8010822 <TimerExists+0x22>
    {
        if( cur == obj )
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	429a      	cmp	r2, r3
 8010816:	d101      	bne.n	801081c <TimerExists+0x1c>
        {
            return true;
 8010818:	2301      	movs	r3, #1
 801081a:	e006      	b.n	801082a <TimerExists+0x2a>
        }
        cur = cur->Next;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	691b      	ldr	r3, [r3, #16]
 8010820:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1f3      	bne.n	8010810 <TimerExists+0x10>
    }
    return false;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	bc80      	pop	{r7}
 8010832:	4770      	bx	lr
 8010834:	200008b4 	.word	0x200008b4

08010838 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7ff ff3c 	bl	80106c0 <TimerStop>
    obj->Timestamp = value;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	683a      	ldr	r2, [r7, #0]
 801084c:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	683a      	ldr	r2, [r7, #0]
 8010852:	605a      	str	r2, [r3, #4]
}
 8010854:	bf00      	nop
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8010860:	f7fc fa34 	bl	800cccc <RtcGetElapsedAlarmTime>
 8010864:	4603      	mov	r3, r0
}
 8010866:	4618      	mov	r0, r3
 8010868:	bd80      	pop	{r7, pc}

0801086a <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 801086a:	b580      	push	{r7, lr}
 801086c:	af00      	add	r7, sp, #0
    return RtcGetTimerValue( );
 801086e:	f7fc fa25 	bl	800ccbc <RtcGetTimerValue>
 8010872:	4603      	mov	r3, r0
}
 8010874:	4618      	mov	r0, r3
 8010876:	bd80      	pop	{r7, pc}

08010878 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t savedTime )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
    return RtcComputeElapsedTime( savedTime );
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f7fc fa45 	bl	800cd10 <RtcComputeElapsedTime>
 8010886:	4603      	mov	r3, r0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 8010898:	4b09      	ldr	r3, [pc, #36]	; (80108c0 <TimerSetTimeout+0x30>)
 801089a:	2200      	movs	r2, #0
 801089c:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp );
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fc f9d4 	bl	800cc50 <RtcGetAdjustedTimeoutValue>
 80108a8:	4602      	mov	r2, r0
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fc f9c0 	bl	800cc38 <RtcSetTimeout>
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	200008b0 	.word	0x200008b0

080108c4 <TimerLowPowerHandler>:

void TimerLowPowerHandler( void )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	af00      	add	r7, sp, #0
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == true ) )
 80108c8:	4b10      	ldr	r3, [pc, #64]	; (801090c <TimerLowPowerHandler+0x48>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d01b      	beq.n	8010908 <TimerLowPowerHandler+0x44>
 80108d0:	4b0e      	ldr	r3, [pc, #56]	; (801090c <TimerLowPowerHandler+0x48>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	7a1b      	ldrb	r3, [r3, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d016      	beq.n	8010908 <TimerLowPowerHandler+0x44>
    {
        if( HasLoopedThroughMain < 5 )
 80108da:	4b0d      	ldr	r3, [pc, #52]	; (8010910 <TimerLowPowerHandler+0x4c>)
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b04      	cmp	r3, #4
 80108e2:	d807      	bhi.n	80108f4 <TimerLowPowerHandler+0x30>
        {
            HasLoopedThroughMain++;
 80108e4:	4b0a      	ldr	r3, [pc, #40]	; (8010910 <TimerLowPowerHandler+0x4c>)
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	3301      	adds	r3, #1
 80108ec:	b2da      	uxtb	r2, r3
 80108ee:	4b08      	ldr	r3, [pc, #32]	; (8010910 <TimerLowPowerHandler+0x4c>)
 80108f0:	701a      	strb	r2, [r3, #0]
                RtcEnterLowPowerStopMode( );
#endif
            }
        }
    }
}
 80108f2:	e009      	b.n	8010908 <TimerLowPowerHandler+0x44>
            HasLoopedThroughMain = 0;
 80108f4:	4b06      	ldr	r3, [pc, #24]	; (8010910 <TimerLowPowerHandler+0x4c>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	701a      	strb	r2, [r3, #0]
            if( GetBoardPowerSource( ) == BATTERY_POWER )
 80108fa:	f7fb f857 	bl	800b9ac <GetBoardPowerSource>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b01      	cmp	r3, #1
 8010902:	d101      	bne.n	8010908 <TimerLowPowerHandler+0x44>
                RtcEnterLowPowerStopMode( );
 8010904:	f7fc fa38 	bl	800cd78 <RtcEnterLowPowerStopMode>
}
 8010908:	bf00      	nop
 801090a:	bd80      	pop	{r7, pc}
 801090c:	200008b4 	.word	0x200008b4
 8010910:	200008b0 	.word	0x200008b0

08010914 <HAL_UART_TxCpltCallback>:
    BoardEnableIrq( );
    return 1;
}

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *handle )
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]

    if( IsFifoEmpty( &Uart1.FifoTx ) == false )
 801091c:	4810      	ldr	r0, [pc, #64]	; (8010960 <HAL_UART_TxCpltCallback+0x4c>)
 801091e:	f7fb fac9 	bl	800beb4 <IsFifoEmpty>
 8010922:	4603      	mov	r3, r0
 8010924:	f083 0301 	eor.w	r3, r3, #1
 8010928:	b2db      	uxtb	r3, r3
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00b      	beq.n	8010946 <HAL_UART_TxCpltCallback+0x32>
    {
        TxData = FifoPop( &Uart1.FifoTx );
 801092e:	480c      	ldr	r0, [pc, #48]	; (8010960 <HAL_UART_TxCpltCallback+0x4c>)
 8010930:	f7fb faa1 	bl	800be76 <FifoPop>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	4b0a      	ldr	r3, [pc, #40]	; (8010964 <HAL_UART_TxCpltCallback+0x50>)
 801093a:	701a      	strb	r2, [r3, #0]
        //  Write one byte to the transmit data register
        HAL_UART_Transmit_IT( &UartHandle, &TxData, 1 );
 801093c:	2201      	movs	r2, #1
 801093e:	4909      	ldr	r1, [pc, #36]	; (8010964 <HAL_UART_TxCpltCallback+0x50>)
 8010940:	4809      	ldr	r0, [pc, #36]	; (8010968 <HAL_UART_TxCpltCallback+0x54>)
 8010942:	f7f3 fdd4 	bl	80044ee <HAL_UART_Transmit_IT>
    }

    if( Uart1.IrqNotify != NULL )
 8010946:	4b09      	ldr	r3, [pc, #36]	; (801096c <HAL_UART_TxCpltCallback+0x58>)
 8010948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801094a:	2b00      	cmp	r3, #0
 801094c:	d003      	beq.n	8010956 <HAL_UART_TxCpltCallback+0x42>
    {
        Uart1.IrqNotify( UART_NOTIFY_TX );
 801094e:	4b07      	ldr	r3, [pc, #28]	; (801096c <HAL_UART_TxCpltCallback+0x58>)
 8010950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010952:	2000      	movs	r0, #0
 8010954:	4798      	blx	r3
    }
}
 8010956:	bf00      	nop
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	20000bd4 	.word	0x20000bd4
 8010964:	200008b9 	.word	0x200008b9
 8010968:	20001444 	.word	0x20001444
 801096c:	20000bb8 	.word	0x20000bb8

08010970 <HAL_UART_ErrorCallback>:

    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
}
*/
void HAL_UART_ErrorCallback( UART_HandleTypeDef *handle )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 8010978:	2201      	movs	r2, #1
 801097a:	4904      	ldr	r1, [pc, #16]	; (801098c <HAL_UART_ErrorCallback+0x1c>)
 801097c:	4804      	ldr	r0, [pc, #16]	; (8010990 <HAL_UART_ErrorCallback+0x20>)
 801097e:	f7f3 fdfa 	bl	8004576 <HAL_UART_Receive_IT>
}
 8010982:	bf00      	nop
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	200008b8 	.word	0x200008b8
 8010990:	20001444 	.word	0x20001444

08010994 <DebugPrintf>:
        return 0; // OK
    }
}

void  DebugPrintf (char  *p_fmt, ...)
{
 8010994:	b40f      	push	{r0, r1, r2, r3}
 8010996:	b480      	push	{r7}
 8010998:	b0b5      	sub	sp, #212	; 0xd4
 801099a:	af00      	add	r7, sp, #0
        //CDC_Transmit_FS((uint8_t*) str, len);
        UartPutBuffer(&Uart1, (uint8_t *)str, len);
    }


}
 801099c:	bf00      	nop
 801099e:	37d4      	adds	r7, #212	; 0xd4
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bc80      	pop	{r7}
 80109a4:	b004      	add	sp, #16
 80109a6:	4770      	bx	lr

080109a8 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 80109a8:	b480      	push	{r7}
 80109aa:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80109ac:	4b0d      	ldr	r3, [pc, #52]	; (80109e4 <rand1+0x3c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	4a0d      	ldr	r2, [pc, #52]	; (80109e8 <rand1+0x40>)
 80109b2:	fb02 f303 	mul.w	r3, r2, r3
 80109b6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80109ba:	3339      	adds	r3, #57	; 0x39
 80109bc:	4a09      	ldr	r2, [pc, #36]	; (80109e4 <rand1+0x3c>)
 80109be:	6013      	str	r3, [r2, #0]
 80109c0:	4b08      	ldr	r3, [pc, #32]	; (80109e4 <rand1+0x3c>)
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	2303      	movs	r3, #3
 80109c6:	fba3 1302 	umull	r1, r3, r3, r2
 80109ca:	1ad1      	subs	r1, r2, r3
 80109cc:	0849      	lsrs	r1, r1, #1
 80109ce:	440b      	add	r3, r1
 80109d0:	0f99      	lsrs	r1, r3, #30
 80109d2:	460b      	mov	r3, r1
 80109d4:	07db      	lsls	r3, r3, #31
 80109d6:	1a5b      	subs	r3, r3, r1
 80109d8:	1ad1      	subs	r1, r2, r3
 80109da:	460b      	mov	r3, r1
}
 80109dc:	4618      	mov	r0, r3
 80109de:	46bd      	mov	sp, r7
 80109e0:	bc80      	pop	{r7}
 80109e2:	4770      	bx	lr
 80109e4:	200000a4 	.word	0x200000a4
 80109e8:	41c64e6d 	.word	0x41c64e6d

080109ec <srand1>:

void srand1( uint32_t seed )
{
 80109ec:	b480      	push	{r7}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    next = seed;
 80109f4:	4a03      	ldr	r2, [pc, #12]	; (8010a04 <srand1+0x18>)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6013      	str	r3, [r2, #0]
}
 80109fa:	bf00      	nop
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bc80      	pop	{r7}
 8010a02:	4770      	bx	lr
 8010a04:	200000a4 	.word	0x200000a4

08010a08 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010a12:	f7ff ffc9 	bl	80109a8 <rand1>
 8010a16:	4602      	mov	r2, r0
 8010a18:	6839      	ldr	r1, [r7, #0]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	1acb      	subs	r3, r1, r3
 8010a1e:	3301      	adds	r3, #1
 8010a20:	fb92 f1f3 	sdiv	r1, r2, r3
 8010a24:	fb03 f301 	mul.w	r3, r3, r1
 8010a28:	1ad2      	subs	r2, r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4413      	add	r3, r2
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010a36:	b480      	push	{r7}
 8010a38:	b085      	sub	sp, #20
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	60f8      	str	r0, [r7, #12]
 8010a3e:	60b9      	str	r1, [r7, #8]
 8010a40:	4613      	mov	r3, r2
 8010a42:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8010a44:	e007      	b.n	8010a56 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8010a46:	68ba      	ldr	r2, [r7, #8]
 8010a48:	1c53      	adds	r3, r2, #1
 8010a4a:	60bb      	str	r3, [r7, #8]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	1c59      	adds	r1, r3, #1
 8010a50:	60f9      	str	r1, [r7, #12]
 8010a52:	7812      	ldrb	r2, [r2, #0]
 8010a54:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010a56:	88fb      	ldrh	r3, [r7, #6]
 8010a58:	1e5a      	subs	r2, r3, #1
 8010a5a:	80fa      	strh	r2, [r7, #6]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d1f2      	bne.n	8010a46 <memcpy1+0x10>
    }
}
 8010a60:	bf00      	nop
 8010a62:	bf00      	nop
 8010a64:	3714      	adds	r7, #20
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bc80      	pop	{r7}
 8010a6a:	4770      	bx	lr

08010a6c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b085      	sub	sp, #20
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	4613      	mov	r3, r2
 8010a78:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8010a7a:	88fb      	ldrh	r3, [r7, #6]
 8010a7c:	3b01      	subs	r3, #1
 8010a7e:	68fa      	ldr	r2, [r7, #12]
 8010a80:	4413      	add	r3, r2
 8010a82:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8010a84:	e007      	b.n	8010a96 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	1c53      	adds	r3, r2, #1
 8010a8a:	60bb      	str	r3, [r7, #8]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	1e59      	subs	r1, r3, #1
 8010a90:	60f9      	str	r1, [r7, #12]
 8010a92:	7812      	ldrb	r2, [r2, #0]
 8010a94:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010a96:	88fb      	ldrh	r3, [r7, #6]
 8010a98:	1e5a      	subs	r2, r3, #1
 8010a9a:	80fa      	strh	r2, [r7, #6]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1f2      	bne.n	8010a86 <memcpyr+0x1a>
    }
}
 8010aa0:	bf00      	nop
 8010aa2:	bf00      	nop
 8010aa4:	3714      	adds	r7, #20
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bc80      	pop	{r7}
 8010aaa:	4770      	bx	lr

08010aac <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	70fb      	strb	r3, [r7, #3]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8010abc:	e004      	b.n	8010ac8 <memset1+0x1c>
    {
        *dst++ = value;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	1c5a      	adds	r2, r3, #1
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	78fa      	ldrb	r2, [r7, #3]
 8010ac6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010ac8:	883b      	ldrh	r3, [r7, #0]
 8010aca:	1e5a      	subs	r2, r3, #1
 8010acc:	803a      	strh	r2, [r7, #0]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1f5      	bne.n	8010abe <memset1+0x12>
    }
}
 8010ad2:	bf00      	nop
 8010ad4:	bf00      	nop
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bc80      	pop	{r7}
 8010adc:	4770      	bx	lr

08010ade <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 8010ade:	b480      	push	{r7}
 8010ae0:	b083      	sub	sp, #12
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
	GNSS->month = 0;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	GNSS->day = 0;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2200      	movs	r2, #0
 8010b02:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	GNSS->hour = 0;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	GNSS->min = 0;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	GNSS->sec = 0;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	GNSS->fixType = 0;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	GNSS->flags = 0;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	GNSS->numSV = 0;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	GNSS->lon = 0;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	GNSS->lat = 0;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	GNSS->height = 0;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	GNSS->hMSL = 0;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2200      	movs	r2, #0
 8010b52:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	GNSS->hAcc = 0;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	GNSS->vAcc = 0;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	GNSS->gSpeed = 0;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	GNSS->headMot = 0;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8010b76:	bf00      	nop
 8010b78:	370c      	adds	r7, #12
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bc80      	pop	{r7}
 8010b7e:	4770      	bx	lr

08010b80 <GNSSDataReset>:

void GNSSDataReset(GNSS_StateHandle *GNSS) {
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
	GNSS->year = 0;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
	GNSS->month = 0;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	GNSS->day = 0;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	GNSS->hour = 0;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	GNSS->min = 0;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	GNSS->sec = 0;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	GNSS->fixType = 0;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	GNSS->flags = 0;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	GNSS->numSV = 0;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	GNSS->lon = 0;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	GNSS->lat = 0;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	GNSS->lonBytes[0] = 0;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	GNSS->lonBytes[1] = 0;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2200      	movs	r2, #0
 8010bec:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	GNSS->lonBytes[2] = 0;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	GNSS->lonBytes[3] = 0;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
	GNSS->latBytes[0] = 0;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	GNSS->latBytes[1] = 0;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	GNSS->latBytes[2] = 0;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	GNSS->latBytes[3] = 0;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
	GNSS->fLon = 0;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f04f 0200 	mov.w	r2, #0
 8010c26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	GNSS->fLat = 0;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f04f 0200 	mov.w	r2, #0
 8010c30:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	GNSS->height = 0;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	GNSS->hMSL = 0;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	GNSS->hAcc = 0;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2200      	movs	r2, #0
 8010c48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	GNSS->vAcc = 0;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	GNSS->gSpeed = 0;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	GNSS->headMot = 0;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8010c64:	bf00      	nop
 8010c66:	370c      	adds	r7, #12
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bc80      	pop	{r7}
 8010c6c:	4770      	bx	lr

08010c6e <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8010c76:	2300      	movs	r3, #0
 8010c78:	60fb      	str	r3, [r7, #12]
 8010c7a:	e051      	b.n	8010d20 <GNSS_ParseBuffer+0xb2>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	4413      	add	r3, r2
 8010c82:	3308      	adds	r3, #8
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	2bb5      	cmp	r3, #181	; 0xb5
 8010c88:	d147      	bne.n	8010d1a <GNSS_ParseBuffer+0xac>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	3301      	adds	r3, #1
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	4413      	add	r3, r2
 8010c92:	7a1b      	ldrb	r3, [r3, #8]
 8010c94:	2b62      	cmp	r3, #98	; 0x62
 8010c96:	d140      	bne.n	8010d1a <GNSS_ParseBuffer+0xac>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	3302      	adds	r3, #2
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	7a1b      	ldrb	r3, [r3, #8]
 8010ca2:	2b27      	cmp	r3, #39	; 0x27
 8010ca4:	d106      	bne.n	8010cb4 <GNSS_ParseBuffer+0x46>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	3303      	adds	r3, #3
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	4413      	add	r3, r2
 8010cae:	7a1b      	ldrb	r3, [r3, #8]
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d032      	beq.n	8010d1a <GNSS_ParseBuffer+0xac>
//				GNSS_ParseUniqID(GNSS);
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	3302      	adds	r3, #2
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	4413      	add	r3, r2
 8010cbc:	7a1b      	ldrb	r3, [r3, #8]
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d106      	bne.n	8010cd0 <GNSS_ParseBuffer+0x62>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	3303      	adds	r3, #3
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	4413      	add	r3, r2
 8010cca:	7a1b      	ldrb	r3, [r3, #8]
 8010ccc:	2b21      	cmp	r3, #33	; 0x21
 8010cce:	d024      	beq.n	8010d1a <GNSS_ParseBuffer+0xac>
//				GNSS_ParseNavigatorData(GNSS);
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3302      	adds	r3, #2
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	7a1b      	ldrb	r3, [r3, #8]
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d10b      	bne.n	8010cf6 <GNSS_ParseBuffer+0x88>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	3303      	adds	r3, #3
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	7a1b      	ldrb	r3, [r3, #8]
 8010ce8:	2b07      	cmp	r3, #7
 8010cea:	d104      	bne.n	8010cf6 <GNSS_ParseBuffer+0x88>
				GNSS_ParsePVTData(GNSS, var);
 8010cec:	68f9      	ldr	r1, [r7, #12]
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 f842 	bl	8010d78 <GNSS_ParsePVTData>
 8010cf4:	e011      	b.n	8010d1a <GNSS_ParseBuffer+0xac>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3302      	adds	r3, #2
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	7a1b      	ldrb	r3, [r3, #8]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d10a      	bne.n	8010d1a <GNSS_ParseBuffer+0xac>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	3303      	adds	r3, #3
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	4413      	add	r3, r2
 8010d0c:	7a1b      	ldrb	r3, [r3, #8]
 8010d0e:	2b02      	cmp	r3, #2
 8010d10:	d103      	bne.n	8010d1a <GNSS_ParseBuffer+0xac>
				GNSS_ParsePOSLLHData(GNSS, var);
 8010d12:	68f9      	ldr	r1, [r7, #12]
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f000 f9e3 	bl	80110e0 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	60fb      	str	r3, [r7, #12]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b64      	cmp	r3, #100	; 0x64
 8010d24:	ddaa      	ble.n	8010c7c <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 8010d26:	bf00      	nop
 8010d28:	bf00      	nop
 8010d2a:	3710      	adds	r7, #16
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <GNSS_GetPVTData>:
/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2208      	movs	r2, #8
 8010d3e:	490c      	ldr	r1, [pc, #48]	; (8010d70 <GNSS_GetPVTData+0x40>)
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7f3 fc49 	bl	80045d8 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 8010d46:	bf00      	nop
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7f3 fe76 	bl	8004a3e <HAL_UART_GetState>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b20      	cmp	r3, #32
 8010d56:	d1f7      	bne.n	8010d48 <GNSS_GetPVTData+0x18>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 200, 1000);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6818      	ldr	r0, [r3, #0]
 8010d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d60:	22c8      	movs	r2, #200	; 0xc8
 8010d62:	4904      	ldr	r1, [pc, #16]	; (8010d74 <GNSS_GetPVTData+0x44>)
 8010d64:	f7f3 fb21 	bl	80043aa <HAL_UART_Receive>
}
 8010d68:	bf00      	nop
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	08013238 	.word	0x08013238
 8010d74:	200010f0 	.word	0x200010f0

08010d78 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS, int varStart) {
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b08a      	sub	sp, #40	; 0x28
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[varStart+10];
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	330a      	adds	r3, #10
 8010d86:	4aa3      	ldr	r2, [pc, #652]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010d88:	4413      	add	r3, r2
 8010d8a:	7a1a      	ldrb	r2, [r3, #8]
 8010d8c:	4ba2      	ldr	r3, [pc, #648]	; (8011018 <GNSS_ParsePVTData+0x2a0>)
 8010d8e:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.uartWorkingBuffer[varStart+10];
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	330a      	adds	r3, #10
 8010d94:	4a9f      	ldr	r2, [pc, #636]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010d96:	4413      	add	r3, r2
 8010d98:	7a1a      	ldrb	r2, [r3, #8]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[varStart+11];
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	330b      	adds	r3, #11
 8010da4:	4a9b      	ldr	r2, [pc, #620]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010da6:	4413      	add	r3, r2
 8010da8:	7a1a      	ldrb	r2, [r3, #8]
 8010daa:	4b9b      	ldr	r3, [pc, #620]	; (8011018 <GNSS_ParsePVTData+0x2a0>)
 8010dac:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.uartWorkingBuffer[varStart+11];
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	330b      	adds	r3, #11
 8010db2:	4a98      	ldr	r2, [pc, #608]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010db4:	4413      	add	r3, r2
 8010db6:	7a1a      	ldrb	r2, [r3, #8]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	GNSS->year = uShort.uShort;
 8010dbe:	4b96      	ldr	r3, [pc, #600]	; (8011018 <GNSS_ParsePVTData+0x2a0>)
 8010dc0:	881a      	ldrh	r2, [r3, #0]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
	GNSS->month = GNSS_Handle.uartWorkingBuffer[varStart+12];
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	330c      	adds	r3, #12
 8010dcc:	4a91      	ldr	r2, [pc, #580]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010dce:	4413      	add	r3, r2
 8010dd0:	7a1a      	ldrb	r2, [r3, #8]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
	GNSS->day = GNSS_Handle.uartWorkingBuffer[varStart+13];
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	330d      	adds	r3, #13
 8010ddc:	4a8d      	ldr	r2, [pc, #564]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010dde:	4413      	add	r3, r2
 8010de0:	7a1a      	ldrb	r2, [r3, #8]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[varStart+14];
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	330e      	adds	r3, #14
 8010dec:	4a89      	ldr	r2, [pc, #548]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010dee:	4413      	add	r3, r2
 8010df0:	7a1a      	ldrb	r2, [r3, #8]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	GNSS->min = GNSS_Handle.uartWorkingBuffer[varStart+15];
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	330f      	adds	r3, #15
 8010dfc:	4a85      	ldr	r2, [pc, #532]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010dfe:	4413      	add	r3, r2
 8010e00:	7a1a      	ldrb	r2, [r3, #8]
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[varStart+16];
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	3310      	adds	r3, #16
 8010e0c:	4a81      	ldr	r2, [pc, #516]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010e0e:	4413      	add	r3, r2
 8010e10:	7a1a      	ldrb	r2, [r3, #8]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	GNSS->fixType = GNSS_Handle.uartWorkingBuffer[varStart+26];
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	331a      	adds	r3, #26
 8010e1c:	4a7d      	ldr	r2, [pc, #500]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010e1e:	4413      	add	r3, r2
 8010e20:	7a1a      	ldrb	r2, [r3, #8]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	GNSS->flags = GNSS_Handle.uartWorkingBuffer[varStart+27];
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	331b      	adds	r3, #27
 8010e2c:	4a79      	ldr	r2, [pc, #484]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010e2e:	4413      	add	r3, r2
 8010e30:	7a1a      	ldrb	r2, [r3, #8]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	GNSS->numSV = GNSS_Handle.uartWorkingBuffer[varStart+28];
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	331c      	adds	r3, #28
 8010e3c:	4a75      	ldr	r2, [pc, #468]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010e3e:	4413      	add	r3, r2
 8010e40:	7a1a      	ldrb	r2, [r3, #8]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

	for (int var = 0; var < 4; ++var) {
 8010e48:	2300      	movs	r3, #0
 8010e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e4c:	e01b      	b.n	8010e86 <GNSS_ParsePVTData+0x10e>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 30];
 8010e4e:	683a      	ldr	r2, [r7, #0]
 8010e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e52:	4413      	add	r3, r2
 8010e54:	331e      	adds	r3, #30
 8010e56:	4a6f      	ldr	r2, [pc, #444]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010e58:	4413      	add	r3, r2
 8010e5a:	7a19      	ldrb	r1, [r3, #8]
 8010e5c:	4a6f      	ldr	r2, [pc, #444]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e60:	4413      	add	r3, r2
 8010e62:	460a      	mov	r2, r1
 8010e64:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.uartWorkingBuffer[varStart+var + 30];
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	4413      	add	r3, r2
 8010e6c:	331e      	adds	r3, #30
 8010e6e:	4a69      	ldr	r2, [pc, #420]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010e70:	4413      	add	r3, r2
 8010e72:	7a19      	ldrb	r1, [r3, #8]
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e78:	4413      	add	r3, r2
 8010e7a:	33e4      	adds	r3, #228	; 0xe4
 8010e7c:	460a      	mov	r2, r1
 8010e7e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e82:	3301      	adds	r3, #1
 8010e84:	627b      	str	r3, [r7, #36]	; 0x24
 8010e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e88:	2b03      	cmp	r3, #3
 8010e8a:	dde0      	ble.n	8010e4e <GNSS_ParsePVTData+0xd6>
	}
	GNSS->lon = iLong.iLong;
 8010e8c:	4b63      	ldr	r3, [pc, #396]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010e8e:	681a      	ldr	r2, [r3, #0]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8010e96:	4b61      	ldr	r3, [pc, #388]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ef fec8 	bl	8000c30 <__aeabi_i2f>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	495f      	ldr	r1, [pc, #380]	; (8011020 <GNSS_ParsePVTData+0x2a8>)
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7ef ffcb 	bl	8000e40 <__aeabi_fdiv>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	461a      	mov	r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	for (int var = 0; var < 4; ++var) {
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	623b      	str	r3, [r7, #32]
 8010eb8:	e01b      	b.n	8010ef2 <GNSS_ParsePVTData+0x17a>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 34];
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	6a3b      	ldr	r3, [r7, #32]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	3322      	adds	r3, #34	; 0x22
 8010ec2:	4a54      	ldr	r2, [pc, #336]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010ec4:	4413      	add	r3, r2
 8010ec6:	7a19      	ldrb	r1, [r3, #8]
 8010ec8:	4a54      	ldr	r2, [pc, #336]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	4413      	add	r3, r2
 8010ece:	460a      	mov	r2, r1
 8010ed0:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.uartWorkingBuffer[varStart+var + 34];
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	6a3b      	ldr	r3, [r7, #32]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	3322      	adds	r3, #34	; 0x22
 8010eda:	4a4e      	ldr	r2, [pc, #312]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010edc:	4413      	add	r3, r2
 8010ede:	7a19      	ldrb	r1, [r3, #8]
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	6a3b      	ldr	r3, [r7, #32]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	33ec      	adds	r3, #236	; 0xec
 8010ee8:	460a      	mov	r2, r1
 8010eea:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010eec:	6a3b      	ldr	r3, [r7, #32]
 8010eee:	3301      	adds	r3, #1
 8010ef0:	623b      	str	r3, [r7, #32]
 8010ef2:	6a3b      	ldr	r3, [r7, #32]
 8010ef4:	2b03      	cmp	r3, #3
 8010ef6:	dde0      	ble.n	8010eba <GNSS_ParsePVTData+0x142>
	}
	GNSS->lat = iLong.iLong;
 8010ef8:	4b48      	ldr	r3, [pc, #288]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8010f02:	4b46      	ldr	r3, [pc, #280]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7ef fe92 	bl	8000c30 <__aeabi_i2f>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	4944      	ldr	r1, [pc, #272]	; (8011020 <GNSS_ParsePVTData+0x2a8>)
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ef ff95 	bl	8000e40 <__aeabi_fdiv>
 8010f16:	4603      	mov	r3, r0
 8010f18:	461a      	mov	r2, r3
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	for (int var = 0; var < 4; ++var) {
 8010f20:	2300      	movs	r3, #0
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	e00e      	b.n	8010f44 <GNSS_ParsePVTData+0x1cc>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 38];
 8010f26:	683a      	ldr	r2, [r7, #0]
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	3326      	adds	r3, #38	; 0x26
 8010f2e:	4a39      	ldr	r2, [pc, #228]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010f30:	4413      	add	r3, r2
 8010f32:	7a19      	ldrb	r1, [r3, #8]
 8010f34:	4a39      	ldr	r2, [pc, #228]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010f36:	69fb      	ldr	r3, [r7, #28]
 8010f38:	4413      	add	r3, r2
 8010f3a:	460a      	mov	r2, r1
 8010f3c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	3301      	adds	r3, #1
 8010f42:	61fb      	str	r3, [r7, #28]
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	2b03      	cmp	r3, #3
 8010f48:	dded      	ble.n	8010f26 <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->height = iLong.iLong;
 8010f4a:	4b34      	ldr	r3, [pc, #208]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010f4c:	681a      	ldr	r2, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	for (int var = 0; var < 4; ++var) {
 8010f54:	2300      	movs	r3, #0
 8010f56:	61bb      	str	r3, [r7, #24]
 8010f58:	e01c      	b.n	8010f94 <GNSS_ParsePVTData+0x21c>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 42];
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	4413      	add	r3, r2
 8010f60:	332a      	adds	r3, #42	; 0x2a
 8010f62:	4a2c      	ldr	r2, [pc, #176]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010f64:	4413      	add	r3, r2
 8010f66:	7a19      	ldrb	r1, [r3, #8]
 8010f68:	4a2c      	ldr	r2, [pc, #176]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	460a      	mov	r2, r1
 8010f70:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 42];
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	4413      	add	r3, r2
 8010f78:	332a      	adds	r3, #42	; 0x2a
 8010f7a:	4a26      	ldr	r2, [pc, #152]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010f7c:	4413      	add	r3, r2
 8010f7e:	7a19      	ldrb	r1, [r3, #8]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	4413      	add	r3, r2
 8010f86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8010f8a:	460a      	mov	r2, r1
 8010f8c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	3301      	adds	r3, #1
 8010f92:	61bb      	str	r3, [r7, #24]
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	2b03      	cmp	r3, #3
 8010f98:	dddf      	ble.n	8010f5a <GNSS_ParsePVTData+0x1e2>
	}
	GNSS->hMSL = iLong.iLong;
 8010f9a:	4b20      	ldr	r3, [pc, #128]	; (801101c <GNSS_ParsePVTData+0x2a4>)
 8010f9c:	681a      	ldr	r2, [r3, #0]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	for (int var = 0; var < 4; ++var) {
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	617b      	str	r3, [r7, #20]
 8010fa8:	e00e      	b.n	8010fc8 <GNSS_ParsePVTData+0x250>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 46];
 8010faa:	683a      	ldr	r2, [r7, #0]
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	4413      	add	r3, r2
 8010fb0:	332e      	adds	r3, #46	; 0x2e
 8010fb2:	4a18      	ldr	r2, [pc, #96]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010fb4:	4413      	add	r3, r2
 8010fb6:	7a19      	ldrb	r1, [r3, #8]
 8010fb8:	4a1a      	ldr	r2, [pc, #104]	; (8011024 <GNSS_ParsePVTData+0x2ac>)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	4413      	add	r3, r2
 8010fbe:	460a      	mov	r2, r1
 8010fc0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	617b      	str	r3, [r7, #20]
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	2b03      	cmp	r3, #3
 8010fcc:	dded      	ble.n	8010faa <GNSS_ParsePVTData+0x232>
	}
	GNSS->hAcc = uLong.uLong;
 8010fce:	4b15      	ldr	r3, [pc, #84]	; (8011024 <GNSS_ParsePVTData+0x2ac>)
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	for (int var = 0; var < 4; ++var) {
 8010fd8:	2300      	movs	r3, #0
 8010fda:	613b      	str	r3, [r7, #16]
 8010fdc:	e00e      	b.n	8010ffc <GNSS_ParsePVTData+0x284>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 50];
 8010fde:	683a      	ldr	r2, [r7, #0]
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	3332      	adds	r3, #50	; 0x32
 8010fe6:	4a0b      	ldr	r2, [pc, #44]	; (8011014 <GNSS_ParsePVTData+0x29c>)
 8010fe8:	4413      	add	r3, r2
 8010fea:	7a19      	ldrb	r1, [r3, #8]
 8010fec:	4a0d      	ldr	r2, [pc, #52]	; (8011024 <GNSS_ParsePVTData+0x2ac>)
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	4413      	add	r3, r2
 8010ff2:	460a      	mov	r2, r1
 8010ff4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	613b      	str	r3, [r7, #16]
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	2b03      	cmp	r3, #3
 8011000:	dded      	ble.n	8010fde <GNSS_ParsePVTData+0x266>
	}
	GNSS->vAcc = uLong.uLong;
 8011002:	4b08      	ldr	r3, [pc, #32]	; (8011024 <GNSS_ParsePVTData+0x2ac>)
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	for (int var = 0; var < 4; ++var) {
 801100c:	2300      	movs	r3, #0
 801100e:	60fb      	str	r3, [r7, #12]
 8011010:	e027      	b.n	8011062 <GNSS_ParsePVTData+0x2ea>
 8011012:	bf00      	nop
 8011014:	200010e8 	.word	0x200010e8
 8011018:	20001488 	.word	0x20001488
 801101c:	2000148c 	.word	0x2000148c
 8011020:	4b189680 	.word	0x4b189680
 8011024:	20001494 	.word	0x20001494
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 66];
 8011028:	683a      	ldr	r2, [r7, #0]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	4413      	add	r3, r2
 801102e:	3342      	adds	r3, #66	; 0x42
 8011030:	4a29      	ldr	r2, [pc, #164]	; (80110d8 <GNSS_ParsePVTData+0x360>)
 8011032:	4413      	add	r3, r2
 8011034:	7a19      	ldrb	r1, [r3, #8]
 8011036:	4a29      	ldr	r2, [pc, #164]	; (80110dc <GNSS_ParsePVTData+0x364>)
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	4413      	add	r3, r2
 801103c:	460a      	mov	r2, r1
 801103e:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 66];
 8011040:	683a      	ldr	r2, [r7, #0]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	4413      	add	r3, r2
 8011046:	3342      	adds	r3, #66	; 0x42
 8011048:	4a23      	ldr	r2, [pc, #140]	; (80110d8 <GNSS_ParsePVTData+0x360>)
 801104a:	4413      	add	r3, r2
 801104c:	7a19      	ldrb	r1, [r3, #8]
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	4413      	add	r3, r2
 8011054:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8011058:	460a      	mov	r2, r1
 801105a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	3301      	adds	r3, #1
 8011060:	60fb      	str	r3, [r7, #12]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2b03      	cmp	r3, #3
 8011066:	dddf      	ble.n	8011028 <GNSS_ParsePVTData+0x2b0>
	}
	GNSS->gSpeed = iLong.iLong;
 8011068:	4b1c      	ldr	r3, [pc, #112]	; (80110dc <GNSS_ParsePVTData+0x364>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	for (int var = 0; var < 4; ++var) {
 8011072:	2300      	movs	r3, #0
 8011074:	60bb      	str	r3, [r7, #8]
 8011076:	e00e      	b.n	8011096 <GNSS_ParsePVTData+0x31e>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+var + 70];
 8011078:	683a      	ldr	r2, [r7, #0]
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	4413      	add	r3, r2
 801107e:	3346      	adds	r3, #70	; 0x46
 8011080:	4a15      	ldr	r2, [pc, #84]	; (80110d8 <GNSS_ParsePVTData+0x360>)
 8011082:	4413      	add	r3, r2
 8011084:	7a19      	ldrb	r1, [r3, #8]
 8011086:	4a15      	ldr	r2, [pc, #84]	; (80110dc <GNSS_ParsePVTData+0x364>)
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	4413      	add	r3, r2
 801108c:	460a      	mov	r2, r1
 801108e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	3301      	adds	r3, #1
 8011094:	60bb      	str	r3, [r7, #8]
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	2b03      	cmp	r3, #3
 801109a:	dded      	ble.n	8011078 <GNSS_ParsePVTData+0x300>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 801109c:	4b0f      	ldr	r3, [pc, #60]	; (80110dc <GNSS_ParsePVTData+0x364>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7ef f9bf 	bl	8000424 <__aeabi_i2d>
 80110a6:	a30a      	add	r3, pc, #40	; (adr r3, 80110d0 <GNSS_ParsePVTData+0x358>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	f7ef fa24 	bl	80004f8 <__aeabi_dmul>
 80110b0:	4602      	mov	r2, r0
 80110b2:	460b      	mov	r3, r1
 80110b4:	4610      	mov	r0, r2
 80110b6:	4619      	mov	r1, r3
 80110b8:	f7ef fcb8 	bl	8000a2c <__aeabi_d2iz>
 80110bc:	4602      	mov	r2, r0
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 80110c4:	bf00      	nop
 80110c6:	3728      	adds	r7, #40	; 0x28
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	f3af 8000 	nop.w
 80110d0:	88e368f1 	.word	0x88e368f1
 80110d4:	3ee4f8b5 	.word	0x3ee4f8b5
 80110d8:	200010e8 	.word	0x200010e8
 80110dc:	2000148c 	.word	0x2000148c

080110e0 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS, int varStart) {
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b088      	sub	sp, #32
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
	for (int var = 0; var < 4; ++var) {
 80110ea:	2300      	movs	r3, #0
 80110ec:	61fb      	str	r3, [r7, #28]
 80110ee:	e00e      	b.n	801110e <GNSS_ParsePOSLLHData+0x2e>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+ var + 10];
 80110f0:	683a      	ldr	r2, [r7, #0]
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	4413      	add	r3, r2
 80110f6:	330a      	adds	r3, #10
 80110f8:	4a5b      	ldr	r2, [pc, #364]	; (8011268 <GNSS_ParsePOSLLHData+0x188>)
 80110fa:	4413      	add	r3, r2
 80110fc:	7a19      	ldrb	r1, [r3, #8]
 80110fe:	4a5b      	ldr	r2, [pc, #364]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	4413      	add	r3, r2
 8011104:	460a      	mov	r2, r1
 8011106:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	3301      	adds	r3, #1
 801110c:	61fb      	str	r3, [r7, #28]
 801110e:	69fb      	ldr	r3, [r7, #28]
 8011110:	2b03      	cmp	r3, #3
 8011112:	dded      	ble.n	80110f0 <GNSS_ParsePOSLLHData+0x10>
	}
	GNSS->lon = iLong.iLong;
 8011114:	4b55      	ldr	r3, [pc, #340]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 801111e:	4b53      	ldr	r3, [pc, #332]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4618      	mov	r0, r3
 8011124:	f7ef fd84 	bl	8000c30 <__aeabi_i2f>
 8011128:	4603      	mov	r3, r0
 801112a:	4951      	ldr	r1, [pc, #324]	; (8011270 <GNSS_ParsePOSLLHData+0x190>)
 801112c:	4618      	mov	r0, r3
 801112e:	f7ef fe87 	bl	8000e40 <__aeabi_fdiv>
 8011132:	4603      	mov	r3, r0
 8011134:	461a      	mov	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

	for (int var = 0; var < 4; ++var) {
 801113c:	2300      	movs	r3, #0
 801113e:	61bb      	str	r3, [r7, #24]
 8011140:	e00e      	b.n	8011160 <GNSS_ParsePOSLLHData+0x80>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+ var + 14];
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	4413      	add	r3, r2
 8011148:	330e      	adds	r3, #14
 801114a:	4a47      	ldr	r2, [pc, #284]	; (8011268 <GNSS_ParsePOSLLHData+0x188>)
 801114c:	4413      	add	r3, r2
 801114e:	7a19      	ldrb	r1, [r3, #8]
 8011150:	4a46      	ldr	r2, [pc, #280]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	4413      	add	r3, r2
 8011156:	460a      	mov	r2, r1
 8011158:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	3301      	adds	r3, #1
 801115e:	61bb      	str	r3, [r7, #24]
 8011160:	69bb      	ldr	r3, [r7, #24]
 8011162:	2b03      	cmp	r3, #3
 8011164:	dded      	ble.n	8011142 <GNSS_ParsePOSLLHData+0x62>
	}
	GNSS->lat = iLong.iLong;
 8011166:	4b41      	ldr	r3, [pc, #260]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8011170:	4b3e      	ldr	r3, [pc, #248]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4618      	mov	r0, r3
 8011176:	f7ef fd5b 	bl	8000c30 <__aeabi_i2f>
 801117a:	4603      	mov	r3, r0
 801117c:	493c      	ldr	r1, [pc, #240]	; (8011270 <GNSS_ParsePOSLLHData+0x190>)
 801117e:	4618      	mov	r0, r3
 8011180:	f7ef fe5e 	bl	8000e40 <__aeabi_fdiv>
 8011184:	4603      	mov	r3, r0
 8011186:	461a      	mov	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

	for (int var = 0; var < 4; ++var) {
 801118e:	2300      	movs	r3, #0
 8011190:	617b      	str	r3, [r7, #20]
 8011192:	e00e      	b.n	80111b2 <GNSS_ParsePOSLLHData+0xd2>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+ var + 18];
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	4413      	add	r3, r2
 801119a:	3312      	adds	r3, #18
 801119c:	4a32      	ldr	r2, [pc, #200]	; (8011268 <GNSS_ParsePOSLLHData+0x188>)
 801119e:	4413      	add	r3, r2
 80111a0:	7a19      	ldrb	r1, [r3, #8]
 80111a2:	4a32      	ldr	r2, [pc, #200]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	4413      	add	r3, r2
 80111a8:	460a      	mov	r2, r1
 80111aa:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	3301      	adds	r3, #1
 80111b0:	617b      	str	r3, [r7, #20]
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	2b03      	cmp	r3, #3
 80111b6:	dded      	ble.n	8011194 <GNSS_ParsePOSLLHData+0xb4>
	}
	GNSS->height = iLong.iLong;
 80111b8:	4b2c      	ldr	r3, [pc, #176]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	for (int var = 0; var < 4; ++var) {
 80111c2:	2300      	movs	r3, #0
 80111c4:	613b      	str	r3, [r7, #16]
 80111c6:	e00e      	b.n	80111e6 <GNSS_ParsePOSLLHData+0x106>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+ var + 22];
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	4413      	add	r3, r2
 80111ce:	3316      	adds	r3, #22
 80111d0:	4a25      	ldr	r2, [pc, #148]	; (8011268 <GNSS_ParsePOSLLHData+0x188>)
 80111d2:	4413      	add	r3, r2
 80111d4:	7a19      	ldrb	r1, [r3, #8]
 80111d6:	4a25      	ldr	r2, [pc, #148]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	4413      	add	r3, r2
 80111dc:	460a      	mov	r2, r1
 80111de:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	3301      	adds	r3, #1
 80111e4:	613b      	str	r3, [r7, #16]
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	2b03      	cmp	r3, #3
 80111ea:	dded      	ble.n	80111c8 <GNSS_ParsePOSLLHData+0xe8>
	}
	GNSS->hMSL = iLong.iLong;
 80111ec:	4b1f      	ldr	r3, [pc, #124]	; (801126c <GNSS_ParsePOSLLHData+0x18c>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	for (int var = 0; var < 4; ++var) {
 80111f6:	2300      	movs	r3, #0
 80111f8:	60fb      	str	r3, [r7, #12]
 80111fa:	e00e      	b.n	801121a <GNSS_ParsePOSLLHData+0x13a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+ var + 26];
 80111fc:	683a      	ldr	r2, [r7, #0]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	4413      	add	r3, r2
 8011202:	331a      	adds	r3, #26
 8011204:	4a18      	ldr	r2, [pc, #96]	; (8011268 <GNSS_ParsePOSLLHData+0x188>)
 8011206:	4413      	add	r3, r2
 8011208:	7a19      	ldrb	r1, [r3, #8]
 801120a:	4a1a      	ldr	r2, [pc, #104]	; (8011274 <GNSS_ParsePOSLLHData+0x194>)
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	4413      	add	r3, r2
 8011210:	460a      	mov	r2, r1
 8011212:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	3301      	adds	r3, #1
 8011218:	60fb      	str	r3, [r7, #12]
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2b03      	cmp	r3, #3
 801121e:	dded      	ble.n	80111fc <GNSS_ParsePOSLLHData+0x11c>
	}
	GNSS->hAcc = uLong.uLong;
 8011220:	4b14      	ldr	r3, [pc, #80]	; (8011274 <GNSS_ParsePOSLLHData+0x194>)
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	for (int var = 0; var < 4; ++var) {
 801122a:	2300      	movs	r3, #0
 801122c:	60bb      	str	r3, [r7, #8]
 801122e:	e00e      	b.n	801124e <GNSS_ParsePOSLLHData+0x16e>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[varStart+ var + 30];
 8011230:	683a      	ldr	r2, [r7, #0]
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	4413      	add	r3, r2
 8011236:	331e      	adds	r3, #30
 8011238:	4a0b      	ldr	r2, [pc, #44]	; (8011268 <GNSS_ParsePOSLLHData+0x188>)
 801123a:	4413      	add	r3, r2
 801123c:	7a19      	ldrb	r1, [r3, #8]
 801123e:	4a0d      	ldr	r2, [pc, #52]	; (8011274 <GNSS_ParsePOSLLHData+0x194>)
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	4413      	add	r3, r2
 8011244:	460a      	mov	r2, r1
 8011246:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	3301      	adds	r3, #1
 801124c:	60bb      	str	r3, [r7, #8]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	2b03      	cmp	r3, #3
 8011252:	dded      	ble.n	8011230 <GNSS_ParsePOSLLHData+0x150>
	}
	GNSS->vAcc = uLong.uLong;
 8011254:	4b07      	ldr	r3, [pc, #28]	; (8011274 <GNSS_ParsePOSLLHData+0x194>)
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 801125e:	bf00      	nop
 8011260:	3720      	adds	r7, #32
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	200010e8 	.word	0x200010e8
 801126c:	2000148c 	.word	0x2000148c
 8011270:	4b189680 	.word	0x4b189680
 8011274:	20001494 	.word	0x20001494

08011278 <GetNextLowerTxDr>:
 */
static uint16_t ChannelsDefaultMask[CHANNELS_MASK_SIZE];

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	4603      	mov	r3, r0
 8011280:	460a      	mov	r2, r1
 8011282:	71fb      	strb	r3, [r7, #7]
 8011284:	4613      	mov	r3, r2
 8011286:	71bb      	strb	r3, [r7, #6]
    uint8_t nextLowerDr = 0;
 8011288:	2300      	movs	r3, #0
 801128a:	73fb      	strb	r3, [r7, #15]

    if( dr == minDr )
 801128c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011290:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011294:	429a      	cmp	r2, r3
 8011296:	d102      	bne.n	801129e <GetNextLowerTxDr+0x26>
    {
        nextLowerDr = minDr;
 8011298:	79bb      	ldrb	r3, [r7, #6]
 801129a:	73fb      	strb	r3, [r7, #15]
 801129c:	e002      	b.n	80112a4 <GetNextLowerTxDr+0x2c>
    }
    else
    {
        nextLowerDr = dr - 1;
 801129e:	79fb      	ldrb	r3, [r7, #7]
 80112a0:	3b01      	subs	r3, #1
 80112a2:	73fb      	strb	r3, [r7, #15]
    }
    return nextLowerDr;
 80112a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bc80      	pop	{r7}
 80112b0:	4770      	bx	lr
	...

080112b4 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80112bc:	4a09      	ldr	r2, [pc, #36]	; (80112e4 <GetBandwidth+0x30>)
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112c4:	4a08      	ldr	r2, [pc, #32]	; (80112e8 <GetBandwidth+0x34>)
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d004      	beq.n	80112d4 <GetBandwidth+0x20>
 80112ca:	4a08      	ldr	r2, [pc, #32]	; (80112ec <GetBandwidth+0x38>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d003      	beq.n	80112d8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80112d0:	2300      	movs	r3, #0
 80112d2:	e002      	b.n	80112da <GetBandwidth+0x26>
        case 250000:
            return 1;
 80112d4:	2301      	movs	r3, #1
 80112d6:	e000      	b.n	80112da <GetBandwidth+0x26>
        case 500000:
            return 2;
 80112d8:	2302      	movs	r3, #2
    }
}
 80112da:	4618      	mov	r0, r3
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	bc80      	pop	{r7}
 80112e2:	4770      	bx	lr
 80112e4:	08013248 	.word	0x08013248
 80112e8:	0003d090 	.word	0x0003d090
 80112ec:	0007a120 	.word	0x0007a120

080112f0 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80112f0:	b480      	push	{r7}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	603b      	str	r3, [r7, #0]
 80112f8:	4603      	mov	r3, r0
 80112fa:	71fb      	strb	r3, [r7, #7]
 80112fc:	460b      	mov	r3, r1
 80112fe:	71bb      	strb	r3, [r7, #6]
 8011300:	4613      	mov	r3, r2
 8011302:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8011304:	79fb      	ldrb	r3, [r7, #7]
 8011306:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8011308:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011310:	4293      	cmp	r3, r2
 8011312:	bfb8      	it	lt
 8011314:	4613      	movlt	r3, r2
 8011316:	73fb      	strb	r3, [r7, #15]

    return txPowerResult;
 8011318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801131c:	4618      	mov	r0, r3
 801131e:	3714      	adds	r7, #20
 8011320:	46bd      	mov	sp, r7
 8011322:	bc80      	pop	{r7}
 8011324:	4770      	bx	lr
	...

08011328 <VerifyTxFreq>:

static bool VerifyTxFreq( uint32_t freq, uint8_t *band )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011332:	4b2d      	ldr	r3, [pc, #180]	; (80113e8 <VerifyTxFreq+0xc0>)
 8011334:	6a1b      	ldr	r3, [r3, #32]
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	4798      	blx	r3
 801133a:	4603      	mov	r3, r0
 801133c:	f083 0301 	eor.w	r3, r3, #1
 8011340:	b2db      	uxtb	r3, r3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <VerifyTxFreq+0x22>
    {
        return false;
 8011346:	2300      	movs	r3, #0
 8011348:	e04a      	b.n	80113e0 <VerifyTxFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4a27      	ldr	r2, [pc, #156]	; (80113ec <VerifyTxFreq+0xc4>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d307      	bcc.n	8011362 <VerifyTxFreq+0x3a>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	4a26      	ldr	r2, [pc, #152]	; (80113f0 <VerifyTxFreq+0xc8>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d803      	bhi.n	8011362 <VerifyTxFreq+0x3a>
    {
        *band = 2;
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2202      	movs	r2, #2
 801135e:	701a      	strb	r2, [r3, #0]
 8011360:	e03d      	b.n	80113de <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4a22      	ldr	r2, [pc, #136]	; (80113f0 <VerifyTxFreq+0xc8>)
 8011366:	4293      	cmp	r3, r2
 8011368:	d907      	bls.n	801137a <VerifyTxFreq+0x52>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	4a21      	ldr	r2, [pc, #132]	; (80113f4 <VerifyTxFreq+0xcc>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d803      	bhi.n	801137a <VerifyTxFreq+0x52>
    {
        *band = 0;
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	2200      	movs	r2, #0
 8011376:	701a      	strb	r2, [r3, #0]
 8011378:	e031      	b.n	80113de <VerifyTxFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	4a1d      	ldr	r2, [pc, #116]	; (80113f4 <VerifyTxFreq+0xcc>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d907      	bls.n	8011392 <VerifyTxFreq+0x6a>
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	4a1c      	ldr	r2, [pc, #112]	; (80113f8 <VerifyTxFreq+0xd0>)
 8011386:	4293      	cmp	r3, r2
 8011388:	d803      	bhi.n	8011392 <VerifyTxFreq+0x6a>
    {
        *band = 1;
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	2201      	movs	r2, #1
 801138e:	701a      	strb	r2, [r3, #0]
 8011390:	e025      	b.n	80113de <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	4a19      	ldr	r2, [pc, #100]	; (80113fc <VerifyTxFreq+0xd4>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d907      	bls.n	80113aa <VerifyTxFreq+0x82>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4a18      	ldr	r2, [pc, #96]	; (8011400 <VerifyTxFreq+0xd8>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d803      	bhi.n	80113aa <VerifyTxFreq+0x82>
    {
        *band = 2;
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	2202      	movs	r2, #2
 80113a6:	701a      	strb	r2, [r3, #0]
 80113a8:	e019      	b.n	80113de <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	4a15      	ldr	r2, [pc, #84]	; (8011404 <VerifyTxFreq+0xdc>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d907      	bls.n	80113c2 <VerifyTxFreq+0x9a>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	4a14      	ldr	r2, [pc, #80]	; (8011408 <VerifyTxFreq+0xe0>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d803      	bhi.n	80113c2 <VerifyTxFreq+0x9a>
    {
        *band = 3;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2203      	movs	r2, #3
 80113be:	701a      	strb	r2, [r3, #0]
 80113c0:	e00d      	b.n	80113de <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4a11      	ldr	r2, [pc, #68]	; (801140c <VerifyTxFreq+0xe4>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d307      	bcc.n	80113da <VerifyTxFreq+0xb2>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	4a10      	ldr	r2, [pc, #64]	; (8011410 <VerifyTxFreq+0xe8>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d803      	bhi.n	80113da <VerifyTxFreq+0xb2>
    {
        *band = 4;
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	2204      	movs	r2, #4
 80113d6:	701a      	strb	r2, [r3, #0]
 80113d8:	e001      	b.n	80113de <VerifyTxFreq+0xb6>
    }
    else
    {
        return false;
 80113da:	2300      	movs	r3, #0
 80113dc:	e000      	b.n	80113e0 <VerifyTxFreq+0xb8>
    }
    return true;
 80113de:	2301      	movs	r3, #1
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	080130d4 	.word	0x080130d4
 80113ec:	337055c0 	.word	0x337055c0
 80113f0:	338eda3f 	.word	0x338eda3f
 80113f4:	33bca100 	.word	0x33bca100
 80113f8:	33c5c8c0 	.word	0x33c5c8c0
 80113fc:	33c74f5f 	.word	0x33c74f5f
 8011400:	33cef080 	.word	0x33cef080
 8011404:	33d1fdbf 	.word	0x33d1fdbf
 8011408:	33d5ce50 	.word	0x33d5ce50
 801140c:	33d691a0 	.word	0x33d691a0
 8011410:	33db2580 	.word	0x33db2580

08011414 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b086      	sub	sp, #24
 8011418:	af00      	add	r7, sp, #0
 801141a:	60ba      	str	r2, [r7, #8]
 801141c:	607b      	str	r3, [r7, #4]
 801141e:	4603      	mov	r3, r0
 8011420:	73fb      	strb	r3, [r7, #15]
 8011422:	460b      	mov	r3, r1
 8011424:	73bb      	strb	r3, [r7, #14]
    uint8_t nbEnabledChannels = 0;
 8011426:	2300      	movs	r3, #0
 8011428:	75fb      	strb	r3, [r7, #23]
    uint8_t delayTransmission = 0;
 801142a:	2300      	movs	r3, #0
 801142c:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 801142e:	2300      	movs	r3, #0
 8011430:	757b      	strb	r3, [r7, #21]
 8011432:	2300      	movs	r3, #0
 8011434:	753b      	strb	r3, [r7, #20]
 8011436:	e085      	b.n	8011544 <CountNbOfEnabledChannels+0x130>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8011438:	2300      	movs	r3, #0
 801143a:	74fb      	strb	r3, [r7, #19]
 801143c:	e079      	b.n	8011532 <CountNbOfEnabledChannels+0x11e>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 801143e:	7d3b      	ldrb	r3, [r7, #20]
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	68ba      	ldr	r2, [r7, #8]
 8011444:	4413      	add	r3, r2
 8011446:	881b      	ldrh	r3, [r3, #0]
 8011448:	461a      	mov	r2, r3
 801144a:	7cfb      	ldrb	r3, [r7, #19]
 801144c:	fa42 f303 	asr.w	r3, r2, r3
 8011450:	f003 0301 	and.w	r3, r3, #1
 8011454:	2b00      	cmp	r3, #0
 8011456:	d069      	beq.n	801152c <CountNbOfEnabledChannels+0x118>
            {
                if( channels[i + j].Frequency == 0 )
 8011458:	7d7a      	ldrb	r2, [r7, #21]
 801145a:	7cfb      	ldrb	r3, [r7, #19]
 801145c:	4413      	add	r3, r2
 801145e:	461a      	mov	r2, r3
 8011460:	4613      	mov	r3, r2
 8011462:	005b      	lsls	r3, r3, #1
 8011464:	4413      	add	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	461a      	mov	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	4413      	add	r3, r2
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d056      	beq.n	8011522 <CountNbOfEnabledChannels+0x10e>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8011474:	7bfb      	ldrb	r3, [r7, #15]
 8011476:	f083 0301 	eor.w	r3, r3, #1
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	d007      	beq.n	8011490 <CountNbOfEnabledChannels+0x7c>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8011480:	7cfb      	ldrb	r3, [r7, #19]
 8011482:	2207      	movs	r2, #7
 8011484:	fa42 f303 	asr.w	r3, r2, r3
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b00      	cmp	r3, #0
 801148e:	d04a      	beq.n	8011526 <CountNbOfEnabledChannels+0x112>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8011490:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8011494:	7d7a      	ldrb	r2, [r7, #21]
 8011496:	7cfb      	ldrb	r3, [r7, #19]
 8011498:	4413      	add	r3, r2
 801149a:	461a      	mov	r2, r3
 801149c:	4613      	mov	r3, r2
 801149e:	005b      	lsls	r3, r3, #1
 80114a0:	4413      	add	r3, r2
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	461a      	mov	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	4413      	add	r3, r2
 80114aa:	7a1b      	ldrb	r3, [r3, #8]
 80114ac:	f343 0303 	sbfx	r3, r3, #0, #4
 80114b0:	b25b      	sxtb	r3, r3
 80114b2:	4619      	mov	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 80114b4:	7d7a      	ldrb	r2, [r7, #21]
 80114b6:	7cfb      	ldrb	r3, [r7, #19]
 80114b8:	4413      	add	r3, r2
 80114ba:	461a      	mov	r2, r3
 80114bc:	4613      	mov	r3, r2
 80114be:	005b      	lsls	r3, r3, #1
 80114c0:	4413      	add	r3, r2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	461a      	mov	r2, r3
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	4413      	add	r3, r2
 80114ca:	7a1b      	ldrb	r3, [r3, #8]
 80114cc:	f343 1303 	sbfx	r3, r3, #4, #4
 80114d0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80114d2:	461a      	mov	r2, r3
 80114d4:	f7f8 ff57 	bl	800a386 <RegionCommonValueInRange>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d025      	beq.n	801152a <CountNbOfEnabledChannels+0x116>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 80114de:	7d7a      	ldrb	r2, [r7, #21]
 80114e0:	7cfb      	ldrb	r3, [r7, #19]
 80114e2:	4413      	add	r3, r2
 80114e4:	461a      	mov	r2, r3
 80114e6:	4613      	mov	r3, r2
 80114e8:	005b      	lsls	r3, r3, #1
 80114ea:	4413      	add	r3, r2
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	461a      	mov	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	4413      	add	r3, r2
 80114f4:	7a5b      	ldrb	r3, [r3, #9]
 80114f6:	011b      	lsls	r3, r3, #4
 80114f8:	6a3a      	ldr	r2, [r7, #32]
 80114fa:	4413      	add	r3, r2
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d003      	beq.n	801150a <CountNbOfEnabledChannels+0xf6>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8011502:	7dbb      	ldrb	r3, [r7, #22]
 8011504:	3301      	adds	r3, #1
 8011506:	75bb      	strb	r3, [r7, #22]
                    continue;
 8011508:	e010      	b.n	801152c <CountNbOfEnabledChannels+0x118>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 801150a:	7dfb      	ldrb	r3, [r7, #23]
 801150c:	1c5a      	adds	r2, r3, #1
 801150e:	75fa      	strb	r2, [r7, #23]
 8011510:	461a      	mov	r2, r3
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	4413      	add	r3, r2
 8011516:	7d79      	ldrb	r1, [r7, #21]
 8011518:	7cfa      	ldrb	r2, [r7, #19]
 801151a:	440a      	add	r2, r1
 801151c:	b2d2      	uxtb	r2, r2
 801151e:	701a      	strb	r2, [r3, #0]
 8011520:	e004      	b.n	801152c <CountNbOfEnabledChannels+0x118>
                    continue;
 8011522:	bf00      	nop
 8011524:	e002      	b.n	801152c <CountNbOfEnabledChannels+0x118>
                        continue;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <CountNbOfEnabledChannels+0x118>
                    continue;
 801152a:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801152c:	7cfb      	ldrb	r3, [r7, #19]
 801152e:	3301      	adds	r3, #1
 8011530:	74fb      	strb	r3, [r7, #19]
 8011532:	7cfb      	ldrb	r3, [r7, #19]
 8011534:	2b0f      	cmp	r3, #15
 8011536:	d982      	bls.n	801143e <CountNbOfEnabledChannels+0x2a>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8011538:	7d7b      	ldrb	r3, [r7, #21]
 801153a:	3310      	adds	r3, #16
 801153c:	757b      	strb	r3, [r7, #21]
 801153e:	7d3b      	ldrb	r3, [r7, #20]
 8011540:	3301      	adds	r3, #1
 8011542:	753b      	strb	r3, [r7, #20]
 8011544:	7d7b      	ldrb	r3, [r7, #21]
 8011546:	2b0f      	cmp	r3, #15
 8011548:	f67f af76 	bls.w	8011438 <CountNbOfEnabledChannels+0x24>
            }
        }
    }

    *delayTx = delayTransmission;
 801154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154e:	7dba      	ldrb	r2, [r7, #22]
 8011550:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8011552:	7dfb      	ldrb	r3, [r7, #23]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3718      	adds	r7, #24
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8011564:	2300      	movs	r3, #0
 8011566:	60bb      	str	r3, [r7, #8]

    switch( getPhy->Attribute )
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	2b32      	cmp	r3, #50	; 0x32
 801156e:	f200 80e6 	bhi.w	801173e <RegionEU868GetPhyParam+0x1e2>
 8011572:	a201      	add	r2, pc, #4	; (adr r2, 8011578 <RegionEU868GetPhyParam+0x1c>)
 8011574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011578:	08011645 	.word	0x08011645
 801157c:	0801164b 	.word	0x0801164b
 8011580:	0801173f 	.word	0x0801173f
 8011584:	08011651 	.word	0x08011651
 8011588:	0801173f 	.word	0x0801173f
 801158c:	08011657 	.word	0x08011657
 8011590:	0801173f 	.word	0x0801173f
 8011594:	0801173f 	.word	0x0801173f
 8011598:	08011671 	.word	0x08011671
 801159c:	08011677 	.word	0x08011677
 80115a0:	08011687 	.word	0x08011687
 80115a4:	08011697 	.word	0x08011697
 80115a8:	0801169d 	.word	0x0801169d
 80115ac:	080116a5 	.word	0x080116a5
 80115b0:	080116ad 	.word	0x080116ad
 80115b4:	080116b5 	.word	0x080116b5
 80115b8:	080116bd 	.word	0x080116bd
 80115bc:	080116c5 	.word	0x080116c5
 80115c0:	080116cd 	.word	0x080116cd
 80115c4:	080116e1 	.word	0x080116e1
 80115c8:	080116e7 	.word	0x080116e7
 80115cc:	080116ed 	.word	0x080116ed
 80115d0:	080116f3 	.word	0x080116f3
 80115d4:	080116f9 	.word	0x080116f9
 80115d8:	080116ff 	.word	0x080116ff
 80115dc:	08011705 	.word	0x08011705
 80115e0:	0801170b 	.word	0x0801170b
 80115e4:	0801170b 	.word	0x0801170b
 80115e8:	08011711 	.word	0x08011711
 80115ec:	08011719 	.word	0x08011719
 80115f0:	0801165d 	.word	0x0801165d
 80115f4:	0801173f 	.word	0x0801173f
 80115f8:	0801173f 	.word	0x0801173f
 80115fc:	0801173f 	.word	0x0801173f
 8011600:	0801173f 	.word	0x0801173f
 8011604:	0801173f 	.word	0x0801173f
 8011608:	0801173f 	.word	0x0801173f
 801160c:	0801173f 	.word	0x0801173f
 8011610:	0801173f 	.word	0x0801173f
 8011614:	0801173f 	.word	0x0801173f
 8011618:	0801173f 	.word	0x0801173f
 801161c:	0801173f 	.word	0x0801173f
 8011620:	0801173f 	.word	0x0801173f
 8011624:	0801173f 	.word	0x0801173f
 8011628:	08011725 	.word	0x08011725
 801162c:	0801172b 	.word	0x0801172b
 8011630:	08011739 	.word	0x08011739
 8011634:	0801173f 	.word	0x0801173f
 8011638:	0801173f 	.word	0x0801173f
 801163c:	0801171f 	.word	0x0801171f
 8011640:	0801171f 	.word	0x0801171f
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8011644:	2300      	movs	r3, #0
 8011646:	60bb      	str	r3, [r7, #8]
            break;
 8011648:	e07a      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801164a:	2300      	movs	r3, #0
 801164c:	60bb      	str	r3, [r7, #8]
            break;
 801164e:	e077      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_TX_DR:
        {
            phyParam.Value = EU868_TX_MAX_DATARATE;
 8011650:	2307      	movs	r3, #7
 8011652:	60bb      	str	r3, [r7, #8]
            break;
 8011654:	e074      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8011656:	2305      	movs	r3, #5
 8011658:	60bb      	str	r3, [r7, #8]
            break;
 801165a:	e071      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011662:	2100      	movs	r1, #0
 8011664:	4618      	mov	r0, r3
 8011666:	f7ff fe07 	bl	8011278 <GetNextLowerTxDr>
 801166a:	4603      	mov	r3, r0
 801166c:	60bb      	str	r3, [r7, #8]
            break;
 801166e:	e067      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8011670:	2300      	movs	r3, #0
 8011672:	60bb      	str	r3, [r7, #8]
            break;
 8011674:	e064      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801167c:	461a      	mov	r2, r3
 801167e:	4b34      	ldr	r3, [pc, #208]	; (8011750 <RegionEU868GetPhyParam+0x1f4>)
 8011680:	5c9b      	ldrb	r3, [r3, r2]
 8011682:	60bb      	str	r3, [r7, #8]
            break;
 8011684:	e05c      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801168c:	461a      	mov	r2, r3
 801168e:	4b31      	ldr	r3, [pc, #196]	; (8011754 <RegionEU868GetPhyParam+0x1f8>)
 8011690:	5c9b      	ldrb	r3, [r3, r2]
 8011692:	60bb      	str	r3, [r7, #8]
            break;
 8011694:	e054      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8011696:	2301      	movs	r3, #1
 8011698:	60bb      	str	r3, [r7, #8]
            break;
 801169a:	e051      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801169c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80116a0:	60bb      	str	r3, [r7, #8]
            break;
 80116a2:	e04d      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 80116a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80116a8:	60bb      	str	r3, [r7, #8]
            break;
 80116aa:	e049      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80116ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80116b0:	60bb      	str	r3, [r7, #8]
            break;
 80116b2:	e045      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 80116b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80116b8:	60bb      	str	r3, [r7, #8]
            break;
 80116ba:	e041      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80116bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80116c0:	60bb      	str	r3, [r7, #8]
            break;
 80116c2:	e03d      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80116c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80116c8:	60bb      	str	r3, [r7, #8]
            break;
 80116ca:	e039      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 80116cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80116d0:	4821      	ldr	r0, [pc, #132]	; (8011758 <RegionEU868GetPhyParam+0x1fc>)
 80116d2:	f7ff f999 	bl	8010a08 <randr>
 80116d6:	4603      	mov	r3, r0
 80116d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80116dc:	60bb      	str	r3, [r7, #8]
            break;
 80116de:	e02f      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 80116e0:	2300      	movs	r3, #0
 80116e2:	60bb      	str	r3, [r7, #8]
            break;
 80116e4:	e02c      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80116e6:	4b1d      	ldr	r3, [pc, #116]	; (801175c <RegionEU868GetPhyParam+0x200>)
 80116e8:	60bb      	str	r3, [r7, #8]
            break;
 80116ea:	e029      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80116ec:	2300      	movs	r3, #0
 80116ee:	60bb      	str	r3, [r7, #8]
            break;
 80116f0:	e026      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = ChannelsMask;
 80116f2:	4b1b      	ldr	r3, [pc, #108]	; (8011760 <RegionEU868GetPhyParam+0x204>)
 80116f4:	60bb      	str	r3, [r7, #8]
            break;
 80116f6:	e023      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = ChannelsDefaultMask;
 80116f8:	4b1a      	ldr	r3, [pc, #104]	; (8011764 <RegionEU868GetPhyParam+0x208>)
 80116fa:	60bb      	str	r3, [r7, #8]
            break;
 80116fc:	e020      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80116fe:	2310      	movs	r3, #16
 8011700:	60bb      	str	r3, [r7, #8]
            break;
 8011702:	e01d      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = Channels;
 8011704:	4b18      	ldr	r3, [pc, #96]	; (8011768 <RegionEU868GetPhyParam+0x20c>)
 8011706:	60bb      	str	r3, [r7, #8]
            break;
 8011708:	e01a      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801170a:	2300      	movs	r3, #0
 801170c:	60bb      	str	r3, [r7, #8]
            break;
 801170e:	e017      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8011710:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8011714:	60bb      	str	r3, [r7, #8]
            break;
 8011716:	e013      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8011718:	4b14      	ldr	r3, [pc, #80]	; (801176c <RegionEU868GetPhyParam+0x210>)
 801171a:	60bb      	str	r3, [r7, #8]
            break;
 801171c:	e010      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_NB_JOIN_TRIALS:
        case PHY_DEF_NB_JOIN_TRIALS:
        {
            phyParam.Value = EU868_DEFAULT_PHY_NB_JOIN_TRIALS;
 801171e:	2330      	movs	r3, #48	; 0x30
 8011720:	60bb      	str	r3, [r7, #8]
            break;
 8011722:	e00d      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8011724:	4b0d      	ldr	r3, [pc, #52]	; (801175c <RegionEU868GetPhyParam+0x200>)
 8011726:	60bb      	str	r3, [r7, #8]
            break;
 8011728:	e00a      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801172a:	2311      	movs	r3, #17
 801172c:	723b      	strb	r3, [r7, #8]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801172e:	2302      	movs	r3, #2
 8011730:	727b      	strb	r3, [r7, #9]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8011732:	2300      	movs	r3, #0
 8011734:	72bb      	strb	r3, [r7, #10]
            break;
 8011736:	e003      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8011738:	2303      	movs	r3, #3
 801173a:	60bb      	str	r3, [r7, #8]
            break;
 801173c:	e000      	b.n	8011740 <RegionEU868GetPhyParam+0x1e4>
        }
        default:
        {
            break;
 801173e:	bf00      	nop
        }
    }

    return phyParam;
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	60fb      	str	r3, [r7, #12]
 8011744:	2300      	movs	r3, #0
 8011746:	68fb      	ldr	r3, [r7, #12]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3710      	adds	r7, #16
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}
 8011750:	08013268 	.word	0x08013268
 8011754:	08013270 	.word	0x08013270
 8011758:	fffffc18 	.word	0xfffffc18
 801175c:	33d3e608 	.word	0x33d3e608
 8011760:	2000097c 	.word	0x2000097c
 8011764:	20000980 	.word	0x20000980
 8011768:	200008bc 	.word	0x200008bc
 801176c:	4009999a 	.word	0x4009999a

08011770 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	7858      	ldrb	r0, [r3, #1]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	4619      	mov	r1, r3
 8011782:	4a0a      	ldr	r2, [pc, #40]	; (80117ac <RegionEU868SetBandTxDone+0x3c>)
 8011784:	460b      	mov	r3, r1
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	440b      	add	r3, r1
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	4413      	add	r3, r2
 801178e:	3309      	adds	r3, #9
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	011b      	lsls	r3, r3, #4
 8011794:	4a06      	ldr	r2, [pc, #24]	; (80117b0 <RegionEU868SetBandTxDone+0x40>)
 8011796:	1899      	adds	r1, r3, r2
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	461a      	mov	r2, r3
 801179e:	f7f8 fe95 	bl	800a4cc <RegionCommonSetBandTxDone>
}
 80117a2:	bf00      	nop
 80117a4:	3708      	adds	r7, #8
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	200008bc 	.word	0x200008bc
 80117b0:	200000a8 	.word	0x200000a8

080117b4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitType_t type )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b08c      	sub	sp, #48	; 0x30
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	4603      	mov	r3, r0
 80117bc:	71fb      	strb	r3, [r7, #7]
    switch( type )
 80117be:	79fb      	ldrb	r3, [r7, #7]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <RegionEU868InitDefaults+0x16>
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d01a      	beq.n	80117fe <RegionEU868InitDefaults+0x4a>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80117c8:	e022      	b.n	8011810 <RegionEU868InitDefaults+0x5c>
            Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80117ca:	4b13      	ldr	r3, [pc, #76]	; (8011818 <RegionEU868InitDefaults+0x64>)
 80117cc:	4a13      	ldr	r2, [pc, #76]	; (801181c <RegionEU868InitDefaults+0x68>)
 80117ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80117d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80117d4:	4b10      	ldr	r3, [pc, #64]	; (8011818 <RegionEU868InitDefaults+0x64>)
 80117d6:	4a12      	ldr	r2, [pc, #72]	; (8011820 <RegionEU868InitDefaults+0x6c>)
 80117d8:	330c      	adds	r3, #12
 80117da:	ca07      	ldmia	r2, {r0, r1, r2}
 80117dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80117e0:	4b0d      	ldr	r3, [pc, #52]	; (8011818 <RegionEU868InitDefaults+0x64>)
 80117e2:	4a10      	ldr	r2, [pc, #64]	; (8011824 <RegionEU868InitDefaults+0x70>)
 80117e4:	3318      	adds	r3, #24
 80117e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80117e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80117ec:	4b0e      	ldr	r3, [pc, #56]	; (8011828 <RegionEU868InitDefaults+0x74>)
 80117ee:	2207      	movs	r2, #7
 80117f0:	801a      	strh	r2, [r3, #0]
            RegionCommonChanMaskCopy( ChannelsMask, ChannelsDefaultMask, 1 );
 80117f2:	2201      	movs	r2, #1
 80117f4:	490c      	ldr	r1, [pc, #48]	; (8011828 <RegionEU868InitDefaults+0x74>)
 80117f6:	480d      	ldr	r0, [pc, #52]	; (801182c <RegionEU868InitDefaults+0x78>)
 80117f8:	f7f8 fe42 	bl	800a480 <RegionCommonChanMaskCopy>
            break;
 80117fc:	e008      	b.n	8011810 <RegionEU868InitDefaults+0x5c>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
 80117fe:	4b0b      	ldr	r3, [pc, #44]	; (801182c <RegionEU868InitDefaults+0x78>)
 8011800:	881a      	ldrh	r2, [r3, #0]
 8011802:	4b09      	ldr	r3, [pc, #36]	; (8011828 <RegionEU868InitDefaults+0x74>)
 8011804:	881b      	ldrh	r3, [r3, #0]
 8011806:	4313      	orrs	r3, r2
 8011808:	b29a      	uxth	r2, r3
 801180a:	4b08      	ldr	r3, [pc, #32]	; (801182c <RegionEU868InitDefaults+0x78>)
 801180c:	801a      	strh	r2, [r3, #0]
            break;
 801180e:	bf00      	nop
        }
    }
}
 8011810:	bf00      	nop
 8011812:	3730      	adds	r7, #48	; 0x30
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	200008bc 	.word	0x200008bc
 801181c:	08012d88 	.word	0x08012d88
 8011820:	08012d94 	.word	0x08012d94
 8011824:	08012da0 	.word	0x08012da0
 8011828:	20000980 	.word	0x20000980
 801182c:	2000097c 	.word	0x2000097c

08011830 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	460b      	mov	r3, r1
 801183a:	70fb      	strb	r3, [r7, #3]
    switch( phyAttribute )
 801183c:	78fb      	ldrb	r3, [r7, #3]
 801183e:	3b04      	subs	r3, #4
 8011840:	2b2d      	cmp	r3, #45	; 0x2d
 8011842:	f200 80a3 	bhi.w	801198c <RegionEU868Verify+0x15c>
 8011846:	a201      	add	r2, pc, #4	; (adr r2, 801184c <RegionEU868Verify+0x1c>)
 8011848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801184c:	08011905 	.word	0x08011905
 8011850:	08011923 	.word	0x08011923
 8011854:	08011941 	.word	0x08011941
 8011858:	0801195f 	.word	0x0801195f
 801185c:	0801195f 	.word	0x0801195f
 8011860:	0801198d 	.word	0x0801198d
 8011864:	0801198d 	.word	0x0801198d
 8011868:	0801197d 	.word	0x0801197d
 801186c:	0801198d 	.word	0x0801198d
 8011870:	0801198d 	.word	0x0801198d
 8011874:	0801198d 	.word	0x0801198d
 8011878:	0801198d 	.word	0x0801198d
 801187c:	0801198d 	.word	0x0801198d
 8011880:	0801198d 	.word	0x0801198d
 8011884:	0801198d 	.word	0x0801198d
 8011888:	0801198d 	.word	0x0801198d
 801188c:	0801198d 	.word	0x0801198d
 8011890:	0801198d 	.word	0x0801198d
 8011894:	0801198d 	.word	0x0801198d
 8011898:	0801198d 	.word	0x0801198d
 801189c:	0801198d 	.word	0x0801198d
 80118a0:	0801198d 	.word	0x0801198d
 80118a4:	0801198d 	.word	0x0801198d
 80118a8:	0801198d 	.word	0x0801198d
 80118ac:	0801198d 	.word	0x0801198d
 80118b0:	0801198d 	.word	0x0801198d
 80118b4:	0801198d 	.word	0x0801198d
 80118b8:	0801198d 	.word	0x0801198d
 80118bc:	0801198d 	.word	0x0801198d
 80118c0:	0801198d 	.word	0x0801198d
 80118c4:	0801198d 	.word	0x0801198d
 80118c8:	0801198d 	.word	0x0801198d
 80118cc:	0801198d 	.word	0x0801198d
 80118d0:	0801198d 	.word	0x0801198d
 80118d4:	0801198d 	.word	0x0801198d
 80118d8:	0801198d 	.word	0x0801198d
 80118dc:	0801198d 	.word	0x0801198d
 80118e0:	0801198d 	.word	0x0801198d
 80118e4:	0801198d 	.word	0x0801198d
 80118e8:	0801198d 	.word	0x0801198d
 80118ec:	0801198d 	.word	0x0801198d
 80118f0:	0801198d 	.word	0x0801198d
 80118f4:	0801198d 	.word	0x0801198d
 80118f8:	0801198d 	.word	0x0801198d
 80118fc:	0801198d 	.word	0x0801198d
 8011900:	08011981 	.word	0x08011981
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f993 3000 	ldrsb.w	r3, [r3]
 801190a:	2207      	movs	r2, #7
 801190c:	2100      	movs	r1, #0
 801190e:	4618      	mov	r0, r3
 8011910:	f7f8 fd39 	bl	800a386 <RegionCommonValueInRange>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	bf14      	ite	ne
 801191a:	2301      	movne	r3, #1
 801191c:	2300      	moveq	r3, #0
 801191e:	b2db      	uxtb	r3, r3
 8011920:	e038      	b.n	8011994 <RegionEU868Verify+0x164>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f993 3000 	ldrsb.w	r3, [r3]
 8011928:	2205      	movs	r2, #5
 801192a:	2100      	movs	r1, #0
 801192c:	4618      	mov	r0, r3
 801192e:	f7f8 fd2a 	bl	800a386 <RegionCommonValueInRange>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	bf14      	ite	ne
 8011938:	2301      	movne	r3, #1
 801193a:	2300      	moveq	r3, #0
 801193c:	b2db      	uxtb	r3, r3
 801193e:	e029      	b.n	8011994 <RegionEU868Verify+0x164>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f993 3000 	ldrsb.w	r3, [r3]
 8011946:	2207      	movs	r2, #7
 8011948:	2100      	movs	r1, #0
 801194a:	4618      	mov	r0, r3
 801194c:	f7f8 fd1b 	bl	800a386 <RegionCommonValueInRange>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	bf14      	ite	ne
 8011956:	2301      	movne	r3, #1
 8011958:	2300      	moveq	r3, #0
 801195a:	b2db      	uxtb	r3, r3
 801195c:	e01a      	b.n	8011994 <RegionEU868Verify+0x164>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f993 3000 	ldrsb.w	r3, [r3]
 8011964:	2207      	movs	r2, #7
 8011966:	2100      	movs	r1, #0
 8011968:	4618      	mov	r0, r3
 801196a:	f7f8 fd0c 	bl	800a386 <RegionCommonValueInRange>
 801196e:	4603      	mov	r3, r0
 8011970:	2b00      	cmp	r3, #0
 8011972:	bf14      	ite	ne
 8011974:	2301      	movne	r3, #1
 8011976:	2300      	moveq	r3, #0
 8011978:	b2db      	uxtb	r3, r3
 801197a:	e00b      	b.n	8011994 <RegionEU868Verify+0x164>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801197c:	2301      	movs	r3, #1
 801197e:	e009      	b.n	8011994 <RegionEU868Verify+0x164>
        }
        case PHY_NB_JOIN_TRIALS:
        {
            if( verify->NbJoinTrials < EU868_DEFAULT_PHY_NB_JOIN_TRIALS )
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2b2f      	cmp	r3, #47	; 0x2f
 8011986:	d803      	bhi.n	8011990 <RegionEU868Verify+0x160>
            {
                return false;
 8011988:	2300      	movs	r3, #0
 801198a:	e003      	b.n	8011994 <RegionEU868Verify+0x164>
            }
            break;
        }
        default:
            return false;
 801198c:	2300      	movs	r3, #0
 801198e:	e001      	b.n	8011994 <RegionEU868Verify+0x164>
            break;
 8011990:	bf00      	nop
    }
    return true;
 8011992:	2301      	movs	r3, #1
}
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08a      	sub	sp, #40	; 0x28
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80119a4:	2350      	movs	r3, #80	; 0x50
 80119a6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	791b      	ldrb	r3, [r3, #4]
 80119ae:	2b10      	cmp	r3, #16
 80119b0:	d15c      	bne.n	8011a6c <RegionEU868ApplyCFList+0xd0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80119b2:	2300      	movs	r3, #0
 80119b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80119b8:	2303      	movs	r3, #3
 80119ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80119be:	e050      	b.n	8011a62 <RegionEU868ApplyCFList+0xc6>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80119c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80119c4:	2b07      	cmp	r3, #7
 80119c6:	d824      	bhi.n	8011a12 <RegionEU868ApplyCFList+0x76>
    {
        // Channel frequency
        newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119d0:	4413      	add	r3, r2
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80119d6:	69ba      	ldr	r2, [r7, #24]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6819      	ldr	r1, [r3, #0]
 80119dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119e0:	3301      	adds	r3, #1
 80119e2:	440b      	add	r3, r1
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	021b      	lsls	r3, r3, #8
 80119e8:	4313      	orrs	r3, r2
 80119ea:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80119ec:	69ba      	ldr	r2, [r7, #24]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6819      	ldr	r1, [r3, #0]
 80119f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119f6:	3302      	adds	r3, #2
 80119f8:	440b      	add	r3, r1
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	041b      	lsls	r3, r3, #16
 80119fe:	4313      	orrs	r3, r2
 8011a00:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency *= 100;
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	2264      	movs	r2, #100	; 0x64
 8011a06:	fb02 f303 	mul.w	r3, r2, r3
 8011a0a:	61bb      	str	r3, [r7, #24]

        // Initialize alternative frequency to 0
        newChannel.Rx1Frequency = 0;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	61fb      	str	r3, [r7, #28]
 8011a10:	e006      	b.n	8011a20 <RegionEU868ApplyCFList+0x84>
        }
        else
        {
            newChannel.Frequency = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8011a16:	2300      	movs	r3, #0
 8011a18:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8011a20:	69bb      	ldr	r3, [r7, #24]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00b      	beq.n	8011a3e <RegionEU868ApplyCFList+0xa2>
        {
            channelAdd.NewChannel = &newChannel;
 8011a26:	f107 0318 	add.w	r3, r7, #24
 8011a2a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8011a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a30:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8011a32:	f107 0310 	add.w	r3, r7, #16
 8011a36:	4618      	mov	r0, r3
 8011a38:	f000 fd8a 	bl	8012550 <RegionEU868ChannelAdd>
 8011a3c:	e007      	b.n	8011a4e <RegionEU868ApplyCFList+0xb2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8011a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a42:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8011a44:	f107 030c 	add.w	r3, r7, #12
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f000 fe47 	bl	80126dc <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a52:	3303      	adds	r3, #3
 8011a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011a58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a66:	2b0f      	cmp	r3, #15
 8011a68:	d9aa      	bls.n	80119c0 <RegionEU868ApplyCFList+0x24>
 8011a6a:	e000      	b.n	8011a6e <RegionEU868ApplyCFList+0xd2>
        return;
 8011a6c:	bf00      	nop
        }
    }
}
 8011a6e:	3728      	adds	r7, #40	; 0x28
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	791b      	ldrb	r3, [r3, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d002      	beq.n	8011a8a <RegionEU868ChanMaskSet+0x16>
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d008      	beq.n	8011a9a <RegionEU868ChanMaskSet+0x26>
 8011a88:	e00f      	b.n	8011aaa <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	4619      	mov	r1, r3
 8011a92:	4809      	ldr	r0, [pc, #36]	; (8011ab8 <RegionEU868ChanMaskSet+0x44>)
 8011a94:	f7f8 fcf4 	bl	800a480 <RegionCommonChanMaskCopy>
            break;
 8011a98:	e009      	b.n	8011aae <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	4806      	ldr	r0, [pc, #24]	; (8011abc <RegionEU868ChanMaskSet+0x48>)
 8011aa4:	f7f8 fcec 	bl	800a480 <RegionCommonChanMaskCopy>
            break;
 8011aa8:	e001      	b.n	8011aae <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	e000      	b.n	8011ab0 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8011aae:	2301      	movs	r3, #1
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	2000097c 	.word	0x2000097c
 8011abc:	20000980 	.word	0x20000980

08011ac0 <RegionEU868AdrNext>:

bool RegionEU868AdrNext( AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b088      	sub	sp, #32
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	607a      	str	r2, [r7, #4]
 8011acc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	77fb      	strb	r3, [r7, #31]
    int8_t datarate = adrNext->Datarate;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	7a1b      	ldrb	r3, [r3, #8]
 8011ad6:	77bb      	strb	r3, [r7, #30]
    int8_t txPower = adrNext->TxPower;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	7a5b      	ldrb	r3, [r3, #9]
 8011adc:	777b      	strb	r3, [r7, #29]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	685a      	ldr	r2, [r3, #4]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	785b      	ldrb	r3, [r3, #1]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d03f      	beq.n	8011b6e <RegionEU868AdrNext+0xae>
    {
        if( datarate == EU868_TX_MIN_DATARATE )
 8011aee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d105      	bne.n	8011b02 <RegionEU868AdrNext+0x42>
        {
            *adrAckCounter = 0;
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	2200      	movs	r2, #0
 8011afa:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011afc:	2300      	movs	r3, #0
 8011afe:	77fb      	strb	r3, [r7, #31]
 8011b00:	e035      	b.n	8011b6e <RegionEU868AdrNext+0xae>
        }
        else
        {
            if( adrNext->AdrAckCounter >= EU868_ADR_ACK_LIMIT )
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	2b3f      	cmp	r3, #63	; 0x3f
 8011b08:	d904      	bls.n	8011b14 <RegionEU868AdrNext+0x54>
            {
                adrAckReq = true;
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	77fb      	strb	r3, [r7, #31]
                txPower = EU868_MAX_TX_POWER;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	777b      	strb	r3, [r7, #29]
 8011b12:	e001      	b.n	8011b18 <RegionEU868AdrNext+0x58>
            }
            else
            {
                adrAckReq = false;
 8011b14:	2300      	movs	r3, #0
 8011b16:	77fb      	strb	r3, [r7, #31]
            }
            if( adrNext->AdrAckCounter >= ( EU868_ADR_ACK_LIMIT + EU868_ADR_ACK_DELAY ) )
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	2b5f      	cmp	r3, #95	; 0x5f
 8011b1e:	d926      	bls.n	8011b6e <RegionEU868AdrNext+0xae>
            {
                if( ( adrNext->AdrAckCounter % EU868_ADR_ACK_DELAY ) == 1 )
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	f003 031f 	and.w	r3, r3, #31
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d120      	bne.n	8011b6e <RegionEU868AdrNext+0xae>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011b2c:	231e      	movs	r3, #30
 8011b2e:	763b      	strb	r3, [r7, #24]
                    getPhy.Datarate = datarate;
 8011b30:	7fbb      	ldrb	r3, [r7, #30]
 8011b32:	767b      	strb	r3, [r7, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	7a9b      	ldrb	r3, [r3, #10]
 8011b38:	76bb      	strb	r3, [r7, #26]
                    phyParam = RegionEU868GetPhyParam( &getPhy );
 8011b3a:	f107 0318 	add.w	r3, r7, #24
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7ff fd0c 	bl	801155c <RegionEU868GetPhyParam>
 8011b44:	4603      	mov	r3, r0
 8011b46:	617b      	str	r3, [r7, #20]
                    datarate = phyParam.Value;
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	77bb      	strb	r3, [r7, #30]

                    if( datarate == EU868_TX_MIN_DATARATE )
 8011b4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d10c      	bne.n	8011b6e <RegionEU868AdrNext+0xae>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011b54:	2300      	movs	r3, #0
 8011b56:	77fb      	strb	r3, [r7, #31]
                        if( adrNext->UpdateChanMask == true )
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d006      	beq.n	8011b6e <RegionEU868AdrNext+0xae>
                        {
                            // Re-enable default channels
                            ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011b60:	4b08      	ldr	r3, [pc, #32]	; (8011b84 <RegionEU868AdrNext+0xc4>)
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	f043 0307 	orr.w	r3, r3, #7
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	4b06      	ldr	r3, [pc, #24]	; (8011b84 <RegionEU868AdrNext+0xc4>)
 8011b6c:	801a      	strh	r2, [r3, #0]
                }
            }
        }
    }

    *drOut = datarate;
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	7fba      	ldrb	r2, [r7, #30]
 8011b72:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	7f7a      	ldrb	r2, [r7, #29]
 8011b78:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3720      	adds	r7, #32
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	2000097c 	.word	0x2000097c

08011b88 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b08c      	sub	sp, #48	; 0x30
 8011b8c:	af04      	add	r7, sp, #16
 8011b8e:	60ba      	str	r2, [r7, #8]
 8011b90:	607b      	str	r3, [r7, #4]
 8011b92:	4603      	mov	r3, r0
 8011b94:	73fb      	strb	r3, [r7, #15]
 8011b96:	460b      	mov	r3, r1
 8011b98:	73bb      	strb	r3, [r7, #14]
    double tSymbol = 0.0;
 8011b9a:	f04f 0200 	mov.w	r2, #0
 8011b9e:	f04f 0300 	mov.w	r3, #0
 8011ba2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t radioWakeUpTime;

    rxConfigParams->Datarate = datarate;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7bfa      	ldrb	r2, [r7, #15]
 8011baa:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( datarate );
 8011bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7ff fb7f 	bl	80112b4 <GetBandwidth>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	b2da      	uxtb	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	709a      	strb	r2, [r3, #2]

    if( datarate == DR_7 )
 8011bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bc2:	2b07      	cmp	r3, #7
 8011bc4:	d109      	bne.n	8011bda <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[datarate] );
 8011bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bca:	4a17      	ldr	r2, [pc, #92]	; (8011c28 <RegionEU868ComputeRxWindowParameters+0xa0>)
 8011bcc:	5cd3      	ldrb	r3, [r2, r3]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7f8 fdd6 	bl	800a780 <RegionCommonComputeSymbolTimeFsk>
 8011bd4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011bd8:	e00e      	b.n	8011bf8 <RegionEU868ComputeRxWindowParameters+0x70>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[datarate], BandwidthsEU868[datarate] );
 8011bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bde:	4a12      	ldr	r2, [pc, #72]	; (8011c28 <RegionEU868ComputeRxWindowParameters+0xa0>)
 8011be0:	5cd2      	ldrb	r2, [r2, r3]
 8011be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011be6:	4911      	ldr	r1, [pc, #68]	; (8011c2c <RegionEU868ComputeRxWindowParameters+0xa4>)
 8011be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011bec:	4619      	mov	r1, r3
 8011bee:	4610      	mov	r0, r2
 8011bf0:	f7f8 fd9c 	bl	800a72c <RegionCommonComputeSymbolTimeLoRa>
 8011bf4:	e9c7 0106 	strd	r0, r1, [r7, #24]
    }

    radioWakeUpTime = Radio.GetWakeupTime();
 8011bf8:	4b0d      	ldr	r3, [pc, #52]	; (8011c30 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8011bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bfc:	4798      	blx	r3
 8011bfe:	6178      	str	r0, [r7, #20]
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, radioWakeUpTime, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	3308      	adds	r3, #8
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	320c      	adds	r2, #12
 8011c08:	7bb9      	ldrb	r1, [r7, #14]
 8011c0a:	9202      	str	r2, [sp, #8]
 8011c0c:	9301      	str	r3, [sp, #4]
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	460a      	mov	r2, r1
 8011c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011c1a:	f7f8 fdcb 	bl	800a7b4 <RegionCommonComputeRxWindowParameters>
}
 8011c1e:	bf00      	nop
 8011c20:	3720      	adds	r7, #32
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	08013240 	.word	0x08013240
 8011c2c:	08013248 	.word	0x08013248
 8011c30:	080130d4 	.word	0x080130d4

08011c34 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011c34:	b5b0      	push	{r4, r5, r7, lr}
 8011c36:	b090      	sub	sp, #64	; 0x40
 8011c38:	af0a      	add	r7, sp, #40	; 0x28
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	785b      	ldrb	r3, [r3, #1]
 8011c42:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8011c44:	2300      	movs	r3, #0
 8011c46:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011c52:	4b55      	ldr	r3, [pc, #340]	; (8011da8 <RegionEU868RxConfig+0x174>)
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	4798      	blx	r3
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	e09d      	b.n	8011d9e <RegionEU868RxConfig+0x16a>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	7cdb      	ldrb	r3, [r3, #19]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d123      	bne.n	8011cb2 <RegionEU868RxConfig+0x7e>
    {
        // Apply window 1 frequency
        frequency = Channels[rxConfig->Channel].Frequency;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	4a4e      	ldr	r2, [pc, #312]	; (8011dac <RegionEU868RxConfig+0x178>)
 8011c72:	460b      	mov	r3, r1
 8011c74:	005b      	lsls	r3, r3, #1
 8011c76:	440b      	add	r3, r1
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	4413      	add	r3, r2
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	4619      	mov	r1, r3
 8011c86:	4a49      	ldr	r2, [pc, #292]	; (8011dac <RegionEU868RxConfig+0x178>)
 8011c88:	460b      	mov	r3, r1
 8011c8a:	005b      	lsls	r3, r3, #1
 8011c8c:	440b      	add	r3, r1
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	3304      	adds	r3, #4
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d00b      	beq.n	8011cb2 <RegionEU868RxConfig+0x7e>
        {
            frequency = Channels[rxConfig->Channel].Rx1Frequency;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4a42      	ldr	r2, [pc, #264]	; (8011dac <RegionEU868RxConfig+0x178>)
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	440b      	add	r3, r1
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	3304      	adds	r3, #4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8011cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cb6:	4a3e      	ldr	r2, [pc, #248]	; (8011db0 <RegionEU868RxConfig+0x17c>)
 8011cb8:	5cd3      	ldrb	r3, [r2, r3]
 8011cba:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8011cbc:	4b3a      	ldr	r3, [pc, #232]	; (8011da8 <RegionEU868RxConfig+0x174>)
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	6938      	ldr	r0, [r7, #16]
 8011cc2:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8011cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cc8:	2b07      	cmp	r3, #7
 8011cca:	d128      	bne.n	8011d1e <RegionEU868RxConfig+0xea>
    {
        modem = MODEM_FSK;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8011cd0:	4b35      	ldr	r3, [pc, #212]	; (8011da8 <RegionEU868RxConfig+0x174>)
 8011cd2:	699c      	ldr	r4, [r3, #24]
 8011cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011cdc:	fb02 f303 	mul.w	r3, r2, r3
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	7c92      	ldrb	r2, [r2, #18]
 8011cec:	7df8      	ldrb	r0, [r7, #23]
 8011cee:	9209      	str	r2, [sp, #36]	; 0x24
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	9208      	str	r2, [sp, #32]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	9207      	str	r2, [sp, #28]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	9206      	str	r2, [sp, #24]
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	9205      	str	r2, [sp, #20]
 8011d00:	2200      	movs	r2, #0
 8011d02:	9204      	str	r2, [sp, #16]
 8011d04:	2200      	movs	r2, #0
 8011d06:	9203      	str	r2, [sp, #12]
 8011d08:	9302      	str	r3, [sp, #8]
 8011d0a:	2305      	movs	r3, #5
 8011d0c:	9301      	str	r3, [sp, #4]
 8011d0e:	4b29      	ldr	r3, [pc, #164]	; (8011db4 <RegionEU868RxConfig+0x180>)
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	2300      	movs	r3, #0
 8011d14:	460a      	mov	r2, r1
 8011d16:	f24c 3150 	movw	r1, #50000	; 0xc350
 8011d1a:	47a0      	blx	r4
 8011d1c:	e024      	b.n	8011d68 <RegionEU868RxConfig+0x134>
    }
    else
    {
        modem = MODEM_LORA;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8011d22:	4b21      	ldr	r3, [pc, #132]	; (8011da8 <RegionEU868RxConfig+0x174>)
 8011d24:	699c      	ldr	r4, [r3, #24]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	789b      	ldrb	r3, [r3, #2]
 8011d2a:	461d      	mov	r5, r3
 8011d2c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	689b      	ldr	r3, [r3, #8]
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	7c92      	ldrb	r2, [r2, #18]
 8011d3a:	7df8      	ldrb	r0, [r7, #23]
 8011d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8011d3e:	2201      	movs	r2, #1
 8011d40:	9208      	str	r2, [sp, #32]
 8011d42:	2200      	movs	r2, #0
 8011d44:	9207      	str	r2, [sp, #28]
 8011d46:	2200      	movs	r2, #0
 8011d48:	9206      	str	r2, [sp, #24]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	9205      	str	r2, [sp, #20]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	9204      	str	r2, [sp, #16]
 8011d52:	2200      	movs	r2, #0
 8011d54:	9203      	str	r2, [sp, #12]
 8011d56:	9302      	str	r3, [sp, #8]
 8011d58:	2308      	movs	r3, #8
 8011d5a:	9301      	str	r3, [sp, #4]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	9300      	str	r3, [sp, #0]
 8011d60:	2301      	movs	r3, #1
 8011d62:	460a      	mov	r2, r1
 8011d64:	4629      	mov	r1, r5
 8011d66:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	7c5b      	ldrb	r3, [r3, #17]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d005      	beq.n	8011d7c <RegionEU868RxConfig+0x148>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8011d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d74:	4a10      	ldr	r2, [pc, #64]	; (8011db8 <RegionEU868RxConfig+0x184>)
 8011d76:	5cd3      	ldrb	r3, [r2, r3]
 8011d78:	75bb      	strb	r3, [r7, #22]
 8011d7a:	e004      	b.n	8011d86 <RegionEU868RxConfig+0x152>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8011d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d80:	4a0e      	ldr	r2, [pc, #56]	; (8011dbc <RegionEU868RxConfig+0x188>)
 8011d82:	5cd3      	ldrb	r3, [r2, r3]
 8011d84:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8011d86:	4b08      	ldr	r3, [pc, #32]	; (8011da8 <RegionEU868RxConfig+0x174>)
 8011d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d8a:	7dba      	ldrb	r2, [r7, #22]
 8011d8c:	320d      	adds	r2, #13
 8011d8e:	b2d1      	uxtb	r1, r2
 8011d90:	7dfa      	ldrb	r2, [r7, #23]
 8011d92:	4610      	mov	r0, r2
 8011d94:	4798      	blx	r3
    FREQ_PRINTF("RX on freq %u Hz at DR %d\r\n", (unsigned int)frequency, dr);

    *datarate = (uint8_t) dr;
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	7bfa      	ldrb	r2, [r7, #15]
 8011d9a:	701a      	strb	r2, [r3, #0]
    return true;
 8011d9c:	2301      	movs	r3, #1
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3718      	adds	r7, #24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bdb0      	pop	{r4, r5, r7, pc}
 8011da6:	bf00      	nop
 8011da8:	080130d4 	.word	0x080130d4
 8011dac:	200008bc 	.word	0x200008bc
 8011db0:	08013240 	.word	0x08013240
 8011db4:	00014585 	.word	0x00014585
 8011db8:	08013270 	.word	0x08013270
 8011dbc:	08013268 	.word	0x08013268

08011dc0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011dc0:	b590      	push	{r4, r7, lr}
 8011dc2:	b093      	sub	sp, #76	; 0x4c
 8011dc4:	af0a      	add	r7, sp, #40	; 0x28
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	4b51      	ldr	r3, [pc, #324]	; (8011f1c <RegionEU868TxConfig+0x15c>)
 8011dd6:	5c9b      	ldrb	r3, [r3, r2]
 8011dd8:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask );
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	4619      	mov	r1, r3
 8011de6:	4a4e      	ldr	r2, [pc, #312]	; (8011f20 <RegionEU868TxConfig+0x160>)
 8011de8:	460b      	mov	r3, r1
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	440b      	add	r3, r1
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	3309      	adds	r3, #9
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	4a4b      	ldr	r2, [pc, #300]	; (8011f24 <RegionEU868TxConfig+0x164>)
 8011df8:	011b      	lsls	r3, r3, #4
 8011dfa:	4413      	add	r3, r2
 8011dfc:	3302      	adds	r3, #2
 8011dfe:	f993 1000 	ldrsb.w	r1, [r3]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8011e08:	4b47      	ldr	r3, [pc, #284]	; (8011f28 <RegionEU868TxConfig+0x168>)
 8011e0a:	f7ff fa71 	bl	80112f0 <LimitTxPower>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7ff fa4b 	bl	80112b4 <GetBandwidth>
 8011e1e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	6859      	ldr	r1, [r3, #4]
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	689a      	ldr	r2, [r3, #8]
 8011e2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7f8 fd45 	bl	800a8c0 <RegionCommonComputeTxPower>
 8011e36:	4603      	mov	r3, r0
 8011e38:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( Channels[txConfig->Channel].Frequency );
 8011e3a:	4b3c      	ldr	r3, [pc, #240]	; (8011f2c <RegionEU868TxConfig+0x16c>)
 8011e3c:	68da      	ldr	r2, [r3, #12]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	4618      	mov	r0, r3
 8011e44:	4936      	ldr	r1, [pc, #216]	; (8011f20 <RegionEU868TxConfig+0x160>)
 8011e46:	4603      	mov	r3, r0
 8011e48:	005b      	lsls	r3, r3, #1
 8011e4a:	4403      	add	r3, r0
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	440b      	add	r3, r1
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4618      	mov	r0, r3
 8011e54:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e5c:	2b07      	cmp	r3, #7
 8011e5e:	d124      	bne.n	8011eaa <RegionEU868TxConfig+0xea>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8011e60:	2300      	movs	r3, #0
 8011e62:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8011e64:	4b31      	ldr	r3, [pc, #196]	; (8011f2c <RegionEU868TxConfig+0x16c>)
 8011e66:	69dc      	ldr	r4, [r3, #28]
 8011e68:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e70:	fb02 f303 	mul.w	r3, r2, r3
 8011e74:	461a      	mov	r2, r3
 8011e76:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8011e7a:	7ff8      	ldrb	r0, [r7, #31]
 8011e7c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011e80:	9308      	str	r3, [sp, #32]
 8011e82:	2300      	movs	r3, #0
 8011e84:	9307      	str	r3, [sp, #28]
 8011e86:	2300      	movs	r3, #0
 8011e88:	9306      	str	r3, [sp, #24]
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	9305      	str	r3, [sp, #20]
 8011e8e:	2301      	movs	r3, #1
 8011e90:	9304      	str	r3, [sp, #16]
 8011e92:	2300      	movs	r3, #0
 8011e94:	9303      	str	r3, [sp, #12]
 8011e96:	2305      	movs	r3, #5
 8011e98:	9302      	str	r3, [sp, #8]
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	9301      	str	r3, [sp, #4]
 8011e9e:	9200      	str	r2, [sp, #0]
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8011ea6:	47a0      	blx	r4
 8011ea8:	e01d      	b.n	8011ee6 <RegionEU868TxConfig+0x126>
    }
    else
    {
        modem = MODEM_LORA;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 16, false, true, 0, 0, false, 3000 );
 8011eae:	4b1f      	ldr	r3, [pc, #124]	; (8011f2c <RegionEU868TxConfig+0x16c>)
 8011eb0:	69dc      	ldr	r4, [r3, #28]
 8011eb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011eb6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8011eba:	7ff8      	ldrb	r0, [r7, #31]
 8011ebc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8011ec0:	9208      	str	r2, [sp, #32]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	9207      	str	r2, [sp, #28]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	9206      	str	r2, [sp, #24]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	9205      	str	r2, [sp, #20]
 8011ece:	2201      	movs	r2, #1
 8011ed0:	9204      	str	r2, [sp, #16]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	9203      	str	r2, [sp, #12]
 8011ed6:	2210      	movs	r2, #16
 8011ed8:	9202      	str	r2, [sp, #8]
 8011eda:	2201      	movs	r2, #1
 8011edc:	9201      	str	r2, [sp, #4]
 8011ede:	9300      	str	r3, [sp, #0]
 8011ee0:	69bb      	ldr	r3, [r7, #24]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	47a0      	blx	r4
    }
    FREQ_PRINTF("TX on freq %u Hz at DR %d\r\n", (unsigned int)Channels[txConfig->Channel].Frequency, txConfig->Datarate);
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8011ee6:	4b11      	ldr	r3, [pc, #68]	; (8011f2c <RegionEU868TxConfig+0x16c>)
 8011ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011eea:	68fa      	ldr	r2, [r7, #12]
 8011eec:	8992      	ldrh	r2, [r2, #12]
 8011eee:	b2d1      	uxtb	r1, r2
 8011ef0:	7ffa      	ldrb	r2, [r7, #31]
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem,  txConfig->PktLen );
 8011ef6:	4b0d      	ldr	r3, [pc, #52]	; (8011f2c <RegionEU868TxConfig+0x16c>)
 8011ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011efa:	68fa      	ldr	r2, [r7, #12]
 8011efc:	8992      	ldrh	r2, [r2, #12]
 8011efe:	b2d1      	uxtb	r1, r2
 8011f00:	7ffa      	ldrb	r2, [r7, #31]
 8011f02:	4610      	mov	r0, r2
 8011f04:	4798      	blx	r3
 8011f06:	4602      	mov	r2, r0
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	7f7a      	ldrb	r2, [r7, #29]
 8011f10:	701a      	strb	r2, [r3, #0]
    return true;
 8011f12:	2301      	movs	r3, #1
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3724      	adds	r7, #36	; 0x24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd90      	pop	{r4, r7, pc}
 8011f1c:	08013240 	.word	0x08013240
 8011f20:	200008bc 	.word	0x200008bc
 8011f24:	200000a8 	.word	0x200000a8
 8011f28:	2000097c 	.word	0x2000097c
 8011f2c:	080130d4 	.word	0x080130d4

08011f30 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b08a      	sub	sp, #40	; 0x28
 8011f34:	af02      	add	r7, sp, #8
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
 8011f3c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8011f3e:	2307      	movs	r3, #7
 8011f40:	77fb      	strb	r3, [r7, #31]
    LinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8011f42:	2300      	movs	r3, #0
 8011f44:	773b      	strb	r3, [r7, #28]
    uint8_t bytesProcessed = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	77bb      	strb	r3, [r7, #30]
    uint16_t chMask = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	827b      	strh	r3, [r7, #18]

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011f4e:	e068      	b.n	8012022 <RegionEU868LinkAdrReq+0xf2>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	7fbb      	ldrb	r3, [r7, #30]
 8011f56:	4413      	add	r3, r2
 8011f58:	f107 0214 	add.w	r2, r7, #20
 8011f5c:	4611      	mov	r1, r2
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7f8 fb92 	bl	800a688 <RegionCommonParseLinkAdrReq>
 8011f64:	4603      	mov	r3, r0
 8011f66:	773b      	strb	r3, [r7, #28]

        if( nextIndex == 0 )
 8011f68:	7f3b      	ldrb	r3, [r7, #28]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d05f      	beq.n	801202e <RegionEU868LinkAdrReq+0xfe>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8011f6e:	7fba      	ldrb	r2, [r7, #30]
 8011f70:	7f3b      	ldrb	r3, [r7, #28]
 8011f72:	4413      	add	r3, r2
 8011f74:	77bb      	strb	r3, [r7, #30]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8011f76:	2307      	movs	r3, #7
 8011f78:	77fb      	strb	r3, [r7, #31]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8011f7a:	8b3b      	ldrh	r3, [r7, #24]
 8011f7c:	827b      	strh	r3, [r7, #18]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8011f7e:	7dfb      	ldrb	r3, [r7, #23]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d107      	bne.n	8011f94 <RegionEU868LinkAdrReq+0x64>
 8011f84:	8a7b      	ldrh	r3, [r7, #18]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d104      	bne.n	8011f94 <RegionEU868LinkAdrReq+0x64>
        {
            status &= 0xFE; // Channel mask KO
 8011f8a:	7ffb      	ldrb	r3, [r7, #31]
 8011f8c:	f023 0301 	bic.w	r3, r3, #1
 8011f90:	77fb      	strb	r3, [r7, #31]
 8011f92:	e046      	b.n	8012022 <RegionEU868LinkAdrReq+0xf2>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011f94:	7dfb      	ldrb	r3, [r7, #23]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <RegionEU868LinkAdrReq+0x70>
 8011f9a:	7dfb      	ldrb	r3, [r7, #23]
 8011f9c:	2b05      	cmp	r3, #5
 8011f9e:	d902      	bls.n	8011fa6 <RegionEU868LinkAdrReq+0x76>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011fa2:	2b06      	cmp	r3, #6
 8011fa4:	d904      	bls.n	8011fb0 <RegionEU868LinkAdrReq+0x80>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8011fa6:	7ffb      	ldrb	r3, [r7, #31]
 8011fa8:	f023 0301 	bic.w	r3, r3, #1
 8011fac:	77fb      	strb	r3, [r7, #31]
 8011fae:	e038      	b.n	8012022 <RegionEU868LinkAdrReq+0xf2>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	777b      	strb	r3, [r7, #29]
 8011fb4:	e032      	b.n	801201c <RegionEU868LinkAdrReq+0xec>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8011fb6:	7dfb      	ldrb	r3, [r7, #23]
 8011fb8:	2b06      	cmp	r3, #6
 8011fba:	d115      	bne.n	8011fe8 <RegionEU868LinkAdrReq+0xb8>
                {
                    if( Channels[i].Frequency != 0 )
 8011fbc:	7f7a      	ldrb	r2, [r7, #29]
 8011fbe:	4942      	ldr	r1, [pc, #264]	; (80120c8 <RegionEU868LinkAdrReq+0x198>)
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	005b      	lsls	r3, r3, #1
 8011fc4:	4413      	add	r3, r2
 8011fc6:	009b      	lsls	r3, r3, #2
 8011fc8:	440b      	add	r3, r1
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d022      	beq.n	8012016 <RegionEU868LinkAdrReq+0xe6>
                    {
                        chMask |= 1 << i;
 8011fd0:	7f7b      	ldrb	r3, [r7, #29]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8011fd8:	b21a      	sxth	r2, r3
 8011fda:	8a7b      	ldrh	r3, [r7, #18]
 8011fdc:	b21b      	sxth	r3, r3
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	b21b      	sxth	r3, r3
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	827b      	strh	r3, [r7, #18]
 8011fe6:	e016      	b.n	8012016 <RegionEU868LinkAdrReq+0xe6>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8011fe8:	8a7b      	ldrh	r3, [r7, #18]
 8011fea:	461a      	mov	r2, r3
 8011fec:	7f7b      	ldrb	r3, [r7, #29]
 8011fee:	fa42 f303 	asr.w	r3, r2, r3
 8011ff2:	f003 0301 	and.w	r3, r3, #1
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d00d      	beq.n	8012016 <RegionEU868LinkAdrReq+0xe6>
                        ( Channels[i].Frequency == 0 ) )
 8011ffa:	7f7a      	ldrb	r2, [r7, #29]
 8011ffc:	4932      	ldr	r1, [pc, #200]	; (80120c8 <RegionEU868LinkAdrReq+0x198>)
 8011ffe:	4613      	mov	r3, r2
 8012000:	005b      	lsls	r3, r3, #1
 8012002:	4413      	add	r3, r2
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	440b      	add	r3, r1
 8012008:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801200a:	2b00      	cmp	r3, #0
 801200c:	d103      	bne.n	8012016 <RegionEU868LinkAdrReq+0xe6>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801200e:	7ffb      	ldrb	r3, [r7, #31]
 8012010:	f023 0301 	bic.w	r3, r3, #1
 8012014:	77fb      	strb	r3, [r7, #31]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8012016:	7f7b      	ldrb	r3, [r7, #29]
 8012018:	3301      	adds	r3, #1
 801201a:	777b      	strb	r3, [r7, #29]
 801201c:	7f7b      	ldrb	r3, [r7, #29]
 801201e:	2b0f      	cmp	r3, #15
 8012020:	d9c9      	bls.n	8011fb6 <RegionEU868LinkAdrReq+0x86>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	791b      	ldrb	r3, [r3, #4]
 8012026:	7fba      	ldrb	r2, [r7, #30]
 8012028:	429a      	cmp	r2, r3
 801202a:	d391      	bcc.n	8011f50 <RegionEU868LinkAdrReq+0x20>
 801202c:	e000      	b.n	8012030 <RegionEU868LinkAdrReq+0x100>
            break; // break loop, since no more request has been found
 801202e:	bf00      	nop
            }
        }
    }

    // Verify datarate
    if( RegionCommonChanVerifyDr( EU868_MAX_NB_CHANNELS, &chMask, linkAdrParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE, Channels  ) == false )
 8012030:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8012034:	f107 0112 	add.w	r1, r7, #18
 8012038:	4b23      	ldr	r3, [pc, #140]	; (80120c8 <RegionEU868LinkAdrReq+0x198>)
 801203a:	9301      	str	r3, [sp, #4]
 801203c:	2307      	movs	r3, #7
 801203e:	9300      	str	r3, [sp, #0]
 8012040:	2300      	movs	r3, #0
 8012042:	2010      	movs	r0, #16
 8012044:	f7f8 f924 	bl	800a290 <RegionCommonChanVerifyDr>
 8012048:	4603      	mov	r3, r0
 801204a:	f083 0301 	eor.w	r3, r3, #1
 801204e:	b2db      	uxtb	r3, r3
 8012050:	2b00      	cmp	r3, #0
 8012052:	d003      	beq.n	801205c <RegionEU868LinkAdrReq+0x12c>
    {
        status &= 0xFD; // Datarate KO
 8012054:	7ffb      	ldrb	r3, [r7, #31]
 8012056:	f023 0302 	bic.w	r3, r3, #2
 801205a:	77fb      	strb	r3, [r7, #31]
    }

    // Verify tx power
    if( RegionCommonValueInRange( linkAdrParams.TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER ) == 0 )
 801205c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012060:	2207      	movs	r2, #7
 8012062:	2100      	movs	r1, #0
 8012064:	4618      	mov	r0, r3
 8012066:	f7f8 f98e 	bl	800a386 <RegionCommonValueInRange>
 801206a:	4603      	mov	r3, r0
 801206c:	2b00      	cmp	r3, #0
 801206e:	d10a      	bne.n	8012086 <RegionEU868LinkAdrReq+0x156>
    {
        // Verify if the maximum TX power is exceeded
        if( EU868_MAX_TX_POWER > linkAdrParams.TxPower )
 8012070:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012074:	2b00      	cmp	r3, #0
 8012076:	da02      	bge.n	801207e <RegionEU868LinkAdrReq+0x14e>
        { // Apply maximum TX power. Accept TX power.
            linkAdrParams.TxPower = EU868_MAX_TX_POWER;
 8012078:	2300      	movs	r3, #0
 801207a:	75bb      	strb	r3, [r7, #22]
 801207c:	e003      	b.n	8012086 <RegionEU868LinkAdrReq+0x156>
        }
        else
        {
            status &= 0xFB; // TxPower KO
 801207e:	7ffb      	ldrb	r3, [r7, #31]
 8012080:	f023 0304 	bic.w	r3, r3, #4
 8012084:	77fb      	strb	r3, [r7, #31]
        }
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012086:	7ffb      	ldrb	r3, [r7, #31]
 8012088:	2b07      	cmp	r3, #7
 801208a:	d10a      	bne.n	80120a2 <RegionEU868LinkAdrReq+0x172>
    {
        if( linkAdrParams.NbRep == 0 )
 801208c:	7d3b      	ldrb	r3, [r7, #20]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <RegionEU868LinkAdrReq+0x166>
        { // Value of 0 is not allowed, revert to default.
            linkAdrParams.NbRep = 1;
 8012092:	2301      	movs	r3, #1
 8012094:	753b      	strb	r3, [r7, #20]
 8012096:	4b0d      	ldr	r3, [pc, #52]	; (80120cc <RegionEU868LinkAdrReq+0x19c>)
 8012098:	2200      	movs	r2, #0
 801209a:	801a      	strh	r2, [r3, #0]
        }

        // Set the channels mask to a default value
        memset( ChannelsMask, 0, sizeof( ChannelsMask ) );
        // Update the channels mask
        ChannelsMask[0] = chMask;
 801209c:	8a7a      	ldrh	r2, [r7, #18]
 801209e:	4b0b      	ldr	r3, [pc, #44]	; (80120cc <RegionEU868LinkAdrReq+0x19c>)
 80120a0:	801a      	strh	r2, [r3, #0]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80120a2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80120aa:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80120b2:	7d3a      	ldrb	r2, [r7, #20]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80120b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ba:	7fba      	ldrb	r2, [r7, #30]
 80120bc:	701a      	strb	r2, [r3, #0]

    return status;
 80120be:	7ffb      	ldrb	r3, [r7, #31]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3720      	adds	r7, #32
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}
 80120c8:	200008bc 	.word	0x200008bc
 80120cc:	2000097c 	.word	0x2000097c

080120d0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80120d8:	2307      	movs	r3, #7
 80120da:	73fb      	strb	r3, [r7, #15]

    // Verify radio frequency
    if( Radio.CheckRfFrequency( rxParamSetupReq->Frequency ) == false )
 80120dc:	4b19      	ldr	r3, [pc, #100]	; (8012144 <RegionEU868RxParamSetupReq+0x74>)
 80120de:	6a1b      	ldr	r3, [r3, #32]
 80120e0:	687a      	ldr	r2, [r7, #4]
 80120e2:	6852      	ldr	r2, [r2, #4]
 80120e4:	4610      	mov	r0, r2
 80120e6:	4798      	blx	r3
 80120e8:	4603      	mov	r3, r0
 80120ea:	f083 0301 	eor.w	r3, r3, #1
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d003      	beq.n	80120fc <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFE; // Channel frequency KO
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
 80120f6:	f023 0301 	bic.w	r3, r3, #1
 80120fa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f993 3000 	ldrsb.w	r3, [r3]
 8012102:	2207      	movs	r2, #7
 8012104:	2100      	movs	r1, #0
 8012106:	4618      	mov	r0, r3
 8012108:	f7f8 f93d 	bl	800a386 <RegionCommonValueInRange>
 801210c:	4603      	mov	r3, r0
 801210e:	2b00      	cmp	r3, #0
 8012110:	d103      	bne.n	801211a <RegionEU868RxParamSetupReq+0x4a>
    {
        status &= 0xFD; // Datarate KO
 8012112:	7bfb      	ldrb	r3, [r7, #15]
 8012114:	f023 0302 	bic.w	r3, r3, #2
 8012118:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012120:	2205      	movs	r2, #5
 8012122:	2100      	movs	r1, #0
 8012124:	4618      	mov	r0, r3
 8012126:	f7f8 f92e 	bl	800a386 <RegionCommonValueInRange>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d103      	bne.n	8012138 <RegionEU868RxParamSetupReq+0x68>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8012130:	7bfb      	ldrb	r3, [r7, #15]
 8012132:	f023 0304 	bic.w	r3, r3, #4
 8012136:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8012138:	7bfb      	ldrb	r3, [r7, #15]
}
 801213a:	4618      	mov	r0, r3
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	080130d4 	.word	0x080130d4

08012148 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b086      	sub	sp, #24
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8012150:	2303      	movs	r3, #3
 8012152:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d114      	bne.n	8012188 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012164:	b2db      	uxtb	r3, r3
 8012166:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8012168:	f107 0308 	add.w	r3, r7, #8
 801216c:	4618      	mov	r0, r3
 801216e:	f000 fab5 	bl	80126dc <RegionEU868ChannelsRemove>
 8012172:	4603      	mov	r3, r0
 8012174:	f083 0301 	eor.w	r3, r3, #1
 8012178:	b2db      	uxtb	r3, r3
 801217a:	2b00      	cmp	r3, #0
 801217c:	d03b      	beq.n	80121f6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801217e:	7dfb      	ldrb	r3, [r7, #23]
 8012180:	f023 0303 	bic.w	r3, r3, #3
 8012184:	75fb      	strb	r3, [r7, #23]
 8012186:	e036      	b.n	80121f6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012194:	b2db      	uxtb	r3, r3
 8012196:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8012198:	f107 030c 	add.w	r3, r7, #12
 801219c:	4618      	mov	r0, r3
 801219e:	f000 f9d7 	bl	8012550 <RegionEU868ChannelAdd>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b06      	cmp	r3, #6
 80121a6:	d820      	bhi.n	80121ea <RegionEU868NewChannelReq+0xa2>
 80121a8:	a201      	add	r2, pc, #4	; (adr r2, 80121b0 <RegionEU868NewChannelReq+0x68>)
 80121aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121ae:	bf00      	nop
 80121b0:	080121f5 	.word	0x080121f5
 80121b4:	080121eb 	.word	0x080121eb
 80121b8:	080121eb 	.word	0x080121eb
 80121bc:	080121eb 	.word	0x080121eb
 80121c0:	080121cd 	.word	0x080121cd
 80121c4:	080121d7 	.word	0x080121d7
 80121c8:	080121e1 	.word	0x080121e1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80121cc:	7dfb      	ldrb	r3, [r7, #23]
 80121ce:	f023 0301 	bic.w	r3, r3, #1
 80121d2:	75fb      	strb	r3, [r7, #23]
                break;
 80121d4:	e00f      	b.n	80121f6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80121d6:	7dfb      	ldrb	r3, [r7, #23]
 80121d8:	f023 0302 	bic.w	r3, r3, #2
 80121dc:	75fb      	strb	r3, [r7, #23]
                break;
 80121de:	e00a      	b.n	80121f6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80121e0:	7dfb      	ldrb	r3, [r7, #23]
 80121e2:	f023 0303 	bic.w	r3, r3, #3
 80121e6:	75fb      	strb	r3, [r7, #23]
                break;
 80121e8:	e005      	b.n	80121f6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80121ea:	7dfb      	ldrb	r3, [r7, #23]
 80121ec:	f023 0303 	bic.w	r3, r3, #3
 80121f0:	75fb      	strb	r3, [r7, #23]
                break;
 80121f2:	e000      	b.n	80121f6 <RegionEU868NewChannelReq+0xae>
                break;
 80121f4:	bf00      	nop
            }
        }
    }

    return status;
 80121f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80121f8:	4618      	mov	r0, r3
 80121fa:	3718      	adds	r7, #24
 80121fc:	46bd      	mov	sp, r7
 80121fe:	bd80      	pop	{r7, pc}

08012200 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8012200:	b480      	push	{r7}
 8012202:	b083      	sub	sp, #12
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
    return -1;
 8012208:	f04f 33ff 	mov.w	r3, #4294967295
}
 801220c:	4618      	mov	r0, r3
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	bc80      	pop	{r7}
 8012214:	4770      	bx	lr
	...

08012218 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8012220:	2303      	movs	r3, #3
 8012222:	73fb      	strb	r3, [r7, #15]
    uint8_t band = 0;
 8012224:	2300      	movs	r3, #0
 8012226:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyTxFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	f107 020e 	add.w	r2, r7, #14
 8012230:	4611      	mov	r1, r2
 8012232:	4618      	mov	r0, r3
 8012234:	f7ff f878 	bl	8011328 <VerifyTxFreq>
 8012238:	4603      	mov	r3, r0
 801223a:	f083 0301 	eor.w	r3, r3, #1
 801223e:	b2db      	uxtb	r3, r3
 8012240:	2b00      	cmp	r3, #0
 8012242:	d003      	beq.n	801224c <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8012244:	7bfb      	ldrb	r3, [r7, #15]
 8012246:	f023 0301 	bic.w	r3, r3, #1
 801224a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	4619      	mov	r1, r3
 8012252:	4a11      	ldr	r2, [pc, #68]	; (8012298 <RegionEU868DlChannelReq+0x80>)
 8012254:	460b      	mov	r3, r1
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	440b      	add	r3, r1
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	4413      	add	r3, r2
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d103      	bne.n	801226c <RegionEU868DlChannelReq+0x54>
    {
        status &= 0xFD;
 8012264:	7bfb      	ldrb	r3, [r7, #15]
 8012266:	f023 0302 	bic.w	r3, r3, #2
 801226a:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801226c:	7bfb      	ldrb	r3, [r7, #15]
 801226e:	2b03      	cmp	r3, #3
 8012270:	d10c      	bne.n	801228c <RegionEU868DlChannelReq+0x74>
    {
        Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	4618      	mov	r0, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	4906      	ldr	r1, [pc, #24]	; (8012298 <RegionEU868DlChannelReq+0x80>)
 801227e:	4603      	mov	r3, r0
 8012280:	005b      	lsls	r3, r3, #1
 8012282:	4403      	add	r3, r0
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	440b      	add	r3, r1
 8012288:	3304      	adds	r3, #4
 801228a:	601a      	str	r2, [r3, #0]
    }

    return status;
 801228c:	7bfb      	ldrb	r3, [r7, #15]
}
 801228e:	4618      	mov	r0, r3
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	200008bc 	.word	0x200008bc

0801229c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( AlternateDrParams_t* alternateDr )
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
    int8_t datarate = 0;
 80122a4:	2300      	movs	r3, #0
 80122a6:	73fb      	strb	r3, [r7, #15]

    if( ( alternateDr->NbTrials % 48 ) == 0 )
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	881a      	ldrh	r2, [r3, #0]
 80122ac:	4b23      	ldr	r3, [pc, #140]	; (801233c <RegionEU868AlternateDr+0xa0>)
 80122ae:	fba3 1302 	umull	r1, r3, r3, r2
 80122b2:	0959      	lsrs	r1, r3, #5
 80122b4:	460b      	mov	r3, r1
 80122b6:	005b      	lsls	r3, r3, #1
 80122b8:	440b      	add	r3, r1
 80122ba:	011b      	lsls	r3, r3, #4
 80122bc:	1ad3      	subs	r3, r2, r3
 80122be:	b29b      	uxth	r3, r3
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d102      	bne.n	80122ca <RegionEU868AlternateDr+0x2e>
    {
        datarate = DR_0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	73fb      	strb	r3, [r7, #15]
 80122c8:	e030      	b.n	801232c <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 32 ) == 0 )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	881b      	ldrh	r3, [r3, #0]
 80122ce:	f003 031f 	and.w	r3, r3, #31
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d102      	bne.n	80122de <RegionEU868AlternateDr+0x42>
    {
        datarate = DR_1;
 80122d8:	2301      	movs	r3, #1
 80122da:	73fb      	strb	r3, [r7, #15]
 80122dc:	e026      	b.n	801232c <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 24 ) == 0 )
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	881a      	ldrh	r2, [r3, #0]
 80122e2:	4b16      	ldr	r3, [pc, #88]	; (801233c <RegionEU868AlternateDr+0xa0>)
 80122e4:	fba3 1302 	umull	r1, r3, r3, r2
 80122e8:	0919      	lsrs	r1, r3, #4
 80122ea:	460b      	mov	r3, r1
 80122ec:	005b      	lsls	r3, r3, #1
 80122ee:	440b      	add	r3, r1
 80122f0:	00db      	lsls	r3, r3, #3
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d102      	bne.n	8012300 <RegionEU868AlternateDr+0x64>
    {
        datarate = DR_2;
 80122fa:	2302      	movs	r3, #2
 80122fc:	73fb      	strb	r3, [r7, #15]
 80122fe:	e015      	b.n	801232c <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 16 ) == 0 )
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	f003 030f 	and.w	r3, r3, #15
 8012308:	b29b      	uxth	r3, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d102      	bne.n	8012314 <RegionEU868AlternateDr+0x78>
    {
        datarate = DR_3;
 801230e:	2303      	movs	r3, #3
 8012310:	73fb      	strb	r3, [r7, #15]
 8012312:	e00b      	b.n	801232c <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 8 ) == 0 )
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	f003 0307 	and.w	r3, r3, #7
 801231c:	b29b      	uxth	r3, r3
 801231e:	2b00      	cmp	r3, #0
 8012320:	d102      	bne.n	8012328 <RegionEU868AlternateDr+0x8c>
    {
        datarate = DR_4;
 8012322:	2304      	movs	r3, #4
 8012324:	73fb      	strb	r3, [r7, #15]
 8012326:	e001      	b.n	801232c <RegionEU868AlternateDr+0x90>
    }
    else
    {
        datarate = DR_5;
 8012328:	2305      	movs	r3, #5
 801232a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801232c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3714      	adds	r7, #20
 8012334:	46bd      	mov	sp, r7
 8012336:	bc80      	pop	{r7}
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop
 801233c:	aaaaaaab 	.word	0xaaaaaaab

08012340 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8012340:	b590      	push	{r4, r7, lr}
 8012342:	b085      	sub	sp, #20
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
    uint8_t channel = calcBackOff->Channel;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	78db      	ldrb	r3, [r3, #3]
 801234c:	73fb      	strb	r3, [r7, #15]
    uint16_t dutyCycle = Bands[Channels[channel].Band].DCycle;
 801234e:	7bfa      	ldrb	r2, [r7, #15]
 8012350:	4931      	ldr	r1, [pc, #196]	; (8012418 <RegionEU868CalcBackOff+0xd8>)
 8012352:	4613      	mov	r3, r2
 8012354:	005b      	lsls	r3, r3, #1
 8012356:	4413      	add	r3, r2
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	440b      	add	r3, r1
 801235c:	3309      	adds	r3, #9
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	4a2e      	ldr	r2, [pc, #184]	; (801241c <RegionEU868CalcBackOff+0xdc>)
 8012362:	011b      	lsls	r3, r3, #4
 8012364:	4413      	add	r3, r2
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	81bb      	strh	r3, [r7, #12]
    uint16_t joinDutyCycle = 0;
 801236a:	2300      	movs	r3, #0
 801236c:	817b      	strh	r3, [r7, #10]

    // Reset time-off to initial value.
    Bands[Channels[channel].Band].TimeOff = 0;
 801236e:	7bfa      	ldrb	r2, [r7, #15]
 8012370:	4929      	ldr	r1, [pc, #164]	; (8012418 <RegionEU868CalcBackOff+0xd8>)
 8012372:	4613      	mov	r3, r2
 8012374:	005b      	lsls	r3, r3, #1
 8012376:	4413      	add	r3, r2
 8012378:	009b      	lsls	r3, r3, #2
 801237a:	440b      	add	r3, r1
 801237c:	3309      	adds	r3, #9
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	4a26      	ldr	r2, [pc, #152]	; (801241c <RegionEU868CalcBackOff+0xdc>)
 8012382:	011b      	lsls	r3, r3, #4
 8012384:	4413      	add	r3, r2
 8012386:	330c      	adds	r3, #12
 8012388:	2200      	movs	r2, #0
 801238a:	601a      	str	r2, [r3, #0]

    if( calcBackOff->Joined == false )
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f083 0301 	eor.w	r3, r3, #1
 8012394:	b2db      	uxtb	r3, r3
 8012396:	2b00      	cmp	r3, #0
 8012398:	d021      	beq.n	80123de <RegionEU868CalcBackOff+0x9e>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOff->ElapsedTime );
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7f7 ff56 	bl	800a250 <RegionCommonGetJoinDc>
 80123a4:	4603      	mov	r3, r0
 80123a6:	817b      	strh	r3, [r7, #10]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80123a8:	897a      	ldrh	r2, [r7, #10]
 80123aa:	89bb      	ldrh	r3, [r7, #12]
 80123ac:	4293      	cmp	r3, r2
 80123ae:	bf38      	it	cc
 80123b0:	4613      	movcc	r3, r2
 80123b2:	81bb      	strh	r3, [r7, #12]
        // Apply band time-off.
        Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
 80123b4:	89bb      	ldrh	r3, [r7, #12]
 80123b6:	1e59      	subs	r1, r3, #1
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6898      	ldr	r0, [r3, #8]
 80123bc:	7bfa      	ldrb	r2, [r7, #15]
 80123be:	4c16      	ldr	r4, [pc, #88]	; (8012418 <RegionEU868CalcBackOff+0xd8>)
 80123c0:	4613      	mov	r3, r2
 80123c2:	005b      	lsls	r3, r3, #1
 80123c4:	4413      	add	r3, r2
 80123c6:	009b      	lsls	r3, r3, #2
 80123c8:	4423      	add	r3, r4
 80123ca:	3309      	adds	r3, #9
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	fb00 f201 	mul.w	r2, r0, r1
 80123d2:	4912      	ldr	r1, [pc, #72]	; (801241c <RegionEU868CalcBackOff+0xdc>)
 80123d4:	011b      	lsls	r3, r3, #4
 80123d6:	440b      	add	r3, r1
 80123d8:	330c      	adds	r3, #12
 80123da:	601a      	str	r2, [r3, #0]
        if( calcBackOff->DutyCycleEnabled == true )
        {
            Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
        }
    }
}
 80123dc:	e017      	b.n	801240e <RegionEU868CalcBackOff+0xce>
        if( calcBackOff->DutyCycleEnabled == true )
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	789b      	ldrb	r3, [r3, #2]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d013      	beq.n	801240e <RegionEU868CalcBackOff+0xce>
            Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
 80123e6:	89bb      	ldrh	r3, [r7, #12]
 80123e8:	1e59      	subs	r1, r3, #1
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6898      	ldr	r0, [r3, #8]
 80123ee:	7bfa      	ldrb	r2, [r7, #15]
 80123f0:	4c09      	ldr	r4, [pc, #36]	; (8012418 <RegionEU868CalcBackOff+0xd8>)
 80123f2:	4613      	mov	r3, r2
 80123f4:	005b      	lsls	r3, r3, #1
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	4423      	add	r3, r4
 80123fc:	3309      	adds	r3, #9
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	fb00 f201 	mul.w	r2, r0, r1
 8012404:	4905      	ldr	r1, [pc, #20]	; (801241c <RegionEU868CalcBackOff+0xdc>)
 8012406:	011b      	lsls	r3, r3, #4
 8012408:	440b      	add	r3, r1
 801240a:	330c      	adds	r3, #12
 801240c:	601a      	str	r2, [r3, #0]
}
 801240e:	bf00      	nop
 8012410:	3714      	adds	r7, #20
 8012412:	46bd      	mov	sp, r7
 8012414:	bd90      	pop	{r4, r7, pc}
 8012416:	bf00      	nop
 8012418:	200008bc 	.word	0x200008bc
 801241c:	200000a8 	.word	0x200000a8

08012420 <RegionEU868NextChannel>:

bool RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012420:	b590      	push	{r4, r7, lr}
 8012422:	b091      	sub	sp, #68	; 0x44
 8012424:	af04      	add	r7, sp, #16
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
 801242c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t delayTx = 0;
 8012434:	2300      	movs	r3, #0
 8012436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801243a:	2300      	movs	r3, #0
 801243c:	617b      	str	r3, [r7, #20]
 801243e:	f107 0318 	add.w	r3, r7, #24
 8012442:	2200      	movs	r2, #0
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	605a      	str	r2, [r3, #4]
 8012448:	609a      	str	r2, [r3, #8]
    TimerTime_t nextTxDelay = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( ChannelsMask, 0, 1 ) == 0 )
 801244e:	2201      	movs	r2, #1
 8012450:	2100      	movs	r1, #0
 8012452:	483c      	ldr	r0, [pc, #240]	; (8012544 <RegionEU868NextChannel+0x124>)
 8012454:	f7f7 ffe8 	bl	800a428 <RegionCommonCountChannels>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d106      	bne.n	801246c <RegionEU868NextChannel+0x4c>
    { // Reactivate default channels
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801245e:	4b39      	ldr	r3, [pc, #228]	; (8012544 <RegionEU868NextChannel+0x124>)
 8012460:	881b      	ldrh	r3, [r3, #0]
 8012462:	f043 0307 	orr.w	r3, r3, #7
 8012466:	b29a      	uxth	r2, r3
 8012468:	4b36      	ldr	r3, [pc, #216]	; (8012544 <RegionEU868NextChannel+0x124>)
 801246a:	801a      	strh	r2, [r3, #0]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681c      	ldr	r4, [r3, #0]
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe f9ff 	bl	8010878 <TimerGetElapsedTime>
 801247a:	4603      	mov	r3, r0
 801247c:	429c      	cmp	r4, r3
 801247e:	d821      	bhi.n	80124c4 <RegionEU868NextChannel+0xa4>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	2200      	movs	r2, #0
 8012484:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, EU868_MAX_NB_BANDS );
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	7a58      	ldrb	r0, [r3, #9]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	7a99      	ldrb	r1, [r3, #10]
 801248e:	2305      	movs	r3, #5
 8012490:	4a2d      	ldr	r2, [pc, #180]	; (8012548 <RegionEU868NextChannel+0x128>)
 8012492:	f7f8 f834 	bl	800a4fe <RegionCommonUpdateBandTimeOff>
 8012496:	62b8      	str	r0, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	7a58      	ldrb	r0, [r3, #9]
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80124a2:	b2d9      	uxtb	r1, r3
 80124a4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80124a8:	9302      	str	r3, [sp, #8]
 80124aa:	f107 0314 	add.w	r3, r7, #20
 80124ae:	9301      	str	r3, [sp, #4]
 80124b0:	4b25      	ldr	r3, [pc, #148]	; (8012548 <RegionEU868NextChannel+0x128>)
 80124b2:	9300      	str	r3, [sp, #0]
 80124b4:	4b25      	ldr	r3, [pc, #148]	; (801254c <RegionEU868NextChannel+0x12c>)
 80124b6:	4a23      	ldr	r2, [pc, #140]	; (8012544 <RegionEU868NextChannel+0x124>)
 80124b8:	f7fe ffac 	bl	8011414 <CountNbOfEnabledChannels>
 80124bc:	4603      	mov	r3, r0
 80124be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80124c2:	e00f      	b.n	80124e4 <RegionEU868NextChannel+0xc4>
                                                      ChannelsMask, Channels,
                                                      Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 80124c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80124c8:	3301      	adds	r3, #1
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681c      	ldr	r4, [r3, #0]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe f9cd 	bl	8010878 <TimerGetElapsedTime>
 80124de:	4603      	mov	r3, r0
 80124e0:	1ae3      	subs	r3, r4, r3
 80124e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 80124e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d013      	beq.n	8012514 <RegionEU868NextChannel+0xf4>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80124ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124f0:	3b01      	subs	r3, #1
 80124f2:	4619      	mov	r1, r3
 80124f4:	2000      	movs	r0, #0
 80124f6:	f7fe fa87 	bl	8010a08 <randr>
 80124fa:	4603      	mov	r3, r0
 80124fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012500:	4413      	add	r3, r2
 8012502:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	701a      	strb	r2, [r3, #0]

        *time = 0;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2200      	movs	r2, #0
 801250e:	601a      	str	r2, [r3, #0]
        return true;
 8012510:	2301      	movs	r3, #1
 8012512:	e013      	b.n	801253c <RegionEU868NextChannel+0x11c>
    }
    else
    {
        if( delayTx > 0 )
 8012514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012518:	2b00      	cmp	r3, #0
 801251a:	d004      	beq.n	8012526 <RegionEU868NextChannel+0x106>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012520:	601a      	str	r2, [r3, #0]
            return true;
 8012522:	2301      	movs	r3, #1
 8012524:	e00a      	b.n	801253c <RegionEU868NextChannel+0x11c>
        }
        // Datarate not supported by any channel, restore defaults
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8012526:	4b07      	ldr	r3, [pc, #28]	; (8012544 <RegionEU868NextChannel+0x124>)
 8012528:	881b      	ldrh	r3, [r3, #0]
 801252a:	f043 0307 	orr.w	r3, r3, #7
 801252e:	b29a      	uxth	r2, r3
 8012530:	4b04      	ldr	r3, [pc, #16]	; (8012544 <RegionEU868NextChannel+0x124>)
 8012532:	801a      	strh	r2, [r3, #0]
        *time = 0;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	601a      	str	r2, [r3, #0]
        return false;
 801253a:	2300      	movs	r3, #0
    }
}
 801253c:	4618      	mov	r0, r3
 801253e:	3734      	adds	r7, #52	; 0x34
 8012540:	46bd      	mov	sp, r7
 8012542:	bd90      	pop	{r4, r7, pc}
 8012544:	2000097c 	.word	0x2000097c
 8012548:	200000a8 	.word	0x200000a8
 801254c:	200008bc 	.word	0x200008bc

08012550 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8012558:	2300      	movs	r3, #0
 801255a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801255c:	2300      	movs	r3, #0
 801255e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8012560:	2300      	movs	r3, #0
 8012562:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	791b      	ldrb	r3, [r3, #4]
 8012568:	737b      	strb	r3, [r7, #13]

    if( id >= EU868_MAX_NB_CHANNELS )
 801256a:	7b7b      	ldrb	r3, [r7, #13]
 801256c:	2b0f      	cmp	r3, #15
 801256e:	d901      	bls.n	8012574 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012570:	2303      	movs	r3, #3
 8012572:	e0aa      	b.n	80126ca <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	7a1b      	ldrb	r3, [r3, #8]
 801257a:	f343 0303 	sbfx	r3, r3, #0, #4
 801257e:	b25b      	sxtb	r3, r3
 8012580:	2207      	movs	r2, #7
 8012582:	2100      	movs	r1, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f7f7 fefe 	bl	800a386 <RegionCommonValueInRange>
 801258a:	4603      	mov	r3, r0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d101      	bne.n	8012594 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8012590:	2301      	movs	r3, #1
 8012592:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	7a1b      	ldrb	r3, [r3, #8]
 801259a:	f343 1303 	sbfx	r3, r3, #4, #4
 801259e:	b25b      	sxtb	r3, r3
 80125a0:	2207      	movs	r2, #7
 80125a2:	2100      	movs	r1, #0
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f7 feee 	bl	800a386 <RegionCommonValueInRange>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d101      	bne.n	80125b4 <RegionEU868ChannelAdd+0x64>
    {
        drInvalid = true;
 80125b0:	2301      	movs	r3, #1
 80125b2:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	7a1b      	ldrb	r3, [r3, #8]
 80125ba:	f343 0303 	sbfx	r3, r3, #0, #4
 80125be:	b25a      	sxtb	r2, r3
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	7a1b      	ldrb	r3, [r3, #8]
 80125c6:	f343 1303 	sbfx	r3, r3, #4, #4
 80125ca:	b25b      	sxtb	r3, r3
 80125cc:	429a      	cmp	r2, r3
 80125ce:	dd01      	ble.n	80125d4 <RegionEU868ChannelAdd+0x84>
    {
        drInvalid = true;
 80125d0:	2301      	movs	r3, #1
 80125d2:	73fb      	strb	r3, [r7, #15]
    }

    // Default channels don't accept all values
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80125d4:	7b7b      	ldrb	r3, [r7, #13]
 80125d6:	2b02      	cmp	r3, #2
 80125d8:	d828      	bhi.n	801262c <RegionEU868ChannelAdd+0xdc>
    {
        // Validate the datarate range for min: must be DR_0
        if( channelAdd->NewChannel->DrRange.Fields.Min > DR_0 )
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	7a1b      	ldrb	r3, [r3, #8]
 80125e0:	f343 0303 	sbfx	r3, r3, #0, #4
 80125e4:	b25b      	sxtb	r3, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	dd01      	ble.n	80125ee <RegionEU868ChannelAdd+0x9e>
        {
            drInvalid = true;
 80125ea:	2301      	movs	r3, #1
 80125ec:	73fb      	strb	r3, [r7, #15]
        }
        // Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
        if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE ) == false )
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	7a1b      	ldrb	r3, [r3, #8]
 80125f4:	f343 1303 	sbfx	r3, r3, #4, #4
 80125f8:	b25b      	sxtb	r3, r3
 80125fa:	2207      	movs	r2, #7
 80125fc:	2105      	movs	r1, #5
 80125fe:	4618      	mov	r0, r3
 8012600:	f7f7 fec1 	bl	800a386 <RegionCommonValueInRange>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d101      	bne.n	801260e <RegionEU868ChannelAdd+0xbe>
        {
            drInvalid = true;
 801260a:	2301      	movs	r3, #1
 801260c:	73fb      	strb	r3, [r7, #15]
        }
        // We are not allowed to change the frequency
        if( channelAdd->NewChannel->Frequency != Channels[id].Frequency )
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	6819      	ldr	r1, [r3, #0]
 8012614:	7b7a      	ldrb	r2, [r7, #13]
 8012616:	482f      	ldr	r0, [pc, #188]	; (80126d4 <RegionEU868ChannelAdd+0x184>)
 8012618:	4613      	mov	r3, r2
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	4413      	add	r3, r2
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	4403      	add	r3, r0
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4299      	cmp	r1, r3
 8012626:	d001      	beq.n	801262c <RegionEU868ChannelAdd+0xdc>
        {
            freqInvalid = true;
 8012628:	2301      	movs	r3, #1
 801262a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check frequency
    if( freqInvalid == false )
 801262c:	7bbb      	ldrb	r3, [r7, #14]
 801262e:	f083 0301 	eor.w	r3, r3, #1
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b00      	cmp	r3, #0
 8012636:	d010      	beq.n	801265a <RegionEU868ChannelAdd+0x10a>
    {
        if( VerifyTxFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f107 020c 	add.w	r2, r7, #12
 8012642:	4611      	mov	r1, r2
 8012644:	4618      	mov	r0, r3
 8012646:	f7fe fe6f 	bl	8011328 <VerifyTxFreq>
 801264a:	4603      	mov	r3, r0
 801264c:	f083 0301 	eor.w	r3, r3, #1
 8012650:	b2db      	uxtb	r3, r3
 8012652:	2b00      	cmp	r3, #0
 8012654:	d001      	beq.n	801265a <RegionEU868ChannelAdd+0x10a>
        {
            freqInvalid = true;
 8012656:	2301      	movs	r3, #1
 8012658:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801265a:	7bfb      	ldrb	r3, [r7, #15]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d004      	beq.n	801266a <RegionEU868ChannelAdd+0x11a>
 8012660:	7bbb      	ldrb	r3, [r7, #14]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d001      	beq.n	801266a <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8012666:	2306      	movs	r3, #6
 8012668:	e02f      	b.n	80126ca <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 801266a:	7bfb      	ldrb	r3, [r7, #15]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d001      	beq.n	8012674 <RegionEU868ChannelAdd+0x124>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8012670:	2305      	movs	r3, #5
 8012672:	e02a      	b.n	80126ca <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8012674:	7bbb      	ldrb	r3, [r7, #14]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <RegionEU868ChannelAdd+0x12e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801267a:	2304      	movs	r3, #4
 801267c:	e025      	b.n	80126ca <RegionEU868ChannelAdd+0x17a>
    }

    memcpy( &(Channels[id]), channelAdd->NewChannel, sizeof( Channels[id] ) );
 801267e:	7b7a      	ldrb	r2, [r7, #13]
 8012680:	4613      	mov	r3, r2
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	4413      	add	r3, r2
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	4a12      	ldr	r2, [pc, #72]	; (80126d4 <RegionEU868ChannelAdd+0x184>)
 801268a:	1898      	adds	r0, r3, r2
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	220c      	movs	r2, #12
 8012692:	4619      	mov	r1, r3
 8012694:	f000 f8fa 	bl	801288c <memcpy>
    Channels[id].Band = band;
 8012698:	7b7a      	ldrb	r2, [r7, #13]
 801269a:	7b38      	ldrb	r0, [r7, #12]
 801269c:	490d      	ldr	r1, [pc, #52]	; (80126d4 <RegionEU868ChannelAdd+0x184>)
 801269e:	4613      	mov	r3, r2
 80126a0:	005b      	lsls	r3, r3, #1
 80126a2:	4413      	add	r3, r2
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	440b      	add	r3, r1
 80126a8:	3309      	adds	r3, #9
 80126aa:	4602      	mov	r2, r0
 80126ac:	701a      	strb	r2, [r3, #0]
    ChannelsMask[0] |= ( 1 << id );
 80126ae:	4b0a      	ldr	r3, [pc, #40]	; (80126d8 <RegionEU868ChannelAdd+0x188>)
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	b21a      	sxth	r2, r3
 80126b4:	7b7b      	ldrb	r3, [r7, #13]
 80126b6:	2101      	movs	r1, #1
 80126b8:	fa01 f303 	lsl.w	r3, r1, r3
 80126bc:	b21b      	sxth	r3, r3
 80126be:	4313      	orrs	r3, r2
 80126c0:	b21b      	sxth	r3, r3
 80126c2:	b29a      	uxth	r2, r3
 80126c4:	4b04      	ldr	r3, [pc, #16]	; (80126d8 <RegionEU868ChannelAdd+0x188>)
 80126c6:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 80126c8:	2300      	movs	r3, #0
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3710      	adds	r7, #16
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	200008bc 	.word	0x200008bc
 80126d8:	2000097c 	.word	0x2000097c

080126dc <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b086      	sub	sp, #24
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	2b02      	cmp	r3, #2
 80126ee:	d801      	bhi.n	80126f4 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80126f0:	2300      	movs	r3, #0
 80126f2:	e012      	b.n	801271a <RegionEU868ChannelsRemove+0x3e>
    }

    // Remove the channel from the list of channels
    Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80126f4:	7dfa      	ldrb	r2, [r7, #23]
 80126f6:	490b      	ldr	r1, [pc, #44]	; (8012724 <RegionEU868ChannelsRemove+0x48>)
 80126f8:	4613      	mov	r3, r2
 80126fa:	005b      	lsls	r3, r3, #1
 80126fc:	4413      	add	r3, r2
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	440b      	add	r3, r1
 8012702:	461a      	mov	r2, r3
 8012704:	2300      	movs	r3, #0
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	6053      	str	r3, [r2, #4]
 801270a:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801270c:	7dfb      	ldrb	r3, [r7, #23]
 801270e:	2210      	movs	r2, #16
 8012710:	4619      	mov	r1, r3
 8012712:	4805      	ldr	r0, [pc, #20]	; (8012728 <RegionEU868ChannelsRemove+0x4c>)
 8012714:	f7f7 fe54 	bl	800a3c0 <RegionCommonChanDisable>
 8012718:	4603      	mov	r3, r0
}
 801271a:	4618      	mov	r0, r3
 801271c:	3718      	adds	r7, #24
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	200008bc 	.word	0x200008bc
 8012728:	2000097c 	.word	0x2000097c

0801272c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask );
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	4619      	mov	r1, r3
 8012740:	4a1c      	ldr	r2, [pc, #112]	; (80127b4 <RegionEU868SetContinuousWave+0x88>)
 8012742:	460b      	mov	r3, r1
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	440b      	add	r3, r1
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4413      	add	r3, r2
 801274c:	3309      	adds	r3, #9
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	4a19      	ldr	r2, [pc, #100]	; (80127b8 <RegionEU868SetContinuousWave+0x8c>)
 8012752:	011b      	lsls	r3, r3, #4
 8012754:	4413      	add	r3, r2
 8012756:	3302      	adds	r3, #2
 8012758:	f993 1000 	ldrsb.w	r1, [r3]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8012762:	4b16      	ldr	r3, [pc, #88]	; (80127bc <RegionEU868SetContinuousWave+0x90>)
 8012764:	f7fe fdc4 	bl	80112f0 <LimitTxPower>
 8012768:	4603      	mov	r3, r0
 801276a:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801276c:	2300      	movs	r3, #0
 801276e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	4619      	mov	r1, r3
 8012776:	4a0f      	ldr	r2, [pc, #60]	; (80127b4 <RegionEU868SetContinuousWave+0x88>)
 8012778:	460b      	mov	r3, r1
 801277a:	005b      	lsls	r3, r3, #1
 801277c:	440b      	add	r3, r1
 801277e:	009b      	lsls	r3, r3, #2
 8012780:	4413      	add	r3, r2
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6859      	ldr	r1, [r3, #4]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	689a      	ldr	r2, [r3, #8]
 801278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012792:	4618      	mov	r0, r3
 8012794:	f7f8 f894 	bl	800a8c0 <RegionCommonComputeTxPower>
 8012798:	4603      	mov	r3, r0
 801279a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801279c:	4b08      	ldr	r3, [pc, #32]	; (80127c0 <RegionEU868SetContinuousWave+0x94>)
 801279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	8992      	ldrh	r2, [r2, #12]
 80127a4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80127a8:	68b8      	ldr	r0, [r7, #8]
 80127aa:	4798      	blx	r3
}
 80127ac:	bf00      	nop
 80127ae:	3710      	adds	r7, #16
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	200008bc 	.word	0x200008bc
 80127b8:	200000a8 	.word	0x200000a8
 80127bc:	2000097c 	.word	0x2000097c
 80127c0:	080130d4 	.word	0x080130d4

080127c4 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80127c4:	b480      	push	{r7}
 80127c6:	b085      	sub	sp, #20
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	4603      	mov	r3, r0
 80127cc:	71fb      	strb	r3, [r7, #7]
 80127ce:	460b      	mov	r3, r1
 80127d0:	71bb      	strb	r3, [r7, #6]
 80127d2:	4613      	mov	r3, r2
 80127d4:	717b      	strb	r3, [r7, #5]
    int8_t datarate = dr - drOffset;
 80127d6:	79ba      	ldrb	r2, [r7, #6]
 80127d8:	797b      	ldrb	r3, [r7, #5]
 80127da:	1ad3      	subs	r3, r2, r3
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80127e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	da01      	bge.n	80127ec <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3714      	adds	r7, #20
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bc80      	pop	{r7}
 80127f6:	4770      	bx	lr

080127f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80127f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80127fa:	e003      	b.n	8012804 <LoopCopyDataInit>

080127fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80127fc:	4b0b      	ldr	r3, [pc, #44]	; (801282c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80127fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8012800:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8012802:	3104      	adds	r1, #4

08012804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8012804:	480a      	ldr	r0, [pc, #40]	; (8012830 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8012806:	4b0b      	ldr	r3, [pc, #44]	; (8012834 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8012808:	1842      	adds	r2, r0, r1
  cmp r2, r3
 801280a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 801280c:	d3f6      	bcc.n	80127fc <CopyDataInit>
  ldr r2, =_sbss
 801280e:	4a0a      	ldr	r2, [pc, #40]	; (8012838 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8012810:	e002      	b.n	8012818 <LoopFillZerobss>

08012812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8012812:	2300      	movs	r3, #0
  str r3, [r2], #4
 8012814:	f842 3b04 	str.w	r3, [r2], #4

08012818 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8012818:	4b08      	ldr	r3, [pc, #32]	; (801283c <LoopFillZerobss+0x24>)
  cmp r2, r3
 801281a:	429a      	cmp	r2, r3
  bcc FillZerobss
 801281c:	d3f9      	bcc.n	8012812 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801281e:	f7fd fdb9 	bl	8010394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012822:	f000 f80f 	bl	8012844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8012826:	f7f9 fec7 	bl	800c5b8 <main>
  bx lr
 801282a:	4770      	bx	lr
  ldr r3, =_sidata
 801282c:	08013288 	.word	0x08013288
  ldr r0, =_sdata
 8012830:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8012834:	200000f8 	.word	0x200000f8
  ldr r2, =_sbss
 8012838:	200000f8 	.word	0x200000f8
  ldr r3, = _ebss
 801283c:	20001498 	.word	0x20001498

08012840 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8012840:	e7fe      	b.n	8012840 <ADC1_IRQHandler>
	...

08012844 <__libc_init_array>:
 8012844:	b570      	push	{r4, r5, r6, lr}
 8012846:	2600      	movs	r6, #0
 8012848:	4d0c      	ldr	r5, [pc, #48]	; (801287c <__libc_init_array+0x38>)
 801284a:	4c0d      	ldr	r4, [pc, #52]	; (8012880 <__libc_init_array+0x3c>)
 801284c:	1b64      	subs	r4, r4, r5
 801284e:	10a4      	asrs	r4, r4, #2
 8012850:	42a6      	cmp	r6, r4
 8012852:	d109      	bne.n	8012868 <__libc_init_array+0x24>
 8012854:	f000 f978 	bl	8012b48 <_init>
 8012858:	2600      	movs	r6, #0
 801285a:	4d0a      	ldr	r5, [pc, #40]	; (8012884 <__libc_init_array+0x40>)
 801285c:	4c0a      	ldr	r4, [pc, #40]	; (8012888 <__libc_init_array+0x44>)
 801285e:	1b64      	subs	r4, r4, r5
 8012860:	10a4      	asrs	r4, r4, #2
 8012862:	42a6      	cmp	r6, r4
 8012864:	d105      	bne.n	8012872 <__libc_init_array+0x2e>
 8012866:	bd70      	pop	{r4, r5, r6, pc}
 8012868:	f855 3b04 	ldr.w	r3, [r5], #4
 801286c:	4798      	blx	r3
 801286e:	3601      	adds	r6, #1
 8012870:	e7ee      	b.n	8012850 <__libc_init_array+0xc>
 8012872:	f855 3b04 	ldr.w	r3, [r5], #4
 8012876:	4798      	blx	r3
 8012878:	3601      	adds	r6, #1
 801287a:	e7f2      	b.n	8012862 <__libc_init_array+0x1e>
 801287c:	08013280 	.word	0x08013280
 8012880:	08013280 	.word	0x08013280
 8012884:	08013280 	.word	0x08013280
 8012888:	08013284 	.word	0x08013284

0801288c <memcpy>:
 801288c:	440a      	add	r2, r1
 801288e:	4291      	cmp	r1, r2
 8012890:	f100 33ff 	add.w	r3, r0, #4294967295
 8012894:	d100      	bne.n	8012898 <memcpy+0xc>
 8012896:	4770      	bx	lr
 8012898:	b510      	push	{r4, lr}
 801289a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801289e:	4291      	cmp	r1, r2
 80128a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128a4:	d1f9      	bne.n	801289a <memcpy+0xe>
 80128a6:	bd10      	pop	{r4, pc}

080128a8 <memset>:
 80128a8:	4603      	mov	r3, r0
 80128aa:	4402      	add	r2, r0
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d100      	bne.n	80128b2 <memset+0xa>
 80128b0:	4770      	bx	lr
 80128b2:	f803 1b01 	strb.w	r1, [r3], #1
 80128b6:	e7f9      	b.n	80128ac <memset+0x4>

080128b8 <ceil>:
 80128b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80128c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80128c4:	2e13      	cmp	r6, #19
 80128c6:	4602      	mov	r2, r0
 80128c8:	460b      	mov	r3, r1
 80128ca:	4607      	mov	r7, r0
 80128cc:	460c      	mov	r4, r1
 80128ce:	4605      	mov	r5, r0
 80128d0:	dc31      	bgt.n	8012936 <ceil+0x7e>
 80128d2:	2e00      	cmp	r6, #0
 80128d4:	da12      	bge.n	80128fc <ceil+0x44>
 80128d6:	a334      	add	r3, pc, #208	; (adr r3, 80129a8 <ceil+0xf0>)
 80128d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128dc:	f7ed fc56 	bl	800018c <__adddf3>
 80128e0:	2200      	movs	r2, #0
 80128e2:	2300      	movs	r3, #0
 80128e4:	f7ee f898 	bl	8000a18 <__aeabi_dcmpgt>
 80128e8:	b128      	cbz	r0, 80128f6 <ceil+0x3e>
 80128ea:	2c00      	cmp	r4, #0
 80128ec:	db56      	blt.n	801299c <ceil+0xe4>
 80128ee:	433c      	orrs	r4, r7
 80128f0:	d058      	beq.n	80129a4 <ceil+0xec>
 80128f2:	2500      	movs	r5, #0
 80128f4:	4c2e      	ldr	r4, [pc, #184]	; (80129b0 <ceil+0xf8>)
 80128f6:	4623      	mov	r3, r4
 80128f8:	462f      	mov	r7, r5
 80128fa:	e025      	b.n	8012948 <ceil+0x90>
 80128fc:	4a2d      	ldr	r2, [pc, #180]	; (80129b4 <ceil+0xfc>)
 80128fe:	fa42 f806 	asr.w	r8, r2, r6
 8012902:	ea01 0208 	and.w	r2, r1, r8
 8012906:	4302      	orrs	r2, r0
 8012908:	d01e      	beq.n	8012948 <ceil+0x90>
 801290a:	a327      	add	r3, pc, #156	; (adr r3, 80129a8 <ceil+0xf0>)
 801290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012910:	f7ed fc3c 	bl	800018c <__adddf3>
 8012914:	2200      	movs	r2, #0
 8012916:	2300      	movs	r3, #0
 8012918:	f7ee f87e 	bl	8000a18 <__aeabi_dcmpgt>
 801291c:	2800      	cmp	r0, #0
 801291e:	d0ea      	beq.n	80128f6 <ceil+0x3e>
 8012920:	2c00      	cmp	r4, #0
 8012922:	bfc2      	ittt	gt
 8012924:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8012928:	fa43 f606 	asrgt.w	r6, r3, r6
 801292c:	19a4      	addgt	r4, r4, r6
 801292e:	2500      	movs	r5, #0
 8012930:	ea24 0408 	bic.w	r4, r4, r8
 8012934:	e7df      	b.n	80128f6 <ceil+0x3e>
 8012936:	2e33      	cmp	r6, #51	; 0x33
 8012938:	dd0a      	ble.n	8012950 <ceil+0x98>
 801293a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801293e:	d103      	bne.n	8012948 <ceil+0x90>
 8012940:	f7ed fc24 	bl	800018c <__adddf3>
 8012944:	4607      	mov	r7, r0
 8012946:	460b      	mov	r3, r1
 8012948:	4638      	mov	r0, r7
 801294a:	4619      	mov	r1, r3
 801294c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012950:	f04f 32ff 	mov.w	r2, #4294967295
 8012954:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012958:	fa22 f808 	lsr.w	r8, r2, r8
 801295c:	ea18 0f00 	tst.w	r8, r0
 8012960:	d0f2      	beq.n	8012948 <ceil+0x90>
 8012962:	a311      	add	r3, pc, #68	; (adr r3, 80129a8 <ceil+0xf0>)
 8012964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012968:	f7ed fc10 	bl	800018c <__adddf3>
 801296c:	2200      	movs	r2, #0
 801296e:	2300      	movs	r3, #0
 8012970:	f7ee f852 	bl	8000a18 <__aeabi_dcmpgt>
 8012974:	2800      	cmp	r0, #0
 8012976:	d0be      	beq.n	80128f6 <ceil+0x3e>
 8012978:	2c00      	cmp	r4, #0
 801297a:	dd02      	ble.n	8012982 <ceil+0xca>
 801297c:	2e14      	cmp	r6, #20
 801297e:	d103      	bne.n	8012988 <ceil+0xd0>
 8012980:	3401      	adds	r4, #1
 8012982:	ea25 0508 	bic.w	r5, r5, r8
 8012986:	e7b6      	b.n	80128f6 <ceil+0x3e>
 8012988:	2301      	movs	r3, #1
 801298a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801298e:	fa03 f606 	lsl.w	r6, r3, r6
 8012992:	4435      	add	r5, r6
 8012994:	42bd      	cmp	r5, r7
 8012996:	bf38      	it	cc
 8012998:	18e4      	addcc	r4, r4, r3
 801299a:	e7f2      	b.n	8012982 <ceil+0xca>
 801299c:	2500      	movs	r5, #0
 801299e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80129a2:	e7a8      	b.n	80128f6 <ceil+0x3e>
 80129a4:	4625      	mov	r5, r4
 80129a6:	e7a6      	b.n	80128f6 <ceil+0x3e>
 80129a8:	8800759c 	.word	0x8800759c
 80129ac:	7e37e43c 	.word	0x7e37e43c
 80129b0:	3ff00000 	.word	0x3ff00000
 80129b4:	000fffff 	.word	0x000fffff

080129b8 <floor>:
 80129b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129bc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80129c0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80129c4:	2e13      	cmp	r6, #19
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	4607      	mov	r7, r0
 80129cc:	460c      	mov	r4, r1
 80129ce:	4605      	mov	r5, r0
 80129d0:	dc34      	bgt.n	8012a3c <floor+0x84>
 80129d2:	2e00      	cmp	r6, #0
 80129d4:	da15      	bge.n	8012a02 <floor+0x4a>
 80129d6:	a334      	add	r3, pc, #208	; (adr r3, 8012aa8 <floor+0xf0>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	f7ed fbd6 	bl	800018c <__adddf3>
 80129e0:	2200      	movs	r2, #0
 80129e2:	2300      	movs	r3, #0
 80129e4:	f7ee f818 	bl	8000a18 <__aeabi_dcmpgt>
 80129e8:	b140      	cbz	r0, 80129fc <floor+0x44>
 80129ea:	2c00      	cmp	r4, #0
 80129ec:	da59      	bge.n	8012aa2 <floor+0xea>
 80129ee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80129f2:	ea57 0503 	orrs.w	r5, r7, r3
 80129f6:	d001      	beq.n	80129fc <floor+0x44>
 80129f8:	2500      	movs	r5, #0
 80129fa:	4c2d      	ldr	r4, [pc, #180]	; (8012ab0 <floor+0xf8>)
 80129fc:	4623      	mov	r3, r4
 80129fe:	462f      	mov	r7, r5
 8012a00:	e025      	b.n	8012a4e <floor+0x96>
 8012a02:	4a2c      	ldr	r2, [pc, #176]	; (8012ab4 <floor+0xfc>)
 8012a04:	fa42 f806 	asr.w	r8, r2, r6
 8012a08:	ea01 0208 	and.w	r2, r1, r8
 8012a0c:	4302      	orrs	r2, r0
 8012a0e:	d01e      	beq.n	8012a4e <floor+0x96>
 8012a10:	a325      	add	r3, pc, #148	; (adr r3, 8012aa8 <floor+0xf0>)
 8012a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a16:	f7ed fbb9 	bl	800018c <__adddf3>
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	f7ed fffb 	bl	8000a18 <__aeabi_dcmpgt>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d0ea      	beq.n	80129fc <floor+0x44>
 8012a26:	2c00      	cmp	r4, #0
 8012a28:	bfbe      	ittt	lt
 8012a2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012a2e:	fa43 f606 	asrlt.w	r6, r3, r6
 8012a32:	19a4      	addlt	r4, r4, r6
 8012a34:	2500      	movs	r5, #0
 8012a36:	ea24 0408 	bic.w	r4, r4, r8
 8012a3a:	e7df      	b.n	80129fc <floor+0x44>
 8012a3c:	2e33      	cmp	r6, #51	; 0x33
 8012a3e:	dd0a      	ble.n	8012a56 <floor+0x9e>
 8012a40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012a44:	d103      	bne.n	8012a4e <floor+0x96>
 8012a46:	f7ed fba1 	bl	800018c <__adddf3>
 8012a4a:	4607      	mov	r7, r0
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	4638      	mov	r0, r7
 8012a50:	4619      	mov	r1, r3
 8012a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a56:	f04f 32ff 	mov.w	r2, #4294967295
 8012a5a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012a5e:	fa22 f808 	lsr.w	r8, r2, r8
 8012a62:	ea18 0f00 	tst.w	r8, r0
 8012a66:	d0f2      	beq.n	8012a4e <floor+0x96>
 8012a68:	a30f      	add	r3, pc, #60	; (adr r3, 8012aa8 <floor+0xf0>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fb8d 	bl	800018c <__adddf3>
 8012a72:	2200      	movs	r2, #0
 8012a74:	2300      	movs	r3, #0
 8012a76:	f7ed ffcf 	bl	8000a18 <__aeabi_dcmpgt>
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	d0be      	beq.n	80129fc <floor+0x44>
 8012a7e:	2c00      	cmp	r4, #0
 8012a80:	da02      	bge.n	8012a88 <floor+0xd0>
 8012a82:	2e14      	cmp	r6, #20
 8012a84:	d103      	bne.n	8012a8e <floor+0xd6>
 8012a86:	3401      	adds	r4, #1
 8012a88:	ea25 0508 	bic.w	r5, r5, r8
 8012a8c:	e7b6      	b.n	80129fc <floor+0x44>
 8012a8e:	2301      	movs	r3, #1
 8012a90:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a94:	fa03 f606 	lsl.w	r6, r3, r6
 8012a98:	4435      	add	r5, r6
 8012a9a:	42bd      	cmp	r5, r7
 8012a9c:	bf38      	it	cc
 8012a9e:	18e4      	addcc	r4, r4, r3
 8012aa0:	e7f2      	b.n	8012a88 <floor+0xd0>
 8012aa2:	2500      	movs	r5, #0
 8012aa4:	462c      	mov	r4, r5
 8012aa6:	e7a9      	b.n	80129fc <floor+0x44>
 8012aa8:	8800759c 	.word	0x8800759c
 8012aac:	7e37e43c 	.word	0x7e37e43c
 8012ab0:	bff00000 	.word	0xbff00000
 8012ab4:	000fffff 	.word	0x000fffff

08012ab8 <round>:
 8012ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aba:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012abe:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 8012ac2:	2c13      	cmp	r4, #19
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	4606      	mov	r6, r0
 8012aca:	460d      	mov	r5, r1
 8012acc:	dc19      	bgt.n	8012b02 <round+0x4a>
 8012ace:	2c00      	cmp	r4, #0
 8012ad0:	da09      	bge.n	8012ae6 <round+0x2e>
 8012ad2:	3401      	adds	r4, #1
 8012ad4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012ad8:	d103      	bne.n	8012ae2 <round+0x2a>
 8012ada:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012ade:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	e02a      	b.n	8012b3c <round+0x84>
 8012ae6:	4917      	ldr	r1, [pc, #92]	; (8012b44 <round+0x8c>)
 8012ae8:	4121      	asrs	r1, r4
 8012aea:	ea03 0001 	and.w	r0, r3, r1
 8012aee:	4302      	orrs	r2, r0
 8012af0:	d010      	beq.n	8012b14 <round+0x5c>
 8012af2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8012af6:	fa42 f404 	asr.w	r4, r2, r4
 8012afa:	4423      	add	r3, r4
 8012afc:	ea23 0301 	bic.w	r3, r3, r1
 8012b00:	e7ef      	b.n	8012ae2 <round+0x2a>
 8012b02:	2c33      	cmp	r4, #51	; 0x33
 8012b04:	dd09      	ble.n	8012b1a <round+0x62>
 8012b06:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012b0a:	d103      	bne.n	8012b14 <round+0x5c>
 8012b0c:	f7ed fb3e 	bl	800018c <__adddf3>
 8012b10:	4606      	mov	r6, r0
 8012b12:	460d      	mov	r5, r1
 8012b14:	4630      	mov	r0, r6
 8012b16:	4629      	mov	r1, r5
 8012b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012b22:	40f8      	lsrs	r0, r7
 8012b24:	4202      	tst	r2, r0
 8012b26:	d0f5      	beq.n	8012b14 <round+0x5c>
 8012b28:	2101      	movs	r1, #1
 8012b2a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012b2e:	fa01 f404 	lsl.w	r4, r1, r4
 8012b32:	1912      	adds	r2, r2, r4
 8012b34:	bf28      	it	cs
 8012b36:	185b      	addcs	r3, r3, r1
 8012b38:	ea22 0200 	bic.w	r2, r2, r0
 8012b3c:	4619      	mov	r1, r3
 8012b3e:	4610      	mov	r0, r2
 8012b40:	e7e6      	b.n	8012b10 <round+0x58>
 8012b42:	bf00      	nop
 8012b44:	000fffff 	.word	0x000fffff

08012b48 <_init>:
 8012b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b4a:	bf00      	nop
 8012b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b4e:	bc08      	pop	{r3}
 8012b50:	469e      	mov	lr, r3
 8012b52:	4770      	bx	lr

08012b54 <_fini>:
 8012b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b56:	bf00      	nop
 8012b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b5a:	bc08      	pop	{r3}
 8012b5c:	469e      	mov	lr, r3
 8012b5e:	4770      	bx	lr
