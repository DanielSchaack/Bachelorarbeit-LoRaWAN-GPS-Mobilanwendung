
LoRa_Node_151_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120c8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08012208  08012208  00022208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801299c  0801299c  000300f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801299c  0801299c  0002299c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129a4  080129a4  000300f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129a4  080129a4  000229a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129a8  080129a8  000229a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080129ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  200000f4  08012aa0  000300f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e0  08012aa0  000313e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003cb7a  00000000  00000000  0003011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006174  00000000  00000000  0006cc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00072e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00074678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5bb  00000000  00000000  00075cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021175  00000000  00000000  00095293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a18e8  00000000  00000000  000b6408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157cf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006500  00000000  00000000  00157d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f4 	.word	0x200000f4
 800015c:	00000000 	.word	0x00000000
 8000160:	080121f0 	.word	0x080121f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f8 	.word	0x200000f8
 800017c:	080121f0 	.word	0x080121f0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	bf28      	it	cs
 8000b78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b7c:	d2ed      	bcs.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_fmul>:
 8000cd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cdc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce0:	bf1e      	ittt	ne
 8000ce2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce6:	ea92 0f0c 	teqne	r2, ip
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d06f      	beq.n	8000dd0 <__aeabi_fmul+0xf8>
 8000cf0:	441a      	add	r2, r3
 8000cf2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf6:	0240      	lsls	r0, r0, #9
 8000cf8:	bf18      	it	ne
 8000cfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfe:	d01e      	beq.n	8000d3e <__aeabi_fmul+0x66>
 8000d00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d18:	bf3e      	ittt	cc
 8000d1a:	0049      	lslcc	r1, r1, #1
 8000d1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d20:	005b      	lslcc	r3, r3, #1
 8000d22:	ea40 0001 	orr.w	r0, r0, r1
 8000d26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d2a:	2afd      	cmp	r2, #253	; 0xfd
 8000d2c:	d81d      	bhi.n	8000d6a <__aeabi_fmul+0x92>
 8000d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	4770      	bx	lr
 8000d3e:	f090 0f00 	teq	r0, #0
 8000d42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d46:	bf08      	it	eq
 8000d48:	0249      	lsleq	r1, r1, #9
 8000d4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d52:	3a7f      	subs	r2, #127	; 0x7f
 8000d54:	bfc2      	ittt	gt
 8000d56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5e:	4770      	bxgt	lr
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	dc5d      	bgt.n	8000e28 <__aeabi_fmul+0x150>
 8000d6c:	f112 0f19 	cmn.w	r2, #25
 8000d70:	bfdc      	itt	le
 8000d72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d76:	4770      	bxle	lr
 8000d78:	f1c2 0200 	rsb	r2, r2, #0
 8000d7c:	0041      	lsls	r1, r0, #1
 8000d7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d82:	f1c2 0220 	rsb	r2, r2, #32
 8000d86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8e:	f140 0000 	adc.w	r0, r0, #0
 8000d92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d96:	bf08      	it	eq
 8000d98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d9c:	4770      	bx	lr
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da6:	bf02      	ittt	eq
 8000da8:	0040      	lsleq	r0, r0, #1
 8000daa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dae:	3a01      	subeq	r2, #1
 8000db0:	d0f9      	beq.n	8000da6 <__aeabi_fmul+0xce>
 8000db2:	ea40 000c 	orr.w	r0, r0, ip
 8000db6:	f093 0f00 	teq	r3, #0
 8000dba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dbe:	bf02      	ittt	eq
 8000dc0:	0049      	lsleq	r1, r1, #1
 8000dc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc6:	3b01      	subeq	r3, #1
 8000dc8:	d0f9      	beq.n	8000dbe <__aeabi_fmul+0xe6>
 8000dca:	ea41 010c 	orr.w	r1, r1, ip
 8000dce:	e78f      	b.n	8000cf0 <__aeabi_fmul+0x18>
 8000dd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	bf18      	it	ne
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d00a      	beq.n	8000df6 <__aeabi_fmul+0x11e>
 8000de0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de4:	bf18      	it	ne
 8000de6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	d1d8      	bne.n	8000d9e <__aeabi_fmul+0xc6>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	4770      	bx	lr
 8000df6:	f090 0f00 	teq	r0, #0
 8000dfa:	bf17      	itett	ne
 8000dfc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e00:	4608      	moveq	r0, r1
 8000e02:	f091 0f00 	teqne	r1, #0
 8000e06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e0a:	d014      	beq.n	8000e36 <__aeabi_fmul+0x15e>
 8000e0c:	ea92 0f0c 	teq	r2, ip
 8000e10:	d101      	bne.n	8000e16 <__aeabi_fmul+0x13e>
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	d10f      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e16:	ea93 0f0c 	teq	r3, ip
 8000e1a:	d103      	bne.n	8000e24 <__aeabi_fmul+0x14c>
 8000e1c:	024b      	lsls	r3, r1, #9
 8000e1e:	bf18      	it	ne
 8000e20:	4608      	movne	r0, r1
 8000e22:	d108      	bne.n	8000e36 <__aeabi_fmul+0x15e>
 8000e24:	ea80 0001 	eor.w	r0, r0, r1
 8000e28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e34:	4770      	bx	lr
 8000e36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3e:	4770      	bx	lr

08000e40 <__aeabi_fdiv>:
 8000e40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e48:	bf1e      	ittt	ne
 8000e4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4e:	ea92 0f0c 	teqne	r2, ip
 8000e52:	ea93 0f0c 	teqne	r3, ip
 8000e56:	d069      	beq.n	8000f2c <__aeabi_fdiv+0xec>
 8000e58:	eba2 0203 	sub.w	r2, r2, r3
 8000e5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e66:	d037      	beq.n	8000ed8 <__aeabi_fdiv+0x98>
 8000e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf38      	it	cc
 8000e7c:	005b      	lslcc	r3, r3, #1
 8000e7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e86:	428b      	cmp	r3, r1
 8000e88:	bf24      	itt	cs
 8000e8a:	1a5b      	subcs	r3, r3, r1
 8000e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e94:	bf24      	itt	cs
 8000e96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ea2:	bf24      	itt	cs
 8000ea4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	bf18      	it	ne
 8000ebe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ec2:	d1e0      	bne.n	8000e86 <__aeabi_fdiv+0x46>
 8000ec4:	2afd      	cmp	r2, #253	; 0xfd
 8000ec6:	f63f af50 	bhi.w	8000d6a <__aeabi_fmul+0x92>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed0:	bf08      	it	eq
 8000ed2:	f020 0001 	biceq.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000edc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee0:	327f      	adds	r2, #127	; 0x7f
 8000ee2:	bfc2      	ittt	gt
 8000ee4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eec:	4770      	bxgt	lr
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef2:	f04f 0300 	mov.w	r3, #0
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	e737      	b.n	8000d6a <__aeabi_fmul+0x92>
 8000efa:	f092 0f00 	teq	r2, #0
 8000efe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0040      	lsleq	r0, r0, #1
 8000f06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f0a:	3a01      	subeq	r2, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fdiv+0xc2>
 8000f0e:	ea40 000c 	orr.w	r0, r0, ip
 8000f12:	f093 0f00 	teq	r3, #0
 8000f16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f1a:	bf02      	ittt	eq
 8000f1c:	0049      	lsleq	r1, r1, #1
 8000f1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f22:	3b01      	subeq	r3, #1
 8000f24:	d0f9      	beq.n	8000f1a <__aeabi_fdiv+0xda>
 8000f26:	ea41 010c 	orr.w	r1, r1, ip
 8000f2a:	e795      	b.n	8000e58 <__aeabi_fdiv+0x18>
 8000f2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f30:	ea92 0f0c 	teq	r2, ip
 8000f34:	d108      	bne.n	8000f48 <__aeabi_fdiv+0x108>
 8000f36:	0242      	lsls	r2, r0, #9
 8000f38:	f47f af7d 	bne.w	8000e36 <__aeabi_fmul+0x15e>
 8000f3c:	ea93 0f0c 	teq	r3, ip
 8000f40:	f47f af70 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e776      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	d104      	bne.n	8000f58 <__aeabi_fdiv+0x118>
 8000f4e:	024b      	lsls	r3, r1, #9
 8000f50:	f43f af4c 	beq.w	8000dec <__aeabi_fmul+0x114>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e76e      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f5c:	bf18      	it	ne
 8000f5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f62:	d1ca      	bne.n	8000efa <__aeabi_fdiv+0xba>
 8000f64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f68:	f47f af5c 	bne.w	8000e24 <__aeabi_fmul+0x14c>
 8000f6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f70:	f47f af3c 	bne.w	8000dec <__aeabi_fmul+0x114>
 8000f74:	e75f      	b.n	8000e36 <__aeabi_fmul+0x15e>
 8000f76:	bf00      	nop

08000f78 <__aeabi_uldivmod>:
 8000f78:	b953      	cbnz	r3, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7a:	b94a      	cbnz	r2, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7c:	2900      	cmp	r1, #0
 8000f7e:	bf08      	it	eq
 8000f80:	2800      	cmpeq	r0, #0
 8000f82:	bf1c      	itt	ne
 8000f84:	f04f 31ff 	movne.w	r1, #4294967295
 8000f88:	f04f 30ff 	movne.w	r0, #4294967295
 8000f8c:	f000 b96e 	b.w	800126c <__aeabi_idiv0>
 8000f90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f98:	f000 f806 	bl	8000fa8 <__udivmoddi4>
 8000f9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa4:	b004      	add	sp, #16
 8000fa6:	4770      	bx	lr

08000fa8 <__udivmoddi4>:
 8000fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fac:	9e08      	ldr	r6, [sp, #32]
 8000fae:	460d      	mov	r5, r1
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	468e      	mov	lr, r1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f040 8083 	bne.w	80010c0 <__udivmoddi4+0x118>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	4617      	mov	r7, r2
 8000fbe:	d947      	bls.n	8001050 <__udivmoddi4+0xa8>
 8000fc0:	fab2 f382 	clz	r3, r2
 8000fc4:	b14b      	cbz	r3, 8000fda <__udivmoddi4+0x32>
 8000fc6:	f1c3 0120 	rsb	r1, r3, #32
 8000fca:	fa05 fe03 	lsl.w	lr, r5, r3
 8000fce:	fa20 f101 	lsr.w	r1, r0, r1
 8000fd2:	409f      	lsls	r7, r3
 8000fd4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000fde:	fbbe fcf8 	udiv	ip, lr, r8
 8000fe2:	fa1f f987 	uxth.w	r9, r7
 8000fe6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000fea:	fb0c f009 	mul.w	r0, ip, r9
 8000fee:	0c21      	lsrs	r1, r4, #16
 8000ff0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000ff4:	4290      	cmp	r0, r2
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x66>
 8000ff8:	18ba      	adds	r2, r7, r2
 8000ffa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000ffe:	f080 8118 	bcs.w	8001232 <__udivmoddi4+0x28a>
 8001002:	4290      	cmp	r0, r2
 8001004:	f240 8115 	bls.w	8001232 <__udivmoddi4+0x28a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	443a      	add	r2, r7
 800100e:	1a12      	subs	r2, r2, r0
 8001010:	fbb2 f0f8 	udiv	r0, r2, r8
 8001014:	fb08 2210 	mls	r2, r8, r0, r2
 8001018:	fb00 f109 	mul.w	r1, r0, r9
 800101c:	b2a4      	uxth	r4, r4
 800101e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001022:	42a1      	cmp	r1, r4
 8001024:	d909      	bls.n	800103a <__udivmoddi4+0x92>
 8001026:	193c      	adds	r4, r7, r4
 8001028:	f100 32ff 	add.w	r2, r0, #4294967295
 800102c:	f080 8103 	bcs.w	8001236 <__udivmoddi4+0x28e>
 8001030:	42a1      	cmp	r1, r4
 8001032:	f240 8100 	bls.w	8001236 <__udivmoddi4+0x28e>
 8001036:	3802      	subs	r0, #2
 8001038:	443c      	add	r4, r7
 800103a:	1a64      	subs	r4, r4, r1
 800103c:	2100      	movs	r1, #0
 800103e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001042:	b11e      	cbz	r6, 800104c <__udivmoddi4+0xa4>
 8001044:	2200      	movs	r2, #0
 8001046:	40dc      	lsrs	r4, r3
 8001048:	e9c6 4200 	strd	r4, r2, [r6]
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	b902      	cbnz	r2, 8001054 <__udivmoddi4+0xac>
 8001052:	deff      	udf	#255	; 0xff
 8001054:	fab2 f382 	clz	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d14f      	bne.n	80010fc <__udivmoddi4+0x154>
 800105c:	1a8d      	subs	r5, r1, r2
 800105e:	2101      	movs	r1, #1
 8001060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001064:	fa1f f882 	uxth.w	r8, r2
 8001068:	fbb5 fcfe 	udiv	ip, r5, lr
 800106c:	fb0e 551c 	mls	r5, lr, ip, r5
 8001070:	fb08 f00c 	mul.w	r0, r8, ip
 8001074:	0c22      	lsrs	r2, r4, #16
 8001076:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800107a:	42a8      	cmp	r0, r5
 800107c:	d907      	bls.n	800108e <__udivmoddi4+0xe6>
 800107e:	197d      	adds	r5, r7, r5
 8001080:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001084:	d202      	bcs.n	800108c <__udivmoddi4+0xe4>
 8001086:	42a8      	cmp	r0, r5
 8001088:	f200 80e9 	bhi.w	800125e <__udivmoddi4+0x2b6>
 800108c:	4694      	mov	ip, r2
 800108e:	1a2d      	subs	r5, r5, r0
 8001090:	fbb5 f0fe 	udiv	r0, r5, lr
 8001094:	fb0e 5510 	mls	r5, lr, r0, r5
 8001098:	fb08 f800 	mul.w	r8, r8, r0
 800109c:	b2a4      	uxth	r4, r4
 800109e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010a2:	45a0      	cmp	r8, r4
 80010a4:	d907      	bls.n	80010b6 <__udivmoddi4+0x10e>
 80010a6:	193c      	adds	r4, r7, r4
 80010a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80010ac:	d202      	bcs.n	80010b4 <__udivmoddi4+0x10c>
 80010ae:	45a0      	cmp	r8, r4
 80010b0:	f200 80d9 	bhi.w	8001266 <__udivmoddi4+0x2be>
 80010b4:	4610      	mov	r0, r2
 80010b6:	eba4 0408 	sub.w	r4, r4, r8
 80010ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010be:	e7c0      	b.n	8001042 <__udivmoddi4+0x9a>
 80010c0:	428b      	cmp	r3, r1
 80010c2:	d908      	bls.n	80010d6 <__udivmoddi4+0x12e>
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	f000 80b1 	beq.w	800122c <__udivmoddi4+0x284>
 80010ca:	2100      	movs	r1, #0
 80010cc:	e9c6 0500 	strd	r0, r5, [r6]
 80010d0:	4608      	mov	r0, r1
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d14b      	bne.n	8001176 <__udivmoddi4+0x1ce>
 80010de:	42ab      	cmp	r3, r5
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0x140>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 80b9 	bhi.w	800125a <__udivmoddi4+0x2b2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb65 0303 	sbc.w	r3, r5, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	469e      	mov	lr, r3
 80010f2:	2e00      	cmp	r6, #0
 80010f4:	d0aa      	beq.n	800104c <__udivmoddi4+0xa4>
 80010f6:	e9c6 4e00 	strd	r4, lr, [r6]
 80010fa:	e7a7      	b.n	800104c <__udivmoddi4+0xa4>
 80010fc:	409f      	lsls	r7, r3
 80010fe:	f1c3 0220 	rsb	r2, r3, #32
 8001102:	40d1      	lsrs	r1, r2
 8001104:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001108:	fbb1 f0fe 	udiv	r0, r1, lr
 800110c:	fa1f f887 	uxth.w	r8, r7
 8001110:	fb0e 1110 	mls	r1, lr, r0, r1
 8001114:	fa24 f202 	lsr.w	r2, r4, r2
 8001118:	409d      	lsls	r5, r3
 800111a:	fb00 fc08 	mul.w	ip, r0, r8
 800111e:	432a      	orrs	r2, r5
 8001120:	0c15      	lsrs	r5, r2, #16
 8001122:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001126:	45ac      	cmp	ip, r5
 8001128:	fa04 f403 	lsl.w	r4, r4, r3
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0x19a>
 800112e:	197d      	adds	r5, r7, r5
 8001130:	f100 31ff 	add.w	r1, r0, #4294967295
 8001134:	f080 808f 	bcs.w	8001256 <__udivmoddi4+0x2ae>
 8001138:	45ac      	cmp	ip, r5
 800113a:	f240 808c 	bls.w	8001256 <__udivmoddi4+0x2ae>
 800113e:	3802      	subs	r0, #2
 8001140:	443d      	add	r5, r7
 8001142:	eba5 050c 	sub.w	r5, r5, ip
 8001146:	fbb5 f1fe 	udiv	r1, r5, lr
 800114a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800114e:	fb01 f908 	mul.w	r9, r1, r8
 8001152:	b295      	uxth	r5, r2
 8001154:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001158:	45a9      	cmp	r9, r5
 800115a:	d907      	bls.n	800116c <__udivmoddi4+0x1c4>
 800115c:	197d      	adds	r5, r7, r5
 800115e:	f101 32ff 	add.w	r2, r1, #4294967295
 8001162:	d274      	bcs.n	800124e <__udivmoddi4+0x2a6>
 8001164:	45a9      	cmp	r9, r5
 8001166:	d972      	bls.n	800124e <__udivmoddi4+0x2a6>
 8001168:	3902      	subs	r1, #2
 800116a:	443d      	add	r5, r7
 800116c:	eba5 0509 	sub.w	r5, r5, r9
 8001170:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001174:	e778      	b.n	8001068 <__udivmoddi4+0xc0>
 8001176:	f1c1 0720 	rsb	r7, r1, #32
 800117a:	408b      	lsls	r3, r1
 800117c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001180:	ea4c 0c03 	orr.w	ip, ip, r3
 8001184:	fa25 f407 	lsr.w	r4, r5, r7
 8001188:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800118c:	fbb4 f9fe 	udiv	r9, r4, lr
 8001190:	fa1f f88c 	uxth.w	r8, ip
 8001194:	fb0e 4419 	mls	r4, lr, r9, r4
 8001198:	fa20 f307 	lsr.w	r3, r0, r7
 800119c:	fb09 fa08 	mul.w	sl, r9, r8
 80011a0:	408d      	lsls	r5, r1
 80011a2:	431d      	orrs	r5, r3
 80011a4:	0c2b      	lsrs	r3, r5, #16
 80011a6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80011aa:	45a2      	cmp	sl, r4
 80011ac:	fa02 f201 	lsl.w	r2, r2, r1
 80011b0:	fa00 f301 	lsl.w	r3, r0, r1
 80011b4:	d909      	bls.n	80011ca <__udivmoddi4+0x222>
 80011b6:	eb1c 0404 	adds.w	r4, ip, r4
 80011ba:	f109 30ff 	add.w	r0, r9, #4294967295
 80011be:	d248      	bcs.n	8001252 <__udivmoddi4+0x2aa>
 80011c0:	45a2      	cmp	sl, r4
 80011c2:	d946      	bls.n	8001252 <__udivmoddi4+0x2aa>
 80011c4:	f1a9 0902 	sub.w	r9, r9, #2
 80011c8:	4464      	add	r4, ip
 80011ca:	eba4 040a 	sub.w	r4, r4, sl
 80011ce:	fbb4 f0fe 	udiv	r0, r4, lr
 80011d2:	fb0e 4410 	mls	r4, lr, r0, r4
 80011d6:	fb00 fa08 	mul.w	sl, r0, r8
 80011da:	b2ad      	uxth	r5, r5
 80011dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011e0:	45a2      	cmp	sl, r4
 80011e2:	d908      	bls.n	80011f6 <__udivmoddi4+0x24e>
 80011e4:	eb1c 0404 	adds.w	r4, ip, r4
 80011e8:	f100 35ff 	add.w	r5, r0, #4294967295
 80011ec:	d22d      	bcs.n	800124a <__udivmoddi4+0x2a2>
 80011ee:	45a2      	cmp	sl, r4
 80011f0:	d92b      	bls.n	800124a <__udivmoddi4+0x2a2>
 80011f2:	3802      	subs	r0, #2
 80011f4:	4464      	add	r4, ip
 80011f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80011fa:	fba0 8902 	umull	r8, r9, r0, r2
 80011fe:	eba4 040a 	sub.w	r4, r4, sl
 8001202:	454c      	cmp	r4, r9
 8001204:	46c6      	mov	lr, r8
 8001206:	464d      	mov	r5, r9
 8001208:	d319      	bcc.n	800123e <__udivmoddi4+0x296>
 800120a:	d016      	beq.n	800123a <__udivmoddi4+0x292>
 800120c:	b15e      	cbz	r6, 8001226 <__udivmoddi4+0x27e>
 800120e:	ebb3 020e 	subs.w	r2, r3, lr
 8001212:	eb64 0405 	sbc.w	r4, r4, r5
 8001216:	fa04 f707 	lsl.w	r7, r4, r7
 800121a:	fa22 f301 	lsr.w	r3, r2, r1
 800121e:	431f      	orrs	r7, r3
 8001220:	40cc      	lsrs	r4, r1
 8001222:	e9c6 7400 	strd	r7, r4, [r6]
 8001226:	2100      	movs	r1, #0
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122c:	4631      	mov	r1, r6
 800122e:	4630      	mov	r0, r6
 8001230:	e70c      	b.n	800104c <__udivmoddi4+0xa4>
 8001232:	468c      	mov	ip, r1
 8001234:	e6eb      	b.n	800100e <__udivmoddi4+0x66>
 8001236:	4610      	mov	r0, r2
 8001238:	e6ff      	b.n	800103a <__udivmoddi4+0x92>
 800123a:	4543      	cmp	r3, r8
 800123c:	d2e6      	bcs.n	800120c <__udivmoddi4+0x264>
 800123e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001242:	eb69 050c 	sbc.w	r5, r9, ip
 8001246:	3801      	subs	r0, #1
 8001248:	e7e0      	b.n	800120c <__udivmoddi4+0x264>
 800124a:	4628      	mov	r0, r5
 800124c:	e7d3      	b.n	80011f6 <__udivmoddi4+0x24e>
 800124e:	4611      	mov	r1, r2
 8001250:	e78c      	b.n	800116c <__udivmoddi4+0x1c4>
 8001252:	4681      	mov	r9, r0
 8001254:	e7b9      	b.n	80011ca <__udivmoddi4+0x222>
 8001256:	4608      	mov	r0, r1
 8001258:	e773      	b.n	8001142 <__udivmoddi4+0x19a>
 800125a:	4608      	mov	r0, r1
 800125c:	e749      	b.n	80010f2 <__udivmoddi4+0x14a>
 800125e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001262:	443d      	add	r5, r7
 8001264:	e713      	b.n	800108e <__udivmoddi4+0xe6>
 8001266:	3802      	subs	r0, #2
 8001268:	443c      	add	r4, r7
 800126a:	e724      	b.n	80010b6 <__udivmoddi4+0x10e>

0800126c <__aeabi_idiv0>:
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127a:	2003      	movs	r0, #3
 800127c:	f000 fc14 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f80d 	bl	80012a0 <HAL_InitTick>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	e001      	b.n	8001296 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001292:	f00c f873 	bl	800d37c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_InitTick+0x68>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d022      	beq.n	80012fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_InitTick+0x6c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_InitTick+0x68>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fc22 	bl	8001b12 <HAL_SYSTICK_Config>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10f      	bne.n	80012f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d809      	bhi.n	80012ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	2200      	movs	r2, #0
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	f04f 30ff 	mov.w	r0, #4294967295
 80012e2:	f000 fbec 	bl	8001abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_InitTick+0x70>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e007      	b.n	80012fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e004      	b.n	80012fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000004 	.word	0x20000004
 800130c:	2000009c 	.word	0x2000009c
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4a03      	ldr	r2, [pc, #12]	; (8001330 <HAL_IncTick+0x1c>)
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000990 	.word	0x20000990
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000990 	.word	0x20000990

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d004      	beq.n	8001370 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_Delay+0x40>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001370:	bf00      	nop
 8001372:	f7ff ffe1 	bl	8001338 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d8f7      	bhi.n	8001372 <HAL_Delay+0x26>
  {
  }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6053      	str	r3, [r2, #4]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	e0042000 	.word	0xe0042000

080013ac <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	6053      	str	r3, [r2, #4]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	e0042000 	.word	0xe0042000

080013c8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	6053      	str	r3, [r2, #4]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	e0042000 	.word	0xe0042000

080013e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e127      	b.n	8001654 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d115      	bne.n	800143e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001420:	4b8e      	ldr	r3, [pc, #568]	; (800165c <HAL_ADC_Init+0x278>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a8d      	ldr	r2, [pc, #564]	; (800165c <HAL_ADC_Init+0x278>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	4b8b      	ldr	r3, [pc, #556]	; (800165c <HAL_ADC_Init+0x278>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f00b ffcd 	bl	800d3d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 80ff 	bne.w	800164a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001454:	f023 0302 	bic.w	r3, r3, #2
 8001458:	f043 0202 	orr.w	r2, r3, #2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001460:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <HAL_ADC_Init+0x27c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	497c      	ldr	r1, [pc, #496]	; (8001660 <HAL_ADC_Init+0x27c>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800147a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001482:	4619      	mov	r1, r3
 8001484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001488:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	fa93 f3a3 	rbit	r3, r3
 8001490:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800149e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80014a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80014c6:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ca:	4313      	orrs	r3, r2
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d007      	beq.n	80014e6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80014de:	4313      	orrs	r3, r2
 80014e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e2:	4313      	orrs	r3, r2
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	d04f      	beq.n	8001594 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014fa:	4313      	orrs	r3, r2
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001506:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6912      	ldr	r2, [r2, #16]
 800150c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001510:	d003      	beq.n	800151a <HAL_ADC_Init+0x136>
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6912      	ldr	r2, [r2, #16]
 8001516:	2a01      	cmp	r2, #1
 8001518:	d102      	bne.n	8001520 <HAL_ADC_Init+0x13c>
 800151a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151e:	e000      	b.n	8001522 <HAL_ADC_Init+0x13e>
 8001520:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001522:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001526:	4313      	orrs	r3, r2
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001530:	2b01      	cmp	r3, #1
 8001532:	d125      	bne.n	8001580 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	d114      	bne.n	8001568 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	3b01      	subs	r3, #1
 8001544:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	fa92 f2a2 	rbit	r2, r2
 8001550:	617a      	str	r2, [r7, #20]
  return result;
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	fab2 f282 	clz	r2, r2
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	4093      	lsls	r3, r2
 800155c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001562:	4313      	orrs	r3, r2
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
 8001566:	e00b      	b.n	8001580 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f043 0220 	orr.w	r2, r3, #32
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <HAL_ADC_Init+0x280>)
 8001588:	4013      	ands	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001590:	430b      	orrs	r3, r1
 8001592:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_ADC_Init+0x284>)
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b0:	d003      	beq.n	80015ba <HAL_ADC_Init+0x1d6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d119      	bne.n	80015ee <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	3b01      	subs	r3, #1
 80015ca:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80015ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	60fa      	str	r2, [r7, #12]
  return result;
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	fab2 f282 	clz	r2, r2
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	fa03 f202 	lsl.w	r2, r3, r2
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
 80015ec:	e007      	b.n	80015fe <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_ADC_Init+0x288>)
 8001606:	4013      	ands	r3, r2
 8001608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160a:	429a      	cmp	r2, r3
 800160c:	d10b      	bne.n	8001626 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f023 0303 	bic.w	r3, r3, #3
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	64da      	str	r2, [r3, #76]	; 0x4c
 8001624:	e014      	b.n	8001650 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f023 0312 	bic.w	r3, r3, #18
 800162e:	f043 0210 	orr.w	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001648:	e002      	b.n	8001650 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001654:	4618      	mov	r0, r3
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40012700 	.word	0x40012700
 8001664:	fcfc16ff 	.word	0xfcfc16ff
 8001668:	c0fff189 	.word	0xc0fff189
 800166c:	bf80fffe 	.word	0xbf80fffe

08001670 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x20>
 800168c:	2302      	movs	r3, #2
 800168e:	e134      	b.n	80018fa <HAL_ADC_ConfigChannel+0x28a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b06      	cmp	r3, #6
 800169e:	d81c      	bhi.n	80016da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b05      	subs	r3, #5
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4019      	ands	r1, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b05      	subs	r3, #5
 80016cc:	fa00 f203 	lsl.w	r2, r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
 80016d8:	e07e      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d81c      	bhi.n	800171c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3b23      	subs	r3, #35	; 0x23
 80016f4:	221f      	movs	r2, #31
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	4019      	ands	r1, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b23      	subs	r3, #35	; 0x23
 800170e:	fa00 f203 	lsl.w	r2, r0, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c
 800171a:	e05d      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b12      	cmp	r3, #18
 8001722:	d81c      	bhi.n	800175e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b41      	subs	r3, #65	; 0x41
 8001736:	221f      	movs	r2, #31
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b41      	subs	r3, #65	; 0x41
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	639a      	str	r2, [r3, #56]	; 0x38
 800175c:	e03c      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b18      	cmp	r3, #24
 8001764:	d81c      	bhi.n	80017a0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b5f      	subs	r3, #95	; 0x5f
 8001778:	221f      	movs	r2, #31
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	4019      	ands	r1, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	3b5f      	subs	r3, #95	; 0x5f
 8001792:	fa00 f203 	lsl.w	r2, r0, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	635a      	str	r2, [r3, #52]	; 0x34
 800179e:	e01b      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b7d      	subs	r3, #125	; 0x7d
 80017b2:	221f      	movs	r2, #31
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4019      	ands	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b7d      	subs	r3, #125	; 0x7d
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d81a      	bhi.n	8001816 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6959      	ldr	r1, [r3, #20]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	2207      	movs	r2, #7
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4019      	ands	r1, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6898      	ldr	r0, [r3, #8]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	fa00 f203 	lsl.w	r2, r0, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	e042      	b.n	800189c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b13      	cmp	r3, #19
 800181c:	d81c      	bhi.n	8001858 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6919      	ldr	r1, [r3, #16]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	3b1e      	subs	r3, #30
 8001830:	2207      	movs	r2, #7
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	4019      	ands	r1, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6898      	ldr	r0, [r3, #8]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	3b1e      	subs	r3, #30
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	e021      	b.n	800189c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b1a      	cmp	r3, #26
 800185e:	d81c      	bhi.n	800189a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68d9      	ldr	r1, [r3, #12]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	3b3c      	subs	r3, #60	; 0x3c
 8001872:	2207      	movs	r2, #7
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	4019      	ands	r1, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6898      	ldr	r0, [r3, #8]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	3b3c      	subs	r3, #60	; 0x3c
 800188c:	fa00 f203 	lsl.w	r2, r0, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	e000      	b.n	800189c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800189a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b10      	cmp	r3, #16
 80018a2:	d003      	beq.n	80018ac <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018a8:	2b11      	cmp	r3, #17
 80018aa:	d121      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_ADC_ConfigChannel+0x294>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11b      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_ADC_ConfigChannel+0x294>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_ADC_ConfigChannel+0x294>)
 80018be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c2:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b10      	cmp	r3, #16
 80018ca:	d111      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_ADC_ConfigChannel+0x298>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_ADC_ConfigChannel+0x29c>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9a      	lsrs	r2, r3, #18
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80018e2:	e002      	b.n	80018ea <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012700 	.word	0x40012700
 8001908:	2000009c 	.word	0x2000009c
 800190c:	431bde83 	.word	0x431bde83

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <__NVIC_EnableIRQ+0x34>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff90 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff2d 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad0:	f7ff ff42 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff ff90 	bl	8001a00 <NVIC_EncodePriority>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff5f 	bl	80019ac <__NVIC_SetPriority>
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff35 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffa2 	bl	8001a64 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d106      	bne.n	8001b48 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001b46:	e005      	b.n	8001b54 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001b4e:	f023 0304 	bic.w	r3, r3, #4
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b68:	f000 f802 	bl	8001b70 <HAL_SYSTICK_Callback>
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e059      	b.n	8001c42 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_DMA_Init+0xd0>)
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d80f      	bhi.n	8001bba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_DMA_Init+0xd4>)
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <HAL_DMA_Init+0xd8>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	009a      	lsls	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <HAL_DMA_Init+0xdc>)
 8001bb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bb8:	e00e      	b.n	8001bd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_DMA_Init+0xe0>)
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_DMA_Init+0xd8>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	009a      	lsls	r2, r3, #2
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <HAL_DMA_Init+0xe4>)
 8001bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40026407 	.word	0x40026407
 8001c50:	bffd9ff8 	.word	0xbffd9ff8
 8001c54:	cccccccd 	.word	0xcccccccd
 8001c58:	40026000 	.word	0x40026000
 8001c5c:	bffd9bf8 	.word	0xbffd9bf8
 8001c60:	40026400 	.word	0x40026400

08001c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Start_IT+0x20>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e04b      	b.n	8001d1c <HAL_DMA_Start_IT+0xb8>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d13a      	bne.n	8001d0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f95e 	bl	8001f7e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 020e 	orr.w	r2, r2, #14
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00f      	b.n	8001cfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 020a 	orr.w	r2, r2, #10
 8001cfa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e005      	b.n	8001d1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
 8001d18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e022      	b.n	8001d94 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 020e 	bic.w	r2, r2, #14
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0201 	bic.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 021c 	and.w	r2, r3, #28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d005      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e029      	b.n	8001e16 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 020e 	bic.w	r2, r2, #14
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 021c 	and.w	r2, r3, #28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
    }
  }
  return status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f003 031c 	and.w	r3, r3, #28
 8001e40:	2204      	movs	r2, #4
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d026      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x7a>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d021      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f003 021c 	and.w	r2, r3, #28
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	2104      	movs	r1, #4
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d071      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e98:	e06c      	b.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 031c 	and.w	r3, r3, #28
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d02e      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xec>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d029      	beq.n	8001f0c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 020a 	bic.w	r2, r2, #10
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 021c 	and.w	r2, r3, #28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	2102      	movs	r1, #2
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d038      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f0a:	e033      	b.n	8001f74 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 031c 	and.w	r3, r3, #28
 8001f14:	2208      	movs	r2, #8
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02a      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x156>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d025      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 020e 	bic.w	r2, r2, #14
 8001f38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f003 021c 	and.w	r2, r3, #28
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
}
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f003 021c 	and.w	r2, r3, #28
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d108      	bne.n	8001fc2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fc0:	e007      	b.n	8001fd2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	60da      	str	r2, [r3, #12]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ff2:	e154      	b.n	800229e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8146 	beq.w	8002298 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002020:	2b02      	cmp	r3, #2
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d017      	beq.n	80020c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d123      	bne.n	8002116 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80a0 	beq.w	8002298 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_GPIO_Init+0x2e0>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_GPIO_Init+0x2e0>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <HAL_GPIO_Init+0x2e0>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002170:	4a53      	ldr	r2, [pc, #332]	; (80022c0 <HAL_GPIO_Init+0x2e4>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a4b      	ldr	r2, [pc, #300]	; (80022c4 <HAL_GPIO_Init+0x2e8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d019      	beq.n	80021d0 <HAL_GPIO_Init+0x1f4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_GPIO_Init+0x2ec>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_GPIO_Init+0x1f0>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a49      	ldr	r2, [pc, #292]	; (80022cc <HAL_GPIO_Init+0x2f0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00d      	beq.n	80021c8 <HAL_GPIO_Init+0x1ec>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a48      	ldr	r2, [pc, #288]	; (80022d0 <HAL_GPIO_Init+0x2f4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <HAL_GPIO_Init+0x1e8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a47      	ldr	r2, [pc, #284]	; (80022d4 <HAL_GPIO_Init+0x2f8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021bc:	2304      	movs	r3, #4
 80021be:	e008      	b.n	80021d2 <HAL_GPIO_Init+0x1f6>
 80021c0:	2305      	movs	r3, #5
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1f6>
 80021c4:	2303      	movs	r3, #3
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x1f6>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x1f6>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x1f6>
 80021d0:	2300      	movs	r3, #0
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021e2:	4937      	ldr	r1, [pc, #220]	; (80022c0 <HAL_GPIO_Init+0x2e4>)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002214:	4a30      	ldr	r2, [pc, #192]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800223e:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002268:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_GPIO_Init+0x2fc>)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f aea3 	bne.w	8001ff4 <HAL_GPIO_Init+0x18>
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010400 	.word	0x40010400

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d006      	beq.n	8002330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	4618      	mov	r0, r3
 800232c:	f009 fe34 	bl	800bf98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e31d      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002358:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d07b      	beq.n	8002466 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d006      	beq.n	8002382 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d10f      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b87      	ldr	r3, [pc, #540]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06a      	beq.n	8002464 <HAL_RCC_OscConfig+0x128>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d166      	bne.n	8002464 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e2f7      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x74>
 80023a2:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a7e      	ldr	r2, [pc, #504]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e02d      	b.n	800240c <HAL_RCC_OscConfig+0xd0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x96>
 80023b8:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a78      	ldr	r2, [pc, #480]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a75      	ldr	r2, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0xd0>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0xb8>
 80023da:	4b71      	ldr	r3, [pc, #452]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a70      	ldr	r2, [pc, #448]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6d      	ldr	r2, [pc, #436]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0xd0>
 80023f4:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a66      	ldr	r2, [pc, #408]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe ff90 	bl	8001338 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe ff8c 	bl	8001338 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e2ad      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0xe0>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe ff7c 	bl	8001338 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002444:	f7fe ff78 	bl	8001338 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e299      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002456:	4b52      	ldr	r3, [pc, #328]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x108>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d05a      	beq.n	8002528 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_OscConfig+0x176>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x160>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e276      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	493d      	ldr	r1, [pc, #244]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b0:	e03a      	b.n	8002528 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d020      	beq.n	80024fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_RCC_OscConfig+0x268>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe ff3a 	bl	8001338 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe ff36 	bl	8001338 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e257      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	492a      	ldr	r1, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 80024fa:	e015      	b.n	8002528 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_RCC_OscConfig+0x268>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7fe ff19 	bl	8001338 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7fe ff15 	bl	8001338 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e236      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80b8 	beq.w	80026a6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d170      	bne.n	800261e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_OscConfig+0x218>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e21a      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1a      	ldr	r2, [r3, #32]
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002560:	429a      	cmp	r2, r3
 8002562:	d921      	bls.n	80025a8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fc4b 	bl	8002e04 <RCC_SetFlashLatencyFromMSIRange>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e208      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4906      	ldr	r1, [pc, #24]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	061b      	lsls	r3, r3, #24
 8002598:	4901      	ldr	r1, [pc, #4]	; (80025a0 <HAL_RCC_OscConfig+0x264>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
 800259e:	e020      	b.n	80025e2 <HAL_RCC_OscConfig+0x2a6>
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a8:	4ba4      	ldr	r3, [pc, #656]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	49a1      	ldr	r1, [pc, #644]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ba:	4ba0      	ldr	r3, [pc, #640]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	061b      	lsls	r3, r3, #24
 80025c8:	499c      	ldr	r1, [pc, #624]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fc16 	bl	8002e04 <RCC_SetFlashLatencyFromMSIRange>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1d3      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	0b5b      	lsrs	r3, r3, #13
 80025e8:	3301      	adds	r3, #1
 80025ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025f2:	4a92      	ldr	r2, [pc, #584]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0912      	lsrs	r2, r2, #4
 80025f8:	f002 020f 	and.w	r2, r2, #15
 80025fc:	4990      	ldr	r1, [pc, #576]	; (8002840 <HAL_RCC_OscConfig+0x504>)
 80025fe:	5c8a      	ldrb	r2, [r1, r2]
 8002600:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002602:	4a90      	ldr	r2, [pc, #576]	; (8002844 <HAL_RCC_OscConfig+0x508>)
 8002604:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002606:	4b90      	ldr	r3, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0x50c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fe48 	bl	80012a0 <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d045      	beq.n	80026a6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	e1b5      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d029      	beq.n	800267a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <HAL_RCC_OscConfig+0x510>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe fe84 	bl	8001338 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002634:	f7fe fe80 	bl	8001338 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1a1      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002646:	4b7d      	ldr	r3, [pc, #500]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002652:	4b7a      	ldr	r3, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4977      	ldr	r1, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	4972      	ldr	r1, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800267a:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_OscConfig+0x510>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fe5a 	bl	8001338 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002688:	f7fe fe56 	bl	8001338 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e177      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800269a:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x500>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d030      	beq.n	8002714 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b65      	ldr	r3, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x514>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe fe3a 	bl	8001338 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fe36 	bl	8001338 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e157      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026da:	4b58      	ldr	r3, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x38c>
 80026e6:	e015      	b.n	8002714 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b59      	ldr	r3, [pc, #356]	; (8002850 <HAL_RCC_OscConfig+0x514>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fe23 	bl	8001338 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fe1f 	bl	8001338 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e140      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002708:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x500>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80b5 	beq.w	800288c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b45      	ldr	r3, [pc, #276]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4a41      	ldr	r2, [pc, #260]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6253      	str	r3, [r2, #36]	; 0x24
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_OscConfig+0x518>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_OscConfig+0x518>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a3d      	ldr	r2, [pc, #244]	; (8002854 <HAL_RCC_OscConfig+0x518>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe fde7 	bl	8001338 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe fde3 	bl	8001338 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e104      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_OscConfig+0x518>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x466>
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_RCC_OscConfig+0x500>)
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6353      	str	r3, [r2, #52]	; 0x34
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_OscConfig+0x4c2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x488>
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ae:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b4:	6353      	str	r3, [r2, #52]	; 0x34
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c0:	6353      	str	r3, [r2, #52]	; 0x34
 80027c2:	e01c      	b.n	80027fe <HAL_RCC_OscConfig+0x4c2>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d6:	6353      	str	r3, [r2, #52]	; 0x34
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6353      	str	r3, [r2, #52]	; 0x34
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x4c2>
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	4a14      	ldr	r2, [pc, #80]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f0:	6353      	str	r3, [r2, #52]	; 0x34
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_RCC_OscConfig+0x500>)
 80027f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d015      	beq.n	8002832 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe fd97 	bl	8001338 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fd93 	bl	8001338 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0b2      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_OscConfig+0x500>)
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCC_OscConfig+0x4d2>
 8002830:	e023      	b.n	800287a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fd81 	bl	8001338 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002838:	e019      	b.n	800286e <HAL_RCC_OscConfig+0x532>
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	080128e0 	.word	0x080128e0
 8002844:	2000009c 	.word	0x2000009c
 8002848:	20000000 	.word	0x20000000
 800284c:	42470020 	.word	0x42470020
 8002850:	42470680 	.word	0x42470680
 8002854:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fd6e 	bl	8001338 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e08d      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800286e:	4b49      	ldr	r3, [pc, #292]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1ee      	bne.n	8002858 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800287a:	7ffb      	ldrb	r3, [r7, #31]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b44      	ldr	r3, [pc, #272]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	4a43      	ldr	r2, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 8002886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	d079      	beq.n	8002988 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d056      	beq.n	8002948 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d13b      	bne.n	800291a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a2:	4b3d      	ldr	r3, [pc, #244]	; (8002998 <HAL_RCC_OscConfig+0x65c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fd46 	bl	8001338 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fd42 	bl	8001338 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e063      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	4319      	orrs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e4:	430b      	orrs	r3, r1
 80028e6:	492b      	ldr	r1, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_RCC_OscConfig+0x65c>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fd21 	bl	8001338 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fa:	f7fe fd1d 	bl	8001338 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e03e      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x5be>
 8002918:	e036      	b.n	8002988 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x65c>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fd0a 	bl	8001338 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fd06 	bl	8001338 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e027      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x5ec>
 8002946:	e01f      	b.n	8002988 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e01a      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCC_OscConfig+0x658>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	429a      	cmp	r2, r3
 8002966:	d10d      	bne.n	8002984 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	42470060 	.word	0x42470060

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e11a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d919      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x34>
 80029c4:	4b8a      	ldr	r3, [pc, #552]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a89      	ldr	r2, [pc, #548]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b87      	ldr	r3, [pc, #540]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0201 	bic.w	r2, r3, #1
 80029d8:	4985      	ldr	r1, [pc, #532]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e0:	4b83      	ldr	r3, [pc, #524]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0f9      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fe:	4b7d      	ldr	r3, [pc, #500]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	497a      	ldr	r1, [pc, #488]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 808e 	beq.w	8002b3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a26:	4b73      	ldr	r3, [pc, #460]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d121      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0d7      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d115      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0cb      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a56:	4b67      	ldr	r3, [pc, #412]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0bf      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a66:	4b63      	ldr	r3, [pc, #396]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0b7      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	495c      	ldr	r1, [pc, #368]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fe fc56 	bl	8001338 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a98:	f7fe fc4e 	bl	8001338 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e09b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aae:	4b51      	ldr	r3, [pc, #324]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_RCC_ClockConfig+0xfc>
 8002aba:	e03e      	b.n	8002b3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d112      	bne.n	8002aea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac6:	f7fe fc37 	bl	8001338 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e084      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b0c      	cmp	r3, #12
 8002ae6:	d1ee      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0x12a>
 8002ae8:	e027      	b.n	8002b3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d11d      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fc20 	bl	8001338 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e06d      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d1ee      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x158>
 8002b16:	e010      	b.n	8002b3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b18:	f7fe fc0e 	bl	8001338 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e05b      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d219      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d105      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1be>
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 0201 	bic.w	r2, r3, #1
 8002b62:	4923      	ldr	r1, [pc, #140]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <HAL_RCC_ClockConfig+0x254>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e034      	b.n	8002be6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4917      	ldr	r1, [pc, #92]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490f      	ldr	r1, [pc, #60]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bba:	f000 f823 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_ClockConfig+0x258>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490b      	ldr	r1, [pc, #44]	; (8002bf8 <HAL_RCC_ClockConfig+0x25c>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x264>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fb60 	bl	80012a0 <HAL_InitTick>
 8002be0:	4603      	mov	r3, r0
 8002be2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be4:	7afb      	ldrb	r3, [r7, #11]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	080128e0 	.word	0x080128e0
 8002bfc:	2000009c 	.word	0x2000009c
 8002c00:	20000000 	.word	0x20000000

08002c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d00d      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x32>
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	f200 80a4 	bhi.w	8002d68 <HAL_RCC_GetSysClockFreq+0x164>
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d002      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x26>
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d003      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c28:	e09e      	b.n	8002d68 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c2a:	4b5a      	ldr	r3, [pc, #360]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x190>)
 8002c2c:	613b      	str	r3, [r7, #16]
      break;
 8002c2e:	e0a9      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c30:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x194>)
 8002c32:	613b      	str	r3, [r7, #16]
      break;
 8002c34:	e0a6      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0c9b      	lsrs	r3, r3, #18
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x198>)
 8002c40:	5cd3      	ldrb	r3, [r2, r3]
 8002c42:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0d9b      	lsrs	r3, r3, #22
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d041      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	461c      	mov	r4, r3
 8002c60:	f04f 0500 	mov.w	r5, #0
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	014b      	lsls	r3, r1, #5
 8002c72:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c76:	0142      	lsls	r2, r0, #5
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	1b00      	subs	r0, r0, r4
 8002c7e:	eb61 0105 	sbc.w	r1, r1, r5
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	018b      	lsls	r3, r1, #6
 8002c8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c90:	0182      	lsls	r2, r0, #6
 8002c92:	1a12      	subs	r2, r2, r0
 8002c94:	eb63 0301 	sbc.w	r3, r3, r1
 8002c98:	f04f 0000 	mov.w	r0, #0
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	00d9      	lsls	r1, r3, #3
 8002ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ca6:	00d0      	lsls	r0, r2, #3
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	1912      	adds	r2, r2, r4
 8002cae:	eb45 0303 	adc.w	r3, r5, r3
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	0259      	lsls	r1, r3, #9
 8002cbc:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cc0:	0250      	lsls	r0, r2, #9
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	f7fe f951 	bl	8000f78 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e040      	b.n	8002d62 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	461c      	mov	r4, r3
 8002ce4:	f04f 0500 	mov.w	r5, #0
 8002ce8:	4620      	mov	r0, r4
 8002cea:	4629      	mov	r1, r5
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	014b      	lsls	r3, r1, #5
 8002cf6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cfa:	0142      	lsls	r2, r0, #5
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	1b00      	subs	r0, r0, r4
 8002d02:	eb61 0105 	sbc.w	r1, r1, r5
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	018b      	lsls	r3, r1, #6
 8002d10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d14:	0182      	lsls	r2, r0, #6
 8002d16:	1a12      	subs	r2, r2, r0
 8002d18:	eb63 0301 	sbc.w	r3, r3, r1
 8002d1c:	f04f 0000 	mov.w	r0, #0
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	00d9      	lsls	r1, r3, #3
 8002d26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d2a:	00d0      	lsls	r0, r2, #3
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	1912      	adds	r2, r2, r4
 8002d32:	eb45 0303 	adc.w	r3, r5, r3
 8002d36:	f04f 0000 	mov.w	r0, #0
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	0299      	lsls	r1, r3, #10
 8002d40:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d44:	0290      	lsls	r0, r2, #10
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f7fe f90f 	bl	8000f78 <__aeabi_uldivmod>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4613      	mov	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	613b      	str	r3, [r7, #16]
      break;
 8002d66:	e00d      	b.n	8002d84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0b5b      	lsrs	r3, r3, #13
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	613b      	str	r3, [r7, #16]
      break;
 8002d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d84:	693b      	ldr	r3, [r7, #16]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	007a1200 	.word	0x007a1200
 8002d9c:	080128d4 	.word	0x080128d4

08002da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da4:	4b02      	ldr	r3, [pc, #8]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	2000009c 	.word	0x2000009c

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff2 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	080128f0 	.word	0x080128f0

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffde 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	080128f0 	.word	0x080128f0

08002e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12c      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e016      	b.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6253      	str	r3, [r2, #36]	; 0x24
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e54:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002e68:	d105      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e70:	d101      	bne.n	8002e76 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002e72:	2301      	movs	r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 0201 	bic.w	r2, r3, #1
 8002e90:	490b      	ldr	r1, [pc, #44]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b8 	beq.w	800304a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b5a      	ldr	r3, [pc, #360]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	4a59      	ldr	r2, [pc, #356]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ef6:	4b57      	ldr	r3, [pc, #348]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b54      	ldr	r3, [pc, #336]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b51      	ldr	r3, [pc, #324]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a50      	ldr	r2, [pc, #320]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fa0b 	bl	8001338 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe fa07 	bl	8001338 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e089      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f44:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002f4c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d00f      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f76:	d101      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e067      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f84:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d034      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d02d      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d027      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002faa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fae:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d014      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f9b4 	bl	8001338 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f9b0 	bl	8001338 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e030      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800300a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800300e:	d10a      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003020:	490c      	ldr	r1, [pc, #48]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003032:	4908      	ldr	r1, [pc, #32]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003034:	4313      	orrs	r3, r2
 8003036:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000
 800305c:	424706dc 	.word	0x424706dc

08003060 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e083      	b.n	800317a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7f5b      	ldrb	r3, [r3, #29]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f00a f9e8 	bl	800d458 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	22ca      	movs	r2, #202	; 0xca
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2253      	movs	r2, #83	; 0x53
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fe4a 	bl	8003d38 <RTC_EnterInitMode>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e05e      	b.n	800317a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80030ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6899      	ldr	r1, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68d2      	ldr	r2, [r2, #12]
 80030f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	041a      	lsls	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311a:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10e      	bne.n	8003148 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fdd7 	bl	8003cde <HAL_RTC_WaitForSynchro>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2204      	movs	r2, #4
 8003142:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e018      	b.n	800317a <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003182:	b590      	push	{r4, r7, lr}
 8003184:	b087      	sub	sp, #28
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	7f1b      	ldrb	r3, [r3, #28]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_RTC_SetTime+0x18>
 8003196:	2302      	movs	r3, #2
 8003198:	e0a3      	b.n	80032e2 <HAL_RTC_SetTime+0x160>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2202      	movs	r2, #2
 80031a4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d126      	bne.n	80031fa <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2200      	movs	r2, #0
 80031be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fde1 	bl	8003d8c <RTC_ByteToBcd2>
 80031ca:	4603      	mov	r3, r0
 80031cc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	785b      	ldrb	r3, [r3, #1]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fdda 	bl	8003d8c <RTC_ByteToBcd2>
 80031d8:	4603      	mov	r3, r0
 80031da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80031dc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	789b      	ldrb	r3, [r3, #2]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fdd2 	bl	8003d8c <RTC_ByteToBcd2>
 80031e8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80031ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e018      	b.n	800322c <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2200      	movs	r2, #0
 800320c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	785b      	ldrb	r3, [r3, #1]
 8003218:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800321a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003220:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	78db      	ldrb	r3, [r3, #3]
 8003226:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	22ca      	movs	r2, #202	; 0xca
 8003232:	625a      	str	r2, [r3, #36]	; 0x24
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2253      	movs	r2, #83	; 0x53
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fd7b 	bl	8003d38 <RTC_EnterInitMode>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00b      	beq.n	8003260 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	22ff      	movs	r2, #255	; 0xff
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2204      	movs	r2, #4
 8003254:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e040      	b.n	80032e2 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800326a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800326e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800327e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fd18 	bl	8003cde <HAL_RTC_WaitForSynchro>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	22ff      	movs	r2, #255	; 0xff
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2204      	movs	r2, #4
 80032c0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e00a      	b.n	80032e2 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	22ff      	movs	r2, #255	; 0xff
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}

080032ea <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800331a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800331e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332a:	b2da      	uxtb	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800333a:	b2da      	uxtb	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11a      	bne.n	800339a <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fd2e 	bl	8003dca <RTC_Bcd2ToByte>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fd25 	bl	8003dca <RTC_Bcd2ToByte>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	789b      	ldrb	r3, [r3, #2]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd1c 	bl	8003dca <RTC_Bcd2ToByte>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	7f1b      	ldrb	r3, [r3, #28]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_RTC_SetDate+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e08d      	b.n	80034d8 <HAL_RTC_SetDate+0x134>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2202      	movs	r2, #2
 80033c6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_RTC_SetDate+0x48>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	f023 0310 	bic.w	r3, r3, #16
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	330a      	adds	r3, #10
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11c      	bne.n	800342c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	78db      	ldrb	r3, [r3, #3]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fcc8 	bl	8003d8c <RTC_ByteToBcd2>
 80033fc:	4603      	mov	r3, r0
 80033fe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	785b      	ldrb	r3, [r3, #1]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fcc1 	bl	8003d8c <RTC_ByteToBcd2>
 800340a:	4603      	mov	r3, r0
 800340c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800340e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	789b      	ldrb	r3, [r3, #2]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fcb9 	bl	8003d8c <RTC_ByteToBcd2>
 800341a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800341c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e00e      	b.n	800344a <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	78db      	ldrb	r3, [r3, #3]
 8003430:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003438:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800343e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	22ca      	movs	r2, #202	; 0xca
 8003450:	625a      	str	r2, [r3, #36]	; 0x24
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2253      	movs	r2, #83	; 0x53
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fc6c 	bl	8003d38 <RTC_EnterInitMode>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2204      	movs	r2, #4
 8003472:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e02c      	b.n	80034d8 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003488:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800348c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349c:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fc1d 	bl	8003cde <HAL_RTC_WaitForSynchro>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	22ff      	movs	r2, #255	; 0xff
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2204      	movs	r2, #4
 80034b6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00a      	b.n	80034d8 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	22ff      	movs	r2, #255	; 0xff
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80034d6:	2300      	movs	r3, #0
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}

080034e0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800351e:	b2da      	uxtb	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	0b5b      	lsrs	r3, r3, #13
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11a      	bne.n	8003570 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	78db      	ldrb	r3, [r3, #3]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fc43 	bl	8003dca <RTC_Bcd2ToByte>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fc3a 	bl	8003dca <RTC_Bcd2ToByte>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	789b      	ldrb	r3, [r3, #2]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fc31 	bl	8003dca <RTC_Bcd2ToByte>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800357a:	b590      	push	{r4, r7, lr}
 800357c:	b089      	sub	sp, #36	; 0x24
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpreg;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	7f1b      	ldrb	r3, [r3, #28]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_RTC_SetAlarm+0x1c>
 8003592:	2302      	movs	r3, #2
 8003594:	e101      	b.n	800379a <HAL_RTC_SetAlarm+0x220>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2202      	movs	r2, #2
 80035a0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d137      	bne.n	8003618 <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2200      	movs	r2, #0
 80035ba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fbe3 	bl	8003d8c <RTC_ByteToBcd2>
 80035c6:	4603      	mov	r3, r0
 80035c8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	785b      	ldrb	r3, [r3, #1]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fbdc 	bl	8003d8c <RTC_ByteToBcd2>
 80035d4:	4603      	mov	r3, r0
 80035d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80035d8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	789b      	ldrb	r3, [r3, #2]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fbd4 	bl	8003d8c <RTC_ByteToBcd2>
 80035e4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80035e6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	78db      	ldrb	r3, [r3, #3]
 80035ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80035f0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fbc6 	bl	8003d8c <RTC_ByteToBcd2>
 8003600:	4603      	mov	r3, r0
 8003602:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003604:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800360c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003612:	4313      	orrs	r3, r2
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e023      	b.n	8003660 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_RTC_SetAlarm+0xb2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	785b      	ldrb	r3, [r3, #1]
 8003636:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003638:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800363e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	78db      	ldrb	r3, [r3, #3]
 8003644:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003646:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003650:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003656:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800365c:	4313      	orrs	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
  }

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	22ca      	movs	r2, #202	; 0xca
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2253      	movs	r2, #83	; 0x53
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003684:	d13f      	bne.n	8003706 <HAL_RTC_SetAlarm+0x18c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003694:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036a4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80036a6:	f7fd fe47 	bl	8001338 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036ac:	e013      	b.n	80036d6 <HAL_RTC_SetAlarm+0x15c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036ae:	f7fd fe43 	bl	8001338 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036bc:	d90b      	bls.n	80036d6 <HAL_RTC_SetAlarm+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2203      	movs	r2, #3
 80036ca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e061      	b.n	800379a <HAL_RTC_SetAlarm+0x220>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0e4      	beq.n	80036ae <HAL_RTC_SetAlarm+0x134>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	e03e      	b.n	8003784 <HAL_RTC_SetAlarm+0x20a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003714:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003724:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003726:	f7fd fe07 	bl	8001338 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800372c:	e013      	b.n	8003756 <HAL_RTC_SetAlarm+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800372e:	f7fd fe03 	bl	8001338 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800373c:	d90b      	bls.n	8003756 <HAL_RTC_SetAlarm+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	22ff      	movs	r2, #255	; 0xff
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2203      	movs	r2, #3
 800374a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e021      	b.n	800379a <HAL_RTC_SetAlarm+0x220>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0e4      	beq.n	800372e <HAL_RTC_SetAlarm+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69fa      	ldr	r2, [r7, #28]
 800376a:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
	...

080037a4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	7f1b      	ldrb	r3, [r3, #28]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_RTC_SetAlarm_IT+0x24>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e11f      	b.n	8003a08 <HAL_RTC_SetAlarm_IT+0x264>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2202      	movs	r2, #2
 80037d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d137      	bne.n	800384a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 faca 	bl	8003d8c <RTC_ByteToBcd2>
 80037f8:	4603      	mov	r3, r0
 80037fa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fac3 	bl	8003d8c <RTC_ByteToBcd2>
 8003806:	4603      	mov	r3, r0
 8003808:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800380a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	789b      	ldrb	r3, [r3, #2]
 8003810:	4618      	mov	r0, r3
 8003812:	f000 fabb 	bl	8003d8c <RTC_ByteToBcd2>
 8003816:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003818:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	78db      	ldrb	r3, [r3, #3]
 8003820:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003822:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 faad 	bl	8003d8c <RTC_ByteToBcd2>
 8003832:	4603      	mov	r3, r0
 8003834:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003836:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800383e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003844:	4313      	orrs	r3, r2
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e023      	b.n	8003892 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800386a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003870:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	78db      	ldrb	r3, [r3, #3]
 8003876:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003878:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003880:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003882:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003888:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800388e:	4313      	orrs	r3, r2
 8003890:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	22ca      	movs	r2, #202	; 0xca
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2253      	movs	r2, #83	; 0x53
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d148      	bne.n	800394a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80038d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80038da:	f7fd fd2d 	bl	8001338 <HAL_GetTick>
 80038de:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80038e0:	e013      	b.n	800390a <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038e2:	f7fd fd29 	bl	8001338 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038f0:	d90b      	bls.n	800390a <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	22ff      	movs	r2, #255	; 0xff
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2203      	movs	r2, #3
 80038fe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e07e      	b.n	8003a08 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0e4      	beq.n	80038e2 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003936:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e047      	b.n	80039da <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003958:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f462 7220 	orn	r2, r2, #640	; 0x280
 800396a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800396c:	f7fd fce4 	bl	8001338 <HAL_GetTick>
 8003970:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003972:	e013      	b.n	800399c <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003974:	f7fd fce0 	bl	8001338 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003982:	d90b      	bls.n	800399c <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2203      	movs	r2, #3
 8003990:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e035      	b.n	8003a08 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0e4      	beq.n	8003974 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RTC_SetAlarm_IT+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0c      	ldr	r2, [pc, #48]	; (8003a10 <HAL_RTC_SetAlarm_IT+0x26c>)
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e4:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RTC_SetAlarm_IT+0x26c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RTC_SetAlarm_IT+0x26c>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3724      	adds	r7, #36	; 0x24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	40010400 	.word	0x40010400

08003a14 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7f1b      	ldrb	r3, [r3, #28]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_RTC_DeactivateAlarm+0x16>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e07b      	b.n	8003b22 <HAL_RTC_DeactivateAlarm+0x10e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	22ca      	movs	r2, #202	; 0xca
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2253      	movs	r2, #83	; 0x53
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4c:	d12f      	bne.n	8003aae <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a5c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a6c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003a6e:	f7fd fc63 	bl	8001338 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003a74:	e013      	b.n	8003a9e <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a76:	f7fd fc5f 	bl	8001338 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a84:	d90b      	bls.n	8003a9e <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e041      	b.n	8003b22 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0e4      	beq.n	8003a76 <HAL_RTC_DeactivateAlarm+0x62>
 8003aac:	e02e      	b.n	8003b0c <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003abc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003acc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003ace:	f7fd fc33 	bl	8001338 <HAL_GetTick>
 8003ad2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ad4:	e013      	b.n	8003afe <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ad6:	f7fd fc2f 	bl	8001338 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae4:	d90b      	bls.n	8003afe <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2203      	movs	r2, #3
 8003af2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e011      	b.n	8003b22 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0e4      	beq.n	8003ad6 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	22ff      	movs	r2, #255	; 0xff
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3e:	d10e      	bne.n	8003b5e <HAL_RTC_GetAlarm+0x34>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e00d      	b.n	8003b7a <HAL_RTC_GetAlarm+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b78:	613b      	str	r3, [r7, #16]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	70da      	strb	r2, [r3, #3]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	605a      	str	r2, [r3, #4]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	0e1b      	lsrs	r3, r3, #24
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d125      	bne.n	8003c36 <HAL_RTC_GetAlarm+0x10c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f8eb 	bl	8003dca <RTC_Bcd2ToByte>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f8e2 	bl	8003dca <RTC_Bcd2ToByte>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	789b      	ldrb	r3, [r3, #2]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f8d9 	bl	8003dca <RTC_Bcd2ToByte>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f8cf 	bl	8003dca <RTC_Bcd2ToByte>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f831 	bl	8003ccc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003c7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f907 	bl	8003eac <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003cae:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	775a      	strb	r2, [r3, #29]
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40010400 	.word	0x40010400

08003ccc <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d11c      	bne.n	8003d2e <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d04:	f7fd fb18 	bl	8001338 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d0a:	e009      	b.n	8003d20 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d0c:	f7fd fb14 	bl	8001338 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1a:	d901      	bls.n	8003d20 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e007      	b.n	8003d30 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d119      	bne.n	8003d82 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f04f 32ff 	mov.w	r2, #4294967295
 8003d56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d58:	f7fd faee 	bl	8001338 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d5e:	e009      	b.n	8003d74 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d60:	f7fd faea 	bl	8001338 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6e:	d901      	bls.n	8003d74 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e007      	b.n	8003d84 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0ee      	beq.n	8003d60 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003d9e:	e005      	b.n	8003dac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	3b0a      	subs	r3, #10
 8003daa:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d8f6      	bhi.n	8003da0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b2db      	uxtb	r3, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	b2db      	uxtb	r3, r3
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7f1b      	ldrb	r3, [r3, #28]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_RTCEx_DeactivateWakeUpTimer+0x14>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e047      	b.n	8003ea4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	22ca      	movs	r2, #202	; 0xca
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2253      	movs	r2, #83	; 0x53
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e4e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003e50:	f7fd fa72 	bl	8001338 <HAL_GetTick>
 8003e54:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003e56:	e013      	b.n	8003e80 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003e58:	f7fd fa6e 	bl	8001338 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e66:	d90b      	bls.n	8003e80 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2203      	movs	r2, #3
 8003e74:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e011      	b.n	8003ea4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0e4      	beq.n	8003e58 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e07b      	b.n	8003fc8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ee0:	d009      	beq.n	8003ef6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	61da      	str	r2, [r3, #28]
 8003ee8:	e005      	b.n	8003ef6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f009 fab7 	bl	800d484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7a:	ea42 0103 	orr.w	r1, r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	0c1b      	lsrs	r3, r3, #16
 8003f94:	f003 0104 	and.w	r1, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f003 0210 	and.w	r2, r3, #16
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e03f      	b.n	8004062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f009 fa88 	bl	800d50c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fdef 	bl	8004bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b08a      	sub	sp, #40	; 0x28
 800406e:	af02      	add	r7, sp, #8
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 808c 	bne.w	80041a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_Receive+0x2e>
 8004092:	88fb      	ldrh	r3, [r7, #6]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e084      	b.n	80041a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Receive+0x40>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e07d      	b.n	80041a6 <HAL_UART_Receive+0x13c>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2222      	movs	r2, #34	; 0x22
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c6:	f7fd f937 	bl	8001338 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d108      	bne.n	80040f4 <HAL_UART_Receive+0x8a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e003      	b.n	80040fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004104:	e043      	b.n	800418e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2120      	movs	r1, #32
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb89 	bl	8004828 <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e042      	b.n	80041a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	b29b      	uxth	r3, r3
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	b29a      	uxth	r2, r3
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	3302      	adds	r3, #2
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e01f      	b.n	8004180 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d007      	beq.n	800415a <HAL_UART_Receive+0xf0>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <HAL_UART_Receive+0xfe>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e008      	b.n	800417a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004174:	b2da      	uxtb	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1b6      	bne.n	8004106 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d130      	bne.n	800422a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_UART_Transmit_IT+0x26>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e029      	b.n	800422c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Transmit_IT+0x38>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e022      	b.n	800422c <HAL_UART_Transmit_IT+0x7e>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	88fa      	ldrh	r2, [r7, #6]
 80041f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2221      	movs	r2, #33	; 0x21
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004224:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	4613      	mov	r3, r2
 8004242:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b20      	cmp	r3, #32
 800424e:	d11d      	bne.n	800428c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_UART_Receive_IT+0x26>
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e016      	b.n	800428e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_UART_Receive_IT+0x38>
 800426a:	2302      	movs	r3, #2
 800426c:	e00f      	b.n	800428e <HAL_UART_Receive_IT+0x58>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	461a      	mov	r2, r3
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb1a 	bl	80048bc <UART_Start_Receive_IT>
 8004288:	4603      	mov	r3, r0
 800428a:	e000      	b.n	800428e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d153      	bne.n	800435a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_UART_Transmit_DMA+0x26>
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e04c      	b.n	800435c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Transmit_DMA+0x38>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e045      	b.n	800435c <HAL_UART_Transmit_DMA+0xc4>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	88fa      	ldrh	r2, [r7, #6]
 80042e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2221      	movs	r2, #33	; 0x21
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_UART_Transmit_DMA+0xcc>)
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_UART_Transmit_DMA+0xd0>)
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	4a17      	ldr	r2, [pc, #92]	; (800436c <HAL_UART_Transmit_DMA+0xd4>)
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	2200      	movs	r2, #0
 8004316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004318:	f107 0308 	add.w	r3, r7, #8
 800431c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3304      	adds	r3, #4
 800432c:	461a      	mov	r2, r3
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	f7fd fc98 	bl	8001c64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800433c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004354:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	08004727 	.word	0x08004727
 8004368:	08004779 	.word	0x08004779
 800436c:	08004795 	.word	0x08004795

08004370 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	; 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_UART_IRQHandler+0x52>
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fb73 	bl	8004aa6 <UART_Receive_IT>
      return;
 80043c0:	e17b      	b.n	80046ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80b1 	beq.w	800452c <HAL_UART_IRQHandler+0x1bc>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_UART_IRQHandler+0x70>
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80a6 	beq.w	800452c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_UART_IRQHandler+0x90>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_UART_IRQHandler+0xb0>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f043 0202 	orr.w	r2, r3, #2
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_UART_IRQHandler+0xd0>
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0204 	orr.w	r2, r3, #4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00f      	beq.n	800446a <HAL_UART_IRQHandler+0xfa>
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_UART_IRQHandler+0xee>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f043 0208 	orr.w	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 811e 	beq.w	80046b0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_UART_IRQHandler+0x11e>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fb0c 	bl	8004aa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_UART_IRQHandler+0x146>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d031      	beq.n	800451a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa4e 	bl	8004958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d123      	bne.n	8004512 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	4a76      	ldr	r2, [pc, #472]	; (80046c0 <HAL_UART_IRQHandler+0x350>)
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd fc55 	bl	8001d9e <HAL_DMA_Abort_IT>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004504:	4610      	mov	r0, r2
 8004506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e00e      	b.n	8004528 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f00b fea8 	bl	8010260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	e00a      	b.n	8004528 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f00b fea4 	bl	8010260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	e006      	b.n	8004528 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f00b fea0 	bl	8010260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004526:	e0c3      	b.n	80046b0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	bf00      	nop
    return;
 800452a:	e0c1      	b.n	80046b0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 80a1 	bne.w	8004678 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 809b 	beq.w	8004678 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8095 	beq.w	8004678 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d14e      	bne.n	8004610 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800457c:	8a3b      	ldrh	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8098 	beq.w	80046b4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004588:	8a3a      	ldrh	r2, [r7, #16]
 800458a:	429a      	cmp	r2, r3
 800458c:	f080 8092 	bcs.w	80046b4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8a3a      	ldrh	r2, [r7, #16]
 8004594:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	2b20      	cmp	r3, #32
 800459e:	d02b      	beq.n	80045f8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0210 	bic.w	r2, r2, #16
 80045ec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fb96 	bl	8001d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004600:	b29b      	uxth	r3, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b29b      	uxth	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f864 	bl	80046d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800460e:	e051      	b.n	80046b4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d047      	beq.n	80046b8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004628:	8a7b      	ldrh	r3, [r7, #18]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d044      	beq.n	80046b8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800463c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0210 	bic.w	r2, r2, #16
 800466a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800466c:	8a7b      	ldrh	r3, [r7, #18]
 800466e:	4619      	mov	r1, r3
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f830 	bl	80046d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004676:	e01f      	b.n	80046b8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d008      	beq.n	8004694 <HAL_UART_IRQHandler+0x324>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f9a3 	bl	80049d8 <UART_Transmit_IT>
    return;
 8004692:	e012      	b.n	80046ba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_UART_IRQHandler+0x34a>
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f9e4 	bl	8004a76 <UART_EndTransmit_IT>
    return;
 80046ae:	e004      	b.n	80046ba <HAL_UART_IRQHandler+0x34a>
    return;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <HAL_UART_IRQHandler+0x34a>
      return;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_UART_IRQHandler+0x34a>
      return;
 80046b8:	bf00      	nop
  }
}
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	080049b1 	.word	0x080049b1

080046c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004702:	b2db      	uxtb	r3, r3
 8004704:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800470c:	b2db      	uxtb	r3, r3
 800470e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	4313      	orrs	r3, r2
 800471a:	b2db      	uxtb	r3, r3
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr

08004726 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004756:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004766:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004768:	e002      	b.n	8004770 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f00b fd1e 	bl	80101ac <HAL_UART_TxCpltCallback>
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff9c 	bl	80046c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b80      	cmp	r3, #128	; 0x80
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b21      	cmp	r3, #33	; 0x21
 80047c6:	d108      	bne.n	80047da <UART_DMAError+0x46>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047d4:	68b8      	ldr	r0, [r7, #8]
 80047d6:	f000 f8aa 	bl	800492e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b22      	cmp	r3, #34	; 0x22
 80047fa:	d108      	bne.n	800480e <UART_DMAError+0x7a>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2200      	movs	r2, #0
 8004806:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004808:	68b8      	ldr	r0, [r7, #8]
 800480a:	f000 f8a5 	bl	8004958 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0210 	orr.w	r2, r3, #16
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800481a:	68b8      	ldr	r0, [r7, #8]
 800481c:	f00b fd20 	bl	8010260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004838:	e02c      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d028      	beq.n	8004894 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0x30>
 8004848:	f7fc fd76 	bl	8001338 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	429a      	cmp	r2, r3
 8004856:	d21d      	bcs.n	8004894 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004866:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e00f      	b.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	79fb      	ldrb	r3, [r7, #7]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d0c3      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	88fa      	ldrh	r2, [r7, #6]
 80048da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2222      	movs	r2, #34	; 0x22
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004900:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0220 	orr.w	r2, r2, #32
 8004920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004944:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800496e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	2b01      	cmp	r3, #1
 8004986:	d107      	bne.n	8004998 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0210 	bic.w	r2, r2, #16
 8004996:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f00b fc48 	bl	8010260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b21      	cmp	r3, #33	; 0x21
 80049ea:	d13e      	bne.n	8004a6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f4:	d114      	bne.n	8004a20 <UART_Transmit_IT+0x48>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d110      	bne.n	8004a20 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	1c9a      	adds	r2, r3, #2
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	621a      	str	r2, [r3, #32]
 8004a1e:	e008      	b.n	8004a32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	1c59      	adds	r1, r3, #1
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6211      	str	r1, [r2, #32]
 8004a2a:	781a      	ldrb	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10f      	bne.n	8004a66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f00b fb88 	bl	80101ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b22      	cmp	r3, #34	; 0x22
 8004ab8:	f040 8099 	bne.w	8004bee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac4:	d117      	bne.n	8004af6 <UART_Receive_IT+0x50>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d113      	bne.n	8004af6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	1c9a      	adds	r2, r3, #2
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
 8004af4:	e026      	b.n	8004b44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d007      	beq.n	8004b1a <UART_Receive_IT+0x74>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10a      	bne.n	8004b28 <UART_Receive_IT+0x82>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e008      	b.n	8004b3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	4619      	mov	r1, r3
 8004b52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d148      	bne.n	8004bea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0220 	bic.w	r2, r2, #32
 8004b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d123      	bne.n	8004be0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0210 	bic.w	r2, r2, #16
 8004bac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d10a      	bne.n	8004bd2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fd7c 	bl	80046d6 <HAL_UARTEx_RxEventCallback>
 8004bde:	e002      	b.n	8004be6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f00b fb11 	bl	8010208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e002      	b.n	8004bf0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e000      	b.n	8004bf0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
  }
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c38:	f023 030c 	bic.w	r3, r3, #12
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	430b      	orrs	r3, r1
 8004c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a55      	ldr	r2, [pc, #340]	; (8004db8 <UART_SetConfig+0x1c0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d103      	bne.n	8004c6e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c66:	f7fe f8b9 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	e002      	b.n	8004c74 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7fe f8a1 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004c72:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7c:	d14c      	bne.n	8004d18 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	009a      	lsls	r2, r3, #2
 8004c88:	441a      	add	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	4a49      	ldr	r2, [pc, #292]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	0119      	lsls	r1, r3, #4
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009a      	lsls	r2, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb4:	4b41      	ldr	r3, [pc, #260]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004cb6:	fba3 0302 	umull	r0, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	2064      	movs	r0, #100	; 0x64
 8004cbe:	fb00 f303 	mul.w	r3, r0, r3
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	3332      	adds	r3, #50	; 0x32
 8004cc8:	4a3c      	ldr	r2, [pc, #240]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd6:	4419      	add	r1, r3
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009a      	lsls	r2, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004cf0:	fba3 0302 	umull	r0, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2064      	movs	r0, #100	; 0x64
 8004cf8:	fb00 f303 	mul.w	r3, r0, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a2e      	ldr	r2, [pc, #184]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 0207 	and.w	r2, r3, #7
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	440a      	add	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d16:	e04a      	b.n	8004dae <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009a      	lsls	r2, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	0119      	lsls	r1, r3, #4
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009a      	lsls	r2, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004d50:	fba3 0302 	umull	r0, r3, r3, r2
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	2064      	movs	r0, #100	; 0x64
 8004d58:	fb00 f303 	mul.w	r3, r0, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	3332      	adds	r3, #50	; 0x32
 8004d62:	4a16      	ldr	r2, [pc, #88]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d6e:	4419      	add	r1, r3
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009a      	lsls	r2, r3, #2
 8004d7a:	441a      	add	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004d88:	fba3 0302 	umull	r0, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2064      	movs	r0, #100	; 0x64
 8004d90:	fb00 f303 	mul.w	r3, r0, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3332      	adds	r3, #50	; 0x32
 8004d9a:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <UART_SetConfig+0x1c4>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	440a      	add	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40013800 	.word	0x40013800
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <OnRadioTxDone>:
 *        class c devices.
 */
static void OpenContinuousRx2Window( void );

static void OnRadioTxDone( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;
    TimerTime_t curTime = TimerGetCurrentTime( );
 8004dc6:	f00b f9a0 	bl	801010a <TimerGetCurrentTime>
 8004dca:	6178      	str	r0, [r7, #20]

    if( LoRaMacDeviceClass != CLASS_C )
 8004dcc:	4b49      	ldr	r3, [pc, #292]	; (8004ef4 <OnRadioTxDone+0x134>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d003      	beq.n	8004ddc <OnRadioTxDone+0x1c>
    {
        Radio.Sleep( );
 8004dd4:	4b48      	ldr	r3, [pc, #288]	; (8004ef8 <OnRadioTxDone+0x138>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	4798      	blx	r3
 8004dda:	e001      	b.n	8004de0 <OnRadioTxDone+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 8004ddc:	f002 fa14 	bl	8007208 <OpenContinuousRx2Window>
    }

    // Setup timers
    if ( IsRxWindowsEnabled == true ) {
 8004de0:	4b46      	ldr	r3, [pc, #280]	; (8004efc <OnRadioTxDone+0x13c>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d035      	beq.n	8004e54 <OnRadioTxDone+0x94>
        TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <OnRadioTxDone+0x140>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4619      	mov	r1, r3
 8004dee:	4845      	ldr	r0, [pc, #276]	; (8004f04 <OnRadioTxDone+0x144>)
 8004df0:	f00b f972 	bl	80100d8 <TimerSetValue>
        TimerStart( &RxWindowTimer1 );
 8004df4:	4843      	ldr	r0, [pc, #268]	; (8004f04 <OnRadioTxDone+0x144>)
 8004df6:	f00a ff6b 	bl	800fcd0 <TimerStart>
        if ( LoRaMacDeviceClass != CLASS_C ) {
 8004dfa:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <OnRadioTxDone+0x134>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d008      	beq.n	8004e14 <OnRadioTxDone+0x54>
            TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
 8004e02:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <OnRadioTxDone+0x148>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4840      	ldr	r0, [pc, #256]	; (8004f0c <OnRadioTxDone+0x14c>)
 8004e0a:	f00b f965 	bl	80100d8 <TimerSetValue>
            TimerStart( &RxWindowTimer2 );
 8004e0e:	483f      	ldr	r0, [pc, #252]	; (8004f0c <OnRadioTxDone+0x14c>)
 8004e10:	f00a ff5e 	bl	800fcd0 <TimerStart>
        }
        if ( ( LoRaMacDeviceClass == CLASS_C ) || ( NodeAckRequested == true ) ) {
 8004e14:	4b37      	ldr	r3, [pc, #220]	; (8004ef4 <OnRadioTxDone+0x134>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d003      	beq.n	8004e24 <OnRadioTxDone+0x64>
 8004e1c:	4b3c      	ldr	r3, [pc, #240]	; (8004f10 <OnRadioTxDone+0x150>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02b      	beq.n	8004e7c <OnRadioTxDone+0xbc>
            getPhy.Attribute = PHY_ACK_TIMEOUT;
 8004e24:	2312      	movs	r3, #18
 8004e26:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8004e28:	4b3a      	ldr	r3, [pc, #232]	; (8004f14 <OnRadioTxDone+0x154>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f107 0210 	add.w	r2, r7, #16
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f004 fe2c 	bl	8009a90 <RegionGetPhyParam>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + phyParam.Value );
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <OnRadioTxDone+0x148>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4413      	add	r3, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4834      	ldr	r0, [pc, #208]	; (8004f18 <OnRadioTxDone+0x158>)
 8004e48:	f00b f946 	bl	80100d8 <TimerSetValue>
            TimerStart( &AckTimeoutTimer );
 8004e4c:	4832      	ldr	r0, [pc, #200]	; (8004f18 <OnRadioTxDone+0x158>)
 8004e4e:	f00a ff3f 	bl	800fcd0 <TimerStart>
 8004e52:	e013      	b.n	8004e7c <OnRadioTxDone+0xbc>
        }
    } else {
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <OnRadioTxDone+0x15c>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	705a      	strb	r2, [r3, #1]
        LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8004e5a:	2004      	movs	r0, #4
 8004e5c:	f003 ffba 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>

        if ( LoRaMacFlags.Value == 0 ) {
 8004e60:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <OnRadioTxDone+0x160>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d104      	bne.n	8004e72 <OnRadioTxDone+0xb2>
            LoRaMacFlags.Bits.McpsReq = 1;
 8004e68:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <OnRadioTxDone+0x160>)
 8004e6a:	7813      	ldrb	r3, [r2, #0]
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	7013      	strb	r3, [r2, #0]
        }
        LoRaMacFlags.Bits.MacDone = 1;
 8004e72:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <OnRadioTxDone+0x160>)
 8004e74:	7813      	ldrb	r3, [r2, #0]
 8004e76:	f043 0320 	orr.w	r3, r3, #32
 8004e7a:	7013      	strb	r3, [r2, #0]
    }

    // Verify if the last uplink was a join request
    if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8004e7c:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <OnRadioTxDone+0x160>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <OnRadioTxDone+0xda>
 8004e8a:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <OnRadioTxDone+0x164>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <OnRadioTxDone+0xda>
        LastTxIsJoinRequest = true;
 8004e92:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <OnRadioTxDone+0x168>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e002      	b.n	8004ea0 <OnRadioTxDone+0xe0>
    } else {
        LastTxIsJoinRequest = false;
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <OnRadioTxDone+0x168>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
    }

    // Store last Tx channel
    LastTxChannel = Channel;
 8004ea0:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <OnRadioTxDone+0x16c>)
 8004ea2:	781a      	ldrb	r2, [r3, #0]
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <OnRadioTxDone+0x170>)
 8004ea6:	701a      	strb	r2, [r3, #0]
    // Update last tx done time for the current channel
    txDone.Channel = Channel;
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <OnRadioTxDone+0x16c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	713b      	strb	r3, [r7, #4]
    txDone.Joined = IsLoRaMacNetworkJoined;
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <OnRadioTxDone+0x174>)
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	717b      	strb	r3, [r7, #5]
    txDone.LastTxDoneTime = curTime;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	60bb      	str	r3, [r7, #8]
    RegionSetBandTxDone( LoRaMacRegion, &txDone );
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <OnRadioTxDone+0x154>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	1d3a      	adds	r2, r7, #4
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f004 fdfe 	bl	8009ac2 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    AggregatedLastTxDoneTime = curTime;
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <OnRadioTxDone+0x178>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6013      	str	r3, [r2, #0]

    if ( NodeAckRequested == false ) {
 8004ecc:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <OnRadioTxDone+0x150>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	f083 0301 	eor.w	r3, r3, #1
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d008      	beq.n	8004eec <OnRadioTxDone+0x12c>
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <OnRadioTxDone+0x15c>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	705a      	strb	r2, [r3, #1]
        ChannelsNbRepCounter++;
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <OnRadioTxDone+0x17c>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <OnRadioTxDone+0x17c>)
 8004eea:	701a      	strb	r2, [r3, #0]
    }
}
 8004eec:	bf00      	nop
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000148 	.word	0x20000148
 8004ef8:	08012794 	.word	0x08012794
 8004efc:	20000008 	.word	0x20000008
 8004f00:	20000a70 	.word	0x20000a70
 8004f04:	20000a00 	.word	0x20000a00
 8004f08:	20000af8 	.word	0x20000af8
 8004f0c:	200009a8 	.word	0x200009a8
 8004f10:	20000360 	.word	0x20000360
 8004f14:	20000110 	.word	0x20000110
 8004f18:	20000ad0 	.word	0x20000ad0
 8004f1c:	200009c0 	.word	0x200009c0
 8004f20:	20000a18 	.word	0x20000a18
 8004f24:	20000994 	.word	0x20000994
 8004f28:	20000477 	.word	0x20000477
 8004f2c:	20000475 	.word	0x20000475
 8004f30:	20000476 	.word	0x20000476
 8004f34:	20000359 	.word	0x20000359
 8004f38:	2000046c 	.word	0x2000046c
 8004f3c:	20000468 	.word	0x20000468

08004f40 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
    LoRaMacState |= LORAMAC_RX_ABORT;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <PrepareRxDoneAbort+0x38>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4c:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <PrepareRxDoneAbort+0x38>)
 8004f4e:	6013      	str	r3, [r2, #0]

    if ( NodeAckRequested ) {
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <PrepareRxDoneAbort+0x3c>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( );
 8004f58:	f001 f940 	bl	80061dc <OnAckTimeoutTimerEvent>
    }

    LoRaMacFlags.Bits.McpsInd = 1;
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <PrepareRxDoneAbort+0x40>)
 8004f5e:	7813      	ldrb	r3, [r2, #0]
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	7013      	strb	r3, [r2, #0]
    LoRaMacFlags.Bits.MacDone = 1;
 8004f66:	4a06      	ldr	r2, [pc, #24]	; (8004f80 <PrepareRxDoneAbort+0x40>)
 8004f68:	7813      	ldrb	r3, [r2, #0]
 8004f6a:	f043 0320 	orr.w	r3, r3, #32
 8004f6e:	7013      	strb	r3, [r2, #0]

    // Trig OnMacCheckTimerEvent call as soon as possible
    OnMacStateCheckTimerEvent();
 8004f70:	f000 fda2 	bl	8005ab8 <OnMacStateCheckTimerEvent>
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2000047c 	.word	0x2000047c
 8004f7c:	20000360 	.word	0x20000360
 8004f80:	20000a18 	.word	0x20000a18

08004f84 <OnRadioRxDone>:

void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b09d      	sub	sp, #116	; 0x74
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	817b      	strh	r3, [r7, #10]
 8004f96:	460b      	mov	r3, r1
 8004f98:	813b      	strh	r3, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t * temp = payload;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	64bb      	str	r3, [r7, #72]	; 0x48
    LoRaMacFrameCtrl_t fCtrl;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    uint8_t pktHeaderLen = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t address = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t appPayloadStartIndex = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t port = 0xFF;
 8004fb2:	23ff      	movs	r3, #255	; 0xff
 8004fb4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t frameLen = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint32_t mic = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
    uint32_t micRx = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t sequenceCounter = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t sequenceCounterPrev = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t sequenceCounterDiff = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	867b      	strh	r3, [r7, #50]	; 0x32
    uint32_t downLinkCounter = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	65fb      	str	r3, [r7, #92]	; 0x5c

    MulticastParams_t *curMulticastParams = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *nwkSKey = LoRaMacNwkSKey;
 8004fda:	4b99      	ldr	r3, [pc, #612]	; (8005240 <OnRadioRxDone+0x2bc>)
 8004fdc:	657b      	str	r3, [r7, #84]	; 0x54
    uint8_t *appSKey = LoRaMacAppSKey;
 8004fde:	4b99      	ldr	r3, [pc, #612]	; (8005244 <OnRadioRxDone+0x2c0>)
 8004fe0:	653b      	str	r3, [r7, #80]	; 0x50

    uint8_t multicast = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    bool isMicOk = false;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    McpsConfirm.AckReceived = false;
 8004fee:	4b96      	ldr	r3, [pc, #600]	; (8005248 <OnRadioRxDone+0x2c4>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	711a      	strb	r2, [r3, #4]
    McpsIndication.Rssi = rssi;
 8004ff4:	4a95      	ldr	r2, [pc, #596]	; (800524c <OnRadioRxDone+0x2c8>)
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	81d3      	strh	r3, [r2, #14]
    McpsIndication.Snr = snr;
 8004ffa:	4a94      	ldr	r2, [pc, #592]	; (800524c <OnRadioRxDone+0x2c8>)
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	7413      	strb	r3, [r2, #16]
    McpsIndication.RxSlot = RxSlot;
 8005000:	4b93      	ldr	r3, [pc, #588]	; (8005250 <OnRadioRxDone+0x2cc>)
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	4b91      	ldr	r3, [pc, #580]	; (800524c <OnRadioRxDone+0x2c8>)
 8005006:	745a      	strb	r2, [r3, #17]
    McpsIndication.Port = 0;
 8005008:	4b90      	ldr	r3, [pc, #576]	; (800524c <OnRadioRxDone+0x2c8>)
 800500a:	2200      	movs	r2, #0
 800500c:	70da      	strb	r2, [r3, #3]
    McpsIndication.Multicast = 0;
 800500e:	4b8f      	ldr	r3, [pc, #572]	; (800524c <OnRadioRxDone+0x2c8>)
 8005010:	2200      	movs	r2, #0
 8005012:	709a      	strb	r2, [r3, #2]
    McpsIndication.FramePending = 0;
 8005014:	4b8d      	ldr	r3, [pc, #564]	; (800524c <OnRadioRxDone+0x2c8>)
 8005016:	2200      	movs	r2, #0
 8005018:	715a      	strb	r2, [r3, #5]
    McpsIndication.Buffer = NULL;
 800501a:	4b8c      	ldr	r3, [pc, #560]	; (800524c <OnRadioRxDone+0x2c8>)
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
    McpsIndication.BufferSize = 0;
 8005020:	4b8a      	ldr	r3, [pc, #552]	; (800524c <OnRadioRxDone+0x2c8>)
 8005022:	2200      	movs	r2, #0
 8005024:	731a      	strb	r2, [r3, #12]
    McpsIndication.RxData = false;
 8005026:	4b89      	ldr	r3, [pc, #548]	; (800524c <OnRadioRxDone+0x2c8>)
 8005028:	2200      	movs	r2, #0
 800502a:	735a      	strb	r2, [r3, #13]
    McpsIndication.AckReceived = false;
 800502c:	4b87      	ldr	r3, [pc, #540]	; (800524c <OnRadioRxDone+0x2c8>)
 800502e:	2200      	movs	r2, #0
 8005030:	749a      	strb	r2, [r3, #18]
    McpsIndication.DownLinkCounter = 0;
 8005032:	4b86      	ldr	r3, [pc, #536]	; (800524c <OnRadioRxDone+0x2c8>)
 8005034:	2200      	movs	r2, #0
 8005036:	615a      	str	r2, [r3, #20]
    McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8005038:	4b84      	ldr	r3, [pc, #528]	; (800524c <OnRadioRxDone+0x2c8>)
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]

    Radio.Sleep( );
 800503e:	4b85      	ldr	r3, [pc, #532]	; (8005254 <OnRadioRxDone+0x2d0>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4798      	blx	r3
    TimerStop( &RxWindowTimer2 );
 8005044:	4884      	ldr	r0, [pc, #528]	; (8005258 <OnRadioRxDone+0x2d4>)
 8005046:	f00a ff8b 	bl	800ff60 <TimerStop>



    macHdr.Value = payload[pktHeaderLen++];
 800504a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005054:	461a      	mov	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    switch ( macHdr.Bits.MType ) {
 8005060:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005064:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8005068:	b2db      	uxtb	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	2b06      	cmp	r3, #6
 800506e:	f200 83fd 	bhi.w	800586c <OnRadioRxDone+0x8e8>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <OnRadioRxDone+0xf4>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005095 	.word	0x08005095
 800507c:	0800586d 	.word	0x0800586d
 8005080:	08005285 	.word	0x08005285
 8005084:	0800586d 	.word	0x0800586d
 8005088:	08005285 	.word	0x08005285
 800508c:	0800586d 	.word	0x0800586d
 8005090:	0800582d 	.word	0x0800582d
        case FRAME_TYPE_JOIN_ACCEPT:
            if ( IsLoRaMacNetworkJoined == true ) {
 8005094:	4b71      	ldr	r3, [pc, #452]	; (800525c <OnRadioRxDone+0x2d8>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d006      	beq.n	80050aa <OnRadioRxDone+0x126>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800509c:	4b6b      	ldr	r3, [pc, #428]	; (800524c <OnRadioRxDone+0x2c8>)
 800509e:	2201      	movs	r2, #1
 80050a0:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 80050a2:	f7ff ff4d 	bl	8004f40 <PrepareRxDoneAbort>
                return;
 80050a6:	f000 bc04 	b.w	80058b2 <OnRadioRxDone+0x92e>
            }
            LoRaMacJoinDecrypt( payload + 1, size - 1, LoRaMacAppKey, LoRaMacRxPayload + 1 );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1c58      	adds	r0, r3, #1
 80050ae:	897b      	ldrh	r3, [r7, #10]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b299      	uxth	r1, r3
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <OnRadioRxDone+0x2dc>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <OnRadioRxDone+0x2e0>)
 80050ba:	f004 f8a1 	bl	8009200 <LoRaMacJoinDecrypt>

            LoRaMacRxPayload[0] = macHdr.Value;
 80050be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80050c2:	4b69      	ldr	r3, [pc, #420]	; (8005268 <OnRadioRxDone+0x2e4>)
 80050c4:	701a      	strb	r2, [r3, #0]

            LoRaMacJoinComputeMic( LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic );
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	3b04      	subs	r3, #4
 80050ca:	b299      	uxth	r1, r3
 80050cc:	4b64      	ldr	r3, [pc, #400]	; (8005260 <OnRadioRxDone+0x2dc>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	f107 0310 	add.w	r3, r7, #16
 80050d4:	4864      	ldr	r0, [pc, #400]	; (8005268 <OnRadioRxDone+0x2e4>)
 80050d6:	f004 f861 	bl	800919c <LoRaMacJoinComputeMic>

            micRx |= ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	3b04      	subs	r3, #4
 80050de:	4a62      	ldr	r2, [pc, #392]	; (8005268 <OnRadioRxDone+0x2e4>)
 80050e0:	5cd3      	ldrb	r3, [r2, r3]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	4313      	orrs	r3, r2
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	3b03      	subs	r3, #3
 80050ee:	4a5e      	ldr	r2, [pc, #376]	; (8005268 <OnRadioRxDone+0x2e4>)
 80050f0:	5cd3      	ldrb	r3, [r2, r3]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f6:	4313      	orrs	r3, r2
 80050f8:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	3b02      	subs	r3, #2
 80050fe:	4a5a      	ldr	r2, [pc, #360]	; (8005268 <OnRadioRxDone+0x2e4>)
 8005100:	5cd3      	ldrb	r3, [r2, r3]
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005106:	4313      	orrs	r3, r2
 8005108:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 800510a:	897b      	ldrh	r3, [r7, #10]
 800510c:	3b01      	subs	r3, #1
 800510e:	4a56      	ldr	r2, [pc, #344]	; (8005268 <OnRadioRxDone+0x2e4>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005116:	4313      	orrs	r3, r2
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
            if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800511a:	2000      	movs	r0, #0
 800511c:	f003 fe96 	bl	8008e4c <LoRaMacConfirmQueueIsCmdActive>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 83a8 	beq.w	8005878 <OnRadioRxDone+0x8f4>
            {
                if( micRx == mic ) {
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512c:	429a      	cmp	r2, r3
 800512e:	f040 8081 	bne.w	8005234 <OnRadioRxDone+0x2b0>
                    LoRaMacJoinComputeSKeys( LoRaMacAppKey, LoRaMacRxPayload + 1, LoRaMacDevNonce, LoRaMacNwkSKey, LoRaMacAppSKey );
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <OnRadioRxDone+0x2dc>)
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	494b      	ldr	r1, [pc, #300]	; (8005264 <OnRadioRxDone+0x2e0>)
 8005138:	4b4c      	ldr	r3, [pc, #304]	; (800526c <OnRadioRxDone+0x2e8>)
 800513a:	881a      	ldrh	r2, [r3, #0]
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <OnRadioRxDone+0x2c0>)
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <OnRadioRxDone+0x2bc>)
 8005142:	f004 f887 	bl	8009254 <LoRaMacJoinComputeSKeys>

                    LoRaMacNetID = ( uint32_t )LoRaMacRxPayload[4];
 8005146:	4b48      	ldr	r3, [pc, #288]	; (8005268 <OnRadioRxDone+0x2e4>)
 8005148:	791b      	ldrb	r3, [r3, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	4b48      	ldr	r3, [pc, #288]	; (8005270 <OnRadioRxDone+0x2ec>)
 800514e:	601a      	str	r2, [r3, #0]
                    LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[5] << 8 );
 8005150:	4b45      	ldr	r3, [pc, #276]	; (8005268 <OnRadioRxDone+0x2e4>)
 8005152:	795b      	ldrb	r3, [r3, #5]
 8005154:	021a      	lsls	r2, r3, #8
 8005156:	4b46      	ldr	r3, [pc, #280]	; (8005270 <OnRadioRxDone+0x2ec>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	4a44      	ldr	r2, [pc, #272]	; (8005270 <OnRadioRxDone+0x2ec>)
 800515e:	6013      	str	r3, [r2, #0]
                    LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 8005160:	4b41      	ldr	r3, [pc, #260]	; (8005268 <OnRadioRxDone+0x2e4>)
 8005162:	799b      	ldrb	r3, [r3, #6]
 8005164:	041a      	lsls	r2, r3, #16
 8005166:	4b42      	ldr	r3, [pc, #264]	; (8005270 <OnRadioRxDone+0x2ec>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4313      	orrs	r3, r2
 800516c:	4a40      	ldr	r2, [pc, #256]	; (8005270 <OnRadioRxDone+0x2ec>)
 800516e:	6013      	str	r3, [r2, #0]

                    LoRaMacDevAddr = ( uint32_t )LoRaMacRxPayload[7];
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <OnRadioRxDone+0x2e4>)
 8005172:	79db      	ldrb	r3, [r3, #7]
 8005174:	461a      	mov	r2, r3
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <OnRadioRxDone+0x2f0>)
 8005178:	601a      	str	r2, [r3, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[8] << 8 );
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <OnRadioRxDone+0x2e4>)
 800517c:	7a1b      	ldrb	r3, [r3, #8]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <OnRadioRxDone+0x2f0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4313      	orrs	r3, r2
 8005186:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <OnRadioRxDone+0x2f0>)
 8005188:	6013      	str	r3, [r2, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[9] << 16 );
 800518a:	4b37      	ldr	r3, [pc, #220]	; (8005268 <OnRadioRxDone+0x2e4>)
 800518c:	7a5b      	ldrb	r3, [r3, #9]
 800518e:	041a      	lsls	r2, r3, #16
 8005190:	4b38      	ldr	r3, [pc, #224]	; (8005274 <OnRadioRxDone+0x2f0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	4a37      	ldr	r2, [pc, #220]	; (8005274 <OnRadioRxDone+0x2f0>)
 8005198:	6013      	str	r3, [r2, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 800519a:	4b33      	ldr	r3, [pc, #204]	; (8005268 <OnRadioRxDone+0x2e4>)
 800519c:	7a9b      	ldrb	r3, [r3, #10]
 800519e:	061a      	lsls	r2, r3, #24
 80051a0:	4b34      	ldr	r3, [pc, #208]	; (8005274 <OnRadioRxDone+0x2f0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	4a33      	ldr	r2, [pc, #204]	; (8005274 <OnRadioRxDone+0x2f0>)
 80051a8:	6013      	str	r3, [r2, #0]

                    // DLSettings
                    LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 80051aa:	4b2f      	ldr	r3, [pc, #188]	; (8005268 <OnRadioRxDone+0x2e4>)
 80051ac:	7adb      	ldrb	r3, [r3, #11]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    LoRaMacParams.Rx2Channel.Datarate = LoRaMacRxPayload[11] & 0x0F;
 80051be:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <OnRadioRxDone+0x2e4>)
 80051c0:	7adb      	ldrb	r3, [r3, #11]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                    // RxDelay
                    LoRaMacParams.ReceiveDelay1 = ( LoRaMacRxPayload[12] & 0x0F );
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <OnRadioRxDone+0x2e4>)
 80051d0:	7b1b      	ldrb	r3, [r3, #12]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	4a28      	ldr	r2, [pc, #160]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051d8:	6113      	str	r3, [r2, #16]
                    if( LoRaMacParams.ReceiveDelay1 == 0 ) {
 80051da:	4b27      	ldr	r3, [pc, #156]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <OnRadioRxDone+0x264>
                        LoRaMacParams.ReceiveDelay1 = 1;
 80051e2:	4b25      	ldr	r3, [pc, #148]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	611a      	str	r2, [r3, #16]
                    }
                    LoRaMacParams.ReceiveDelay1 *= 1000;
 80051e8:	4b23      	ldr	r3, [pc, #140]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051f6:	6113      	str	r3, [r2, #16]
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 80051f8:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <OnRadioRxDone+0x2f4>)
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005200:	4a1d      	ldr	r2, [pc, #116]	; (8005278 <OnRadioRxDone+0x2f4>)
 8005202:	6153      	str	r3, [r2, #20]
                    // Apply CF list
                    applyCFList.Payload = &LoRaMacRxPayload[13];
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <OnRadioRxDone+0x2f8>)
 8005206:	61fb      	str	r3, [r7, #28]
                    // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                    applyCFList.Size = size - 17;
 8005208:	897b      	ldrh	r3, [r7, #10]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3b11      	subs	r3, #17
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f887 3020 	strb.w	r3, [r7, #32]

                    RegionApplyCFList( LoRaMacRegion, &applyCFList );
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <OnRadioRxDone+0x2fc>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f107 021c 	add.w	r2, r7, #28
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f004 fc8c 	bl	8009b3c <RegionApplyCFList>

                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8005224:	2100      	movs	r1, #0
 8005226:	2000      	movs	r0, #0
 8005228:	f003 fd84 	bl	8008d34 <LoRaMacConfirmQueueSetStatus>
                    IsLoRaMacNetworkJoined = true;
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <OnRadioRxDone+0x2d8>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
//                	LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
            	} else {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 8005232:	e321      	b.n	8005878 <OnRadioRxDone+0x8f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8005234:	2100      	movs	r1, #0
 8005236:	2007      	movs	r0, #7
 8005238:	f003 fd7c 	bl	8008d34 <LoRaMacConfirmQueueSetStatus>
            break;
 800523c:	e31c      	b.n	8005878 <OnRadioRxDone+0x8f4>
 800523e:	bf00      	nop
 8005240:	2000011c 	.word	0x2000011c
 8005244:	2000012c 	.word	0x2000012c
 8005248:	200009c0 	.word	0x200009c0
 800524c:	200009e8 	.word	0x200009e8
 8005250:	20000a74 	.word	0x20000a74
 8005254:	08012794 	.word	0x08012794
 8005258:	200009a8 	.word	0x200009a8
 800525c:	20000359 	.word	0x20000359
 8005260:	20000acc 	.word	0x20000acc
 8005264:	20000251 	.word	0x20000251
 8005268:	20000250 	.word	0x20000250
 800526c:	20000a58 	.word	0x20000a58
 8005270:	2000013c 	.word	0x2000013c
 8005274:	20000140 	.word	0x20000140
 8005278:	20000a78 	.word	0x20000a78
 800527c:	2000025d 	.word	0x2000025d
 8005280:	20000110 	.word	0x20000110
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN: {
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8005284:	4bad      	ldr	r3, [pc, #692]	; (800553c <OnRadioRxDone+0x5b8>)
 8005286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800528a:	76bb      	strb	r3, [r7, #26]
            getPhy.Datarate = McpsIndication.RxDatarate;
 800528c:	4bac      	ldr	r3, [pc, #688]	; (8005540 <OnRadioRxDone+0x5bc>)
 800528e:	791b      	ldrb	r3, [r3, #4]
 8005290:	b25b      	sxtb	r3, r3
 8005292:	767b      	strb	r3, [r7, #25]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8005294:	2309      	movs	r3, #9
 8005296:	763b      	strb	r3, [r7, #24]

            // Get the maximum payload length
            if( LoRaMacParams.RepeaterSupport == true ) {
 8005298:	4ba8      	ldr	r3, [pc, #672]	; (800553c <OnRadioRxDone+0x5b8>)
 800529a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <OnRadioRxDone+0x322>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80052a2:	230a      	movs	r3, #10
 80052a4:	763b      	strb	r3, [r7, #24]
            }
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80052a6:	4ba7      	ldr	r3, [pc, #668]	; (8005544 <OnRadioRxDone+0x5c0>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	f107 0218 	add.w	r2, r7, #24
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f004 fbed 	bl	8009a90 <RegionGetPhyParam>
 80052b6:	4603      	mov	r3, r0
 80052b8:	617b      	str	r3, [r7, #20]
            if ( MAX( 0, ( int16_t )( ( int16_t )size - ( int16_t )LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > phyParam.Value ) {
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	3b0d      	subs	r3, #13
 80052be:	b29b      	uxth	r3, r3
 80052c0:	b21b      	sxth	r3, r3
 80052c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d905      	bls.n	80052dc <OnRadioRxDone+0x358>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80052d0:	4b9b      	ldr	r3, [pc, #620]	; (8005540 <OnRadioRxDone+0x5bc>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 80052d6:	f7ff fe33 	bl	8004f40 <PrepareRxDoneAbort>
                return;
 80052da:	e2ea      	b.n	80058b2 <OnRadioRxDone+0x92e>
            }

            address = payload[pktHeaderLen++];
 80052dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 8 );
 80052f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80052fa:	461a      	mov	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005306:	4313      	orrs	r3, r2
 8005308:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 16 );
 800530a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005314:	461a      	mov	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005320:	4313      	orrs	r3, r2
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 24 );
 8005324:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800532e:	461a      	mov	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	061b      	lsls	r3, r3, #24
 8005338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800533a:	4313      	orrs	r3, r2
 800533c:	643b      	str	r3, [r7, #64]	; 0x40

            fCtrl.Value = payload[pktHeaderLen++];
 800533e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005348:	461a      	mov	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if ( address != LoRaMacDevAddr ) {
 8005354:	4b7c      	ldr	r3, [pc, #496]	; (8005548 <OnRadioRxDone+0x5c4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800535a:	429a      	cmp	r2, r3
 800535c:	d040      	beq.n	80053e0 <OnRadioRxDone+0x45c>
                curMulticastParams = MulticastChannels;
 800535e:	4b7b      	ldr	r3, [pc, #492]	; (800554c <OnRadioRxDone+0x5c8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	65bb      	str	r3, [r7, #88]	; 0x58
                while ( curMulticastParams != NULL ) {
 8005364:	e014      	b.n	8005390 <OnRadioRxDone+0x40c>
                    if ( address == curMulticastParams->Address ) {
 8005366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800536c:	429a      	cmp	r2, r3
 800536e:	d10c      	bne.n	800538a <OnRadioRxDone+0x406>
                        multicast = 1;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        nwkSKey = curMulticastParams->NwkSKey;
 8005376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005378:	3304      	adds	r3, #4
 800537a:	657b      	str	r3, [r7, #84]	; 0x54
                        appSKey = curMulticastParams->AppSKey;
 800537c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800537e:	3314      	adds	r3, #20
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
                        downLinkCounter = curMulticastParams->DownLinkCounter;
 8005382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	65fb      	str	r3, [r7, #92]	; 0x5c
                        break;
 8005388:	e005      	b.n	8005396 <OnRadioRxDone+0x412>
                    }
                    curMulticastParams = curMulticastParams->Next;
 800538a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	65bb      	str	r3, [r7, #88]	; 0x58
                while ( curMulticastParams != NULL ) {
 8005390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e7      	bne.n	8005366 <OnRadioRxDone+0x3e2>
                }
                if ( multicast == 0 ) {
 8005396:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800539a:	2b00      	cmp	r3, #0
 800539c:	d105      	bne.n	80053aa <OnRadioRxDone+0x426>
                    // We are not the destination of this frame.
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800539e:	4b68      	ldr	r3, [pc, #416]	; (8005540 <OnRadioRxDone+0x5bc>)
 80053a0:	220b      	movs	r2, #11
 80053a2:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 80053a4:	f7ff fdcc 	bl	8004f40 <PrepareRxDoneAbort>
                    return;
 80053a8:	e283      	b.n	80058b2 <OnRadioRxDone+0x92e>
                }
                if( ( macHdr.Bits.MType != FRAME_TYPE_DATA_UNCONFIRMED_DOWN ) ||
 80053aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053ae:	f023 031f 	bic.w	r3, r3, #31
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b60      	cmp	r3, #96	; 0x60
 80053b6:	d10d      	bne.n	80053d4 <OnRadioRxDone+0x450>
                        ( fCtrl.Bits.Ack == 1 ) ||
 80053b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	b2db      	uxtb	r3, r3
                if( ( macHdr.Bits.MType != FRAME_TYPE_DATA_UNCONFIRMED_DOWN ) ||
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <OnRadioRxDone+0x450>
                        ( fCtrl.Bits.AdrAckReq == 1 ) ) {
 80053c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ce:	b2db      	uxtb	r3, r3
                        ( fCtrl.Bits.Ack == 1 ) ||
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00f      	beq.n	80053f4 <OnRadioRxDone+0x470>
                    // Wrong multicast message format. Refer to chapter 11.2.2 of the specification
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MULTICAST_FAIL;
 80053d4:	4b5a      	ldr	r3, [pc, #360]	; (8005540 <OnRadioRxDone+0x5bc>)
 80053d6:	220d      	movs	r2, #13
 80053d8:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 80053da:	f7ff fdb1 	bl	8004f40 <PrepareRxDoneAbort>
                    return;
 80053de:	e268      	b.n	80058b2 <OnRadioRxDone+0x92e>
                }
            } else {
                multicast = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                nwkSKey = LoRaMacNwkSKey;
 80053e6:	4b5a      	ldr	r3, [pc, #360]	; (8005550 <OnRadioRxDone+0x5cc>)
 80053e8:	657b      	str	r3, [r7, #84]	; 0x54
                appSKey = LoRaMacAppSKey;
 80053ea:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <OnRadioRxDone+0x5d0>)
 80053ec:	653b      	str	r3, [r7, #80]	; 0x50
                downLinkCounter = DownLinkCounter;
 80053ee:	4b5a      	ldr	r3, [pc, #360]	; (8005558 <OnRadioRxDone+0x5d4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	65fb      	str	r3, [r7, #92]	; 0x5c
            }

            sequenceCounter = ( uint16_t )payload[pktHeaderLen++];
 80053f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	4413      	add	r3, r2
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	86fb      	strh	r3, [r7, #54]	; 0x36
            sequenceCounter |= ( uint16_t )payload[pktHeaderLen++] << 8;
 8005408:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	b21a      	sxth	r2, r3
 800541e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005422:	4313      	orrs	r3, r2
 8005424:	b21b      	sxth	r3, r3
 8005426:	86fb      	strh	r3, [r7, #54]	; 0x36

            appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 8005428:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800542c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005430:	b2db      	uxtb	r3, r3
 8005432:	3308      	adds	r3, #8
 8005434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            micRx |= ( uint32_t )payload[size - LORAMAC_MFR_LEN];
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	3b04      	subs	r3, #4
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	4313      	orrs	r3, r2
 8005448:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 1] << 8 );
 800544a:	897b      	ldrh	r3, [r7, #10]
 800544c:	3b03      	subs	r3, #3
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005458:	4313      	orrs	r3, r2
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	3b02      	subs	r3, #2
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546a:	4313      	orrs	r3, r2
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	3b01      	subs	r3, #1
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800547c:	4313      	orrs	r3, r2
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38

            sequenceCounterPrev = ( uint16_t )downLinkCounter;
 8005480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005482:	86bb      	strh	r3, [r7, #52]	; 0x34
            sequenceCounterDiff = ( sequenceCounter - sequenceCounterPrev );
 8005484:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005486:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	867b      	strh	r3, [r7, #50]	; 0x32

            if ( sequenceCounterDiff < ( 1 << 15 ) ) {
 800548c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005490:	2b00      	cmp	r3, #0
 8005492:	db1a      	blt.n	80054ca <OnRadioRxDone+0x546>
                downLinkCounter += sequenceCounterDiff;
 8005494:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005496:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005498:	4413      	add	r3, r2
 800549a:	65fb      	str	r3, [r7, #92]	; 0x5c
                LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 800549c:	897b      	ldrh	r3, [r7, #10]
 800549e:	3b04      	subs	r3, #4
 80054a0:	b299      	uxth	r1, r3
 80054a2:	f107 0310 	add.w	r3, r7, #16
 80054a6:	9302      	str	r3, [sp, #8]
 80054a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	2301      	movs	r3, #1
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f003 fd4d 	bl	8008f54 <LoRaMacComputeMic>
                if ( micRx == mic ) {
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054be:	429a      	cmp	r2, r3
 80054c0:	d123      	bne.n	800550a <OnRadioRxDone+0x586>
                    isMicOk = true;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80054c8:	e01f      	b.n	800550a <OnRadioRxDone+0x586>
                }
            } else {
                // check for sequence roll-over
                uint32_t  downLinkCounterTmp = downLinkCounter + 0x10000 + ( int16_t )sequenceCounterDiff;
 80054ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80054ce:	461a      	mov	r2, r3
 80054d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic );
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	3b04      	subs	r3, #4
 80054de:	b299      	uxth	r1, r3
 80054e0:	f107 0310 	add.w	r3, r7, #16
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	2301      	movs	r3, #1
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f003 fd2e 	bl	8008f54 <LoRaMacComputeMic>
                if ( micRx == mic ) {
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d104      	bne.n	800550a <OnRadioRxDone+0x586>
                    isMicOk = true;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    downLinkCounter = downLinkCounterTmp;
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
            }

            // Check for a the maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800550a:	2311      	movs	r3, #17
 800550c:	763b      	strb	r3, [r7, #24]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <OnRadioRxDone+0x5c0>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	f107 0218 	add.w	r2, r7, #24
 8005516:	4611      	mov	r1, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f004 fab9 	bl	8009a90 <RegionGetPhyParam>
 800551e:	4603      	mov	r3, r0
 8005520:	617b      	str	r3, [r7, #20]
            if ( sequenceCounterDiff >= phyParam.Value ) {
 8005522:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	429a      	cmp	r2, r3
 8005528:	d318      	bcc.n	800555c <OnRadioRxDone+0x5d8>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <OnRadioRxDone+0x5bc>)
 800552c:	220a      	movs	r2, #10
 800552e:	705a      	strb	r2, [r3, #1]
                McpsIndication.DownLinkCounter = downLinkCounter;
 8005530:	4a03      	ldr	r2, [pc, #12]	; (8005540 <OnRadioRxDone+0x5bc>)
 8005532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005534:	6153      	str	r3, [r2, #20]
                PrepareRxDoneAbort( );
 8005536:	f7ff fd03 	bl	8004f40 <PrepareRxDoneAbort>
                return;
 800553a:	e1ba      	b.n	80058b2 <OnRadioRxDone+0x92e>
 800553c:	20000a78 	.word	0x20000a78
 8005540:	200009e8 	.word	0x200009e8
 8005544:	20000110 	.word	0x20000110
 8005548:	20000140 	.word	0x20000140
 800554c:	20000144 	.word	0x20000144
 8005550:	2000011c 	.word	0x2000011c
 8005554:	2000012c 	.word	0x2000012c
 8005558:	20000354 	.word	0x20000354
            }

            if ( isMicOk == true ) {
 800555c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 814a 	beq.w	80057fa <OnRadioRxDone+0x876>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005566:	4ba8      	ldr	r3, [pc, #672]	; (8005808 <OnRadioRxDone+0x884>)
 8005568:	2200      	movs	r2, #0
 800556a:	705a      	strb	r2, [r3, #1]
                McpsIndication.Multicast = multicast;
 800556c:	4aa6      	ldr	r2, [pc, #664]	; (8005808 <OnRadioRxDone+0x884>)
 800556e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005572:	7093      	strb	r3, [r2, #2]
                McpsIndication.FramePending = fCtrl.Bits.FPending;
 8005574:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005578:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	4ba1      	ldr	r3, [pc, #644]	; (8005808 <OnRadioRxDone+0x884>)
 8005582:	715a      	strb	r2, [r3, #5]
                McpsIndication.Buffer = NULL;
 8005584:	4ba0      	ldr	r3, [pc, #640]	; (8005808 <OnRadioRxDone+0x884>)
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
                McpsIndication.BufferSize = 0;
 800558a:	4b9f      	ldr	r3, [pc, #636]	; (8005808 <OnRadioRxDone+0x884>)
 800558c:	2200      	movs	r2, #0
 800558e:	731a      	strb	r2, [r3, #12]
                McpsIndication.DownLinkCounter = downLinkCounter;
 8005590:	4a9d      	ldr	r2, [pc, #628]	; (8005808 <OnRadioRxDone+0x884>)
 8005592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005594:	6153      	str	r3, [r2, #20]
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005596:	4b9d      	ldr	r3, [pc, #628]	; (800580c <OnRadioRxDone+0x888>)
 8005598:	2200      	movs	r2, #0
 800559a:	705a      	strb	r2, [r3, #1]

                AdrAckCounter = 0;
 800559c:	4b9c      	ldr	r3, [pc, #624]	; (8005810 <OnRadioRxDone+0x88c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]
                MacCommandsBufferToRepeatIndex = 0;
 80055a2:	4b9c      	ldr	r3, [pc, #624]	; (8005814 <OnRadioRxDone+0x890>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]

                // Update 32 bits downlink counter
                if ( multicast == 1 ) {
 80055a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d118      	bne.n	80055e2 <OnRadioRxDone+0x65e>
                    McpsIndication.McpsIndication = MCPS_MULTICAST;
 80055b0:	4b95      	ldr	r3, [pc, #596]	; (8005808 <OnRadioRxDone+0x884>)
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]

                    if ( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 80055b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055bc:	429a      	cmp	r2, r3
 80055be:	d10c      	bne.n	80055da <OnRadioRxDone+0x656>
                         ( curMulticastParams->DownLinkCounter != 0 ) ) {
 80055c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    if ( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <OnRadioRxDone+0x656>
                        McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80055c8:	4b8f      	ldr	r3, [pc, #572]	; (8005808 <OnRadioRxDone+0x884>)
 80055ca:	2208      	movs	r2, #8
 80055cc:	705a      	strb	r2, [r3, #1]
                        McpsIndication.DownLinkCounter = downLinkCounter;
 80055ce:	4a8e      	ldr	r2, [pc, #568]	; (8005808 <OnRadioRxDone+0x884>)
 80055d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d2:	6153      	str	r3, [r2, #20]
                        PrepareRxDoneAbort( );
 80055d4:	f7ff fcb4 	bl	8004f40 <PrepareRxDoneAbort>
                        return;
 80055d8:	e16b      	b.n	80058b2 <OnRadioRxDone+0x92e>
                    }
                    curMulticastParams->DownLinkCounter = downLinkCounter;
 80055da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055de:	625a      	str	r2, [r3, #36]	; 0x24
 80055e0:	e036      	b.n	8005650 <OnRadioRxDone+0x6cc>
                } else {
                    if ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) {
 80055e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055e6:	f023 031f 	bic.w	r3, r3, #31
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2ba0      	cmp	r3, #160	; 0xa0
 80055ee:	d114      	bne.n	800561a <OnRadioRxDone+0x696>
                        SrvAckRequested = true;
 80055f0:	4b89      	ldr	r3, [pc, #548]	; (8005818 <OnRadioRxDone+0x894>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	701a      	strb	r2, [r3, #0]
                        McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80055f6:	4b84      	ldr	r3, [pc, #528]	; (8005808 <OnRadioRxDone+0x884>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]

                        if ( ( DownLinkCounter == downLinkCounter ) &&
 80055fc:	4b87      	ldr	r3, [pc, #540]	; (800581c <OnRadioRxDone+0x898>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005602:	429a      	cmp	r2, r3
 8005604:	d121      	bne.n	800564a <OnRadioRxDone+0x6c6>
                             ( DownLinkCounter != 0 ) ) {
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <OnRadioRxDone+0x898>)
 8005608:	681b      	ldr	r3, [r3, #0]
                        if ( ( DownLinkCounter == downLinkCounter ) &&
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <OnRadioRxDone+0x6c6>
                            // Duplicated confirmed downlink. Skip indication.
                            // In this case, the MAC layer shall accept the MAC commands
                            // which are included in the downlink retransmission.
                            // It should not provide the same frame to the application
                            // layer again.
                            LoRaMacFlags.Bits.McpsIndSkip = 1;
 800560e:	4a84      	ldr	r2, [pc, #528]	; (8005820 <OnRadioRxDone+0x89c>)
 8005610:	7813      	ldrb	r3, [r2, #0]
 8005612:	f043 0304 	orr.w	r3, r3, #4
 8005616:	7013      	strb	r3, [r2, #0]
 8005618:	e017      	b.n	800564a <OnRadioRxDone+0x6c6>
                        }
                    } else {
                        SrvAckRequested = false;
 800561a:	4b7f      	ldr	r3, [pc, #508]	; (8005818 <OnRadioRxDone+0x894>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
                        McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8005620:	4b79      	ldr	r3, [pc, #484]	; (8005808 <OnRadioRxDone+0x884>)
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]

                        if ( ( DownLinkCounter == downLinkCounter ) &&
 8005626:	4b7d      	ldr	r3, [pc, #500]	; (800581c <OnRadioRxDone+0x898>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800562c:	429a      	cmp	r2, r3
 800562e:	d10c      	bne.n	800564a <OnRadioRxDone+0x6c6>
                             ( DownLinkCounter != 0 ) ) {
 8005630:	4b7a      	ldr	r3, [pc, #488]	; (800581c <OnRadioRxDone+0x898>)
 8005632:	681b      	ldr	r3, [r3, #0]
                        if ( ( DownLinkCounter == downLinkCounter ) &&
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <OnRadioRxDone+0x6c6>
                            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8005638:	4b73      	ldr	r3, [pc, #460]	; (8005808 <OnRadioRxDone+0x884>)
 800563a:	2208      	movs	r2, #8
 800563c:	705a      	strb	r2, [r3, #1]
                            McpsIndication.DownLinkCounter = downLinkCounter;
 800563e:	4a72      	ldr	r2, [pc, #456]	; (8005808 <OnRadioRxDone+0x884>)
 8005640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005642:	6153      	str	r3, [r2, #20]
                            PrepareRxDoneAbort( );
 8005644:	f7ff fc7c 	bl	8004f40 <PrepareRxDoneAbort>
                            return;
 8005648:	e133      	b.n	80058b2 <OnRadioRxDone+0x92e>
                        }
                    }
                    DownLinkCounter = downLinkCounter;
 800564a:	4a74      	ldr	r2, [pc, #464]	; (800581c <OnRadioRxDone+0x898>)
 800564c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564e:	6013      	str	r3, [r2, #0]

                // This must be done before parsing the payload and the MAC commands.
                // We need to reset the MacCommandsBufferIndex here, since we need
                // to take retransmissions and repetitions into account. Error cases
                // will be handled in function OnMacStateCheckTimerEvent.
                if ( McpsConfirm.McpsRequest == MCPS_CONFIRMED ) {
 8005650:	4b6e      	ldr	r3, [pc, #440]	; (800580c <OnRadioRxDone+0x888>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d122      	bne.n	800569e <OnRadioRxDone+0x71a>
                    if ( fCtrl.Bits.Ack == 1 ) {
 8005658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01e      	beq.n	80056a4 <OnRadioRxDone+0x720>
                        // Reset MacCommandsBufferIndex when we have received an ACK.
                        MacCommandsBufferIndex = 0;
 8005666:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <OnRadioRxDone+0x8a0>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
                        // Update acknowledgement information
                        McpsConfirm.AckReceived = fCtrl.Bits.Ack;
 800566c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005670:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	bf14      	ite	ne
 800567a:	2301      	movne	r3, #1
 800567c:	2300      	moveq	r3, #0
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4b62      	ldr	r3, [pc, #392]	; (800580c <OnRadioRxDone+0x888>)
 8005682:	711a      	strb	r2, [r3, #4]
                        McpsIndication.AckReceived = fCtrl.Bits.Ack;
 8005684:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005688:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	bf14      	ite	ne
 8005692:	2301      	movne	r3, #1
 8005694:	2300      	moveq	r3, #0
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b5b      	ldr	r3, [pc, #364]	; (8005808 <OnRadioRxDone+0x884>)
 800569a:	749a      	strb	r2, [r3, #18]
 800569c:	e002      	b.n	80056a4 <OnRadioRxDone+0x720>
                    }
                } else {
                    // Reset the variable if we have received any valid frame.
                    MacCommandsBufferIndex = 0;
 800569e:	4b61      	ldr	r3, [pc, #388]	; (8005824 <OnRadioRxDone+0x8a0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	701a      	strb	r2, [r3, #0]
                }
                port = payload[appPayloadStartIndex];
 80056a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                // Process payload and MAC commands
                if ( ( ( size - 4 ) - appPayloadStartIndex ) > 0 ) {
 80056b2:	897b      	ldrh	r3, [r7, #10]
 80056b4:	1f1a      	subs	r2, r3, #4
 80056b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f340 8084 	ble.w	80057ca <OnRadioRxDone+0x846>
                    port = payload[appPayloadStartIndex++];
 80056c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 80056cc:	461a      	mov	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                    frameLen = ( size - 4 ) - appPayloadStartIndex;
 80056d8:	897b      	ldrh	r3, [r7, #10]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	3b04      	subs	r3, #4
 80056e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

                    McpsIndication.Port = port;
 80056ea:	4a47      	ldr	r2, [pc, #284]	; (8005808 <OnRadioRxDone+0x884>)
 80056ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80056f0:	70d3      	strb	r3, [r2, #3]
                    if ( port == 0 ) {
 80056f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d133      	bne.n	8005762 <OnRadioRxDone+0x7de>
                        // Only allow frames which do not have fOpts
                            if( ( fCtrl.Bits.FOptsLen == 0 ) && ( multicast == 0 ) ) {
 80056fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d120      	bne.n	800574a <OnRadioRxDone+0x7c6>
 8005708:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11c      	bne.n	800574a <OnRadioRxDone+0x7c6>
                            LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8005710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	18d0      	adds	r0, r2, r3
 8005718:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800571c:	b299      	uxth	r1, r3
 800571e:	4b42      	ldr	r3, [pc, #264]	; (8005828 <OnRadioRxDone+0x8a4>)
 8005720:	9302      	str	r3, [sp, #8]
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	2301      	movs	r3, #1
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800572c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800572e:	f003 fd1d 	bl	800916c <LoRaMacPayloadDecrypt>
                                                   address,
                                                   DOWN_LINK,
                                                   downLinkCounter,
                                                   LoRaMacRxPayload );
                            // Decode frame payload MAC commands
                                ProcessMacCommands( LoRaMacRxPayload, 0, frameLen, snr, McpsIndication.RxSlot );
 8005732:	79f9      	ldrb	r1, [r7, #7]
 8005734:	4b34      	ldr	r3, [pc, #208]	; (8005808 <OnRadioRxDone+0x884>)
 8005736:	7c5b      	ldrb	r3, [r3, #17]
 8005738:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	460b      	mov	r3, r1
 8005740:	2100      	movs	r1, #0
 8005742:	4839      	ldr	r0, [pc, #228]	; (8005828 <OnRadioRxDone+0x8a4>)
 8005744:	f001 f8aa 	bl	800689c <ProcessMacCommands>
 8005748:	e051      	b.n	80057ee <OnRadioRxDone+0x86a>
                        } else {
                            LoRaMacFlags.Bits.McpsIndSkip = 1;
 800574a:	4a35      	ldr	r2, [pc, #212]	; (8005820 <OnRadioRxDone+0x89c>)
 800574c:	7813      	ldrb	r3, [r2, #0]
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	7013      	strb	r3, [r2, #0]
                            // This is not a valid frame. Drop it and reset the ACK bits
                            McpsConfirm.AckReceived = false;
 8005754:	4b2d      	ldr	r3, [pc, #180]	; (800580c <OnRadioRxDone+0x888>)
 8005756:	2200      	movs	r2, #0
 8005758:	711a      	strb	r2, [r3, #4]
                            McpsIndication.AckReceived = false;
 800575a:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <OnRadioRxDone+0x884>)
 800575c:	2200      	movs	r2, #0
 800575e:	749a      	strb	r2, [r3, #18]
 8005760:	e045      	b.n	80057ee <OnRadioRxDone+0x86a>
                        }
                    } else {
                        if( ( fCtrl.Bits.FOptsLen > 0 ) && ( multicast == 0 ) ){
 8005762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d010      	beq.n	8005792 <OnRadioRxDone+0x80e>
 8005770:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <OnRadioRxDone+0x80e>
                            // Decode Options field MAC commands. Omit the fPort.
                                ProcessMacCommands( payload, 8, appPayloadStartIndex - 1, snr, McpsIndication.RxSlot );
 8005778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800577c:	3b01      	subs	r3, #1
 800577e:	b2da      	uxtb	r2, r3
 8005780:	79f9      	ldrb	r1, [r7, #7]
 8005782:	4b21      	ldr	r3, [pc, #132]	; (8005808 <OnRadioRxDone+0x884>)
 8005784:	7c5b      	ldrb	r3, [r3, #17]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	460b      	mov	r3, r1
 800578a:	2108      	movs	r1, #8
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f001 f885 	bl	800689c <ProcessMacCommands>
                        }

                        LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 8005792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	18d0      	adds	r0, r2, r3
 800579a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800579e:	b299      	uxth	r1, r3
 80057a0:	4b21      	ldr	r3, [pc, #132]	; (8005828 <OnRadioRxDone+0x8a4>)
 80057a2:	9302      	str	r3, [sp, #8]
 80057a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	2301      	movs	r3, #1
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057b0:	f003 fcdc 	bl	800916c <LoRaMacPayloadDecrypt>
                                               address,
                                               DOWN_LINK,
                                               downLinkCounter,
                                               LoRaMacRxPayload );

                        McpsIndication.Buffer = LoRaMacRxPayload;
 80057b4:	4b14      	ldr	r3, [pc, #80]	; (8005808 <OnRadioRxDone+0x884>)
 80057b6:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <OnRadioRxDone+0x8a4>)
 80057b8:	609a      	str	r2, [r3, #8]
                        McpsIndication.BufferSize = frameLen;
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <OnRadioRxDone+0x884>)
 80057bc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80057c0:	7313      	strb	r3, [r2, #12]
                        McpsIndication.RxData = true;
 80057c2:	4b11      	ldr	r3, [pc, #68]	; (8005808 <OnRadioRxDone+0x884>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	735a      	strb	r2, [r3, #13]
 80057c8:	e011      	b.n	80057ee <OnRadioRxDone+0x86a>
                    }
                } else {
                    if ( fCtrl.Bits.FOptsLen > 0 ) {
 80057ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <OnRadioRxDone+0x86a>
                        // Decode Options field MAC commands
                        ProcessMacCommands( payload, 8, appPayloadStartIndex, snr , McpsIndication.RxSlot);
 80057d8:	79f9      	ldrb	r1, [r7, #7]
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <OnRadioRxDone+0x884>)
 80057dc:	7c5b      	ldrb	r3, [r3, #17]
 80057de:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	460b      	mov	r3, r1
 80057e6:	2108      	movs	r1, #8
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f001 f857 	bl	800689c <ProcessMacCommands>
                    }
                }

                // Provide always an indication, skip the callback to the user application,
                // in case of a confirmed downlink retransmission.
                LoRaMacFlags.Bits.McpsInd = 1;
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <OnRadioRxDone+0x89c>)
 80057f0:	7813      	ldrb	r3, [r2, #0]
 80057f2:	f043 0302 	orr.w	r3, r3, #2
 80057f6:	7013      	strb	r3, [r2, #0]

                PrepareRxDoneAbort( );
                return;
            }
        }
        break;
 80057f8:	e03f      	b.n	800587a <OnRadioRxDone+0x8f6>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80057fa:	4b03      	ldr	r3, [pc, #12]	; (8005808 <OnRadioRxDone+0x884>)
 80057fc:	220c      	movs	r2, #12
 80057fe:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 8005800:	f7ff fb9e 	bl	8004f40 <PrepareRxDoneAbort>
                return;
 8005804:	e055      	b.n	80058b2 <OnRadioRxDone+0x92e>
 8005806:	bf00      	nop
 8005808:	200009e8 	.word	0x200009e8
 800580c:	200009c0 	.word	0x200009c0
 8005810:	2000035c 	.word	0x2000035c
 8005814:	20000364 	.word	0x20000364
 8005818:	20000361 	.word	0x20000361
 800581c:	20000354 	.word	0x20000354
 8005820:	20000a18 	.word	0x20000a18
 8005824:	20000363 	.word	0x20000363
 8005828:	20000250 	.word	0x20000250
        case FRAME_TYPE_PROPRIETARY: {
            memcpy1( LoRaMacRxPayload, &payload[pktHeaderLen], size );
 800582c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	897a      	ldrh	r2, [r7, #10]
 8005836:	4619      	mov	r1, r3
 8005838:	481f      	ldr	r0, [pc, #124]	; (80058b8 <OnRadioRxDone+0x934>)
 800583a:	f00a fd74 	bl	8010326 <memcpy1>

            McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800583e:	4b1f      	ldr	r3, [pc, #124]	; (80058bc <OnRadioRxDone+0x938>)
 8005840:	2203      	movs	r2, #3
 8005842:	701a      	strb	r2, [r3, #0]
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <OnRadioRxDone+0x938>)
 8005846:	2200      	movs	r2, #0
 8005848:	705a      	strb	r2, [r3, #1]
            McpsIndication.Buffer = LoRaMacRxPayload;
 800584a:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <OnRadioRxDone+0x938>)
 800584c:	4a1a      	ldr	r2, [pc, #104]	; (80058b8 <OnRadioRxDone+0x934>)
 800584e:	609a      	str	r2, [r3, #8]
            McpsIndication.BufferSize = size - pktHeaderLen;
 8005850:	897b      	ldrh	r3, [r7, #10]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	b2da      	uxtb	r2, r3
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <OnRadioRxDone+0x938>)
 800585e:	731a      	strb	r2, [r3, #12]

            LoRaMacFlags.Bits.McpsInd = 1;
 8005860:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <OnRadioRxDone+0x93c>)
 8005862:	7813      	ldrb	r3, [r2, #0]
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	7013      	strb	r3, [r2, #0]
            break;
 800586a:	e006      	b.n	800587a <OnRadioRxDone+0x8f6>
        }
        default:
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800586c:	4b13      	ldr	r3, [pc, #76]	; (80058bc <OnRadioRxDone+0x938>)
 800586e:	2201      	movs	r2, #1
 8005870:	705a      	strb	r2, [r3, #1]
            PrepareRxDoneAbort( );
 8005872:	f7ff fb65 	bl	8004f40 <PrepareRxDoneAbort>
            break;
 8005876:	e000      	b.n	800587a <OnRadioRxDone+0x8f6>
            break;
 8005878:	bf00      	nop
    }
    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( NodeAckRequested, LoRaMacDeviceClass, McpsConfirm.AckReceived,
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <OnRadioRxDone+0x940>)
 800587c:	7818      	ldrb	r0, [r3, #0]
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <OnRadioRxDone+0x944>)
 8005880:	7819      	ldrb	r1, [r3, #0]
 8005882:	4b12      	ldr	r3, [pc, #72]	; (80058cc <OnRadioRxDone+0x948>)
 8005884:	791a      	ldrb	r2, [r3, #4]
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <OnRadioRxDone+0x94c>)
 8005888:	781c      	ldrb	r4, [r3, #0]
 800588a:	4b12      	ldr	r3, [pc, #72]	; (80058d4 <OnRadioRxDone+0x950>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4623      	mov	r3, r4
 8005892:	f000 fc73 	bl	800617c <CheckToDisableAckTimeout>
                                AckTimeoutRetriesCounter, AckTimeoutRetries );
    if( AckTimeoutTimer.IsRunning == false )
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <OnRadioRxDone+0x954>)
 8005898:	7a1b      	ldrb	r3, [r3, #8]
 800589a:	f083 0301 	eor.w	r3, r3, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d006      	beq.n	80058b2 <OnRadioRxDone+0x92e>
    {// Procedure is completed when the AckTimeoutTimer is not running anymore
    	LoRaMacFlags.Bits.MacDone = 1;
 80058a4:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <OnRadioRxDone+0x93c>)
 80058a6:	7813      	ldrb	r3, [r2, #0]
 80058a8:	f043 0320 	orr.w	r3, r3, #32
 80058ac:	7013      	strb	r3, [r2, #0]
    	// Trig OnMacCheckTimerEvent call as soon as possible
    	OnMacStateCheckTimerEvent();
 80058ae:	f000 f903 	bl	8005ab8 <OnMacStateCheckTimerEvent>
    }
}
 80058b2:	3764      	adds	r7, #100	; 0x64
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	20000250 	.word	0x20000250
 80058bc:	200009e8 	.word	0x200009e8
 80058c0:	20000a18 	.word	0x20000a18
 80058c4:	20000360 	.word	0x20000360
 80058c8:	20000148 	.word	0x20000148
 80058cc:	200009c0 	.word	0x200009c0
 80058d0:	2000000a 	.word	0x2000000a
 80058d4:	20000009 	.word	0x20000009
 80058d8:	20000ad0 	.word	0x20000ad0

080058dc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	DIO_PRINTF("TX Timeout\r\n");

    if( LoRaMacDeviceClass != CLASS_C )
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <OnRadioTxTimeout+0x34>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d003      	beq.n	80058f0 <OnRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <OnRadioTxTimeout+0x38>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4798      	blx	r3
 80058ee:	e001      	b.n	80058f4 <OnRadioTxTimeout+0x18>
    }
    else
    {
        OpenContinuousRx2Window( );
 80058f0:	f001 fc8a 	bl	8007208 <OpenContinuousRx2Window>
    }

    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 80058f4:	4b08      	ldr	r3, [pc, #32]	; (8005918 <OnRadioTxTimeout+0x3c>)
 80058f6:	2202      	movs	r2, #2
 80058f8:	705a      	strb	r2, [r3, #1]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 80058fa:	2002      	movs	r0, #2
 80058fc:	f003 fa6a 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>
    LoRaMacFlags.Bits.MacDone = 1;
 8005900:	4a06      	ldr	r2, [pc, #24]	; (800591c <OnRadioTxTimeout+0x40>)
 8005902:	7813      	ldrb	r3, [r2, #0]
 8005904:	f043 0320 	orr.w	r3, r3, #32
 8005908:	7013      	strb	r3, [r2, #0]
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000148 	.word	0x20000148
 8005914:	08012794 	.word	0x08012794
 8005918:	200009c0 	.word	0x200009c0
 800591c:	20000a18 	.word	0x20000a18

08005920 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
    bool classBRx = false;
 8005926:	2300      	movs	r3, #0
 8005928:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacDeviceClass != CLASS_C )
 800592a:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <OnRadioRxError+0xa8>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d002      	beq.n	8005938 <OnRadioRxError+0x18>
    {
        Radio.Sleep( );
 8005932:	4b26      	ldr	r3, [pc, #152]	; (80059cc <OnRadioRxError+0xac>)
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	4798      	blx	r3
    }

    if( classBRx == false )
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d037      	beq.n	80059b4 <OnRadioRxError+0x94>
    {
        if( RxSlot == RX_SLOT_WIN_1 )
 8005944:	4b22      	ldr	r3, [pc, #136]	; (80059d0 <OnRadioRxError+0xb0>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d120      	bne.n	800598e <OnRadioRxError+0x6e>
        {
            if( NodeAckRequested == true )
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <OnRadioRxError+0xb4>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <OnRadioRxError+0x3a>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <OnRadioRxError+0xb8>)
 8005956:	2205      	movs	r2, #5
 8005958:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR );
 800595a:	2005      	movs	r0, #5
 800595c:	f003 fa3a 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <OnRadioRxError+0xa8>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d025      	beq.n	80059b4 <OnRadioRxError+0x94>
            {
                if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8005968:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <OnRadioRxError+0xbc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f00a fbd3 	bl	8010118 <TimerGetElapsedTime>
 8005972:	4602      	mov	r2, r0
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <OnRadioRxError+0xc0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d31b      	bcc.n	80059b4 <OnRadioRxError+0x94>
                {
                    TimerStop( &RxWindowTimer2 );
 800597c:	4819      	ldr	r0, [pc, #100]	; (80059e4 <OnRadioRxError+0xc4>)
 800597e:	f00a faef 	bl	800ff60 <TimerStop>
                    LoRaMacFlags.Bits.MacDone = 1;
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <OnRadioRxError+0xc8>)
 8005984:	7813      	ldrb	r3, [r2, #0]
 8005986:	f043 0320 	orr.w	r3, r3, #32
 800598a:	7013      	strb	r3, [r2, #0]
 800598c:	e012      	b.n	80059b4 <OnRadioRxError+0x94>
                }
            }
        }
        else
        {
            if( NodeAckRequested == true )
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <OnRadioRxError+0xb4>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <OnRadioRxError+0x7c>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8005996:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <OnRadioRxError+0xb8>)
 8005998:	2206      	movs	r2, #6
 800599a:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800599c:	2006      	movs	r0, #6
 800599e:	f003 fa19 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <OnRadioRxError+0xa8>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d004      	beq.n	80059b4 <OnRadioRxError+0x94>
            {
                LoRaMacFlags.Bits.MacDone = 1;
 80059aa:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <OnRadioRxError+0xc8>)
 80059ac:	7813      	ldrb	r3, [r2, #0]
 80059ae:	f043 0320 	orr.w	r3, r3, #32
 80059b2:	7013      	strb	r3, [r2, #0]
            }
        }
    }

    if( LoRaMacDeviceClass == CLASS_C )
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <OnRadioRxError+0xa8>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d101      	bne.n	80059c0 <OnRadioRxError+0xa0>
    {
        OpenContinuousRx2Window( );
 80059bc:	f001 fc24 	bl	8007208 <OpenContinuousRx2Window>
    }
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000148 	.word	0x20000148
 80059cc:	08012794 	.word	0x08012794
 80059d0:	20000a74 	.word	0x20000a74
 80059d4:	20000360 	.word	0x20000360
 80059d8:	200009c0 	.word	0x200009c0
 80059dc:	2000046c 	.word	0x2000046c
 80059e0:	20000af8 	.word	0x20000af8
 80059e4:	200009a8 	.word	0x200009a8
 80059e8:	20000a18 	.word	0x20000a18

080059ec <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
    bool classBRx = false;
 80059f2:	2300      	movs	r3, #0
 80059f4:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacDeviceClass != CLASS_C )
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <OnRadioRxTimeout+0xa8>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d002      	beq.n	8005a04 <OnRadioRxTimeout+0x18>
    {
        Radio.Sleep( );
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <OnRadioRxTimeout+0xac>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	4798      	blx	r3
    }

    if( classBRx == false )
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	f083 0301 	eor.w	r3, r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d037      	beq.n	8005a80 <OnRadioRxTimeout+0x94>
    {
        if( RxSlot == RX_SLOT_WIN_1 )
 8005a10:	4b22      	ldr	r3, [pc, #136]	; (8005a9c <OnRadioRxTimeout+0xb0>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d120      	bne.n	8005a5a <OnRadioRxTimeout+0x6e>
        {
            if( NodeAckRequested == true )
 8005a18:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <OnRadioRxTimeout+0xb4>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <OnRadioRxTimeout+0x3a>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 8005a20:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <OnRadioRxTimeout+0xb8>)
 8005a22:	2203      	movs	r2, #3
 8005a24:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT );
 8005a26:	2003      	movs	r0, #3
 8005a28:	f003 f9d4 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <OnRadioRxTimeout+0xa8>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d025      	beq.n	8005a80 <OnRadioRxTimeout+0x94>
            {
                if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8005a34:	4b1c      	ldr	r3, [pc, #112]	; (8005aa8 <OnRadioRxTimeout+0xbc>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f00a fb6d 	bl	8010118 <TimerGetElapsedTime>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <OnRadioRxTimeout+0xc0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d31b      	bcc.n	8005a80 <OnRadioRxTimeout+0x94>
                {
                    TimerStop( &RxWindowTimer2 );
 8005a48:	4819      	ldr	r0, [pc, #100]	; (8005ab0 <OnRadioRxTimeout+0xc4>)
 8005a4a:	f00a fa89 	bl	800ff60 <TimerStop>
                    LoRaMacFlags.Bits.MacDone = 1;
 8005a4e:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <OnRadioRxTimeout+0xc8>)
 8005a50:	7813      	ldrb	r3, [r2, #0]
 8005a52:	f043 0320 	orr.w	r3, r3, #32
 8005a56:	7013      	strb	r3, [r2, #0]
 8005a58:	e012      	b.n	8005a80 <OnRadioRxTimeout+0x94>
                }
            }
        }
        else
        {
            if( NodeAckRequested == true )
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <OnRadioRxTimeout+0xb4>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <OnRadioRxTimeout+0x7c>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8005a62:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <OnRadioRxTimeout+0xb8>)
 8005a64:	2204      	movs	r2, #4
 8005a66:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8005a68:	2004      	movs	r0, #4
 8005a6a:	f003 f9b3 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <OnRadioRxTimeout+0xa8>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d004      	beq.n	8005a80 <OnRadioRxTimeout+0x94>
            {
                LoRaMacFlags.Bits.MacDone = 1;
 8005a76:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <OnRadioRxTimeout+0xc8>)
 8005a78:	7813      	ldrb	r3, [r2, #0]
 8005a7a:	f043 0320 	orr.w	r3, r3, #32
 8005a7e:	7013      	strb	r3, [r2, #0]
            }
        }
    }

    if( LoRaMacDeviceClass == CLASS_C )
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <OnRadioRxTimeout+0xa8>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d101      	bne.n	8005a8c <OnRadioRxTimeout+0xa0>
    {
        OpenContinuousRx2Window( );
 8005a88:	f001 fbbe 	bl	8007208 <OpenContinuousRx2Window>
    }
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000148 	.word	0x20000148
 8005a98:	08012794 	.word	0x08012794
 8005a9c:	20000a74 	.word	0x20000a74
 8005aa0:	20000360 	.word	0x20000360
 8005aa4:	200009c0 	.word	0x200009c0
 8005aa8:	2000046c 	.word	0x2000046c
 8005aac:	20000af8 	.word	0x20000af8
 8005ab0:	200009a8 	.word	0x200009a8
 8005ab4:	20000a18 	.word	0x20000a18

08005ab8 <OnMacStateCheckTimerEvent>:


static void OnMacStateCheckTimerEvent( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
//	lora_printf("OnMacStateCheckTimerEvent\r\n");
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool noTx = false;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]

    TimerStop( &MacStateCheckTimer );
 8005ac2:	486b      	ldr	r0, [pc, #428]	; (8005c70 <OnMacStateCheckTimerEvent+0x1b8>)
 8005ac4:	f00a fa4c 	bl	800ff60 <TimerStop>

    if ( LoRaMacFlags.Bits.MacDone == 1 ) {
 8005ac8:	4b6a      	ldr	r3, [pc, #424]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 81b7 	beq.w	8005e46 <OnMacStateCheckTimerEvent+0x38e>
        if ( ( LoRaMacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT ) {
 8005ad8:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <OnMacStateCheckTimerEvent+0x44>
            LoRaMacState &= ~LORAMAC_RX_ABORT;
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aec:	4a62      	ldr	r2, [pc, #392]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005aee:	6013      	str	r3, [r2, #0]
            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005af0:	4b61      	ldr	r3, [pc, #388]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	4a5f      	ldr	r2, [pc, #380]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005afa:	6013      	str	r3, [r2, #0]
        }

        if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) ) {
 8005afc:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <OnMacStateCheckTimerEvent+0x60>
 8005b0a:	4b5a      	ldr	r3, [pc, #360]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d022      	beq.n	8005b5e <OnMacStateCheckTimerEvent+0xa6>
            // Get a status of any request and check if we have a TX timeout
            MlmeConfirm.Status = LoRaMacConfirmQueueGetStatusCmn( );
 8005b18:	f003 f98e 	bl	8008e38 <LoRaMacConfirmQueueGetStatusCmn>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b56      	ldr	r3, [pc, #344]	; (8005c7c <OnMacStateCheckTimerEvent+0x1c4>)
 8005b22:	705a      	strb	r2, [r3, #1]
            if ( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8005b24:	4b56      	ldr	r3, [pc, #344]	; (8005c80 <OnMacStateCheckTimerEvent+0x1c8>)
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d003      	beq.n	8005b34 <OnMacStateCheckTimerEvent+0x7c>
                 ( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ) {
 8005b2c:	4b53      	ldr	r3, [pc, #332]	; (8005c7c <OnMacStateCheckTimerEvent+0x1c4>)
 8005b2e:	785b      	ldrb	r3, [r3, #1]
            if ( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d114      	bne.n	8005b5e <OnMacStateCheckTimerEvent+0xa6>
                // Stop transmit cycle due to tx timeout.
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005b34:	4b50      	ldr	r3, [pc, #320]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	4a4e      	ldr	r2, [pc, #312]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005b3e:	6013      	str	r3, [r2, #0]
                MacCommandsBufferIndex = 0;
 8005b40:	4b50      	ldr	r3, [pc, #320]	; (8005c84 <OnMacStateCheckTimerEvent+0x1cc>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005b46:	4b50      	ldr	r3, [pc, #320]	; (8005c88 <OnMacStateCheckTimerEvent+0x1d0>)
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <OnMacStateCheckTimerEvent+0x1c8>)
 8005b4c:	715a      	strb	r2, [r3, #5]
                McpsConfirm.AckReceived = false;
 8005b4e:	4b4c      	ldr	r3, [pc, #304]	; (8005c80 <OnMacStateCheckTimerEvent+0x1c8>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	711a      	strb	r2, [r3, #4]
                McpsConfirm.TxTimeOnAir = 0;
 8005b54:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <OnMacStateCheckTimerEvent+0x1c8>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
                noTx = true;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
            }
        }

        if ( ( NodeAckRequested == false ) && ( noTx == false ) ) {
 8005b5e:	4b4b      	ldr	r3, [pc, #300]	; (8005c8c <OnMacStateCheckTimerEvent+0x1d4>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f083 0301 	eor.w	r3, r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80a6 	beq.w	8005cba <OnMacStateCheckTimerEvent+0x202>
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	f083 0301 	eor.w	r3, r3, #1
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 809f 	beq.w	8005cba <OnMacStateCheckTimerEvent+0x202>
            if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) ) {
 8005b7c:	4b3d      	ldr	r3, [pc, #244]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d107      	bne.n	8005b9a <OnMacStateCheckTimerEvent+0xe2>
 8005b8a:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8090 	beq.w	8005cba <OnMacStateCheckTimerEvent+0x202>
                if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d02f      	beq.n	8005c08 <OnMacStateCheckTimerEvent+0x150>
 8005ba8:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <OnMacStateCheckTimerEvent+0x1c4>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d12b      	bne.n	8005c08 <OnMacStateCheckTimerEvent+0x150>
                    // Procedure for the join request
                    MlmeConfirm.NbRetries = JoinRequestTrials;
 8005bb0:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <OnMacStateCheckTimerEvent+0x1d8>)
 8005bb2:	781a      	ldrb	r2, [r3, #0]
 8005bb4:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <OnMacStateCheckTimerEvent+0x1c4>)
 8005bb6:	729a      	strb	r2, [r3, #10]

                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005bb8:	2000      	movs	r0, #0
 8005bba:	f003 f8e5 	bl	8008d88 <LoRaMacConfirmQueueGetStatus>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10c      	bne.n	8005bde <OnMacStateCheckTimerEvent+0x126>
                        // Node joined successfully
                        UpLinkCounter = 0;
 8005bc4:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <OnMacStateCheckTimerEvent+0x1dc>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
                        ChannelsNbRepCounter = 0;
 8005bca:	4b33      	ldr	r3, [pc, #204]	; (8005c98 <OnMacStateCheckTimerEvent+0x1e0>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005bd0:	4b29      	ldr	r3, [pc, #164]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005bda:	6013      	str	r3, [r2, #0]
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005bdc:	e06d      	b.n	8005cba <OnMacStateCheckTimerEvent+0x202>
                    } else {
                        if ( JoinRequestTrials >= MaxJoinRequestTrials ) {
 8005bde:	4b2c      	ldr	r3, [pc, #176]	; (8005c90 <OnMacStateCheckTimerEvent+0x1d8>)
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	4b2e      	ldr	r3, [pc, #184]	; (8005c9c <OnMacStateCheckTimerEvent+0x1e4>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d306      	bcc.n	8005bf8 <OnMacStateCheckTimerEvent+0x140>
                            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005bea:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005bf4:	6013      	str	r3, [r2, #0]
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005bf6:	e060      	b.n	8005cba <OnMacStateCheckTimerEvent+0x202>
                        } else {
                            LoRaMacFlags.Bits.MacDone = 0;
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005bfa:	7813      	ldrb	r3, [r2, #0]
 8005bfc:	f36f 1345 	bfc	r3, #5, #1
 8005c00:	7013      	strb	r3, [r2, #0]
                            // Sends the same frame again
                            OnTxDelayedTimerEvent( );
 8005c02:	f000 f9c9 	bl	8005f98 <OnTxDelayedTimerEvent>
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005c06:	e058      	b.n	8005cba <OnMacStateCheckTimerEvent+0x202>
                        }
                    }
                } else {
                    // Procedure for all other frames
                    if ( ( ChannelsNbRepCounter >= LoRaMacParams.ChannelsNbRep ) || ( LoRaMacFlags.Bits.McpsInd == 1 ) ) {
 8005c08:	4b25      	ldr	r3, [pc, #148]	; (8005ca0 <OnMacStateCheckTimerEvent+0x1e8>)
 8005c0a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005c0e:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <OnMacStateCheckTimerEvent+0x1e0>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d906      	bls.n	8005c24 <OnMacStateCheckTimerEvent+0x16c>
 8005c16:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d043      	beq.n	8005cac <OnMacStateCheckTimerEvent+0x1f4>
                        if ( LoRaMacFlags.Bits.McpsInd == 0 ) {
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <OnMacStateCheckTimerEvent+0x1bc>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d107      	bne.n	8005c42 <OnMacStateCheckTimerEvent+0x18a>
                            // Maximum repetitions without downlink. Reset MacCommandsBufferIndex. Increase ADR Ack counter.
                            // Only process the case when the MAC did not receive a downlink.
                            MacCommandsBufferIndex = 0;
 8005c32:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <OnMacStateCheckTimerEvent+0x1cc>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
                            AdrAckCounter++;
 8005c38:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <OnMacStateCheckTimerEvent+0x1ec>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <OnMacStateCheckTimerEvent+0x1ec>)
 8005c40:	6013      	str	r3, [r2, #0]
                        }

                        ChannelsNbRepCounter = 0;
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <OnMacStateCheckTimerEvent+0x1e0>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]

                        if ( IsUpLinkCounterFixed == false ) {
 8005c48:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <OnMacStateCheckTimerEvent+0x1f0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <OnMacStateCheckTimerEvent+0x1a8>
                            UpLinkCounter++;
 8005c56:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <OnMacStateCheckTimerEvent+0x1dc>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	4a0d      	ldr	r2, [pc, #52]	; (8005c94 <OnMacStateCheckTimerEvent+0x1dc>)
 8005c5e:	6013      	str	r3, [r2, #0]
                        }

                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	4a03      	ldr	r2, [pc, #12]	; (8005c78 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e025      	b.n	8005cba <OnMacStateCheckTimerEvent+0x202>
 8005c6e:	bf00      	nop
 8005c70:	20000480 	.word	0x20000480
 8005c74:	20000a18 	.word	0x20000a18
 8005c78:	2000047c 	.word	0x2000047c
 8005c7c:	20000994 	.word	0x20000994
 8005c80:	200009c0 	.word	0x200009c0
 8005c84:	20000363 	.word	0x20000363
 8005c88:	2000000a 	.word	0x2000000a
 8005c8c:	20000360 	.word	0x20000360
 8005c90:	20000a14 	.word	0x20000a14
 8005c94:	20000350 	.word	0x20000350
 8005c98:	20000468 	.word	0x20000468
 8005c9c:	200009bc 	.word	0x200009bc
 8005ca0:	20000a78 	.word	0x20000a78
 8005ca4:	2000035c 	.word	0x2000035c
 8005ca8:	20000358 	.word	0x20000358
                    } else {
                        LoRaMacFlags.Bits.MacDone = 0;
 8005cac:	4aa8      	ldr	r2, [pc, #672]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005cae:	7813      	ldrb	r3, [r2, #0]
 8005cb0:	f36f 1345 	bfc	r3, #5, #1
 8005cb4:	7013      	strb	r3, [r2, #0]
                        // Sends the same frame again
                        OnTxDelayedTimerEvent( );
 8005cb6:	f000 f96f 	bl	8005f98 <OnTxDelayedTimerEvent>
                    }
                }
            }
        }

        if ( LoRaMacFlags.Bits.McpsInd == 1 ) {
 8005cba:	4ba5      	ldr	r3, [pc, #660]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d025      	beq.n	8005d14 <OnMacStateCheckTimerEvent+0x25c>
            // Procedure if we received a frame
            if ( ( McpsConfirm.AckReceived == true ) || ( AckTimeoutRetriesCounter > AckTimeoutRetries ) ) {
 8005cc8:	4ba2      	ldr	r3, [pc, #648]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <OnMacStateCheckTimerEvent+0x224>
 8005cd0:	4ba1      	ldr	r3, [pc, #644]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	4ba1      	ldr	r3, [pc, #644]	; (8005f5c <OnMacStateCheckTimerEvent+0x4a4>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d91b      	bls.n	8005d14 <OnMacStateCheckTimerEvent+0x25c>
                AckTimeoutRetry = false;
 8005cdc:	4ba0      	ldr	r3, [pc, #640]	; (8005f60 <OnMacStateCheckTimerEvent+0x4a8>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 8005ce2:	4ba0      	ldr	r3, [pc, #640]	; (8005f64 <OnMacStateCheckTimerEvent+0x4ac>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
                if ( IsUpLinkCounterFixed == false ) {
 8005ce8:	4b9f      	ldr	r3, [pc, #636]	; (8005f68 <OnMacStateCheckTimerEvent+0x4b0>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <OnMacStateCheckTimerEvent+0x248>
                    UpLinkCounter++;
 8005cf6:	4b9d      	ldr	r3, [pc, #628]	; (8005f6c <OnMacStateCheckTimerEvent+0x4b4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	4a9b      	ldr	r2, [pc, #620]	; (8005f6c <OnMacStateCheckTimerEvent+0x4b4>)
 8005cfe:	6013      	str	r3, [r2, #0]
                }
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005d00:	4b95      	ldr	r3, [pc, #596]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005d02:	781a      	ldrb	r2, [r3, #0]
 8005d04:	4b93      	ldr	r3, [pc, #588]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005d06:	715a      	strb	r2, [r3, #5]

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005d08:	4b99      	ldr	r3, [pc, #612]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	4a97      	ldr	r2, [pc, #604]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005d12:	6013      	str	r3, [r2, #0]
            }
        }

        if ( ( AckTimeoutRetry == true ) && ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == 0 ) ) {
 8005d14:	4b92      	ldr	r3, [pc, #584]	; (8005f60 <OnMacStateCheckTimerEvent+0x4a8>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8094 	beq.w	8005e46 <OnMacStateCheckTimerEvent+0x38e>
 8005d1e:	4b94      	ldr	r3, [pc, #592]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 808d 	bne.w	8005e46 <OnMacStateCheckTimerEvent+0x38e>
            // Retransmissions procedure for confirmed uplinks
            AckTimeoutRetry = false;
 8005d2c:	4b8c      	ldr	r3, [pc, #560]	; (8005f60 <OnMacStateCheckTimerEvent+0x4a8>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
            if ( ( AckTimeoutRetriesCounter < AckTimeoutRetries ) && ( AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) ) {
 8005d32:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005d34:	781a      	ldrb	r2, [r3, #0]
 8005d36:	4b89      	ldr	r3, [pc, #548]	; (8005f5c <OnMacStateCheckTimerEvent+0x4a4>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d25c      	bcs.n	8005df8 <OnMacStateCheckTimerEvent+0x340>
 8005d3e:	4b86      	ldr	r3, [pc, #536]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d858      	bhi.n	8005df8 <OnMacStateCheckTimerEvent+0x340>
                AckTimeoutRetriesCounter++;
 8005d46:	4b84      	ldr	r3, [pc, #528]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4b82      	ldr	r3, [pc, #520]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005d50:	701a      	strb	r2, [r3, #0]

                if ( ( AckTimeoutRetriesCounter % 2 ) == 1 ) {
 8005d52:	4b81      	ldr	r3, [pc, #516]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <OnMacStateCheckTimerEvent+0x2d8>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8005d60:	231e      	movs	r3, #30
 8005d62:	723b      	strb	r3, [r7, #8]
                    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8005d64:	4b83      	ldr	r3, [pc, #524]	; (8005f74 <OnMacStateCheckTimerEvent+0x4bc>)
 8005d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d6a:	72bb      	strb	r3, [r7, #10]
                    getPhy.Datarate = LoRaMacParams.ChannelsDatarate;
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <OnMacStateCheckTimerEvent+0x4bc>)
 8005d6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005d72:	727b      	strb	r3, [r7, #9]
                    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8005d74:	4b80      	ldr	r3, [pc, #512]	; (8005f78 <OnMacStateCheckTimerEvent+0x4c0>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f107 0208 	add.w	r2, r7, #8
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f003 fe86 	bl	8009a90 <RegionGetPhyParam>
 8005d84:	4603      	mov	r3, r0
 8005d86:	607b      	str	r3, [r7, #4]
                    LoRaMacParams.ChannelsDatarate = phyParam.Value;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	b25a      	sxtb	r2, r3
 8005d8c:	4b79      	ldr	r3, [pc, #484]	; (8005f74 <OnMacStateCheckTimerEvent+0x4bc>)
 8005d8e:	705a      	strb	r2, [r3, #1]
                }
                // Try to send the frame again
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005d90:	f001 f864 	bl	8006e5c <ScheduleTx>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d105      	bne.n	8005da6 <OnMacStateCheckTimerEvent+0x2ee>
                    LoRaMacFlags.Bits.MacDone = 0;
 8005d9a:	4a6d      	ldr	r2, [pc, #436]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005d9c:	7813      	ldrb	r3, [r2, #0]
 8005d9e:	f36f 1345 	bfc	r3, #5, #1
 8005da2:	7013      	strb	r3, [r2, #0]
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005da4:	e04e      	b.n	8005e44 <OnMacStateCheckTimerEvent+0x38c>
                } else {
                    // The DR is not applicable for the payload size
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8005da6:	4b6b      	ldr	r3, [pc, #428]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005da8:	2209      	movs	r2, #9
 8005daa:	705a      	strb	r2, [r3, #1]

                    MacCommandsBufferIndex = 0;
 8005dac:	4b73      	ldr	r3, [pc, #460]	; (8005f7c <OnMacStateCheckTimerEvent+0x4c4>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005db2:	4b6f      	ldr	r3, [pc, #444]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	4a6d      	ldr	r2, [pc, #436]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005dbc:	6013      	str	r3, [r2, #0]
                    NodeAckRequested = false;
 8005dbe:	4b69      	ldr	r3, [pc, #420]	; (8005f64 <OnMacStateCheckTimerEvent+0x4ac>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
                    McpsConfirm.AckReceived = false;
 8005dc4:	4b63      	ldr	r3, [pc, #396]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	711a      	strb	r2, [r3, #4]
                    McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005dca:	4b63      	ldr	r3, [pc, #396]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	4b61      	ldr	r3, [pc, #388]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005dd0:	715a      	strb	r2, [r3, #5]
                    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8005dd2:	4b68      	ldr	r3, [pc, #416]	; (8005f74 <OnMacStateCheckTimerEvent+0x4bc>)
 8005dd4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005ddc:	709a      	strb	r2, [r3, #2]
                    if ( IsUpLinkCounterFixed == false ) {
 8005dde:	4b62      	ldr	r3, [pc, #392]	; (8005f68 <OnMacStateCheckTimerEvent+0x4b0>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f083 0301 	eor.w	r3, r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d02b      	beq.n	8005e44 <OnMacStateCheckTimerEvent+0x38c>
                        UpLinkCounter++;
 8005dec:	4b5f      	ldr	r3, [pc, #380]	; (8005f6c <OnMacStateCheckTimerEvent+0x4b4>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a5e      	ldr	r2, [pc, #376]	; (8005f6c <OnMacStateCheckTimerEvent+0x4b4>)
 8005df4:	6013      	str	r3, [r2, #0]
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005df6:	e025      	b.n	8005e44 <OnMacStateCheckTimerEvent+0x38c>
                    }
                }
            } else {
                RegionInitDefaults( LoRaMacRegion, INIT_TYPE_RESTORE );
 8005df8:	4b5f      	ldr	r3, [pc, #380]	; (8005f78 <OnMacStateCheckTimerEvent+0x4c0>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f003 fe70 	bl	8009ae4 <RegionInitDefaults>

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005e04:	4b5a      	ldr	r3, [pc, #360]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	4a58      	ldr	r2, [pc, #352]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005e0e:	6013      	str	r3, [r2, #0]

                MacCommandsBufferIndex = 0;
 8005e10:	4b5a      	ldr	r3, [pc, #360]	; (8005f7c <OnMacStateCheckTimerEvent+0x4c4>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 8005e16:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <OnMacStateCheckTimerEvent+0x4ac>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
                McpsConfirm.AckReceived = false;
 8005e1c:	4b4d      	ldr	r3, [pc, #308]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	711a      	strb	r2, [r3, #4]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005e22:	4b4d      	ldr	r3, [pc, #308]	; (8005f58 <OnMacStateCheckTimerEvent+0x4a0>)
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	4b4b      	ldr	r3, [pc, #300]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005e28:	715a      	strb	r2, [r3, #5]
                if ( IsUpLinkCounterFixed == false ) {
 8005e2a:	4b4f      	ldr	r3, [pc, #316]	; (8005f68 <OnMacStateCheckTimerEvent+0x4b0>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f083 0301 	eor.w	r3, r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <OnMacStateCheckTimerEvent+0x38e>
                    UpLinkCounter++;
 8005e38:	4b4c      	ldr	r3, [pc, #304]	; (8005f6c <OnMacStateCheckTimerEvent+0x4b4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	4a4b      	ldr	r2, [pc, #300]	; (8005f6c <OnMacStateCheckTimerEvent+0x4b4>)
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e000      	b.n	8005e46 <OnMacStateCheckTimerEvent+0x38e>
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005e44:	bf00      	nop
            }
        }
    }

    // Handle events
    if( LoRaMacState == LORAMAC_IDLE )
 8005e46:	4b4a      	ldr	r3, [pc, #296]	; (8005f70 <OnMacStateCheckTimerEvent+0x4b8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d151      	bne.n	8005ef2 <OnMacStateCheckTimerEvent+0x43a>
    {
        if( LoRaMacFlags.Bits.McpsReq == 1 )
 8005e4e:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d009      	beq.n	8005e70 <OnMacStateCheckTimerEvent+0x3b8>
        {
            LoRaMacFlags.Bits.McpsReq = 0;
 8005e5c:	4a3c      	ldr	r2, [pc, #240]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005e5e:	7813      	ldrb	r3, [r2, #0]
 8005e60:	f36f 0300 	bfc	r3, #0, #1
 8005e64:	7013      	strb	r3, [r2, #0]
            LoRaMacPrimitives->MacMcpsConfirm( &McpsConfirm );
 8005e66:	4b46      	ldr	r3, [pc, #280]	; (8005f80 <OnMacStateCheckTimerEvent+0x4c8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4839      	ldr	r0, [pc, #228]	; (8005f54 <OnMacStateCheckTimerEvent+0x49c>)
 8005e6e:	4798      	blx	r3
        }

        if( LoRaMacFlags.Bits.MlmeReq == 1 )
 8005e70:	4b37      	ldr	r3, [pc, #220]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d011      	beq.n	8005ea2 <OnMacStateCheckTimerEvent+0x3ea>
        {
            LoRaMacFlags.Bits.MlmeReq = 0;
 8005e7e:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005e80:	7813      	ldrb	r3, [r2, #0]
 8005e82:	f36f 03c3 	bfc	r3, #3, #1
 8005e86:	7013      	strb	r3, [r2, #0]
            LoRaMacConfirmQueueHandleCb( &MlmeConfirm );
 8005e88:	483e      	ldr	r0, [pc, #248]	; (8005f84 <OnMacStateCheckTimerEvent+0x4cc>)
 8005e8a:	f002 fffb 	bl	8008e84 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8005e8e:	f003 f847 	bl	8008f20 <LoRaMacConfirmQueueGetCnt>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <OnMacStateCheckTimerEvent+0x3ea>
            {
                LoRaMacFlags.Bits.MlmeReq = 1;
 8005e98:	4a2d      	ldr	r2, [pc, #180]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005e9a:	7813      	ldrb	r3, [r2, #0]
 8005e9c:	f043 0308 	orr.w	r3, r3, #8
 8005ea0:	7013      	strb	r3, [r2, #0]
            }
        }

        // Handle MLME indication
        if( LoRaMacFlags.Bits.MlmeInd == 1 )
 8005ea2:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <OnMacStateCheckTimerEvent+0x40c>
        {
            LoRaMacPrimitives->MacMlmeIndication( &MlmeIndication );
 8005eb0:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <OnMacStateCheckTimerEvent+0x4c8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	4834      	ldr	r0, [pc, #208]	; (8005f88 <OnMacStateCheckTimerEvent+0x4d0>)
 8005eb8:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeInd = 0;
 8005eba:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005ebc:	7813      	ldrb	r3, [r2, #0]
 8005ebe:	f36f 1304 	bfc	r3, #4, #1
 8005ec2:	7013      	strb	r3, [r2, #0]
        }
        // Verify if sticky MAC commands are pending or not
        if( IsStickyMacCommandPending( ) == true )
 8005ec4:	f000 fa6c 	bl	80063a0 <IsStickyMacCommandPending>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <OnMacStateCheckTimerEvent+0x42e>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8005ece:	f000 fa77 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
            LoRaMacPrimitives->MacMlmeIndication( &MlmeIndication );
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	; (8005f80 <OnMacStateCheckTimerEvent+0x4c8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	482b      	ldr	r0, [pc, #172]	; (8005f88 <OnMacStateCheckTimerEvent+0x4d0>)
 8005eda:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeInd = 0;
 8005edc:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005ede:	7813      	ldrb	r3, [r2, #0]
 8005ee0:	f36f 1304 	bfc	r3, #4, #1
 8005ee4:	7013      	strb	r3, [r2, #0]
        }

        // Procedure done. Reset variables.
        LoRaMacFlags.Bits.MacDone = 0;
 8005ee6:	4a1a      	ldr	r2, [pc, #104]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005ee8:	7813      	ldrb	r3, [r2, #0]
 8005eea:	f36f 1345 	bfc	r3, #5, #1
 8005eee:	7013      	strb	r3, [r2, #0]
 8005ef0:	e007      	b.n	8005f02 <OnMacStateCheckTimerEvent+0x44a>

    }
    else
    {
        // Operation not finished restart timer
        TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8005ef2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005ef6:	4825      	ldr	r0, [pc, #148]	; (8005f8c <OnMacStateCheckTimerEvent+0x4d4>)
 8005ef8:	f00a f8ee 	bl	80100d8 <TimerSetValue>
        TimerStart( &MacStateCheckTimer );
 8005efc:	4823      	ldr	r0, [pc, #140]	; (8005f8c <OnMacStateCheckTimerEvent+0x4d4>)
 8005efe:	f009 fee7 	bl	800fcd0 <TimerStart>
    }

    // Handle MCPS indication
    if( LoRaMacFlags.Bits.McpsInd == 1 )
 8005f02:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <OnMacStateCheckTimerEvent+0x490>
    {
        LoRaMacFlags.Bits.McpsInd = 0;
 8005f10:	4a0f      	ldr	r2, [pc, #60]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005f12:	7813      	ldrb	r3, [r2, #0]
 8005f14:	f36f 0341 	bfc	r3, #1, #1
 8005f18:	7013      	strb	r3, [r2, #0]
        if( LoRaMacDeviceClass == CLASS_C )
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <OnMacStateCheckTimerEvent+0x4d8>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d101      	bne.n	8005f26 <OnMacStateCheckTimerEvent+0x46e>
        {// Activate RX2 window for Class C
            OpenContinuousRx2Window( );
 8005f22:	f001 f971 	bl	8007208 <OpenContinuousRx2Window>
        }
        if( LoRaMacFlags.Bits.McpsIndSkip == 0 )
 8005f26:	4b0a      	ldr	r3, [pc, #40]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 0304 	and.w	r3, r3, #4
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <OnMacStateCheckTimerEvent+0x486>
        {
            LoRaMacPrimitives->MacMcpsIndication( &McpsIndication );
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <OnMacStateCheckTimerEvent+0x4c8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4816      	ldr	r0, [pc, #88]	; (8005f94 <OnMacStateCheckTimerEvent+0x4dc>)
 8005f3c:	4798      	blx	r3
        }
        LoRaMacFlags.Bits.McpsIndSkip = 0;
 8005f3e:	4a04      	ldr	r2, [pc, #16]	; (8005f50 <OnMacStateCheckTimerEvent+0x498>)
 8005f40:	7813      	ldrb	r3, [r2, #0]
 8005f42:	f36f 0382 	bfc	r3, #2, #1
 8005f46:	7013      	strb	r3, [r2, #0]
    }

}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000a18 	.word	0x20000a18
 8005f54:	200009c0 	.word	0x200009c0
 8005f58:	2000000a 	.word	0x2000000a
 8005f5c:	20000009 	.word	0x20000009
 8005f60:	200004b8 	.word	0x200004b8
 8005f64:	20000360 	.word	0x20000360
 8005f68:	20000358 	.word	0x20000358
 8005f6c:	20000350 	.word	0x20000350
 8005f70:	2000047c 	.word	0x2000047c
 8005f74:	20000a78 	.word	0x20000a78
 8005f78:	20000110 	.word	0x20000110
 8005f7c:	20000363 	.word	0x20000363
 8005f80:	20000494 	.word	0x20000494
 8005f84:	20000994 	.word	0x20000994
 8005f88:	20000ab4 	.word	0x20000ab4
 8005f8c:	20000480 	.word	0x20000480
 8005f90:	20000148 	.word	0x20000148
 8005f94:	200009e8 	.word	0x200009e8

08005f98 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    LoRaMacFrameCtrl_t fCtrl;
    AlternateDrParams_t altDr;

    TimerStop( &TxDelayedTimer );
 8005f9e:	4822      	ldr	r0, [pc, #136]	; (8006028 <OnTxDelayedTimerEvent+0x90>)
 8005fa0:	f009 ffde 	bl	800ff60 <TimerStop>
    LoRaMacState &= ~LORAMAC_TX_DELAYED;
 8005fa4:	4b21      	ldr	r3, [pc, #132]	; (800602c <OnTxDelayedTimerEvent+0x94>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f023 0310 	bic.w	r3, r3, #16
 8005fac:	4a1f      	ldr	r2, [pc, #124]	; (800602c <OnTxDelayedTimerEvent+0x94>)
 8005fae:	6013      	str	r3, [r2, #0]

    if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8005fb0:	4b1f      	ldr	r3, [pc, #124]	; (8006030 <OnTxDelayedTimerEvent+0x98>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d02e      	beq.n	800601c <OnTxDelayedTimerEvent+0x84>
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <OnTxDelayedTimerEvent+0x9c>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d12a      	bne.n	800601c <OnTxDelayedTimerEvent+0x84>
        ResetMacParameters( );
 8005fc6:	f001 f86b 	bl	80070a0 <ResetMacParameters>

        altDr.NbTrials = JoinRequestTrials + 1;
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <OnTxDelayedTimerEvent+0xa0>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	80bb      	strh	r3, [r7, #4]

        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <OnTxDelayedTimerEvent+0xa4>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	1d3a      	adds	r2, r7, #4
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f003 fe95 	bl	8009d0e <RegionAlternateDr>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <OnTxDelayedTimerEvent+0xa8>)
 8005fea:	705a      	strb	r2, [r3, #1]

        macHdr.Value = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	733b      	strb	r3, [r7, #12]
        macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8005ff0:	7b3b      	ldrb	r3, [r7, #12]
 8005ff2:	f36f 1347 	bfc	r3, #5, #3
 8005ff6:	733b      	strb	r3, [r7, #12]

        fCtrl.Value = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	723b      	strb	r3, [r7, #8]
        fCtrl.Bits.Adr = AdrCtrlOn;
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <OnTxDelayedTimerEvent+0xac>)
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	7a3b      	ldrb	r3, [r7, #8]
 8006002:	f362 13c7 	bfi	r3, r2, #7, #1
 8006006:	723b      	strb	r3, [r7, #8]

        /* In case of join request retransmissions, the stack must prepare
         * the frame again, because the network server keeps track of the random
         * LoRaMacDevNonce values to prevent reply attacks. */
        PrepareFrame( &macHdr, &fCtrl, 0, NULL, 0 );
 8006008:	f107 0108 	add.w	r1, r7, #8
 800600c:	f107 000c 	add.w	r0, r7, #12
 8006010:	2300      	movs	r3, #0
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	2300      	movs	r3, #0
 8006016:	2200      	movs	r2, #0
 8006018:	f001 f902 	bl	8007220 <PrepareFrame>
    }

    ScheduleTx( );
 800601c:	f000 ff1e 	bl	8006e5c <ScheduleTx>
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20000a5c 	.word	0x20000a5c
 800602c:	2000047c 	.word	0x2000047c
 8006030:	20000a18 	.word	0x20000a18
 8006034:	20000994 	.word	0x20000994
 8006038:	20000a14 	.word	0x20000a14
 800603c:	20000110 	.word	0x20000110
 8006040:	20000a78 	.word	0x20000a78
 8006044:	2000035a 	.word	0x2000035a

08006048 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
    TimerStop( &RxWindowTimer1 );
 800604c:	481c      	ldr	r0, [pc, #112]	; (80060c0 <OnRxWindow1TimerEvent+0x78>)
 800604e:	f009 ff87 	bl	800ff60 <TimerStop>
    RxSlot = RX_SLOT_WIN_1;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <OnRxWindow1TimerEvent+0x7c>)
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]

    RxWindow1Config.Channel = Channel;
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <OnRxWindow1TimerEvent+0x80>)
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 800605e:	701a      	strb	r2, [r3, #0]
    RxWindow1Config.DrOffset = LoRaMacParams.Rx1DrOffset;
 8006060:	4b1b      	ldr	r3, [pc, #108]	; (80060d0 <OnRxWindow1TimerEvent+0x88>)
 8006062:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006066:	b25a      	sxtb	r2, r3
 8006068:	4b18      	ldr	r3, [pc, #96]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 800606a:	70da      	strb	r2, [r3, #3]
    RxWindow1Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800606c:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <OnRxWindow1TimerEvent+0x88>)
 800606e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 8006074:	741a      	strb	r2, [r3, #16]
    RxWindow1Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 8006076:	4b16      	ldr	r3, [pc, #88]	; (80060d0 <OnRxWindow1TimerEvent+0x88>)
 8006078:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800607c:	4b13      	ldr	r3, [pc, #76]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 800607e:	745a      	strb	r2, [r3, #17]
    RxWindow1Config.RxContinuous = false;
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 8006082:	2200      	movs	r2, #0
 8006084:	749a      	strb	r2, [r3, #18]
    RxWindow1Config.RxSlot = RxSlot;
 8006086:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <OnRxWindow1TimerEvent+0x7c>)
 8006088:	781a      	ldrb	r2, [r3, #0]
 800608a:	4b10      	ldr	r3, [pc, #64]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 800608c:	74da      	strb	r2, [r3, #19]

    if ( LoRaMacDeviceClass == CLASS_C ) {
 800608e:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <OnRxWindow1TimerEvent+0x8c>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d102      	bne.n	800609c <OnRxWindow1TimerEvent+0x54>
        Radio.Standby( );
 8006096:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <OnRxWindow1TimerEvent+0x90>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	4798      	blx	r3
    }

    RegionRxConfig( LoRaMacRegion, &RxWindow1Config, ( int8_t * )&McpsIndication.RxDatarate );
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <OnRxWindow1TimerEvent+0x94>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <OnRxWindow1TimerEvent+0x98>)
 80060a2:	490a      	ldr	r1, [pc, #40]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 80060a4:	4618      	mov	r0, r3
 80060a6:	f003 fda0 	bl	8009bea <RegionRxConfig>
    //printf("w1 dr:%d\r\n",McpsIndication.RxDatarate);
    RxWindowSetup( RxWindow1Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <OnRxWindow1TimerEvent+0x84>)
 80060ac:	7c9b      	ldrb	r3, [r3, #18]
 80060ae:	4a08      	ldr	r2, [pc, #32]	; (80060d0 <OnRxWindow1TimerEvent+0x88>)
 80060b0:	68d2      	ldr	r2, [r2, #12]
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 f8bb 	bl	8006230 <RxWindowSetup>
#if(LoraWan_RGB==1)
    RGB_ON(COLOR_RXWINDOW1,0);
#endif
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000a00 	.word	0x20000a00
 80060c4:	20000a74 	.word	0x20000a74
 80060c8:	20000475 	.word	0x20000475
 80060cc:	200009d4 	.word	0x200009d4
 80060d0:	20000a78 	.word	0x20000a78
 80060d4:	20000148 	.word	0x20000148
 80060d8:	08012794 	.word	0x08012794
 80060dc:	20000110 	.word	0x20000110
 80060e0:	200009ec 	.word	0x200009ec

080060e4 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
    TimerStop( &RxWindowTimer2 );
 80060e8:	481c      	ldr	r0, [pc, #112]	; (800615c <OnRxWindow2TimerEvent+0x78>)
 80060ea:	f009 ff39 	bl	800ff60 <TimerStop>

    RxWindow2Config.Channel = Channel;
 80060ee:	4b1c      	ldr	r3, [pc, #112]	; (8006160 <OnRxWindow2TimerEvent+0x7c>)
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 80060f4:	701a      	strb	r2, [r3, #0]
    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 80060f6:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <OnRxWindow2TimerEvent+0x84>)
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 80060fc:	6053      	str	r3, [r2, #4]
    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80060fe:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <OnRxWindow2TimerEvent+0x84>)
 8006100:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8006104:	4b17      	ldr	r3, [pc, #92]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 8006106:	741a      	strb	r2, [r3, #16]
    RxWindow2Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 8006108:	4b17      	ldr	r3, [pc, #92]	; (8006168 <OnRxWindow2TimerEvent+0x84>)
 800610a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 8006110:	745a      	strb	r2, [r3, #17]
    RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8006112:	4b14      	ldr	r3, [pc, #80]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 8006114:	2201      	movs	r2, #1
 8006116:	74da      	strb	r2, [r3, #19]

    if ( LoRaMacDeviceClass != CLASS_C ) {
 8006118:	4b14      	ldr	r3, [pc, #80]	; (800616c <OnRxWindow2TimerEvent+0x88>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d003      	beq.n	8006128 <OnRxWindow2TimerEvent+0x44>
        RxWindow2Config.RxContinuous = false;
 8006120:	4b10      	ldr	r3, [pc, #64]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 8006122:	2200      	movs	r2, #0
 8006124:	749a      	strb	r2, [r3, #18]
 8006126:	e002      	b.n	800612e <OnRxWindow2TimerEvent+0x4a>
    } else {
        RxWindow2Config.RxContinuous = true;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 800612a:	2201      	movs	r2, #1
 800612c:	749a      	strb	r2, [r3, #18]
    }

    if ( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t * )&McpsIndication.RxDatarate ) == true ) {
 800612e:	4b10      	ldr	r3, [pc, #64]	; (8006170 <OnRxWindow2TimerEvent+0x8c>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	4a10      	ldr	r2, [pc, #64]	; (8006174 <OnRxWindow2TimerEvent+0x90>)
 8006134:	490b      	ldr	r1, [pc, #44]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 8006136:	4618      	mov	r0, r3
 8006138:	f003 fd57 	bl	8009bea <RegionRxConfig>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <OnRxWindow2TimerEvent+0x74>
    	//printf("w2 dr:%d\r\n",McpsIndication.RxDatarate);
        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <OnRxWindow2TimerEvent+0x80>)
 8006144:	7c9b      	ldrb	r3, [r3, #18]
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <OnRxWindow2TimerEvent+0x84>)
 8006148:	68d2      	ldr	r2, [r2, #12]
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f86f 	bl	8006230 <RxWindowSetup>
        RxSlot = RX_SLOT_WIN_2;
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <OnRxWindow2TimerEvent+0x94>)
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
    }
#if(LoraWan_RGB==1)
	RGB_ON(COLOR_RXWINDOW2,0);
#endif

}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200009a8 	.word	0x200009a8
 8006160:	20000475 	.word	0x20000475
 8006164:	20000ae4 	.word	0x20000ae4
 8006168:	20000a78 	.word	0x20000a78
 800616c:	20000148 	.word	0x20000148
 8006170:	20000110 	.word	0x20000110
 8006174:	200009ec 	.word	0x200009ec
 8006178:	20000a74 	.word	0x20000a74

0800617c <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived,
                                      uint8_t ackTimeoutRetriesCounter, uint8_t ackTimeoutRetries )
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	461a      	mov	r2, r3
 800618a:	4623      	mov	r3, r4
 800618c:	71fb      	strb	r3, [r7, #7]
 800618e:	4603      	mov	r3, r0
 8006190:	71bb      	strb	r3, [r7, #6]
 8006192:	460b      	mov	r3, r1
 8006194:	717b      	strb	r3, [r7, #5]
 8006196:	4613      	mov	r3, r2
 8006198:	713b      	strb	r3, [r7, #4]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	f083 0301 	eor.w	r3, r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d006      	beq.n	80061b4 <CheckToDisableAckTimeout+0x38>
    {
        if( devClass == CLASS_C )
 80061a6:	79bb      	ldrb	r3, [r7, #6]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d111      	bne.n	80061d0 <CheckToDisableAckTimeout+0x54>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            TimerStop( &AckTimeoutTimer );
 80061ac:	480a      	ldr	r0, [pc, #40]	; (80061d8 <CheckToDisableAckTimeout+0x5c>)
 80061ae:	f009 fed7 	bl	800ff60 <TimerStop>
                // elapsed. If so, stop the timer.
                TimerStop( &AckTimeoutTimer );
            }
        }
    }
}
 80061b2:	e00d      	b.n	80061d0 <CheckToDisableAckTimeout+0x54>
        if( ackReceived == 1 )
 80061b4:	797b      	ldrb	r3, [r7, #5]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <CheckToDisableAckTimeout+0x46>
            TimerStop( &AckTimeoutTimer );
 80061ba:	4807      	ldr	r0, [pc, #28]	; (80061d8 <CheckToDisableAckTimeout+0x5c>)
 80061bc:	f009 fed0 	bl	800ff60 <TimerStop>
}
 80061c0:	e006      	b.n	80061d0 <CheckToDisableAckTimeout+0x54>
            if( ackTimeoutRetriesCounter > ackTimeoutRetries )
 80061c2:	793a      	ldrb	r2, [r7, #4]
 80061c4:	7e3b      	ldrb	r3, [r7, #24]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d902      	bls.n	80061d0 <CheckToDisableAckTimeout+0x54>
                TimerStop( &AckTimeoutTimer );
 80061ca:	4803      	ldr	r0, [pc, #12]	; (80061d8 <CheckToDisableAckTimeout+0x5c>)
 80061cc:	f009 fec8 	bl	800ff60 <TimerStop>
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd90      	pop	{r4, r7, pc}
 80061d8:	20000ad0 	.word	0x20000ad0

080061dc <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
    TimerStop( &AckTimeoutTimer );
 80061e0:	480d      	ldr	r0, [pc, #52]	; (8006218 <OnAckTimeoutTimerEvent+0x3c>)
 80061e2:	f009 febd 	bl	800ff60 <TimerStop>

    if ( NodeAckRequested == true ) {
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <OnAckTimeoutTimerEvent+0x40>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <OnAckTimeoutTimerEvent+0x24>
        AckTimeoutRetry = true;
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <OnAckTimeoutTimerEvent+0x44>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
        LoRaMacState &= ~LORAMAC_ACK_REQ;
 80061f4:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <OnAckTimeoutTimerEvent+0x48>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f023 0304 	bic.w	r3, r3, #4
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <OnAckTimeoutTimerEvent+0x48>)
 80061fe:	6013      	str	r3, [r2, #0]
    }
    if ( LoRaMacDeviceClass == CLASS_C ) {
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <OnAckTimeoutTimerEvent+0x4c>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d104      	bne.n	8006212 <OnAckTimeoutTimerEvent+0x36>
        LoRaMacFlags.Bits.MacDone = 1;
 8006208:	4a08      	ldr	r2, [pc, #32]	; (800622c <OnAckTimeoutTimerEvent+0x50>)
 800620a:	7813      	ldrb	r3, [r2, #0]
 800620c:	f043 0320 	orr.w	r3, r3, #32
 8006210:	7013      	strb	r3, [r2, #0]
    }
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000ad0 	.word	0x20000ad0
 800621c:	20000360 	.word	0x20000360
 8006220:	200004b8 	.word	0x200004b8
 8006224:	2000047c 	.word	0x2000047c
 8006228:	20000148 	.word	0x20000148
 800622c:	20000a18 	.word	0x20000a18

08006230 <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	6039      	str	r1, [r7, #0]
 800623a:	71fb      	strb	r3, [r7, #7]
    if ( rxContinuous == false ) {
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	f083 0301 	eor.w	r3, r3, #1
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <RxWindowSetup+0x22>
        Radio.Rx( maxRxWindow );
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <RxWindowSetup+0x34>)
 800624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624c:	6838      	ldr	r0, [r7, #0]
 800624e:	4798      	blx	r3
    } else {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 8006250:	e003      	b.n	800625a <RxWindowSetup+0x2a>
        Radio.Rx( 0 ); // Continuous mode
 8006252:	4b04      	ldr	r3, [pc, #16]	; (8006264 <RxWindowSetup+0x34>)
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	2000      	movs	r0, #0
 8006258:	4798      	blx	r3
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	08012794 	.word	0x08012794

08006268 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b087      	sub	sp, #28
 800626c:	af02      	add	r7, sp, #8
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006272:	2303      	movs	r3, #3
 8006274:	73fb      	strb	r3, [r7, #15]

    switch( LoRaMacDeviceClass )
 8006276:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <SwitchClass+0x88>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d024      	beq.n	80062c8 <SwitchClass+0x60>
 800627e:	2b02      	cmp	r3, #2
 8006280:	dc31      	bgt.n	80062e6 <SwitchClass+0x7e>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <SwitchClass+0x22>
 8006286:	2b01      	cmp	r3, #1
                status = LORAMAC_STATUS_OK;
            }
            break;
        }
        case CLASS_B:
        	break;
 8006288:	e02d      	b.n	80062e6 <SwitchClass+0x7e>
            if( deviceClass == CLASS_C )
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d127      	bne.n	80062e0 <SwitchClass+0x78>
                LoRaMacDeviceClass = deviceClass;
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <SwitchClass+0x88>)
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	7013      	strb	r3, [r2, #0]
                NodeAckRequested = false;
 8006296:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <SwitchClass+0x8c>)
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
                Radio.Sleep( );
 800629c:	4b16      	ldr	r3, [pc, #88]	; (80062f8 <SwitchClass+0x90>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4798      	blx	r3
                RegionComputeRxWindowParameters( LoRaMacRegion,
 80062a2:	4b16      	ldr	r3, [pc, #88]	; (80062fc <SwitchClass+0x94>)
 80062a4:	7818      	ldrb	r0, [r3, #0]
                                                 LoRaMacParams.Rx2Channel.Datarate,
 80062a6:	4b16      	ldr	r3, [pc, #88]	; (8006300 <SwitchClass+0x98>)
 80062a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                RegionComputeRxWindowParameters( LoRaMacRegion,
 80062ac:	b259      	sxtb	r1, r3
 80062ae:	4b14      	ldr	r3, [pc, #80]	; (8006300 <SwitchClass+0x98>)
 80062b0:	7a1a      	ldrb	r2, [r3, #8]
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <SwitchClass+0x98>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	4c13      	ldr	r4, [pc, #76]	; (8006304 <SwitchClass+0x9c>)
 80062b8:	9400      	str	r4, [sp, #0]
 80062ba:	f003 fc7c 	bl	8009bb6 <RegionComputeRxWindowParameters>
                OpenContinuousRx2Window( );
 80062be:	f000 ffa3 	bl	8007208 <OpenContinuousRx2Window>
                status = LORAMAC_STATUS_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
            break;
 80062c6:	e00b      	b.n	80062e0 <SwitchClass+0x78>
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <SwitchClass+0x7c>
            {
                LoRaMacDeviceClass = deviceClass;
 80062ce:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <SwitchClass+0x88>)
 80062d0:	79fb      	ldrb	r3, [r7, #7]
 80062d2:	7013      	strb	r3, [r2, #0]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80062d4:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <SwitchClass+0x90>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80062de:	e001      	b.n	80062e4 <SwitchClass+0x7c>
            break;
 80062e0:	bf00      	nop
 80062e2:	e000      	b.n	80062e6 <SwitchClass+0x7e>
            break;
 80062e4:	bf00      	nop
        }
    }

    return status;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}
 80062f0:	20000148 	.word	0x20000148
 80062f4:	20000360 	.word	0x20000360
 80062f8:	08012794 	.word	0x08012794
 80062fc:	20000110 	.word	0x20000110
 8006300:	20000a78 	.word	0x20000a78
 8006304:	20000ae4 	.word	0x20000ae4

08006308 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	71fb      	strb	r3, [r7, #7]
 8006312:	460b      	mov	r3, r1
 8006314:	71bb      	strb	r3, [r7, #6]
 8006316:	4613      	mov	r3, r2
 8006318:	717b      	strb	r3, [r7, #5]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint16_t maxN = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	82fb      	strh	r3, [r7, #22]
    uint16_t payloadSize = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	82bb      	strh	r3, [r7, #20]

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8006322:	4b1d      	ldr	r3, [pc, #116]	; (8006398 <ValidatePayloadLength+0x90>)
 8006324:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006328:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800632a:	79bb      	ldrb	r3, [r7, #6]
 800632c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800632e:	2309      	movs	r3, #9
 8006330:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( LoRaMacParams.RepeaterSupport == true )
 8006332:	4b19      	ldr	r3, [pc, #100]	; (8006398 <ValidatePayloadLength+0x90>)
 8006334:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <ValidatePayloadLength+0x38>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800633c:	230a      	movs	r3, #10
 800633e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8006340:	4b16      	ldr	r3, [pc, #88]	; (800639c <ValidatePayloadLength+0x94>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f107 0210 	add.w	r2, r7, #16
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f003 fba0 	bl	8009a90 <RegionGetPhyParam>
 8006350:	4603      	mov	r3, r0
 8006352:	60fb      	str	r3, [r7, #12]
    maxN = phyParam.Value;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	82fb      	strh	r3, [r7, #22]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	b29a      	uxth	r2, r3
 800635c:	797b      	ldrb	r3, [r7, #5]
 800635e:	b29b      	uxth	r3, r3
 8006360:	4413      	add	r3, r2
 8006362:	82bb      	strh	r3, [r7, #20]

    // Validation of the application payload size
    if ( ((( payloadSize > maxN ) && (fOptsLen != 0) && (fOptsLen <= maxN)) || ( payloadSize <= maxN )) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) ) {
 8006364:	8aba      	ldrh	r2, [r7, #20]
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	429a      	cmp	r2, r3
 800636a:	d907      	bls.n	800637c <ValidatePayloadLength+0x74>
 800636c:	797b      	ldrb	r3, [r7, #5]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <ValidatePayloadLength+0x74>
 8006372:	797b      	ldrb	r3, [r7, #5]
 8006374:	b29b      	uxth	r3, r3
 8006376:	8afa      	ldrh	r2, [r7, #22]
 8006378:	429a      	cmp	r2, r3
 800637a:	d203      	bcs.n	8006384 <ValidatePayloadLength+0x7c>
 800637c:	8aba      	ldrh	r2, [r7, #20]
 800637e:	8afb      	ldrh	r3, [r7, #22]
 8006380:	429a      	cmp	r2, r3
 8006382:	d804      	bhi.n	800638e <ValidatePayloadLength+0x86>
 8006384:	8abb      	ldrh	r3, [r7, #20]
 8006386:	2bff      	cmp	r3, #255	; 0xff
 8006388:	d801      	bhi.n	800638e <ValidatePayloadLength+0x86>
        return true;
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <ValidatePayloadLength+0x88>
    }
    return false;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000a78 	.word	0x20000a78
 800639c:	20000110 	.word	0x20000110

080063a0 <IsStickyMacCommandPending>:

static bool IsStickyMacCommandPending( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
    if( MacCommandsBufferToRepeatIndex > 0 )
 80063a4:	4b05      	ldr	r3, [pc, #20]	; (80063bc <IsStickyMacCommandPending+0x1c>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <IsStickyMacCommandPending+0x10>
    {
        // Sticky MAC commands pending
        return true;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <IsStickyMacCommandPending+0x12>
    }
    return false;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000364 	.word	0x20000364

080063c0 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
    MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80063c4:	4b05      	ldr	r3, [pc, #20]	; (80063dc <SetMlmeScheduleUplinkIndication+0x1c>)
 80063c6:	2204      	movs	r2, #4
 80063c8:	701a      	strb	r2, [r3, #0]
    LoRaMacFlags.Bits.MlmeInd = 1;
 80063ca:	4a05      	ldr	r2, [pc, #20]	; (80063e0 <SetMlmeScheduleUplinkIndication+0x20>)
 80063cc:	7813      	ldrb	r3, [r2, #0]
 80063ce:	f043 0310 	orr.w	r3, r3, #16
 80063d2:	7013      	strb	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	20000ab4 	.word	0x20000ab4
 80063e0:	20000a18 	.word	0x20000a18

080063e4 <AddMacCommand>:

static LoRaMacStatus_t AddMacCommand( uint8_t cmd, uint8_t p1, uint8_t p2 )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
 80063ee:	460b      	mov	r3, r1
 80063f0:	71bb      	strb	r3, [r7, #6]
 80063f2:	4613      	mov	r3, r2
 80063f4:	717b      	strb	r3, [r7, #5]
    LoRaMacStatus_t status = LORAMAC_STATUS_BUSY;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
    // The maximum buffer length must take MAC commands to re-send into account.
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 80063fa:	4bac      	ldr	r3, [pc, #688]	; (80066ac <AddMacCommand+0x2c8>)
 80063fc:	781a      	ldrb	r2, [r3, #0]
 80063fe:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	73bb      	strb	r3, [r7, #14]

    switch ( cmd ) {
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	3b02      	subs	r3, #2
 800640a:	2b11      	cmp	r3, #17
 800640c:	f200 81a2 	bhi.w	8006754 <AddMacCommand+0x370>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <AddMacCommand+0x34>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006461 	.word	0x08006461
 800641c:	08006487 	.word	0x08006487
 8006420:	080064c5 	.word	0x080064c5
 8006424:	080064eb 	.word	0x080064eb
 8006428:	0800652d 	.word	0x0800652d
 800642c:	08006583 	.word	0x08006583
 8006430:	080065c1 	.word	0x080065c1
 8006434:	080065eb 	.word	0x080065eb
 8006438:	08006611 	.word	0x08006611
 800643c:	08006755 	.word	0x08006755
 8006440:	08006755 	.word	0x08006755
 8006444:	0800664f 	.word	0x0800664f
 8006448:	08006755 	.word	0x08006755
 800644c:	08006755 	.word	0x08006755
 8006450:	08006675 	.word	0x08006675
 8006454:	080066b9 	.word	0x080066b9
 8006458:	080066f5 	.word	0x080066f5
 800645c:	08006719 	.word	0x08006719
        case MOTE_MAC_LINK_CHECK_REQ:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006460:	4b93      	ldr	r3, [pc, #588]	; (80066b0 <AddMacCommand+0x2cc>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	7bba      	ldrb	r2, [r7, #14]
 8006466:	429a      	cmp	r2, r3
 8006468:	f240 8176 	bls.w	8006758 <AddMacCommand+0x374>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800646c:	4b90      	ldr	r3, [pc, #576]	; (80066b0 <AddMacCommand+0x2cc>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	b2d1      	uxtb	r1, r2
 8006474:	4a8e      	ldr	r2, [pc, #568]	; (80066b0 <AddMacCommand+0x2cc>)
 8006476:	7011      	strb	r1, [r2, #0]
 8006478:	4619      	mov	r1, r3
 800647a:	4a8e      	ldr	r2, [pc, #568]	; (80066b4 <AddMacCommand+0x2d0>)
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	5453      	strb	r3, [r2, r1]
                // No payload for this command
                status = LORAMAC_STATUS_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006484:	e168      	b.n	8006758 <AddMacCommand+0x374>
        case MOTE_MAC_LINK_ADR_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 8006486:	4b8a      	ldr	r3, [pc, #552]	; (80066b0 <AddMacCommand+0x2cc>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	3b01      	subs	r3, #1
 8006490:	429a      	cmp	r2, r3
 8006492:	f280 8163 	bge.w	800675c <AddMacCommand+0x378>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006496:	4b86      	ldr	r3, [pc, #536]	; (80066b0 <AddMacCommand+0x2cc>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	b2d1      	uxtb	r1, r2
 800649e:	4a84      	ldr	r2, [pc, #528]	; (80066b0 <AddMacCommand+0x2cc>)
 80064a0:	7011      	strb	r1, [r2, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4a83      	ldr	r2, [pc, #524]	; (80066b4 <AddMacCommand+0x2d0>)
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	5453      	strb	r3, [r2, r1]
                // Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80064aa:	4b81      	ldr	r3, [pc, #516]	; (80066b0 <AddMacCommand+0x2cc>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	b2d1      	uxtb	r1, r2
 80064b2:	4a7f      	ldr	r2, [pc, #508]	; (80066b0 <AddMacCommand+0x2cc>)
 80064b4:	7011      	strb	r1, [r2, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	4a7e      	ldr	r2, [pc, #504]	; (80066b4 <AddMacCommand+0x2d0>)
 80064ba:	79bb      	ldrb	r3, [r7, #6]
 80064bc:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80064c2:	e14b      	b.n	800675c <AddMacCommand+0x378>
        case MOTE_MAC_DUTY_CYCLE_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 80064c4:	4b7a      	ldr	r3, [pc, #488]	; (80066b0 <AddMacCommand+0x2cc>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	7bba      	ldrb	r2, [r7, #14]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	f240 8148 	bls.w	8006760 <AddMacCommand+0x37c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80064d0:	4b77      	ldr	r3, [pc, #476]	; (80066b0 <AddMacCommand+0x2cc>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	b2d1      	uxtb	r1, r2
 80064d8:	4a75      	ldr	r2, [pc, #468]	; (80066b0 <AddMacCommand+0x2cc>)
 80064da:	7011      	strb	r1, [r2, #0]
 80064dc:	4619      	mov	r1, r3
 80064de:	4a75      	ldr	r2, [pc, #468]	; (80066b4 <AddMacCommand+0x2d0>)
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80064e8:	e13a      	b.n	8006760 <AddMacCommand+0x37c>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 80064ea:	4b71      	ldr	r3, [pc, #452]	; (80066b0 <AddMacCommand+0x2cc>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	7bbb      	ldrb	r3, [r7, #14]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	429a      	cmp	r2, r3
 80064f6:	f280 8135 	bge.w	8006764 <AddMacCommand+0x380>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80064fa:	4b6d      	ldr	r3, [pc, #436]	; (80066b0 <AddMacCommand+0x2cc>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	b2d1      	uxtb	r1, r2
 8006502:	4a6b      	ldr	r2, [pc, #428]	; (80066b0 <AddMacCommand+0x2cc>)
 8006504:	7011      	strb	r1, [r2, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	4a6a      	ldr	r2, [pc, #424]	; (80066b4 <AddMacCommand+0x2d0>)
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	5453      	strb	r3, [r2, r1]
                // Status: Datarate ACK, Channel ACK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800650e:	4b68      	ldr	r3, [pc, #416]	; (80066b0 <AddMacCommand+0x2cc>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	b2d1      	uxtb	r1, r2
 8006516:	4a66      	ldr	r2, [pc, #408]	; (80066b0 <AddMacCommand+0x2cc>)
 8006518:	7011      	strb	r1, [r2, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	4a65      	ldr	r2, [pc, #404]	; (80066b4 <AddMacCommand+0x2d0>)
 800651e:	79bb      	ldrb	r3, [r7, #6]
 8006520:	5453      	strb	r3, [r2, r1]
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 8006522:	f7ff ff4d 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800652a:	e11b      	b.n	8006764 <AddMacCommand+0x380>
        case MOTE_MAC_DEV_STATUS_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 2 ) ) {
 800652c:	4b60      	ldr	r3, [pc, #384]	; (80066b0 <AddMacCommand+0x2cc>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	3b02      	subs	r3, #2
 8006536:	429a      	cmp	r2, r3
 8006538:	f280 8116 	bge.w	8006768 <AddMacCommand+0x384>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800653c:	4b5c      	ldr	r3, [pc, #368]	; (80066b0 <AddMacCommand+0x2cc>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	b2d1      	uxtb	r1, r2
 8006544:	4a5a      	ldr	r2, [pc, #360]	; (80066b0 <AddMacCommand+0x2cc>)
 8006546:	7011      	strb	r1, [r2, #0]
 8006548:	4619      	mov	r1, r3
 800654a:	4a5a      	ldr	r2, [pc, #360]	; (80066b4 <AddMacCommand+0x2d0>)
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	5453      	strb	r3, [r2, r1]
                // 1st byte Battery
                // 2nd byte Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006550:	4b57      	ldr	r3, [pc, #348]	; (80066b0 <AddMacCommand+0x2cc>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	b2d1      	uxtb	r1, r2
 8006558:	4a55      	ldr	r2, [pc, #340]	; (80066b0 <AddMacCommand+0x2cc>)
 800655a:	7011      	strb	r1, [r2, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	4a55      	ldr	r2, [pc, #340]	; (80066b4 <AddMacCommand+0x2d0>)
 8006560:	79bb      	ldrb	r3, [r7, #6]
 8006562:	5453      	strb	r3, [r2, r1]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 8006564:	4b52      	ldr	r3, [pc, #328]	; (80066b0 <AddMacCommand+0x2cc>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	b2d1      	uxtb	r1, r2
 800656c:	4a50      	ldr	r2, [pc, #320]	; (80066b0 <AddMacCommand+0x2cc>)
 800656e:	7011      	strb	r1, [r2, #0]
 8006570:	4619      	mov	r1, r3
 8006572:	4a50      	ldr	r2, [pc, #320]	; (80066b4 <AddMacCommand+0x2d0>)
 8006574:	797b      	ldrb	r3, [r7, #5]
 8006576:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 8006578:	f7ff ff22 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_DEV_STATUS_ANS p1=%d p2=%d\r\n",p1,p2);
#endif
            }
            break;
 8006580:	e0f2      	b.n	8006768 <AddMacCommand+0x384>
        case MOTE_MAC_NEW_CHANNEL_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 8006582:	4b4b      	ldr	r3, [pc, #300]	; (80066b0 <AddMacCommand+0x2cc>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	3b01      	subs	r3, #1
 800658c:	429a      	cmp	r2, r3
 800658e:	f280 80ed 	bge.w	800676c <AddMacCommand+0x388>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006592:	4b47      	ldr	r3, [pc, #284]	; (80066b0 <AddMacCommand+0x2cc>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	b2d1      	uxtb	r1, r2
 800659a:	4a45      	ldr	r2, [pc, #276]	; (80066b0 <AddMacCommand+0x2cc>)
 800659c:	7011      	strb	r1, [r2, #0]
 800659e:	4619      	mov	r1, r3
 80065a0:	4a44      	ldr	r2, [pc, #272]	; (80066b4 <AddMacCommand+0x2d0>)
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80065a6:	4b42      	ldr	r3, [pc, #264]	; (80066b0 <AddMacCommand+0x2cc>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	b2d1      	uxtb	r1, r2
 80065ae:	4a40      	ldr	r2, [pc, #256]	; (80066b0 <AddMacCommand+0x2cc>)
 80065b0:	7011      	strb	r1, [r2, #0]
 80065b2:	4619      	mov	r1, r3
 80065b4:	4a3f      	ldr	r2, [pc, #252]	; (80066b4 <AddMacCommand+0x2d0>)
 80065b6:	79bb      	ldrb	r3, [r7, #6]
 80065b8:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80065be:	e0d5      	b.n	800676c <AddMacCommand+0x388>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 80065c0:	4b3b      	ldr	r3, [pc, #236]	; (80066b0 <AddMacCommand+0x2cc>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	7bba      	ldrb	r2, [r7, #14]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	f240 80d2 	bls.w	8006770 <AddMacCommand+0x38c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80065cc:	4b38      	ldr	r3, [pc, #224]	; (80066b0 <AddMacCommand+0x2cc>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	b2d1      	uxtb	r1, r2
 80065d4:	4a36      	ldr	r2, [pc, #216]	; (80066b0 <AddMacCommand+0x2cc>)
 80065d6:	7011      	strb	r1, [r2, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	4a36      	ldr	r2, [pc, #216]	; (80066b4 <AddMacCommand+0x2d0>)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 80065e0:	f7ff feee 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80065e8:	e0c2      	b.n	8006770 <AddMacCommand+0x38c>
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <AddMacCommand+0x2cc>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	7bba      	ldrb	r2, [r7, #14]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	f240 80bf 	bls.w	8006774 <AddMacCommand+0x390>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80065f6:	4b2e      	ldr	r3, [pc, #184]	; (80066b0 <AddMacCommand+0x2cc>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	b2d1      	uxtb	r1, r2
 80065fe:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <AddMacCommand+0x2cc>)
 8006600:	7011      	strb	r1, [r2, #0]
 8006602:	4619      	mov	r1, r3
 8006604:	4a2b      	ldr	r2, [pc, #172]	; (80066b4 <AddMacCommand+0x2d0>)
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800660e:	e0b1      	b.n	8006774 <AddMacCommand+0x390>
        case MOTE_MAC_DL_CHANNEL_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <AddMacCommand+0x2cc>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	7bba      	ldrb	r2, [r7, #14]
 8006616:	429a      	cmp	r2, r3
 8006618:	f240 80ae 	bls.w	8006778 <AddMacCommand+0x394>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800661c:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <AddMacCommand+0x2cc>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	b2d1      	uxtb	r1, r2
 8006624:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <AddMacCommand+0x2cc>)
 8006626:	7011      	strb	r1, [r2, #0]
 8006628:	4619      	mov	r1, r3
 800662a:	4a22      	ldr	r2, [pc, #136]	; (80066b4 <AddMacCommand+0x2d0>)
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	5453      	strb	r3, [r2, r1]
                // Status: Uplink frequency exists, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006630:	4b1f      	ldr	r3, [pc, #124]	; (80066b0 <AddMacCommand+0x2cc>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	b2d1      	uxtb	r1, r2
 8006638:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <AddMacCommand+0x2cc>)
 800663a:	7011      	strb	r1, [r2, #0]
 800663c:	4619      	mov	r1, r3
 800663e:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <AddMacCommand+0x2d0>)
 8006640:	79bb      	ldrb	r3, [r7, #6]
 8006642:	5453      	strb	r3, [r2, r1]
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 8006644:	f7ff febc 	bl	80063c0 <SetMlmeScheduleUplinkIndication>

                status = LORAMAC_STATUS_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800664c:	e094      	b.n	8006778 <AddMacCommand+0x394>
        case MOTE_MAC_DEVICE_TIME_REQ:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <AddMacCommand+0x2cc>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b25b      	sxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	f2c0 8091 	blt.w	800677c <AddMacCommand+0x398>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <AddMacCommand+0x2cc>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	b2d1      	uxtb	r1, r2
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <AddMacCommand+0x2cc>)
 8006664:	7011      	strb	r1, [r2, #0]
 8006666:	4619      	mov	r1, r3
 8006668:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <AddMacCommand+0x2d0>)
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
               status = LORAMAC_STATUS_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_DEVICE_TIME_REQ\r\n");
#endif
            }
            break;
 8006672:	e083      	b.n	800677c <AddMacCommand+0x398>
        case MOTE_MAC_PING_SLOT_INFO_REQ:
            if( MacCommandsBufferIndex < ( LORA_MAC_COMMAND_MAX_LENGTH - 1 ) )
 8006674:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <AddMacCommand+0x2cc>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b7e      	cmp	r3, #126	; 0x7e
 800667a:	f200 8081 	bhi.w	8006780 <AddMacCommand+0x39c>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <AddMacCommand+0x2cc>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	b2d1      	uxtb	r1, r2
 8006686:	4a0a      	ldr	r2, [pc, #40]	; (80066b0 <AddMacCommand+0x2cc>)
 8006688:	7011      	strb	r1, [r2, #0]
 800668a:	4619      	mov	r1, r3
 800668c:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <AddMacCommand+0x2d0>)
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	5453      	strb	r3, [r2, r1]
                // Status: Periodicity and Datarate
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <AddMacCommand+0x2cc>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	b2d1      	uxtb	r1, r2
 800669a:	4a05      	ldr	r2, [pc, #20]	; (80066b0 <AddMacCommand+0x2cc>)
 800669c:	7011      	strb	r1, [r2, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	4a04      	ldr	r2, [pc, #16]	; (80066b4 <AddMacCommand+0x2d0>)
 80066a2:	79bb      	ldrb	r3, [r7, #6]
 80066a4:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_PING_SLOT_INFO_REQ value=%d\r\n",p1);
#endif
            }
            break;
 80066aa:	e069      	b.n	8006780 <AddMacCommand+0x39c>
 80066ac:	20000364 	.word	0x20000364
 80066b0:	20000363 	.word	0x20000363
 80066b4:	20000368 	.word	0x20000368
        case MOTE_MAC_PING_SLOT_FREQ_ANS:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 80066b8:	4b3d      	ldr	r3, [pc, #244]	; (80067b0 <AddMacCommand+0x3cc>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	db60      	blt.n	8006784 <AddMacCommand+0x3a0>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80066c2:	4b3b      	ldr	r3, [pc, #236]	; (80067b0 <AddMacCommand+0x3cc>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	b2d1      	uxtb	r1, r2
 80066ca:	4a39      	ldr	r2, [pc, #228]	; (80067b0 <AddMacCommand+0x3cc>)
 80066cc:	7011      	strb	r1, [r2, #0]
 80066ce:	4619      	mov	r1, r3
 80066d0:	4a38      	ldr	r2, [pc, #224]	; (80067b4 <AddMacCommand+0x3d0>)
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80066d6:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <AddMacCommand+0x3cc>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	b2d1      	uxtb	r1, r2
 80066de:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <AddMacCommand+0x3cc>)
 80066e0:	7011      	strb	r1, [r2, #0]
 80066e2:	4619      	mov	r1, r3
 80066e4:	4a33      	ldr	r2, [pc, #204]	; (80067b4 <AddMacCommand+0x3d0>)
 80066e6:	79bb      	ldrb	r3, [r7, #6]
 80066e8:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 80066ea:	f7ff fe69 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80066f2:	e047      	b.n	8006784 <AddMacCommand+0x3a0>
        case MOTE_MAC_BEACON_TIMING_REQ:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 80066f4:	4b2e      	ldr	r3, [pc, #184]	; (80067b0 <AddMacCommand+0x3cc>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b25b      	sxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	db44      	blt.n	8006788 <AddMacCommand+0x3a4>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80066fe:	4b2c      	ldr	r3, [pc, #176]	; (80067b0 <AddMacCommand+0x3cc>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	b2d1      	uxtb	r1, r2
 8006706:	4a2a      	ldr	r2, [pc, #168]	; (80067b0 <AddMacCommand+0x3cc>)
 8006708:	7011      	strb	r1, [r2, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	4a29      	ldr	r2, [pc, #164]	; (80067b4 <AddMacCommand+0x3d0>)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006716:	e037      	b.n	8006788 <AddMacCommand+0x3a4>
        case MOTE_MAC_BEACON_FREQ_ANS:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006718:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <AddMacCommand+0x3cc>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b25b      	sxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	db34      	blt.n	800678c <AddMacCommand+0x3a8>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006722:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <AddMacCommand+0x3cc>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	b2d1      	uxtb	r1, r2
 800672a:	4a21      	ldr	r2, [pc, #132]	; (80067b0 <AddMacCommand+0x3cc>)
 800672c:	7011      	strb	r1, [r2, #0]
 800672e:	4619      	mov	r1, r3
 8006730:	4a20      	ldr	r2, [pc, #128]	; (80067b4 <AddMacCommand+0x3d0>)
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	5453      	strb	r3, [r2, r1]
                // Status: Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <AddMacCommand+0x3cc>)
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	b2d1      	uxtb	r1, r2
 800673e:	4a1c      	ldr	r2, [pc, #112]	; (80067b0 <AddMacCommand+0x3cc>)
 8006740:	7011      	strb	r1, [r2, #0]
 8006742:	4619      	mov	r1, r3
 8006744:	4a1b      	ldr	r2, [pc, #108]	; (80067b4 <AddMacCommand+0x3d0>)
 8006746:	79bb      	ldrb	r3, [r7, #6]
 8006748:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 800674a:	f7ff fe39 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006752:	e01b      	b.n	800678c <AddMacCommand+0x3a8>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8006754:	2302      	movs	r3, #2
 8006756:	e027      	b.n	80067a8 <AddMacCommand+0x3c4>
            break;
 8006758:	bf00      	nop
 800675a:	e018      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 800675c:	bf00      	nop
 800675e:	e016      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006760:	bf00      	nop
 8006762:	e014      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006764:	bf00      	nop
 8006766:	e012      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006768:	bf00      	nop
 800676a:	e010      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 800676c:	bf00      	nop
 800676e:	e00e      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006770:	bf00      	nop
 8006772:	e00c      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006774:	bf00      	nop
 8006776:	e00a      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006778:	bf00      	nop
 800677a:	e008      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 800677c:	bf00      	nop
 800677e:	e006      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006780:	bf00      	nop
 8006782:	e004      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006784:	bf00      	nop
 8006786:	e002      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 8006788:	bf00      	nop
 800678a:	e000      	b.n	800678e <AddMacCommand+0x3aa>
            break;
 800678c:	bf00      	nop
    }
    if ( status == LORAMAC_STATUS_OK ) {
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d108      	bne.n	80067a6 <AddMacCommand+0x3c2>
        MacCommandsInNextTx = true;
 8006794:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <AddMacCommand+0x3d4>)
 8006796:	2201      	movs	r2, #1
 8006798:	701a      	strb	r2, [r3, #0]
        if (SrvAckRequested) {
 800679a:	4b08      	ldr	r3, [pc, #32]	; (80067bc <AddMacCommand+0x3d8>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <AddMacCommand+0x3c2>
            SetMlmeScheduleUplinkIndication();
 80067a2:	f7ff fe0d 	bl	80063c0 <SetMlmeScheduleUplinkIndication>
        }
    }
    return status;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20000363 	.word	0x20000363
 80067b4:	20000368 	.word	0x20000368
 80067b8:	20000362 	.word	0x20000362
 80067bc:	20000361 	.word	0x20000361

080067c0 <ParseMacCommandsToRepeat>:

static uint8_t ParseMacCommandsToRepeat( uint8_t *cmdBufIn, uint8_t length, uint8_t *cmdBufOut )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	460b      	mov	r3, r1
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	72fb      	strb	r3, [r7, #11]
    uint8_t i = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]
    uint8_t cmdCount = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75bb      	strb	r3, [r7, #22]

    if ( ( cmdBufIn == NULL ) || ( cmdBufOut == NULL ) ) {
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <ParseMacCommandsToRepeat+0x22>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <ParseMacCommandsToRepeat+0x26>
        return 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e055      	b.n	8006892 <ParseMacCommandsToRepeat+0xd2>
    }

    for ( i = 0; i < length; i++ ) {
 80067e6:	2300      	movs	r3, #0
 80067e8:	75fb      	strb	r3, [r7, #23]
 80067ea:	e04d      	b.n	8006888 <ParseMacCommandsToRepeat+0xc8>
        switch ( cmdBufIn[i] ) {
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	3b02      	subs	r3, #2
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d842      	bhi.n	8006880 <ParseMacCommandsToRepeat+0xc0>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <ParseMacCommandsToRepeat+0x40>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006881 	.word	0x08006881
 8006804:	08006879 	.word	0x08006879
 8006808:	08006881 	.word	0x08006881
 800680c:	08006825 	.word	0x08006825
 8006810:	08006871 	.word	0x08006871
 8006814:	08006879 	.word	0x08006879
 8006818:	08006859 	.word	0x08006859
 800681c:	08006881 	.word	0x08006881
 8006820:	08006825 	.word	0x08006825
            // STICKY
            case MOTE_MAC_DL_CHANNEL_ANS:
            case MOTE_MAC_RX_PARAM_SETUP_ANS: {
                // 1 byte payload
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	75fa      	strb	r2, [r7, #23]
 800682a:	461a      	mov	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	441a      	add	r2, r3
 8006830:	7dbb      	ldrb	r3, [r7, #22]
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	75b9      	strb	r1, [r7, #22]
 8006836:	4619      	mov	r1, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	440b      	add	r3, r1
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	701a      	strb	r2, [r3, #0]
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	441a      	add	r2, r3
 8006846:	7dbb      	ldrb	r3, [r7, #22]
 8006848:	1c59      	adds	r1, r3, #1
 800684a:	75b9      	strb	r1, [r7, #22]
 800684c:	4619      	mov	r1, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	440b      	add	r3, r1
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	701a      	strb	r2, [r3, #0]
                break;
 8006856:	e014      	b.n	8006882 <ParseMacCommandsToRepeat+0xc2>
            }
            case MOTE_MAC_RX_TIMING_SETUP_ANS: {
                // 0 byte payload
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	441a      	add	r2, r3
 800685e:	7dbb      	ldrb	r3, [r7, #22]
 8006860:	1c59      	adds	r1, r3, #1
 8006862:	75b9      	strb	r1, [r7, #22]
 8006864:	4619      	mov	r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	440b      	add	r3, r1
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	701a      	strb	r2, [r3, #0]
                break;
 800686e:	e008      	b.n	8006882 <ParseMacCommandsToRepeat+0xc2>
            }
            // NON-STICKY
            case MOTE_MAC_DEV_STATUS_ANS: {
                // 2 bytes payload
                i += 2;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	3302      	adds	r3, #2
 8006874:	75fb      	strb	r3, [r7, #23]
                break;
 8006876:	e004      	b.n	8006882 <ParseMacCommandsToRepeat+0xc2>
            }
            case MOTE_MAC_LINK_ADR_ANS:
            case MOTE_MAC_NEW_CHANNEL_ANS: {
                // 1 byte payload
                i++;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	3301      	adds	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
                break;
 800687e:	e000      	b.n	8006882 <ParseMacCommandsToRepeat+0xc2>
            case MOTE_MAC_LINK_CHECK_REQ: {
                // 0 byte payload
                break;
            }
            default:
                break;
 8006880:	bf00      	nop
    for ( i = 0; i < length; i++ ) {
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	3301      	adds	r3, #1
 8006886:	75fb      	strb	r3, [r7, #23]
 8006888:	7dfa      	ldrb	r2, [r7, #23]
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	429a      	cmp	r2, r3
 800688e:	d3ad      	bcc.n	80067ec <ParseMacCommandsToRepeat+0x2c>
        }
    }

    return cmdCount;
 8006890:	7dbb      	ldrb	r3, [r7, #22]
}
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800689c:	b590      	push	{r4, r7, lr}
 800689e:	b095      	sub	sp, #84	; 0x54
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	4608      	mov	r0, r1
 80068a6:	4611      	mov	r1, r2
 80068a8:	461a      	mov	r2, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	70fb      	strb	r3, [r7, #3]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70bb      	strb	r3, [r7, #2]
 80068b2:	4613      	mov	r3, r2
 80068b4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    while ( macIndex < commandsSize ) {
 80068bc:	e265      	b.n	8006d8a <ProcessMacCommands+0x4ee>
        // Decode Frame MAC commands
        switch ( payload[macIndex++] ) {
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	70fa      	strb	r2, [r7, #3]
 80068c4:	461a      	mov	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	3b02      	subs	r3, #2
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	f200 8261 	bhi.w	8006d96 <ProcessMacCommands+0x4fa>
 80068d4:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <ProcessMacCommands+0x40>)
 80068d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068da:	bf00      	nop
 80068dc:	08006901 	.word	0x08006901
 80068e0:	0800693d 	.word	0x0800693d
 80068e4:	08006a33 	.word	0x08006a33
 80068e8:	08006a61 	.word	0x08006a61
 80068ec:	08006b2f 	.word	0x08006b2f
 80068f0:	08006b65 	.word	0x08006b65
 80068f4:	08006c29 	.word	0x08006c29
 80068f8:	08006c7b 	.word	0x08006c7b
 80068fc:	08006d09 	.word	0x08006d09
            case SRV_MAC_LINK_CHECK_ANS:
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8006900:	2001      	movs	r0, #1
 8006902:	f002 faa3 	bl	8008e4c <LoRaMacConfirmQueueIsCmdActive>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 823e 	beq.w	8006d8a <ProcessMacCommands+0x4ee>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800690e:	2101      	movs	r1, #1
 8006910:	2000      	movs	r0, #0
 8006912:	f002 fa0f 	bl	8008d34 <LoRaMacConfirmQueueSetStatus>
                	MlmeConfirm.DemodMargin = payload[macIndex++];
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	70fa      	strb	r2, [r7, #3]
 800691c:	461a      	mov	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	4bb8      	ldr	r3, [pc, #736]	; (8006c08 <ProcessMacCommands+0x36c>)
 8006926:	721a      	strb	r2, [r3, #8]
                	MlmeConfirm.NbGateways = payload[macIndex++];
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	70fa      	strb	r2, [r7, #3]
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4413      	add	r3, r2
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	4bb4      	ldr	r3, [pc, #720]	; (8006c08 <ProcessMacCommands+0x36c>)
 8006938:	725a      	strb	r2, [r3, #9]
                }
                break;
 800693a:	e226      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            case SRV_MAC_LINK_ADR_REQ: {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800693c:	2300      	movs	r3, #0
 800693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                int8_t linkAdrTxPower = TX_POWER_0;
 8006942:	2300      	movs	r3, #0
 8006944:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                uint8_t linkAdrNbRep = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                uint8_t linkAdrNbBytesParsed = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                // Fill parameter structure
                linkAdrReq.Payload = &payload[macIndex - 1];
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	3b01      	subs	r3, #1
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	4413      	add	r3, r2
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
                linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800695e:	78ba      	ldrb	r2, [r7, #2]
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3301      	adds	r3, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
                linkAdrReq.AdrEnabled = AdrCtrlOn;
 800696e:	4ba7      	ldr	r3, [pc, #668]	; (8006c0c <ProcessMacCommands+0x370>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                linkAdrReq.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8006976:	4ba6      	ldr	r3, [pc, #664]	; (8006c10 <ProcessMacCommands+0x374>)
 8006978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800697c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                linkAdrReq.CurrentDatarate = LoRaMacParams.ChannelsDatarate;
 8006980:	4ba3      	ldr	r3, [pc, #652]	; (8006c10 <ProcessMacCommands+0x374>)
 8006982:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006986:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                linkAdrReq.CurrentTxPower = LoRaMacParams.ChannelsTxPower;
 800698a:	4ba1      	ldr	r3, [pc, #644]	; (8006c10 <ProcessMacCommands+0x374>)
 800698c:	f993 3000 	ldrsb.w	r3, [r3]
 8006990:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                linkAdrReq.CurrentNbRep = LoRaMacParams.ChannelsNbRep;
 8006994:	4b9e      	ldr	r3, [pc, #632]	; (8006c10 <ProcessMacCommands+0x374>)
 8006996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800699a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                // Process the ADR requests
                status = RegionLinkAdrReq( LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 800699e:	4b9d      	ldr	r3, [pc, #628]	; (8006c14 <ProcessMacCommands+0x378>)
 80069a0:	7818      	ldrb	r0, [r3, #0]
 80069a2:	f107 0432 	add.w	r4, r7, #50	; 0x32
 80069a6:	f107 0233 	add.w	r2, r7, #51	; 0x33
 80069aa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80069ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	f107 0331 	add.w	r3, r7, #49	; 0x31
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4623      	mov	r3, r4
 80069bc:	f003 f941 	bl	8009c42 <RegionLinkAdrReq>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                                           &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );
                //printf("status:%d\r\n",status);

                if ( ( status & 0x07 ) == 0x07 ) {
 80069c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80069ca:	f003 0307 	and.w	r3, r3, #7
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	d10c      	bne.n	80069ec <ProcessMacCommands+0x150>
                    LoRaMacParams.ChannelsDatarate = linkAdrDatarate;
 80069d2:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 80069d6:	4b8e      	ldr	r3, [pc, #568]	; (8006c10 <ProcessMacCommands+0x374>)
 80069d8:	705a      	strb	r2, [r3, #1]
                    //SaveDr();
                    LoRaMacParams.ChannelsTxPower = linkAdrTxPower;
 80069da:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 80069de:	4b8c      	ldr	r3, [pc, #560]	; (8006c10 <ProcessMacCommands+0x374>)
 80069e0:	701a      	strb	r2, [r3, #0]
                    LoRaMacParams.ChannelsNbRep = linkAdrNbRep;
 80069e2:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80069e6:	4b8a      	ldr	r3, [pc, #552]	; (8006c10 <ProcessMacCommands+0x374>)
 80069e8:	f883 2020 	strb.w	r2, [r3, #32]
                    //lora_printf("ChannelsDatarate:%d ChannelsTxPower:%d,ChannelsNbRep:%d\r\n",LoRaMacParams.ChannelsDatarate,LoRaMacParams.ChannelsTxPower,LoRaMacParams.ChannelsNbRep);
                }

                // Add the answers to the buffer
                for ( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ ) {
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80069f2:	e00b      	b.n	8006a0c <ProcessMacCommands+0x170>
                    AddMacCommand( MOTE_MAC_LINK_ADR_ANS, status, 0 );
 80069f4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80069f8:	2200      	movs	r2, #0
 80069fa:	4619      	mov	r1, r3
 80069fc:	2003      	movs	r0, #3
 80069fe:	f7ff fcf1 	bl	80063e4 <AddMacCommand>
                for ( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ ) {
 8006a02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a06:	3301      	adds	r3, #1
 8006a08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006a10:	4a81      	ldr	r2, [pc, #516]	; (8006c18 <ProcessMacCommands+0x37c>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3e8      	bcc.n	80069f4 <ProcessMacCommands+0x158>
                }
                // Update MAC index
                macIndex += linkAdrNbBytesParsed - 1;
 8006a22:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	4413      	add	r3, r2
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8006a30:	e1ab      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            case SRV_MAC_DUTY_CYCLE_REQ:
                MaxDCycle = payload[macIndex++];
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	70fa      	strb	r2, [r7, #3]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	4b76      	ldr	r3, [pc, #472]	; (8006c1c <ProcessMacCommands+0x380>)
 8006a42:	701a      	strb	r2, [r3, #0]
                AggregatedDCycle = 1 << MaxDCycle;
 8006a44:	4b75      	ldr	r3, [pc, #468]	; (8006c1c <ProcessMacCommands+0x380>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4093      	lsls	r3, r2
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	4b73      	ldr	r3, [pc, #460]	; (8006c20 <ProcessMacCommands+0x384>)
 8006a52:	801a      	strh	r2, [r3, #0]
                AddMacCommand( MOTE_MAC_DUTY_CYCLE_ANS, 0, 0 );
 8006a54:	2200      	movs	r2, #0
 8006a56:	2100      	movs	r1, #0
 8006a58:	2004      	movs	r0, #4
 8006a5a:	f7ff fcc3 	bl	80063e4 <AddMacCommand>
                break;
 8006a5e:	e194      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            case SRV_MAC_RX_PARAM_SETUP_REQ: {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8006a60:	2307      	movs	r3, #7
 8006a62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b25b      	sxtb	r3, r3
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	b25b      	sxtb	r3, r3
 8006a8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                macIndex++;
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	3301      	adds	r3, #1
 8006a96:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency =  ( uint32_t )payload[macIndex++];
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	70fa      	strb	r2, [r7, #3]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	70fa      	strb	r2, [r7, #3]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	4313      	orrs	r3, r2
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	70fa      	strb	r2, [r7, #3]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4413      	add	r3, r2
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	041a      	lsls	r2, r3, #16
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency *= 100;
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	2264      	movs	r2, #100	; 0x64
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c

                // Perform request on region
                status = RegionRxParamSetupReq( LoRaMacRegion, &rxParamSetupReq );
 8006ade:	4b4d      	ldr	r3, [pc, #308]	; (8006c14 <ProcessMacCommands+0x378>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f003 f8c4 	bl	8009c76 <RegionRxParamSetupReq>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if ( ( status & 0x07 ) == 0x07 ) {
 8006af4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	2b07      	cmp	r3, #7
 8006afe:	d10e      	bne.n	8006b1e <ProcessMacCommands+0x282>
                    LoRaMacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8006b00:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	4b42      	ldr	r3, [pc, #264]	; (8006c10 <ProcessMacCommands+0x374>)
 8006b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    LoRaMacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <ProcessMacCommands+0x374>)
 8006b10:	6253      	str	r3, [r2, #36]	; 0x24
                    LoRaMacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8006b12:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	4b3d      	ldr	r3, [pc, #244]	; (8006c10 <ProcessMacCommands+0x374>)
 8006b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                }
                AddMacCommand( MOTE_MAC_RX_PARAM_SETUP_ANS, status, 0 );
 8006b1e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006b22:	2200      	movs	r2, #0
 8006b24:	4619      	mov	r1, r3
 8006b26:	2005      	movs	r0, #5
 8006b28:	f7ff fc5c 	bl	80063e4 <AddMacCommand>
            }
            break;
 8006b2c:	e12d      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            case SRV_MAC_DEV_STATUS_REQ: {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8006b2e:	23ff      	movs	r3, #255	; 0xff
 8006b30:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                if ( ( LoRaMacCallbacks != NULL ) && ( LoRaMacCallbacks->GetBatteryLevel != NULL ) ) {
 8006b34:	4b3b      	ldr	r3, [pc, #236]	; (8006c24 <ProcessMacCommands+0x388>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <ProcessMacCommands+0x2b8>
 8006b3c:	4b39      	ldr	r3, [pc, #228]	; (8006c24 <ProcessMacCommands+0x388>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <ProcessMacCommands+0x2b8>
                    batteryLevel = LoRaMacCallbacks->GetBatteryLevel( );
 8006b46:	4b37      	ldr	r3, [pc, #220]	; (8006c24 <ProcessMacCommands+0x388>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4798      	blx	r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                }
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("receive SRV_MAC_DEV_STATUS_REQ\r\n");
#endif
                AddMacCommand( MOTE_MAC_DEV_STATUS_ANS, batteryLevel, snr );
 8006b54:	787a      	ldrb	r2, [r7, #1]
 8006b56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	2006      	movs	r0, #6
 8006b5e:	f7ff fc41 	bl	80063e4 <AddMacCommand>
                break;
 8006b62:	e112      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            }
            case SRV_MAC_NEW_CHANNEL_REQ: {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8006b64:	2303      	movs	r3, #3
 8006b66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                newChannelReq.ChannelId = payload[macIndex++];
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	70fa      	strb	r2, [r7, #3]
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8006b7e:	f107 0314 	add.w	r3, r7, #20
 8006b82:	623b      	str	r3, [r7, #32]

                chParam.Frequency = ( uint32_t )payload[macIndex++];
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	70fa      	strb	r2, [r7, #3]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4413      	add	r3, r2
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	617b      	str	r3, [r7, #20]
                chParam.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	70fa      	strb	r2, [r7, #3]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]
                chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	70fa      	strb	r2, [r7, #3]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
                chParam.Frequency *= 100;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2264      	movs	r2, #100	; 0x64
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	617b      	str	r3, [r7, #20]
                chParam.Rx1Frequency = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
                chParam.DrRange.Value = payload[macIndex++];
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	70fa      	strb	r2, [r7, #3]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b25b      	sxtb	r3, r3
 8006bde:	773b      	strb	r3, [r7, #28]

                status = RegionNewChannelReq( LoRaMacRegion, &newChannelReq );
 8006be0:	4b0c      	ldr	r3, [pc, #48]	; (8006c14 <ProcessMacCommands+0x378>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f107 0220 	add.w	r2, r7, #32
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f003 f856 	bl	8009c9c <RegionNewChannelReq>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                AddMacCommand( MOTE_MAC_NEW_CHANNEL_ANS, status, 0 );
 8006bf6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	2007      	movs	r0, #7
 8006c00:	f7ff fbf0 	bl	80063e4 <AddMacCommand>
            }
            break;
 8006c04:	e0c1      	b.n	8006d8a <ProcessMacCommands+0x4ee>
 8006c06:	bf00      	nop
 8006c08:	20000994 	.word	0x20000994
 8006c0c:	2000035a 	.word	0x2000035a
 8006c10:	20000a78 	.word	0x20000a78
 8006c14:	20000110 	.word	0x20000110
 8006c18:	cccccccd 	.word	0xcccccccd
 8006c1c:	20000469 	.word	0x20000469
 8006c20:	2000046a 	.word	0x2000046a
 8006c24:	20000498 	.word	0x20000498
            case SRV_MAC_RX_TIMING_SETUP_REQ: {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	70fa      	strb	r2, [r7, #3]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

                if ( delay == 0 ) {
 8006c3e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <ProcessMacCommands+0x3b4>
                    delay++;
 8006c46:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }
                LoRaMacParams.ReceiveDelay1 = delay * 1000;
 8006c50:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c58:	fb02 f303 	mul.w	r3, r2, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	4b50      	ldr	r3, [pc, #320]	; (8006da0 <ProcessMacCommands+0x504>)
 8006c60:	611a      	str	r2, [r3, #16]
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8006c62:	4b4f      	ldr	r3, [pc, #316]	; (8006da0 <ProcessMacCommands+0x504>)
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006c6a:	4a4d      	ldr	r2, [pc, #308]	; (8006da0 <ProcessMacCommands+0x504>)
 8006c6c:	6153      	str	r3, [r2, #20]
                AddMacCommand( MOTE_MAC_RX_TIMING_SETUP_ANS, 0, 0 );
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2100      	movs	r1, #0
 8006c72:	2008      	movs	r0, #8
 8006c74:	f7ff fbb6 	bl	80063e4 <AddMacCommand>
            }
            break;
 8006c78:	e087      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            case SRV_MAC_TX_PARAM_SETUP_REQ: {
                TxParamSetupReqParams_t txParamSetupReq;
                uint8_t eirpDwellTime = payload[macIndex++];
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	70fa      	strb	r2, [r7, #3]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

                txParamSetupReq.UplinkDwellTime = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	743b      	strb	r3, [r7, #16]
                txParamSetupReq.DownlinkDwellTime = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	747b      	strb	r3, [r7, #17]

                if ( ( eirpDwellTime & 0x20 ) == 0x20 ) {
 8006c94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <ProcessMacCommands+0x408>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	747b      	strb	r3, [r7, #17]
                }
                if ( ( eirpDwellTime & 0x10 ) == 0x10 ) {
 8006ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <ProcessMacCommands+0x418>
                    txParamSetupReq.UplinkDwellTime = 1;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	743b      	strb	r3, [r7, #16]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8006cb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006cb8:	f003 030f 	and.w	r3, r3, #15
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	74bb      	strb	r3, [r7, #18]

                // Check the status for correctness
                if ( RegionTxParamSetupReq( LoRaMacRegion, &txParamSetupReq ) != -1 ) {
 8006cc0:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <ProcessMacCommands+0x508>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f107 0210 	add.w	r2, r7, #16
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f002 fff9 	bl	8009cc2 <RegionTxParamSetupReq>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd6:	d058      	beq.n	8006d8a <ProcessMacCommands+0x4ee>
                    // Accept command
                    LoRaMacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006cd8:	7c3a      	ldrb	r2, [r7, #16]
 8006cda:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <ProcessMacCommands+0x504>)
 8006cdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    LoRaMacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8006ce0:	7c7a      	ldrb	r2, [r7, #17]
 8006ce2:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <ProcessMacCommands+0x504>)
 8006ce4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                    LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006ce8:	7cbb      	ldrb	r3, [r7, #18]
 8006cea:	461a      	mov	r2, r3
 8006cec:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <ProcessMacCommands+0x50c>)
 8006cee:	5c9b      	ldrb	r3, [r3, r2]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7f9 ff99 	bl	8000c28 <__aeabi_ui2f>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <ProcessMacCommands+0x504>)
 8006cfa:	6313      	str	r3, [r2, #48]	; 0x30
                    // Add command response
                    AddMacCommand( MOTE_MAC_TX_PARAM_SETUP_ANS, 0, 0 );
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	2009      	movs	r0, #9
 8006d02:	f7ff fb6f 	bl	80063e4 <AddMacCommand>
                }
            }
            break;
 8006d06:	e040      	b.n	8006d8a <ProcessMacCommands+0x4ee>
            case SRV_MAC_DL_CHANNEL_REQ: {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                dlChannelReq.ChannelId = payload[macIndex++];
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	70fa      	strb	r2, [r7, #3]
 8006d14:	461a      	mov	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4413      	add	r3, r2
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	723b      	strb	r3, [r7, #8]
                dlChannelReq.Rx1Frequency = ( uint32_t )payload[macIndex++];
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	70fa      	strb	r2, [r7, #3]
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4413      	add	r3, r2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	70fa      	strb	r2, [r7, #3]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	021a      	lsls	r2, r3, #8
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	70fa      	strb	r2, [r7, #3]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	041a      	lsls	r2, r3, #16
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency *= 100;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2264      	movs	r2, #100	; 0x64
 8006d5e:	fb02 f303 	mul.w	r3, r2, r3
 8006d62:	60fb      	str	r3, [r7, #12]

                status = RegionDlChannelReq( LoRaMacRegion, &dlChannelReq );
 8006d64:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <ProcessMacCommands+0x508>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f107 0208 	add.w	r2, r7, #8
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f002 ffba 	bl	8009ce8 <RegionDlChannelReq>
 8006d74:	4603      	mov	r3, r0
 8006d76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                AddMacCommand( MOTE_MAC_DL_CHANNEL_ANS, status, 0 );
 8006d7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4619      	mov	r1, r3
 8006d82:	200a      	movs	r0, #10
 8006d84:	f7ff fb2e 	bl	80063e4 <AddMacCommand>
            }
            break;
 8006d88:	bf00      	nop
    while ( macIndex < commandsSize ) {
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	78bb      	ldrb	r3, [r7, #2]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	f4ff ad95 	bcc.w	80068be <ProcessMacCommands+0x22>
 8006d94:	e000      	b.n	8006d98 <ProcessMacCommands+0x4fc>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8006d96:	bf00      	nop
        }
    }
}
 8006d98:	374c      	adds	r7, #76	; 0x4c
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd90      	pop	{r4, r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000a78 	.word	0x20000a78
 8006da4:	20000110 	.word	0x20000110
 8006da8:	0801246c 	.word	0x0801246c

08006dac <Send>:


LoRaMacStatus_t Send( LoRaMacHeader_t *macHdr, uint8_t fPort, void *fBuffer, uint16_t fBufferSize )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	461a      	mov	r2, r3
 8006db8:	460b      	mov	r3, r1
 8006dba:	72fb      	strb	r3, [r7, #11]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	75fb      	strb	r3, [r7, #23]

    fCtrl.Value = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.FOptsLen      = 0;
 8006dc8:	7d3b      	ldrb	r3, [r7, #20]
 8006dca:	f36f 0303 	bfc	r3, #0, #4
 8006dce:	753b      	strb	r3, [r7, #20]
    if( LoRaMacDeviceClass == CLASS_B )
 8006dd0:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <Send+0xa0>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d104      	bne.n	8006de2 <Send+0x36>
    {
        fCtrl.Bits.FPending      = 1;
 8006dd8:	7d3b      	ldrb	r3, [r7, #20]
 8006dda:	f043 0310 	orr.w	r3, r3, #16
 8006dde:	753b      	strb	r3, [r7, #20]
 8006de0:	e003      	b.n	8006dea <Send+0x3e>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8006de2:	7d3b      	ldrb	r3, [r7, #20]
 8006de4:	f36f 1304 	bfc	r3, #4, #1
 8006de8:	753b      	strb	r3, [r7, #20]
    }
    fCtrl.Bits.Ack           = false;
 8006dea:	7d3b      	ldrb	r3, [r7, #20]
 8006dec:	f36f 1345 	bfc	r3, #5, #1
 8006df0:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq     = false;
 8006df2:	7d3b      	ldrb	r3, [r7, #20]
 8006df4:	f36f 1386 	bfc	r3, #6, #1
 8006df8:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.Adr           = AdrCtrlOn;
 8006dfa:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <Send+0xa4>)
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	7d3b      	ldrb	r3, [r7, #20]
 8006e00:	f362 13c7 	bfi	r3, r2, #7, #1
 8006e04:	753b      	strb	r3, [r7, #20]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8006e06:	7afa      	ldrb	r2, [r7, #11]
 8006e08:	f107 0114 	add.w	r1, r7, #20
 8006e0c:	893b      	ldrh	r3, [r7, #8]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fa04 	bl	8007220 <PrepareFrame>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	75fb      	strb	r3, [r7, #23]

    // Validate status
    if ( status != LORAMAC_STATUS_OK ) {
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <Send+0x7a>
        return status;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	e00e      	b.n	8006e44 <Send+0x98>
    }

    // Reset confirm parameters
    McpsConfirm.NbRetries = 0;
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <Send+0xa8>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	715a      	strb	r2, [r3, #5]
    McpsConfirm.AckReceived = false;
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <Send+0xa8>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	711a      	strb	r2, [r3, #4]
    McpsConfirm.UpLinkCounter = UpLinkCounter;
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <Send+0xac>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <Send+0xa8>)
 8006e38:	60d3      	str	r3, [r2, #12]

    status = ScheduleTx( );
 8006e3a:	f000 f80f 	bl	8006e5c <ScheduleTx>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]

    return status;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000148 	.word	0x20000148
 8006e50:	2000035a 	.word	0x2000035a
 8006e54:	200009c0 	.word	0x200009c0
 8006e58:	20000350 	.word	0x20000350

08006e5c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( void )
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af02      	add	r7, sp, #8
    TimerTime_t dutyCycleTimeOff = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
    NextChanParams_t nextChan;

    // Check if the device is off
    if ( MaxDCycle == 255 ) {
 8006e66:	4b5c      	ldr	r3, [pc, #368]	; (8006fd8 <ScheduleTx+0x17c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2bff      	cmp	r3, #255	; 0xff
 8006e6c:	d101      	bne.n	8006e72 <ScheduleTx+0x16>
        return LORAMAC_STATUS_DEVICE_OFF;
 8006e6e:	2309      	movs	r3, #9
 8006e70:	e0ad      	b.n	8006fce <ScheduleTx+0x172>
    }
    if ( MaxDCycle == 0 ) {
 8006e72:	4b59      	ldr	r3, [pc, #356]	; (8006fd8 <ScheduleTx+0x17c>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <ScheduleTx+0x24>
        AggregatedTimeOff = 0;
 8006e7a:	4b58      	ldr	r3, [pc, #352]	; (8006fdc <ScheduleTx+0x180>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]
    }

    // Update Backoff
    CalculateBackOff( LastTxChannel );
 8006e80:	4b57      	ldr	r3, [pc, #348]	; (8006fe0 <ScheduleTx+0x184>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 f8cb 	bl	8007020 <CalculateBackOff>

    nextChan.AggrTimeOff = AggregatedTimeOff;
 8006e8a:	4b54      	ldr	r3, [pc, #336]	; (8006fdc <ScheduleTx+0x180>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	603b      	str	r3, [r7, #0]
    nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8006e90:	4b54      	ldr	r3, [pc, #336]	; (8006fe4 <ScheduleTx+0x188>)
 8006e92:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006e96:	723b      	strb	r3, [r7, #8]
    nextChan.DutyCycleEnabled = DutyCycleOn;
 8006e98:	4b53      	ldr	r3, [pc, #332]	; (8006fe8 <ScheduleTx+0x18c>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	72bb      	strb	r3, [r7, #10]
    nextChan.Joined = IsLoRaMacNetworkJoined;
 8006e9e:	4b53      	ldr	r3, [pc, #332]	; (8006fec <ScheduleTx+0x190>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	727b      	strb	r3, [r7, #9]
    nextChan.LastAggrTx = AggregatedLastTxDoneTime;
 8006ea4:	4b52      	ldr	r3, [pc, #328]	; (8006ff0 <ScheduleTx+0x194>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	607b      	str	r3, [r7, #4]

    // Select channel
    while ( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false ) {
 8006eaa:	e008      	b.n	8006ebe <ScheduleTx+0x62>
        // Set the default datarate
        LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8006eac:	4b51      	ldr	r3, [pc, #324]	; (8006ff4 <ScheduleTx+0x198>)
 8006eae:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8006eb2:	4b4c      	ldr	r3, [pc, #304]	; (8006fe4 <ScheduleTx+0x188>)
 8006eb4:	705a      	strb	r2, [r3, #1]
        // Update datarate in the function parameters
        nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8006eb6:	4b4b      	ldr	r3, [pc, #300]	; (8006fe4 <ScheduleTx+0x188>)
 8006eb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006ebc:	723b      	strb	r3, [r7, #8]
    while ( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false ) {
 8006ebe:	4b4e      	ldr	r3, [pc, #312]	; (8006ff8 <ScheduleTx+0x19c>)
 8006ec0:	7818      	ldrb	r0, [r3, #0]
 8006ec2:	f107 030c 	add.w	r3, r7, #12
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4a44      	ldr	r2, [pc, #272]	; (8006fdc <ScheduleTx+0x180>)
 8006eca:	9200      	str	r2, [sp, #0]
 8006ecc:	4a4b      	ldr	r2, [pc, #300]	; (8006ffc <ScheduleTx+0x1a0>)
 8006ece:	f002 ff43 	bl	8009d58 <RegionNextChannel>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f083 0301 	eor.w	r3, r3, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e6      	bne.n	8006eac <ScheduleTx+0x50>
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8006ede:	4b46      	ldr	r3, [pc, #280]	; (8006ff8 <ScheduleTx+0x19c>)
 8006ee0:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate,
 8006ee2:	4b45      	ldr	r3, [pc, #276]	; (8006ff8 <ScheduleTx+0x19c>)
 8006ee4:	7818      	ldrb	r0, [r3, #0]
 8006ee6:	4b3f      	ldr	r3, [pc, #252]	; (8006fe4 <ScheduleTx+0x188>)
 8006ee8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8006eec:	4b3d      	ldr	r3, [pc, #244]	; (8006fe4 <ScheduleTx+0x188>)
 8006eee:	f993 2001 	ldrsb.w	r2, [r3, #1]
                                                          LoRaMacParams.Rx1DrOffset ),
 8006ef2:	4b3c      	ldr	r3, [pc, #240]	; (8006fe4 <ScheduleTx+0x188>)
 8006ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate,
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	f002 ff6a 	bl	8009dd2 <RegionApplyDrOffset>
 8006efe:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8006f00:	b259      	sxtb	r1, r3
 8006f02:	4b38      	ldr	r3, [pc, #224]	; (8006fe4 <ScheduleTx+0x188>)
 8006f04:	7a1a      	ldrb	r2, [r3, #8]
 8006f06:	4b37      	ldr	r3, [pc, #220]	; (8006fe4 <ScheduleTx+0x188>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	483d      	ldr	r0, [pc, #244]	; (8007000 <ScheduleTx+0x1a4>)
 8006f0c:	9000      	str	r0, [sp, #0]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f002 fe51 	bl	8009bb6 <RegionComputeRxWindowParameters>
                                     LoRaMacParams.MinRxSymbols,
                                     LoRaMacParams.SystemMaxRxError,
                                     &RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8006f14:	4b38      	ldr	r3, [pc, #224]	; (8006ff8 <ScheduleTx+0x19c>)
 8006f16:	7818      	ldrb	r0, [r3, #0]
                                     LoRaMacParams.Rx2Channel.Datarate,
 8006f18:	4b32      	ldr	r3, [pc, #200]	; (8006fe4 <ScheduleTx+0x188>)
 8006f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8006f1e:	b259      	sxtb	r1, r3
 8006f20:	4b30      	ldr	r3, [pc, #192]	; (8006fe4 <ScheduleTx+0x188>)
 8006f22:	7a1a      	ldrb	r2, [r3, #8]
 8006f24:	4b2f      	ldr	r3, [pc, #188]	; (8006fe4 <ScheduleTx+0x188>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4c36      	ldr	r4, [pc, #216]	; (8007004 <ScheduleTx+0x1a8>)
 8006f2a:	9400      	str	r4, [sp, #0]
 8006f2c:	f002 fe43 	bl	8009bb6 <RegionComputeRxWindowParameters>
                                     LoRaMacParams.MinRxSymbols,
                                     LoRaMacParams.SystemMaxRxError,
                                     &RxWindow2Config );

    if ( IsLoRaMacNetworkJoined == false ) {
 8006f30:	4b2e      	ldr	r3, [pc, #184]	; (8006fec <ScheduleTx+0x190>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f083 0301 	eor.w	r3, r3, #1
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00e      	beq.n	8006f5c <ScheduleTx+0x100>
        RxWindow1Delay = LoRaMacParams.JoinAcceptDelay1 + RxWindow1Config.WindowOffset;
 8006f3e:	4b29      	ldr	r3, [pc, #164]	; (8006fe4 <ScheduleTx+0x188>)
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	4a2f      	ldr	r2, [pc, #188]	; (8007000 <ScheduleTx+0x1a4>)
 8006f44:	68d2      	ldr	r2, [r2, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	4a2f      	ldr	r2, [pc, #188]	; (8007008 <ScheduleTx+0x1ac>)
 8006f4a:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.JoinAcceptDelay2 + RxWindow2Config.WindowOffset;
 8006f4c:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <ScheduleTx+0x188>)
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4a2c      	ldr	r2, [pc, #176]	; (8007004 <ScheduleTx+0x1a8>)
 8006f52:	68d2      	ldr	r2, [r2, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	4a2d      	ldr	r2, [pc, #180]	; (800700c <ScheduleTx+0x1b0>)
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e01f      	b.n	8006f9c <ScheduleTx+0x140>
    } else {
        if ( ValidatePayloadLength( LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex ) == false ) {
 8006f5c:	4b2c      	ldr	r3, [pc, #176]	; (8007010 <ScheduleTx+0x1b4>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4a20      	ldr	r2, [pc, #128]	; (8006fe4 <ScheduleTx+0x188>)
 8006f62:	f992 1001 	ldrsb.w	r1, [r2, #1]
 8006f66:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <ScheduleTx+0x1b8>)
 8006f68:	7812      	ldrb	r2, [r2, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f9cc 	bl	8006308 <ValidatePayloadLength>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f083 0301 	eor.w	r3, r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <ScheduleTx+0x124>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	e026      	b.n	8006fce <ScheduleTx+0x172>
        }
        RxWindow1Delay = LoRaMacParams.ReceiveDelay1 + RxWindow1Config.WindowOffset;
 8006f80:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <ScheduleTx+0x188>)
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	4a1e      	ldr	r2, [pc, #120]	; (8007000 <ScheduleTx+0x1a4>)
 8006f86:	68d2      	ldr	r2, [r2, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <ScheduleTx+0x1ac>)
 8006f8c:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 8006f8e:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <ScheduleTx+0x188>)
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <ScheduleTx+0x1a8>)
 8006f94:	68d2      	ldr	r2, [r2, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <ScheduleTx+0x1b0>)
 8006f9a:	6013      	str	r3, [r2, #0]
    }

    // Schedule transmission of frame
    if ( dutyCycleTimeOff == 0 ) {
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <ScheduleTx+0x154>
        // Try to send now
        return SendFrameOnChannel( Channel );
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <ScheduleTx+0x1a0>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fc18 	bl	80077dc <SendFrameOnChannel>
 8006fac:	4603      	mov	r3, r0
 8006fae:	e00e      	b.n	8006fce <ScheduleTx+0x172>
    } else {
        // Send later - prepare timer
        LoRaMacState |= LORAMAC_TX_DELAYED;
 8006fb0:	4b19      	ldr	r3, [pc, #100]	; (8007018 <ScheduleTx+0x1bc>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f043 0310 	orr.w	r3, r3, #16
 8006fb8:	4a17      	ldr	r2, [pc, #92]	; (8007018 <ScheduleTx+0x1bc>)
 8006fba:	6013      	str	r3, [r2, #0]
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4816      	ldr	r0, [pc, #88]	; (800701c <ScheduleTx+0x1c0>)
 8006fc2:	f009 f889 	bl	80100d8 <TimerSetValue>
        TimerStart( &TxDelayedTimer );
 8006fc6:	4815      	ldr	r0, [pc, #84]	; (800701c <ScheduleTx+0x1c0>)
 8006fc8:	f008 fe82 	bl	800fcd0 <TimerStart>

        return LORAMAC_STATUS_OK;
 8006fcc:	2300      	movs	r3, #0
    }
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd90      	pop	{r4, r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000469 	.word	0x20000469
 8006fdc:	20000470 	.word	0x20000470
 8006fe0:	20000476 	.word	0x20000476
 8006fe4:	20000a78 	.word	0x20000a78
 8006fe8:	20000474 	.word	0x20000474
 8006fec:	20000359 	.word	0x20000359
 8006ff0:	2000046c 	.word	0x2000046c
 8006ff4:	20000a1c 	.word	0x20000a1c
 8006ff8:	20000110 	.word	0x20000110
 8006ffc:	20000475 	.word	0x20000475
 8007000:	200009d4 	.word	0x200009d4
 8007004:	20000ae4 	.word	0x20000ae4
 8007008:	20000a70 	.word	0x20000a70
 800700c:	20000af8 	.word	0x20000af8
 8007010:	2000024e 	.word	0x2000024e
 8007014:	20000363 	.word	0x20000363
 8007018:	2000047c 	.word	0x2000047c
 800701c:	20000a5c 	.word	0x20000a5c

08007020 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
    CalcBackOffParams_t calcBackOff;

    calcBackOff.Joined = IsLoRaMacNetworkJoined;
 800702a:	4b15      	ldr	r3, [pc, #84]	; (8007080 <CalculateBackOff+0x60>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	733b      	strb	r3, [r7, #12]
    calcBackOff.DutyCycleEnabled = DutyCycleOn;
 8007030:	4b14      	ldr	r3, [pc, #80]	; (8007084 <CalculateBackOff+0x64>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	73bb      	strb	r3, [r7, #14]
    calcBackOff.Channel = channel;
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	73fb      	strb	r3, [r7, #15]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( LoRaMacInitializationTime );
 800703a:	4b13      	ldr	r3, [pc, #76]	; (8007088 <CalculateBackOff+0x68>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f009 f86a 	bl	8010118 <TimerGetElapsedTime>
 8007044:	4603      	mov	r3, r0
 8007046:	613b      	str	r3, [r7, #16]
    calcBackOff.TxTimeOnAir = TxTimeOnAir;
 8007048:	4b10      	ldr	r3, [pc, #64]	; (800708c <CalculateBackOff+0x6c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	617b      	str	r3, [r7, #20]
    calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 800704e:	4b10      	ldr	r3, [pc, #64]	; (8007090 <CalculateBackOff+0x70>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	737b      	strb	r3, [r7, #13]

    // Update regional back-off
    RegionCalcBackOff( LoRaMacRegion, &calcBackOff );
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <CalculateBackOff+0x74>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f107 020c 	add.w	r2, r7, #12
 800705c:	4611      	mov	r1, r2
 800705e:	4618      	mov	r0, r3
 8007060:	f002 fe68 	bl	8009d34 <RegionCalcBackOff>

    // Update aggregated time-off
    AggregatedTimeOff = TxTimeOnAir * AggregatedDCycle - TxTimeOnAir;
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <CalculateBackOff+0x78>)
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	3b01      	subs	r3, #1
 800706a:	4a08      	ldr	r2, [pc, #32]	; (800708c <CalculateBackOff+0x6c>)
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	fb02 f303 	mul.w	r3, r2, r3
 8007072:	4a0a      	ldr	r2, [pc, #40]	; (800709c <CalculateBackOff+0x7c>)
 8007074:	6013      	str	r3, [r2, #0]
}
 8007076:	bf00      	nop
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000359 	.word	0x20000359
 8007084:	20000474 	.word	0x20000474
 8007088:	20000478 	.word	0x20000478
 800708c:	200004bc 	.word	0x200004bc
 8007090:	20000477 	.word	0x20000477
 8007094:	20000110 	.word	0x20000110
 8007098:	2000046a 	.word	0x2000046a
 800709c:	20000470 	.word	0x20000470

080070a0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
    IsLoRaMacNetworkJoined = false;
 80070a6:	4b3b      	ldr	r3, [pc, #236]	; (8007194 <ResetMacParameters+0xf4>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]

    // Counters
    UpLinkCounter = 0;
 80070ac:	4b3a      	ldr	r3, [pc, #232]	; (8007198 <ResetMacParameters+0xf8>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
    DownLinkCounter = -1;
 80070b2:	4b3a      	ldr	r3, [pc, #232]	; (800719c <ResetMacParameters+0xfc>)
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295
 80070b8:	601a      	str	r2, [r3, #0]
    AdrAckCounter = 0;
 80070ba:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <ResetMacParameters+0x100>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

    ChannelsNbRepCounter = 0;
 80070c0:	4b38      	ldr	r3, [pc, #224]	; (80071a4 <ResetMacParameters+0x104>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]

    AckTimeoutRetries = 1;
 80070c6:	4b38      	ldr	r3, [pc, #224]	; (80071a8 <ResetMacParameters+0x108>)
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetriesCounter = 1;
 80070cc:	4b37      	ldr	r3, [pc, #220]	; (80071ac <ResetMacParameters+0x10c>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetry = false;
 80070d2:	4b37      	ldr	r3, [pc, #220]	; (80071b0 <ResetMacParameters+0x110>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]

    MaxDCycle = 0;
 80070d8:	4b36      	ldr	r3, [pc, #216]	; (80071b4 <ResetMacParameters+0x114>)
 80070da:	2200      	movs	r2, #0
 80070dc:	701a      	strb	r2, [r3, #0]
    AggregatedDCycle = 1;
 80070de:	4b36      	ldr	r3, [pc, #216]	; (80071b8 <ResetMacParameters+0x118>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	801a      	strh	r2, [r3, #0]

    MacCommandsBufferIndex = 0;
 80070e4:	4b35      	ldr	r3, [pc, #212]	; (80071bc <ResetMacParameters+0x11c>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
    MacCommandsBufferToRepeatIndex = 0;
 80070ea:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <ResetMacParameters+0x120>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]

    IsRxWindowsEnabled = true;
 80070f0:	4b34      	ldr	r3, [pc, #208]	; (80071c4 <ResetMacParameters+0x124>)
 80070f2:	2201      	movs	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]

    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 80070f6:	4b34      	ldr	r3, [pc, #208]	; (80071c8 <ResetMacParameters+0x128>)
 80070f8:	f993 2000 	ldrsb.w	r2, [r3]
 80070fc:	4b33      	ldr	r3, [pc, #204]	; (80071cc <ResetMacParameters+0x12c>)
 80070fe:	701a      	strb	r2, [r3, #0]
    LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <ResetMacParameters+0x128>)
 8007102:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8007106:	4b31      	ldr	r3, [pc, #196]	; (80071cc <ResetMacParameters+0x12c>)
 8007108:	705a      	strb	r2, [r3, #1]
    LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 800710a:	4b2f      	ldr	r3, [pc, #188]	; (80071c8 <ResetMacParameters+0x128>)
 800710c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8007110:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <ResetMacParameters+0x12c>)
 8007112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    memcpy(&LoRaMacParams.Rx2Channel, &LoRaMacParamsDefaults.Rx2Channel, sizeof(LoRaMacParams.Rx2Channel));
 8007116:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <ResetMacParameters+0x12c>)
 8007118:	4a2b      	ldr	r2, [pc, #172]	; (80071c8 <ResetMacParameters+0x128>)
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	3224      	adds	r2, #36	; 0x24
 800711e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007122:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacParams.UplinkDwellTime = LoRaMacParamsDefaults.UplinkDwellTime;
 8007126:	4b28      	ldr	r3, [pc, #160]	; (80071c8 <ResetMacParameters+0x128>)
 8007128:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800712c:	4b27      	ldr	r3, [pc, #156]	; (80071cc <ResetMacParameters+0x12c>)
 800712e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    LoRaMacParams.DownlinkDwellTime = LoRaMacParamsDefaults.DownlinkDwellTime;
 8007132:	4b25      	ldr	r3, [pc, #148]	; (80071c8 <ResetMacParameters+0x128>)
 8007134:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8007138:	4b24      	ldr	r3, [pc, #144]	; (80071cc <ResetMacParameters+0x12c>)
 800713a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 800713e:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <ResetMacParameters+0x128>)
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	4a22      	ldr	r2, [pc, #136]	; (80071cc <ResetMacParameters+0x12c>)
 8007144:	6313      	str	r3, [r2, #48]	; 0x30
    LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <ResetMacParameters+0x128>)
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	4a20      	ldr	r2, [pc, #128]	; (80071cc <ResetMacParameters+0x12c>)
 800714c:	6353      	str	r3, [r2, #52]	; 0x34

    NodeAckRequested = false;
 800714e:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <ResetMacParameters+0x130>)
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]
    SrvAckRequested = false;
 8007154:	4b1f      	ldr	r3, [pc, #124]	; (80071d4 <ResetMacParameters+0x134>)
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]
    MacCommandsInNextTx = false;
 800715a:	4b1f      	ldr	r3, [pc, #124]	; (80071d8 <ResetMacParameters+0x138>)
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]

    // Reset Multicast downlink counters
    MulticastParams_t *cur = MulticastChannels;
 8007160:	4b1e      	ldr	r3, [pc, #120]	; (80071dc <ResetMacParameters+0x13c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	607b      	str	r3, [r7, #4]
    while ( cur != NULL ) {
 8007166:	e005      	b.n	8007174 <ResetMacParameters+0xd4>
        cur->DownLinkCounter = 0;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	625a      	str	r2, [r3, #36]	; 0x24
        cur = cur->Next;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	607b      	str	r3, [r7, #4]
    while ( cur != NULL ) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f6      	bne.n	8007168 <ResetMacParameters+0xc8>
    }

    // Initialize channel index.
    Channel = 0;
 800717a:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <ResetMacParameters+0x140>)
 800717c:	2200      	movs	r2, #0
 800717e:	701a      	strb	r2, [r3, #0]
    LastTxChannel = Channel;
 8007180:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <ResetMacParameters+0x140>)
 8007182:	781a      	ldrb	r2, [r3, #0]
 8007184:	4b17      	ldr	r3, [pc, #92]	; (80071e4 <ResetMacParameters+0x144>)
 8007186:	701a      	strb	r2, [r3, #0]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000359 	.word	0x20000359
 8007198:	20000350 	.word	0x20000350
 800719c:	20000354 	.word	0x20000354
 80071a0:	2000035c 	.word	0x2000035c
 80071a4:	20000468 	.word	0x20000468
 80071a8:	20000009 	.word	0x20000009
 80071ac:	2000000a 	.word	0x2000000a
 80071b0:	200004b8 	.word	0x200004b8
 80071b4:	20000469 	.word	0x20000469
 80071b8:	2000046a 	.word	0x2000046a
 80071bc:	20000363 	.word	0x20000363
 80071c0:	20000364 	.word	0x20000364
 80071c4:	20000008 	.word	0x20000008
 80071c8:	20000a1c 	.word	0x20000a1c
 80071cc:	20000a78 	.word	0x20000a78
 80071d0:	20000360 	.word	0x20000360
 80071d4:	20000361 	.word	0x20000361
 80071d8:	20000362 	.word	0x20000362
 80071dc:	20000144 	.word	0x20000144
 80071e0:	20000475 	.word	0x20000475
 80071e4:	20000476 	.word	0x20000476

080071e8 <IsFPortAllowed>:

static bool IsFPortAllowed( uint8_t fPort )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	71fb      	strb	r3, [r7, #7]
    if( fPort > 224 )
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	2be0      	cmp	r3, #224	; 0xe0
 80071f6:	d901      	bls.n	80071fc <IsFPortAllowed+0x14>
    {
        return false;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e000      	b.n	80071fe <IsFPortAllowed+0x16>
    }
    return true;
 80071fc:	2301      	movs	r3, #1
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( );
 800720c:	f7fe ff6a 	bl	80060e4 <OnRxWindow2TimerEvent>
    RxSlot = RX_SLOT_WIN_CLASS_C;
 8007210:	4b02      	ldr	r3, [pc, #8]	; (800721c <OpenContinuousRx2Window+0x14>)
 8007212:	2202      	movs	r2, #2
 8007214:	701a      	strb	r2, [r3, #0]
}
 8007216:	bf00      	nop
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000a74 	.word	0x20000a74

08007220 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t *macHdr, LoRaMacFrameCtrl_t *fCtrl, uint8_t fPort, void *fBuffer,
                              uint16_t fBufferSize )
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b091      	sub	sp, #68	; 0x44
 8007224:	af04      	add	r7, sp, #16
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	71fb      	strb	r3, [r7, #7]
    AdrNextParams_t adrNext;
    uint16_t i;
    uint8_t pktHeaderLen = 0;
 8007230:	2300      	movs	r3, #0
 8007232:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t mic = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
    const void *payload = fBuffer;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t framePort = fPort;
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    LoRaMacBufferPktLen = 0;
 8007244:	4b62      	ldr	r3, [pc, #392]	; (80073d0 <PrepareFrame+0x1b0>)
 8007246:	2200      	movs	r2, #0
 8007248:	801a      	strh	r2, [r3, #0]

    NodeAckRequested = false;
 800724a:	4b62      	ldr	r3, [pc, #392]	; (80073d4 <PrepareFrame+0x1b4>)
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]

    if ( fBuffer == NULL ) {
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <PrepareFrame+0x3c>
        fBufferSize = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }
    LoRaMacTxPayloadLen = fBufferSize;
 800725c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007260:	b2da      	uxtb	r2, r3
 8007262:	4b5d      	ldr	r3, [pc, #372]	; (80073d8 <PrepareFrame+0x1b8>)
 8007264:	701a      	strb	r2, [r3, #0]

    LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 8007266:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007270:	461a      	mov	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	7819      	ldrb	r1, [r3, #0]
 8007276:	4b59      	ldr	r3, [pc, #356]	; (80073dc <PrepareFrame+0x1bc>)
 8007278:	5499      	strb	r1, [r3, r2]

    switch ( macHdr->Bits.MType ) {
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b07      	cmp	r3, #7
 8007286:	f200 8293 	bhi.w	80077b0 <PrepareFrame+0x590>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <PrepareFrame+0x70>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072b1 	.word	0x080072b1
 8007294:	080077b1 	.word	0x080077b1
 8007298:	080073bd 	.word	0x080073bd
 800729c:	080077b1 	.word	0x080077b1
 80072a0:	080073b7 	.word	0x080073b7
 80072a4:	080077b1 	.word	0x080077b1
 80072a8:	080077b1 	.word	0x080077b1
 80072ac:	08007777 	.word	0x08007777
    case FRAME_TYPE_JOIN_REQ:
                LoRaMacBufferPktLen = pktHeaderLen;
 80072b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <PrepareFrame+0x1b0>)
 80072b8:	801a      	strh	r2, [r3, #0]

                memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8 );
 80072ba:	4b45      	ldr	r3, [pc, #276]	; (80073d0 <PrepareFrame+0x1b0>)
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	4b46      	ldr	r3, [pc, #280]	; (80073dc <PrepareFrame+0x1bc>)
 80072c2:	4413      	add	r3, r2
 80072c4:	4a46      	ldr	r2, [pc, #280]	; (80073e0 <PrepareFrame+0x1c0>)
 80072c6:	6811      	ldr	r1, [r2, #0]
 80072c8:	2208      	movs	r2, #8
 80072ca:	4618      	mov	r0, r3
 80072cc:	f009 f846 	bl	801035c <memcpyr>
                LoRaMacBufferPktLen += 8;
 80072d0:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <PrepareFrame+0x1b0>)
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	4b3d      	ldr	r3, [pc, #244]	; (80073d0 <PrepareFrame+0x1b0>)
 80072da:	801a      	strh	r2, [r3, #0]
                memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 80072dc:	4b3c      	ldr	r3, [pc, #240]	; (80073d0 <PrepareFrame+0x1b0>)
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <PrepareFrame+0x1bc>)
 80072e4:	4413      	add	r3, r2
 80072e6:	4a3f      	ldr	r2, [pc, #252]	; (80073e4 <PrepareFrame+0x1c4>)
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	2208      	movs	r2, #8
 80072ec:	4618      	mov	r0, r3
 80072ee:	f009 f835 	bl	801035c <memcpyr>
                LoRaMacBufferPktLen += 8;
 80072f2:	4b37      	ldr	r3, [pc, #220]	; (80073d0 <PrepareFrame+0x1b0>)
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	4b35      	ldr	r3, [pc, #212]	; (80073d0 <PrepareFrame+0x1b0>)
 80072fc:	801a      	strh	r2, [r3, #0]

                LoRaMacDevNonce = Radio.Random( );
 80072fe:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <PrepareFrame+0x1c8>)
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	4798      	blx	r3
 8007304:	4603      	mov	r3, r0
 8007306:	b29a      	uxth	r2, r3
 8007308:	4b38      	ldr	r3, [pc, #224]	; (80073ec <PrepareFrame+0x1cc>)
 800730a:	801a      	strh	r2, [r3, #0]

                LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 800730c:	4b37      	ldr	r3, [pc, #220]	; (80073ec <PrepareFrame+0x1cc>)
 800730e:	8819      	ldrh	r1, [r3, #0]
 8007310:	4b2f      	ldr	r3, [pc, #188]	; (80073d0 <PrepareFrame+0x1b0>)
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	b290      	uxth	r0, r2
 8007318:	4a2d      	ldr	r2, [pc, #180]	; (80073d0 <PrepareFrame+0x1b0>)
 800731a:	8010      	strh	r0, [r2, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	b2c9      	uxtb	r1, r1
 8007320:	4b2e      	ldr	r3, [pc, #184]	; (80073dc <PrepareFrame+0x1bc>)
 8007322:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 8007324:	4b31      	ldr	r3, [pc, #196]	; (80073ec <PrepareFrame+0x1cc>)
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	b299      	uxth	r1, r3
 800732c:	4b28      	ldr	r3, [pc, #160]	; (80073d0 <PrepareFrame+0x1b0>)
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	b290      	uxth	r0, r2
 8007334:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <PrepareFrame+0x1b0>)
 8007336:	8010      	strh	r0, [r2, #0]
 8007338:	461a      	mov	r2, r3
 800733a:	b2c9      	uxtb	r1, r1
 800733c:	4b27      	ldr	r3, [pc, #156]	; (80073dc <PrepareFrame+0x1bc>)
 800733e:	5499      	strb	r1, [r3, r2]

                LoRaMacJoinComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic );
 8007340:	4b23      	ldr	r3, [pc, #140]	; (80073d0 <PrepareFrame+0x1b0>)
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	b299      	uxth	r1, r3
 8007348:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <PrepareFrame+0x1d0>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f107 0314 	add.w	r3, r7, #20
 8007350:	4822      	ldr	r0, [pc, #136]	; (80073dc <PrepareFrame+0x1bc>)
 8007352:	f001 ff23 	bl	800919c <LoRaMacJoinComputeMic>

                LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 8007356:	6979      	ldr	r1, [r7, #20]
 8007358:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <PrepareFrame+0x1b0>)
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	b290      	uxth	r0, r2
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <PrepareFrame+0x1b0>)
 8007362:	8010      	strh	r0, [r2, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	b2c9      	uxtb	r1, r1
 8007368:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <PrepareFrame+0x1bc>)
 800736a:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 8 ) & 0xFF;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	0a19      	lsrs	r1, r3, #8
 8007370:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <PrepareFrame+0x1b0>)
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	b290      	uxth	r0, r2
 8007378:	4a15      	ldr	r2, [pc, #84]	; (80073d0 <PrepareFrame+0x1b0>)
 800737a:	8010      	strh	r0, [r2, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	b2c9      	uxtb	r1, r1
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <PrepareFrame+0x1bc>)
 8007382:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 16 ) & 0xFF;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	0c19      	lsrs	r1, r3, #16
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <PrepareFrame+0x1b0>)
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	b290      	uxth	r0, r2
 8007390:	4a0f      	ldr	r2, [pc, #60]	; (80073d0 <PrepareFrame+0x1b0>)
 8007392:	8010      	strh	r0, [r2, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	b2c9      	uxtb	r1, r1
 8007398:	4b10      	ldr	r3, [pc, #64]	; (80073dc <PrepareFrame+0x1bc>)
 800739a:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	0e19      	lsrs	r1, r3, #24
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <PrepareFrame+0x1b0>)
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	b290      	uxth	r0, r2
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <PrepareFrame+0x1b0>)
 80073aa:	8010      	strh	r0, [r2, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	b2c9      	uxtb	r1, r1
 80073b0:	4b0a      	ldr	r3, [pc, #40]	; (80073dc <PrepareFrame+0x1bc>)
 80073b2:	5499      	strb	r1, [r3, r2]

                break;
 80073b4:	e1ff      	b.n	80077b6 <PrepareFrame+0x596>
            case FRAME_TYPE_DATA_CONFIRMED_UP:
            NodeAckRequested = true;
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <PrepareFrame+0x1b4>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
        //Intentional fallthrough
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            if ( IsLoRaMacNetworkJoined == false ) {
 80073bc:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <PrepareFrame+0x1d4>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f083 0301 	eor.w	r3, r3, #1
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d016      	beq.n	80073f8 <PrepareFrame+0x1d8>
                return LORAMAC_STATUS_NO_NETWORK_JOINED; // No network has been joined yet
 80073ca:	2307      	movs	r3, #7
 80073cc:	e1f4      	b.n	80077b8 <PrepareFrame+0x598>
 80073ce:	bf00      	nop
 80073d0:	2000024c 	.word	0x2000024c
 80073d4:	20000360 	.word	0x20000360
 80073d8:	2000024e 	.word	0x2000024e
 80073dc:	2000014c 	.word	0x2000014c
 80073e0:	20000118 	.word	0x20000118
 80073e4:	20000114 	.word	0x20000114
 80073e8:	08012794 	.word	0x08012794
 80073ec:	20000a58 	.word	0x20000a58
 80073f0:	20000acc 	.word	0x20000acc
 80073f4:	20000359 	.word	0x20000359
            }

            // Adr next request
            adrNext.UpdateChanMask = true;
 80073f8:	2301      	movs	r3, #1
 80073fa:	763b      	strb	r3, [r7, #24]
            adrNext.AdrEnabled = fCtrl->Bits.Adr;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	767b      	strb	r3, [r7, #25]
            adrNext.AdrAckCounter = AdrAckCounter;
 8007412:	4b9f      	ldr	r3, [pc, #636]	; (8007690 <PrepareFrame+0x470>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	61fb      	str	r3, [r7, #28]
            adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8007418:	4b9e      	ldr	r3, [pc, #632]	; (8007694 <PrepareFrame+0x474>)
 800741a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800741e:	f887 3020 	strb.w	r3, [r7, #32]
            adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 8007422:	4b9c      	ldr	r3, [pc, #624]	; (8007694 <PrepareFrame+0x474>)
 8007424:	f993 3000 	ldrsb.w	r3, [r3]
 8007428:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800742c:	4b99      	ldr	r3, [pc, #612]	; (8007694 <PrepareFrame+0x474>)
 800742e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007432:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            fCtrl->Bits.AdrAckReq = RegionAdrNext( LoRaMacRegion, &adrNext,
 8007436:	4b98      	ldr	r3, [pc, #608]	; (8007698 <PrepareFrame+0x478>)
 8007438:	7818      	ldrb	r0, [r3, #0]
 800743a:	f107 0118 	add.w	r1, r7, #24
 800743e:	4b94      	ldr	r3, [pc, #592]	; (8007690 <PrepareFrame+0x470>)
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4b94      	ldr	r3, [pc, #592]	; (8007694 <PrepareFrame+0x474>)
 8007444:	4a95      	ldr	r2, [pc, #596]	; (800769c <PrepareFrame+0x47c>)
 8007446:	f002 fb9e 	bl	8009b86 <RegionAdrNext>
 800744a:	4603      	mov	r3, r0
 800744c:	4619      	mov	r1, r3
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	7813      	ldrb	r3, [r2, #0]
 8007452:	f361 1386 	bfi	r3, r1, #6, #1
 8007456:	7013      	strb	r3, [r2, #0]
                                                   &LoRaMacParams.ChannelsDatarate, &LoRaMacParams.ChannelsTxPower, &AdrAckCounter );
            if ( SrvAckRequested == true ) {
 8007458:	4b91      	ldr	r3, [pc, #580]	; (80076a0 <PrepareFrame+0x480>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <PrepareFrame+0x250>
                SrvAckRequested = false;
 8007460:	4b8f      	ldr	r3, [pc, #572]	; (80076a0 <PrepareFrame+0x480>)
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
                fCtrl->Bits.Ack = 1;
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	7813      	ldrb	r3, [r2, #0]
 800746a:	f043 0320 	orr.w	r3, r3, #32
 800746e:	7013      	strb	r3, [r2, #0]
            }

            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr ) & 0xFF;
 8007470:	4b8c      	ldr	r3, [pc, #560]	; (80076a4 <PrepareFrame+0x484>)
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800747e:	461a      	mov	r2, r3
 8007480:	b2c9      	uxtb	r1, r1
 8007482:	4b89      	ldr	r3, [pc, #548]	; (80076a8 <PrepareFrame+0x488>)
 8007484:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 8 ) & 0xFF;
 8007486:	4b87      	ldr	r3, [pc, #540]	; (80076a4 <PrepareFrame+0x484>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	0a19      	lsrs	r1, r3, #8
 800748c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007496:	461a      	mov	r2, r3
 8007498:	b2c9      	uxtb	r1, r1
 800749a:	4b83      	ldr	r3, [pc, #524]	; (80076a8 <PrepareFrame+0x488>)
 800749c:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 16 ) & 0xFF;
 800749e:	4b81      	ldr	r3, [pc, #516]	; (80076a4 <PrepareFrame+0x484>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	0c19      	lsrs	r1, r3, #16
 80074a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80074ae:	461a      	mov	r2, r3
 80074b0:	b2c9      	uxtb	r1, r1
 80074b2:	4b7d      	ldr	r3, [pc, #500]	; (80076a8 <PrepareFrame+0x488>)
 80074b4:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 24 ) & 0xFF;
 80074b6:	4b7b      	ldr	r3, [pc, #492]	; (80076a4 <PrepareFrame+0x484>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	0e19      	lsrs	r1, r3, #24
 80074bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80074c6:	461a      	mov	r2, r3
 80074c8:	b2c9      	uxtb	r1, r1
 80074ca:	4b77      	ldr	r3, [pc, #476]	; (80076a8 <PrepareFrame+0x488>)
 80074cc:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 80074ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80074d8:	461a      	mov	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	7819      	ldrb	r1, [r3, #0]
 80074de:	4b72      	ldr	r3, [pc, #456]	; (80076a8 <PrepareFrame+0x488>)
 80074e0:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 80074e2:	4b72      	ldr	r3, [pc, #456]	; (80076ac <PrepareFrame+0x48c>)
 80074e4:	6819      	ldr	r1, [r3, #0]
 80074e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80074f0:	461a      	mov	r2, r3
 80074f2:	b2c9      	uxtb	r1, r1
 80074f4:	4b6c      	ldr	r3, [pc, #432]	; (80076a8 <PrepareFrame+0x488>)
 80074f6:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 80074f8:	4b6c      	ldr	r3, [pc, #432]	; (80076ac <PrepareFrame+0x48c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	0a19      	lsrs	r1, r3, #8
 80074fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007508:	461a      	mov	r2, r3
 800750a:	b2c9      	uxtb	r1, r1
 800750c:	4b66      	ldr	r3, [pc, #408]	; (80076a8 <PrepareFrame+0x488>)
 800750e:	5499      	strb	r1, [r3, r2]

            // Copy the MAC commands which must be re-send into the MAC command buffer
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 8007510:	4b67      	ldr	r3, [pc, #412]	; (80076b0 <PrepareFrame+0x490>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	4b67      	ldr	r3, [pc, #412]	; (80076b4 <PrepareFrame+0x494>)
 8007518:	4413      	add	r3, r2
 800751a:	4a67      	ldr	r2, [pc, #412]	; (80076b8 <PrepareFrame+0x498>)
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	b292      	uxth	r2, r2
 8007520:	4966      	ldr	r1, [pc, #408]	; (80076bc <PrepareFrame+0x49c>)
 8007522:	4618      	mov	r0, r3
 8007524:	f008 feff 	bl	8010326 <memcpy1>
            MacCommandsBufferIndex += MacCommandsBufferToRepeatIndex;
 8007528:	4b61      	ldr	r3, [pc, #388]	; (80076b0 <PrepareFrame+0x490>)
 800752a:	781a      	ldrb	r2, [r3, #0]
 800752c:	4b62      	ldr	r3, [pc, #392]	; (80076b8 <PrepareFrame+0x498>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	4413      	add	r3, r2
 8007532:	b2da      	uxtb	r2, r3
 8007534:	4b5e      	ldr	r3, [pc, #376]	; (80076b0 <PrepareFrame+0x490>)
 8007536:	701a      	strb	r2, [r3, #0]

            if ( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 8007538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d043      	beq.n	80075c6 <PrepareFrame+0x3a6>
 800753e:	4b60      	ldr	r3, [pc, #384]	; (80076c0 <PrepareFrame+0x4a0>)
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d03f      	beq.n	80075c6 <PrepareFrame+0x3a6>
                if ( MacCommandsInNextTx == true ) {
 8007546:	4b5f      	ldr	r3, [pc, #380]	; (80076c4 <PrepareFrame+0x4a4>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04c      	beq.n	80075e8 <PrepareFrame+0x3c8>
                    if ( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) {
 800754e:	4b58      	ldr	r3, [pc, #352]	; (80076b0 <PrepareFrame+0x490>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b0f      	cmp	r3, #15
 8007554:	d82d      	bhi.n	80075b2 <PrepareFrame+0x392>
                        fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800755e:	b2db      	uxtb	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	4b53      	ldr	r3, [pc, #332]	; (80076b0 <PrepareFrame+0x490>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	4413      	add	r3, r2
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	b2d9      	uxtb	r1, r3
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	7813      	ldrb	r3, [r2, #0]
 8007574:	f361 0303 	bfi	r3, r1, #0, #4
 8007578:	7013      	strb	r3, [r2, #0]

                        // Update FCtrl field with new value of OptionsLength
                        LoRaMacBuffer[0x05] = fCtrl->Value;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	4b4a      	ldr	r3, [pc, #296]	; (80076a8 <PrepareFrame+0x488>)
 8007580:	715a      	strb	r2, [r3, #5]
                        for ( i = 0; i < MacCommandsBufferIndex; i++ ) {
 8007582:	2300      	movs	r3, #0
 8007584:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007586:	e00d      	b.n	80075a4 <PrepareFrame+0x384>
                            LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 8007588:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800758a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800758e:	1c59      	adds	r1, r3, #1
 8007590:	f887 102d 	strb.w	r1, [r7, #45]	; 0x2d
 8007594:	4619      	mov	r1, r3
 8007596:	4b47      	ldr	r3, [pc, #284]	; (80076b4 <PrepareFrame+0x494>)
 8007598:	5c9a      	ldrb	r2, [r3, r2]
 800759a:	4b43      	ldr	r3, [pc, #268]	; (80076a8 <PrepareFrame+0x488>)
 800759c:	545a      	strb	r2, [r3, r1]
                        for ( i = 0; i < MacCommandsBufferIndex; i++ ) {
 800759e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075a0:	3301      	adds	r3, #1
 80075a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075a4:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <PrepareFrame+0x490>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d3eb      	bcc.n	8007588 <PrepareFrame+0x368>
                if ( MacCommandsInNextTx == true ) {
 80075b0:	e01a      	b.n	80075e8 <PrepareFrame+0x3c8>
                        }
                    } else {
                        LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 80075b2:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <PrepareFrame+0x490>)
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	4b42      	ldr	r3, [pc, #264]	; (80076c0 <PrepareFrame+0x4a0>)
 80075b8:	701a      	strb	r2, [r3, #0]
                        payload = MacCommandsBuffer;
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <PrepareFrame+0x494>)
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
                        framePort = 0;
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ( MacCommandsInNextTx == true ) {
 80075c4:	e010      	b.n	80075e8 <PrepareFrame+0x3c8>
                    }
                }
            } else {
                if ( ( MacCommandsBufferIndex > 0 ) && ( MacCommandsInNextTx == true ) ) {
 80075c6:	4b3a      	ldr	r3, [pc, #232]	; (80076b0 <PrepareFrame+0x490>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <PrepareFrame+0x3c8>
 80075ce:	4b3d      	ldr	r3, [pc, #244]	; (80076c4 <PrepareFrame+0x4a4>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d008      	beq.n	80075e8 <PrepareFrame+0x3c8>
                    LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <PrepareFrame+0x490>)
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	4b39      	ldr	r3, [pc, #228]	; (80076c0 <PrepareFrame+0x4a0>)
 80075dc:	701a      	strb	r2, [r3, #0]
                    payload = MacCommandsBuffer;
 80075de:	4b35      	ldr	r3, [pc, #212]	; (80076b4 <PrepareFrame+0x494>)
 80075e0:	62bb      	str	r3, [r7, #40]	; 0x28
                    framePort = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            MacCommandsInNextTx = false;
 80075e8:	4b36      	ldr	r3, [pc, #216]	; (80076c4 <PrepareFrame+0x4a4>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]
            // Store MAC commands which must be re-send in case the device does not receive a downlink anymore
            MacCommandsBufferToRepeatIndex = ParseMacCommandsToRepeat( MacCommandsBuffer, MacCommandsBufferIndex,
 80075ee:	4b30      	ldr	r3, [pc, #192]	; (80076b0 <PrepareFrame+0x490>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	4a32      	ldr	r2, [pc, #200]	; (80076bc <PrepareFrame+0x49c>)
 80075f4:	4619      	mov	r1, r3
 80075f6:	482f      	ldr	r0, [pc, #188]	; (80076b4 <PrepareFrame+0x494>)
 80075f8:	f7ff f8e2 	bl	80067c0 <ParseMacCommandsToRepeat>
 80075fc:	4603      	mov	r3, r0
 80075fe:	461a      	mov	r2, r3
 8007600:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <PrepareFrame+0x498>)
 8007602:	701a      	strb	r2, [r3, #0]
                                                                       MacCommandsBufferToRepeat );
            if ( MacCommandsBufferToRepeatIndex > 0 ) {
 8007604:	4b2c      	ldr	r3, [pc, #176]	; (80076b8 <PrepareFrame+0x498>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <PrepareFrame+0x3f2>
                MacCommandsInNextTx = true;
 800760c:	4b2d      	ldr	r3, [pc, #180]	; (80076c4 <PrepareFrame+0x4a4>)
 800760e:	2201      	movs	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
            }

            if ( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 8007612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007614:	2b00      	cmp	r3, #0
 8007616:	d06d      	beq.n	80076f4 <PrepareFrame+0x4d4>
 8007618:	4b29      	ldr	r3, [pc, #164]	; (80076c0 <PrepareFrame+0x4a0>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d069      	beq.n	80076f4 <PrepareFrame+0x4d4>
                LoRaMacBuffer[pktHeaderLen++] = framePort;
 8007620:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800762a:	4619      	mov	r1, r3
 800762c:	4a1e      	ldr	r2, [pc, #120]	; (80076a8 <PrepareFrame+0x488>)
 800762e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007632:	5453      	strb	r3, [r2, r1]
                if ((pktHeaderLen + LoRaMacTxPayloadLen) > (LORAMAC_PHY_MAXPAYLOAD - 4))  {
 8007634:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007638:	4a21      	ldr	r2, [pc, #132]	; (80076c0 <PrepareFrame+0x4a0>)
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	4413      	add	r3, r2
 800763e:	2bfb      	cmp	r3, #251	; 0xfb
 8007640:	dd09      	ble.n	8007656 <PrepareFrame+0x436>
                    LoRaMacTxPayloadLen = LORAMAC_PHY_MAXPAYLOAD - 4 - pktHeaderLen;
 8007642:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007646:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800764a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800764e:	33fb      	adds	r3, #251	; 0xfb
 8007650:	b2da      	uxtb	r2, r3
 8007652:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <PrepareFrame+0x4a0>)
 8007654:	701a      	strb	r2, [r3, #0]
                }

                if ( framePort == 0 ) {
 8007656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800765a:	2b00      	cmp	r3, #0
 800765c:	d136      	bne.n	80076cc <PrepareFrame+0x4ac>
                    // Reset buffer index as the mac commands are being sent on port 0
                    MacCommandsBufferIndex = 0;
 800765e:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <PrepareFrame+0x490>)
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK,
 8007664:	4b16      	ldr	r3, [pc, #88]	; (80076c0 <PrepareFrame+0x4a0>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	b299      	uxth	r1, r3
 800766a:	4b0e      	ldr	r3, [pc, #56]	; (80076a4 <PrepareFrame+0x484>)
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	4b0f      	ldr	r3, [pc, #60]	; (80076ac <PrepareFrame+0x48c>)
 8007670:	681b      	ldr	r3, [r3, #0]
                                           UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8007672:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK,
 8007676:	4c0c      	ldr	r4, [pc, #48]	; (80076a8 <PrepareFrame+0x488>)
 8007678:	4422      	add	r2, r4
 800767a:	9202      	str	r2, [sp, #8]
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	2300      	movs	r3, #0
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4603      	mov	r3, r0
 8007684:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <PrepareFrame+0x4a8>)
 8007686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007688:	f001 fcca 	bl	8009020 <LoRaMacPayloadEncrypt>
 800768c:	e032      	b.n	80076f4 <PrepareFrame+0x4d4>
 800768e:	bf00      	nop
 8007690:	2000035c 	.word	0x2000035c
 8007694:	20000a78 	.word	0x20000a78
 8007698:	20000110 	.word	0x20000110
 800769c:	20000a79 	.word	0x20000a79
 80076a0:	20000361 	.word	0x20000361
 80076a4:	20000140 	.word	0x20000140
 80076a8:	2000014c 	.word	0x2000014c
 80076ac:	20000350 	.word	0x20000350
 80076b0:	20000363 	.word	0x20000363
 80076b4:	20000368 	.word	0x20000368
 80076b8:	20000364 	.word	0x20000364
 80076bc:	200003e8 	.word	0x200003e8
 80076c0:	2000024e 	.word	0x2000024e
 80076c4:	20000362 	.word	0x20000362
 80076c8:	2000011c 	.word	0x2000011c
                } else {
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK,
 80076cc:	4b3c      	ldr	r3, [pc, #240]	; (80077c0 <PrepareFrame+0x5a0>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b299      	uxth	r1, r3
 80076d2:	4b3c      	ldr	r3, [pc, #240]	; (80077c4 <PrepareFrame+0x5a4>)
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	4b3c      	ldr	r3, [pc, #240]	; (80077c8 <PrepareFrame+0x5a8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
                                           UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 80076da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK,
 80076de:	4c3b      	ldr	r4, [pc, #236]	; (80077cc <PrepareFrame+0x5ac>)
 80076e0:	4422      	add	r2, r4
 80076e2:	9202      	str	r2, [sp, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	2300      	movs	r3, #0
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	4603      	mov	r3, r0
 80076ec:	4a38      	ldr	r2, [pc, #224]	; (80077d0 <PrepareFrame+0x5b0>)
 80076ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f0:	f001 fc96 	bl	8009020 <LoRaMacPayloadEncrypt>
                }
            }
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 80076f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	4b31      	ldr	r3, [pc, #196]	; (80077c0 <PrepareFrame+0x5a0>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4413      	add	r3, r2
 8007702:	b29a      	uxth	r2, r3
 8007704:	4b33      	ldr	r3, [pc, #204]	; (80077d4 <PrepareFrame+0x5b4>)
 8007706:	801a      	strh	r2, [r3, #0]

            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 8007708:	4b32      	ldr	r3, [pc, #200]	; (80077d4 <PrepareFrame+0x5b4>)
 800770a:	8819      	ldrh	r1, [r3, #0]
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <PrepareFrame+0x5a4>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	4b2d      	ldr	r3, [pc, #180]	; (80077c8 <PrepareFrame+0x5a8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f107 0214 	add.w	r2, r7, #20
 8007718:	9202      	str	r2, [sp, #8]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	4603      	mov	r3, r0
 8007722:	4a2d      	ldr	r2, [pc, #180]	; (80077d8 <PrepareFrame+0x5b8>)
 8007724:	4829      	ldr	r0, [pc, #164]	; (80077cc <PrepareFrame+0x5ac>)
 8007726:	f001 fc15 	bl	8008f54 <LoRaMacComputeMic>

            LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <PrepareFrame+0x5b4>)
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	b2c9      	uxtb	r1, r1
 8007734:	4b25      	ldr	r3, [pc, #148]	; (80077cc <PrepareFrame+0x5ac>)
 8007736:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen + 1] = ( mic >> 8 ) & 0xFF;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	0a1a      	lsrs	r2, r3, #8
 800773c:	4b25      	ldr	r3, [pc, #148]	; (80077d4 <PrepareFrame+0x5b4>)
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	b2d1      	uxtb	r1, r2
 8007744:	4a21      	ldr	r2, [pc, #132]	; (80077cc <PrepareFrame+0x5ac>)
 8007746:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 2] = ( mic >> 16 ) & 0xFF;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	0c1a      	lsrs	r2, r3, #16
 800774c:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <PrepareFrame+0x5b4>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	3302      	adds	r3, #2
 8007752:	b2d1      	uxtb	r1, r2
 8007754:	4a1d      	ldr	r2, [pc, #116]	; (80077cc <PrepareFrame+0x5ac>)
 8007756:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 3] = ( mic >> 24 ) & 0xFF;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	0e1a      	lsrs	r2, r3, #24
 800775c:	4b1d      	ldr	r3, [pc, #116]	; (80077d4 <PrepareFrame+0x5b4>)
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	3303      	adds	r3, #3
 8007762:	b2d1      	uxtb	r1, r2
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <PrepareFrame+0x5ac>)
 8007766:	54d1      	strb	r1, [r2, r3]

            LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 8007768:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <PrepareFrame+0x5b4>)
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	3304      	adds	r3, #4
 800776e:	b29a      	uxth	r2, r3
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <PrepareFrame+0x5b4>)
 8007772:	801a      	strh	r2, [r3, #0]

            break;
 8007774:	e01f      	b.n	80077b6 <PrepareFrame+0x596>
        case FRAME_TYPE_PROPRIETARY:
            if ( ( fBuffer != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01b      	beq.n	80077b4 <PrepareFrame+0x594>
 800777c:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <PrepareFrame+0x5a0>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d017      	beq.n	80077b4 <PrepareFrame+0x594>
                memcpy1( LoRaMacBuffer + pktHeaderLen, ( uint8_t * ) fBuffer, LoRaMacTxPayloadLen );
 8007784:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007788:	4a10      	ldr	r2, [pc, #64]	; (80077cc <PrepareFrame+0x5ac>)
 800778a:	4413      	add	r3, r2
 800778c:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <PrepareFrame+0x5a0>)
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	b292      	uxth	r2, r2
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f008 fdc6 	bl	8010326 <memcpy1>
                LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 800779a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800779e:	b29a      	uxth	r2, r3
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <PrepareFrame+0x5a0>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <PrepareFrame+0x5b4>)
 80077ac:	801a      	strh	r2, [r3, #0]
            }
            break;
 80077ae:	e001      	b.n	80077b4 <PrepareFrame+0x594>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80077b0:	2302      	movs	r3, #2
 80077b2:	e001      	b.n	80077b8 <PrepareFrame+0x598>
            break;
 80077b4:	bf00      	nop
    }
    return LORAMAC_STATUS_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3734      	adds	r7, #52	; 0x34
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}
 80077c0:	2000024e 	.word	0x2000024e
 80077c4:	20000140 	.word	0x20000140
 80077c8:	20000350 	.word	0x20000350
 80077cc:	2000014c 	.word	0x2000014c
 80077d0:	2000012c 	.word	0x2000012c
 80077d4:	2000024c 	.word	0x2000024c
 80077d8:	2000011c 	.word	0x2000011c

080077dc <SendFrameOnChannel>:



extern void calRTC();
LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]

    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 80077ee:	4b2e      	ldr	r3, [pc, #184]	; (80078a8 <SendFrameOnChannel+0xcc>)
 80077f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80077f4:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 80077f6:	4b2c      	ldr	r3, [pc, #176]	; (80078a8 <SendFrameOnChannel+0xcc>)
 80077f8:	f993 3000 	ldrsb.w	r3, [r3]
 80077fc:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 80077fe:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <SendFrameOnChannel+0xcc>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 8007804:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <SendFrameOnChannel+0xcc>)
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = LoRaMacBufferPktLen;
 800780a:	4b28      	ldr	r3, [pc, #160]	; (80078ac <SendFrameOnChannel+0xd0>)
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 8007810:	4b27      	ldr	r3, [pc, #156]	; (80078b0 <SendFrameOnChannel+0xd4>)
 8007812:	7818      	ldrb	r0, [r3, #0]
 8007814:	f107 020f 	add.w	r2, r7, #15
 8007818:	f107 0110 	add.w	r1, r7, #16
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <SendFrameOnChannel+0xd8>)
 800781e:	f002 f9f9 	bl	8009c14 <RegionTxConfig>

    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_ERROR );
 8007822:	2001      	movs	r0, #1
 8007824:	f001 fad6 	bl	8008dd4 <LoRaMacConfirmQueueSetStatusCmn>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007828:	4b23      	ldr	r3, [pc, #140]	; (80078b8 <SendFrameOnChannel+0xdc>)
 800782a:	2201      	movs	r2, #1
 800782c:	705a      	strb	r2, [r3, #1]
    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 800782e:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <SendFrameOnChannel+0xcc>)
 8007830:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <SendFrameOnChannel+0xdc>)
 8007838:	709a      	strb	r2, [r3, #2]
    McpsConfirm.TxPower = txPower;
 800783a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800783e:	4b1e      	ldr	r3, [pc, #120]	; (80078b8 <SendFrameOnChannel+0xdc>)
 8007840:	70da      	strb	r2, [r3, #3]
    McpsConfirm.Channel = channel;
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <SendFrameOnChannel+0xdc>)
 8007846:	6113      	str	r3, [r2, #16]

    // Store the time on air
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <SendFrameOnChannel+0xd8>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1a      	ldr	r2, [pc, #104]	; (80078b8 <SendFrameOnChannel+0xdc>)
 800784e:	6093      	str	r3, [r2, #8]
    MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 8007850:	4b18      	ldr	r3, [pc, #96]	; (80078b4 <SendFrameOnChannel+0xd8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a19      	ldr	r2, [pc, #100]	; (80078bc <SendFrameOnChannel+0xe0>)
 8007856:	6053      	str	r3, [r2, #4]
//    calRTC();
    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007858:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800785c:	4818      	ldr	r0, [pc, #96]	; (80078c0 <SendFrameOnChannel+0xe4>)
 800785e:	f008 fc3b 	bl	80100d8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007862:	4817      	ldr	r0, [pc, #92]	; (80078c0 <SendFrameOnChannel+0xe4>)
 8007864:	f008 fa34 	bl	800fcd0 <TimerStart>

    if ( IsLoRaMacNetworkJoined == false ) {
 8007868:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <SendFrameOnChannel+0xe8>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f083 0301 	eor.w	r3, r3, #1
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <SendFrameOnChannel+0xa6>
        JoinRequestTrials++;
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <SendFrameOnChannel+0xec>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	4b12      	ldr	r3, [pc, #72]	; (80078c8 <SendFrameOnChannel+0xec>)
 8007880:	701a      	strb	r2, [r3, #0]
    }
    // Send now
    Radio.Send( LoRaMacBuffer, LoRaMacBufferPktLen );
 8007882:	4b12      	ldr	r3, [pc, #72]	; (80078cc <SendFrameOnChannel+0xf0>)
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	4a09      	ldr	r2, [pc, #36]	; (80078ac <SendFrameOnChannel+0xd0>)
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	4611      	mov	r1, r2
 800788e:	4810      	ldr	r0, [pc, #64]	; (80078d0 <SendFrameOnChannel+0xf4>)
 8007890:	4798      	blx	r3

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007892:	4b10      	ldr	r3, [pc, #64]	; (80078d4 <SendFrameOnChannel+0xf8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <SendFrameOnChannel+0xf8>)
 800789c:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	20000a78 	.word	0x20000a78
 80078ac:	2000024c 	.word	0x2000024c
 80078b0:	20000110 	.word	0x20000110
 80078b4:	200004bc 	.word	0x200004bc
 80078b8:	200009c0 	.word	0x200009c0
 80078bc:	20000994 	.word	0x20000994
 80078c0:	20000480 	.word	0x20000480
 80078c4:	20000359 	.word	0x20000359
 80078c8:	20000a14 	.word	0x20000a14
 80078cc:	08012794 	.word	0x08012794
 80078d0:	2000014c 	.word	0x2000014c
 80078d4:	2000047c 	.word	0x2000047c

080078d8 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = Channel;
 80078e2:	4b17      	ldr	r3, [pc, #92]	; (8007940 <SetTxContinuousWave+0x68>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = LoRaMacParams.ChannelsDatarate;
 80078e8:	4b16      	ldr	r3, [pc, #88]	; (8007944 <SetTxContinuousWave+0x6c>)
 80078ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80078ee:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = LoRaMacParams.ChannelsTxPower;
 80078f0:	4b14      	ldr	r3, [pc, #80]	; (8007944 <SetTxContinuousWave+0x6c>)
 80078f2:	f993 3000 	ldrsb.w	r3, [r3]
 80078f6:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = LoRaMacParams.MaxEirp;
 80078f8:	4b12      	ldr	r3, [pc, #72]	; (8007944 <SetTxContinuousWave+0x6c>)
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = LoRaMacParams.AntennaGain;
 80078fe:	4b11      	ldr	r3, [pc, #68]	; (8007944 <SetTxContinuousWave+0x6c>)
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( LoRaMacRegion, &continuousWave );
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <SetTxContinuousWave+0x70>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	f107 0208 	add.w	r2, r7, #8
 8007910:	4611      	mov	r1, r2
 8007912:	4618      	mov	r0, r3
 8007914:	f002 fa4b 	bl	8009dae <RegionSetContinuousWave>

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007918:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800791c:	480b      	ldr	r0, [pc, #44]	; (800794c <SetTxContinuousWave+0x74>)
 800791e:	f008 fbdb 	bl	80100d8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007922:	480a      	ldr	r0, [pc, #40]	; (800794c <SetTxContinuousWave+0x74>)
 8007924:	f008 f9d4 	bl	800fcd0 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <SetTxContinuousWave+0x78>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	4a07      	ldr	r2, [pc, #28]	; (8007950 <SetTxContinuousWave+0x78>)
 8007932:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000475 	.word	0x20000475
 8007944:	20000a78 	.word	0x20000a78
 8007948:	20000110 	.word	0x20000110
 800794c:	20000480 	.word	0x20000480
 8007950:	2000047c 	.word	0x2000047c

08007954 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	6039      	str	r1, [r7, #0]
 800795e:	80fb      	strh	r3, [r7, #6]
 8007960:	4613      	mov	r3, r2
 8007962:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <SetTxContinuousWave1+0x44>)
 8007966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007968:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	6838      	ldr	r0, [r7, #0]
 8007970:	4798      	blx	r3

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007972:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007976:	4809      	ldr	r0, [pc, #36]	; (800799c <SetTxContinuousWave1+0x48>)
 8007978:	f008 fbae 	bl	80100d8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 800797c:	4807      	ldr	r0, [pc, #28]	; (800799c <SetTxContinuousWave1+0x48>)
 800797e:	f008 f9a7 	bl	800fcd0 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <SetTxContinuousWave1+0x4c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	4a05      	ldr	r2, [pc, #20]	; (80079a0 <SetTxContinuousWave1+0x4c>)
 800798c:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	08012794 	.word	0x08012794
 800799c:	20000480 	.word	0x20000480
 80079a0:	2000047c 	.word	0x2000047c

080079a4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacCallback_t *callbacks,
                                       LoRaMacRegion_t region )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if ( primitives == NULL ) {
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <LoRaMacInitialization+0x18>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e1db      	b.n	8007d74 <LoRaMacInitialization+0x3d0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <LoRaMacInitialization+0x38>
        ( primitives->MacMcpsIndication == NULL ) ||
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <LoRaMacInitialization+0x38>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <LoRaMacInitialization+0x38>
        ( primitives->MacMlmeIndication == NULL ) ) {
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <LoRaMacInitialization+0x3c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80079dc:	2303      	movs	r3, #3
 80079de:	e1c9      	b.n	8007d74 <LoRaMacInitialization+0x3d0>
    }
    // Verify if the region is supported
    if ( RegionIsActive( region ) == false ) {
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 f844 	bl	8009a70 <RegionIsActive>
 80079e8:	4603      	mov	r3, r0
 80079ea:	f083 0301 	eor.w	r3, r3, #1
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <LoRaMacInitialization+0x54>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80079f4:	230a      	movs	r3, #10
 80079f6:	e1bd      	b.n	8007d74 <LoRaMacInitialization+0x3d0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f001 f903 	bl	8008c04 <LoRaMacConfirmQueueInit>

    LoRaMacPrimitives = primitives;
 80079fe:	4ab0      	ldr	r2, [pc, #704]	; (8007cc0 <LoRaMacInitialization+0x31c>)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks = callbacks;
 8007a04:	4aaf      	ldr	r2, [pc, #700]	; (8007cc4 <LoRaMacInitialization+0x320>)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6013      	str	r3, [r2, #0]
    LoRaMacRegion = region;
 8007a0a:	4aaf      	ldr	r2, [pc, #700]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	7013      	strb	r3, [r2, #0]

    if(IsLoRaMacNetworkJoined==false){
 8007a10:	4bae      	ldr	r3, [pc, #696]	; (8007ccc <LoRaMacInitialization+0x328>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	f083 0301 	eor.w	r3, r3, #1
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 813d 	beq.w	8007c9a <LoRaMacInitialization+0x2f6>
    LoRaMacFlags.Value = 0;
 8007a20:	4bab      	ldr	r3, [pc, #684]	; (8007cd0 <LoRaMacInitialization+0x32c>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	701a      	strb	r2, [r3, #0]

    LoRaMacDeviceClass = CLASS_A;
 8007a26:	4bab      	ldr	r3, [pc, #684]	; (8007cd4 <LoRaMacInitialization+0x330>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
    LoRaMacState = LORAMAC_IDLE;
 8007a2c:	4baa      	ldr	r3, [pc, #680]	; (8007cd8 <LoRaMacInitialization+0x334>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]

    JoinRequestTrials = 0;
 8007a32:	4baa      	ldr	r3, [pc, #680]	; (8007cdc <LoRaMacInitialization+0x338>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	701a      	strb	r2, [r3, #0]
    MaxJoinRequestTrials = 1;
 8007a38:	4ba9      	ldr	r3, [pc, #676]	; (8007ce0 <LoRaMacInitialization+0x33c>)
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	701a      	strb	r2, [r3, #0]

    // Reset duty cycle times
    AggregatedLastTxDoneTime = 0;
 8007a3e:	4ba9      	ldr	r3, [pc, #676]	; (8007ce4 <LoRaMacInitialization+0x340>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
    AggregatedTimeOff = 0;
 8007a44:	4ba8      	ldr	r3, [pc, #672]	; (8007ce8 <LoRaMacInitialization+0x344>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007a4a:	230b      	movs	r3, #11
 8007a4c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007a4e:	4b9e      	ldr	r3, [pc, #632]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f107 0214 	add.w	r2, r7, #20
 8007a56:	4611      	mov	r1, r2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f002 f819 	bl	8009a90 <RegionGetPhyParam>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	613b      	str	r3, [r7, #16]
    DutyCycleOn = ( bool ) phyParam.Value;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf14      	ite	ne
 8007a68:	2301      	movne	r3, #1
 8007a6a:	2300      	moveq	r3, #0
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	4b9f      	ldr	r3, [pc, #636]	; (8007cec <LoRaMacInitialization+0x348>)
 8007a70:	701a      	strb	r2, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007a72:	2308      	movs	r3, #8
 8007a74:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007a76:	4b94      	ldr	r3, [pc, #592]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f107 0214 	add.w	r2, r7, #20
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f002 f805 	bl	8009a90 <RegionGetPhyParam>
 8007a86:	4603      	mov	r3, r0
 8007a88:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	b25a      	sxtb	r2, r3
 8007a8e:	4b98      	ldr	r3, [pc, #608]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007a90:	701a      	strb	r2, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8007a92:	2305      	movs	r3, #5
 8007a94:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007a96:	4b8c      	ldr	r3, [pc, #560]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	f107 0214 	add.w	r2, r7, #20
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fff5 	bl	8009a90 <RegionGetPhyParam>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	b25a      	sxtb	r2, r3
 8007aae:	4b90      	ldr	r3, [pc, #576]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007ab0:	705a      	strb	r2, [r3, #1]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007ab6:	4b84      	ldr	r3, [pc, #528]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f107 0214 	add.w	r2, r7, #20
 8007abe:	4611      	mov	r1, r2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 ffe5 	bl	8009a90 <RegionGetPhyParam>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.MaxRxWindow = phyParam.Value;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	4a88      	ldr	r2, [pc, #544]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007ace:	60d3      	str	r3, [r2, #12]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8007ad0:	230d      	movs	r3, #13
 8007ad2:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007ad4:	4b7c      	ldr	r3, [pc, #496]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f107 0214 	add.w	r2, r7, #20
 8007adc:	4611      	mov	r1, r2
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 ffd6 	bl	8009a90 <RegionGetPhyParam>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	4a81      	ldr	r2, [pc, #516]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007aec:	6113      	str	r3, [r2, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8007aee:	230e      	movs	r3, #14
 8007af0:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007af2:	4b75      	ldr	r3, [pc, #468]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	f107 0214 	add.w	r2, r7, #20
 8007afa:	4611      	mov	r1, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 ffc7 	bl	8009a90 <RegionGetPhyParam>
 8007b02:	4603      	mov	r3, r0
 8007b04:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4a79      	ldr	r2, [pc, #484]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007b0a:	6153      	str	r3, [r2, #20]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8007b0c:	230f      	movs	r3, #15
 8007b0e:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007b10:	4b6d      	ldr	r3, [pc, #436]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	f107 0214 	add.w	r2, r7, #20
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f001 ffb8 	bl	8009a90 <RegionGetPhyParam>
 8007b20:	4603      	mov	r3, r0
 8007b22:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	4a72      	ldr	r2, [pc, #456]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007b28:	6193      	str	r3, [r2, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007b2e:	4b66      	ldr	r3, [pc, #408]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f107 0214 	add.w	r2, r7, #20
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 ffa9 	bl	8009a90 <RegionGetPhyParam>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4a6a      	ldr	r2, [pc, #424]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007b46:	61d3      	str	r3, [r2, #28]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8007b48:	2313      	movs	r3, #19
 8007b4a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007b4c:	4b5e      	ldr	r3, [pc, #376]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f107 0214 	add.w	r2, r7, #20
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 ff9a 	bl	8009a90 <RegionGetPhyParam>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	4b62      	ldr	r3, [pc, #392]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8007b6a:	2314      	movs	r3, #20
 8007b6c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007b6e:	4b56      	ldr	r3, [pc, #344]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	f107 0214 	add.w	r2, r7, #20
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 ff89 	bl	8009a90 <RegionGetPhyParam>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4a5a      	ldr	r2, [pc, #360]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007b86:	6253      	str	r3, [r2, #36]	; 0x24

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8007b88:	2315      	movs	r3, #21
 8007b8a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007b8c:	4b4e      	ldr	r3, [pc, #312]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f107 0214 	add.w	r2, r7, #20
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 ff7a 	bl	8009a90 <RegionGetPhyParam>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	4b52      	ldr	r3, [pc, #328]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8007baa:	231a      	movs	r3, #26
 8007bac:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007bae:	4b46      	ldr	r3, [pc, #280]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	f107 0214 	add.w	r2, r7, #20
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 ff69 	bl	8009a90 <RegionGetPhyParam>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	4b4a      	ldr	r3, [pc, #296]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007bc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8007bcc:	231b      	movs	r3, #27
 8007bce:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007bd0:	4b3d      	ldr	r3, [pc, #244]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	f107 0214 	add.w	r2, r7, #20
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f001 ff58 	bl	8009a90 <RegionGetPhyParam>
 8007be0:	4603      	mov	r3, r0
 8007be2:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007bea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8007bee:	231c      	movs	r3, #28
 8007bf0:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007bf2:	4b35      	ldr	r3, [pc, #212]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	f107 0214 	add.w	r2, r7, #20
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f001 ff47 	bl	8009a90 <RegionGetPhyParam>
 8007c02:	4603      	mov	r3, r0
 8007c04:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.MaxEirp = phyParam.fValue;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4a39      	ldr	r2, [pc, #228]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c0a:	6313      	str	r3, [r2, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8007c0c:	231d      	movs	r3, #29
 8007c0e:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c10:	4b2d      	ldr	r3, [pc, #180]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f107 0214 	add.w	r2, r7, #20
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 ff38 	bl	8009a90 <RegionGetPhyParam>
 8007c20:	4603      	mov	r3, r0
 8007c22:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.AntennaGain = phyParam.fValue;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4a32      	ldr	r2, [pc, #200]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c28:	6353      	str	r3, [r2, #52]	; 0x34

    RegionInitDefaults( LoRaMacRegion, INIT_TYPE_INIT );
 8007c2a:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <LoRaMacInitialization+0x324>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 ff57 	bl	8009ae4 <RegionInitDefaults>

    // Init parameters which are not set in function ResetMacParameters
    LoRaMacParams.RepeaterSupport = false;
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacParamsDefaults.ChannelsNbRep = 1;
 8007c3e:	4b2c      	ldr	r3, [pc, #176]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2020 	strb.w	r2, [r3, #32]
    LoRaMacParamsDefaults.SystemMaxRxError = 10;
 8007c46:	4b2a      	ldr	r3, [pc, #168]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c48:	220a      	movs	r2, #10
 8007c4a:	605a      	str	r2, [r3, #4]
    LoRaMacParamsDefaults.MinRxSymbols = 6;
 8007c4c:	4b28      	ldr	r3, [pc, #160]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c4e:	2206      	movs	r2, #6
 8007c50:	721a      	strb	r2, [r3, #8]

    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 8007c52:	4b27      	ldr	r3, [pc, #156]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c58:	6053      	str	r3, [r2, #4]
    LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols;
 8007c5a:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c5c:	7a1a      	ldrb	r2, [r3, #8]
 8007c5e:	4b25      	ldr	r3, [pc, #148]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c60:	721a      	strb	r2, [r3, #8]
    LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 8007c62:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	4a23      	ldr	r2, [pc, #140]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c68:	60d3      	str	r3, [r2, #12]
    LoRaMacParams.ReceiveDelay1 = LoRaMacParamsDefaults.ReceiveDelay1;
 8007c6a:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	4a21      	ldr	r2, [pc, #132]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c70:	6113      	str	r3, [r2, #16]
    LoRaMacParams.ReceiveDelay2 = LoRaMacParamsDefaults.ReceiveDelay2;
 8007c72:	4b1f      	ldr	r3, [pc, #124]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c78:	6153      	str	r3, [r2, #20]
    LoRaMacParams.JoinAcceptDelay1 = LoRaMacParamsDefaults.JoinAcceptDelay1;
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c80:	6193      	str	r3, [r2, #24]
    LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 8007c82:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4a1b      	ldr	r2, [pc, #108]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c88:	61d3      	str	r3, [r2, #28]
    LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 8007c8a:	4b19      	ldr	r3, [pc, #100]	; (8007cf0 <LoRaMacInitialization+0x34c>)
 8007c8c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007c90:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <LoRaMacInitialization+0x350>)
 8007c92:	f883 2020 	strb.w	r2, [r3, #32]

      ResetMacParameters( );
 8007c96:	f7ff fa03 	bl	80070a0 <ResetMacParameters>
    }

    // Initialize timers
    TimerInit( &MacStateCheckTimer, OnMacStateCheckTimerEvent );
 8007c9a:	4917      	ldr	r1, [pc, #92]	; (8007cf8 <LoRaMacInitialization+0x354>)
 8007c9c:	4817      	ldr	r0, [pc, #92]	; (8007cfc <LoRaMacInitialization+0x358>)
 8007c9e:	f007 fffd 	bl	800fc9c <TimerInit>
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007ca2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ca6:	4815      	ldr	r0, [pc, #84]	; (8007cfc <LoRaMacInitialization+0x358>)
 8007ca8:	f008 fa16 	bl	80100d8 <TimerSetValue>

    TimerInit( &TxDelayedTimer, OnTxDelayedTimerEvent );
 8007cac:	4914      	ldr	r1, [pc, #80]	; (8007d00 <LoRaMacInitialization+0x35c>)
 8007cae:	4815      	ldr	r0, [pc, #84]	; (8007d04 <LoRaMacInitialization+0x360>)
 8007cb0:	f007 fff4 	bl	800fc9c <TimerInit>
    TimerInit( &RxWindowTimer1, OnRxWindow1TimerEvent );
 8007cb4:	4914      	ldr	r1, [pc, #80]	; (8007d08 <LoRaMacInitialization+0x364>)
 8007cb6:	4815      	ldr	r0, [pc, #84]	; (8007d0c <LoRaMacInitialization+0x368>)
 8007cb8:	f007 fff0 	bl	800fc9c <TimerInit>
 8007cbc:	e028      	b.n	8007d10 <LoRaMacInitialization+0x36c>
 8007cbe:	bf00      	nop
 8007cc0:	20000494 	.word	0x20000494
 8007cc4:	20000498 	.word	0x20000498
 8007cc8:	20000110 	.word	0x20000110
 8007ccc:	20000359 	.word	0x20000359
 8007cd0:	20000a18 	.word	0x20000a18
 8007cd4:	20000148 	.word	0x20000148
 8007cd8:	2000047c 	.word	0x2000047c
 8007cdc:	20000a14 	.word	0x20000a14
 8007ce0:	200009bc 	.word	0x200009bc
 8007ce4:	2000046c 	.word	0x2000046c
 8007ce8:	20000470 	.word	0x20000470
 8007cec:	20000474 	.word	0x20000474
 8007cf0:	20000a1c 	.word	0x20000a1c
 8007cf4:	20000a78 	.word	0x20000a78
 8007cf8:	08005ab9 	.word	0x08005ab9
 8007cfc:	20000480 	.word	0x20000480
 8007d00:	08005f99 	.word	0x08005f99
 8007d04:	20000a5c 	.word	0x20000a5c
 8007d08:	08006049 	.word	0x08006049
 8007d0c:	20000a00 	.word	0x20000a00
    TimerInit( &RxWindowTimer2, OnRxWindow2TimerEvent );
 8007d10:	491a      	ldr	r1, [pc, #104]	; (8007d7c <LoRaMacInitialization+0x3d8>)
 8007d12:	481b      	ldr	r0, [pc, #108]	; (8007d80 <LoRaMacInitialization+0x3dc>)
 8007d14:	f007 ffc2 	bl	800fc9c <TimerInit>
    TimerInit( &AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8007d18:	491a      	ldr	r1, [pc, #104]	; (8007d84 <LoRaMacInitialization+0x3e0>)
 8007d1a:	481b      	ldr	r0, [pc, #108]	; (8007d88 <LoRaMacInitialization+0x3e4>)
 8007d1c:	f007 ffbe 	bl	800fc9c <TimerInit>

    // Store the current initialization time
    LoRaMacInitializationTime = TimerGetCurrentTime( );
 8007d20:	f008 f9f3 	bl	801010a <TimerGetCurrentTime>
 8007d24:	4603      	mov	r3, r0
 8007d26:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <LoRaMacInitialization+0x3e8>)
 8007d28:	6013      	str	r3, [r2, #0]

    // Initialize Radio driver
    RadioEvents.TxDone = OnRadioTxDone;
 8007d2a:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <LoRaMacInitialization+0x3ec>)
 8007d2c:	4a19      	ldr	r2, [pc, #100]	; (8007d94 <LoRaMacInitialization+0x3f0>)
 8007d2e:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRadioRxDone;
 8007d30:	4b17      	ldr	r3, [pc, #92]	; (8007d90 <LoRaMacInitialization+0x3ec>)
 8007d32:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <LoRaMacInitialization+0x3f4>)
 8007d34:	609a      	str	r2, [r3, #8]
    RadioEvents.RxError = OnRadioRxError;
 8007d36:	4b16      	ldr	r3, [pc, #88]	; (8007d90 <LoRaMacInitialization+0x3ec>)
 8007d38:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <LoRaMacInitialization+0x3f8>)
 8007d3a:	611a      	str	r2, [r3, #16]
    RadioEvents.TxTimeout = OnRadioTxTimeout;
 8007d3c:	4b14      	ldr	r3, [pc, #80]	; (8007d90 <LoRaMacInitialization+0x3ec>)
 8007d3e:	4a18      	ldr	r2, [pc, #96]	; (8007da0 <LoRaMacInitialization+0x3fc>)
 8007d40:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRadioRxTimeout;
 8007d42:	4b13      	ldr	r3, [pc, #76]	; (8007d90 <LoRaMacInitialization+0x3ec>)
 8007d44:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <LoRaMacInitialization+0x400>)
 8007d46:	60da      	str	r2, [r3, #12]

    Radio.Init( &RadioEvents );
 8007d48:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <LoRaMacInitialization+0x404>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4810      	ldr	r0, [pc, #64]	; (8007d90 <LoRaMacInitialization+0x3ec>)
 8007d4e:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
 8007d50:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <LoRaMacInitialization+0x404>)
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	4798      	blx	r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f008 fabf 	bl	80102dc <srand1>

    PublicNetwork = true;
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <LoRaMacInitialization+0x408>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	701a      	strb	r2, [r3, #0]
    Radio.SetPublicNetwork(true);
 8007d64:	4b10      	ldr	r3, [pc, #64]	; (8007da8 <LoRaMacInitialization+0x404>)
 8007d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d68:	2001      	movs	r0, #1
 8007d6a:	4798      	blx	r3
    Radio.Sleep( );
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <LoRaMacInitialization+0x404>)
 8007d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d70:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	080060e5 	.word	0x080060e5
 8007d80:	200009a8 	.word	0x200009a8
 8007d84:	080061dd 	.word	0x080061dd
 8007d88:	20000ad0 	.word	0x20000ad0
 8007d8c:	20000478 	.word	0x20000478
 8007d90:	2000049c 	.word	0x2000049c
 8007d94:	08004dc1 	.word	0x08004dc1
 8007d98:	08004f85 	.word	0x08004f85
 8007d9c:	08005921 	.word	0x08005921
 8007da0:	080058dd 	.word	0x080058dd
 8007da4:	080059ed 	.word	0x080059ed
 8007da8:	08012794 	.word	0x08012794
 8007dac:	20000149 	.word	0x20000149

08007db0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t *txInfo )
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b08d      	sub	sp, #52	; 0x34
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
    AdrNextParams_t adrNext;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8007dbc:	4b42      	ldr	r3, [pc, #264]	; (8007ec8 <LoRaMacQueryTxPossible+0x118>)
 8007dbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007dc2:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8007dc4:	4b40      	ldr	r3, [pc, #256]	; (8007ec8 <LoRaMacQueryTxPossible+0x118>)
 8007dc6:	f993 3000 	ldrsb.w	r3, [r3]
 8007dca:	73bb      	strb	r3, [r7, #14]
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 8007dcc:	4b3f      	ldr	r3, [pc, #252]	; (8007ecc <LoRaMacQueryTxPossible+0x11c>)
 8007dce:	781a      	ldrb	r2, [r3, #0]
 8007dd0:	4b3f      	ldr	r3, [pc, #252]	; (8007ed0 <LoRaMacQueryTxPossible+0x120>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ( txInfo == NULL ) {
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <LoRaMacQueryTxPossible+0x34>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e06d      	b.n	8007ec0 <LoRaMacQueryTxPossible+0x110>
    }

    // Setup ADR request
    adrNext.UpdateChanMask = false;
 8007de4:	2300      	movs	r3, #0
 8007de6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = AdrCtrlOn;
 8007de8:	4b3a      	ldr	r3, [pc, #232]	; (8007ed4 <LoRaMacQueryTxPossible+0x124>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = AdrAckCounter;
 8007dee:	4b3a      	ldr	r3, [pc, #232]	; (8007ed8 <LoRaMacQueryTxPossible+0x128>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	61fb      	str	r3, [r7, #28]
    adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8007df4:	4b39      	ldr	r3, [pc, #228]	; (8007edc <LoRaMacQueryTxPossible+0x12c>)
 8007df6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007dfa:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 8007dfe:	4b37      	ldr	r3, [pc, #220]	; (8007edc <LoRaMacQueryTxPossible+0x12c>)
 8007e00:	f993 3000 	ldrsb.w	r3, [r3]
 8007e04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007e08:	4b34      	ldr	r3, [pc, #208]	; (8007edc <LoRaMacQueryTxPossible+0x12c>)
 8007e0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    RegionAdrNext( LoRaMacRegion, &adrNext, &datarate, &txPower, &AdrAckCounter );
 8007e12:	4b33      	ldr	r3, [pc, #204]	; (8007ee0 <LoRaMacQueryTxPossible+0x130>)
 8007e14:	7818      	ldrb	r0, [r3, #0]
 8007e16:	f107 030e 	add.w	r3, r7, #14
 8007e1a:	f107 020f 	add.w	r2, r7, #15
 8007e1e:	f107 0118 	add.w	r1, r7, #24
 8007e22:	4c2d      	ldr	r4, [pc, #180]	; (8007ed8 <LoRaMacQueryTxPossible+0x128>)
 8007e24:	9400      	str	r4, [sp, #0]
 8007e26:	f001 feae 	bl	8009b86 <RegionAdrNext>

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007e2a:	4b2c      	ldr	r3, [pc, #176]	; (8007edc <LoRaMacQueryTxPossible+0x12c>)
 8007e2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e30:	75bb      	strb	r3, [r7, #22]
    getPhy.Datarate = datarate;
 8007e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e36:	757b      	strb	r3, [r7, #21]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007e38:	2309      	movs	r3, #9
 8007e3a:	753b      	strb	r3, [r7, #20]

    // Change request in case repeater is supported
    if( LoRaMacParams.RepeaterSupport == true ) {
 8007e3c:	4b27      	ldr	r3, [pc, #156]	; (8007edc <LoRaMacQueryTxPossible+0x12c>)
 8007e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <LoRaMacQueryTxPossible+0x9a>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007e46:	230a      	movs	r3, #10
 8007e48:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007e4a:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <LoRaMacQueryTxPossible+0x130>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f107 0214 	add.w	r2, r7, #20
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f001 fe1b 	bl	8009a90 <RegionGetPhyParam>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	613b      	str	r3, [r7, #16]
    txInfo->CurrentPayloadSize = phyParam.Value;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	705a      	strb	r2, [r3, #1]

    // Verify if the fOpts fit into the maximum payload
    if ( txInfo->CurrentPayloadSize >= fOptLen ) {
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d808      	bhi.n	8007e84 <LoRaMacQueryTxPossible+0xd4>
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize - fOptLen;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	785a      	ldrb	r2, [r3, #1]
 8007e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	e00c      	b.n	8007e9e <LoRaMacQueryTxPossible+0xee>
    } else {
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	785a      	ldrb	r2, [r3, #1]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	701a      	strb	r2, [r3, #0]
        // The fOpts don't fit into the maximum payload. Omit the MAC commands to
        // ensure that another uplink is possible.
        fOptLen = 0;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        MacCommandsBufferIndex = 0;
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <LoRaMacQueryTxPossible+0x11c>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
        MacCommandsBufferToRepeatIndex = 0;
 8007e98:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <LoRaMacQueryTxPossible+0x120>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if the fOpts and the payload fit into the maximum payload
    if ( ValidatePayloadLength( size, datarate, fOptLen ) == false ) {
 8007e9e:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8007ea2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fa2d 	bl	8006308 <ValidatePayloadLength>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f083 0301 	eor.w	r3, r3, #1
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <LoRaMacQueryTxPossible+0x10e>
        return LORAMAC_STATUS_LENGTH_ERROR;
 8007eba:	2308      	movs	r3, #8
 8007ebc:	e000      	b.n	8007ec0 <LoRaMacQueryTxPossible+0x110>
    }
    return LORAMAC_STATUS_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	372c      	adds	r7, #44	; 0x2c
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd90      	pop	{r4, r7, pc}
 8007ec8:	20000a1c 	.word	0x20000a1c
 8007ecc:	20000363 	.word	0x20000363
 8007ed0:	20000364 	.word	0x20000364
 8007ed4:	2000035a 	.word	0x2000035a
 8007ed8:	2000035c 	.word	0x2000035c
 8007edc:	20000a78 	.word	0x20000a78
 8007ee0:	20000110 	.word	0x20000110

08007ee4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if ( mibGet == NULL ) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <LoRaMacMibGetRequestConfirm+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e10d      	b.n	8008116 <LoRaMacMibGetRequestConfirm+0x232>
    }

    switch ( mibGet->Type ) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b1e      	cmp	r3, #30
 8007f00:	f200 8105 	bhi.w	800810e <LoRaMacMibGetRequestConfirm+0x22a>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <LoRaMacMibGetRequestConfirm+0x28>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f89 	.word	0x08007f89
 8007f10:	08007f93 	.word	0x08007f93
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007fa7 	.word	0x08007fa7
 8007f1c:	08007fb1 	.word	0x08007fb1
 8007f20:	08007fbb 	.word	0x08007fbb
 8007f24:	08007fc3 	.word	0x08007fc3
 8007f28:	08007fcb 	.word	0x08007fcb
 8007f2c:	08007fd5 	.word	0x08007fd5
 8007f30:	08007fe1 	.word	0x08007fe1
 8007f34:	08008001 	.word	0x08008001
 8007f38:	08008013 	.word	0x08008013
 8007f3c:	08008045 	.word	0x08008045
 8007f40:	08008025 	.word	0x08008025
 8007f44:	08008065 	.word	0x08008065
 8007f48:	08008071 	.word	0x08008071
 8007f4c:	0800807b 	.word	0x0800807b
 8007f50:	08008085 	.word	0x08008085
 8007f54:	0800808f 	.word	0x0800808f
 8007f58:	08008099 	.word	0x08008099
 8007f5c:	080080a3 	.word	0x080080a3
 8007f60:	080080af 	.word	0x080080af
 8007f64:	080080c7 	.word	0x080080c7
 8007f68:	080080bb 	.word	0x080080bb
 8007f6c:	080080d3 	.word	0x080080d3
 8007f70:	080080dd 	.word	0x080080dd
 8007f74:	080080e7 	.word	0x080080e7
 8007f78:	0800810f 	.word	0x0800810f
 8007f7c:	080080f1 	.word	0x080080f1
 8007f80:	080080fb 	.word	0x080080fb
 8007f84:	08008105 	.word	0x08008105
        case MIB_DEVICE_CLASS: {
            mibGet->Param.Class = LoRaMacDeviceClass;
 8007f88:	4b65      	ldr	r3, [pc, #404]	; (8008120 <LoRaMacMibGetRequestConfirm+0x23c>)
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	711a      	strb	r2, [r3, #4]
            break;
 8007f90:	e0c0      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NETWORK_JOINED: {
            mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 8007f92:	4b64      	ldr	r3, [pc, #400]	; (8008124 <LoRaMacMibGetRequestConfirm+0x240>)
 8007f94:	781a      	ldrb	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	711a      	strb	r2, [r3, #4]
            break;
 8007f9a:	e0bb      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_ADR: {
            mibGet->Param.AdrEnable = AdrCtrlOn;
 8007f9c:	4b62      	ldr	r3, [pc, #392]	; (8008128 <LoRaMacMibGetRequestConfirm+0x244>)
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	711a      	strb	r2, [r3, #4]
            break;
 8007fa4:	e0b6      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NET_ID: {
            mibGet->Param.NetID = LoRaMacNetID;
 8007fa6:	4b61      	ldr	r3, [pc, #388]	; (800812c <LoRaMacMibGetRequestConfirm+0x248>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	605a      	str	r2, [r3, #4]
            break;
 8007fae:	e0b1      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_DEV_ADDR: {
            mibGet->Param.DevAddr = LoRaMacDevAddr;
 8007fb0:	4b5f      	ldr	r3, [pc, #380]	; (8008130 <LoRaMacMibGetRequestConfirm+0x24c>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	605a      	str	r2, [r3, #4]
            break;
 8007fb8:	e0ac      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NWK_SKEY: {
            mibGet->Param.NwkSKey = LoRaMacNwkSKey;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a5d      	ldr	r2, [pc, #372]	; (8008134 <LoRaMacMibGetRequestConfirm+0x250>)
 8007fbe:	605a      	str	r2, [r3, #4]
            break;
 8007fc0:	e0a8      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_APP_SKEY: {
            mibGet->Param.AppSKey = LoRaMacAppSKey;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a5c      	ldr	r2, [pc, #368]	; (8008138 <LoRaMacMibGetRequestConfirm+0x254>)
 8007fc6:	605a      	str	r2, [r3, #4]
            break;
 8007fc8:	e0a4      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_PUBLIC_NETWORK: {
            mibGet->Param.EnablePublicNetwork = PublicNetwork;
 8007fca:	4b5c      	ldr	r3, [pc, #368]	; (800813c <LoRaMacMibGetRequestConfirm+0x258>)
 8007fcc:	781a      	ldrb	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	711a      	strb	r2, [r3, #4]
            break;
 8007fd2:	e09f      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_REPEATER_SUPPORT: {
            mibGet->Param.EnableRepeaterSupport = LoRaMacParams.RepeaterSupport;
 8007fd4:	4b5a      	ldr	r3, [pc, #360]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8007fd6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	711a      	strb	r2, [r3, #4]
            break;
 8007fde:	e099      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS: {
            getPhy.Attribute = PHY_CHANNELS;
 8007fe0:	2319      	movs	r3, #25
 8007fe2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007fe4:	4b57      	ldr	r3, [pc, #348]	; (8008144 <LoRaMacMibGetRequestConfirm+0x260>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	f107 0210 	add.w	r2, r7, #16
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fd4e 	bl	8009a90 <RegionGetPhyParam>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	605a      	str	r2, [r3, #4]
            break;
 8007ffe:	e089      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RX2_CHANNEL: {
            mibGet->Param.Rx2Channel = LoRaMacParams.Rx2Channel;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a4f      	ldr	r2, [pc, #316]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008004:	3304      	adds	r3, #4
 8008006:	3224      	adds	r2, #36	; 0x24
 8008008:	e892 0003 	ldmia.w	r2, {r0, r1}
 800800c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8008010:	e080      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RX2_DEFAULT_CHANNEL: {
            mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a4c      	ldr	r2, [pc, #304]	; (8008148 <LoRaMacMibGetRequestConfirm+0x264>)
 8008016:	3304      	adds	r3, #4
 8008018:	3224      	adds	r2, #36	; 0x24
 800801a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800801e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8008022:	e077      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_MASK: {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8008024:	2317      	movs	r3, #23
 8008026:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008028:	4b46      	ldr	r3, [pc, #280]	; (8008144 <LoRaMacMibGetRequestConfirm+0x260>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	f107 0210 	add.w	r2, r7, #16
 8008030:	4611      	mov	r1, r2
 8008032:	4618      	mov	r0, r3
 8008034:	f001 fd2c 	bl	8009a90 <RegionGetPhyParam>
 8008038:	4603      	mov	r3, r0
 800803a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	605a      	str	r2, [r3, #4]
            break;
 8008042:	e067      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_MASK: {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8008044:	2316      	movs	r3, #22
 8008046:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008048:	4b3e      	ldr	r3, [pc, #248]	; (8008144 <LoRaMacMibGetRequestConfirm+0x260>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	f107 0210 	add.w	r2, r7, #16
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fd1c 	bl	8009a90 <RegionGetPhyParam>
 8008058:	4603      	mov	r3, r0
 800805a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	605a      	str	r2, [r3, #4]
            break;
 8008062:	e057      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_NB_REP: {
            mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008066:	f893 2020 	ldrb.w	r2, [r3, #32]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	711a      	strb	r2, [r3, #4]
            break;
 800806e:	e051      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MAX_RX_WINDOW_DURATION: {
            mibGet->Param.MaxRxWindow = LoRaMacParams.MaxRxWindow;
 8008070:	4b33      	ldr	r3, [pc, #204]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	605a      	str	r2, [r3, #4]
            break;
 8008078:	e04c      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RECEIVE_DELAY_1: {
            mibGet->Param.ReceiveDelay1 = LoRaMacParams.ReceiveDelay1;
 800807a:	4b31      	ldr	r3, [pc, #196]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]
            break;
 8008082:	e047      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RECEIVE_DELAY_2: {
            mibGet->Param.ReceiveDelay2 = LoRaMacParams.ReceiveDelay2;
 8008084:	4b2e      	ldr	r3, [pc, #184]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008086:	695a      	ldr	r2, [r3, #20]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	605a      	str	r2, [r3, #4]
            break;
 800808c:	e042      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_JOIN_ACCEPT_DELAY_1: {
            mibGet->Param.JoinAcceptDelay1 = LoRaMacParams.JoinAcceptDelay1;
 800808e:	4b2c      	ldr	r3, [pc, #176]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008090:	699a      	ldr	r2, [r3, #24]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	605a      	str	r2, [r3, #4]
            break;
 8008096:	e03d      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_JOIN_ACCEPT_DELAY_2: {
            mibGet->Param.JoinAcceptDelay2 = LoRaMacParams.JoinAcceptDelay2;
 8008098:	4b29      	ldr	r3, [pc, #164]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]
            break;
 80080a0:	e038      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE: {
            mibGet->Param.ChannelsDefaultDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 80080a2:	4b29      	ldr	r3, [pc, #164]	; (8008148 <LoRaMacMibGetRequestConfirm+0x264>)
 80080a4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	711a      	strb	r2, [r3, #4]
            break;
 80080ac:	e032      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DATARATE: {
            mibGet->Param.ChannelsDatarate = LoRaMacParams.ChannelsDatarate;
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 80080b0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	711a      	strb	r2, [r3, #4]
            break;
 80080b8:	e02c      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER: {
            mibGet->Param.ChannelsDefaultTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 80080ba:	4b23      	ldr	r3, [pc, #140]	; (8008148 <LoRaMacMibGetRequestConfirm+0x264>)
 80080bc:	f993 2000 	ldrsb.w	r2, [r3]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	711a      	strb	r2, [r3, #4]
            break;
 80080c4:	e026      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_TX_POWER: {
            mibGet->Param.ChannelsTxPower = LoRaMacParams.ChannelsTxPower;
 80080c6:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 80080c8:	f993 2000 	ldrsb.w	r2, [r3]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	711a      	strb	r2, [r3, #4]
            break;
 80080d0:	e020      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_UPLINK_COUNTER: {
            mibGet->Param.UpLinkCounter = UpLinkCounter;
 80080d2:	4b1e      	ldr	r3, [pc, #120]	; (800814c <LoRaMacMibGetRequestConfirm+0x268>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]
            break;
 80080da:	e01b      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_DOWNLINK_COUNTER: {
            mibGet->Param.DownLinkCounter = DownLinkCounter;
 80080dc:	4b1c      	ldr	r3, [pc, #112]	; (8008150 <LoRaMacMibGetRequestConfirm+0x26c>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	605a      	str	r2, [r3, #4]
            break;
 80080e4:	e016      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MULTICAST_CHANNEL: {
            mibGet->Param.MulticastList = MulticastChannels;
 80080e6:	4b1b      	ldr	r3, [pc, #108]	; (8008154 <LoRaMacMibGetRequestConfirm+0x270>)
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]
            break;
 80080ee:	e011      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_SYSTEM_MAX_RX_ERROR: {
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 80080f0:	4b13      	ldr	r3, [pc, #76]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	605a      	str	r2, [r3, #4]
            break;
 80080f8:	e00c      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MIN_RX_SYMBOLS: {
            mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 80080fa:	4b11      	ldr	r3, [pc, #68]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 80080fc:	7a1a      	ldrb	r2, [r3, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	711a      	strb	r2, [r3, #4]
            break;
 8008102:	e007      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_ANTENNA_GAIN: {
            mibGet->Param.AntennaGain = LoRaMacParams.AntennaGain;
 8008104:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <LoRaMacMibGetRequestConfirm+0x25c>)
 8008106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	605a      	str	r2, [r3, #4]
            break;
 800810c:	e002      	b.n	8008114 <LoRaMacMibGetRequestConfirm+0x230>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800810e:	2302      	movs	r3, #2
 8008110:	75fb      	strb	r3, [r7, #23]
            break;
 8008112:	bf00      	nop
    }

    return status;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000148 	.word	0x20000148
 8008124:	20000359 	.word	0x20000359
 8008128:	2000035a 	.word	0x2000035a
 800812c:	2000013c 	.word	0x2000013c
 8008130:	20000140 	.word	0x20000140
 8008134:	2000011c 	.word	0x2000011c
 8008138:	2000012c 	.word	0x2000012c
 800813c:	20000149 	.word	0x20000149
 8008140:	20000a78 	.word	0x20000a78
 8008144:	20000110 	.word	0x20000110
 8008148:	20000a1c 	.word	0x20000a1c
 800814c:	20000350 	.word	0x20000350
 8008150:	20000354 	.word	0x20000354
 8008154:	20000144 	.word	0x20000144

08008158 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b089      	sub	sp, #36	; 0x24
 800815c:	af02      	add	r7, sp, #8
 800815e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if ( mibSet == NULL ) {
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <LoRaMacMibSetRequestConfirm+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800816a:	2303      	movs	r3, #3
 800816c:	e235      	b.n	80085da <LoRaMacMibSetRequestConfirm+0x482>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 800816e:	4bb1      	ldr	r3, [pc, #708]	; (8008434 <LoRaMacMibSetRequestConfirm+0x2dc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <LoRaMacMibSetRequestConfirm+0x26>
        return LORAMAC_STATUS_BUSY;
 800817a:	2301      	movs	r3, #1
 800817c:	e22d      	b.n	80085da <LoRaMacMibSetRequestConfirm+0x482>
    }

    switch ( mibSet->Type ) {
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b1e      	cmp	r3, #30
 8008184:	f200 8220 	bhi.w	80085c8 <LoRaMacMibSetRequestConfirm+0x470>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <LoRaMacMibSetRequestConfirm+0x38>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	0800820d 	.word	0x0800820d
 8008194:	0800821d 	.word	0x0800821d
 8008198:	08008227 	.word	0x08008227
 800819c:	08008231 	.word	0x08008231
 80081a0:	0800823b 	.word	0x0800823b
 80081a4:	08008245 	.word	0x08008245
 80081a8:	08008263 	.word	0x08008263
 80081ac:	08008281 	.word	0x08008281
 80081b0:	08008297 	.word	0x08008297
 80081b4:	080085c9 	.word	0x080085c9
 80081b8:	080082a3 	.word	0x080082a3
 80081bc:	08008377 	.word	0x08008377
 80081c0:	080083e3 	.word	0x080083e3
 80081c4:	080083b5 	.word	0x080083b5
 80081c8:	08008411 	.word	0x08008411
 80081cc:	0800847d 	.word	0x0800847d
 80081d0:	08008487 	.word	0x08008487
 80081d4:	08008491 	.word	0x08008491
 80081d8:	0800849b 	.word	0x0800849b
 80081dc:	080084a5 	.word	0x080084a5
 80081e0:	080084af 	.word	0x080084af
 80081e4:	080084dd 	.word	0x080084dd
 80081e8:	08008539 	.word	0x08008539
 80081ec:	0800850b 	.word	0x0800850b
 80081f0:	08008567 	.word	0x08008567
 80081f4:	08008571 	.word	0x08008571
 80081f8:	080085a9 	.word	0x080085a9
 80081fc:	080085b9 	.word	0x080085b9
 8008200:	0800857b 	.word	0x0800857b
 8008204:	0800858d 	.word	0x0800858d
 8008208:	0800859f 	.word	0x0800859f
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	791b      	ldrb	r3, [r3, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe f829 	bl	8006268 <SwitchClass>
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
            break;
 800821a:	e1dd      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NETWORK_JOINED:
        {
            IsLoRaMacNetworkJoined = mibSet->Param.IsNetworkJoined;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	791a      	ldrb	r2, [r3, #4]
 8008220:	4b85      	ldr	r3, [pc, #532]	; (8008438 <LoRaMacMibSetRequestConfirm+0x2e0>)
 8008222:	701a      	strb	r2, [r3, #0]
            break;
 8008224:	e1d8      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_ADR: {
            AdrCtrlOn = mibSet->Param.AdrEnable;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	791a      	ldrb	r2, [r3, #4]
 800822a:	4b84      	ldr	r3, [pc, #528]	; (800843c <LoRaMacMibSetRequestConfirm+0x2e4>)
 800822c:	701a      	strb	r2, [r3, #0]
            break;
 800822e:	e1d3      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NET_ID: {
            LoRaMacNetID = mibSet->Param.NetID;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	4a82      	ldr	r2, [pc, #520]	; (8008440 <LoRaMacMibSetRequestConfirm+0x2e8>)
 8008236:	6013      	str	r3, [r2, #0]
            break;
 8008238:	e1ce      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_DEV_ADDR: {
            LoRaMacDevAddr = mibSet->Param.DevAddr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	4a81      	ldr	r2, [pc, #516]	; (8008444 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8008240:	6013      	str	r3, [r2, #0]
            break;
 8008242:	e1c9      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NWK_SKEY: {
            if ( mibSet->Param.NwkSKey != NULL ) {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d007      	beq.n	800825c <LoRaMacMibSetRequestConfirm+0x104>
                memcpy1( LoRaMacNwkSKey, mibSet->Param.NwkSKey,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	2210      	movs	r2, #16
 8008252:	4619      	mov	r1, r3
 8008254:	487c      	ldr	r0, [pc, #496]	; (8008448 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8008256:	f008 f866 	bl	8010326 <memcpy1>
                         sizeof( LoRaMacNwkSKey ) );
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800825a:	e1bd      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800825c:	2303      	movs	r3, #3
 800825e:	75fb      	strb	r3, [r7, #23]
            break;
 8008260:	e1ba      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_APP_SKEY: {
            if ( mibSet->Param.AppSKey != NULL ) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <LoRaMacMibSetRequestConfirm+0x122>
                memcpy1( LoRaMacAppSKey, mibSet->Param.AppSKey,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2210      	movs	r2, #16
 8008270:	4619      	mov	r1, r3
 8008272:	4876      	ldr	r0, [pc, #472]	; (800844c <LoRaMacMibSetRequestConfirm+0x2f4>)
 8008274:	f008 f857 	bl	8010326 <memcpy1>
                         sizeof( LoRaMacAppSKey ) );
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008278:	e1ae      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800827a:	2303      	movs	r3, #3
 800827c:	75fb      	strb	r3, [r7, #23]
            break;
 800827e:	e1ab      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_PUBLIC_NETWORK: {
            PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	791a      	ldrb	r2, [r3, #4]
 8008284:	4b72      	ldr	r3, [pc, #456]	; (8008450 <LoRaMacMibSetRequestConfirm+0x2f8>)
 8008286:	701a      	strb	r2, [r3, #0]
            Radio.SetPublicNetwork(mibSet->Param.EnablePublicNetwork);
 8008288:	4b72      	ldr	r3, [pc, #456]	; (8008454 <LoRaMacMibSetRequestConfirm+0x2fc>)
 800828a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	7912      	ldrb	r2, [r2, #4]
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
            break;
 8008294:	e1a0      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_REPEATER_SUPPORT: {
             LoRaMacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791a      	ldrb	r2, [r3, #4]
 800829a:	4b6f      	ldr	r3, [pc, #444]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 800829c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            break;
 80082a0:	e19a      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RX2_CHANNEL: {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	7a1b      	ldrb	r3, [r3, #8]
 80082a6:	b25b      	sxtb	r3, r3
 80082a8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80082aa:	4b6b      	ldr	r3, [pc, #428]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 80082ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80082b0:	727b      	strb	r3, [r7, #9]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true ) {
 80082b2:	4b6a      	ldr	r3, [pc, #424]	; (800845c <LoRaMacMibSetRequestConfirm+0x304>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f107 0108 	add.w	r1, r7, #8
 80082ba:	2206      	movs	r2, #6
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fc26 	bl	8009b0e <RegionVerify>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d053      	beq.n	8008370 <LoRaMacMibSetRequestConfirm+0x218>
                memcpy(&LoRaMacParams.Rx2Channel, &mibSet->Param.Rx2Channel, sizeof(LoRaMacParams.Rx2Channel));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	3304      	adds	r3, #4
 80082cc:	2208      	movs	r2, #8
 80082ce:	4619      	mov	r1, r3
 80082d0:	4863      	ldr	r0, [pc, #396]	; (8008460 <LoRaMacMibSetRequestConfirm+0x308>)
 80082d2:	f009 fe2f 	bl	8011f34 <memcpy>
                if ( ( LoRaMacDeviceClass == CLASS_C ) && ( IsLoRaMacNetworkJoined == true ) ) {
 80082d6:	4b63      	ldr	r3, [pc, #396]	; (8008464 <LoRaMacMibSetRequestConfirm+0x30c>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	f040 8177 	bne.w	80085ce <LoRaMacMibSetRequestConfirm+0x476>
 80082e0:	4b55      	ldr	r3, [pc, #340]	; (8008438 <LoRaMacMibSetRequestConfirm+0x2e0>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 8172 	beq.w	80085ce <LoRaMacMibSetRequestConfirm+0x476>
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 80082ea:	4b5c      	ldr	r3, [pc, #368]	; (800845c <LoRaMacMibSetRequestConfirm+0x304>)
 80082ec:	7818      	ldrb	r0, [r3, #0]
                                                     LoRaMacParams.Rx2Channel.Datarate,
 80082ee:	4b5a      	ldr	r3, [pc, #360]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 80082f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 80082f4:	b259      	sxtb	r1, r3
 80082f6:	4b58      	ldr	r3, [pc, #352]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 80082f8:	7a1a      	ldrb	r2, [r3, #8]
 80082fa:	4b57      	ldr	r3, [pc, #348]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	4c5a      	ldr	r4, [pc, #360]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008300:	9400      	str	r4, [sp, #0]
 8008302:	f001 fc58 	bl	8009bb6 <RegionComputeRxWindowParameters>
                                                     LoRaMacParams.MinRxSymbols,
                                                     LoRaMacParams.SystemMaxRxError,
                                                     &RxWindow2Config );

                    RxWindow2Config.Channel = Channel;
 8008306:	4b59      	ldr	r3, [pc, #356]	; (800846c <LoRaMacMibSetRequestConfirm+0x314>)
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	4b57      	ldr	r3, [pc, #348]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 800830c:	701a      	strb	r2, [r3, #0]
                    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 800830e:	4b52      	ldr	r3, [pc, #328]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	4a55      	ldr	r2, [pc, #340]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008314:	6053      	str	r3, [r2, #4]
                    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8008316:	4b50      	ldr	r3, [pc, #320]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 8008318:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800831c:	4b52      	ldr	r3, [pc, #328]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 800831e:	741a      	strb	r2, [r3, #16]
                    RxWindow2Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 8008320:	4b4d      	ldr	r3, [pc, #308]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 8008322:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008326:	4b50      	ldr	r3, [pc, #320]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008328:	745a      	strb	r2, [r3, #17]
                    RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800832a:	4b4f      	ldr	r3, [pc, #316]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 800832c:	2201      	movs	r2, #1
 800832e:	74da      	strb	r2, [r3, #19]
                    RxWindow2Config.RxContinuous = true;
 8008330:	4b4d      	ldr	r3, [pc, #308]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008332:	2201      	movs	r2, #1
 8008334:	749a      	strb	r2, [r3, #18]

                    Radio.Sleep();
 8008336:	4b47      	ldr	r3, [pc, #284]	; (8008454 <LoRaMacMibSetRequestConfirm+0x2fc>)
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	4798      	blx	r3
                    if ( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t * )&McpsIndication.RxDatarate ) == true ) {
 800833c:	4b47      	ldr	r3, [pc, #284]	; (800845c <LoRaMacMibSetRequestConfirm+0x304>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	4a4b      	ldr	r2, [pc, #300]	; (8008470 <LoRaMacMibSetRequestConfirm+0x318>)
 8008342:	4949      	ldr	r1, [pc, #292]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fc50 	bl	8009bea <RegionRxConfig>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00c      	beq.n	800836a <LoRaMacMibSetRequestConfirm+0x212>
                        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8008350:	4b45      	ldr	r3, [pc, #276]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008352:	7c9b      	ldrb	r3, [r3, #18]
 8008354:	4a40      	ldr	r2, [pc, #256]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 8008356:	68d2      	ldr	r2, [r2, #12]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fd ff68 	bl	8006230 <RxWindowSetup>
                        RxSlot = RxWindow2Config.RxSlot;
 8008360:	4b41      	ldr	r3, [pc, #260]	; (8008468 <LoRaMacMibSetRequestConfirm+0x310>)
 8008362:	7cda      	ldrb	r2, [r3, #19]
 8008364:	4b43      	ldr	r3, [pc, #268]	; (8008474 <LoRaMacMibSetRequestConfirm+0x31c>)
 8008366:	701a      	strb	r2, [r3, #0]
                    }
                }
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008368:	e131      	b.n	80085ce <LoRaMacMibSetRequestConfirm+0x476>
                        status = LORAMAC_STATUS_PARAMETER_INVALID;
 800836a:	2303      	movs	r3, #3
 800836c:	75fb      	strb	r3, [r7, #23]
            break;
 800836e:	e12e      	b.n	80085ce <LoRaMacMibSetRequestConfirm+0x476>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008370:	2303      	movs	r3, #3
 8008372:	75fb      	strb	r3, [r7, #23]
            break;
 8008374:	e12b      	b.n	80085ce <LoRaMacMibSetRequestConfirm+0x476>
        }
        case MIB_RX2_DEFAULT_CHANNEL: {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	7a1b      	ldrb	r3, [r3, #8]
 800837a:	b25b      	sxtb	r3, r3
 800837c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800837e:	4b36      	ldr	r3, [pc, #216]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 8008380:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008384:	727b      	strb	r3, [r7, #9]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true ) {
 8008386:	4b35      	ldr	r3, [pc, #212]	; (800845c <LoRaMacMibSetRequestConfirm+0x304>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f107 0108 	add.w	r1, r7, #8
 800838e:	2206      	movs	r2, #6
 8008390:	4618      	mov	r0, r3
 8008392:	f001 fbbc 	bl	8009b0e <RegionVerify>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <LoRaMacMibSetRequestConfirm+0x256>
                LoRaMacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800839c:	4b36      	ldr	r3, [pc, #216]	; (8008478 <LoRaMacMibSetRequestConfirm+0x320>)
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	3324      	adds	r3, #36	; 0x24
 80083a2:	3204      	adds	r2, #4
 80083a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083a8:	e883 0003 	stmia.w	r3, {r0, r1}
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80083ac:	e114      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80083ae:	2303      	movs	r3, #3
 80083b0:	75fb      	strb	r3, [r7, #23]
            break;
 80083b2:	e111      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_MASK: {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80083ba:	2301      	movs	r3, #1
 80083bc:	743b      	strb	r3, [r7, #16]

            if ( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false ) {
 80083be:	4b27      	ldr	r3, [pc, #156]	; (800845c <LoRaMacMibSetRequestConfirm+0x304>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f107 020c 	add.w	r2, r7, #12
 80083c6:	4611      	mov	r1, r2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fbc9 	bl	8009b60 <RegionChanMaskSet>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f083 0301 	eor.w	r3, r3, #1
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 80fb 	beq.w	80085d2 <LoRaMacMibSetRequestConfirm+0x47a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80083dc:	2303      	movs	r3, #3
 80083de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80083e0:	e0f7      	b.n	80085d2 <LoRaMacMibSetRequestConfirm+0x47a>
        }
        case MIB_CHANNELS_MASK: {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	743b      	strb	r3, [r7, #16]

            if ( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false ) {
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <LoRaMacMibSetRequestConfirm+0x304>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f107 020c 	add.w	r2, r7, #12
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fbb2 	bl	8009b60 <RegionChanMaskSet>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f083 0301 	eor.w	r3, r3, #1
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80e6 	beq.w	80085d6 <LoRaMacMibSetRequestConfirm+0x47e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800840e:	e0e2      	b.n	80085d6 <LoRaMacMibSetRequestConfirm+0x47e>
        }
        case MIB_CHANNELS_NB_REP: {
            if ( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	791b      	ldrb	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d009      	beq.n	800842c <LoRaMacMibSetRequestConfirm+0x2d4>
                 ( mibSet->Param.ChannelNbRep <= 15 ) ) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	791b      	ldrb	r3, [r3, #4]
            if ( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 800841c:	2b0f      	cmp	r3, #15
 800841e:	d805      	bhi.n	800842c <LoRaMacMibSetRequestConfirm+0x2d4>
                LoRaMacParams.ChannelsNbRep = mibSet->Param.ChannelNbRep;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	791a      	ldrb	r2, [r3, #4]
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <LoRaMacMibSetRequestConfirm+0x300>)
 8008426:	f883 2020 	strb.w	r2, [r3, #32]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800842a:	e0d5      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800842c:	2303      	movs	r3, #3
 800842e:	75fb      	strb	r3, [r7, #23]
            break;
 8008430:	e0d2      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
 8008432:	bf00      	nop
 8008434:	2000047c 	.word	0x2000047c
 8008438:	20000359 	.word	0x20000359
 800843c:	2000035a 	.word	0x2000035a
 8008440:	2000013c 	.word	0x2000013c
 8008444:	20000140 	.word	0x20000140
 8008448:	2000011c 	.word	0x2000011c
 800844c:	2000012c 	.word	0x2000012c
 8008450:	20000149 	.word	0x20000149
 8008454:	08012794 	.word	0x08012794
 8008458:	20000a78 	.word	0x20000a78
 800845c:	20000110 	.word	0x20000110
 8008460:	20000a9c 	.word	0x20000a9c
 8008464:	20000148 	.word	0x20000148
 8008468:	20000ae4 	.word	0x20000ae4
 800846c:	20000475 	.word	0x20000475
 8008470:	200009ec 	.word	0x200009ec
 8008474:	20000a74 	.word	0x20000a74
 8008478:	20000a1c 	.word	0x20000a1c
        }
        case MIB_MAX_RX_WINDOW_DURATION: {
            LoRaMacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4a58      	ldr	r2, [pc, #352]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008482:	60d3      	str	r3, [r2, #12]
            break;
 8008484:	e0a8      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RECEIVE_DELAY_1: {
            LoRaMacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4a56      	ldr	r2, [pc, #344]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800848c:	6113      	str	r3, [r2, #16]
            break;
 800848e:	e0a3      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RECEIVE_DELAY_2: {
            LoRaMacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4a53      	ldr	r2, [pc, #332]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008496:	6153      	str	r3, [r2, #20]
            break;
 8008498:	e09e      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_JOIN_ACCEPT_DELAY_1: {
            LoRaMacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	4a51      	ldr	r2, [pc, #324]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 80084a0:	6193      	str	r3, [r2, #24]
            break;
 80084a2:	e099      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_JOIN_ACCEPT_DELAY_2: {
            LoRaMacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	4a4e      	ldr	r2, [pc, #312]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 80084aa:	61d3      	str	r3, [r2, #28]
            break;
 80084ac:	e094      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE: {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80084b4:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_DR ) == true ) {
 80084b6:	4b4c      	ldr	r3, [pc, #304]	; (80085e8 <LoRaMacMibSetRequestConfirm+0x490>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f107 0108 	add.w	r1, r7, #8
 80084be:	2205      	movs	r2, #5
 80084c0:	4618      	mov	r0, r3
 80084c2:	f001 fb24 	bl	8009b0e <RegionVerify>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d004      	beq.n	80084d6 <LoRaMacMibSetRequestConfirm+0x37e>
                LoRaMacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 80084cc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80084d0:	4b46      	ldr	r3, [pc, #280]	; (80085ec <LoRaMacMibSetRequestConfirm+0x494>)
 80084d2:	705a      	strb	r2, [r3, #1]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80084d4:	e080      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80084d6:	2303      	movs	r3, #3
 80084d8:	75fb      	strb	r3, [r7, #23]
            break;
 80084da:	e07d      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DATARATE: {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80084e2:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true ) {
 80084e4:	4b40      	ldr	r3, [pc, #256]	; (80085e8 <LoRaMacMibSetRequestConfirm+0x490>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f107 0108 	add.w	r1, r7, #8
 80084ec:	2204      	movs	r2, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 fb0d 	bl	8009b0e <RegionVerify>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d004      	beq.n	8008504 <LoRaMacMibSetRequestConfirm+0x3ac>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80084fa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80084fe:	4b39      	ldr	r3, [pc, #228]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008500:	705a      	strb	r2, [r3, #1]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008502:	e069      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008504:	2303      	movs	r3, #3
 8008506:	75fb      	strb	r3, [r7, #23]
            break;
 8008508:	e066      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER: {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008510:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_POWER ) == true ) {
 8008512:	4b35      	ldr	r3, [pc, #212]	; (80085e8 <LoRaMacMibSetRequestConfirm+0x490>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f107 0108 	add.w	r1, r7, #8
 800851a:	2208      	movs	r2, #8
 800851c:	4618      	mov	r0, r3
 800851e:	f001 faf6 	bl	8009b0e <RegionVerify>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <LoRaMacMibSetRequestConfirm+0x3da>
                LoRaMacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8008528:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800852c:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <LoRaMacMibSetRequestConfirm+0x494>)
 800852e:	701a      	strb	r2, [r3, #0]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008530:	e052      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008532:	2303      	movs	r3, #3
 8008534:	75fb      	strb	r3, [r7, #23]
            break;
 8008536:	e04f      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_TX_POWER: {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800853e:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_POWER ) == true ) {
 8008540:	4b29      	ldr	r3, [pc, #164]	; (80085e8 <LoRaMacMibSetRequestConfirm+0x490>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	f107 0108 	add.w	r1, r7, #8
 8008548:	2207      	movs	r2, #7
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fadf 	bl	8009b0e <RegionVerify>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <LoRaMacMibSetRequestConfirm+0x408>
                LoRaMacParams.ChannelsTxPower = verify.TxPower;
 8008556:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800855a:	4b22      	ldr	r3, [pc, #136]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800855c:	701a      	strb	r2, [r3, #0]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800855e:	e03b      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008560:	2303      	movs	r3, #3
 8008562:	75fb      	strb	r3, [r7, #23]
            break;
 8008564:	e038      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_UPLINK_COUNTER: {
            UpLinkCounter = mibSet->Param.UpLinkCounter;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4a21      	ldr	r2, [pc, #132]	; (80085f0 <LoRaMacMibSetRequestConfirm+0x498>)
 800856c:	6013      	str	r3, [r2, #0]
            break;
 800856e:	e033      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_DOWNLINK_COUNTER: {
            DownLinkCounter = mibSet->Param.DownLinkCounter;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4a1f      	ldr	r2, [pc, #124]	; (80085f4 <LoRaMacMibSetRequestConfirm+0x49c>)
 8008576:	6013      	str	r3, [r2, #0]
            break;
 8008578:	e02e      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_SYSTEM_MAX_RX_ERROR: {
            LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	4a1b      	ldr	r2, [pc, #108]	; (80085ec <LoRaMacMibSetRequestConfirm+0x494>)
 8008580:	6053      	str	r3, [r2, #4]
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <LoRaMacMibSetRequestConfirm+0x494>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008588:	6053      	str	r3, [r2, #4]
            break;
 800858a:	e025      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MIN_RX_SYMBOLS: {
            LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	791a      	ldrb	r2, [r3, #4]
 8008590:	4b16      	ldr	r3, [pc, #88]	; (80085ec <LoRaMacMibSetRequestConfirm+0x494>)
 8008592:	721a      	strb	r2, [r3, #8]
 8008594:	4b15      	ldr	r3, [pc, #84]	; (80085ec <LoRaMacMibSetRequestConfirm+0x494>)
 8008596:	7a1a      	ldrb	r2, [r3, #8]
 8008598:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 800859a:	721a      	strb	r2, [r3, #8]
            break;
 800859c:	e01c      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_ANTENNA_GAIN: {
            LoRaMacParams.AntennaGain = mibSet->Param.AntennaGain;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x48c>)
 80085a4:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 80085a6:	e017      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MULTICAST_CHANNEL: {
            status = LoRaMacMulticastChannelLink(mibSet->Param.MulticastList);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f84f 	bl	8008650 <LoRaMacMulticastChannelLink>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]
            break;
 80085b6:	e00f      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MULTICAST_CHANNEL_DEL: {
            status = LoRaMacMulticastChannelUnlink(mibSet->Param.MulticastList);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f87f 	bl	80086c0 <LoRaMacMulticastChannelUnlink>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]
            break;
 80085c6:	e007      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80085c8:	2302      	movs	r3, #2
 80085ca:	75fb      	strb	r3, [r7, #23]
            break;
 80085cc:	e004      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 80085ce:	bf00      	nop
 80085d0:	e002      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 80085d6:	bf00      	nop
        }
    }

    return status;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd90      	pop	{r4, r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000a78 	.word	0x20000a78
 80085e8:	20000110 	.word	0x20000110
 80085ec:	20000a1c 	.word	0x20000a1c
 80085f0:	20000350 	.word	0x20000350
 80085f4:	20000354 	.word	0x20000354

080085f8 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 80085f8:	b590      	push	{r4, r7, lr}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4638      	mov	r0, r7
 8008602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008606:	4623      	mov	r3, r4
 8008608:	73fb      	strb	r3, [r7, #15]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 800860a:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <LoRaMacChannelAdd+0x50>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <LoRaMacChannelAdd+0x2e>
        if ( ( LoRaMacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG ) {
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <LoRaMacChannelAdd+0x50>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0320 	and.w	r3, r3, #32
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <LoRaMacChannelAdd+0x2e>
            return LORAMAC_STATUS_BUSY;
 8008622:	2301      	movs	r3, #1
 8008624:	e00c      	b.n	8008640 <LoRaMacChannelAdd+0x48>
        }
    }

    channelAdd.NewChannel = &params;
 8008626:	463b      	mov	r3, r7
 8008628:	613b      	str	r3, [r7, #16]
    channelAdd.ChannelId = id;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	753b      	strb	r3, [r7, #20]

    return RegionChannelAdd( LoRaMacRegion, &channelAdd );
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <LoRaMacChannelAdd+0x54>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f107 0210 	add.w	r2, r7, #16
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f001 fba5 	bl	8009d88 <RegionChannelAdd>
 800863e:	4603      	mov	r3, r0
}
 8008640:	4618      	mov	r0, r3
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	bd90      	pop	{r4, r7, pc}
 8008648:	2000047c 	.word	0x2000047c
 800864c:	20000110 	.word	0x20000110

08008650 <LoRaMacMulticastChannelLink>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMulticastChannelLink( MulticastParams_t *channelParam )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    if ( channelParam == NULL ) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <LoRaMacMulticastChannelLink+0x12>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800865e:	2303      	movs	r3, #3
 8008660:	e024      	b.n	80086ac <LoRaMacMulticastChannelLink+0x5c>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <LoRaMacMulticastChannelLink+0x68>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <LoRaMacMulticastChannelLink+0x22>
        return LORAMAC_STATUS_BUSY;
 800866e:	2301      	movs	r3, #1
 8008670:	e01c      	b.n	80086ac <LoRaMacMulticastChannelLink+0x5c>
    }


    // Reset downlink counter
    channelParam->DownLinkCounter = 0;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	625a      	str	r2, [r3, #36]	; 0x24
    channelParam->Next = NULL;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

    if ( MulticastChannels == NULL ) {
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <LoRaMacMulticastChannelLink+0x6c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d103      	bne.n	800868e <LoRaMacMulticastChannelLink+0x3e>
        // New node is the fist element
        MulticastChannels = channelParam;
 8008686:	4a0d      	ldr	r2, [pc, #52]	; (80086bc <LoRaMacMulticastChannelLink+0x6c>)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	e00d      	b.n	80086aa <LoRaMacMulticastChannelLink+0x5a>
    } else {
        MulticastParams_t *cur = MulticastChannels;
 800868e:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <LoRaMacMulticastChannelLink+0x6c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]

        // Search the last node in the list
        while ( cur->Next != NULL ) {
 8008694:	e002      	b.n	800869c <LoRaMacMulticastChannelLink+0x4c>
            cur = cur->Next;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	60fb      	str	r3, [r7, #12]
        while ( cur->Next != NULL ) {
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1f8      	bne.n	8008696 <LoRaMacMulticastChannelLink+0x46>
        }
        // This function always finds the last node
        cur->Next = channelParam;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    return LORAMAC_STATUS_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	2000047c 	.word	0x2000047c
 80086bc:	20000144 	.word	0x20000144

080086c0 <LoRaMacMulticastChannelUnlink>:

LoRaMacStatus_t LoRaMacMulticastChannelUnlink( MulticastParams_t *channelParam )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
    if ( channelParam == NULL ) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <LoRaMacMulticastChannelUnlink+0x12>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e031      	b.n	8008736 <LoRaMacMulticastChannelUnlink+0x76>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 80086d2:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <LoRaMacMulticastChannelUnlink+0x80>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <LoRaMacMulticastChannelUnlink+0x22>
        return LORAMAC_STATUS_BUSY;
 80086de:	2301      	movs	r3, #1
 80086e0:	e029      	b.n	8008736 <LoRaMacMulticastChannelUnlink+0x76>
    }

    if ( MulticastChannels != NULL ) {
 80086e2:	4b18      	ldr	r3, [pc, #96]	; (8008744 <LoRaMacMulticastChannelUnlink+0x84>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d024      	beq.n	8008734 <LoRaMacMulticastChannelUnlink+0x74>
        if ( MulticastChannels == channelParam ) {
 80086ea:	4b16      	ldr	r3, [pc, #88]	; (8008744 <LoRaMacMulticastChannelUnlink+0x84>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d104      	bne.n	80086fe <LoRaMacMulticastChannelUnlink+0x3e>
            // First element
            MulticastChannels = channelParam->Next;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	4a12      	ldr	r2, [pc, #72]	; (8008744 <LoRaMacMulticastChannelUnlink+0x84>)
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	e017      	b.n	800872e <LoRaMacMulticastChannelUnlink+0x6e>
        } else {
            MulticastParams_t *cur = MulticastChannels;
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <LoRaMacMulticastChannelUnlink+0x84>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]

            // Search the node in the list
            while ( cur->Next && cur->Next != channelParam ) {
 8008704:	e002      	b.n	800870c <LoRaMacMulticastChannelUnlink+0x4c>
                cur = cur->Next;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	60fb      	str	r3, [r7, #12]
            while ( cur->Next && cur->Next != channelParam ) {
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <LoRaMacMulticastChannelUnlink+0x5e>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d1f3      	bne.n	8008706 <LoRaMacMulticastChannelUnlink+0x46>
            }
            // If we found the node, remove it
            if ( cur->Next ) {
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <LoRaMacMulticastChannelUnlink+0x6e>
                cur->Next = channelParam->Next;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	639a      	str	r2, [r3, #56]	; 0x38
            }
        }
        channelParam->Next = NULL;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	639a      	str	r2, [r3, #56]	; 0x38
    }

    return LORAMAC_STATUS_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	bc80      	pop	{r7}
 800873e:	4770      	bx	lr
 8008740:	2000047c 	.word	0x2000047c
 8008744:	20000144 	.word	0x20000144

08008748 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008750:	2302      	movs	r3, #2
 8008752:	77fb      	strb	r3, [r7, #31]
    MlmeConfirmQueue_t queueElement;
    AlternateDrParams_t altDr;
    VerifyParams_t verify;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    if ( mlmeRequest == NULL ) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <LoRaMacMlmeRequest+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800875a:	2303      	movs	r3, #3
 800875c:	e0f6      	b.n	800894c <LoRaMacMlmeRequest+0x204>
    }
    if( LoRaMacState != LORAMAC_IDLE )
 800875e:	4b7d      	ldr	r3, [pc, #500]	; (8008954 <LoRaMacMlmeRequest+0x20c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8008766:	2301      	movs	r3, #1
 8008768:	e0f0      	b.n	800894c <LoRaMacMlmeRequest+0x204>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800876a:	f000 fbe3 	bl	8008f34 <LoRaMacConfirmQueueIsFull>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8008774:	2301      	movs	r3, #1
 8008776:	e0e9      	b.n	800894c <LoRaMacMlmeRequest+0x204>
    }

    switch ( mlmeRequest->Type ) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b03      	cmp	r3, #3
 800877e:	f200 80d1 	bhi.w	8008924 <LoRaMacMlmeRequest+0x1dc>
 8008782:	a201      	add	r2, pc, #4	; (adr r2, 8008788 <LoRaMacMlmeRequest+0x40>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	08008799 	.word	0x08008799
 800878c:	08008887 	.word	0x08008887
 8008790:	080088b9 	.word	0x080088b9
 8008794:	080088eb 	.word	0x080088eb
        case MLME_JOIN: {
            if ( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <LoRaMacMlmeRequest+0x68>
                 ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
            if ( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <LoRaMacMlmeRequest+0x68>
                 ( mlmeRequest->Req.Join.AppKey == NULL ) )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
                 ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <LoRaMacMlmeRequest+0x6c>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0cb      	b.n	800894c <LoRaMacMlmeRequest+0x204>
            }
            // Verify the parameter NbTrials for the join procedure
            verify.NbJoinTrials = mlmeRequest->Req.Join.NbTrials;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	7c1b      	ldrb	r3, [r3, #16]
 80087b8:	743b      	strb	r3, [r7, #16]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_NB_JOIN_TRIALS ) == false ) {
 80087ba:	4b67      	ldr	r3, [pc, #412]	; (8008958 <LoRaMacMlmeRequest+0x210>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f107 0110 	add.w	r1, r7, #16
 80087c2:	2231      	movs	r2, #49	; 0x31
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f9a2 	bl	8009b0e <RegionVerify>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f083 0301 	eor.w	r3, r3, #1
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00f      	beq.n	80087f6 <LoRaMacMlmeRequest+0xae>
                // Value not supported, get default
                getPhy.Attribute = PHY_DEF_NB_JOIN_TRIALS;
 80087d6:	2332      	movs	r3, #50	; 0x32
 80087d8:	733b      	strb	r3, [r7, #12]
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80087da:	4b5f      	ldr	r3, [pc, #380]	; (8008958 <LoRaMacMlmeRequest+0x210>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f107 020c 	add.w	r2, r7, #12
 80087e2:	4611      	mov	r1, r2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 f953 	bl	8009a90 <RegionGetPhyParam>
 80087ea:	4603      	mov	r3, r0
 80087ec:	60bb      	str	r3, [r7, #8]
                mlmeRequest->Req.Join.NbTrials = ( uint8_t ) phyParam.Value;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	741a      	strb	r2, [r3, #16]
            }

            LoRaMacFlags.Bits.MlmeReq = 1;
 80087f6:	4a59      	ldr	r2, [pc, #356]	; (800895c <LoRaMacMlmeRequest+0x214>)
 80087f8:	7813      	ldrb	r3, [r2, #0]
 80087fa:	f043 0308 	orr.w	r3, r3, #8
 80087fe:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	763b      	strb	r3, [r7, #24]

            LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	4a55      	ldr	r2, [pc, #340]	; (8008960 <LoRaMacMlmeRequest+0x218>)
 800880c:	6013      	str	r3, [r2, #0]
            LoRaMacAppEui = mlmeRequest->Req.Join.AppEui;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	4a54      	ldr	r2, [pc, #336]	; (8008964 <LoRaMacMlmeRequest+0x21c>)
 8008814:	6013      	str	r3, [r2, #0]
            LoRaMacAppKey = mlmeRequest->Req.Join.AppKey;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	4a53      	ldr	r2, [pc, #332]	; (8008968 <LoRaMacMlmeRequest+0x220>)
 800881c:	6013      	str	r3, [r2, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800881e:	2307      	movs	r3, #7
 8008820:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008822:	2300      	movs	r3, #0
 8008824:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008826:	f107 0318 	add.w	r3, r7, #24
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fa12 	bl	8008c54 <LoRaMacConfirmQueueAdd>
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	7c1a      	ldrb	r2, [r3, #16]
 8008834:	4b4d      	ldr	r3, [pc, #308]	; (800896c <LoRaMacMlmeRequest+0x224>)
 8008836:	701a      	strb	r2, [r3, #0]

            // Reset variable JoinRequestTrials
            JoinRequestTrials = 0;
 8008838:	4b4d      	ldr	r3, [pc, #308]	; (8008970 <LoRaMacMlmeRequest+0x228>)
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]

            // Setup header information
            macHdr.Value = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	773b      	strb	r3, [r7, #28]
            macHdr.Bits.MType  = FRAME_TYPE_JOIN_REQ;
 8008842:	7f3b      	ldrb	r3, [r7, #28]
 8008844:	f36f 1347 	bfc	r3, #5, #3
 8008848:	773b      	strb	r3, [r7, #28]
            ResetMacParameters( );
 800884a:	f7fe fc29 	bl	80070a0 <ResetMacParameters>
            altDr.NbTrials = JoinRequestTrials + 1;
 800884e:	4b48      	ldr	r3, [pc, #288]	; (8008970 <LoRaMacMlmeRequest+0x228>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	b29b      	uxth	r3, r3
 8008854:	3301      	adds	r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	82bb      	strh	r3, [r7, #20]
            LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 800885a:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <LoRaMacMlmeRequest+0x210>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	f107 0214 	add.w	r2, r7, #20
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f001 fa52 	bl	8009d0e <RegionAlternateDr>
 800886a:	4603      	mov	r3, r0
 800886c:	461a      	mov	r2, r3
 800886e:	4b41      	ldr	r3, [pc, #260]	; (8008974 <LoRaMacMlmeRequest+0x22c>)
 8008870:	705a      	strb	r2, [r3, #1]
            status = Send( &macHdr, 0, NULL, 0 );
 8008872:	f107 001c 	add.w	r0, r7, #28
 8008876:	2300      	movs	r3, #0
 8008878:	2200      	movs	r2, #0
 800887a:	2100      	movs	r1, #0
 800887c:	f7fe fa96 	bl	8006dac <Send>
 8008880:	4603      	mov	r3, r0
 8008882:	77fb      	strb	r3, [r7, #31]
            break;
 8008884:	e04f      	b.n	8008926 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_LINK_CHECK: {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 8008886:	4a35      	ldr	r2, [pc, #212]	; (800895c <LoRaMacMlmeRequest+0x214>)
 8008888:	7813      	ldrb	r3, [r2, #0]
 800888a:	f043 0308 	orr.w	r3, r3, #8
 800888e:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 800889a:	2300      	movs	r3, #0
 800889c:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 800889e:	f107 0318 	add.w	r3, r7, #24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f9d6 	bl	8008c54 <LoRaMacConfirmQueueAdd>

            // LoRaMac will send this command piggy-pack
            status = AddMacCommand( MOTE_MAC_LINK_CHECK_REQ, 0, 0 );
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	2002      	movs	r0, #2
 80088ae:	f7fd fd99 	bl	80063e4 <AddMacCommand>
 80088b2:	4603      	mov	r3, r0
 80088b4:	77fb      	strb	r3, [r7, #31]
            break;
 80088b6:	e036      	b.n	8008926 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_TXCW: {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 80088b8:	4a28      	ldr	r2, [pc, #160]	; (800895c <LoRaMacMlmeRequest+0x214>)
 80088ba:	7813      	ldrb	r3, [r2, #0]
 80088bc:	f043 0308 	orr.w	r3, r3, #8
 80088c0:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 80088cc:	2300      	movs	r3, #0
 80088ce:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 80088d0:	f107 0318 	add.w	r3, r7, #24
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f9bd 	bl	8008c54 <LoRaMacConfirmQueueAdd>

            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	889b      	ldrh	r3, [r3, #4]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fffa 	bl	80078d8 <SetTxContinuousWave>
 80088e4:	4603      	mov	r3, r0
 80088e6:	77fb      	strb	r3, [r7, #31]
            break;
 80088e8:	e01d      	b.n	8008926 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_TXCW_1:
        {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 80088ea:	4a1c      	ldr	r2, [pc, #112]	; (800895c <LoRaMacMlmeRequest+0x214>)
 80088ec:	7813      	ldrb	r3, [r2, #0]
 80088ee:	f043 0308 	orr.w	r3, r3, #8
 80088f2:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 80088fe:	2300      	movs	r3, #0
 8008900:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008902:	f107 0318 	add.w	r3, r7, #24
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f9a4 	bl	8008c54 <LoRaMacConfirmQueueAdd>

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8898      	ldrh	r0, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6899      	ldr	r1, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7b1b      	ldrb	r3, [r3, #12]
 8008918:	461a      	mov	r2, r3
 800891a:	f7ff f81b 	bl	8007954 <SetTxContinuousWave1>
 800891e:	4603      	mov	r3, r0
 8008920:	77fb      	strb	r3, [r7, #31]
            break;
 8008922:	e000      	b.n	8008926 <LoRaMacMlmeRequest+0x1de>
        }
        default:
            break;
 8008924:	bf00      	nop
    }
    if ( status != LORAMAC_STATUS_OK ) {
 8008926:	7ffb      	ldrb	r3, [r7, #31]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00e      	beq.n	800894a <LoRaMacMlmeRequest+0x202>
        NodeAckRequested = false;
 800892c:	4b12      	ldr	r3, [pc, #72]	; (8008978 <LoRaMacMlmeRequest+0x230>)
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
        LoRaMacConfirmQueueRemoveLast( );
 8008932:	f000 f9c3 	bl	8008cbc <LoRaMacConfirmQueueRemoveLast>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8008936:	f000 faf3 	bl	8008f20 <LoRaMacConfirmQueueGetCnt>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d104      	bne.n	800894a <LoRaMacMlmeRequest+0x202>
        {
            LoRaMacFlags.Bits.MlmeReq = 0;
 8008940:	4a06      	ldr	r2, [pc, #24]	; (800895c <LoRaMacMlmeRequest+0x214>)
 8008942:	7813      	ldrb	r3, [r2, #0]
 8008944:	f36f 03c3 	bfc	r3, #3, #1
 8008948:	7013      	strb	r3, [r2, #0]
        }
    }
    return status;
 800894a:	7ffb      	ldrb	r3, [r7, #31]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3720      	adds	r7, #32
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	2000047c 	.word	0x2000047c
 8008958:	20000110 	.word	0x20000110
 800895c:	20000a18 	.word	0x20000a18
 8008960:	20000114 	.word	0x20000114
 8008964:	20000118 	.word	0x20000118
 8008968:	20000acc 	.word	0x20000acc
 800896c:	200009bc 	.word	0x200009bc
 8008970:	20000a14 	.word	0x20000a14
 8008974:	20000a78 	.word	0x20000a78
 8008978:	20000360 	.word	0x20000360

0800897c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	; 0x28
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008984:	2302      	movs	r3, #2
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void *fBuffer;
    uint16_t fBufferSize;
    int8_t datarate;
    bool readyToSend = false;
 8008990:	2300      	movs	r3, #0
 8008992:	773b      	strb	r3, [r7, #28]

    if ( mcpsRequest == NULL ) {
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800899a:	2303      	movs	r3, #3
 800899c:	e0ce      	b.n	8008b3c <LoRaMacMcpsRequest+0x1c0>
    }
    if ( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 800899e:	4b69      	ldr	r3, [pc, #420]	; (8008b44 <LoRaMacMcpsRequest+0x1c8>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <LoRaMacMcpsRequest+0x3a>
         ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED ) ) {
 80089aa:	4b66      	ldr	r3, [pc, #408]	; (8008b44 <LoRaMacMcpsRequest+0x1c8>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0310 	and.w	r3, r3, #16
    if ( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <LoRaMacMcpsRequest+0x3e>
        return LORAMAC_STATUS_BUSY;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e0c0      	b.n	8008b3c <LoRaMacMcpsRequest+0x1c0>
    }

    macHdr.Value = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	743b      	strb	r3, [r7, #16]
    memset1 ( ( uint8_t * ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 80089be:	2214      	movs	r2, #20
 80089c0:	2100      	movs	r1, #0
 80089c2:	4861      	ldr	r0, [pc, #388]	; (8008b48 <LoRaMacMcpsRequest+0x1cc>)
 80089c4:	f007 fcea 	bl	801039c <memset1>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80089c8:	4b5f      	ldr	r3, [pc, #380]	; (8008b48 <LoRaMacMcpsRequest+0x1cc>)
 80089ca:	2201      	movs	r2, #1
 80089cc:	705a      	strb	r2, [r3, #1]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    AckTimeoutRetriesCounter = 1;
 80089ce:	4b5f      	ldr	r3, [pc, #380]	; (8008b4c <LoRaMacMcpsRequest+0x1d0>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]

    switch ( mcpsRequest->Type ) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d037      	beq.n	8008a4c <LoRaMacMcpsRequest+0xd0>
 80089dc:	2b03      	cmp	r3, #3
 80089de:	dc48      	bgt.n	8008a72 <LoRaMacMcpsRequest+0xf6>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <LoRaMacMcpsRequest+0x6e>
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d018      	beq.n	8008a1a <LoRaMacMcpsRequest+0x9e>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80089e8:	e043      	b.n	8008a72 <LoRaMacMcpsRequest+0xf6>
            readyToSend = true;
 80089ea:	2301      	movs	r3, #1
 80089ec:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = 1;
 80089ee:	4b58      	ldr	r3, [pc, #352]	; (8008b50 <LoRaMacMcpsRequest+0x1d4>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80089f4:	7c3b      	ldrb	r3, [r7, #16]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f362 1347 	bfi	r3, r2, #5, #3
 80089fc:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	791b      	ldrb	r3, [r3, #4]
 8008a02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	899b      	ldrh	r3, [r3, #12]
 8008a10:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	7b9b      	ldrb	r3, [r3, #14]
 8008a16:	777b      	strb	r3, [r7, #29]
            break;
 8008a18:	e02c      	b.n	8008a74 <LoRaMacMcpsRequest+0xf8>
            readyToSend = true;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	7bda      	ldrb	r2, [r3, #15]
 8008a22:	4b4b      	ldr	r3, [pc, #300]	; (8008b50 <LoRaMacMcpsRequest+0x1d4>)
 8008a24:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8008a26:	7c3b      	ldrb	r3, [r7, #16]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	f362 1347 	bfi	r3, r2, #5, #3
 8008a2e:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	791b      	ldrb	r3, [r3, #4]
 8008a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	899b      	ldrh	r3, [r3, #12]
 8008a42:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7b9b      	ldrb	r3, [r3, #14]
 8008a48:	777b      	strb	r3, [r7, #29]
            break;
 8008a4a:	e013      	b.n	8008a74 <LoRaMacMcpsRequest+0xf8>
            readyToSend = true;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = 1;
 8008a50:	4b3f      	ldr	r3, [pc, #252]	; (8008b50 <LoRaMacMcpsRequest+0x1d4>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8008a56:	7c3b      	ldrb	r3, [r7, #16]
 8008a58:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8008a5c:	743b      	strb	r3, [r7, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	891b      	ldrh	r3, [r3, #8]
 8008a68:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	7a9b      	ldrb	r3, [r3, #10]
 8008a6e:	777b      	strb	r3, [r7, #29]
            break;
 8008a70:	e000      	b.n	8008a74 <LoRaMacMcpsRequest+0xf8>
            break;
 8008a72:	bf00      	nop
    }

    // Filter fPorts
    if( IsFPortAllowed( fPort ) == false )
 8008a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fe fbb5 	bl	80071e8 <IsFPortAllowed>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f083 0301 	eor.w	r3, r3, #1
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <LoRaMacMcpsRequest+0x112>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e056      	b.n	8008b3c <LoRaMacMcpsRequest+0x1c0>
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	763b      	strb	r3, [r7, #24]
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008a92:	4b30      	ldr	r3, [pc, #192]	; (8008b54 <LoRaMacMcpsRequest+0x1d8>)
 8008a94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a98:	76bb      	strb	r3, [r7, #26]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008a9a:	4b2f      	ldr	r3, [pc, #188]	; (8008b58 <LoRaMacMcpsRequest+0x1dc>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	f107 0218 	add.w	r2, r7, #24
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fff3 	bl	8009a90 <RegionGetPhyParam>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	617b      	str	r3, [r7, #20]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, phyParam.Value );
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	bf38      	it	cc
 8008ab8:	4613      	movcc	r3, r2
 8008aba:	777b      	strb	r3, [r7, #29]

    if ( readyToSend == true ) {
 8008abc:	7f3b      	ldrb	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d03a      	beq.n	8008b38 <LoRaMacMcpsRequest+0x1bc>
        if ( AdrCtrlOn == false ) {
 8008ac2:	4b26      	ldr	r3, [pc, #152]	; (8008b5c <LoRaMacMcpsRequest+0x1e0>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f083 0301 	eor.w	r3, r3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d017      	beq.n	8008b00 <LoRaMacMcpsRequest+0x184>
            verify.DatarateParams.Datarate = datarate;
 8008ad0:	7f7b      	ldrb	r3, [r7, #29]
 8008ad2:	733b      	strb	r3, [r7, #12]
            verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008ad4:	4b1f      	ldr	r3, [pc, #124]	; (8008b54 <LoRaMacMcpsRequest+0x1d8>)
 8008ad6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ada:	73bb      	strb	r3, [r7, #14]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true ) {
 8008adc:	4b1e      	ldr	r3, [pc, #120]	; (8008b58 <LoRaMacMcpsRequest+0x1dc>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	f107 010c 	add.w	r1, r7, #12
 8008ae4:	2204      	movs	r2, #4
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 f811 	bl	8009b0e <RegionVerify>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <LoRaMacMcpsRequest+0x180>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008af2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8008af6:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <LoRaMacMcpsRequest+0x1d8>)
 8008af8:	705a      	strb	r2, [r3, #1]
 8008afa:	e001      	b.n	8008b00 <LoRaMacMcpsRequest+0x184>
            } else {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e01d      	b.n	8008b3c <LoRaMacMcpsRequest+0x1c0>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8008b00:	8bfb      	ldrh	r3, [r7, #30]
 8008b02:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008b06:	f107 0010 	add.w	r0, r7, #16
 8008b0a:	6a3a      	ldr	r2, [r7, #32]
 8008b0c:	f7fe f94e 	bl	8006dac <Send>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ( status == LORAMAC_STATUS_OK ) {
 8008b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <LoRaMacMcpsRequest+0x1b6>
            McpsConfirm.McpsRequest = mcpsRequest->Type;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	781a      	ldrb	r2, [r3, #0]
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <LoRaMacMcpsRequest+0x1cc>)
 8008b24:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.McpsReq = 1;
 8008b26:	4a0e      	ldr	r2, [pc, #56]	; (8008b60 <LoRaMacMcpsRequest+0x1e4>)
 8008b28:	7813      	ldrb	r3, [r2, #0]
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	7013      	strb	r3, [r2, #0]
 8008b30:	e002      	b.n	8008b38 <LoRaMacMcpsRequest+0x1bc>
        } else {
            NodeAckRequested = false;
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <LoRaMacMcpsRequest+0x1e8>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
        }
    }

    return status;
 8008b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3728      	adds	r7, #40	; 0x28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	2000047c 	.word	0x2000047c
 8008b48:	200009c0 	.word	0x200009c0
 8008b4c:	2000000a 	.word	0x2000000a
 8008b50:	20000009 	.word	0x20000009
 8008b54:	20000a78 	.word	0x20000a78
 8008b58:	20000110 	.word	0x20000110
 8008b5c:	2000035a 	.word	0x2000035a
 8008b60:	20000a18 	.word	0x20000a18
 8008b64:	20000360 	.word	0x20000360

08008b68 <IncreaseBufferPointer>:
 */
LoRaMacEventInfoStatus_t CommonStatus;


static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a07      	ldr	r2, [pc, #28]	; (8008b90 <IncreaseBufferPointer+0x28>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d102      	bne.n	8008b7e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = MlmeConfirmQueue;
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <IncreaseBufferPointer+0x2c>)
 8008b7a:	607b      	str	r3, [r7, #4]
 8008b7c:	e002      	b.n	8008b84 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3304      	adds	r3, #4
 8008b82:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8008b84:	687b      	ldr	r3, [r7, #4]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr
 8008b90:	200004d4 	.word	0x200004d4
 8008b94:	200004c4 	.word	0x200004c4

08008b98 <DecreaseBufferPointer>:

static MlmeConfirmQueue_t* DecreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == MlmeConfirmQueue )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a07      	ldr	r2, [pc, #28]	; (8008bc0 <DecreaseBufferPointer+0x28>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d102      	bne.n	8008bae <DecreaseBufferPointer+0x16>
    {
        // Reset to the last element
        bufferPointer = &MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1];
 8008ba8:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <DecreaseBufferPointer+0x2c>)
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	e002      	b.n	8008bb4 <DecreaseBufferPointer+0x1c>
    }
    else
    {
        bufferPointer--;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr
 8008bc0:	200004c4 	.word	0x200004c4
 8008bc4:	200004d4 	.word	0x200004d4

08008bc8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	617b      	str	r3, [r7, #20]

    do
    {
        if( element->Request == request )
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	7bfa      	ldrb	r2, [r7, #15]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d101      	bne.n	8008be8 <GetElement+0x20>
        {
            // We have found the element
            return element;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	e008      	b.n	8008bfa <GetElement+0x32>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 8008be8:	6978      	ldr	r0, [r7, #20]
 8008bea:	f7ff ffbd 	bl	8008b68 <IncreaseBufferPointer>
 8008bee:	6178      	str	r0, [r7, #20]
        }
    }while( element != bufferEnd );
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1f0      	bne.n	8008bda <GetElement+0x12>

    return NULL;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <LoRaMacConfirmQueueInit>:


void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
    Primitives = primitives;
 8008c0c:	4a0b      	ldr	r2, [pc, #44]	; (8008c3c <LoRaMacConfirmQueueInit+0x38>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6013      	str	r3, [r2, #0]

    // Init counter
    MlmeConfirmQueueCnt = 0;
 8008c12:	4b0b      	ldr	r3, [pc, #44]	; (8008c40 <LoRaMacConfirmQueueInit+0x3c>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]

    // Init buffer
    BufferStart = MlmeConfirmQueue;
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <LoRaMacConfirmQueueInit+0x40>)
 8008c1a:	4a0b      	ldr	r2, [pc, #44]	; (8008c48 <LoRaMacConfirmQueueInit+0x44>)
 8008c1c:	601a      	str	r2, [r3, #0]
    BufferEnd = MlmeConfirmQueue;
 8008c1e:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <LoRaMacConfirmQueueInit+0x48>)
 8008c20:	4a09      	ldr	r2, [pc, #36]	; (8008c48 <LoRaMacConfirmQueueInit+0x44>)
 8008c22:	601a      	str	r2, [r3, #0]

    memset1( (uint8_t*) MlmeConfirmQueue, 0xFF, sizeof( MlmeConfirmQueue ) );
 8008c24:	2214      	movs	r2, #20
 8008c26:	21ff      	movs	r1, #255	; 0xff
 8008c28:	4807      	ldr	r0, [pc, #28]	; (8008c48 <LoRaMacConfirmQueueInit+0x44>)
 8008c2a:	f007 fbb7 	bl	801039c <memset1>

    // Common status
    CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c2e:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <LoRaMacConfirmQueueInit+0x4c>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	701a      	strb	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200004c0 	.word	0x200004c0
 8008c40:	200004d8 	.word	0x200004d8
 8008c44:	20000b00 	.word	0x20000b00
 8008c48:	200004c4 	.word	0x200004c4
 8008c4c:	20000b04 	.word	0x20000b04
 8008c50:	20000afc 	.word	0x20000afc

08008c54 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
    if( MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8008c5c:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <LoRaMacConfirmQueueAdd+0x60>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d901      	bls.n	8008c68 <LoRaMacConfirmQueueAdd+0x14>
    {
        // Protect the buffer against overwrites
        return false;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e021      	b.n	8008cac <LoRaMacConfirmQueueAdd+0x58>
    }

    // Add the element to the ring buffer
    BufferEnd->Request = mlmeConfirm->Request;
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <LoRaMacConfirmQueueAdd+0x64>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	701a      	strb	r2, [r3, #0]
    BufferEnd->Status = mlmeConfirm->Status;
 8008c72:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <LoRaMacConfirmQueueAdd+0x64>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	7852      	ldrb	r2, [r2, #1]
 8008c7a:	705a      	strb	r2, [r3, #1]
    BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8008c7c:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <LoRaMacConfirmQueueAdd+0x64>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	78d2      	ldrb	r2, [r2, #3]
 8008c84:	70da      	strb	r2, [r3, #3]
    BufferEnd->ReadyToHandle = false;
 8008c86:	4b0c      	ldr	r3, [pc, #48]	; (8008cb8 <LoRaMacConfirmQueueAdd+0x64>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	709a      	strb	r2, [r3, #2]
    // Increase counter
    MlmeConfirmQueueCnt++;
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <LoRaMacConfirmQueueAdd+0x60>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <LoRaMacConfirmQueueAdd+0x60>)
 8008c98:	701a      	strb	r2, [r3, #0]
    // Update end pointer
    BufferEnd = IncreaseBufferPointer( BufferEnd );
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <LoRaMacConfirmQueueAdd+0x64>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff ff62 	bl	8008b68 <IncreaseBufferPointer>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4a04      	ldr	r2, [pc, #16]	; (8008cb8 <LoRaMacConfirmQueueAdd+0x64>)
 8008ca8:	6013      	str	r3, [r2, #0]

    return true;
 8008caa:	2301      	movs	r3, #1
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200004d8 	.word	0x200004d8
 8008cb8:	20000b04 	.word	0x20000b04

08008cbc <LoRaMacConfirmQueueRemoveLast>:

bool LoRaMacConfirmQueueRemoveLast( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt == 0 )
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <LoRaMacConfirmQueueRemoveLast+0x34>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <LoRaMacConfirmQueueRemoveLast+0x10>
    {
        return false;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	e00e      	b.n	8008cea <LoRaMacConfirmQueueRemoveLast+0x2e>
    }

    // Increase counter
    MlmeConfirmQueueCnt--;
 8008ccc:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <LoRaMacConfirmQueueRemoveLast+0x34>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <LoRaMacConfirmQueueRemoveLast+0x34>)
 8008cd6:	701a      	strb	r2, [r3, #0]
    // Update start pointer
    BufferEnd = DecreaseBufferPointer( BufferEnd );
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <LoRaMacConfirmQueueRemoveLast+0x38>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f7ff ff5b 	bl	8008b98 <DecreaseBufferPointer>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4a03      	ldr	r2, [pc, #12]	; (8008cf4 <LoRaMacConfirmQueueRemoveLast+0x38>)
 8008ce6:	6013      	str	r3, [r2, #0]

    return true;
 8008ce8:	2301      	movs	r3, #1
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	200004d8 	.word	0x200004d8
 8008cf4:	20000b04 	.word	0x20000b04

08008cf8 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt == 0 )
 8008cfc:	4b0b      	ldr	r3, [pc, #44]	; (8008d2c <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <LoRaMacConfirmQueueRemoveFirst+0x10>
    {
        return false;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e00e      	b.n	8008d26 <LoRaMacConfirmQueueRemoveFirst+0x2e>
    }

    // Increase counter
    MlmeConfirmQueueCnt--;
 8008d08:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8008d12:	701a      	strb	r2, [r3, #0]
    // Update start pointer
    BufferStart = IncreaseBufferPointer( BufferStart );
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff ff25 	bl	8008b68 <IncreaseBufferPointer>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	4a03      	ldr	r2, [pc, #12]	; (8008d30 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8008d22:	6013      	str	r3, [r2, #0]

    return true;
 8008d24:	2301      	movs	r3, #1
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200004d8 	.word	0x200004d8
 8008d30:	20000b00 	.word	0x20000b00

08008d34 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	460a      	mov	r2, r1
 8008d3e:	71fb      	strb	r3, [r7, #7]
 8008d40:	4613      	mov	r3, r2
 8008d42:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]

    if( MlmeConfirmQueueCnt > 0 )
 8008d48:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <LoRaMacConfirmQueueSetStatus+0x48>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d011      	beq.n	8008d74 <LoRaMacConfirmQueueSetStatus+0x40>
    {
        element = GetElement( request, BufferStart, BufferEnd );
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <LoRaMacConfirmQueueSetStatus+0x4c>)
 8008d52:	6819      	ldr	r1, [r3, #0]
 8008d54:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <LoRaMacConfirmQueueSetStatus+0x50>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	79bb      	ldrb	r3, [r7, #6]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff ff34 	bl	8008bc8 <GetElement>
 8008d60:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <LoRaMacConfirmQueueSetStatus+0x40>
        {
            element->Status = status;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	79fa      	ldrb	r2, [r7, #7]
 8008d6c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2201      	movs	r2, #1
 8008d72:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200004d8 	.word	0x200004d8
 8008d80:	20000b00 	.word	0x20000b00
 8008d84:	20000b04 	.word	0x20000b04

08008d88 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]

    if( MlmeConfirmQueueCnt > 0 )
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <LoRaMacConfirmQueueGetStatus+0x40>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00e      	beq.n	8008dbc <LoRaMacConfirmQueueGetStatus+0x34>
    {
        element = GetElement( request, BufferStart, BufferEnd );
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <LoRaMacConfirmQueueGetStatus+0x44>)
 8008da0:	6819      	ldr	r1, [r3, #0]
 8008da2:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <LoRaMacConfirmQueueGetStatus+0x48>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff ff0d 	bl	8008bc8 <GetElement>
 8008dae:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <LoRaMacConfirmQueueGetStatus+0x34>
        {
            return element->Status;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	e000      	b.n	8008dbe <LoRaMacConfirmQueueGetStatus+0x36>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008dbc:	2301      	movs	r3, #1
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200004d8 	.word	0x200004d8
 8008dcc:	20000b00 	.word	0x20000b00
 8008dd0:	20000b04 	.word	0x20000b04

08008dd4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = BufferStart;
 8008dde:	4b12      	ldr	r3, [pc, #72]	; (8008e28 <LoRaMacConfirmQueueSetStatusCmn+0x54>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]

    CommonStatus = status;
 8008de4:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	7013      	strb	r3, [r2, #0]

    if( MlmeConfirmQueueCnt > 0 )
 8008dea:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <LoRaMacConfirmQueueSetStatusCmn+0x5c>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d015      	beq.n	8008e1e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
    {
        do
        {
            element->Status = status;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	79fa      	ldrb	r2, [r7, #7]
 8008df6:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	78db      	ldrb	r3, [r3, #3]
 8008dfc:	f083 0301 	eor.w	r3, r3, #1
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <LoRaMacConfirmQueueSetStatusCmn+0x38>
            {
                element->ReadyToHandle = true;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff feab 	bl	8008b68 <IncreaseBufferPointer>
 8008e12:	60f8      	str	r0, [r7, #12]
        }while( element != BufferEnd );
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d1e9      	bne.n	8008df2 <LoRaMacConfirmQueueSetStatusCmn+0x1e>
    }
}
 8008e1e:	bf00      	nop
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000b00 	.word	0x20000b00
 8008e2c:	20000afc 	.word	0x20000afc
 8008e30:	200004d8 	.word	0x200004d8
 8008e34:	20000b04 	.word	0x20000b04

08008e38 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	af00      	add	r7, sp, #0
    return CommonStatus;
 8008e3c:	4b02      	ldr	r3, [pc, #8]	; (8008e48 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 8008e3e:	781b      	ldrb	r3, [r3, #0]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bc80      	pop	{r7}
 8008e46:	4770      	bx	lr
 8008e48:	20000afc 	.word	0x20000afc

08008e4c <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, BufferStart, BufferEnd ) != NULL )
 8008e56:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <LoRaMacConfirmQueueIsCmdActive+0x34>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7ff feb1 	bl	8008bc8 <GetElement>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e000      	b.n	8008e72 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000b00 	.word	0x20000b00
 8008e80:	20000b04 	.word	0x20000b04

08008e84 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = MlmeConfirmQueueCnt;
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <LoRaMacConfirmQueueHandleCb+0x90>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8008e92:	2300      	movs	r3, #0
 8008e94:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
 8008e9a:	e032      	b.n	8008f02 <LoRaMacConfirmQueueHandleCb+0x7e>
    {
        mlmeConfirm->MlmeRequest = BufferStart->Request;
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <LoRaMacConfirmQueueHandleCb+0x94>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = BufferStart->Status;
 8008ea6:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <LoRaMacConfirmQueueHandleCb+0x94>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	785a      	ldrb	r2, [r3, #1]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	705a      	strb	r2, [r3, #1]
        readyToHandle = BufferStart->ReadyToHandle;
 8008eb0:	4b19      	ldr	r3, [pc, #100]	; (8008f18 <LoRaMacConfirmQueueHandleCb+0x94>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	789b      	ldrb	r3, [r3, #2]
 8008eb6:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <LoRaMacConfirmQueueHandleCb+0x46>
        {
            Primitives->MacMlmeConfirm( mlmeConfirm );
 8008ebe:	4b17      	ldr	r3, [pc, #92]	; (8008f1c <LoRaMacConfirmQueueHandleCb+0x98>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	4798      	blx	r3
 8008ec8:	e00b      	b.n	8008ee2 <LoRaMacConfirmQueueHandleCb+0x5e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = BufferStart->Request;
 8008eca:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <LoRaMacConfirmQueueHandleCb+0x94>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = BufferStart->Status;
 8008ed2:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <LoRaMacConfirmQueueHandleCb+0x94>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = BufferStart->RestrictCommonReadyToHandle;
 8008eda:	4b0f      	ldr	r3, [pc, #60]	; (8008f18 <LoRaMacConfirmQueueHandleCb+0x94>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	78db      	ldrb	r3, [r3, #3]
 8008ee0:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8008ee2:	f7ff ff09 	bl	8008cf8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8008ee6:	7b7b      	ldrb	r3, [r7, #13]
 8008ee8:	f083 0301 	eor.w	r3, r3, #1
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <LoRaMacConfirmQueueHandleCb+0x78>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8008ef2:	f107 0308 	add.w	r3, r7, #8
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7ff feac 	bl	8008c54 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	3301      	adds	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]
 8008f02:	7bfa      	ldrb	r2, [r7, #15]
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d3c8      	bcc.n	8008e9c <LoRaMacConfirmQueueHandleCb+0x18>
        }
    }
}
 8008f0a:	bf00      	nop
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	200004d8 	.word	0x200004d8
 8008f18:	20000b00 	.word	0x20000b00
 8008f1c:	200004c0 	.word	0x200004c0

08008f20 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
    return MlmeConfirmQueueCnt;
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <LoRaMacConfirmQueueGetCnt+0x10>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr
 8008f30:	200004d8 	.word	0x200004d8

08008f34 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8008f38:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <LoRaMacConfirmQueueIsFull+0x1c>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d901      	bls.n	8008f44 <LoRaMacConfirmQueueIsFull+0x10>
    {
        return true;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <LoRaMacConfirmQueueIsFull+0x12>
    }
    else
    {
        return false;
 8008f44:	2300      	movs	r3, #0
    }
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	200004d8 	.word	0x200004d8

08008f54 <LoRaMacComputeMic>:
 * \param [IN]  dir             Frame direction [0: uplink, 1: downlink]
 * \param [IN]  sequenceCounter Frame sequence counter
 * \param [OUT] mic Computed MIC field
 */
void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
 8008f60:	460b      	mov	r3, r1
 8008f62:	817b      	strh	r3, [r7, #10]
    MicBlockB0[5] = dir;
 8008f64:	4a2b      	ldr	r2, [pc, #172]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008f66:	7e3b      	ldrb	r3, [r7, #24]
 8008f68:	7153      	strb	r3, [r2, #5]
    
    MicBlockB0[6] = ( address ) & 0xFF;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	b2da      	uxtb	r2, r3
 8008f6e:	4b29      	ldr	r3, [pc, #164]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008f70:	719a      	strb	r2, [r3, #6]
    MicBlockB0[7] = ( address >> 8 ) & 0xFF;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	4b26      	ldr	r3, [pc, #152]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008f7a:	71da      	strb	r2, [r3, #7]
    MicBlockB0[8] = ( address >> 16 ) & 0xFF;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	0c1b      	lsrs	r3, r3, #16
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	4b24      	ldr	r3, [pc, #144]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008f84:	721a      	strb	r2, [r3, #8]
    MicBlockB0[9] = ( address >> 24 ) & 0xFF;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	0e1b      	lsrs	r3, r3, #24
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	4b21      	ldr	r3, [pc, #132]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008f8e:	725a      	strb	r2, [r3, #9]

    MicBlockB0[10] = ( sequenceCounter ) & 0xFF;
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	4b1f      	ldr	r3, [pc, #124]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008f96:	729a      	strb	r2, [r3, #10]
    MicBlockB0[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	0a1b      	lsrs	r3, r3, #8
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008fa0:	72da      	strb	r2, [r3, #11]
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	0c1b      	lsrs	r3, r3, #16
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	4b1a      	ldr	r3, [pc, #104]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008faa:	731a      	strb	r2, [r3, #12]
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	0e1b      	lsrs	r3, r3, #24
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	4b18      	ldr	r3, [pc, #96]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008fb4:	735a      	strb	r2, [r3, #13]

    MicBlockB0[15] = size & 0xFF;
 8008fb6:	897b      	ldrh	r3, [r7, #10]
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	4b16      	ldr	r3, [pc, #88]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008fbc:	73da      	strb	r2, [r3, #15]

    AES_CMAC_Init( AesCmacCtx );
 8008fbe:	4816      	ldr	r0, [pc, #88]	; (8009018 <LoRaMacComputeMic+0xc4>)
 8008fc0:	f002 fabd 	bl	800b53e <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4814      	ldr	r0, [pc, #80]	; (8009018 <LoRaMacComputeMic+0xc4>)
 8008fc8:	f002 fad2 	bl	800b570 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
 8008fcc:	2210      	movs	r2, #16
 8008fce:	4911      	ldr	r1, [pc, #68]	; (8009014 <LoRaMacComputeMic+0xc0>)
 8008fd0:	4811      	ldr	r0, [pc, #68]	; (8009018 <LoRaMacComputeMic+0xc4>)
 8008fd2:	f002 fadc 	bl	800b58e <AES_CMAC_Update>
    
    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 8008fd6:	897b      	ldrh	r3, [r7, #10]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	461a      	mov	r2, r3
 8008fdc:	68f9      	ldr	r1, [r7, #12]
 8008fde:	480e      	ldr	r0, [pc, #56]	; (8009018 <LoRaMacComputeMic+0xc4>)
 8008fe0:	f002 fad5 	bl	800b58e <AES_CMAC_Update>
    
    AES_CMAC_Final( Mic, AesCmacCtx );
 8008fe4:	490c      	ldr	r1, [pc, #48]	; (8009018 <LoRaMacComputeMic+0xc4>)
 8008fe6:	480d      	ldr	r0, [pc, #52]	; (800901c <LoRaMacComputeMic+0xc8>)
 8008fe8:	f002 fb81 	bl	800b6ee <AES_CMAC_Final>
    
    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <LoRaMacComputeMic+0xc8>)
 8008fee:	78db      	ldrb	r3, [r3, #3]
 8008ff0:	061a      	lsls	r2, r3, #24
 8008ff2:	4b0a      	ldr	r3, [pc, #40]	; (800901c <LoRaMacComputeMic+0xc8>)
 8008ff4:	789b      	ldrb	r3, [r3, #2]
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	4b08      	ldr	r3, [pc, #32]	; (800901c <LoRaMacComputeMic+0xc8>)
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	4313      	orrs	r3, r2
 8009002:	4a06      	ldr	r2, [pc, #24]	; (800901c <LoRaMacComputeMic+0xc8>)
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	431a      	orrs	r2, r3
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	601a      	str	r2, [r3, #0]
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	2000000c 	.word	0x2000000c
 8009018:	200005f0 	.word	0x200005f0
 800901c:	200004dc 	.word	0x200004dc

08009020 <LoRaMacPayloadEncrypt>:

void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	460b      	mov	r3, r1
 800902e:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint8_t bufferIndex = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	757b      	strb	r3, [r7, #21]
    uint16_t ctr = 1;
 8009034:	2301      	movs	r3, #1
 8009036:	827b      	strh	r3, [r7, #18]

    memset1( AesContext.ksch, '\0', 240 );
 8009038:	22f0      	movs	r2, #240	; 0xf0
 800903a:	2100      	movs	r1, #0
 800903c:	4848      	ldr	r0, [pc, #288]	; (8009160 <LoRaMacPayloadEncrypt+0x140>)
 800903e:	f007 f9ad 	bl	801039c <memset1>
    aes_set_key( key, 16, &AesContext );
 8009042:	4a47      	ldr	r2, [pc, #284]	; (8009160 <LoRaMacPayloadEncrypt+0x140>)
 8009044:	2110      	movs	r1, #16
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 feac 	bl	800ada4 <aes_set_key>

    aBlock[5] = dir;
 800904c:	4a45      	ldr	r2, [pc, #276]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 800904e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009052:	7153      	strb	r3, [r2, #5]

    aBlock[6] = ( address ) & 0xFF;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	b2da      	uxtb	r2, r3
 8009058:	4b42      	ldr	r3, [pc, #264]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 800905a:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	0a1b      	lsrs	r3, r3, #8
 8009060:	b2da      	uxtb	r2, r3
 8009062:	4b40      	ldr	r3, [pc, #256]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 8009064:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	0c1b      	lsrs	r3, r3, #16
 800906a:	b2da      	uxtb	r2, r3
 800906c:	4b3d      	ldr	r3, [pc, #244]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 800906e:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	0e1b      	lsrs	r3, r3, #24
 8009074:	b2da      	uxtb	r2, r3
 8009076:	4b3b      	ldr	r3, [pc, #236]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 8009078:	725a      	strb	r2, [r3, #9]

    aBlock[10] = ( sequenceCounter ) & 0xFF;
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	b2da      	uxtb	r2, r3
 800907e:	4b39      	ldr	r3, [pc, #228]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 8009080:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	0a1b      	lsrs	r3, r3, #8
 8009086:	b2da      	uxtb	r2, r3
 8009088:	4b36      	ldr	r3, [pc, #216]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 800908a:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	b2da      	uxtb	r2, r3
 8009092:	4b34      	ldr	r3, [pc, #208]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 8009094:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009098:	0e1b      	lsrs	r3, r3, #24
 800909a:	b2da      	uxtb	r2, r3
 800909c:	4b31      	ldr	r3, [pc, #196]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 800909e:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 80090a0:	e02d      	b.n	80090fe <LoRaMacPayloadEncrypt+0xde>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 80090a2:	8a7b      	ldrh	r3, [r7, #18]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	4b2f      	ldr	r3, [pc, #188]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 80090a8:	73da      	strb	r2, [r3, #15]
        ctr++;
 80090aa:	8a7b      	ldrh	r3, [r7, #18]
 80090ac:	3301      	adds	r3, #1
 80090ae:	827b      	strh	r3, [r7, #18]
        aes_encrypt( aBlock, sBlock, &AesContext );
 80090b0:	4a2b      	ldr	r2, [pc, #172]	; (8009160 <LoRaMacPayloadEncrypt+0x140>)
 80090b2:	492d      	ldr	r1, [pc, #180]	; (8009168 <LoRaMacPayloadEncrypt+0x148>)
 80090b4:	482b      	ldr	r0, [pc, #172]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 80090b6:	f001 ff53 	bl	800af60 <aes_encrypt>
        for( i = 0; i < 16; i++ )
 80090ba:	2300      	movs	r3, #0
 80090bc:	82fb      	strh	r3, [r7, #22]
 80090be:	e015      	b.n	80090ec <LoRaMacPayloadEncrypt+0xcc>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80090c0:	7d7a      	ldrb	r2, [r7, #21]
 80090c2:	8afb      	ldrh	r3, [r7, #22]
 80090c4:	4413      	add	r3, r2
 80090c6:	461a      	mov	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	7819      	ldrb	r1, [r3, #0]
 80090ce:	8afb      	ldrh	r3, [r7, #22]
 80090d0:	4a25      	ldr	r2, [pc, #148]	; (8009168 <LoRaMacPayloadEncrypt+0x148>)
 80090d2:	5cd2      	ldrb	r2, [r2, r3]
 80090d4:	7d78      	ldrb	r0, [r7, #21]
 80090d6:	8afb      	ldrh	r3, [r7, #22]
 80090d8:	4403      	add	r3, r0
 80090da:	4618      	mov	r0, r3
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	4403      	add	r3, r0
 80090e0:	404a      	eors	r2, r1
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80090e6:	8afb      	ldrh	r3, [r7, #22]
 80090e8:	3301      	adds	r3, #1
 80090ea:	82fb      	strh	r3, [r7, #22]
 80090ec:	8afb      	ldrh	r3, [r7, #22]
 80090ee:	2b0f      	cmp	r3, #15
 80090f0:	d9e6      	bls.n	80090c0 <LoRaMacPayloadEncrypt+0xa0>
        }
        size -= 16;
 80090f2:	897b      	ldrh	r3, [r7, #10]
 80090f4:	3b10      	subs	r3, #16
 80090f6:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80090f8:	7d7b      	ldrb	r3, [r7, #21]
 80090fa:	3310      	adds	r3, #16
 80090fc:	757b      	strb	r3, [r7, #21]
    while( size >= 16 )
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	2b0f      	cmp	r3, #15
 8009102:	d8ce      	bhi.n	80090a2 <LoRaMacPayloadEncrypt+0x82>
    }

    if( size > 0 )
 8009104:	897b      	ldrh	r3, [r7, #10]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d025      	beq.n	8009156 <LoRaMacPayloadEncrypt+0x136>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 800910a:	8a7b      	ldrh	r3, [r7, #18]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	4b15      	ldr	r3, [pc, #84]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 8009110:	73da      	strb	r2, [r3, #15]
        aes_encrypt( aBlock, sBlock, &AesContext );
 8009112:	4a13      	ldr	r2, [pc, #76]	; (8009160 <LoRaMacPayloadEncrypt+0x140>)
 8009114:	4914      	ldr	r1, [pc, #80]	; (8009168 <LoRaMacPayloadEncrypt+0x148>)
 8009116:	4813      	ldr	r0, [pc, #76]	; (8009164 <LoRaMacPayloadEncrypt+0x144>)
 8009118:	f001 ff22 	bl	800af60 <aes_encrypt>
        for( i = 0; i < size; i++ )
 800911c:	2300      	movs	r3, #0
 800911e:	82fb      	strh	r3, [r7, #22]
 8009120:	e015      	b.n	800914e <LoRaMacPayloadEncrypt+0x12e>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8009122:	7d7a      	ldrb	r2, [r7, #21]
 8009124:	8afb      	ldrh	r3, [r7, #22]
 8009126:	4413      	add	r3, r2
 8009128:	461a      	mov	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	7819      	ldrb	r1, [r3, #0]
 8009130:	8afb      	ldrh	r3, [r7, #22]
 8009132:	4a0d      	ldr	r2, [pc, #52]	; (8009168 <LoRaMacPayloadEncrypt+0x148>)
 8009134:	5cd2      	ldrb	r2, [r2, r3]
 8009136:	7d78      	ldrb	r0, [r7, #21]
 8009138:	8afb      	ldrh	r3, [r7, #22]
 800913a:	4403      	add	r3, r0
 800913c:	4618      	mov	r0, r3
 800913e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009140:	4403      	add	r3, r0
 8009142:	404a      	eors	r2, r1
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < size; i++ )
 8009148:	8afb      	ldrh	r3, [r7, #22]
 800914a:	3301      	adds	r3, #1
 800914c:	82fb      	strh	r3, [r7, #22]
 800914e:	8afa      	ldrh	r2, [r7, #22]
 8009150:	897b      	ldrh	r3, [r7, #10]
 8009152:	429a      	cmp	r2, r3
 8009154:	d3e5      	bcc.n	8009122 <LoRaMacPayloadEncrypt+0x102>
        }
    }
}
 8009156:	bf00      	nop
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	200004fc 	.word	0x200004fc
 8009164:	2000001c 	.word	0x2000001c
 8009168:	200004ec 	.word	0x200004ec

0800916c <LoRaMacPayloadDecrypt>:

void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af04      	add	r7, sp, #16
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	607a      	str	r2, [r7, #4]
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	460b      	mov	r3, r1
 800917a:	817b      	strh	r3, [r7, #10]
    LoRaMacPayloadEncrypt( buffer, size, key, address, dir, sequenceCounter, decBuffer );
 800917c:	8979      	ldrh	r1, [r7, #10]
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	9302      	str	r3, [sp, #8]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	7e3b      	ldrb	r3, [r7, #24]
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff ff46 	bl	8009020 <LoRaMacPayloadEncrypt>
}
 8009194:	bf00      	nop
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <LoRaMacJoinComputeMic>:

void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	460b      	mov	r3, r1
 80091aa:	817b      	strh	r3, [r7, #10]
    AES_CMAC_Init( AesCmacCtx );
 80091ac:	4812      	ldr	r0, [pc, #72]	; (80091f8 <LoRaMacJoinComputeMic+0x5c>)
 80091ae:	f002 f9c6 	bl	800b53e <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4810      	ldr	r0, [pc, #64]	; (80091f8 <LoRaMacJoinComputeMic+0x5c>)
 80091b6:	f002 f9db 	bl	800b570 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 80091ba:	897b      	ldrh	r3, [r7, #10]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	461a      	mov	r2, r3
 80091c0:	68f9      	ldr	r1, [r7, #12]
 80091c2:	480d      	ldr	r0, [pc, #52]	; (80091f8 <LoRaMacJoinComputeMic+0x5c>)
 80091c4:	f002 f9e3 	bl	800b58e <AES_CMAC_Update>

    AES_CMAC_Final( Mic, AesCmacCtx );
 80091c8:	490b      	ldr	r1, [pc, #44]	; (80091f8 <LoRaMacJoinComputeMic+0x5c>)
 80091ca:	480c      	ldr	r0, [pc, #48]	; (80091fc <LoRaMacJoinComputeMic+0x60>)
 80091cc:	f002 fa8f 	bl	800b6ee <AES_CMAC_Final>

    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <LoRaMacJoinComputeMic+0x60>)
 80091d2:	78db      	ldrb	r3, [r3, #3]
 80091d4:	061a      	lsls	r2, r3, #24
 80091d6:	4b09      	ldr	r3, [pc, #36]	; (80091fc <LoRaMacJoinComputeMic+0x60>)
 80091d8:	789b      	ldrb	r3, [r3, #2]
 80091da:	041b      	lsls	r3, r3, #16
 80091dc:	431a      	orrs	r2, r3
 80091de:	4b07      	ldr	r3, [pc, #28]	; (80091fc <LoRaMacJoinComputeMic+0x60>)
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	4313      	orrs	r3, r2
 80091e6:	4a05      	ldr	r2, [pc, #20]	; (80091fc <LoRaMacJoinComputeMic+0x60>)
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	431a      	orrs	r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	601a      	str	r2, [r3, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	200005f0 	.word	0x200005f0
 80091fc:	200004dc 	.word	0x200004dc

08009200 <LoRaMacJoinDecrypt>:

void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	460b      	mov	r3, r1
 800920e:	817b      	strh	r3, [r7, #10]
    memset1( AesContext.ksch, '\0', 240 );
 8009210:	22f0      	movs	r2, #240	; 0xf0
 8009212:	2100      	movs	r1, #0
 8009214:	480e      	ldr	r0, [pc, #56]	; (8009250 <LoRaMacJoinDecrypt+0x50>)
 8009216:	f007 f8c1 	bl	801039c <memset1>
    aes_set_key( key, 16, &AesContext );
 800921a:	4a0d      	ldr	r2, [pc, #52]	; (8009250 <LoRaMacJoinDecrypt+0x50>)
 800921c:	2110      	movs	r1, #16
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fdc0 	bl	800ada4 <aes_set_key>
    aes_encrypt( buffer, decBuffer, &AesContext );
 8009224:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <LoRaMacJoinDecrypt+0x50>)
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 fe99 	bl	800af60 <aes_encrypt>
    // Check if optional CFList is included
    if( size >= 16 )
 800922e:	897b      	ldrh	r3, [r7, #10]
 8009230:	2b0f      	cmp	r3, #15
 8009232:	d908      	bls.n	8009246 <LoRaMacJoinDecrypt+0x46>
    {
        aes_encrypt( buffer + 16, decBuffer + 16, &AesContext );
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f103 0010 	add.w	r0, r3, #16
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	3310      	adds	r3, #16
 800923e:	4a04      	ldr	r2, [pc, #16]	; (8009250 <LoRaMacJoinDecrypt+0x50>)
 8009240:	4619      	mov	r1, r3
 8009242:	f001 fe8d 	bl	800af60 <aes_encrypt>
    }
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	200004fc 	.word	0x200004fc

08009254 <LoRaMacJoinComputeSKeys>:

void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08a      	sub	sp, #40	; 0x28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	80fb      	strh	r3, [r7, #6]
    uint8_t nonce[16];
    uint8_t *pDevNonce = ( uint8_t * )&devNonce;
 8009264:	1dbb      	adds	r3, r7, #6
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
    
    memset1( AesContext.ksch, '\0', 240 );
 8009268:	22f0      	movs	r2, #240	; 0xf0
 800926a:	2100      	movs	r1, #0
 800926c:	4825      	ldr	r0, [pc, #148]	; (8009304 <LoRaMacJoinComputeSKeys+0xb0>)
 800926e:	f007 f895 	bl	801039c <memset1>
    aes_set_key( key, 16, &AesContext );
 8009272:	4a24      	ldr	r2, [pc, #144]	; (8009304 <LoRaMacJoinComputeSKeys+0xb0>)
 8009274:	2110      	movs	r1, #16
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f001 fd94 	bl	800ada4 <aes_set_key>

    memset1( nonce, 0, sizeof( nonce ) );
 800927c:	f107 0314 	add.w	r3, r7, #20
 8009280:	2210      	movs	r2, #16
 8009282:	2100      	movs	r1, #0
 8009284:	4618      	mov	r0, r3
 8009286:	f007 f889 	bl	801039c <memset1>
    nonce[0] = 0x01;
 800928a:	2301      	movs	r3, #1
 800928c:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 800928e:	f107 0314 	add.w	r3, r7, #20
 8009292:	3301      	adds	r3, #1
 8009294:	2206      	movs	r2, #6
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	4618      	mov	r0, r3
 800929a:	f007 f844 	bl	8010326 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 800929e:	f107 0314 	add.w	r3, r7, #20
 80092a2:	3307      	adds	r3, #7
 80092a4:	2202      	movs	r2, #2
 80092a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092a8:	4618      	mov	r0, r3
 80092aa:	f007 f83c 	bl	8010326 <memcpy1>
    aes_encrypt( nonce, nwkSKey, &AesContext );
 80092ae:	f107 0314 	add.w	r3, r7, #20
 80092b2:	4a14      	ldr	r2, [pc, #80]	; (8009304 <LoRaMacJoinComputeSKeys+0xb0>)
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f001 fe52 	bl	800af60 <aes_encrypt>

    memset1( nonce, 0, sizeof( nonce ) );
 80092bc:	f107 0314 	add.w	r3, r7, #20
 80092c0:	2210      	movs	r2, #16
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f007 f869 	bl	801039c <memset1>
    nonce[0] = 0x02;
 80092ca:	2302      	movs	r3, #2
 80092cc:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 80092ce:	f107 0314 	add.w	r3, r7, #20
 80092d2:	3301      	adds	r3, #1
 80092d4:	2206      	movs	r2, #6
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	4618      	mov	r0, r3
 80092da:	f007 f824 	bl	8010326 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 80092de:	f107 0314 	add.w	r3, r7, #20
 80092e2:	3307      	adds	r3, #7
 80092e4:	2202      	movs	r2, #2
 80092e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f007 f81c 	bl	8010326 <memcpy1>
    aes_encrypt( nonce, appSKey, &AesContext );
 80092ee:	f107 0314 	add.w	r3, r7, #20
 80092f2:	4a04      	ldr	r2, [pc, #16]	; (8009304 <LoRaMacJoinComputeSKeys+0xb0>)
 80092f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 fe32 	bl	800af60 <aes_encrypt>
}
 80092fc:	bf00      	nop
 80092fe:	3728      	adds	r7, #40	; 0x28
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200004fc 	.word	0x200004fc

08009308 <SendFrame>:
 * \brief   Prepares the payload of the frame
 *
 * \retval  [0: frame could be send, 1: error]
 */
bool SendFrame( void )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
	lwan_dev_params_update();
 800930e:	f000 f9b7 	bl	8009680 <lwan_dev_params_update>
	
	McpsReq_t mcpsReq;
	LoRaMacTxInfo_t txInfo;

	if( LoRaMacQueryTxPossible( appDataSize, &txInfo ) != LORAMAC_STATUS_OK )
 8009312:	4b2b      	ldr	r3, [pc, #172]	; (80093c0 <SendFrame+0xb8>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	1d3a      	adds	r2, r7, #4
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fd48 	bl	8007db0 <LoRaMacQueryTxPossible>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <SendFrame+0x3a>
	{
		// Send empty frame in order to flush MAC commands
		DebugPrintf("payload length error ...\r\n");
 8009326:	4827      	ldr	r0, [pc, #156]	; (80093c4 <SendFrame+0xbc>)
 8009328:	f006 ffac 	bl	8010284 <DebugPrintf>
		mcpsReq.Type = MCPS_UNCONFIRMED;
 800932c:	2300      	movs	r3, #0
 800932e:	723b      	strb	r3, [r7, #8]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8009330:	2300      	movs	r3, #0
 8009332:	613b      	str	r3, [r7, #16]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8009334:	2300      	movs	r3, #0
 8009336:	82bb      	strh	r3, [r7, #20]
		mcpsReq.Req.Unconfirmed.Datarate = currentDrForNoAdr;
 8009338:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <SendFrame+0xc0>)
 800933a:	f993 3000 	ldrsb.w	r3, [r3]
 800933e:	75bb      	strb	r3, [r7, #22]
 8009340:	e02e      	b.n	80093a0 <SendFrame+0x98>
	}
	else
	{
		if( isTxConfirmed == false )
 8009342:	4b22      	ldr	r3, [pc, #136]	; (80093cc <SendFrame+0xc4>)
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f083 0301 	eor.w	r3, r3, #1
 800934a:	b2db      	uxtb	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	d012      	beq.n	8009376 <SendFrame+0x6e>
		{
			DebugPrintf("unconfirmed uplink sending ...\r\n");
 8009350:	481f      	ldr	r0, [pc, #124]	; (80093d0 <SendFrame+0xc8>)
 8009352:	f006 ff97 	bl	8010284 <DebugPrintf>
			mcpsReq.Type = MCPS_UNCONFIRMED;
 8009356:	2300      	movs	r3, #0
 8009358:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Unconfirmed.fPort = appPort;
 800935a:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <SendFrame+0xcc>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Unconfirmed.fBuffer = appData;
 8009360:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <SendFrame+0xd0>)
 8009362:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Unconfirmed.fBufferSize = appDataSize;
 8009364:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <SendFrame+0xb8>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Unconfirmed.Datarate = currentDrForNoAdr;
 800936c:	4b16      	ldr	r3, [pc, #88]	; (80093c8 <SendFrame+0xc0>)
 800936e:	f993 3000 	ldrsb.w	r3, [r3]
 8009372:	75bb      	strb	r3, [r7, #22]
 8009374:	e014      	b.n	80093a0 <SendFrame+0x98>
		}
		else
		{
			DebugPrintf("confirmed uplink sending ...\r\n");
 8009376:	4819      	ldr	r0, [pc, #100]	; (80093dc <SendFrame+0xd4>)
 8009378:	f006 ff84 	bl	8010284 <DebugPrintf>
			mcpsReq.Type = MCPS_CONFIRMED;
 800937c:	2301      	movs	r3, #1
 800937e:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Confirmed.fPort = appPort;
 8009380:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <SendFrame+0xcc>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Confirmed.fBuffer = appData;
 8009386:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <SendFrame+0xd0>)
 8009388:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Confirmed.fBufferSize = appDataSize;
 800938a:	4b0d      	ldr	r3, [pc, #52]	; (80093c0 <SendFrame+0xb8>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Confirmed.NbTrials = confirmedNbTrials;
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <SendFrame+0xd8>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	75fb      	strb	r3, [r7, #23]
			mcpsReq.Req.Confirmed.Datarate = currentDrForNoAdr;
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <SendFrame+0xc0>)
 800939a:	f993 3000 	ldrsb.w	r3, [r3]
 800939e:	75bb      	strb	r3, [r7, #22]
		}
	}
	if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 80093a0:	f107 0308 	add.w	r3, r7, #8
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff fae9 	bl	800897c <LoRaMacMcpsRequest>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d101      	bne.n	80093b4 <SendFrame+0xac>
	{
		return false;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e000      	b.n	80093b6 <SendFrame+0xae>
	}
	return true;
 80093b4:	2301      	movs	r3, #1
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	2000002c 	.word	0x2000002c
 80093c4:	08012208 	.word	0x08012208
 80093c8:	20000ba8 	.word	0x20000ba8
 80093cc:	20000781 	.word	0x20000781
 80093d0:	08012224 	.word	0x08012224
 80093d4:	20000082 	.word	0x20000082
 80093d8:	20000b28 	.word	0x20000b28
 80093dc:	08012248 	.word	0x08012248
 80093e0:	20000083 	.word	0x20000083

080093e4 <OnTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnTxNextPacketTimerEvent( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	; 0x28
 80093e8:	af00      	add	r7, sp, #0
	MibRequestConfirm_t mibReq;
	LoRaMacStatus_t status;

	TimerStop( &TxNextPacketTimer );
 80093ea:	481b      	ldr	r0, [pc, #108]	; (8009458 <OnTxNextPacketTimerEvent+0x74>)
 80093ec:	f006 fdb8 	bl	800ff60 <TimerStop>

	mibReq.Type = MIB_NETWORK_JOINED;
 80093f0:	2301      	movs	r3, #1
 80093f2:	763b      	strb	r3, [r7, #24]
	status = LoRaMacMibGetRequestConfirm( &mibReq );
 80093f4:	f107 0318 	add.w	r3, r7, #24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fd73 	bl	8007ee4 <LoRaMacMibGetRequestConfirm>
 80093fe:	4603      	mov	r3, r0
 8009400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( status == LORAMAC_STATUS_OK )
 8009404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009408:	2b00      	cmp	r3, #0
 800940a:	d121      	bne.n	8009450 <OnTxNextPacketTimerEvent+0x6c>
	{
		if( mibReq.Param.IsNetworkJoined == true )
 800940c:	7f3b      	ldrb	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d006      	beq.n	8009420 <OnTxNextPacketTimerEvent+0x3c>
		{
			deviceState = DEVICE_STATE_SEND;
 8009412:	4b12      	ldr	r3, [pc, #72]	; (800945c <OnTxNextPacketTimerEvent+0x78>)
 8009414:	2202      	movs	r2, #2
 8009416:	701a      	strb	r2, [r3, #0]
			nextTx = true;
 8009418:	4b11      	ldr	r3, [pc, #68]	; (8009460 <OnTxNextPacketTimerEvent+0x7c>)
 800941a:	2201      	movs	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
			{
				deviceState = DEVICE_STATE_CYCLE;
			}
		}
	}
}
 800941e:	e017      	b.n	8009450 <OnTxNextPacketTimerEvent+0x6c>
			mlmeReq.Type = MLME_JOIN;
 8009420:	2300      	movs	r3, #0
 8009422:	713b      	strb	r3, [r7, #4]
			mlmeReq.Req.Join.DevEui = devEui;
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <OnTxNextPacketTimerEvent+0x80>)
 8009426:	60bb      	str	r3, [r7, #8]
			mlmeReq.Req.Join.AppEui = appEui;
 8009428:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <OnTxNextPacketTimerEvent+0x84>)
 800942a:	60fb      	str	r3, [r7, #12]
			mlmeReq.Req.Join.AppKey = appKey;
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <OnTxNextPacketTimerEvent+0x88>)
 800942e:	613b      	str	r3, [r7, #16]
			mlmeReq.Req.Join.NbTrials = 1;
 8009430:	2301      	movs	r3, #1
 8009432:	753b      	strb	r3, [r7, #20]
			if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 8009434:	1d3b      	adds	r3, r7, #4
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff f986 	bl	8008748 <LoRaMacMlmeRequest>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d103      	bne.n	800944a <OnTxNextPacketTimerEvent+0x66>
				deviceState = DEVICE_STATE_SLEEP;
 8009442:	4b06      	ldr	r3, [pc, #24]	; (800945c <OnTxNextPacketTimerEvent+0x78>)
 8009444:	2204      	movs	r2, #4
 8009446:	701a      	strb	r2, [r3, #0]
}
 8009448:	e002      	b.n	8009450 <OnTxNextPacketTimerEvent+0x6c>
				deviceState = DEVICE_STATE_CYCLE;
 800944a:	4b04      	ldr	r3, [pc, #16]	; (800945c <OnTxNextPacketTimerEvent+0x78>)
 800944c:	2203      	movs	r2, #3
 800944e:	701a      	strb	r2, [r3, #0]
}
 8009450:	bf00      	nop
 8009452:	3728      	adds	r7, #40	; 0x28
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000708 	.word	0x20000708
 800945c:	20000b08 	.word	0x20000b08
 8009460:	2000002d 	.word	0x2000002d
 8009464:	20000030 	.word	0x20000030
 8009468:	20000778 	.word	0x20000778
 800946c:	20000038 	.word	0x20000038

08009470 <McpsConfirm>:
 *
 * \param   [IN] mcpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	785b      	ldrb	r3, [r3, #1]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <McpsConfirm+0x26>
	{
		switch( mcpsConfirm->McpsRequest )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b03      	cmp	r3, #3
 8009486:	d008      	beq.n	800949a <McpsConfirm+0x2a>
 8009488:	2b03      	cmp	r3, #3
 800948a:	dc08      	bgt.n	800949e <McpsConfirm+0x2e>
 800948c:	2b00      	cmp	r3, #0
 800948e:	d008      	beq.n	80094a2 <McpsConfirm+0x32>
 8009490:	2b01      	cmp	r3, #1
 8009492:	d008      	beq.n	80094a6 <McpsConfirm+0x36>
			case MCPS_PROPRIETARY:
			{
				break;
			}
			default:
				break;
 8009494:	e003      	b.n	800949e <McpsConfirm+0x2e>
		}
	}
 8009496:	bf00      	nop
 8009498:	e006      	b.n	80094a8 <McpsConfirm+0x38>
				break;
 800949a:	bf00      	nop
 800949c:	e004      	b.n	80094a8 <McpsConfirm+0x38>
				break;
 800949e:	bf00      	nop
 80094a0:	e002      	b.n	80094a8 <McpsConfirm+0x38>
				break;
 80094a2:	bf00      	nop
 80094a4:	e000      	b.n	80094a8 <McpsConfirm+0x38>
				break;
 80094a6:	bf00      	nop
	nextTx = true;
 80094a8:	4b03      	ldr	r3, [pc, #12]	; (80094b8 <McpsConfirm+0x48>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr
 80094b8:	2000002d 	.word	0x2000002d

080094bc <downLinkDataHandle>:
	return 0;
}


void __attribute__((weak)) downLinkDataHandle(McpsIndication_t *mcpsIndication)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
	DebugPrintf("+REV DATA:%s,RXSIZE %d,PORT %d\r\n",mcpsIndication->RxSlot?"RXWIN2":"RXWIN1",mcpsIndication->BufferSize,mcpsIndication->Port);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7c5b      	ldrb	r3, [r3, #17]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <downLinkDataHandle+0x14>
 80094cc:	4914      	ldr	r1, [pc, #80]	; (8009520 <downLinkDataHandle+0x64>)
 80094ce:	e000      	b.n	80094d2 <downLinkDataHandle+0x16>
 80094d0:	4914      	ldr	r1, [pc, #80]	; (8009524 <downLinkDataHandle+0x68>)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7b1b      	ldrb	r3, [r3, #12]
 80094d6:	461a      	mov	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	78db      	ldrb	r3, [r3, #3]
 80094dc:	4812      	ldr	r0, [pc, #72]	; (8009528 <downLinkDataHandle+0x6c>)
 80094de:	f006 fed1 	bl	8010284 <DebugPrintf>
	DebugPrintf("+REV DATA:");
 80094e2:	4812      	ldr	r0, [pc, #72]	; (800952c <downLinkDataHandle+0x70>)
 80094e4:	f006 fece 	bl	8010284 <DebugPrintf>
	for(uint8_t i=0;i<mcpsIndication->BufferSize;i++)
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
 80094ec:	e00b      	b.n	8009506 <downLinkDataHandle+0x4a>
	{
		DebugPrintf("%02X",mcpsIndication->Buffer[i]);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4413      	add	r3, r2
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	4619      	mov	r1, r3
 80094fa:	480d      	ldr	r0, [pc, #52]	; (8009530 <downLinkDataHandle+0x74>)
 80094fc:	f006 fec2 	bl	8010284 <DebugPrintf>
	for(uint8_t i=0;i<mcpsIndication->BufferSize;i++)
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	3301      	adds	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	7b1b      	ldrb	r3, [r3, #12]
 800950a:	7bfa      	ldrb	r2, [r7, #15]
 800950c:	429a      	cmp	r2, r3
 800950e:	d3ee      	bcc.n	80094ee <downLinkDataHandle+0x32>
	}
	DebugPrintf("\r\n");
 8009510:	4808      	ldr	r0, [pc, #32]	; (8009534 <downLinkDataHandle+0x78>)
 8009512:	f006 feb7 	bl	8010284 <DebugPrintf>
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	08012268 	.word	0x08012268
 8009524:	08012270 	.word	0x08012270
 8009528:	08012278 	.word	0x08012278
 800952c:	0801229c 	.word	0x0801229c
 8009530:	080122a8 	.word	0x080122a8
 8009534:	080122b0 	.word	0x080122b0

08009538 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	785b      	ldrb	r3, [r3, #1]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d12a      	bne.n	800959e <McpsIndication+0x66>
	{
		return;
	}
	DebugPrintf( "receive data: rssi = %d, snr = %d, datarate = %d\r\n", mcpsIndication->Rssi, (int)mcpsIndication->Snr,(int)mcpsIndication->RxDatarate);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800954e:	4619      	mov	r1, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	791b      	ldrb	r3, [r3, #4]
 800955c:	4812      	ldr	r0, [pc, #72]	; (80095a8 <McpsIndication+0x70>)
 800955e:	f006 fe91 	bl	8010284 <DebugPrintf>
	switch( mcpsIndication->McpsIndication )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b03      	cmp	r3, #3
 8009568:	d80a      	bhi.n	8009580 <McpsIndication+0x48>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <McpsIndication+0x38>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009581 	.word	0x08009581
 8009574:	08009581 	.word	0x08009581
 8009578:	08009581 	.word	0x08009581
 800957c:	08009581 	.word	0x08009581
		case MCPS_MULTICAST:
		{
			break;
		}
		default:
			break;
 8009580:	bf00      	nop

	// Check Multicast
	// Check Port
	// Check Datarate
	// Check FramePending
	if( mcpsIndication->FramePending == true )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	795b      	ldrb	r3, [r3, #5]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d101      	bne.n	800958e <McpsIndication+0x56>
	{
		// The server signals that it has pending data to be sent.
		// We schedule an uplink as soon as possible to flush the server.
		OnTxNextPacketTimerEvent( );
 800958a:	f7ff ff2b 	bl	80093e4 <OnTxNextPacketTimerEvent>
	// Check Buffer
	// Check BufferSize
	// Check Rssi
	// Check Snr
	// Check RxSlot
	if( mcpsIndication->RxData == true )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7b5b      	ldrb	r3, [r3, #13]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d004      	beq.n	80095a0 <McpsIndication+0x68>
	{
		downLinkDataHandle(mcpsIndication);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7ff ff90 	bl	80094bc <downLinkDataHandle>
 800959c:	e000      	b.n	80095a0 <McpsIndication+0x68>
		return;
 800959e:	bf00      	nop
	}
}
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	080122b4 	.word	0x080122b4

080095ac <dev_time_updated>:


void __attribute__((weak)) dev_time_updated()
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
	DebugPrintf("device time updated\r\n");
 80095b0:	4802      	ldr	r0, [pc, #8]	; (80095bc <dev_time_updated+0x10>)
 80095b2:	f006 fe67 	bl	8010284 <DebugPrintf>
}
 80095b6:	bf00      	nop
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	080122e8 	.word	0x080122e8

080095c0 <MlmeConfirm>:
 *
 * \param   [IN] mlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	switch( mlmeConfirm->MlmeRequest )
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b05      	cmp	r3, #5
 80095ce:	d026      	beq.n	800961e <MlmeConfirm+0x5e>
 80095d0:	2b05      	cmp	r3, #5
 80095d2:	dc2b      	bgt.n	800962c <MlmeConfirm+0x6c>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <MlmeConfirm+0x1e>
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d029      	beq.n	8009630 <MlmeConfirm+0x70>
				dev_time_updated();
			}
			break;
		}
		default:
			break;
 80095dc:	e026      	b.n	800962c <MlmeConfirm+0x6c>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	785b      	ldrb	r3, [r3, #1]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10d      	bne.n	8009602 <MlmeConfirm+0x42>
				DebugPrintf("joined\r\n");
 80095e6:	4818      	ldr	r0, [pc, #96]	; (8009648 <MlmeConfirm+0x88>)
 80095e8:	f006 fe4c 	bl	8010284 <DebugPrintf>
				if(passthroughMode == false)
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <MlmeConfirm+0x8c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f083 0301 	eor.w	r3, r3, #1
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01c      	beq.n	8009634 <MlmeConfirm+0x74>
					deviceState = DEVICE_STATE_SEND;
 80095fa:	4b15      	ldr	r3, [pc, #84]	; (8009650 <MlmeConfirm+0x90>)
 80095fc:	2202      	movs	r2, #2
 80095fe:	701a      	strb	r2, [r3, #0]
			break;
 8009600:	e018      	b.n	8009634 <MlmeConfirm+0x74>
				uint32_t rejoin_delay = 30000;
 8009602:	f247 5330 	movw	r3, #30000	; 0x7530
 8009606:	60fb      	str	r3, [r7, #12]
				DebugPrintf("join failed, join again at 30s later\r\n");
 8009608:	4812      	ldr	r0, [pc, #72]	; (8009654 <MlmeConfirm+0x94>)
 800960a:	f006 fe3b 	bl	8010284 <DebugPrintf>
				TimerSetValue( &TxNextPacketTimer, rejoin_delay );
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	4811      	ldr	r0, [pc, #68]	; (8009658 <MlmeConfirm+0x98>)
 8009612:	f006 fd61 	bl	80100d8 <TimerSetValue>
				TimerStart( &TxNextPacketTimer );
 8009616:	4810      	ldr	r0, [pc, #64]	; (8009658 <MlmeConfirm+0x98>)
 8009618:	f006 fb5a 	bl	800fcd0 <TimerStart>
			break;
 800961c:	e00a      	b.n	8009634 <MlmeConfirm+0x74>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	785b      	ldrb	r3, [r3, #1]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d108      	bne.n	8009638 <MlmeConfirm+0x78>
				dev_time_updated();
 8009626:	f7ff ffc1 	bl	80095ac <dev_time_updated>
			break;
 800962a:	e005      	b.n	8009638 <MlmeConfirm+0x78>
			break;
 800962c:	bf00      	nop
 800962e:	e004      	b.n	800963a <MlmeConfirm+0x7a>
			break;
 8009630:	bf00      	nop
 8009632:	e002      	b.n	800963a <MlmeConfirm+0x7a>
			break;
 8009634:	bf00      	nop
 8009636:	e000      	b.n	800963a <MlmeConfirm+0x7a>
			break;
 8009638:	bf00      	nop
	}
	nextTx = true;
 800963a:	4b08      	ldr	r3, [pc, #32]	; (800965c <MlmeConfirm+0x9c>)
 800963c:	2201      	movs	r2, #1
 800963e:	701a      	strb	r2, [r3, #0]
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	08012300 	.word	0x08012300
 800964c:	2000071c 	.word	0x2000071c
 8009650:	20000b08 	.word	0x20000b08
 8009654:	0801230c 	.word	0x0801230c
 8009658:	20000708 	.word	0x20000708
 800965c:	2000002d 	.word	0x2000002d

08009660 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] mlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	switch( mlmeIndication->MlmeIndication )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b04      	cmp	r3, #4
 800966e:	d102      	bne.n	8009676 <MlmeIndication+0x16>
	{
		case MLME_SCHEDULE_UPLINK:
		{// The MAC signals that we shall provide an uplink as soon as possible
			OnTxNextPacketTimerEvent( );
 8009670:	f7ff feb8 	bl	80093e4 <OnTxNextPacketTimerEvent>
			break;
 8009674:	e000      	b.n	8009678 <MlmeIndication+0x18>
		}
		default:
			break;
 8009676:	bf00      	nop
	}
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <lwan_dev_params_update>:


void lwan_dev_params_update( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b092      	sub	sp, #72	; 0x48
 8009684:	af00      	add	r7, sp, #0
#if defined( REGION_EU868 )
	LoRaMacChannelAdd( 3, ( ChannelParams_t )EU868_LC4 );
 8009686:	4a28      	ldr	r2, [pc, #160]	; (8009728 <lwan_dev_params_update+0xa8>)
 8009688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800968c:	ca07      	ldmia	r2, {r0, r1, r2}
 800968e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009692:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009698:	2003      	movs	r0, #3
 800969a:	f7fe ffad 	bl	80085f8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 4, ( ChannelParams_t )EU868_LC5 );
 800969e:	4a23      	ldr	r2, [pc, #140]	; (800972c <lwan_dev_params_update+0xac>)
 80096a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80096a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096b0:	2004      	movs	r0, #4
 80096b2:	f7fe ffa1 	bl	80085f8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 5, ( ChannelParams_t )EU868_LC6 );
 80096b6:	4a1e      	ldr	r2, [pc, #120]	; (8009730 <lwan_dev_params_update+0xb0>)
 80096b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80096be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096c8:	2005      	movs	r0, #5
 80096ca:	f7fe ff95 	bl	80085f8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 6, ( ChannelParams_t )EU868_LC7 );
 80096ce:	4a19      	ldr	r2, [pc, #100]	; (8009734 <lwan_dev_params_update+0xb4>)
 80096d0:	f107 0318 	add.w	r3, r7, #24
 80096d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80096d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096da:	f107 0318 	add.w	r3, r7, #24
 80096de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096e0:	2006      	movs	r0, #6
 80096e2:	f7fe ff89 	bl	80085f8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 7, ( ChannelParams_t )EU868_LC8 );
 80096e6:	4a14      	ldr	r2, [pc, #80]	; (8009738 <lwan_dev_params_update+0xb8>)
 80096e8:	f107 030c 	add.w	r3, r7, #12
 80096ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80096ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096f2:	f107 030c 	add.w	r3, r7, #12
 80096f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096f8:	2007      	movs	r0, #7
 80096fa:	f7fe ff7d 	bl	80085f8 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 7, ( ChannelParams_t )AS923_LC8 );
#endif

	MibRequestConfirm_t mibReq;

	mibReq.Type = MIB_CHANNELS_DEFAULT_MASK;
 80096fe:	230d      	movs	r3, #13
 8009700:	703b      	strb	r3, [r7, #0]
	mibReq.Param.ChannelsMask = userChannelsMask;
 8009702:	4b0e      	ldr	r3, [pc, #56]	; (800973c <lwan_dev_params_update+0xbc>)
 8009704:	607b      	str	r3, [r7, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 8009706:	463b      	mov	r3, r7
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fd25 	bl	8008158 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_CHANNELS_MASK;
 800970e:	230c      	movs	r3, #12
 8009710:	703b      	strb	r3, [r7, #0]
	mibReq.Param.ChannelsMask = userChannelsMask;
 8009712:	4b0a      	ldr	r3, [pc, #40]	; (800973c <lwan_dev_params_update+0xbc>)
 8009714:	607b      	str	r3, [r7, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 8009716:	463b      	mov	r3, r7
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fd1d 	bl	8008158 <LoRaMacMibSetRequestConfirm>
}
 800971e:	bf00      	nop
 8009720:	3748      	adds	r7, #72	; 0x48
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	08012334 	.word	0x08012334
 800972c:	08012340 	.word	0x08012340
 8009730:	0801234c 	.word	0x0801234c
 8009734:	08012358 	.word	0x08012358
 8009738:	08012364 	.word	0x08012364
 800973c:	2000006c 	.word	0x2000006c

08009740 <LoraWanInit>:
LoRaMacPrimitives_t LoRaMacPrimitive;
LoRaMacCallback_t LoRaMacCallback;


void LoraWanInit(DeviceClass_t lorawanClass,LoRaMacRegion_t region)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	460a      	mov	r2, r1
 800974a:	71fb      	strb	r3, [r7, #7]
 800974c:	4613      	mov	r3, r2
 800974e:	71bb      	strb	r3, [r7, #6]
	DebugPrintf("\r\nLoRaWAN ");
 8009750:	4855      	ldr	r0, [pc, #340]	; (80098a8 <LoraWanInit+0x168>)
 8009752:	f006 fd97 	bl	8010284 <DebugPrintf>
	switch(region)
 8009756:	79bb      	ldrb	r3, [r7, #6]
 8009758:	3b01      	subs	r3, #1
 800975a:	2b0b      	cmp	r3, #11
 800975c:	d846      	bhi.n	80097ec <LoraWanInit+0xac>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <LoraWanInit+0x24>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	080097a5 	.word	0x080097a5
 8009768:	080097ad 	.word	0x080097ad
 800976c:	080097b5 	.word	0x080097b5
 8009770:	080097bd 	.word	0x080097bd
 8009774:	080097c5 	.word	0x080097c5
 8009778:	080097cd 	.word	0x080097cd
 800977c:	080097d5 	.word	0x080097d5
 8009780:	080097dd 	.word	0x080097dd
 8009784:	080097e5 	.word	0x080097e5
 8009788:	080097ed 	.word	0x080097ed
 800978c:	08009795 	.word	0x08009795
 8009790:	0800979d 	.word	0x0800979d
	{
		case LORAMAC_REGION_AS923_AS1:
			DebugPrintf("AS923(AS1:922.0-923.4MHz)");
 8009794:	4845      	ldr	r0, [pc, #276]	; (80098ac <LoraWanInit+0x16c>)
 8009796:	f006 fd75 	bl	8010284 <DebugPrintf>
			break;
 800979a:	e027      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_AS923_AS2:
			DebugPrintf("AS923(AS2:923.2-924.6MHz)");
 800979c:	4844      	ldr	r0, [pc, #272]	; (80098b0 <LoraWanInit+0x170>)
 800979e:	f006 fd71 	bl	8010284 <DebugPrintf>
			break;
 80097a2:	e023      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_AU915:
			DebugPrintf("AU915");
 80097a4:	4843      	ldr	r0, [pc, #268]	; (80098b4 <LoraWanInit+0x174>)
 80097a6:	f006 fd6d 	bl	8010284 <DebugPrintf>
			break;
 80097aa:	e01f      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_CN470:
			DebugPrintf("CN470");
 80097ac:	4842      	ldr	r0, [pc, #264]	; (80098b8 <LoraWanInit+0x178>)
 80097ae:	f006 fd69 	bl	8010284 <DebugPrintf>
			break;
 80097b2:	e01b      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_CN779:
			DebugPrintf("CN779");
 80097b4:	4841      	ldr	r0, [pc, #260]	; (80098bc <LoraWanInit+0x17c>)
 80097b6:	f006 fd65 	bl	8010284 <DebugPrintf>
			break;
 80097ba:	e017      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_EU433:
			DebugPrintf("EU433");
 80097bc:	4840      	ldr	r0, [pc, #256]	; (80098c0 <LoraWanInit+0x180>)
 80097be:	f006 fd61 	bl	8010284 <DebugPrintf>
			break;
 80097c2:	e013      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_EU868:
			DebugPrintf("EU868");
 80097c4:	483f      	ldr	r0, [pc, #252]	; (80098c4 <LoraWanInit+0x184>)
 80097c6:	f006 fd5d 	bl	8010284 <DebugPrintf>
			break;
 80097ca:	e00f      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_KR920:
			DebugPrintf("KR920");
 80097cc:	483e      	ldr	r0, [pc, #248]	; (80098c8 <LoraWanInit+0x188>)
 80097ce:	f006 fd59 	bl	8010284 <DebugPrintf>
			break;
 80097d2:	e00b      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_IN865:
			DebugPrintf("IN865");
 80097d4:	483d      	ldr	r0, [pc, #244]	; (80098cc <LoraWanInit+0x18c>)
 80097d6:	f006 fd55 	bl	8010284 <DebugPrintf>
			break;
 80097da:	e007      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_US915:
			DebugPrintf("US915");
 80097dc:	483c      	ldr	r0, [pc, #240]	; (80098d0 <LoraWanInit+0x190>)
 80097de:	f006 fd51 	bl	8010284 <DebugPrintf>
			break;
 80097e2:	e003      	b.n	80097ec <LoraWanInit+0xac>
		case LORAMAC_REGION_US915_HYBRID:
			DebugPrintf("US915_HYBRID ");
 80097e4:	483b      	ldr	r0, [pc, #236]	; (80098d4 <LoraWanInit+0x194>)
 80097e6:	f006 fd4d 	bl	8010284 <DebugPrintf>
			break;
 80097ea:	bf00      	nop
	}
	DebugPrintf(" Class %X start!\r\n\r\n",loraWanClass+10);
 80097ec:	4b3a      	ldr	r3, [pc, #232]	; (80098d8 <LoraWanInit+0x198>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	330a      	adds	r3, #10
 80097f2:	4619      	mov	r1, r3
 80097f4:	4839      	ldr	r0, [pc, #228]	; (80098dc <LoraWanInit+0x19c>)
 80097f6:	f006 fd45 	bl	8010284 <DebugPrintf>

	if(region == LORAMAC_REGION_AS923_AS1 || region == LORAMAC_REGION_AS923_AS2)
 80097fa:	79bb      	ldrb	r3, [r7, #6]
 80097fc:	2b0b      	cmp	r3, #11
 80097fe:	d002      	beq.n	8009806 <LoraWanInit+0xc6>
 8009800:	79bb      	ldrb	r3, [r7, #6]
 8009802:	2b0c      	cmp	r3, #12
 8009804:	d101      	bne.n	800980a <LoraWanInit+0xca>
		region = LORAMAC_REGION_AS923;
 8009806:	2300      	movs	r3, #0
 8009808:	71bb      	strb	r3, [r7, #6]
	MibRequestConfirm_t mibReq;

	LoRaMacPrimitive.MacMcpsConfirm = McpsConfirm;
 800980a:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <LoraWanInit+0x1a0>)
 800980c:	4a35      	ldr	r2, [pc, #212]	; (80098e4 <LoraWanInit+0x1a4>)
 800980e:	601a      	str	r2, [r3, #0]
	LoRaMacPrimitive.MacMcpsIndication = McpsIndication;
 8009810:	4b33      	ldr	r3, [pc, #204]	; (80098e0 <LoraWanInit+0x1a0>)
 8009812:	4a35      	ldr	r2, [pc, #212]	; (80098e8 <LoraWanInit+0x1a8>)
 8009814:	605a      	str	r2, [r3, #4]
	LoRaMacPrimitive.MacMlmeConfirm = MlmeConfirm;
 8009816:	4b32      	ldr	r3, [pc, #200]	; (80098e0 <LoraWanInit+0x1a0>)
 8009818:	4a34      	ldr	r2, [pc, #208]	; (80098ec <LoraWanInit+0x1ac>)
 800981a:	609a      	str	r2, [r3, #8]
	LoRaMacPrimitive.MacMlmeIndication = MlmeIndication;
 800981c:	4b30      	ldr	r3, [pc, #192]	; (80098e0 <LoraWanInit+0x1a0>)
 800981e:	4a34      	ldr	r2, [pc, #208]	; (80098f0 <LoraWanInit+0x1b0>)
 8009820:	60da      	str	r2, [r3, #12]
	LoRaMacCallback.GetBatteryLevel = BoardGetBatteryLevel;
 8009822:	4b34      	ldr	r3, [pc, #208]	; (80098f4 <LoraWanInit+0x1b4>)
 8009824:	4a34      	ldr	r2, [pc, #208]	; (80098f8 <LoraWanInit+0x1b8>)
 8009826:	601a      	str	r2, [r3, #0]
	LoRaMacCallback.GetTemperatureLevel = NULL;
 8009828:	4b32      	ldr	r3, [pc, #200]	; (80098f4 <LoraWanInit+0x1b4>)
 800982a:	2200      	movs	r2, #0
 800982c:	605a      	str	r2, [r3, #4]
	LoRaMacInitialization( &LoRaMacPrimitive, &LoRaMacCallback,region);
 800982e:	79bb      	ldrb	r3, [r7, #6]
 8009830:	461a      	mov	r2, r3
 8009832:	4930      	ldr	r1, [pc, #192]	; (80098f4 <LoraWanInit+0x1b4>)
 8009834:	482a      	ldr	r0, [pc, #168]	; (80098e0 <LoraWanInit+0x1a0>)
 8009836:	f7fe f8b5 	bl	80079a4 <LoRaMacInitialization>
	TimerStop( &TxNextPacketTimer );
 800983a:	4830      	ldr	r0, [pc, #192]	; (80098fc <LoraWanInit+0x1bc>)
 800983c:	f006 fb90 	bl	800ff60 <TimerStop>
	TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
 8009840:	492f      	ldr	r1, [pc, #188]	; (8009900 <LoraWanInit+0x1c0>)
 8009842:	482e      	ldr	r0, [pc, #184]	; (80098fc <LoraWanInit+0x1bc>)
 8009844:	f006 fa2a 	bl	800fc9c <TimerInit>

	mibReq.Type = MIB_ADR;
 8009848:	2302      	movs	r3, #2
 800984a:	733b      	strb	r3, [r7, #12]
	mibReq.Param.AdrEnable = loraWanAdr;
 800984c:	4b2d      	ldr	r3, [pc, #180]	; (8009904 <LoraWanInit+0x1c4>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	743b      	strb	r3, [r7, #16]
	LoRaMacMibSetRequestConfirm( &mibReq );
 8009852:	f107 030c 	add.w	r3, r7, #12
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fc7e 	bl	8008158 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_PUBLIC_NETWORK;
 800985c:	2307      	movs	r3, #7
 800985e:	733b      	strb	r3, [r7, #12]
	mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009860:	2301      	movs	r3, #1
 8009862:	743b      	strb	r3, [r7, #16]
	LoRaMacMibSetRequestConfirm( &mibReq );
 8009864:	f107 030c 	add.w	r3, r7, #12
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe fc75 	bl	8008158 <LoRaMacMibSetRequestConfirm>

	lwan_dev_params_update();
 800986e:	f7ff ff07 	bl	8009680 <lwan_dev_params_update>

	mibReq.Type = MIB_DEVICE_CLASS;
 8009872:	2300      	movs	r3, #0
 8009874:	733b      	strb	r3, [r7, #12]
	LoRaMacMibGetRequestConfirm( &mibReq );
 8009876:	f107 030c 	add.w	r3, r7, #12
 800987a:	4618      	mov	r0, r3
 800987c:	f7fe fb32 	bl	8007ee4 <LoRaMacMibGetRequestConfirm>
	
	if(loraWanClass != mibReq.Param.Class)
 8009880:	7c3a      	ldrb	r2, [r7, #16]
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <LoraWanInit+0x198>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d007      	beq.n	800989a <LoraWanInit+0x15a>
	{
		mibReq.Param.Class = loraWanClass;
 800988a:	4b13      	ldr	r3, [pc, #76]	; (80098d8 <LoraWanInit+0x198>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	743b      	strb	r3, [r7, #16]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fc5f 	bl	8008158 <LoRaMacMibSetRequestConfirm>
	}

	deviceState = DEVICE_STATE_JOIN;
 800989a:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <LoraWanInit+0x1c8>)
 800989c:	2201      	movs	r2, #1
 800989e:	701a      	strb	r2, [r3, #0]
}
 80098a0:	bf00      	nop
 80098a2:	3718      	adds	r7, #24
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	08012370 	.word	0x08012370
 80098ac:	0801237c 	.word	0x0801237c
 80098b0:	08012398 	.word	0x08012398
 80098b4:	080123b4 	.word	0x080123b4
 80098b8:	080123bc 	.word	0x080123bc
 80098bc:	080123c4 	.word	0x080123c4
 80098c0:	080123cc 	.word	0x080123cc
 80098c4:	080123d4 	.word	0x080123d4
 80098c8:	080123dc 	.word	0x080123dc
 80098cc:	080123e4 	.word	0x080123e4
 80098d0:	080123ec 	.word	0x080123ec
 80098d4:	080123f4 	.word	0x080123f4
 80098d8:	20000780 	.word	0x20000780
 80098dc:	08012404 	.word	0x08012404
 80098e0:	20000b10 	.word	0x20000b10
 80098e4:	08009471 	.word	0x08009471
 80098e8:	08009539 	.word	0x08009539
 80098ec:	080095c1 	.word	0x080095c1
 80098f0:	08009661 	.word	0x08009661
 80098f4:	20000b20 	.word	0x20000b20
 80098f8:	0800b115 	.word	0x0800b115
 80098fc:	20000708 	.word	0x20000708
 8009900:	080093e5 	.word	0x080093e5
 8009904:	20000081 	.word	0x20000081
 8009908:	20000b08 	.word	0x20000b08

0800990c <LoraWanJoin>:

void LoraWanJoin()
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
	if( overTheAirActivation )
 8009912:	4b30      	ldr	r3, [pc, #192]	; (80099d4 <LoraWanJoin+0xc8>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d019      	beq.n	800994e <LoraWanJoin+0x42>
	{
		//DebugPrintf("joining...");
		MlmeReq_t mlmeReq;
		
		mlmeReq.Type = MLME_JOIN;
 800991a:	2300      	movs	r3, #0
 800991c:	733b      	strb	r3, [r7, #12]
		mlmeReq.Req.Join.DevEui = devEui;
 800991e:	4b2e      	ldr	r3, [pc, #184]	; (80099d8 <LoraWanJoin+0xcc>)
 8009920:	613b      	str	r3, [r7, #16]
		mlmeReq.Req.Join.AppEui = appEui;
 8009922:	4b2e      	ldr	r3, [pc, #184]	; (80099dc <LoraWanJoin+0xd0>)
 8009924:	617b      	str	r3, [r7, #20]
		mlmeReq.Req.Join.AppKey = appKey;
 8009926:	4b2e      	ldr	r3, [pc, #184]	; (80099e0 <LoraWanJoin+0xd4>)
 8009928:	61bb      	str	r3, [r7, #24]
		mlmeReq.Req.Join.NbTrials = 3;
 800992a:	2303      	movs	r3, #3
 800992c:	773b      	strb	r3, [r7, #28]

        if( nextTx == true )
 800992e:	4b2d      	ldr	r3, [pc, #180]	; (80099e4 <LoraWanJoin+0xd8>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <LoraWanJoin+0x3a>
        {
        	DebugPrintf("+JOIN:STARTING...\r\n");
 8009936:	482c      	ldr	r0, [pc, #176]	; (80099e8 <LoraWanJoin+0xdc>)
 8009938:	f006 fca4 	bl	8010284 <DebugPrintf>
        	LoRaMacMlmeRequest( &mlmeReq );
 800993c:	f107 030c 	add.w	r3, r7, #12
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe ff01 	bl	8008748 <LoRaMacMlmeRequest>
        }
        deviceState = DEVICE_STATE_SLEEP;
 8009946:	4b29      	ldr	r3, [pc, #164]	; (80099ec <LoraWanJoin+0xe0>)
 8009948:	2204      	movs	r2, #4
 800994a:	701a      	strb	r2, [r3, #0]
		mibReq.Param.IsNetworkJoined = true;
		LoRaMacMibSetRequestConfirm( &mibReq );
		
		deviceState = DEVICE_STATE_SEND;
	}
}
 800994c:	e03e      	b.n	80099cc <LoraWanJoin+0xc0>
        if( devAddr == 0 )
 800994e:	4b28      	ldr	r3, [pc, #160]	; (80099f0 <LoraWanJoin+0xe4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10e      	bne.n	8009974 <LoraWanJoin+0x68>
            srand1( BoardGetRandomSeed( ) );
 8009956:	f001 fbbd 	bl	800b0d4 <BoardGetRandomSeed>
 800995a:	4603      	mov	r3, r0
 800995c:	4618      	mov	r0, r3
 800995e:	f006 fcbd 	bl	80102dc <srand1>
            devAddr = randr( 0, 0x01FFFFFF );
 8009962:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009966:	2000      	movs	r0, #0
 8009968:	f006 fcc6 	bl	80102f8 <randr>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	4b1f      	ldr	r3, [pc, #124]	; (80099f0 <LoraWanJoin+0xe4>)
 8009972:	601a      	str	r2, [r3, #0]
		mibReq.Type = MIB_NET_ID;
 8009974:	2303      	movs	r3, #3
 8009976:	703b      	strb	r3, [r7, #0]
		mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009978:	2300      	movs	r3, #0
 800997a:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 800997c:	463b      	mov	r3, r7
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fbea 	bl	8008158 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_DEV_ADDR;
 8009984:	2304      	movs	r3, #4
 8009986:	703b      	strb	r3, [r7, #0]
		mibReq.Param.DevAddr = devAddr;
 8009988:	4b19      	ldr	r3, [pc, #100]	; (80099f0 <LoraWanJoin+0xe4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 800998e:	463b      	mov	r3, r7
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe fbe1 	bl	8008158 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NWK_SKEY;
 8009996:	2305      	movs	r3, #5
 8009998:	703b      	strb	r3, [r7, #0]
		mibReq.Param.NwkSKey = nwkSKey;
 800999a:	4b16      	ldr	r3, [pc, #88]	; (80099f4 <LoraWanJoin+0xe8>)
 800999c:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 800999e:	463b      	mov	r3, r7
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe fbd9 	bl	8008158 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_APP_SKEY;
 80099a6:	2306      	movs	r3, #6
 80099a8:	703b      	strb	r3, [r7, #0]
		mibReq.Param.AppSKey = appSKey;
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <LoraWanJoin+0xec>)
 80099ac:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 80099ae:	463b      	mov	r3, r7
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe fbd1 	bl	8008158 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NETWORK_JOINED;
 80099b6:	2301      	movs	r3, #1
 80099b8:	703b      	strb	r3, [r7, #0]
		mibReq.Param.IsNetworkJoined = true;
 80099ba:	2301      	movs	r3, #1
 80099bc:	713b      	strb	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 80099be:	463b      	mov	r3, r7
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fe fbc9 	bl	8008158 <LoRaMacMibSetRequestConfirm>
		deviceState = DEVICE_STATE_SEND;
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <LoraWanJoin+0xe0>)
 80099c8:	2202      	movs	r2, #2
 80099ca:	701a      	strb	r2, [r3, #0]
}
 80099cc:	bf00      	nop
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20000080 	.word	0x20000080
 80099d8:	20000030 	.word	0x20000030
 80099dc:	20000778 	.word	0x20000778
 80099e0:	20000038 	.word	0x20000038
 80099e4:	2000002d 	.word	0x2000002d
 80099e8:	0801241c 	.word	0x0801241c
 80099ec:	20000b08 	.word	0x20000b08
 80099f0:	20000068 	.word	0x20000068
 80099f4:	20000048 	.word	0x20000048
 80099f8:	20000058 	.word	0x20000058

080099fc <LoraWanSend>:

void LoraWanSend()
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
	if( nextTx == true )
 8009a02:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <LoraWanSend+0x48>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d017      	beq.n	8009a3a <LoraWanSend+0x3e>
	{
		MibRequestConfirm_t mibReq;
		mibReq.Type = MIB_DEVICE_CLASS;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	713b      	strb	r3, [r7, #4]
		LoRaMacMibGetRequestConfirm( &mibReq );
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe fa67 	bl	8007ee4 <LoRaMacMibGetRequestConfirm>

		if(loraWanClass != mibReq.Param.Class)
 8009a16:	7a3a      	ldrb	r2, [r7, #8]
 8009a18:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <LoraWanSend+0x4c>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d006      	beq.n	8009a2e <LoraWanSend+0x32>
		{
			mibReq.Param.Class = loraWanClass;
 8009a20:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <LoraWanSend+0x4c>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	723b      	strb	r3, [r7, #8]
			LoRaMacMibSetRequestConfirm( &mibReq );
 8009a26:	1d3b      	adds	r3, r7, #4
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fb95 	bl	8008158 <LoRaMacMibSetRequestConfirm>
		}

		nextTx = SendFrame( );
 8009a2e:	f7ff fc6b 	bl	8009308 <SendFrame>
 8009a32:	4603      	mov	r3, r0
 8009a34:	461a      	mov	r2, r3
 8009a36:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <LoraWanSend+0x48>)
 8009a38:	701a      	strb	r2, [r3, #0]
	}
}
 8009a3a:	bf00      	nop
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	2000002d 	.word	0x2000002d
 8009a48:	20000780 	.word	0x20000780

08009a4c <LoraWanCycle>:

void LoraWanCycle(uint32_t dutyCycle)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	TimerSetValue( &TxNextPacketTimer, dutyCycle );
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4805      	ldr	r0, [pc, #20]	; (8009a6c <LoraWanCycle+0x20>)
 8009a58:	f006 fb3e 	bl	80100d8 <TimerSetValue>
	TimerStart( &TxNextPacketTimer );
 8009a5c:	4803      	ldr	r0, [pc, #12]	; (8009a6c <LoraWanCycle+0x20>)
 8009a5e:	f006 f937 	bl	800fcd0 <TimerStart>
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20000708 	.word	0x20000708

08009a70 <RegionIsActive>:
#define US915_HYBRID_APPLY_DR_OFFSET( )
#define US915_HYBRID_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009a7a:	79fb      	ldrb	r3, [r7, #7]
 8009a7c:	2b05      	cmp	r3, #5
 8009a7e:	d101      	bne.n	8009a84 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8009a80:	2301      	movs	r3, #1
 8009a82:	e000      	b.n	8009a86 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        US915_HYBRID_IS_ACTIVE( );
        default:
        {
            return false;
 8009a84:	2300      	movs	r3, #0
        }
    }
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr

08009a90 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d105      	bne.n	8009ab2 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8009aa6:	6838      	ldr	r0, [r7, #0]
 8009aa8:	f007 f8ac 	bl	8010c04 <RegionEU868GetPhyParam>
 8009aac:	4603      	mov	r3, r0
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e001      	b.n	8009ab6 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        US915_HYBRID_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	4603      	mov	r3, r0
 8009aca:	6039      	str	r1, [r7, #0]
 8009acc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	d103      	bne.n	8009adc <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8009ad4:	6838      	ldr	r0, [r7, #0]
 8009ad6:	f007 f99f 	bl	8010e18 <RegionEU868SetBandTxDone>
 8009ada:	e000      	b.n	8009ade <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        US915_HYBRID_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8009adc:	bf00      	nop
        }
    }
}
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitType_t type )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	4603      	mov	r3, r0
 8009aec:	460a      	mov	r2, r1
 8009aee:	71fb      	strb	r3, [r7, #7]
 8009af0:	4613      	mov	r3, r2
 8009af2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d104      	bne.n	8009b04 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8009afa:	79bb      	ldrb	r3, [r7, #6]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f007 f9ad 	bl	8010e5c <RegionEU868InitDefaults>
 8009b02:	e000      	b.n	8009b06 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        US915_HYBRID_INIT_DEFAULTS( );
        default:
        {
            break;
 8009b04:	bf00      	nop
        }
    }
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	4603      	mov	r3, r0
 8009b16:	6039      	str	r1, [r7, #0]
 8009b18:	71fb      	strb	r3, [r7, #7]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	2b05      	cmp	r3, #5
 8009b22:	d106      	bne.n	8009b32 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8009b24:	79bb      	ldrb	r3, [r7, #6]
 8009b26:	4619      	mov	r1, r3
 8009b28:	6838      	ldr	r0, [r7, #0]
 8009b2a:	f007 f9d5 	bl	8010ed8 <RegionEU868Verify>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	e000      	b.n	8009b34 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        US915_HYBRID_VERIFY( );
        default:
        {
            return false;
 8009b32:	2300      	movs	r3, #0
        }
    }
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	6039      	str	r1, [r7, #0]
 8009b46:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	d103      	bne.n	8009b56 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8009b4e:	6838      	ldr	r0, [r7, #0]
 8009b50:	f007 fa78 	bl	8011044 <RegionEU868ApplyCFList>
 8009b54:	e000      	b.n	8009b58 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        US915_HYBRID_APPLY_CF_LIST( );
        default:
        {
            break;
 8009b56:	bf00      	nop
        }
    }
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	2b05      	cmp	r3, #5
 8009b70:	d104      	bne.n	8009b7c <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f007 fad2 	bl	801111c <RegionEU868ChanMaskSet>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	e000      	b.n	8009b7e <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        US915_HYBRID_CHAN_MASK_SET( );
        default:
        {
            return false;
 8009b7c:	2300      	movs	r3, #0
        }
    }
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <RegionAdrNext>:

bool RegionAdrNext( LoRaMacRegion_t region, AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	603b      	str	r3, [r7, #0]
 8009b92:	4603      	mov	r3, r0
 8009b94:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d107      	bne.n	8009bac <RegionAdrNext+0x26>
        AS923_ADR_NEXT( );
        AU915_ADR_NEXT( );
        CN470_ADR_NEXT( );
        CN779_ADR_NEXT( );
        EU433_ADR_NEXT( );
        EU868_ADR_NEXT( );
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	68b8      	ldr	r0, [r7, #8]
 8009ba4:	f007 fae0 	bl	8011168 <RegionEU868AdrNext>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	e000      	b.n	8009bae <RegionAdrNext+0x28>
        IN865_ADR_NEXT( );
        US915_ADR_NEXT( );
        US915_HYBRID_ADR_NEXT( );
        default:
        {
            return false;
 8009bac:	2300      	movs	r3, #0
        }
    }
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	603b      	str	r3, [r7, #0]
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	71fb      	strb	r3, [r7, #7]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	71bb      	strb	r3, [r7, #6]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	717b      	strb	r3, [r7, #5]
    switch( region )
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	2b05      	cmp	r3, #5
 8009bce:	d107      	bne.n	8009be0 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009bd0:	7979      	ldrb	r1, [r7, #5]
 8009bd2:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	f007 fb29 	bl	8011230 <RegionEU868ComputeRxWindowParameters>
 8009bde:	e000      	b.n	8009be2 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_HYBRID_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8009be0:	bf00      	nop
        }
    }
}
 8009be2:	bf00      	nop
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
 8009bf6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	d105      	bne.n	8009c0a <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	68b8      	ldr	r0, [r7, #8]
 8009c02:	f007 fb6b 	bl	80112dc <RegionEU868RxConfig>
 8009c06:	4603      	mov	r3, r0
 8009c08:	e000      	b.n	8009c0c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        US915_HYBRID_RX_CONFIG( );
        default:
        {
            return false;
 8009c0a:	2300      	movs	r3, #0
        }
    }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	2b05      	cmp	r3, #5
 8009c28:	d106      	bne.n	8009c38 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	6879      	ldr	r1, [r7, #4]
 8009c2e:	68b8      	ldr	r0, [r7, #8]
 8009c30:	f007 fc1a 	bl	8011468 <RegionEU868TxConfig>
 8009c34:	4603      	mov	r3, r0
 8009c36:	e000      	b.n	8009c3a <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        US915_HYBRID_TX_CONFIG( );
        default:
        {
            return false;
 8009c38:	2300      	movs	r3, #0
        }
    }
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b086      	sub	sp, #24
 8009c46:	af02      	add	r7, sp, #8
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
 8009c4e:	4603      	mov	r3, r0
 8009c50:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	2b05      	cmp	r3, #5
 8009c56:	d109      	bne.n	8009c6c <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	68b8      	ldr	r0, [r7, #8]
 8009c64:	f007 fcb8 	bl	80115d8 <RegionEU868LinkAdrReq>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	e000      	b.n	8009c6e <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        US915_HYBRID_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8009c6c:	2300      	movs	r3, #0
        }
    }
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	6039      	str	r1, [r7, #0]
 8009c80:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	2b05      	cmp	r3, #5
 8009c86:	d104      	bne.n	8009c92 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8009c88:	6838      	ldr	r0, [r7, #0]
 8009c8a:	f007 fd75 	bl	8011778 <RegionEU868RxParamSetupReq>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	e000      	b.n	8009c94 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        US915_HYBRID_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8009c92:	2300      	movs	r3, #0
        }
    }
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	6039      	str	r1, [r7, #0]
 8009ca6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d104      	bne.n	8009cb8 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8009cae:	6838      	ldr	r0, [r7, #0]
 8009cb0:	f007 fd9e 	bl	80117f0 <RegionEU868NewChannelReq>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	e000      	b.n	8009cba <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        US915_HYBRID_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8009cb8:	2300      	movs	r3, #0
        }
    }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	4603      	mov	r3, r0
 8009cca:	6039      	str	r1, [r7, #0]
 8009ccc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009cce:	79fb      	ldrb	r3, [r7, #7]
 8009cd0:	2b05      	cmp	r3, #5
 8009cd2:	d104      	bne.n	8009cde <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8009cd4:	6838      	ldr	r0, [r7, #0]
 8009cd6:	f007 fde7 	bl	80118a8 <RegionEU868TxParamSetupReq>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	e000      	b.n	8009ce0 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        US915_HYBRID_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8009cde:	2300      	movs	r3, #0
        }
    }
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	6039      	str	r1, [r7, #0]
 8009cf2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	2b05      	cmp	r3, #5
 8009cf8:	d104      	bne.n	8009d04 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8009cfa:	6838      	ldr	r0, [r7, #0]
 8009cfc:	f007 fde0 	bl	80118c0 <RegionEU868DlChannelReq>
 8009d00:	4603      	mov	r3, r0
 8009d02:	e000      	b.n	8009d06 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        US915_HYBRID_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8009d04:	2300      	movs	r3, #0
        }
    }
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, AlternateDrParams_t* alternateDr )
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	4603      	mov	r3, r0
 8009d16:	6039      	str	r1, [r7, #0]
 8009d18:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	2b05      	cmp	r3, #5
 8009d1e:	d104      	bne.n	8009d2a <RegionAlternateDr+0x1c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8009d20:	6838      	ldr	r0, [r7, #0]
 8009d22:	f007 fe0f 	bl	8011944 <RegionEU868AlternateDr>
 8009d26:	4603      	mov	r3, r0
 8009d28:	e000      	b.n	8009d2c <RegionAlternateDr+0x1e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        US915_HYBRID_ALTERNATE_DR( );
        default:
        {
            return 0;
 8009d2a:	2300      	movs	r3, #0
        }
    }
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	2b05      	cmp	r3, #5
 8009d44:	d103      	bne.n	8009d4e <RegionCalcBackOff+0x1a>
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
 8009d46:	6838      	ldr	r0, [r7, #0]
 8009d48:	f007 fe4e 	bl	80119e8 <RegionEU868CalcBackOff>
 8009d4c:	e000      	b.n	8009d50 <RegionCalcBackOff+0x1c>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        US915_HYBRID_CALC_BACKOFF( );
        default:
        {
            break;
 8009d4e:	bf00      	nop
        }
    }
}
 8009d50:	bf00      	nop
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <RegionNextChannel>:

bool RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b05      	cmp	r3, #5
 8009d6c:	d107      	bne.n	8009d7e <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	6879      	ldr	r1, [r7, #4]
 8009d74:	68b8      	ldr	r0, [r7, #8]
 8009d76:	f007 fea7 	bl	8011ac8 <RegionEU868NextChannel>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	e000      	b.n	8009d80 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        US915_HYBRID_NEXT_CHANNEL( );
        default:
        {
            return false;
 8009d7e:	2300      	movs	r3, #0
        }
    }
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	6039      	str	r1, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009d94:	79fb      	ldrb	r3, [r7, #7]
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	d104      	bne.n	8009da4 <RegionChannelAdd+0x1c>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 8009d9a:	6838      	ldr	r0, [r7, #0]
 8009d9c:	f007 ff2c 	bl	8011bf8 <RegionEU868ChannelAdd>
 8009da0:	4603      	mov	r3, r0
 8009da2:	e000      	b.n	8009da6 <RegionChannelAdd+0x1e>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        US915_HYBRID_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009da4:	2303      	movs	r3, #3
        }
    }
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	4603      	mov	r3, r0
 8009db6:	6039      	str	r1, [r7, #0]
 8009db8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009dba:	79fb      	ldrb	r3, [r7, #7]
 8009dbc:	2b05      	cmp	r3, #5
 8009dbe:	d103      	bne.n	8009dc8 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8009dc0:	6838      	ldr	r0, [r7, #0]
 8009dc2:	f008 f807 	bl	8011dd4 <RegionEU868SetContinuousWave>
 8009dc6:	e000      	b.n	8009dca <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        US915_HYBRID_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8009dc8:	bf00      	nop
        }
    }
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8009dd2:	b590      	push	{r4, r7, lr}
 8009dd4:	b083      	sub	sp, #12
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	4604      	mov	r4, r0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4611      	mov	r1, r2
 8009dde:	461a      	mov	r2, r3
 8009de0:	4623      	mov	r3, r4
 8009de2:	71fb      	strb	r3, [r7, #7]
 8009de4:	4603      	mov	r3, r0
 8009de6:	71bb      	strb	r3, [r7, #6]
 8009de8:	460b      	mov	r3, r1
 8009dea:	717b      	strb	r3, [r7, #5]
 8009dec:	4613      	mov	r3, r2
 8009dee:	713b      	strb	r3, [r7, #4]
    switch( region )
 8009df0:	79fb      	ldrb	r3, [r7, #7]
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d109      	bne.n	8009e0a <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8009df6:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8009dfa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009dfe:	79bb      	ldrb	r3, [r7, #6]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f008 f833 	bl	8011e6c <RegionEU868ApplyDrOffset>
 8009e06:	4603      	mov	r3, r0
 8009e08:	e000      	b.n	8009e0c <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        US915_HYBRID_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8009e0a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd90      	pop	{r4, r7, pc}

08009e14 <CountChannels>:
#define BACKOFF_DC_24_HOURS     3



static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	460a      	mov	r2, r1
 8009e1e:	80fb      	strh	r3, [r7, #6]
 8009e20:	4613      	mov	r3, r2
 8009e22:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73bb      	strb	r3, [r7, #14]
 8009e2c:	e011      	b.n	8009e52 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8009e2e:	88fa      	ldrh	r2, [r7, #6]
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	2101      	movs	r1, #1
 8009e34:	fa01 f303 	lsl.w	r3, r1, r3
 8009e38:	401a      	ands	r2, r3
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d102      	bne.n	8009e4c <CountChannels+0x38>
        {
            nbActiveBits++;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	73bb      	strb	r3, [r7, #14]
 8009e52:	7bba      	ldrb	r2, [r7, #14]
 8009e54:	797b      	ldrb	r3, [r7, #5]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d3e9      	bcc.n	8009e2e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8009e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr
	...

08009e68 <RegionCommonGetJoinDc>:



uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	81fb      	strh	r3, [r7, #14]

    if( elapsedTime < 3600000 )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <RegionCommonGetJoinDc+0x38>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d202      	bcs.n	8009e82 <RegionCommonGetJoinDc+0x1a>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	81fb      	strh	r3, [r7, #14]
 8009e80:	e008      	b.n	8009e94 <RegionCommonGetJoinDc+0x2c>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a07      	ldr	r2, [pc, #28]	; (8009ea4 <RegionCommonGetJoinDc+0x3c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d202      	bcs.n	8009e90 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	81fb      	strh	r3, [r7, #14]
 8009e8e:	e001      	b.n	8009e94 <RegionCommonGetJoinDc+0x2c>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8009e90:	2303      	movs	r3, #3
 8009e92:	81fb      	strh	r3, [r7, #14]
    }
    return dutyCycle;
 8009e94:	89fb      	ldrh	r3, [r7, #14]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr
 8009ea0:	0036ee80 	.word	0x0036ee80
 8009ea4:	025c3f80 	.word	0x025c3f80

08009ea8 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6039      	str	r1, [r7, #0]
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	71fb      	strb	r3, [r7, #7]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	71bb      	strb	r3, [r7, #6]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8009ec0:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8009ec4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009ec8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f866 	bl	8009f9e <RegionCommonValueInRange>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e05c      	b.n	8009f96 <RegionCommonChanVerifyDr+0xee>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8009edc:	2300      	movs	r3, #0
 8009ede:	73fb      	strb	r3, [r7, #15]
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73bb      	strb	r3, [r7, #14]
 8009ee4:	e052      	b.n	8009f8c <RegionCommonChanVerifyDr+0xe4>
    {
        //4.29 workaround for when disable all channles not return server 0306 but return 0304
        if (channelsMask[k] == 0)
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <RegionCommonChanVerifyDr+0x50>
            return true;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e04e      	b.n	8009f96 <RegionCommonChanVerifyDr+0xee>
        for( uint8_t j = 0; j < 16; j++ )
 8009ef8:	2300      	movs	r3, #0
 8009efa:	737b      	strb	r3, [r7, #13]
 8009efc:	e03d      	b.n	8009f7a <RegionCommonChanVerifyDr+0xd2>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	4413      	add	r3, r2
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	7b7b      	ldrb	r3, [r7, #13]
 8009f0c:	fa42 f303 	asr.w	r3, r2, r3
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d02d      	beq.n	8009f74 <RegionCommonChanVerifyDr+0xcc>
            {// Check datarate validity for enabled channels
#ifdef CONFIG_LINKWAN 
                if( RegionCommonValueInRange( dr, ( channels[(i + j) % 8].DrRange.Fields.Min & 0x0F ),
                                                  ( channels[(i + j) % 8].DrRange.Fields.Max & 0x0F ) ) == 1 )
#else
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8009f18:	7bfa      	ldrb	r2, [r7, #15]
 8009f1a:	7b7b      	ldrb	r3, [r7, #13]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	7a1b      	ldrb	r3, [r3, #8]
 8009f30:	f343 0303 	sbfx	r3, r3, #0, #4
 8009f34:	b25b      	sxtb	r3, r3
 8009f36:	f003 030f 	and.w	r3, r3, #15
 8009f3a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8009f3c:	7bfa      	ldrb	r2, [r7, #15]
 8009f3e:	7b7b      	ldrb	r3, [r7, #13]
 8009f40:	4413      	add	r3, r2
 8009f42:	461a      	mov	r2, r3
 8009f44:	4613      	mov	r3, r2
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	7a1b      	ldrb	r3, [r3, #8]
 8009f54:	f343 1303 	sbfx	r3, r3, #4, #4
 8009f58:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8009f5a:	f003 030f 	and.w	r3, r3, #15
 8009f5e:	b25a      	sxtb	r2, r3
 8009f60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 f81a 	bl	8009f9e <RegionCommonValueInRange>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d101      	bne.n	8009f74 <RegionCommonChanVerifyDr+0xcc>
#endif
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e010      	b.n	8009f96 <RegionCommonChanVerifyDr+0xee>
        for( uint8_t j = 0; j < 16; j++ )
 8009f74:	7b7b      	ldrb	r3, [r7, #13]
 8009f76:	3301      	adds	r3, #1
 8009f78:	737b      	strb	r3, [r7, #13]
 8009f7a:	7b7b      	ldrb	r3, [r7, #13]
 8009f7c:	2b0f      	cmp	r3, #15
 8009f7e:	d9be      	bls.n	8009efe <RegionCommonChanVerifyDr+0x56>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	3310      	adds	r3, #16
 8009f84:	73fb      	strb	r3, [r7, #15]
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	73bb      	strb	r3, [r7, #14]
 8009f8c:	7bfa      	ldrb	r2, [r7, #15]
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d3a8      	bcc.n	8009ee6 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	71fb      	strb	r3, [r7, #7]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	71bb      	strb	r3, [r7, #6]
 8009fac:	4613      	mov	r3, r2
 8009fae:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8009fb0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009fb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	db07      	blt.n	8009fcc <RegionCommonValueInRange+0x2e>
 8009fbc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8009fc0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	dc01      	bgt.n	8009fcc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e000      	b.n	8009fce <RegionCommonValueInRange+0x30>
    }
    return 0;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	091b      	lsrs	r3, r3, #4
 8009fec:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8009fee:	78bb      	ldrb	r3, [r7, #2]
 8009ff0:	091b      	lsrs	r3, r3, #4
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	7bfa      	ldrb	r2, [r7, #15]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d803      	bhi.n	800a002 <RegionCommonChanDisable+0x2a>
 8009ffa:	78fa      	ldrb	r2, [r7, #3]
 8009ffc:	78bb      	ldrb	r3, [r7, #2]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d301      	bcc.n	800a006 <RegionCommonChanDisable+0x2e>
    {
        return false;
 800a002:	2300      	movs	r3, #0
 800a004:	e017      	b.n	800a036 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b21a      	sxth	r2, r3
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	2101      	movs	r1, #1
 800a01a:	fa01 f303 	lsl.w	r3, r1, r3
 800a01e:	b21b      	sxth	r3, r3
 800a020:	43db      	mvns	r3, r3
 800a022:	b21b      	sxth	r3, r3
 800a024:	4013      	ands	r3, r2
 800a026:	b219      	sxth	r1, r3
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	4413      	add	r3, r2
 800a030:	b28a      	uxth	r2, r1
 800a032:	801a      	strh	r2, [r3, #0]

    return true;
 800a034:	2301      	movs	r3, #1
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr

0800a040 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
 800a04c:	4613      	mov	r3, r2
 800a04e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d101      	bne.n	800a05e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e018      	b.n	800a090 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	73bb      	strb	r3, [r7, #14]
 800a062:	e010      	b.n	800a086 <RegionCommonCountChannels+0x46>
        else
        {
            nbChannels += CountChannels( channelsMask[i], 8 );
        }
#else
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	005b      	lsls	r3, r3, #1
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	4413      	add	r3, r2
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	2110      	movs	r1, #16
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff fecf 	bl	8009e14 <CountChannels>
 800a076:	4603      	mov	r3, r0
 800a078:	461a      	mov	r2, r3
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	4413      	add	r3, r2
 800a07e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	3301      	adds	r3, #1
 800a084:	73bb      	strb	r3, [r7, #14]
 800a086:	7bba      	ldrb	r2, [r7, #14]
 800a088:	78bb      	ldrb	r3, [r7, #2]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d3ea      	bcc.n	800a064 <RegionCommonCountChannels+0x24>
#endif
    }

    return nbChannels;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d016      	beq.n	800a0da <RegionCommonChanMaskCopy+0x42>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d013      	beq.n	800a0da <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75fb      	strb	r3, [r7, #23]
 800a0b6:	e00c      	b.n	800a0d2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	441a      	add	r2, r3
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	440b      	add	r3, r1
 800a0c8:	8812      	ldrh	r2, [r2, #0]
 800a0ca:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
 800a0d2:	7dfa      	ldrb	r2, [r7, #23]
 800a0d4:	79fb      	ldrb	r3, [r7, #7]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d3ee      	bcc.n	800a0b8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr

0800a0e4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	73fb      	strb	r3, [r7, #15]
    if (joined == true) {
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d003      	beq.n	800a100 <RegionCommonSetBandTxDone+0x1c>
        band->LastTxDoneTime = lastTxDone;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	609a      	str	r2, [r3, #8]
    } else {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800a0fe:	e005      	b.n	800a10c <RegionCommonSetBandTxDone+0x28>
        band->LastTxDoneTime = lastTxDone;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	605a      	str	r2, [r3, #4]
}
 800a10c:	bf00      	nop
 800a10e:	3714      	adds	r7, #20
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr

0800a116 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800a116:	b590      	push	{r4, r7, lr}
 800a118:	b087      	sub	sp, #28
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	603a      	str	r2, [r7, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	4603      	mov	r3, r0
 800a122:	71fb      	strb	r3, [r7, #7]
 800a124:	460b      	mov	r3, r1
 800a126:	71bb      	strb	r3, [r7, #6]
 800a128:	4613      	mov	r3, r2
 800a12a:	717b      	strb	r3, [r7, #5]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800a12c:	f04f 33ff 	mov.w	r3, #4294967295
 800a130:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800a132:	2300      	movs	r3, #0
 800a134:	74fb      	strb	r3, [r7, #19]
 800a136:	e0a9      	b.n	800a28c <RegionCommonUpdateBandTimeOff+0x176>
    {
        if( joined == false )
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	f083 0301 	eor.w	r3, r3, #1
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	d053      	beq.n	800a1ec <RegionCommonUpdateBandTimeOff+0xd6>
        {
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800a144:	7cfb      	ldrb	r3, [r7, #19]
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	4413      	add	r3, r2
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	4618      	mov	r0, r3
 800a150:	f005 ffe2 	bl	8010118 <TimerGetElapsedTime>
 800a154:	4604      	mov	r4, r0
 800a156:	79bb      	ldrb	r3, [r7, #6]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <RegionCommonUpdateBandTimeOff+0x5a>
 800a15c:	7cfb      	ldrb	r3, [r7, #19]
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	683a      	ldr	r2, [r7, #0]
 800a162:	4413      	add	r3, r2
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	4618      	mov	r0, r3
 800a168:	f005 ffd6 	bl	8010118 <TimerGetElapsedTime>
 800a16c:	4603      	mov	r3, r0
 800a16e:	e000      	b.n	800a172 <RegionCommonUpdateBandTimeOff+0x5c>
 800a170:	2300      	movs	r3, #0
 800a172:	42a3      	cmp	r3, r4
 800a174:	d209      	bcs.n	800a18a <RegionCommonUpdateBandTimeOff+0x74>
 800a176:	7cfb      	ldrb	r3, [r7, #19]
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	4413      	add	r3, r2
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	4618      	mov	r0, r3
 800a182:	f005 ffc9 	bl	8010118 <TimerGetElapsedTime>
 800a186:	4603      	mov	r3, r0
 800a188:	e00d      	b.n	800a1a6 <RegionCommonUpdateBandTimeOff+0x90>
 800a18a:	79bb      	ldrb	r3, [r7, #6]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d009      	beq.n	800a1a4 <RegionCommonUpdateBandTimeOff+0x8e>
 800a190:	7cfb      	ldrb	r3, [r7, #19]
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	4413      	add	r3, r2
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f005 ffbc 	bl	8010118 <TimerGetElapsedTime>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	e000      	b.n	800a1a6 <RegionCommonUpdateBandTimeOff+0x90>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 800a1a8:	7cfb      	ldrb	r3, [r7, #19]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d305      	bcc.n	800a1c4 <RegionCommonUpdateBandTimeOff+0xae>
            {
                bands[i].TimeOff = 0;
 800a1b8:	7cfb      	ldrb	r3, [r7, #19]
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	4413      	add	r3, r2
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 800a1c4:	7cfb      	ldrb	r3, [r7, #19]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d059      	beq.n	800a286 <RegionCommonUpdateBandTimeOff+0x170>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 800a1d2:	7cfb      	ldrb	r3, [r7, #19]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	4413      	add	r3, r2
 800a1da:	68da      	ldr	r2, [r3, #12]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	697a      	ldr	r2, [r7, #20]
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	bf28      	it	cs
 800a1e6:	4613      	movcs	r3, r2
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e04c      	b.n	800a286 <RegionCommonUpdateBandTimeOff+0x170>
            }
        }
        else
        {
            if( dutyCycle == true )
 800a1ec:	79bb      	ldrb	r3, [r7, #6]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d041      	beq.n	800a276 <RegionCommonUpdateBandTimeOff+0x160>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 800a1f2:	7cfb      	ldrb	r3, [r7, #19]
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	68dc      	ldr	r4, [r3, #12]
 800a1fc:	7cfb      	ldrb	r3, [r7, #19]
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	4413      	add	r3, r2
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	4618      	mov	r0, r3
 800a208:	f005 ff86 	bl	8010118 <TimerGetElapsedTime>
 800a20c:	4603      	mov	r3, r0
 800a20e:	429c      	cmp	r4, r3
 800a210:	d805      	bhi.n	800a21e <RegionCommonUpdateBandTimeOff+0x108>
                {
                    bands[i].TimeOff = 0;
 800a212:	7cfb      	ldrb	r3, [r7, #19]
 800a214:	011b      	lsls	r3, r3, #4
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	4413      	add	r3, r2
 800a21a:	2200      	movs	r2, #0
 800a21c:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 800a21e:	7cfb      	ldrb	r3, [r7, #19]
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	4413      	add	r3, r2
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d02c      	beq.n	800a286 <RegionCommonUpdateBandTimeOff+0x170>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 800a22c:	7cfb      	ldrb	r3, [r7, #19]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	4413      	add	r3, r2
 800a234:	68dc      	ldr	r4, [r3, #12]
 800a236:	7cfb      	ldrb	r3, [r7, #19]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	4413      	add	r3, r2
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	4618      	mov	r0, r3
 800a242:	f005 ff69 	bl	8010118 <TimerGetElapsedTime>
 800a246:	4603      	mov	r3, r0
 800a248:	1ae3      	subs	r3, r4, r3
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d90f      	bls.n	800a270 <RegionCommonUpdateBandTimeOff+0x15a>
 800a250:	7cfb      	ldrb	r3, [r7, #19]
 800a252:	011b      	lsls	r3, r3, #4
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	4413      	add	r3, r2
 800a258:	68dc      	ldr	r4, [r3, #12]
 800a25a:	7cfb      	ldrb	r3, [r7, #19]
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	4413      	add	r3, r2
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	4618      	mov	r0, r3
 800a266:	f005 ff57 	bl	8010118 <TimerGetElapsedTime>
 800a26a:	4603      	mov	r3, r0
 800a26c:	1ae3      	subs	r3, r4, r3
 800a26e:	e000      	b.n	800a272 <RegionCommonUpdateBandTimeOff+0x15c>
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	617b      	str	r3, [r7, #20]
 800a274:	e007      	b.n	800a286 <RegionCommonUpdateBandTimeOff+0x170>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 800a27a:	7cfb      	ldrb	r3, [r7, #19]
 800a27c:	011b      	lsls	r3, r3, #4
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	4413      	add	r3, r2
 800a282:	2200      	movs	r2, #0
 800a284:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800a286:	7cfb      	ldrb	r3, [r7, #19]
 800a288:	3301      	adds	r3, #1
 800a28a:	74fb      	strb	r3, [r7, #19]
 800a28c:	7cfa      	ldrb	r2, [r7, #19]
 800a28e:	797b      	ldrb	r3, [r7, #5]
 800a290:	429a      	cmp	r2, r3
 800a292:	f4ff af51 	bcc.w	800a138 <RegionCommonUpdateBandTimeOff+0x22>
            }
        }
    }
    return nextTxDelay;
 800a296:	697b      	ldr	r3, [r7, #20]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd90      	pop	{r4, r7, pc}

0800a2a0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, LinkAdrParams_t* linkAdrParams )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d13f      	bne.n	800a336 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	b25a      	sxtb	r2, r3
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	b25a      	sxtb	r2, r3
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	091b      	lsrs	r3, r3, #4
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	b25a      	sxtb	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3302      	adds	r3, #2
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	889b      	ldrh	r3, [r3, #4]
 800a2f4:	b21a      	sxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3303      	adds	r3, #3
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	b21b      	sxth	r3, r3
 800a300:	4313      	orrs	r3, r2
 800a302:	b21b      	sxth	r3, r3
 800a304:	b29a      	uxth	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	791a      	ldrb	r2, [r3, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	091b      	lsrs	r3, r3, #4
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f003 030f 	and.w	r3, r3, #15
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800a332:	2305      	movs	r3, #5
 800a334:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 800a336:	7bfb      	ldrb	r3, [r7, #15]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3714      	adds	r7, #20
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bc80      	pop	{r7}
 800a340:	4770      	bx	lr
	...

0800a344 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800a344:	b5b0      	push	{r4, r5, r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2201      	movs	r2, #1
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	4618      	mov	r0, r3
 800a35a:	f7f6 f863 	bl	8000424 <__aeabi_i2d>
 800a35e:	4604      	mov	r4, r0
 800a360:	460d      	mov	r5, r1
 800a362:	6838      	ldr	r0, [r7, #0]
 800a364:	f7f6 f84e 	bl	8000404 <__aeabi_ui2d>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f6 f9ec 	bl	800074c <__aeabi_ddiv>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4610      	mov	r0, r2
 800a37a:	4619      	mov	r1, r3
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	4b04      	ldr	r3, [pc, #16]	; (800a394 <RegionCommonComputeSymbolTimeLoRa+0x50>)
 800a382:	f7f6 f8b9 	bl	80004f8 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
}
 800a38a:	4610      	mov	r0, r2
 800a38c:	4619      	mov	r1, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bdb0      	pop	{r4, r5, r7, pc}
 800a394:	408f4000 	.word	0x408f4000

0800a398 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7f6 f82d 	bl	8000404 <__aeabi_ui2d>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	f04f 0000 	mov.w	r0, #0
 800a3b2:	4905      	ldr	r1, [pc, #20]	; (800a3c8 <RegionCommonComputeSymbolTimeFsk+0x30>)
 800a3b4:	f7f6 f9ca 	bl	800074c <__aeabi_ddiv>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
}
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4619      	mov	r1, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	40200000 	.word	0x40200000

0800a3cc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800a3cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a3d8:	603b      	str	r3, [r7, #0]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	71fb      	strb	r3, [r7, #7]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a3de:	79fc      	ldrb	r4, [r7, #7]
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
 800a3e2:	3b04      	subs	r3, #4
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7f6 f81c 	bl	8000424 <__aeabi_i2d>
 800a3ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3f0:	f7f6 f882 	bl	80004f8 <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4690      	mov	r8, r2
 800a3fa:	4699      	mov	r9, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	005b      	lsls	r3, r3, #1
 800a400:	4618      	mov	r0, r3
 800a402:	f7f5 ffff 	bl	8000404 <__aeabi_ui2d>
 800a406:	4602      	mov	r2, r0
 800a408:	460b      	mov	r3, r1
 800a40a:	4640      	mov	r0, r8
 800a40c:	4649      	mov	r1, r9
 800a40e:	f7f5 febd 	bl	800018c <__adddf3>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4610      	mov	r0, r2
 800a418:	4619      	mov	r1, r3
 800a41a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a41e:	f7f6 f995 	bl	800074c <__aeabi_ddiv>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	4610      	mov	r0, r2
 800a428:	4619      	mov	r1, r3
 800a42a:	f007 fd99 	bl	8011f60 <ceil>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	f7f6 fb21 	bl	8000a7c <__aeabi_d2uiz>
 800a43a:	4603      	mov	r3, r0
 800a43c:	4622      	mov	r2, r4
 800a43e:	429a      	cmp	r2, r3
 800a440:	bf38      	it	cc
 800a442:	461a      	movcc	r2, r3
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	601a      	str	r2, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800a448:	f04f 0200 	mov.w	r2, #0
 800a44c:	4b21      	ldr	r3, [pc, #132]	; (800a4d4 <RegionCommonComputeRxWindowParameters+0x108>)
 800a44e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a452:	f7f6 f851 	bl	80004f8 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4614      	mov	r4, r2
 800a45c:	461d      	mov	r5, r3
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f7f5 ffce 	bl	8000404 <__aeabi_ui2d>
 800a468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a46c:	f7f6 f844 	bl	80004f8 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4610      	mov	r0, r2
 800a476:	4619      	mov	r1, r3
 800a478:	f04f 0200 	mov.w	r2, #0
 800a47c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a480:	f7f6 f964 	bl	800074c <__aeabi_ddiv>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4620      	mov	r0, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	f7f5 fe7c 	bl	8000188 <__aeabi_dsub>
 800a490:	4602      	mov	r2, r0
 800a492:	460b      	mov	r3, r1
 800a494:	4614      	mov	r4, r2
 800a496:	461d      	mov	r5, r3
 800a498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a49a:	f7f5 ffb3 	bl	8000404 <__aeabi_ui2d>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	f7f5 fe6f 	bl	8000188 <__aeabi_dsub>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	f007 fd55 	bl	8011f60 <ceil>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	4619      	mov	r1, r3
 800a4be:	f7f6 fab5 	bl	8000a2c <__aeabi_d2iz>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	601a      	str	r2, [r3, #0]
}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40100000 	.word	0x40100000

0800a4d8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ee:	005b      	lsls	r3, r3, #1
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7f6 fb99 	bl	8000c28 <__aeabi_ui2f>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	68b8      	ldr	r0, [r7, #8]
 800a4fc:	f7f6 fae2 	bl	8000ac4 <__aeabi_fsub>
 800a500:	4603      	mov	r3, r0
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	4618      	mov	r0, r3
 800a506:	f7f6 fadd 	bl	8000ac4 <__aeabi_fsub>
 800a50a:	4603      	mov	r3, r0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7f5 ff9b 	bl	8000448 <__aeabi_f2d>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	4610      	mov	r0, r2
 800a518:	4619      	mov	r1, r3
 800a51a:	f007 fda1 	bl	8012060 <floor>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	4610      	mov	r0, r2
 800a524:	4619      	mov	r1, r3
 800a526:	f7f6 fa81 	bl	8000a2c <__aeabi_d2iz>
 800a52a:	4603      	mov	r3, r0
 800a52c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800a52e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	781a      	ldrb	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3301      	adds	r3, #1
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	7852      	ldrb	r2, [r2, #1]
 800a554:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3302      	adds	r3, #2
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	7892      	ldrb	r2, [r2, #2]
 800a55e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3303      	adds	r3, #3
 800a564:	683a      	ldr	r2, [r7, #0]
 800a566:	78d2      	ldrb	r2, [r2, #3]
 800a568:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3304      	adds	r3, #4
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	7912      	ldrb	r2, [r2, #4]
 800a572:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3305      	adds	r3, #5
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	7952      	ldrb	r2, [r2, #5]
 800a57c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3306      	adds	r3, #6
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	7992      	ldrb	r2, [r2, #6]
 800a586:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3307      	adds	r3, #7
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	79d2      	ldrb	r2, [r2, #7]
 800a590:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3308      	adds	r3, #8
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	7a12      	ldrb	r2, [r2, #8]
 800a59a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3309      	adds	r3, #9
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	7a52      	ldrb	r2, [r2, #9]
 800a5a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	330a      	adds	r3, #10
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	7a92      	ldrb	r2, [r2, #10]
 800a5ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	330b      	adds	r3, #11
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	7ad2      	ldrb	r2, [r2, #11]
 800a5b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	330c      	adds	r3, #12
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	7b12      	ldrb	r2, [r2, #12]
 800a5c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	330d      	adds	r3, #13
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	7b52      	ldrb	r2, [r2, #13]
 800a5cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	330e      	adds	r3, #14
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	7b92      	ldrb	r2, [r2, #14]
 800a5d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	330f      	adds	r3, #15
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	7bd2      	ldrb	r2, [r2, #15]
 800a5e0:	701a      	strb	r2, [r3, #0]
#endif
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bc80      	pop	{r7}
 800a5ea:	4770      	bx	lr

0800a5ec <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a5fa:	e007      	b.n	800a60c <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	1c53      	adds	r3, r2, #1
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	1c59      	adds	r1, r3, #1
 800a606:	60f9      	str	r1, [r7, #12]
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	1e5a      	subs	r2, r3, #1
 800a610:	71fa      	strb	r2, [r7, #7]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1f2      	bne.n	800a5fc <copy_block_nn+0x10>
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bc80      	pop	{r7}
 800a620:	4770      	bx	lr

0800a622 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	781a      	ldrb	r2, [r3, #0]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	4053      	eors	r3, r2
 800a636:	b2da      	uxtb	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	3301      	adds	r3, #1
 800a640:	7819      	ldrb	r1, [r3, #0]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	781a      	ldrb	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3301      	adds	r3, #1
 800a64c:	404a      	eors	r2, r1
 800a64e:	b2d2      	uxtb	r2, r2
 800a650:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	3302      	adds	r3, #2
 800a656:	7819      	ldrb	r1, [r3, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	3302      	adds	r3, #2
 800a65c:	781a      	ldrb	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3302      	adds	r3, #2
 800a662:	404a      	eors	r2, r1
 800a664:	b2d2      	uxtb	r2, r2
 800a666:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3303      	adds	r3, #3
 800a66c:	7819      	ldrb	r1, [r3, #0]
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	3303      	adds	r3, #3
 800a672:	781a      	ldrb	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3303      	adds	r3, #3
 800a678:	404a      	eors	r2, r1
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3304      	adds	r3, #4
 800a682:	7819      	ldrb	r1, [r3, #0]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	3304      	adds	r3, #4
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3304      	adds	r3, #4
 800a68e:	404a      	eors	r2, r1
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3305      	adds	r3, #5
 800a698:	7819      	ldrb	r1, [r3, #0]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	3305      	adds	r3, #5
 800a69e:	781a      	ldrb	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3305      	adds	r3, #5
 800a6a4:	404a      	eors	r2, r1
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3306      	adds	r3, #6
 800a6ae:	7819      	ldrb	r1, [r3, #0]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	3306      	adds	r3, #6
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3306      	adds	r3, #6
 800a6ba:	404a      	eors	r2, r1
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3307      	adds	r3, #7
 800a6c4:	7819      	ldrb	r1, [r3, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	3307      	adds	r3, #7
 800a6ca:	781a      	ldrb	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3307      	adds	r3, #7
 800a6d0:	404a      	eors	r2, r1
 800a6d2:	b2d2      	uxtb	r2, r2
 800a6d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3308      	adds	r3, #8
 800a6da:	7819      	ldrb	r1, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	781a      	ldrb	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	404a      	eors	r2, r1
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3309      	adds	r3, #9
 800a6f0:	7819      	ldrb	r1, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	3309      	adds	r3, #9
 800a6f6:	781a      	ldrb	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3309      	adds	r3, #9
 800a6fc:	404a      	eors	r2, r1
 800a6fe:	b2d2      	uxtb	r2, r2
 800a700:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	330a      	adds	r3, #10
 800a706:	7819      	ldrb	r1, [r3, #0]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	330a      	adds	r3, #10
 800a70c:	781a      	ldrb	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	330a      	adds	r3, #10
 800a712:	404a      	eors	r2, r1
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	330b      	adds	r3, #11
 800a71c:	7819      	ldrb	r1, [r3, #0]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	330b      	adds	r3, #11
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	330b      	adds	r3, #11
 800a728:	404a      	eors	r2, r1
 800a72a:	b2d2      	uxtb	r2, r2
 800a72c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	330c      	adds	r3, #12
 800a732:	7819      	ldrb	r1, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	781a      	ldrb	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	330c      	adds	r3, #12
 800a73e:	404a      	eors	r2, r1
 800a740:	b2d2      	uxtb	r2, r2
 800a742:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	330d      	adds	r3, #13
 800a748:	7819      	ldrb	r1, [r3, #0]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	330d      	adds	r3, #13
 800a74e:	781a      	ldrb	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	330d      	adds	r3, #13
 800a754:	404a      	eors	r2, r1
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	330e      	adds	r3, #14
 800a75e:	7819      	ldrb	r1, [r3, #0]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	330e      	adds	r3, #14
 800a764:	781a      	ldrb	r2, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	330e      	adds	r3, #14
 800a76a:	404a      	eors	r2, r1
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	330f      	adds	r3, #15
 800a774:	7819      	ldrb	r1, [r3, #0]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	330f      	adds	r3, #15
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	330f      	adds	r3, #15
 800a780:	404a      	eors	r2, r1
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
#endif
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bc80      	pop	{r7}
 800a78e:	4770      	bx	lr

0800a790 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	4053      	eors	r3, r2
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	7819      	ldrb	r1, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	781a      	ldrb	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	404a      	eors	r2, r1
 800a7be:	b2d2      	uxtb	r2, r2
 800a7c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	7819      	ldrb	r1, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3302      	adds	r3, #2
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	404a      	eors	r2, r1
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	3303      	adds	r3, #3
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3303      	adds	r3, #3
 800a7e2:	781a      	ldrb	r2, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3303      	adds	r3, #3
 800a7e8:	404a      	eors	r2, r1
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	7819      	ldrb	r1, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	404a      	eors	r2, r1
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	3305      	adds	r3, #5
 800a808:	7819      	ldrb	r1, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3305      	adds	r3, #5
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	3305      	adds	r3, #5
 800a814:	404a      	eors	r2, r1
 800a816:	b2d2      	uxtb	r2, r2
 800a818:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	3306      	adds	r3, #6
 800a81e:	7819      	ldrb	r1, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3306      	adds	r3, #6
 800a824:	781a      	ldrb	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3306      	adds	r3, #6
 800a82a:	404a      	eors	r2, r1
 800a82c:	b2d2      	uxtb	r2, r2
 800a82e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	3307      	adds	r3, #7
 800a834:	7819      	ldrb	r1, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3307      	adds	r3, #7
 800a83a:	781a      	ldrb	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3307      	adds	r3, #7
 800a840:	404a      	eors	r2, r1
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3308      	adds	r3, #8
 800a84a:	7819      	ldrb	r1, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3308      	adds	r3, #8
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3308      	adds	r3, #8
 800a856:	404a      	eors	r2, r1
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3309      	adds	r3, #9
 800a860:	7819      	ldrb	r1, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3309      	adds	r3, #9
 800a866:	781a      	ldrb	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3309      	adds	r3, #9
 800a86c:	404a      	eors	r2, r1
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	330a      	adds	r3, #10
 800a876:	7819      	ldrb	r1, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	330a      	adds	r3, #10
 800a87c:	781a      	ldrb	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	330a      	adds	r3, #10
 800a882:	404a      	eors	r2, r1
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	330b      	adds	r3, #11
 800a88c:	7819      	ldrb	r1, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	330b      	adds	r3, #11
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	330b      	adds	r3, #11
 800a898:	404a      	eors	r2, r1
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	7819      	ldrb	r1, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	330c      	adds	r3, #12
 800a8ae:	404a      	eors	r2, r1
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	330d      	adds	r3, #13
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	330d      	adds	r3, #13
 800a8be:	781a      	ldrb	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	330d      	adds	r3, #13
 800a8c4:	404a      	eors	r2, r1
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	330e      	adds	r3, #14
 800a8ce:	7819      	ldrb	r1, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	330e      	adds	r3, #14
 800a8d4:	781a      	ldrb	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	330e      	adds	r3, #14
 800a8da:	404a      	eors	r2, r1
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	330f      	adds	r3, #15
 800a8e4:	7819      	ldrb	r1, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	330f      	adds	r3, #15
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	330f      	adds	r3, #15
 800a8f0:	404a      	eors	r2, r1
 800a8f2:	b2d2      	uxtb	r2, r2
 800a8f4:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a8f6:	bf00      	nop
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fe88 	bl	800a622 <xor_block>
}
 800a912:	bf00      	nop
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
	...

0800a91c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	4b48      	ldr	r3, [pc, #288]	; (800aa4c <shift_sub_rows+0x130>)
 800a92c:	5c9a      	ldrb	r2, [r3, r2]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	3304      	adds	r3, #4
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	4619      	mov	r1, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3304      	adds	r3, #4
 800a93e:	4a43      	ldr	r2, [pc, #268]	; (800aa4c <shift_sub_rows+0x130>)
 800a940:	5c52      	ldrb	r2, [r2, r1]
 800a942:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3308      	adds	r3, #8
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	4619      	mov	r1, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	3308      	adds	r3, #8
 800a950:	4a3e      	ldr	r2, [pc, #248]	; (800aa4c <shift_sub_rows+0x130>)
 800a952:	5c52      	ldrb	r2, [r2, r1]
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	330c      	adds	r3, #12
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	4619      	mov	r1, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	330c      	adds	r3, #12
 800a962:	4a3a      	ldr	r2, [pc, #232]	; (800aa4c <shift_sub_rows+0x130>)
 800a964:	5c52      	ldrb	r2, [r2, r1]
 800a966:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	73fb      	strb	r3, [r7, #15]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	3305      	adds	r3, #5
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	4619      	mov	r1, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3301      	adds	r3, #1
 800a97a:	4a34      	ldr	r2, [pc, #208]	; (800aa4c <shift_sub_rows+0x130>)
 800a97c:	5c52      	ldrb	r2, [r2, r1]
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3309      	adds	r3, #9
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	4619      	mov	r1, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3305      	adds	r3, #5
 800a98c:	4a2f      	ldr	r2, [pc, #188]	; (800aa4c <shift_sub_rows+0x130>)
 800a98e:	5c52      	ldrb	r2, [r2, r1]
 800a990:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	330d      	adds	r3, #13
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	4619      	mov	r1, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3309      	adds	r3, #9
 800a99e:	4a2b      	ldr	r2, [pc, #172]	; (800aa4c <shift_sub_rows+0x130>)
 800a9a0:	5c52      	ldrb	r2, [r2, r1]
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	7bfa      	ldrb	r2, [r7, #15]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	330d      	adds	r3, #13
 800a9aa:	4928      	ldr	r1, [pc, #160]	; (800aa4c <shift_sub_rows+0x130>)
 800a9ac:	5c8a      	ldrb	r2, [r1, r2]
 800a9ae:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	789b      	ldrb	r3, [r3, #2]
 800a9b4:	73fb      	strb	r3, [r7, #15]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	330a      	adds	r3, #10
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	3302      	adds	r3, #2
 800a9c2:	4a22      	ldr	r2, [pc, #136]	; (800aa4c <shift_sub_rows+0x130>)
 800a9c4:	5c52      	ldrb	r2, [r2, r1]
 800a9c6:	701a      	strb	r2, [r3, #0]
 800a9c8:	7bfa      	ldrb	r2, [r7, #15]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	330a      	adds	r3, #10
 800a9ce:	491f      	ldr	r1, [pc, #124]	; (800aa4c <shift_sub_rows+0x130>)
 800a9d0:	5c8a      	ldrb	r2, [r1, r2]
 800a9d2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	799b      	ldrb	r3, [r3, #6]
 800a9d8:	73fb      	strb	r3, [r7, #15]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	330e      	adds	r3, #14
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3306      	adds	r3, #6
 800a9e6:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <shift_sub_rows+0x130>)
 800a9e8:	5c52      	ldrb	r2, [r2, r1]
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	7bfa      	ldrb	r2, [r7, #15]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	330e      	adds	r3, #14
 800a9f2:	4916      	ldr	r1, [pc, #88]	; (800aa4c <shift_sub_rows+0x130>)
 800a9f4:	5c8a      	ldrb	r2, [r1, r2]
 800a9f6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	7bdb      	ldrb	r3, [r3, #15]
 800a9fc:	73fb      	strb	r3, [r7, #15]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	330b      	adds	r3, #11
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	4619      	mov	r1, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	330f      	adds	r3, #15
 800aa0a:	4a10      	ldr	r2, [pc, #64]	; (800aa4c <shift_sub_rows+0x130>)
 800aa0c:	5c52      	ldrb	r2, [r2, r1]
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3307      	adds	r3, #7
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	4619      	mov	r1, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	330b      	adds	r3, #11
 800aa1c:	4a0b      	ldr	r2, [pc, #44]	; (800aa4c <shift_sub_rows+0x130>)
 800aa1e:	5c52      	ldrb	r2, [r2, r1]
 800aa20:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	3303      	adds	r3, #3
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	3307      	adds	r3, #7
 800aa2e:	4a07      	ldr	r2, [pc, #28]	; (800aa4c <shift_sub_rows+0x130>)
 800aa30:	5c52      	ldrb	r2, [r2, r1]
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	7bfa      	ldrb	r2, [r7, #15]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3303      	adds	r3, #3
 800aa3a:	4904      	ldr	r1, [pc, #16]	; (800aa4c <shift_sub_rows+0x130>)
 800aa3c:	5c8a      	ldrb	r2, [r1, r2]
 800aa3e:	701a      	strb	r2, [r3, #0]
}
 800aa40:	bf00      	nop
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bc80      	pop	{r7}
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	0801247c 	.word	0x0801247c

0800aa50 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800aa58:	f107 0308 	add.w	r3, r7, #8
 800aa5c:	6879      	ldr	r1, [r7, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff fd6b 	bl	800a53a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800aa64:	7a3b      	ldrb	r3, [r7, #8]
 800aa66:	461a      	mov	r2, r3
 800aa68:	4b9a      	ldr	r3, [pc, #616]	; (800acd4 <mix_sub_columns+0x284>)
 800aa6a:	5c9a      	ldrb	r2, [r3, r2]
 800aa6c:	7b7b      	ldrb	r3, [r7, #13]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4b99      	ldr	r3, [pc, #612]	; (800acd8 <mix_sub_columns+0x288>)
 800aa72:	5c5b      	ldrb	r3, [r3, r1]
 800aa74:	4053      	eors	r3, r2
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	7cbb      	ldrb	r3, [r7, #18]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	4b97      	ldr	r3, [pc, #604]	; (800acdc <mix_sub_columns+0x28c>)
 800aa7e:	5c5b      	ldrb	r3, [r3, r1]
 800aa80:	4053      	eors	r3, r2
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	4619      	mov	r1, r3
 800aa88:	4b94      	ldr	r3, [pc, #592]	; (800acdc <mix_sub_columns+0x28c>)
 800aa8a:	5c5b      	ldrb	r3, [r3, r1]
 800aa8c:	4053      	eors	r3, r2
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800aa94:	7a3b      	ldrb	r3, [r7, #8]
 800aa96:	461a      	mov	r2, r3
 800aa98:	4b90      	ldr	r3, [pc, #576]	; (800acdc <mix_sub_columns+0x28c>)
 800aa9a:	5c9a      	ldrb	r2, [r3, r2]
 800aa9c:	7b7b      	ldrb	r3, [r7, #13]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	4b8c      	ldr	r3, [pc, #560]	; (800acd4 <mix_sub_columns+0x284>)
 800aaa2:	5c5b      	ldrb	r3, [r3, r1]
 800aaa4:	4053      	eors	r3, r2
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	7cbb      	ldrb	r3, [r7, #18]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	4b8a      	ldr	r3, [pc, #552]	; (800acd8 <mix_sub_columns+0x288>)
 800aaae:	5c5b      	ldrb	r3, [r3, r1]
 800aab0:	4053      	eors	r3, r2
 800aab2:	b2d9      	uxtb	r1, r3
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	461a      	mov	r2, r3
 800aab8:	4b88      	ldr	r3, [pc, #544]	; (800acdc <mix_sub_columns+0x28c>)
 800aaba:	5c9a      	ldrb	r2, [r3, r2]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3301      	adds	r3, #1
 800aac0:	404a      	eors	r2, r1
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800aac6:	7a3b      	ldrb	r3, [r7, #8]
 800aac8:	461a      	mov	r2, r3
 800aaca:	4b84      	ldr	r3, [pc, #528]	; (800acdc <mix_sub_columns+0x28c>)
 800aacc:	5c9a      	ldrb	r2, [r3, r2]
 800aace:	7b7b      	ldrb	r3, [r7, #13]
 800aad0:	4619      	mov	r1, r3
 800aad2:	4b82      	ldr	r3, [pc, #520]	; (800acdc <mix_sub_columns+0x28c>)
 800aad4:	5c5b      	ldrb	r3, [r3, r1]
 800aad6:	4053      	eors	r3, r2
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	7cbb      	ldrb	r3, [r7, #18]
 800aadc:	4619      	mov	r1, r3
 800aade:	4b7d      	ldr	r3, [pc, #500]	; (800acd4 <mix_sub_columns+0x284>)
 800aae0:	5c5b      	ldrb	r3, [r3, r1]
 800aae2:	4053      	eors	r3, r2
 800aae4:	b2d9      	uxtb	r1, r3
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	461a      	mov	r2, r3
 800aaea:	4b7b      	ldr	r3, [pc, #492]	; (800acd8 <mix_sub_columns+0x288>)
 800aaec:	5c9a      	ldrb	r2, [r3, r2]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	404a      	eors	r2, r1
 800aaf4:	b2d2      	uxtb	r2, r2
 800aaf6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800aaf8:	7a3b      	ldrb	r3, [r7, #8]
 800aafa:	461a      	mov	r2, r3
 800aafc:	4b76      	ldr	r3, [pc, #472]	; (800acd8 <mix_sub_columns+0x288>)
 800aafe:	5c9a      	ldrb	r2, [r3, r2]
 800ab00:	7b7b      	ldrb	r3, [r7, #13]
 800ab02:	4619      	mov	r1, r3
 800ab04:	4b75      	ldr	r3, [pc, #468]	; (800acdc <mix_sub_columns+0x28c>)
 800ab06:	5c5b      	ldrb	r3, [r3, r1]
 800ab08:	4053      	eors	r3, r2
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	7cbb      	ldrb	r3, [r7, #18]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	4b72      	ldr	r3, [pc, #456]	; (800acdc <mix_sub_columns+0x28c>)
 800ab12:	5c5b      	ldrb	r3, [r3, r1]
 800ab14:	4053      	eors	r3, r2
 800ab16:	b2d9      	uxtb	r1, r3
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	4b6d      	ldr	r3, [pc, #436]	; (800acd4 <mix_sub_columns+0x284>)
 800ab1e:	5c9a      	ldrb	r2, [r3, r2]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3303      	adds	r3, #3
 800ab24:	404a      	eors	r2, r1
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ab2a:	7b3b      	ldrb	r3, [r7, #12]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4b69      	ldr	r3, [pc, #420]	; (800acd4 <mix_sub_columns+0x284>)
 800ab30:	5c9a      	ldrb	r2, [r3, r2]
 800ab32:	7c7b      	ldrb	r3, [r7, #17]
 800ab34:	4619      	mov	r1, r3
 800ab36:	4b68      	ldr	r3, [pc, #416]	; (800acd8 <mix_sub_columns+0x288>)
 800ab38:	5c5b      	ldrb	r3, [r3, r1]
 800ab3a:	4053      	eors	r3, r2
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	7dbb      	ldrb	r3, [r7, #22]
 800ab40:	4619      	mov	r1, r3
 800ab42:	4b66      	ldr	r3, [pc, #408]	; (800acdc <mix_sub_columns+0x28c>)
 800ab44:	5c5b      	ldrb	r3, [r3, r1]
 800ab46:	4053      	eors	r3, r2
 800ab48:	b2d9      	uxtb	r1, r3
 800ab4a:	7afb      	ldrb	r3, [r7, #11]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	4b63      	ldr	r3, [pc, #396]	; (800acdc <mix_sub_columns+0x28c>)
 800ab50:	5c9a      	ldrb	r2, [r3, r2]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3304      	adds	r3, #4
 800ab56:	404a      	eors	r2, r1
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ab5c:	7b3b      	ldrb	r3, [r7, #12]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	4b5e      	ldr	r3, [pc, #376]	; (800acdc <mix_sub_columns+0x28c>)
 800ab62:	5c9a      	ldrb	r2, [r3, r2]
 800ab64:	7c7b      	ldrb	r3, [r7, #17]
 800ab66:	4619      	mov	r1, r3
 800ab68:	4b5a      	ldr	r3, [pc, #360]	; (800acd4 <mix_sub_columns+0x284>)
 800ab6a:	5c5b      	ldrb	r3, [r3, r1]
 800ab6c:	4053      	eors	r3, r2
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	7dbb      	ldrb	r3, [r7, #22]
 800ab72:	4619      	mov	r1, r3
 800ab74:	4b58      	ldr	r3, [pc, #352]	; (800acd8 <mix_sub_columns+0x288>)
 800ab76:	5c5b      	ldrb	r3, [r3, r1]
 800ab78:	4053      	eors	r3, r2
 800ab7a:	b2d9      	uxtb	r1, r3
 800ab7c:	7afb      	ldrb	r3, [r7, #11]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	4b56      	ldr	r3, [pc, #344]	; (800acdc <mix_sub_columns+0x28c>)
 800ab82:	5c9a      	ldrb	r2, [r3, r2]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3305      	adds	r3, #5
 800ab88:	404a      	eors	r2, r1
 800ab8a:	b2d2      	uxtb	r2, r2
 800ab8c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ab8e:	7b3b      	ldrb	r3, [r7, #12]
 800ab90:	461a      	mov	r2, r3
 800ab92:	4b52      	ldr	r3, [pc, #328]	; (800acdc <mix_sub_columns+0x28c>)
 800ab94:	5c9a      	ldrb	r2, [r3, r2]
 800ab96:	7c7b      	ldrb	r3, [r7, #17]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4b50      	ldr	r3, [pc, #320]	; (800acdc <mix_sub_columns+0x28c>)
 800ab9c:	5c5b      	ldrb	r3, [r3, r1]
 800ab9e:	4053      	eors	r3, r2
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	7dbb      	ldrb	r3, [r7, #22]
 800aba4:	4619      	mov	r1, r3
 800aba6:	4b4b      	ldr	r3, [pc, #300]	; (800acd4 <mix_sub_columns+0x284>)
 800aba8:	5c5b      	ldrb	r3, [r3, r1]
 800abaa:	4053      	eors	r3, r2
 800abac:	b2d9      	uxtb	r1, r3
 800abae:	7afb      	ldrb	r3, [r7, #11]
 800abb0:	461a      	mov	r2, r3
 800abb2:	4b49      	ldr	r3, [pc, #292]	; (800acd8 <mix_sub_columns+0x288>)
 800abb4:	5c9a      	ldrb	r2, [r3, r2]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3306      	adds	r3, #6
 800abba:	404a      	eors	r2, r1
 800abbc:	b2d2      	uxtb	r2, r2
 800abbe:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800abc0:	7b3b      	ldrb	r3, [r7, #12]
 800abc2:	461a      	mov	r2, r3
 800abc4:	4b44      	ldr	r3, [pc, #272]	; (800acd8 <mix_sub_columns+0x288>)
 800abc6:	5c9a      	ldrb	r2, [r3, r2]
 800abc8:	7c7b      	ldrb	r3, [r7, #17]
 800abca:	4619      	mov	r1, r3
 800abcc:	4b43      	ldr	r3, [pc, #268]	; (800acdc <mix_sub_columns+0x28c>)
 800abce:	5c5b      	ldrb	r3, [r3, r1]
 800abd0:	4053      	eors	r3, r2
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	7dbb      	ldrb	r3, [r7, #22]
 800abd6:	4619      	mov	r1, r3
 800abd8:	4b40      	ldr	r3, [pc, #256]	; (800acdc <mix_sub_columns+0x28c>)
 800abda:	5c5b      	ldrb	r3, [r3, r1]
 800abdc:	4053      	eors	r3, r2
 800abde:	b2d9      	uxtb	r1, r3
 800abe0:	7afb      	ldrb	r3, [r7, #11]
 800abe2:	461a      	mov	r2, r3
 800abe4:	4b3b      	ldr	r3, [pc, #236]	; (800acd4 <mix_sub_columns+0x284>)
 800abe6:	5c9a      	ldrb	r2, [r3, r2]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3307      	adds	r3, #7
 800abec:	404a      	eors	r2, r1
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800abf2:	7c3b      	ldrb	r3, [r7, #16]
 800abf4:	461a      	mov	r2, r3
 800abf6:	4b37      	ldr	r3, [pc, #220]	; (800acd4 <mix_sub_columns+0x284>)
 800abf8:	5c9a      	ldrb	r2, [r3, r2]
 800abfa:	7d7b      	ldrb	r3, [r7, #21]
 800abfc:	4619      	mov	r1, r3
 800abfe:	4b36      	ldr	r3, [pc, #216]	; (800acd8 <mix_sub_columns+0x288>)
 800ac00:	5c5b      	ldrb	r3, [r3, r1]
 800ac02:	4053      	eors	r3, r2
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	7abb      	ldrb	r3, [r7, #10]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4b34      	ldr	r3, [pc, #208]	; (800acdc <mix_sub_columns+0x28c>)
 800ac0c:	5c5b      	ldrb	r3, [r3, r1]
 800ac0e:	4053      	eors	r3, r2
 800ac10:	b2d9      	uxtb	r1, r3
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b31      	ldr	r3, [pc, #196]	; (800acdc <mix_sub_columns+0x28c>)
 800ac18:	5c9a      	ldrb	r2, [r3, r2]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	404a      	eors	r2, r1
 800ac20:	b2d2      	uxtb	r2, r2
 800ac22:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ac24:	7c3b      	ldrb	r3, [r7, #16]
 800ac26:	461a      	mov	r2, r3
 800ac28:	4b2c      	ldr	r3, [pc, #176]	; (800acdc <mix_sub_columns+0x28c>)
 800ac2a:	5c9a      	ldrb	r2, [r3, r2]
 800ac2c:	7d7b      	ldrb	r3, [r7, #21]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <mix_sub_columns+0x284>)
 800ac32:	5c5b      	ldrb	r3, [r3, r1]
 800ac34:	4053      	eors	r3, r2
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	7abb      	ldrb	r3, [r7, #10]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4b26      	ldr	r3, [pc, #152]	; (800acd8 <mix_sub_columns+0x288>)
 800ac3e:	5c5b      	ldrb	r3, [r3, r1]
 800ac40:	4053      	eors	r3, r2
 800ac42:	b2d9      	uxtb	r1, r3
 800ac44:	7bfb      	ldrb	r3, [r7, #15]
 800ac46:	461a      	mov	r2, r3
 800ac48:	4b24      	ldr	r3, [pc, #144]	; (800acdc <mix_sub_columns+0x28c>)
 800ac4a:	5c9a      	ldrb	r2, [r3, r2]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3309      	adds	r3, #9
 800ac50:	404a      	eors	r2, r1
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ac56:	7c3b      	ldrb	r3, [r7, #16]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b20      	ldr	r3, [pc, #128]	; (800acdc <mix_sub_columns+0x28c>)
 800ac5c:	5c9a      	ldrb	r2, [r3, r2]
 800ac5e:	7d7b      	ldrb	r3, [r7, #21]
 800ac60:	4619      	mov	r1, r3
 800ac62:	4b1e      	ldr	r3, [pc, #120]	; (800acdc <mix_sub_columns+0x28c>)
 800ac64:	5c5b      	ldrb	r3, [r3, r1]
 800ac66:	4053      	eors	r3, r2
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	7abb      	ldrb	r3, [r7, #10]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <mix_sub_columns+0x284>)
 800ac70:	5c5b      	ldrb	r3, [r3, r1]
 800ac72:	4053      	eors	r3, r2
 800ac74:	b2d9      	uxtb	r1, r3
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	4b17      	ldr	r3, [pc, #92]	; (800acd8 <mix_sub_columns+0x288>)
 800ac7c:	5c9a      	ldrb	r2, [r3, r2]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	330a      	adds	r3, #10
 800ac82:	404a      	eors	r2, r1
 800ac84:	b2d2      	uxtb	r2, r2
 800ac86:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ac88:	7c3b      	ldrb	r3, [r7, #16]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <mix_sub_columns+0x288>)
 800ac8e:	5c9a      	ldrb	r2, [r3, r2]
 800ac90:	7d7b      	ldrb	r3, [r7, #21]
 800ac92:	4619      	mov	r1, r3
 800ac94:	4b11      	ldr	r3, [pc, #68]	; (800acdc <mix_sub_columns+0x28c>)
 800ac96:	5c5b      	ldrb	r3, [r3, r1]
 800ac98:	4053      	eors	r3, r2
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	7abb      	ldrb	r3, [r7, #10]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <mix_sub_columns+0x28c>)
 800aca2:	5c5b      	ldrb	r3, [r3, r1]
 800aca4:	4053      	eors	r3, r2
 800aca6:	b2d9      	uxtb	r1, r3
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	461a      	mov	r2, r3
 800acac:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <mix_sub_columns+0x284>)
 800acae:	5c9a      	ldrb	r2, [r3, r2]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	330b      	adds	r3, #11
 800acb4:	404a      	eors	r2, r1
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800acba:	7d3b      	ldrb	r3, [r7, #20]
 800acbc:	461a      	mov	r2, r3
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <mix_sub_columns+0x284>)
 800acc0:	5c9a      	ldrb	r2, [r3, r2]
 800acc2:	7a7b      	ldrb	r3, [r7, #9]
 800acc4:	4619      	mov	r1, r3
 800acc6:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <mix_sub_columns+0x288>)
 800acc8:	5c5b      	ldrb	r3, [r3, r1]
 800acca:	4053      	eors	r3, r2
 800accc:	b2da      	uxtb	r2, r3
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	4619      	mov	r1, r3
 800acd2:	e005      	b.n	800ace0 <mix_sub_columns+0x290>
 800acd4:	0801257c 	.word	0x0801257c
 800acd8:	0801267c 	.word	0x0801267c
 800acdc:	0801247c 	.word	0x0801247c
 800ace0:	4b2d      	ldr	r3, [pc, #180]	; (800ad98 <mix_sub_columns+0x348>)
 800ace2:	5c5b      	ldrb	r3, [r3, r1]
 800ace4:	4053      	eors	r3, r2
 800ace6:	b2d9      	uxtb	r1, r3
 800ace8:	7cfb      	ldrb	r3, [r7, #19]
 800acea:	461a      	mov	r2, r3
 800acec:	4b2a      	ldr	r3, [pc, #168]	; (800ad98 <mix_sub_columns+0x348>)
 800acee:	5c9a      	ldrb	r2, [r3, r2]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	330c      	adds	r3, #12
 800acf4:	404a      	eors	r2, r1
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800acfa:	7d3b      	ldrb	r3, [r7, #20]
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b26      	ldr	r3, [pc, #152]	; (800ad98 <mix_sub_columns+0x348>)
 800ad00:	5c9a      	ldrb	r2, [r3, r2]
 800ad02:	7a7b      	ldrb	r3, [r7, #9]
 800ad04:	4619      	mov	r1, r3
 800ad06:	4b25      	ldr	r3, [pc, #148]	; (800ad9c <mix_sub_columns+0x34c>)
 800ad08:	5c5b      	ldrb	r3, [r3, r1]
 800ad0a:	4053      	eors	r3, r2
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	4619      	mov	r1, r3
 800ad12:	4b23      	ldr	r3, [pc, #140]	; (800ada0 <mix_sub_columns+0x350>)
 800ad14:	5c5b      	ldrb	r3, [r3, r1]
 800ad16:	4053      	eors	r3, r2
 800ad18:	b2d9      	uxtb	r1, r3
 800ad1a:	7cfb      	ldrb	r3, [r7, #19]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4b1e      	ldr	r3, [pc, #120]	; (800ad98 <mix_sub_columns+0x348>)
 800ad20:	5c9a      	ldrb	r2, [r3, r2]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	330d      	adds	r3, #13
 800ad26:	404a      	eors	r2, r1
 800ad28:	b2d2      	uxtb	r2, r2
 800ad2a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ad2c:	7d3b      	ldrb	r3, [r7, #20]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4b19      	ldr	r3, [pc, #100]	; (800ad98 <mix_sub_columns+0x348>)
 800ad32:	5c9a      	ldrb	r2, [r3, r2]
 800ad34:	7a7b      	ldrb	r3, [r7, #9]
 800ad36:	4619      	mov	r1, r3
 800ad38:	4b17      	ldr	r3, [pc, #92]	; (800ad98 <mix_sub_columns+0x348>)
 800ad3a:	5c5b      	ldrb	r3, [r3, r1]
 800ad3c:	4053      	eors	r3, r2
 800ad3e:	b2da      	uxtb	r2, r3
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	4619      	mov	r1, r3
 800ad44:	4b15      	ldr	r3, [pc, #84]	; (800ad9c <mix_sub_columns+0x34c>)
 800ad46:	5c5b      	ldrb	r3, [r3, r1]
 800ad48:	4053      	eors	r3, r2
 800ad4a:	b2d9      	uxtb	r1, r3
 800ad4c:	7cfb      	ldrb	r3, [r7, #19]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <mix_sub_columns+0x350>)
 800ad52:	5c9a      	ldrb	r2, [r3, r2]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	330e      	adds	r3, #14
 800ad58:	404a      	eors	r2, r1
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ad5e:	7d3b      	ldrb	r3, [r7, #20]
 800ad60:	461a      	mov	r2, r3
 800ad62:	4b0f      	ldr	r3, [pc, #60]	; (800ada0 <mix_sub_columns+0x350>)
 800ad64:	5c9a      	ldrb	r2, [r3, r2]
 800ad66:	7a7b      	ldrb	r3, [r7, #9]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <mix_sub_columns+0x348>)
 800ad6c:	5c5b      	ldrb	r3, [r3, r1]
 800ad6e:	4053      	eors	r3, r2
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	7bbb      	ldrb	r3, [r7, #14]
 800ad74:	4619      	mov	r1, r3
 800ad76:	4b08      	ldr	r3, [pc, #32]	; (800ad98 <mix_sub_columns+0x348>)
 800ad78:	5c5b      	ldrb	r3, [r3, r1]
 800ad7a:	4053      	eors	r3, r2
 800ad7c:	b2d9      	uxtb	r1, r3
 800ad7e:	7cfb      	ldrb	r3, [r7, #19]
 800ad80:	461a      	mov	r2, r3
 800ad82:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <mix_sub_columns+0x34c>)
 800ad84:	5c9a      	ldrb	r2, [r3, r2]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	330f      	adds	r3, #15
 800ad8a:	404a      	eors	r2, r1
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
  }
 800ad90:	bf00      	nop
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	0801247c 	.word	0x0801247c
 800ad9c:	0801257c 	.word	0x0801257c
 800ada0:	0801267c 	.word	0x0801267c

0800ada4 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	460b      	mov	r3, r1
 800adae:	607a      	str	r2, [r7, #4]
 800adb0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	3b10      	subs	r3, #16
 800adb6:	2b10      	cmp	r3, #16
 800adb8:	bf8c      	ite	hi
 800adba:	2201      	movhi	r2, #1
 800adbc:	2200      	movls	r2, #0
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	d10d      	bne.n	800ade0 <aes_set_key+0x3c>
 800adc4:	2201      	movs	r2, #1
 800adc6:	fa02 f303 	lsl.w	r3, r2, r3
 800adca:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800adce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800add2:	2b00      	cmp	r3, #0
 800add4:	bf14      	ite	ne
 800add6:	2301      	movne	r3, #1
 800add8:	2300      	moveq	r3, #0
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d105      	bne.n	800adec <aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800ade8:	23ff      	movs	r3, #255	; 0xff
 800adea:	e0b2      	b.n	800af52 <aes_set_key+0x1ae>
        break;
 800adec:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7afa      	ldrb	r2, [r7, #11]
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fbf9 	bl	800a5ec <copy_block_nn>
    hi = (keylen + 28) << 2;
 800adfa:	7afb      	ldrb	r3, [r7, #11]
 800adfc:	331c      	adds	r3, #28
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ae04:	7c7b      	ldrb	r3, [r7, #17]
 800ae06:	091b      	lsrs	r3, r3, #4
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ae14:	7afb      	ldrb	r3, [r7, #11]
 800ae16:	75fb      	strb	r3, [r7, #23]
 800ae18:	2301      	movs	r3, #1
 800ae1a:	75bb      	strb	r3, [r7, #22]
 800ae1c:	e093      	b.n	800af46 <aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	3b04      	subs	r3, #4
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	5cd3      	ldrb	r3, [r2, r3]
 800ae26:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	3b03      	subs	r3, #3
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	5cd3      	ldrb	r3, [r2, r3]
 800ae30:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	3b02      	subs	r3, #2
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	5cd3      	ldrb	r3, [r2, r3]
 800ae3a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	5cd3      	ldrb	r3, [r2, r3]
 800ae44:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	7afa      	ldrb	r2, [r7, #11]
 800ae4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae4e:	fb02 f201 	mul.w	r2, r2, r1
 800ae52:	1a9b      	subs	r3, r3, r2
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d127      	bne.n	800aeaa <aes_set_key+0x106>
        {
            tt = t0;
 800ae5a:	7d7b      	ldrb	r3, [r7, #21]
 800ae5c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800ae5e:	7d3b      	ldrb	r3, [r7, #20]
 800ae60:	4a3e      	ldr	r2, [pc, #248]	; (800af5c <aes_set_key+0x1b8>)
 800ae62:	5cd2      	ldrb	r2, [r2, r3]
 800ae64:	7dbb      	ldrb	r3, [r7, #22]
 800ae66:	4053      	eors	r3, r2
 800ae68:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800ae6a:	7cfb      	ldrb	r3, [r7, #19]
 800ae6c:	4a3b      	ldr	r2, [pc, #236]	; (800af5c <aes_set_key+0x1b8>)
 800ae6e:	5cd3      	ldrb	r3, [r2, r3]
 800ae70:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ae72:	7cbb      	ldrb	r3, [r7, #18]
 800ae74:	4a39      	ldr	r2, [pc, #228]	; (800af5c <aes_set_key+0x1b8>)
 800ae76:	5cd3      	ldrb	r3, [r2, r3]
 800ae78:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ae7a:	7c3b      	ldrb	r3, [r7, #16]
 800ae7c:	4a37      	ldr	r2, [pc, #220]	; (800af5c <aes_set_key+0x1b8>)
 800ae7e:	5cd3      	ldrb	r3, [r2, r3]
 800ae80:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ae82:	7dbb      	ldrb	r3, [r7, #22]
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	b25a      	sxtb	r2, r3
 800ae88:	7dbb      	ldrb	r3, [r7, #22]
 800ae8a:	09db      	lsrs	r3, r3, #7
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	4619      	mov	r1, r3
 800ae90:	0049      	lsls	r1, r1, #1
 800ae92:	440b      	add	r3, r1
 800ae94:	4619      	mov	r1, r3
 800ae96:	00c8      	lsls	r0, r1, #3
 800ae98:	4619      	mov	r1, r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	440b      	add	r3, r1
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	b25b      	sxtb	r3, r3
 800aea2:	4053      	eors	r3, r2
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	75bb      	strb	r3, [r7, #22]
 800aea8:	e01c      	b.n	800aee4 <aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800aeaa:	7afb      	ldrb	r3, [r7, #11]
 800aeac:	2b18      	cmp	r3, #24
 800aeae:	d919      	bls.n	800aee4 <aes_set_key+0x140>
 800aeb0:	7dfb      	ldrb	r3, [r7, #23]
 800aeb2:	7afa      	ldrb	r2, [r7, #11]
 800aeb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aeb8:	fb02 f201 	mul.w	r2, r2, r1
 800aebc:	1a9b      	subs	r3, r3, r2
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b10      	cmp	r3, #16
 800aec2:	d10f      	bne.n	800aee4 <aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800aec4:	7d7b      	ldrb	r3, [r7, #21]
 800aec6:	4a25      	ldr	r2, [pc, #148]	; (800af5c <aes_set_key+0x1b8>)
 800aec8:	5cd3      	ldrb	r3, [r2, r3]
 800aeca:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800aecc:	7d3b      	ldrb	r3, [r7, #20]
 800aece:	4a23      	ldr	r2, [pc, #140]	; (800af5c <aes_set_key+0x1b8>)
 800aed0:	5cd3      	ldrb	r3, [r2, r3]
 800aed2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800aed4:	7cfb      	ldrb	r3, [r7, #19]
 800aed6:	4a21      	ldr	r2, [pc, #132]	; (800af5c <aes_set_key+0x1b8>)
 800aed8:	5cd3      	ldrb	r3, [r2, r3]
 800aeda:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800aedc:	7cbb      	ldrb	r3, [r7, #18]
 800aede:	4a1f      	ldr	r2, [pc, #124]	; (800af5c <aes_set_key+0x1b8>)
 800aee0:	5cd3      	ldrb	r3, [r2, r3]
 800aee2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800aee4:	7dfa      	ldrb	r2, [r7, #23]
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	1ad3      	subs	r3, r2, r3
 800aeea:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800aeec:	7c3b      	ldrb	r3, [r7, #16]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	5cd1      	ldrb	r1, [r2, r3]
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	7d7a      	ldrb	r2, [r7, #21]
 800aef6:	404a      	eors	r2, r1
 800aef8:	b2d1      	uxtb	r1, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800aefe:	7c3b      	ldrb	r3, [r7, #16]
 800af00:	3301      	adds	r3, #1
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	5cd1      	ldrb	r1, [r2, r3]
 800af06:	7dfb      	ldrb	r3, [r7, #23]
 800af08:	3301      	adds	r3, #1
 800af0a:	7d3a      	ldrb	r2, [r7, #20]
 800af0c:	404a      	eors	r2, r1
 800af0e:	b2d1      	uxtb	r1, r2
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800af14:	7c3b      	ldrb	r3, [r7, #16]
 800af16:	3302      	adds	r3, #2
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	5cd1      	ldrb	r1, [r2, r3]
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	3302      	adds	r3, #2
 800af20:	7cfa      	ldrb	r2, [r7, #19]
 800af22:	404a      	eors	r2, r1
 800af24:	b2d1      	uxtb	r1, r2
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800af2a:	7c3b      	ldrb	r3, [r7, #16]
 800af2c:	3303      	adds	r3, #3
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	5cd1      	ldrb	r1, [r2, r3]
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	3303      	adds	r3, #3
 800af36:	7cba      	ldrb	r2, [r7, #18]
 800af38:	404a      	eors	r2, r1
 800af3a:	b2d1      	uxtb	r1, r2
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	3304      	adds	r3, #4
 800af44:	75fb      	strb	r3, [r7, #23]
 800af46:	7dfa      	ldrb	r2, [r7, #23]
 800af48:	7c7b      	ldrb	r3, [r7, #17]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	f4ff af67 	bcc.w	800ae1e <aes_set_key+0x7a>
    }
    return 0;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	0801247c 	.word	0x0801247c

0800af60 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b08a      	sub	sp, #40	; 0x28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d038      	beq.n	800afe8 <aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	f107 0314 	add.w	r3, r7, #20
 800af7c:	68f9      	ldr	r1, [r7, #12]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fc06 	bl	800a790 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800af8a:	e014      	b.n	800afb6 <aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800af8c:	f107 0314 	add.w	r3, r7, #20
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fd5d 	bl	800aa50 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800af9c:	0112      	lsls	r2, r2, #4
 800af9e:	441a      	add	r2, r3
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	4611      	mov	r1, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fcaa 	bl	800a900 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800afac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afb0:	3301      	adds	r3, #1
 800afb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800afbc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d3e3      	bcc.n	800af8c <aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800afc4:	f107 0314 	add.w	r3, r7, #20
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff fca7 	bl	800a91c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800afd4:	0112      	lsls	r2, r2, #4
 800afd6:	441a      	add	r2, r3
 800afd8:	f107 0314 	add.w	r3, r7, #20
 800afdc:	4619      	mov	r1, r3
 800afde:	68b8      	ldr	r0, [r7, #8]
 800afe0:	f7ff fbd6 	bl	800a790 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	e000      	b.n	800afea <aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800afe8:	23ff      	movs	r3, #255	; 0xff
}
 800afea:	4618      	mov	r0, r3
 800afec:	3728      	adds	r7, #40	; 0x28
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <OnCalibrateSystemWakeupTimeTimerEvent>:

/*!
* Callback indicating the end of the system wake-up time calibration
*/
static void OnCalibrateSystemWakeupTimeTimerEvent( void )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	af00      	add	r7, sp, #0
  TimerStop( &CalibrateSystemWakeupTimeTimer );
 800aff8:	4803      	ldr	r0, [pc, #12]	; (800b008 <OnCalibrateSystemWakeupTimeTimerEvent+0x14>)
 800affa:	f004 ffb1 	bl	800ff60 <TimerStop>
  SystemWakeupTimeCalibrated = true;
 800affe:	4b03      	ldr	r3, [pc, #12]	; (800b00c <OnCalibrateSystemWakeupTimeTimerEvent+0x18>)
 800b000:	2201      	movs	r2, #1
 800b002:	701a      	strb	r2, [r3, #0]
}
 800b004:	bf00      	nop
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20000720 	.word	0x20000720
 800b00c:	20000735 	.word	0x20000735

0800b010 <BoardDisableIrq>:
* \remark Interrupt should only be fully disabled once the value is 0
*/
static uint8_t IrqNestLevel = 0;

void BoardDisableIrq( void )
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b014:	b672      	cpsid	i
}
 800b016:	bf00      	nop
  __disable_irq( );
  IrqNestLevel++;
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <BoardDisableIrq+0x1c>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	3301      	adds	r3, #1
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	4b02      	ldr	r3, [pc, #8]	; (800b02c <BoardDisableIrq+0x1c>)
 800b022:	701a      	strb	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	bc80      	pop	{r7}
 800b02a:	4770      	bx	lr
 800b02c:	20000736 	.word	0x20000736

0800b030 <BoardEnableIrq>:

void BoardEnableIrq( void )
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  IrqNestLevel--;
 800b034:	4b07      	ldr	r3, [pc, #28]	; (800b054 <BoardEnableIrq+0x24>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	3b01      	subs	r3, #1
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <BoardEnableIrq+0x24>)
 800b03e:	701a      	strb	r2, [r3, #0]
  if( IrqNestLevel == 0 )
 800b040:	4b04      	ldr	r3, [pc, #16]	; (800b054 <BoardEnableIrq+0x24>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <BoardEnableIrq+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800b048:	b662      	cpsie	i
}
 800b04a:	bf00      	nop
  {
    __enable_irq( );
  }
}
 800b04c:	bf00      	nop
 800b04e:	46bd      	mov	sp, r7
 800b050:	bc80      	pop	{r7}
 800b052:	4770      	bx	lr
 800b054:	20000736 	.word	0x20000736

0800b058 <BoardInitMcu>:
    }
  }
}

void BoardInitMcu( void )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af02      	add	r7, sp, #8
#if defined ADC_measurement
    SystemClock_Config();
#endif
  if( McuInitialized == false )
 800b05e:	4b1a      	ldr	r3, [pc, #104]	; (800b0c8 <BoardInitMcu+0x70>)
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	f083 0301 	eor.w	r3, r3, #1
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <BoardInitMcu+0x2c>
  {
#if defined( USE_BOOTLOADER )
    // Set the Vector Table base location at 0x3000
    SCB->VTOR = FLASH_BASE | 0x3000;
#endif
    HAL_Init( );
 800b06c:	f7f6 f900 	bl	8001270 <HAL_Init>
    
    SystemClockConfig( );
 800b070:	f000 f970 	bl	800b354 <SystemClockConfig>
	USB_VCP_init();
//	HAL_Delay( 3000 ); //wait for usb init
	DebugPrintf("USB CDC init done!\r\n");
#endif
*/
    DebugPrintf("Heltec lora node demo\r\n");
 800b074:	4815      	ldr	r0, [pc, #84]	; (800b0cc <BoardInitMcu+0x74>)
 800b076:	f005 f905 	bl	8010284 <DebugPrintf>
    RtcInit( );
 800b07a:	f001 fabd 	bl	800c5f8 <RtcInit>
    
    BoardUnusedIoInit( );
 800b07e:	f000 f89d 	bl	800b1bc <BoardUnusedIoInit>
 800b082:	e001      	b.n	800b088 <BoardInitMcu+0x30>
//#warning "Commented for test!"
  }
  else
  {
    SystemClockReConfig( );
 800b084:	f000 fa06 	bl	800b494 <SystemClockReConfig>
//#warning "Commented for test!"
  }

  SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800b088:	f04f 33ff 	mov.w	r3, #4294967295
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	2305      	movs	r3, #5
 800b090:	2206      	movs	r2, #6
 800b092:	2107      	movs	r1, #7
 800b094:	480e      	ldr	r0, [pc, #56]	; (800b0d0 <BoardInitMcu+0x78>)
 800b096:	f001 ffb9 	bl	800d00c <SpiInit>
  SX1276IoInit( );
 800b09a:	f002 faed 	bl	800d678 <SX1276IoInit>

  if( McuInitialized == false )
 800b09e:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <BoardInitMcu+0x70>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f083 0301 	eor.w	r3, r3, #1
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d009      	beq.n	800b0c0 <BoardInitMcu+0x68>
  {
    McuInitialized = true;
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <BoardInitMcu+0x70>)
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
    if( GetBoardPowerSource( ) == BATTERY_POWER )
 800b0b2:	f000 fa3d 	bl	800b530 <GetBoardPowerSource>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <BoardInitMcu+0x68>
    {
      CalibrateSystemWakeupTime( );
 800b0bc:	f000 f9c2 	bl	800b444 <CalibrateSystemWakeupTime>
    }

  }
}
 800b0c0:	bf00      	nop
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000734 	.word	0x20000734
 800b0cc:	08012430 	.word	0x08012430
 800b0d0:	2000128c 	.word	0x2000128c

0800b0d4 <BoardGetRandomSeed>:
  GpioInit( &ioPin, OSC_LSE_IN, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  GpioInit( &ioPin, OSC_LSE_OUT, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

uint32_t BoardGetRandomSeed( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
  return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <BoardGetRandomSeed+0x1c>)
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <BoardGetRandomSeed+0x20>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	405a      	eors	r2, r3
 800b0e2:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <BoardGetRandomSeed+0x24>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4053      	eors	r3, r2
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bc80      	pop	{r7}
 800b0ee:	4770      	bx	lr
 800b0f0:	1ff80050 	.word	0x1ff80050
 800b0f4:	1ff80054 	.word	0x1ff80054
 800b0f8:	1ff80064 	.word	0x1ff80064

0800b0fc <BoardBatteryMeasureVolage>:
#define BATTERY_SHUTDOWN_LEVEL                      3100 // mV

static uint16_t BatteryVoltage = BATTERY_MAX_LEVEL;

uint16_t BoardBatteryMeasureVolage( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
  //    uint16_t vdd = 0;
  //    uint16_t vref = VREFINT_CAL;
  //    uint16_t vdiv = 0;
  uint16_t batteryVoltage = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	80fb      	strh	r3, [r7, #6]
  //    batteryVoltage = vdd * ( ( float )vdiv / ( float )ADC_MAX_VALUE );
  //
  //    //                                vDiv
  //    // Divider bridge  VBAT <-> 470k -<--|-->- 470k <-> GND => vBat = 2 * vDiv
  //    batteryVoltage = 2 * batteryVoltage;
  return batteryVoltage;
 800b106:	88fb      	ldrh	r3, [r7, #6]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bc80      	pop	{r7}
 800b110:	4770      	bx	lr
	...

0800b114 <BoardGetBatteryLevel>:
{
  return BatteryVoltage;
}

uint8_t BoardGetBatteryLevel( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	71fb      	strb	r3, [r7, #7]
  
  BatteryVoltage = BoardBatteryMeasureVolage( );
 800b11e:	f7ff ffed 	bl	800b0fc <BoardBatteryMeasureVolage>
 800b122:	4603      	mov	r3, r0
 800b124:	461a      	mov	r2, r3
 800b126:	4b23      	ldr	r3, [pc, #140]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b128:	801a      	strh	r2, [r3, #0]
  
  if( GetBoardPowerSource( ) == USB_POWER )
 800b12a:	f000 fa01 	bl	800b530 <GetBoardPowerSource>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d102      	bne.n	800b13a <BoardGetBatteryLevel+0x26>
  {
    batteryLevel = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	71fb      	strb	r3, [r7, #7]
 800b138:	e036      	b.n	800b1a8 <BoardGetBatteryLevel+0x94>
  }
  else
  {
    if( BatteryVoltage >= BATTERY_MAX_LEVEL )
 800b13a:	4b1e      	ldr	r3, [pc, #120]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	f241 0235 	movw	r2, #4149	; 0x1035
 800b142:	4293      	cmp	r3, r2
 800b144:	d902      	bls.n	800b14c <BoardGetBatteryLevel+0x38>
    {
      batteryLevel = 254;
 800b146:	23fe      	movs	r3, #254	; 0xfe
 800b148:	71fb      	strb	r3, [r7, #7]
 800b14a:	e02d      	b.n	800b1a8 <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_MIN_LEVEL ) && ( BatteryVoltage < BATTERY_MAX_LEVEL ) )
 800b14c:	4b19      	ldr	r3, [pc, #100]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b154:	d918      	bls.n	800b188 <BoardGetBatteryLevel+0x74>
 800b156:	4b17      	ldr	r3, [pc, #92]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b158:	881b      	ldrh	r3, [r3, #0]
 800b15a:	f241 0235 	movw	r2, #4149	; 0x1035
 800b15e:	4293      	cmp	r3, r2
 800b160:	d812      	bhi.n	800b188 <BoardGetBatteryLevel+0x74>
    {
      batteryLevel = ( ( 253 * ( BatteryVoltage - BATTERY_MIN_LEVEL ) ) / ( BATTERY_MAX_LEVEL - BATTERY_MIN_LEVEL ) ) + 1;
 800b162:	4b14      	ldr	r3, [pc, #80]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	f5a3 6248 	sub.w	r2, r3, #3200	; 0xc80
 800b16a:	4613      	mov	r3, r2
 800b16c:	019b      	lsls	r3, r3, #6
 800b16e:	1a9b      	subs	r3, r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	4a10      	ldr	r2, [pc, #64]	; (800b1b8 <BoardGetBatteryLevel+0xa4>)
 800b176:	fb82 1203 	smull	r1, r2, r2, r3
 800b17a:	1212      	asrs	r2, r2, #8
 800b17c:	17db      	asrs	r3, r3, #31
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	b2db      	uxtb	r3, r3
 800b182:	3301      	adds	r3, #1
 800b184:	71fb      	strb	r3, [r7, #7]
 800b186:	e00f      	b.n	800b1a8 <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_SHUTDOWN_LEVEL ) && ( BatteryVoltage <= BATTERY_MIN_LEVEL ) )
 800b188:	4b0a      	ldr	r3, [pc, #40]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b190:	4293      	cmp	r3, r2
 800b192:	d907      	bls.n	800b1a4 <BoardGetBatteryLevel+0x90>
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <BoardGetBatteryLevel+0xa0>)
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b19c:	d802      	bhi.n	800b1a4 <BoardGetBatteryLevel+0x90>
    {
      batteryLevel = 1;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	71fb      	strb	r3, [r7, #7]
 800b1a2:	e001      	b.n	800b1a8 <BoardGetBatteryLevel+0x94>
    }
    else //if( BatteryVoltage <= BATTERY_SHUTDOWN_LEVEL )
    {
      batteryLevel = 255;
 800b1a4:	23ff      	movs	r3, #255	; 0xff
 800b1a6:	71fb      	strb	r3, [r7, #7]
      //GpioInit( &DcDcEnable, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
      //GpioInit( &BoardPowerDown, BOARD_POWER_DOWN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    }
  }
  return batteryLevel;
 800b1a8:	79fb      	ldrb	r3, [r7, #7]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	2000002e 	.word	0x2000002e
 800b1b8:	44fc3a35 	.word	0x44fc3a35

0800b1bc <BoardUnusedIoInit>:

static void BoardUnusedIoInit( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af02      	add	r7, sp, #8
  Gpio_t ioPin;

	GpioInit( &ioPin, UNUSEDPINPA0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b1c2:	1d38      	adds	r0, r7, #4
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	2203      	movs	r2, #3
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	f000 ff07 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b1d6:	1d38      	adds	r0, r7, #4
 800b1d8:	2300      	movs	r3, #0
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	f000 fefd 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b1ea:	1d38      	adds	r0, r7, #4
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	f000 fef3 	bl	800bfe4 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPA3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPA8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b1fe:	1d38      	adds	r0, r7, #4
 800b200:	2300      	movs	r3, #0
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	2300      	movs	r3, #0
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	2203      	movs	r2, #3
 800b20c:	2108      	movs	r1, #8
 800b20e:	f000 fee9 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DM
	GpioInit( &ioPin, UNUSEDPINPA12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DP
	GpioInit( &ioPin, UNUSEDPINPA13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWDIO
	GpioInit( &ioPin, UNUSEDPINPA14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWCLK
#endif
	GpioInit( &ioPin, UNUSEDPINPA15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b212:	1d38      	adds	r0, r7, #4
 800b214:	2300      	movs	r3, #0
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	2300      	movs	r3, #0
 800b21e:	2203      	movs	r2, #3
 800b220:	210f      	movs	r1, #15
 800b222:	f000 fedf 	bl	800bfe4 <GpioInit>

	GpioInit( &ioPin, UNUSEDPINPB0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b226:	1d38      	adds	r0, r7, #4
 800b228:	2300      	movs	r3, #0
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	2300      	movs	r3, #0
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	2300      	movs	r3, #0
 800b232:	2203      	movs	r2, #3
 800b234:	2110      	movs	r1, #16
 800b236:	f000 fed5 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b23a:	1d38      	adds	r0, r7, #4
 800b23c:	2300      	movs	r3, #0
 800b23e:	9301      	str	r3, [sp, #4]
 800b240:	2300      	movs	r3, #0
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	2203      	movs	r2, #3
 800b248:	2111      	movs	r1, #17
 800b24a:	f000 fecb 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b24e:	1d38      	adds	r0, r7, #4
 800b250:	2300      	movs	r3, #0
 800b252:	9301      	str	r3, [sp, #4]
 800b254:	2300      	movs	r3, #0
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	2300      	movs	r3, #0
 800b25a:	2203      	movs	r2, #3
 800b25c:	2112      	movs	r1, #18
 800b25e:	f000 fec1 	bl	800bfe4 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b262:	1d38      	adds	r0, r7, #4
 800b264:	2300      	movs	r3, #0
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	2300      	movs	r3, #0
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	2300      	movs	r3, #0
 800b26e:	2203      	movs	r2, #3
 800b270:	2114      	movs	r1, #20
 800b272:	f000 feb7 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b276:	1d38      	adds	r0, r7, #4
 800b278:	2300      	movs	r3, #0
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	2300      	movs	r3, #0
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	2300      	movs	r3, #0
 800b282:	2203      	movs	r2, #3
 800b284:	2115      	movs	r1, #21
 800b286:	f000 fead 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b28a:	1d38      	adds	r0, r7, #4
 800b28c:	2300      	movs	r3, #0
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	2300      	movs	r3, #0
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	2300      	movs	r3, #0
 800b296:	2203      	movs	r2, #3
 800b298:	2116      	movs	r1, #22
 800b29a:	f000 fea3 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b29e:	1d38      	adds	r0, r7, #4
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	2203      	movs	r2, #3
 800b2ac:	2117      	movs	r1, #23
 800b2ae:	f000 fe99 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b2b2:	1d38      	adds	r0, r7, #4
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9301      	str	r3, [sp, #4]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	2203      	movs	r2, #3
 800b2c0:	2118      	movs	r1, #24
 800b2c2:	f000 fe8f 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b2c6:	1d38      	adds	r0, r7, #4
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2203      	movs	r2, #3
 800b2d4:	2119      	movs	r1, #25
 800b2d6:	f000 fe85 	bl	800bfe4 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPB11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b2da:	1d38      	adds	r0, r7, #4
 800b2dc:	2300      	movs	r3, #0
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	2203      	movs	r2, #3
 800b2e8:	211c      	movs	r1, #28
 800b2ea:	f000 fe7b 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b2ee:	1d38      	adds	r0, r7, #4
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9301      	str	r3, [sp, #4]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	211d      	movs	r1, #29
 800b2fe:	f000 fe71 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b302:	1d38      	adds	r0, r7, #4
 800b304:	2300      	movs	r3, #0
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	2300      	movs	r3, #0
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	2300      	movs	r3, #0
 800b30e:	2203      	movs	r2, #3
 800b310:	211e      	movs	r1, #30
 800b312:	f000 fe67 	bl	800bfe4 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b316:	1d38      	adds	r0, r7, #4
 800b318:	2300      	movs	r3, #0
 800b31a:	9301      	str	r3, [sp, #4]
 800b31c:	2300      	movs	r3, #0
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	2300      	movs	r3, #0
 800b322:	2203      	movs	r2, #3
 800b324:	211f      	movs	r1, #31
 800b326:	f000 fe5d 	bl	800bfe4 <GpioInit>

	GpioInit( &ioPin, UNUSEDPINPC13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b32a:	1d38      	adds	r0, r7, #4
 800b32c:	2300      	movs	r3, #0
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	2300      	movs	r3, #0
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	2300      	movs	r3, #0
 800b336:	2203      	movs	r2, #3
 800b338:	212d      	movs	r1, #45	; 0x2d
 800b33a:	f000 fe53 	bl	800bfe4 <GpioInit>

#if defined( USE_DEBUGGER )
  HAL_DBGMCU_EnableDBGStopMode( );
 800b33e:	f7f6 f835 	bl	80013ac <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGSleepMode( );
 800b342:	f7f6 f825 	bl	8001390 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStandbyMode( );
 800b346:	f7f6 f83f 	bl	80013c8 <HAL_DBGMCU_EnableDBGStandbyMode>
  
  //���ã����͹����¹ر�SWD�������޷���STLINK������¼���򣡣���
  //    GpioInit( &ioPin, SWDIO, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //    GpioInit( &ioPin, SWCLK, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <SystemClockConfig>:

void SystemClockConfig( void )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b098      	sub	sp, #96	; 0x60
 800b358:	af00      	add	r7, sp, #0
#if defined( USE_DEBUGGER ) && !defined( USB_VCP )
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  __HAL_RCC_PWR_CLK_ENABLE( );
 800b35a:	4b37      	ldr	r3, [pc, #220]	; (800b438 <SystemClockConfig+0xe4>)
 800b35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35e:	4a36      	ldr	r2, [pc, #216]	; (800b438 <SystemClockConfig+0xe4>)
 800b360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b364:	6253      	str	r3, [r2, #36]	; 0x24
 800b366:	4b34      	ldr	r3, [pc, #208]	; (800b438 <SystemClockConfig+0xe4>)
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b36e:	607b      	str	r3, [r7, #4]
 800b370:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 800b372:	4b32      	ldr	r3, [pc, #200]	; (800b43c <SystemClockConfig+0xe8>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b37a:	4a30      	ldr	r2, [pc, #192]	; (800b43c <SystemClockConfig+0xe8>)
 800b37c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b380:	6013      	str	r3, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800b382:	2306      	movs	r3, #6
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b386:	2301      	movs	r3, #1
 800b388:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b38a:	2301      	movs	r3, #1
 800b38c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b38e:	2302      	movs	r3, #2
 800b390:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b392:	2300      	movs	r3, #0
 800b394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800b396:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b39a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2; //16*4/2=32
 800b39c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b3a0:	657b      	str	r3, [r7, #84]	; 0x54

  RCC_OscInitStruct.HSICalibrationValue=(uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> POSITION_VAL(RCC_ICSCR_HSITRIM));
 800b3a2:	4b25      	ldr	r3, [pc, #148]	; (800b438 <SystemClockConfig+0xe4>)
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800b3aa:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 800b3ae:	65fa      	str	r2, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3b2:	fa92 f2a2 	rbit	r2, r2
 800b3b6:	65ba      	str	r2, [r7, #88]	; 0x58
  return result;
 800b3b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3ba:	fab2 f282 	clz	r2, r2
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	40d3      	lsrs	r3, r2
 800b3c2:	637b      	str	r3, [r7, #52]	; 0x34

  if( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 800b3c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7f6 ffb7 	bl	800233c <HAL_RCC_OscConfig>
  {
    assert_param( FAIL );
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800b3ce:	230f      	movs	r3, #15
 800b3d0:	613b      	str	r3, [r7, #16]
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b3d2:	2303      	movs	r3, #3
 800b3d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	623b      	str	r3, [r7, #32]
  if( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_1 ) != HAL_OK )
 800b3e2:	f107 0310 	add.w	r3, r7, #16
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f7 fad7 	bl	800299c <HAL_RCC_ClockConfig>
  {
    assert_param( FAIL );
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b3f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3f6:	60fb      	str	r3, [r7, #12]
  if( HAL_RCCEx_PeriphCLKConfig( &PeriphClkInit ) != HAL_OK )
 800b3f8:	f107 0308 	add.w	r3, r7, #8
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7f7 fd61 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
  }
#endif
  /**************************************************END***********************************************/


  HAL_SYSTICK_Config( HAL_RCC_GetHCLKFreq( ) / 1000 );
 800b402:	f7f7 fccd 	bl	8002da0 <HAL_RCC_GetHCLKFreq>
 800b406:	4603      	mov	r3, r0
 800b408:	4a0d      	ldr	r2, [pc, #52]	; (800b440 <SystemClockConfig+0xec>)
 800b40a:	fba2 2303 	umull	r2, r3, r2, r3
 800b40e:	099b      	lsrs	r3, r3, #6
 800b410:	4618      	mov	r0, r3
 800b412:	f7f6 fb7e 	bl	8001b12 <HAL_SYSTICK_Config>
  
  HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 800b416:	2004      	movs	r0, #4
 800b418:	f7f6 fb88 	bl	8001b2c <HAL_SYSTICK_CLKSourceConfig>
  
  // HAL_NVIC_GetPriorityGrouping
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800b41c:	2003      	movs	r0, #3
 800b41e:	f7f6 fb43 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>
  
  // SysTick_IRQn interrupt configuration
  HAL_NVIC_SetPriority( SysTick_IRQn, 0, 0 );
 800b422:	2200      	movs	r2, #0
 800b424:	2100      	movs	r1, #0
 800b426:	f04f 30ff 	mov.w	r0, #4294967295
 800b42a:	f7f6 fb48 	bl	8001abe <HAL_NVIC_SetPriority>
}
 800b42e:	bf00      	nop
 800b430:	3760      	adds	r7, #96	; 0x60
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	40023800 	.word	0x40023800
 800b43c:	40007000 	.word	0x40007000
 800b440:	10624dd3 	.word	0x10624dd3

0800b444 <CalibrateSystemWakeupTime>:

void CalibrateSystemWakeupTime( void )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	af00      	add	r7, sp, #0
  if( SystemWakeupTimeCalibrated == false )
 800b448:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <CalibrateSystemWakeupTime+0x44>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	f083 0301 	eor.w	r3, r3, #1
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d015      	beq.n	800b482 <CalibrateSystemWakeupTime+0x3e>
  {
    TimerInit( &CalibrateSystemWakeupTimeTimer, OnCalibrateSystemWakeupTimeTimerEvent );
 800b456:	490d      	ldr	r1, [pc, #52]	; (800b48c <CalibrateSystemWakeupTime+0x48>)
 800b458:	480d      	ldr	r0, [pc, #52]	; (800b490 <CalibrateSystemWakeupTime+0x4c>)
 800b45a:	f004 fc1f 	bl	800fc9c <TimerInit>
    TimerSetValue( &CalibrateSystemWakeupTimeTimer, 1000 );
 800b45e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b462:	480b      	ldr	r0, [pc, #44]	; (800b490 <CalibrateSystemWakeupTime+0x4c>)
 800b464:	f004 fe38 	bl	80100d8 <TimerSetValue>
    TimerStart( &CalibrateSystemWakeupTimeTimer );
 800b468:	4809      	ldr	r0, [pc, #36]	; (800b490 <CalibrateSystemWakeupTime+0x4c>)
 800b46a:	f004 fc31 	bl	800fcd0 <TimerStart>
    while( SystemWakeupTimeCalibrated == false )
 800b46e:	e001      	b.n	800b474 <CalibrateSystemWakeupTime+0x30>
    {
    	//HAL_Delay(2);
    	TimerLowPowerHandler( ); //开启低功耗模式时注释这里将导致收发窗口对不上
 800b470:	f004 fe78 	bl	8010164 <TimerLowPowerHandler>
    while( SystemWakeupTimeCalibrated == false )
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <CalibrateSystemWakeupTime+0x44>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f083 0301 	eor.w	r3, r3, #1
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f6      	bne.n	800b470 <CalibrateSystemWakeupTime+0x2c>
    }
  }
}
 800b482:	bf00      	nop
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20000735 	.word	0x20000735
 800b48c:	0800aff5 	.word	0x0800aff5
 800b490:	20000720 	.word	0x20000720

0800b494 <SystemClockReConfig>:

void SystemClockReConfig( void )
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b49a:	4b21      	ldr	r3, [pc, #132]	; (800b520 <SystemClockReConfig+0x8c>)
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	4a20      	ldr	r2, [pc, #128]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4a4:	6253      	str	r3, [r2, #36]	; 0x24
 800b4a6:	4b1e      	ldr	r3, [pc, #120]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ae:	607b      	str	r3, [r7, #4]
 800b4b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 800b4b2:	4b1c      	ldr	r3, [pc, #112]	; (800b524 <SystemClockReConfig+0x90>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b4ba:	4a1a      	ldr	r2, [pc, #104]	; (800b524 <SystemClockReConfig+0x90>)
 800b4bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4c0:	6013      	str	r3, [r2, #0]
  
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800b4c2:	4b19      	ldr	r3, [pc, #100]	; (800b528 <SystemClockReConfig+0x94>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	601a      	str	r2, [r3, #0]
  __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 800b4c8:	4b15      	ldr	r3, [pc, #84]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800b4d0:	4a13      	ldr	r2, [pc, #76]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4d6:	6053      	str	r3, [r2, #4]
  //__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST((uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> POSITION_VAL(RCC_ICSCR_HSITRIM)));

    
  /* Wait till HSI is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSIRDY ) == RESET )
 800b4d8:	bf00      	nop
 800b4da:	4b11      	ldr	r3, [pc, #68]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f003 0302 	and.w	r3, r3, #2
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0f9      	beq.n	800b4da <SystemClockReConfig+0x46>
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_HSI )
	{
	}
	/*HSI->SYS*/
#elif defined( USE_DEBUGGER ) && !defined( USB_VCP )
	__HAL_RCC_PLL_ENABLE( );
 800b4e6:	4b11      	ldr	r3, [pc, #68]	; (800b52c <SystemClockReConfig+0x98>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]
	/* Wait till PLL is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET )
 800b4ec:	bf00      	nop
 800b4ee:	4b0c      	ldr	r3, [pc, #48]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d0f9      	beq.n	800b4ee <SystemClockReConfig+0x5a>
	{
	}
	/* Select PLL as system clock source */
	__HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_PLLCLK );
 800b4fa:	4b09      	ldr	r3, [pc, #36]	; (800b520 <SystemClockReConfig+0x8c>)
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	4a08      	ldr	r2, [pc, #32]	; (800b520 <SystemClockReConfig+0x8c>)
 800b500:	f043 0303 	orr.w	r3, r3, #3
 800b504:	6093      	str	r3, [r2, #8]

	/* Wait till PLL is used as system clock source */
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK )
 800b506:	bf00      	nop
 800b508:	4b05      	ldr	r3, [pc, #20]	; (800b520 <SystemClockReConfig+0x8c>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f003 030c 	and.w	r3, r3, #12
 800b510:	2b0c      	cmp	r3, #12
 800b512:	d1f9      	bne.n	800b508 <SystemClockReConfig+0x74>
	{
	}
	/*PLL->SYS*/
#endif
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bc80      	pop	{r7}
 800b51e:	4770      	bx	lr
 800b520:	40023800 	.word	0x40023800
 800b524:	40007000 	.word	0x40007000
 800b528:	42470000 	.word	0x42470000
 800b52c:	42470060 	.word	0x42470060

0800b530 <GetBoardPowerSource>:
  HAL_SYSTICK_IRQHandler( );
}
*/

uint8_t GetBoardPowerSource( void )
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  else
  {
    return USB_POWER;
  }
#else
  return BATTERY_POWER;
 800b534:	2301      	movs	r3, #1
#endif
}
 800b536:	4618      	mov	r0, r3
 800b538:	46bd      	mov	sp, r7
 800b53a:	bc80      	pop	{r7}
 800b53c:	4770      	bx	lr

0800b53e <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	33f1      	adds	r3, #241	; 0xf1
 800b54a:	2210      	movs	r2, #16
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f004 ff24 	bl	801039c <memset1>
            ctx->M_n = 0;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	22f0      	movs	r2, #240	; 0xf0
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f004 ff1a 	bl	801039c <memset1>
}
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	461a      	mov	r2, r3
 800b57e:	2110      	movs	r1, #16
 800b580:	6838      	ldr	r0, [r7, #0]
 800b582:	f7ff fc0f 	bl	800ada4 <aes_set_key>
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b08c      	sub	sp, #48	; 0x30
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 808f 	beq.w	800b6c4 <AES_CMAC_Update+0x136>
                  mlen = MIN(16 - ctx->M_n, len);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b5ac:	f1c3 0310 	rsb	r3, r3, #16
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	bf28      	it	cs
 800b5b6:	4613      	movcs	r3, r2
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f203 1201 	addw	r2, r3, #257	; 0x101
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b5c6:	4413      	add	r3, r2
 800b5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ca:	b292      	uxth	r2, r2
 800b5cc:	68b9      	ldr	r1, [r7, #8]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f004 fea9 	bl	8010326 <memcpy1>
                    ctx->M_n += mlen;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	441a      	add	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b5ea:	2b0f      	cmp	r3, #15
 800b5ec:	d97b      	bls.n	800b6e6 <AES_CMAC_Update+0x158>
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d077      	beq.n	800b6e6 <AES_CMAC_Update+0x158>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5fa:	e015      	b.n	800b628 <AES_CMAC_Update+0x9a>
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	4413      	add	r3, r2
 800b602:	33f1      	adds	r3, #241	; 0xf1
 800b604:	781a      	ldrb	r2, [r3, #0]
 800b606:	68f9      	ldr	r1, [r7, #12]
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	440b      	add	r3, r1
 800b60c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	4053      	eors	r3, r2
 800b614:	b2d9      	uxtb	r1, r3
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b61a:	4413      	add	r3, r2
 800b61c:	33f1      	adds	r3, #241	; 0xf1
 800b61e:	460a      	mov	r2, r1
 800b620:	701a      	strb	r2, [r3, #0]
 800b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b624:	3301      	adds	r3, #1
 800b626:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	2b0f      	cmp	r3, #15
 800b62c:	dde6      	ble.n	800b5fc <AES_CMAC_Update+0x6e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	33f1      	adds	r3, #241	; 0xf1
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4619      	mov	r1, r3
 800b63c:	f7ff fc90 	bl	800af60 <aes_encrypt>
                    data += mlen;
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	4413      	add	r3, r2
 800b646:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800b650:	e038      	b.n	800b6c4 <AES_CMAC_Update+0x136>

                    XOR(data, ctx->X);
 800b652:	2300      	movs	r3, #0
 800b654:	62bb      	str	r3, [r7, #40]	; 0x28
 800b656:	e013      	b.n	800b680 <AES_CMAC_Update+0xf2>
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	4413      	add	r3, r2
 800b65e:	33f1      	adds	r3, #241	; 0xf1
 800b660:	781a      	ldrb	r2, [r3, #0]
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	68b9      	ldr	r1, [r7, #8]
 800b666:	440b      	add	r3, r1
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	4053      	eors	r3, r2
 800b66c:	b2d9      	uxtb	r1, r3
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	4413      	add	r3, r2
 800b674:	33f1      	adds	r3, #241	; 0xf1
 800b676:	460a      	mov	r2, r1
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	3301      	adds	r3, #1
 800b67e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	2b0f      	cmp	r3, #15
 800b684:	dde8      	ble.n	800b658 <AES_CMAC_Update+0xca>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b68c:	f107 0314 	add.w	r3, r7, #20
 800b690:	2210      	movs	r2, #16
 800b692:	4618      	mov	r0, r3
 800b694:	f004 fe47 	bl	8010326 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	f107 0114 	add.w	r1, r7, #20
 800b69e:	f107 0314 	add.w	r3, r7, #20
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff fc5c 	bl	800af60 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	33f1      	adds	r3, #241	; 0xf1
 800b6ac:	f107 0114 	add.w	r1, r7, #20
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f004 fe37 	bl	8010326 <memcpy1>

                    data += 16;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	3310      	adds	r3, #16
 800b6bc:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3b10      	subs	r3, #16
 800b6c2:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b10      	cmp	r3, #16
 800b6c8:	d8c3      	bhi.n	800b652 <AES_CMAC_Update+0xc4>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	b292      	uxth	r2, r2
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f004 fe25 	bl	8010326 <memcpy1>
            ctx->M_n = len;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b6e4:	e000      	b.n	800b6e8 <AES_CMAC_Update+0x15a>
                            return;
 800b6e6:	bf00      	nop
}
 800b6e8:	3730      	adds	r7, #48	; 0x30
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b092      	sub	sp, #72	; 0x48
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800b6f8:	f107 031c 	add.w	r3, r7, #28
 800b6fc:	2210      	movs	r2, #16
 800b6fe:	2100      	movs	r1, #0
 800b700:	4618      	mov	r0, r3
 800b702:	f004 fe4b 	bl	801039c <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800b706:	683a      	ldr	r2, [r7, #0]
 800b708:	f107 011c 	add.w	r1, r7, #28
 800b70c:	f107 031c 	add.w	r3, r7, #28
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fc25 	bl	800af60 <aes_encrypt>

            if (K[0] & 0x80) {
 800b716:	7f3b      	ldrb	r3, [r7, #28]
 800b718:	b25b      	sxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	da31      	bge.n	800b782 <AES_CMAC_Final+0x94>
                    LSHIFT(K, K);
 800b71e:	2300      	movs	r3, #0
 800b720:	647b      	str	r3, [r7, #68]	; 0x44
 800b722:	e01c      	b.n	800b75e <AES_CMAC_Final+0x70>
 800b724:	f107 021c 	add.w	r2, r7, #28
 800b728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b72a:	4413      	add	r3, r2
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	b25a      	sxtb	r2, r3
 800b732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b734:	3301      	adds	r3, #1
 800b736:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b73a:	440b      	add	r3, r1
 800b73c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b740:	09db      	lsrs	r3, r3, #7
 800b742:	b2db      	uxtb	r3, r3
 800b744:	b25b      	sxtb	r3, r3
 800b746:	4313      	orrs	r3, r2
 800b748:	b25b      	sxtb	r3, r3
 800b74a:	b2d9      	uxtb	r1, r3
 800b74c:	f107 021c 	add.w	r2, r7, #28
 800b750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b752:	4413      	add	r3, r2
 800b754:	460a      	mov	r2, r1
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75a:	3301      	adds	r3, #1
 800b75c:	647b      	str	r3, [r7, #68]	; 0x44
 800b75e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b760:	2b0e      	cmp	r3, #14
 800b762:	dddf      	ble.n	800b724 <AES_CMAC_Final+0x36>
 800b764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                   K[15] ^= 0x87;
 800b770:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b774:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b778:	43db      	mvns	r3, r3
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b780:	e028      	b.n	800b7d4 <AES_CMAC_Final+0xe6>
            } else
                    LSHIFT(K, K);
 800b782:	2300      	movs	r3, #0
 800b784:	643b      	str	r3, [r7, #64]	; 0x40
 800b786:	e01c      	b.n	800b7c2 <AES_CMAC_Final+0xd4>
 800b788:	f107 021c 	add.w	r2, r7, #28
 800b78c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b78e:	4413      	add	r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	b25a      	sxtb	r2, r3
 800b796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b798:	3301      	adds	r3, #1
 800b79a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b79e:	440b      	add	r3, r1
 800b7a0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b7a4:	09db      	lsrs	r3, r3, #7
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	b25b      	sxtb	r3, r3
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	b25b      	sxtb	r3, r3
 800b7ae:	b2d9      	uxtb	r1, r3
 800b7b0:	f107 021c 	add.w	r2, r7, #28
 800b7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b6:	4413      	add	r3, r2
 800b7b8:	460a      	mov	r2, r1
 800b7ba:	701a      	strb	r2, [r3, #0]
 800b7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7be:	3301      	adds	r3, #1
 800b7c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c4:	2b0e      	cmp	r3, #14
 800b7c6:	dddf      	ble.n	800b788 <AES_CMAC_Final+0x9a>
 800b7c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


            if (ctx->M_n == 16) {
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b7da:	2b10      	cmp	r3, #16
 800b7dc:	d11d      	bne.n	800b81a <AES_CMAC_Final+0x12c>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800b7de:	2300      	movs	r3, #0
 800b7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7e2:	e016      	b.n	800b812 <AES_CMAC_Final+0x124>
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b7ee:	781a      	ldrb	r2, [r3, #0]
 800b7f0:	f107 011c 	add.w	r1, r7, #28
 800b7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f6:	440b      	add	r3, r1
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	4053      	eors	r3, r2
 800b7fc:	b2d9      	uxtb	r1, r3
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b802:	4413      	add	r3, r2
 800b804:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b808:	460a      	mov	r2, r1
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80e:	3301      	adds	r3, #1
 800b810:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b814:	2b0f      	cmp	r3, #15
 800b816:	dde5      	ble.n	800b7e4 <AES_CMAC_Final+0xf6>
 800b818:	e098      	b.n	800b94c <AES_CMAC_Final+0x25e>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800b81a:	7f3b      	ldrb	r3, [r7, #28]
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da31      	bge.n	800b886 <AES_CMAC_Final+0x198>
                          LSHIFT(K, K);
 800b822:	2300      	movs	r3, #0
 800b824:	63bb      	str	r3, [r7, #56]	; 0x38
 800b826:	e01c      	b.n	800b862 <AES_CMAC_Final+0x174>
 800b828:	f107 021c 	add.w	r2, r7, #28
 800b82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82e:	4413      	add	r3, r2
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	b25a      	sxtb	r2, r3
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	3301      	adds	r3, #1
 800b83a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b83e:	440b      	add	r3, r1
 800b840:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b844:	09db      	lsrs	r3, r3, #7
 800b846:	b2db      	uxtb	r3, r3
 800b848:	b25b      	sxtb	r3, r3
 800b84a:	4313      	orrs	r3, r2
 800b84c:	b25b      	sxtb	r3, r3
 800b84e:	b2d9      	uxtb	r1, r3
 800b850:	f107 021c 	add.w	r2, r7, #28
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	4413      	add	r3, r2
 800b858:	460a      	mov	r2, r1
 800b85a:	701a      	strb	r2, [r3, #0]
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	3301      	adds	r3, #1
 800b860:	63bb      	str	r3, [r7, #56]	; 0x38
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	2b0e      	cmp	r3, #14
 800b866:	dddf      	ble.n	800b828 <AES_CMAC_Final+0x13a>
 800b868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                          K[15] ^= 0x87;
 800b874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b878:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b87c:	43db      	mvns	r3, r3
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b884:	e028      	b.n	800b8d8 <AES_CMAC_Final+0x1ea>
                  } else
                           LSHIFT(K, K);
 800b886:	2300      	movs	r3, #0
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
 800b88a:	e01c      	b.n	800b8c6 <AES_CMAC_Final+0x1d8>
 800b88c:	f107 021c 	add.w	r2, r7, #28
 800b890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b892:	4413      	add	r3, r2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	b25a      	sxtb	r2, r3
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	3301      	adds	r3, #1
 800b89e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b8a2:	440b      	add	r3, r1
 800b8a4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b8a8:	09db      	lsrs	r3, r3, #7
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	b25b      	sxtb	r3, r3
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	b2d9      	uxtb	r1, r3
 800b8b4:	f107 021c 	add.w	r2, r7, #28
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	4413      	add	r3, r2
 800b8bc:	460a      	mov	r2, r1
 800b8be:	701a      	strb	r2, [r3, #0]
 800b8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c8:	2b0e      	cmp	r3, #14
 800b8ca:	dddf      	ble.n	800b88c <AES_CMAC_Final+0x19e>
 800b8cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	2280      	movs	r2, #128	; 0x80
 800b8e4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800b8e8:	e007      	b.n	800b8fa <AES_CMAC_Final+0x20c>
                         ctx->M_last[ctx->M_n] = 0;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b90e:	2b0f      	cmp	r3, #15
 800b910:	d9eb      	bls.n	800b8ea <AES_CMAC_Final+0x1fc>
   
                  XOR(K, ctx->M_last);
 800b912:	2300      	movs	r3, #0
 800b914:	633b      	str	r3, [r7, #48]	; 0x30
 800b916:	e016      	b.n	800b946 <AES_CMAC_Final+0x258>
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	4413      	add	r3, r2
 800b91e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b922:	781a      	ldrb	r2, [r3, #0]
 800b924:	f107 011c 	add.w	r1, r7, #28
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	440b      	add	r3, r1
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	4053      	eors	r3, r2
 800b930:	b2d9      	uxtb	r1, r3
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	4413      	add	r3, r2
 800b938:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b93c:	460a      	mov	r2, r1
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b942:	3301      	adds	r3, #1
 800b944:	633b      	str	r3, [r7, #48]	; 0x30
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	2b0f      	cmp	r3, #15
 800b94a:	dde5      	ble.n	800b918 <AES_CMAC_Final+0x22a>


           }
           XOR(ctx->M_last, ctx->X);
 800b94c:	2300      	movs	r3, #0
 800b94e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b950:	e015      	b.n	800b97e <AES_CMAC_Final+0x290>
 800b952:	683a      	ldr	r2, [r7, #0]
 800b954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b956:	4413      	add	r3, r2
 800b958:	33f1      	adds	r3, #241	; 0xf1
 800b95a:	781a      	ldrb	r2, [r3, #0]
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	440b      	add	r3, r1
 800b962:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	4053      	eors	r3, r2
 800b96a:	b2d9      	uxtb	r1, r3
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	4413      	add	r3, r2
 800b972:	33f1      	adds	r3, #241	; 0xf1
 800b974:	460a      	mov	r2, r1
 800b976:	701a      	strb	r2, [r3, #0]
 800b978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97a:	3301      	adds	r3, #1
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	2b0f      	cmp	r3, #15
 800b982:	dde6      	ble.n	800b952 <AES_CMAC_Final+0x264>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b98a:	f107 030c 	add.w	r3, r7, #12
 800b98e:	2210      	movs	r2, #16
 800b990:	4618      	mov	r0, r3
 800b992:	f004 fcc8 	bl	8010326 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	f107 030c 	add.w	r3, r7, #12
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff fade 	bl	800af60 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800b9a4:	f107 031c 	add.w	r3, r7, #28
 800b9a8:	2210      	movs	r2, #16
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f004 fcf5 	bl	801039c <memset1>

}
 800b9b2:	bf00      	nop
 800b9b4:	3748      	adds	r7, #72	; 0x48
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b082      	sub	sp, #8
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7f5 fcc2 	bl	800134c <HAL_Delay>
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <FifoNext>:
Maintainer: Miguel Luis and Gregory Cristian
*/
#include "fifo.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	807b      	strh	r3, [r7, #2]
    return ( index + 1 ) % fifo->Size;
 800b9dc:	887b      	ldrh	r3, [r7, #2]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	8912      	ldrh	r2, [r2, #8]
 800b9e4:	fb93 f1f2 	sdiv	r1, r3, r2
 800b9e8:	fb02 f201 	mul.w	r2, r2, r1
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	b29b      	uxth	r3, r3
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bc80      	pop	{r7}
 800b9f8:	4770      	bx	lr

0800b9fa <FifoPush>:
    fifo->Data = buffer;
    fifo->Size = size;
}

void FifoPush( Fifo_t *fifo, uint8_t data )
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b082      	sub	sp, #8
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70fb      	strb	r3, [r7, #3]
    fifo->End = FifoNext( fifo, fifo->End );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	885b      	ldrh	r3, [r3, #2]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff ffdf 	bl	800b9d0 <FifoNext>
 800ba12:	4603      	mov	r3, r0
 800ba14:	461a      	mov	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	805a      	strh	r2, [r3, #2]
    fifo->Data[fifo->End] = data;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	8852      	ldrh	r2, [r2, #2]
 800ba22:	4413      	add	r3, r2
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	701a      	strb	r2, [r3, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <FifoPop>:

uint8_t FifoPop( Fifo_t *fifo )
{
 800ba30:	b590      	push	{r4, r7, lr}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
    uint8_t data = fifo->Data[FifoNext( fifo, fifo->Begin )];
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685c      	ldr	r4, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff ffc4 	bl	800b9d0 <FifoNext>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	4423      	add	r3, r4
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	73fb      	strb	r3, [r7, #15]

    fifo->Begin = FifoNext( fifo, fifo->Begin );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff ffba 	bl	800b9d0 <FifoNext>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	801a      	strh	r2, [r3, #0]
    return data;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd90      	pop	{r4, r7, pc}

0800ba6e <IsFifoEmpty>:
    fifo->Begin = 0;
    fifo->End = 0;
}

bool IsFifoEmpty( Fifo_t *fifo )
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
    return ( fifo->Begin == fifo->End );
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	881a      	ldrh	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	885b      	ldrh	r3, [r3, #2]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	bf0c      	ite	eq
 800ba82:	2301      	moveq	r3, #1
 800ba84:	2300      	movne	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bc80      	pop	{r7}
 800ba90:	4770      	bx	lr

0800ba92 <IsFifoFull>:

bool IsFifoFull( Fifo_t *fifo )
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
    return ( FifoNext( fifo, fifo->End ) == fifo->Begin );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	885b      	ldrh	r3, [r3, #2]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ff95 	bl	800b9d0 <FifoNext>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	bf0c      	ite	eq
 800bab2:	2301      	moveq	r3, #1
 800bab4:	2300      	movne	r3, #0
 800bab6:	b2db      	uxtb	r3, r3
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <GpioMcuInit>:
#include "gpio-board.h"

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08c      	sub	sp, #48	; 0x30
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	4608      	mov	r0, r1
 800baca:	4611      	mov	r1, r2
 800bacc:	461a      	mov	r2, r3
 800bace:	4603      	mov	r3, r0
 800bad0:	70fb      	strb	r3, [r7, #3]
 800bad2:	460b      	mov	r3, r1
 800bad4:	70bb      	strb	r3, [r7, #2]
 800bad6:	4613      	mov	r3, r2
 800bad8:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    obj->pin = pin;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	78fa      	ldrb	r2, [r7, #3]
 800bade:	701a      	strb	r2, [r3, #0]

    if( pin == NC )
 800bae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae8:	f000 80b5 	beq.w	800bc56 <GpioMcuInit+0x196>
    {
        return;
    }

    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f993 3000 	ldrsb.w	r3, [r3]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 030f 	and.w	r3, r3, #15
 800baf8:	2201      	movs	r2, #1
 800bafa:	fa02 f303 	lsl.w	r3, r2, r3
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f993 3000 	ldrsb.w	r3, [r3]
 800bb0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d10f      	bne.n	800bb32 <GpioMcuInit+0x72>
    {
        obj->port = GPIOA;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a52      	ldr	r2, [pc, #328]	; (800bc60 <GpioMcuInit+0x1a0>)
 800bb16:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800bb18:	4b52      	ldr	r3, [pc, #328]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb1a:	69db      	ldr	r3, [r3, #28]
 800bb1c:	4a51      	ldr	r2, [pc, #324]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb1e:	f043 0301 	orr.w	r3, r3, #1
 800bb22:	61d3      	str	r3, [r2, #28]
 800bb24:	4b4f      	ldr	r3, [pc, #316]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	f003 0301 	and.w	r3, r3, #1
 800bb2c:	61bb      	str	r3, [r7, #24]
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	e053      	b.n	800bbda <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f993 3000 	ldrsb.w	r3, [r3]
 800bb38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb3c:	2b10      	cmp	r3, #16
 800bb3e:	d10f      	bne.n	800bb60 <GpioMcuInit+0xa0>
    {
        obj->port = GPIOB;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a49      	ldr	r2, [pc, #292]	; (800bc68 <GpioMcuInit+0x1a8>)
 800bb44:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 800bb46:	4b47      	ldr	r3, [pc, #284]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb48:	69db      	ldr	r3, [r3, #28]
 800bb4a:	4a46      	ldr	r2, [pc, #280]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb4c:	f043 0302 	orr.w	r3, r3, #2
 800bb50:	61d3      	str	r3, [r2, #28]
 800bb52:	4b44      	ldr	r3, [pc, #272]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	f003 0302 	and.w	r3, r3, #2
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	e03c      	b.n	800bbda <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f993 3000 	ldrsb.w	r3, [r3]
 800bb66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb6a:	2b20      	cmp	r3, #32
 800bb6c:	d10f      	bne.n	800bb8e <GpioMcuInit+0xce>
    {
        obj->port = GPIOC;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a3e      	ldr	r2, [pc, #248]	; (800bc6c <GpioMcuInit+0x1ac>)
 800bb72:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800bb74:	4b3b      	ldr	r3, [pc, #236]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	4a3a      	ldr	r2, [pc, #232]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb7a:	f043 0304 	orr.w	r3, r3, #4
 800bb7e:	61d3      	str	r3, [r2, #28]
 800bb80:	4b38      	ldr	r3, [pc, #224]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bb82:	69db      	ldr	r3, [r3, #28]
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	613b      	str	r3, [r7, #16]
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	e025      	b.n	800bbda <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f993 3000 	ldrsb.w	r3, [r3]
 800bb94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb98:	2b30      	cmp	r3, #48	; 0x30
 800bb9a:	d10f      	bne.n	800bbbc <GpioMcuInit+0xfc>
    {
        obj->port = GPIOD;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a34      	ldr	r2, [pc, #208]	; (800bc70 <GpioMcuInit+0x1b0>)
 800bba0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 800bba2:	4b30      	ldr	r3, [pc, #192]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	4a2f      	ldr	r2, [pc, #188]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bba8:	f043 0308 	orr.w	r3, r3, #8
 800bbac:	61d3      	str	r3, [r2, #28]
 800bbae:	4b2d      	ldr	r3, [pc, #180]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f003 0308 	and.w	r3, r3, #8
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	e00e      	b.n	800bbda <GpioMcuInit+0x11a>
    }
    else
    {
        obj->port = GPIOH;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a2d      	ldr	r2, [pc, #180]	; (800bc74 <GpioMcuInit+0x1b4>)
 800bbc0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 800bbc2:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bbc4:	69db      	ldr	r3, [r3, #28]
 800bbc6:	4a27      	ldr	r2, [pc, #156]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bbc8:	f043 0320 	orr.w	r3, r3, #32
 800bbcc:	61d3      	str	r3, [r2, #28]
 800bbce:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <GpioMcuInit+0x1a4>)
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	f003 0320 	and.w	r3, r3, #32
 800bbd6:	60bb      	str	r3, [r7, #8]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	885b      	ldrh	r3, [r3, #2]
 800bbde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = obj->pull = type;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bbe6:	729a      	strb	r2, [r3, #10]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	7a9b      	ldrb	r3, [r3, #10]
 800bbec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800bbee:	2302      	movs	r3, #2
 800bbf0:	62bb      	str	r3, [r7, #40]	; 0x28

    if( mode == PIN_INPUT )
 800bbf2:	78bb      	ldrb	r3, [r7, #2]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d102      	bne.n	800bbfe <GpioMcuInit+0x13e>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	623b      	str	r3, [r7, #32]
 800bbfc:	e01b      	b.n	800bc36 <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ANALOGIC )
 800bbfe:	78bb      	ldrb	r3, [r7, #2]
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d102      	bne.n	800bc0a <GpioMcuInit+0x14a>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800bc04:	2303      	movs	r3, #3
 800bc06:	623b      	str	r3, [r7, #32]
 800bc08:	e015      	b.n	800bc36 <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800bc0a:	78bb      	ldrb	r3, [r7, #2]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d10a      	bne.n	800bc26 <GpioMcuInit+0x166>
    {
        if( config == PIN_OPEN_DRAIN )
 800bc10:	787b      	ldrb	r3, [r7, #1]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d102      	bne.n	800bc1c <GpioMcuInit+0x15c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800bc16:	2312      	movs	r3, #18
 800bc18:	623b      	str	r3, [r7, #32]
 800bc1a:	e001      	b.n	800bc20 <GpioMcuInit+0x160>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800bc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc24:	e007      	b.n	800bc36 <GpioMcuInit+0x176>
    }
    else // mode output
    {
        if( config == PIN_OPEN_DRAIN )
 800bc26:	787b      	ldrb	r3, [r7, #1]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d102      	bne.n	800bc32 <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800bc2c:	2311      	movs	r3, #17
 800bc2e:	623b      	str	r3, [r7, #32]
 800bc30:	e001      	b.n	800bc36 <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800bc32:	2301      	movs	r3, #1
 800bc34:	623b      	str	r3, [r7, #32]
        }
    }

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 800bc36:	78bb      	ldrb	r3, [r7, #2]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d103      	bne.n	800bc44 <GpioMcuInit+0x184>
    {
        GpioMcuWrite( obj, value );
 800bc3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f92c 	bl	800be9c <GpioMcuWrite>
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	f107 021c 	add.w	r2, r7, #28
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7f6 f9c4 	bl	8001fdc <HAL_GPIO_Init>
 800bc54:	e000      	b.n	800bc58 <GpioMcuInit+0x198>
        return;
 800bc56:	bf00      	nop
}
 800bc58:	3730      	adds	r7, #48	; 0x30
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	40020000 	.word	0x40020000
 800bc64:	40023800 	.word	0x40023800
 800bc68:	40020400 	.word	0x40020400
 800bc6c:	40020800 	.word	0x40020800
 800bc70:	40020c00 	.word	0x40020c00
 800bc74:	40021400 	.word	0x40021400

0800bc78 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b08c      	sub	sp, #48	; 0x30
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	607b      	str	r3, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	72fb      	strb	r3, [r7, #11]
 800bc86:	4613      	mov	r3, r2
 800bc88:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 800bc8e:	2306      	movs	r3, #6
 800bc90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 80f9 	beq.w	800be8e <GpioMcuSetInterrupt+0x216>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	885b      	ldrh	r3, [r3, #2]
 800bca0:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 800bca2:	7afb      	ldrb	r3, [r7, #11]
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d103      	bne.n	800bcb0 <GpioMcuSetInterrupt+0x38>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bca8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800bcac:	61bb      	str	r3, [r7, #24]
 800bcae:	e009      	b.n	800bcc4 <GpioMcuSetInterrupt+0x4c>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 800bcb0:	7afb      	ldrb	r3, [r7, #11]
 800bcb2:	2b02      	cmp	r3, #2
 800bcb4:	d103      	bne.n	800bcbe <GpioMcuSetInterrupt+0x46>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800bcb6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800bcba:	61bb      	str	r3, [r7, #24]
 800bcbc:	e002      	b.n	800bcc4 <GpioMcuSetInterrupt+0x4c>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bcbe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800bcc2:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = obj->pull;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	7a9b      	ldrb	r3, [r3, #10]
 800bcc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800bcca:	2302      	movs	r3, #2
 800bccc:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f107 0214 	add.w	r2, r7, #20
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7f6 f97f 	bl	8001fdc <HAL_GPIO_Init>

    switch( irqPriority )
 800bcde:	7abb      	ldrb	r3, [r7, #10]
 800bce0:	2b03      	cmp	r3, #3
 800bce2:	d00f      	beq.n	800bd04 <GpioMcuSetInterrupt+0x8c>
 800bce4:	2b03      	cmp	r3, #3
 800bce6:	dc10      	bgt.n	800bd0a <GpioMcuSetInterrupt+0x92>
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	dc02      	bgt.n	800bcf2 <GpioMcuSetInterrupt+0x7a>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da03      	bge.n	800bcf8 <GpioMcuSetInterrupt+0x80>
 800bcf0:	e00b      	b.n	800bd0a <GpioMcuSetInterrupt+0x92>
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d003      	beq.n	800bcfe <GpioMcuSetInterrupt+0x86>
 800bcf6:	e008      	b.n	800bd0a <GpioMcuSetInterrupt+0x92>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bcfc:	e008      	b.n	800bd10 <GpioMcuSetInterrupt+0x98>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800bcfe:	2302      	movs	r3, #2
 800bd00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd02:	e005      	b.n	800bd10 <GpioMcuSetInterrupt+0x98>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800bd04:	2301      	movs	r3, #1
 800bd06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd08:	e002      	b.n	800bd10 <GpioMcuSetInterrupt+0x98>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd0e:	bf00      	nop
    }

    switch( obj->pinIndex )
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	885b      	ldrh	r3, [r3, #2]
 800bd14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd18:	f000 809d 	beq.w	800be56 <GpioMcuSetInterrupt+0x1de>
 800bd1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd20:	f300 809d 	bgt.w	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd28:	f000 8095 	beq.w	800be56 <GpioMcuSetInterrupt+0x1de>
 800bd2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd30:	f300 8095 	bgt.w	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd38:	f000 808d 	beq.w	800be56 <GpioMcuSetInterrupt+0x1de>
 800bd3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd40:	f300 808d 	bgt.w	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd48:	f000 8085 	beq.w	800be56 <GpioMcuSetInterrupt+0x1de>
 800bd4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd50:	f300 8085 	bgt.w	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd58:	d07d      	beq.n	800be56 <GpioMcuSetInterrupt+0x1de>
 800bd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd5e:	dc7e      	bgt.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd64:	d077      	beq.n	800be56 <GpioMcuSetInterrupt+0x1de>
 800bd66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd6a:	dc78      	bgt.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd70:	d06d      	beq.n	800be4e <GpioMcuSetInterrupt+0x1d6>
 800bd72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd76:	dc72      	bgt.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd7c:	d067      	beq.n	800be4e <GpioMcuSetInterrupt+0x1d6>
 800bd7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd82:	dc6c      	bgt.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd84:	2b80      	cmp	r3, #128	; 0x80
 800bd86:	d062      	beq.n	800be4e <GpioMcuSetInterrupt+0x1d6>
 800bd88:	2b80      	cmp	r3, #128	; 0x80
 800bd8a:	dc68      	bgt.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd8c:	2b20      	cmp	r3, #32
 800bd8e:	dc47      	bgt.n	800be20 <GpioMcuSetInterrupt+0x1a8>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dd64      	ble.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd94:	3b01      	subs	r3, #1
 800bd96:	2b1f      	cmp	r3, #31
 800bd98:	d861      	bhi.n	800be5e <GpioMcuSetInterrupt+0x1e6>
 800bd9a:	a201      	add	r2, pc, #4	; (adr r2, 800bda0 <GpioMcuSetInterrupt+0x128>)
 800bd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda0:	0800be27 	.word	0x0800be27
 800bda4:	0800be2f 	.word	0x0800be2f
 800bda8:	0800be5f 	.word	0x0800be5f
 800bdac:	0800be37 	.word	0x0800be37
 800bdb0:	0800be5f 	.word	0x0800be5f
 800bdb4:	0800be5f 	.word	0x0800be5f
 800bdb8:	0800be5f 	.word	0x0800be5f
 800bdbc:	0800be3f 	.word	0x0800be3f
 800bdc0:	0800be5f 	.word	0x0800be5f
 800bdc4:	0800be5f 	.word	0x0800be5f
 800bdc8:	0800be5f 	.word	0x0800be5f
 800bdcc:	0800be5f 	.word	0x0800be5f
 800bdd0:	0800be5f 	.word	0x0800be5f
 800bdd4:	0800be5f 	.word	0x0800be5f
 800bdd8:	0800be5f 	.word	0x0800be5f
 800bddc:	0800be47 	.word	0x0800be47
 800bde0:	0800be5f 	.word	0x0800be5f
 800bde4:	0800be5f 	.word	0x0800be5f
 800bde8:	0800be5f 	.word	0x0800be5f
 800bdec:	0800be5f 	.word	0x0800be5f
 800bdf0:	0800be5f 	.word	0x0800be5f
 800bdf4:	0800be5f 	.word	0x0800be5f
 800bdf8:	0800be5f 	.word	0x0800be5f
 800bdfc:	0800be5f 	.word	0x0800be5f
 800be00:	0800be5f 	.word	0x0800be5f
 800be04:	0800be5f 	.word	0x0800be5f
 800be08:	0800be5f 	.word	0x0800be5f
 800be0c:	0800be5f 	.word	0x0800be5f
 800be10:	0800be5f 	.word	0x0800be5f
 800be14:	0800be5f 	.word	0x0800be5f
 800be18:	0800be5f 	.word	0x0800be5f
 800be1c:	0800be4f 	.word	0x0800be4f
 800be20:	2b40      	cmp	r3, #64	; 0x40
 800be22:	d014      	beq.n	800be4e <GpioMcuSetInterrupt+0x1d6>
    case GPIO_PIN_14:
    case GPIO_PIN_15:
        IRQnb = EXTI15_10_IRQn;
        break;
    default:
        break;
 800be24:	e01b      	b.n	800be5e <GpioMcuSetInterrupt+0x1e6>
        IRQnb = EXTI0_IRQn;
 800be26:	2306      	movs	r3, #6
 800be28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be2c:	e018      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI1_IRQn;
 800be2e:	2307      	movs	r3, #7
 800be30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be34:	e014      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI2_IRQn;
 800be36:	2308      	movs	r3, #8
 800be38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be3c:	e010      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI3_IRQn;
 800be3e:	2309      	movs	r3, #9
 800be40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be44:	e00c      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI4_IRQn;
 800be46:	230a      	movs	r3, #10
 800be48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be4c:	e008      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI9_5_IRQn;
 800be4e:	2317      	movs	r3, #23
 800be50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be54:	e004      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI15_10_IRQn;
 800be56:	2328      	movs	r3, #40	; 0x28
 800be58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800be5c:	e000      	b.n	800be60 <GpioMcuSetInterrupt+0x1e8>
        break;
 800be5e:	bf00      	nop
    }

    GpioIrq[( obj->pin ) & 0x0F] = irqHandler;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f993 3000 	ldrsb.w	r3, [r3]
 800be66:	b2db      	uxtb	r3, r3
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	490a      	ldr	r1, [pc, #40]	; (800be98 <GpioMcuSetInterrupt+0x220>)
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800be74:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800be78:	2200      	movs	r2, #0
 800be7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7f5 fe1e 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800be82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800be86:	4618      	mov	r0, r3
 800be88:	f7f5 fe35 	bl	8001af6 <HAL_NVIC_EnableIRQ>
 800be8c:	e000      	b.n	800be90 <GpioMcuSetInterrupt+0x218>
        return;
 800be8e:	bf00      	nop
}
 800be90:	3730      	adds	r7, #48	; 0x30
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20000738 	.word	0x20000738

0800be9c <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f993 3000 	ldrsb.w	r3, [r3]
 800beb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb4:	d009      	beq.n	800beca <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6858      	ldr	r0, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	885b      	ldrh	r3, [r3, #2]
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	4619      	mov	r1, r3
 800bec4:	f7f6 fa0a 	bl	80022dc <HAL_GPIO_WritePin>
 800bec8:	e000      	b.n	800becc <GpioMcuWrite+0x30>
        return;
 800beca:	bf00      	nop
}
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800bed6:	f000 fc8d 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800beda:	2001      	movs	r0, #1
 800bedc:	f7f6 fa16 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bee0:	bf00      	nop
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800bee8:	f000 fc84 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800beec:	2002      	movs	r0, #2
 800beee:	f7f6 fa0d 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bef2:	bf00      	nop
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800befa:	f000 fc7b 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800befe:	2004      	movs	r0, #4
 800bf00:	f7f6 fa04 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bf04:	bf00      	nop
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800bf0c:	f000 fc72 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800bf10:	2008      	movs	r0, #8
 800bf12:	f7f6 f9fb 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bf16:	bf00      	nop
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800bf1e:	f000 fc69 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800bf22:	2010      	movs	r0, #16
 800bf24:	f7f6 f9f2 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bf28:	bf00      	nop
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800bf30:	f000 fc60 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800bf34:	2020      	movs	r0, #32
 800bf36:	f7f6 f9e9 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800bf3a:	2040      	movs	r0, #64	; 0x40
 800bf3c:	f7f6 f9e6 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800bf40:	2080      	movs	r0, #128	; 0x80
 800bf42:	f7f6 f9e3 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800bf46:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bf4a:	f7f6 f9df 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800bf4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bf52:	f7f6 f9db 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bf56:	bf00      	nop
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800bf5e:	f000 fc49 	bl	800c7f4 <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800bf62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bf66:	f7f6 f9d1 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800bf6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bf6e:	f7f6 f9cd 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800bf72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bf76:	f7f6 f9c9 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800bf7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bf7e:	f7f6 f9c5 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800bf82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bf86:	f7f6 f9c1 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800bf8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bf8e:	f7f6 f9bd 	bl	800230c <HAL_GPIO_EXTI_IRQHandler>
}
 800bf92:	bf00      	nop
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	80fb      	strh	r3, [r7, #6]
    uint8_t callbackIndex = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800bfa6:	88fb      	ldrh	r3, [r7, #6]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d009      	beq.n	800bfc0 <HAL_GPIO_EXTI_Callback+0x28>
    {
        while( gpioPin != 0x01 )
 800bfac:	e005      	b.n	800bfba <HAL_GPIO_EXTI_Callback+0x22>
        {
            gpioPin = gpioPin >> 1;
 800bfae:	88fb      	ldrh	r3, [r7, #6]
 800bfb0:	085b      	lsrs	r3, r3, #1
 800bfb2:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800bfba:	88fb      	ldrh	r3, [r7, #6]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d1f6      	bne.n	800bfae <HAL_GPIO_EXTI_Callback+0x16>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	4a07      	ldr	r2, [pc, #28]	; (800bfe0 <HAL_GPIO_EXTI_Callback+0x48>)
 800bfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d004      	beq.n	800bfd6 <HAL_GPIO_EXTI_Callback+0x3e>
    {
        GpioIrq[callbackIndex]( );
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	4a04      	ldr	r2, [pc, #16]	; (800bfe0 <HAL_GPIO_EXTI_Callback+0x48>)
 800bfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd4:	4798      	blx	r3
    }
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000738 	.word	0x20000738

0800bfe4 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	70fb      	strb	r3, [r7, #3]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70bb      	strb	r3, [r7, #2]
 800bffa:	4613      	mov	r3, r2
 800bffc:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 800bffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c002:	111b      	asrs	r3, r3, #4
 800c004:	b25b      	sxtb	r3, r3
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b06      	cmp	r3, #6
 800c00a:	d80b      	bhi.n	800c024 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800c00c:	7878      	ldrb	r0, [r7, #1]
 800c00e:	78ba      	ldrb	r2, [r7, #2]
 800c010:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	7c3b      	ldrb	r3, [r7, #16]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	4603      	mov	r3, r0
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fd4e 	bl	800bac0 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 800c024:	bf00      	nop
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	460b      	mov	r3, r1
 800c038:	72fb      	strb	r3, [r7, #11]
 800c03a:	4613      	mov	r3, r2
 800c03c:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f993 3000 	ldrsb.w	r3, [r3]
 800c044:	111b      	asrs	r3, r3, #4
 800c046:	b25b      	sxtb	r3, r3
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b06      	cmp	r3, #6
 800c04c:	d805      	bhi.n	800c05a <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800c04e:	7aba      	ldrb	r2, [r7, #10]
 800c050:	7af9      	ldrb	r1, [r7, #11]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7ff fe0f 	bl	800bc78 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f993 3000 	ldrsb.w	r3, [r3]
 800c072:	111b      	asrs	r3, r3, #4
 800c074:	b25b      	sxtb	r3, r3
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b06      	cmp	r3, #6
 800c07a:	d803      	bhi.n	800c084 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ff0c 	bl	800be9c <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <prepareTxFrame>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void prepareTxFrame( uint8_t port )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	4603      	mov	r3, r0
 800c094:	71fb      	strb	r3, [r7, #7]
    GNSS_GetPVTData(&GNSS_Handle);
 800c096:	480b      	ldr	r0, [pc, #44]	; (800c0c4 <prepareTxFrame+0x38>)
 800c098:	f004 fa36 	bl	8010508 <GNSS_GetPVTData>
    GNSS_ParseBuffer(&GNSS_Handle);
 800c09c:	4809      	ldr	r0, [pc, #36]	; (800c0c4 <prepareTxFrame+0x38>)
 800c09e:	f004 f9de 	bl	801045e <GNSS_ParseBuffer>

    appDataSize = 8;
 800c0a2:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <prepareTxFrame+0x3c>)
 800c0a4:	2208      	movs	r2, #8
 800c0a6:	701a      	strb	r2, [r3, #0]
 800c0a8:	4b06      	ldr	r3, [pc, #24]	; (800c0c4 <prepareTxFrame+0x38>)
 800c0aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    memcpy(&appData[0], &GNSS_Handle.fLat,4);
 800c0ae:	4a07      	ldr	r2, [pc, #28]	; (800c0cc <prepareTxFrame+0x40>)
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	4b04      	ldr	r3, [pc, #16]	; (800c0c4 <prepareTxFrame+0x38>)
 800c0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    memcpy(&appData[4], &GNSS_Handle.fLon,4);
 800c0b8:	4a04      	ldr	r2, [pc, #16]	; (800c0cc <prepareTxFrame+0x40>)
 800c0ba:	6053      	str	r3, [r2, #4]
    memcpy(&appData[9], &GNSS_Handle.min,1);
    memcpy(&appData[10], &GNSS_Handle.sec,1);
    memcpy(&appData[11], &GNSS_Handle.month,1);
    memcpy(&appData[12], &GNSS_Handle.day,1);
    */
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	20001098 	.word	0x20001098
 800c0c8:	2000002c 	.word	0x2000002c
 800c0cc:	20000b28 	.word	0x20000b28

0800c0d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c0d4:	f7f5 f8cc 	bl	8001270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c0d8:	f000 f872 	bl	800c1c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c0dc:	f000 fa2e 	bl	800c53c <MX_GPIO_Init>
  MX_DMA_Init();
 800c0e0:	f000 fa0e 	bl	800c500 <MX_DMA_Init>
  MX_RTC_Init();
 800c0e4:	f000 f920 	bl	800c328 <MX_RTC_Init>
  MX_SPI1_Init();
 800c0e8:	f000 f9aa 	bl	800c440 <MX_SPI1_Init>
  MX_ADC_Init();
 800c0ec:	f000 f8c4 	bl	800c278 <MX_ADC_Init>

  /* USER CODE BEGIN 2 */

  BoardInitMcu();
 800c0f0:	f7fe ffb2 	bl	800b058 <BoardInitMcu>

  MX_USART1_UART_Init();
 800c0f4:	f000 f9da 	bl	800c4ac <MX_USART1_UART_Init>

  GNSS_Init(&GNSS_Handle, &huart1);
 800c0f8:	4929      	ldr	r1, [pc, #164]	; (800c1a0 <main+0xd0>)
 800c0fa:	482a      	ldr	r0, [pc, #168]	; (800c1a4 <main+0xd4>)
 800c0fc:	f004 f967 	bl	80103ce <GNSS_Init>
  GNSS_LoadConfig(&GNSS_Handle);
 800c100:	4828      	ldr	r0, [pc, #160]	; (800c1a4 <main+0xd4>)
 800c102:	f004 fb99 	bl	8010838 <GNSS_LoadConfig>

  deviceState = DEVICE_STATE_INIT;
 800c106:	4b28      	ldr	r3, [pc, #160]	; (800c1a8 <main+0xd8>)
 800c108:	2200      	movs	r2, #0
 800c10a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	switch( deviceState )
 800c10c:	4b26      	ldr	r3, [pc, #152]	; (800c1a8 <main+0xd8>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b04      	cmp	r3, #4
 800c112:	d83f      	bhi.n	800c194 <main+0xc4>
 800c114:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <main+0x4c>)
 800c116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11a:	bf00      	nop
 800c11c:	0800c131 	.word	0x0800c131
 800c120:	0800c149 	.word	0x0800c149
 800c124:	0800c14f 	.word	0x0800c14f
 800c128:	0800c165 	.word	0x0800c165
 800c12c:	0800c18f 	.word	0x0800c18f
		{
			case DEVICE_STATE_INIT:
			{
				//printDevParam();
				LoraWanInit(loraWanClass,loraWanRegion);
 800c130:	4b1e      	ldr	r3, [pc, #120]	; (800c1ac <main+0xdc>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	4a1e      	ldr	r2, [pc, #120]	; (800c1b0 <main+0xe0>)
 800c136:	7812      	ldrb	r2, [r2, #0]
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fd fb00 	bl	8009740 <LoraWanInit>
				deviceState = DEVICE_STATE_JOIN;
 800c140:	4b19      	ldr	r3, [pc, #100]	; (800c1a8 <main+0xd8>)
 800c142:	2201      	movs	r2, #1
 800c144:	701a      	strb	r2, [r3, #0]
				break;
 800c146:	e029      	b.n	800c19c <main+0xcc>
			}
			case DEVICE_STATE_JOIN:
			{
				LoraWanJoin();
 800c148:	f7fd fbe0 	bl	800990c <LoraWanJoin>
				break;
 800c14c:	e026      	b.n	800c19c <main+0xcc>
			}
			case DEVICE_STATE_SEND:
			{
				prepareTxFrame( appPort );
 800c14e:	4b19      	ldr	r3, [pc, #100]	; (800c1b4 <main+0xe4>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	4618      	mov	r0, r3
 800c154:	f7ff ff9a 	bl	800c08c <prepareTxFrame>
				LoraWanSend();
 800c158:	f7fd fc50 	bl	80099fc <LoraWanSend>
				deviceState = DEVICE_STATE_CYCLE;
 800c15c:	4b12      	ldr	r3, [pc, #72]	; (800c1a8 <main+0xd8>)
 800c15e:	2203      	movs	r2, #3
 800c160:	701a      	strb	r2, [r3, #0]
				break;
 800c162:	e01b      	b.n	800c19c <main+0xcc>
			}
			case DEVICE_STATE_CYCLE:
			{
				// Schedule next packet transmission
				txDutyCycleTime = appTxDutyCycle + randr( 0, APP_TX_DUTYCYCLE_RND );
 800c164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c168:	2000      	movs	r0, #0
 800c16a:	f004 f8c5 	bl	80102f8 <randr>
 800c16e:	4603      	mov	r3, r0
 800c170:	461a      	mov	r2, r3
 800c172:	4b11      	ldr	r3, [pc, #68]	; (800c1b8 <main+0xe8>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4413      	add	r3, r2
 800c178:	4a10      	ldr	r2, [pc, #64]	; (800c1bc <main+0xec>)
 800c17a:	6013      	str	r3, [r2, #0]
				LoraWanCycle(txDutyCycleTime);
 800c17c:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <main+0xec>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4618      	mov	r0, r3
 800c182:	f7fd fc63 	bl	8009a4c <LoraWanCycle>
				deviceState = DEVICE_STATE_SLEEP;
 800c186:	4b08      	ldr	r3, [pc, #32]	; (800c1a8 <main+0xd8>)
 800c188:	2204      	movs	r2, #4
 800c18a:	701a      	strb	r2, [r3, #0]
				break;
 800c18c:	e006      	b.n	800c19c <main+0xcc>
			}
			case DEVICE_STATE_SLEEP:
			{
				TimerLowPowerHandler( );
 800c18e:	f003 ffe9 	bl	8010164 <TimerLowPowerHandler>
				break;
 800c192:	e003      	b.n	800c19c <main+0xcc>
			}
			default:
			{
				deviceState = DEVICE_STATE_INIT;
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <main+0xd8>)
 800c196:	2200      	movs	r2, #0
 800c198:	701a      	strb	r2, [r3, #0]
				break;
 800c19a:	bf00      	nop
  	switch( deviceState )
 800c19c:	e7b6      	b.n	800c10c <main+0x3c>
 800c19e:	bf00      	nop
 800c1a0:	20001034 	.word	0x20001034
 800c1a4:	20001098 	.word	0x20001098
 800c1a8:	20000b08 	.word	0x20000b08
 800c1ac:	20000780 	.word	0x20000780
 800c1b0:	20000078 	.word	0x20000078
 800c1b4:	20000082 	.word	0x20000082
 800c1b8:	2000007c 	.word	0x2000007c
 800c1bc:	20000b0c 	.word	0x20000b0c

0800c1c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b094      	sub	sp, #80	; 0x50
 800c1c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c1c6:	f107 031c 	add.w	r3, r7, #28
 800c1ca:	2234      	movs	r2, #52	; 0x34
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f005 febe 	bl	8011f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c1d4:	f107 0308 	add.w	r3, r7, #8
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	605a      	str	r2, [r3, #4]
 800c1de:	609a      	str	r2, [r3, #8]
 800c1e0:	60da      	str	r2, [r3, #12]
 800c1e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c1e4:	463b      	mov	r3, r7
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
 800c1ea:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1ec:	4b21      	ldr	r3, [pc, #132]	; (800c274 <SystemClock_Config+0xb4>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800c1f4:	4a1f      	ldr	r2, [pc, #124]	; (800c274 <SystemClock_Config+0xb4>)
 800c1f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c1fa:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800c1fc:	2306      	movs	r3, #6
 800c1fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c200:	2301      	movs	r3, #1
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c204:	2301      	movs	r3, #1
 800c206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c208:	2310      	movs	r3, #16
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c210:	f107 031c 	add.w	r3, r7, #28
 800c214:	4618      	mov	r0, r3
 800c216:	f7f6 f891 	bl	800233c <HAL_RCC_OscConfig>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800c220:	f000 f9e4 	bl	800c5ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c224:	230f      	movs	r3, #15
 800c226:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c228:	2301      	movs	r3, #1
 800c22a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c22c:	2300      	movs	r3, #0
 800c22e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c230:	2300      	movs	r3, #0
 800c232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c234:	2300      	movs	r3, #0
 800c236:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c238:	f107 0308 	add.w	r3, r7, #8
 800c23c:	2100      	movs	r1, #0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7f6 fbac 	bl	800299c <HAL_RCC_ClockConfig>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d001      	beq.n	800c24e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800c24a:	f000 f9cf 	bl	800c5ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c24e:	2301      	movs	r3, #1
 800c250:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c256:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c258:	463b      	mov	r3, r7
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7f6 fe32 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800c266:	f000 f9c1 	bl	800c5ec <Error_Handler>
  }
}
 800c26a:	bf00      	nop
 800c26c:	3750      	adds	r7, #80	; 0x50
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	40007000 	.word	0x40007000

0800c278 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c27e:	1d3b      	adds	r3, r7, #4
 800c280:	2200      	movs	r2, #0
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	605a      	str	r2, [r3, #4]
 800c286:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800c288:	4b25      	ldr	r3, [pc, #148]	; (800c320 <MX_ADC_Init+0xa8>)
 800c28a:	4a26      	ldr	r2, [pc, #152]	; (800c324 <MX_ADC_Init+0xac>)
 800c28c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c28e:	4b24      	ldr	r3, [pc, #144]	; (800c320 <MX_ADC_Init+0xa8>)
 800c290:	2200      	movs	r2, #0
 800c292:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c294:	4b22      	ldr	r3, [pc, #136]	; (800c320 <MX_ADC_Init+0xa8>)
 800c296:	2200      	movs	r2, #0
 800c298:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c29a:	4b21      	ldr	r3, [pc, #132]	; (800c320 <MX_ADC_Init+0xa8>)
 800c29c:	2200      	movs	r2, #0
 800c29e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c2a0:	4b1f      	ldr	r3, [pc, #124]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c2a6:	4b1e      	ldr	r3, [pc, #120]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800c2ac:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800c2b2:	4b1b      	ldr	r3, [pc, #108]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800c2b8:	4b19      	ldr	r3, [pc, #100]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800c2be:	4b18      	ldr	r3, [pc, #96]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800c2c6:	4b16      	ldr	r3, [pc, #88]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800c2cc:	4b14      	ldr	r3, [pc, #80]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c2d4:	4b12      	ldr	r3, [pc, #72]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2d6:	2210      	movs	r2, #16
 800c2d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c2da:	4b11      	ldr	r3, [pc, #68]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2dc:	2200      	movs	r2, #0
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800c2e8:	480d      	ldr	r0, [pc, #52]	; (800c320 <MX_ADC_Init+0xa8>)
 800c2ea:	f7f5 f87b 	bl	80013e4 <HAL_ADC_Init>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800c2f4:	f000 f97a 	bl	800c5ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800c300:	2300      	movs	r3, #0
 800c302:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c304:	1d3b      	adds	r3, r7, #4
 800c306:	4619      	mov	r1, r3
 800c308:	4805      	ldr	r0, [pc, #20]	; (800c320 <MX_ADC_Init+0xa8>)
 800c30a:	f7f5 f9b1 	bl	8001670 <HAL_ADC_ConfigChannel>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800c314:	f000 f96a 	bl	800c5ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800c318:	bf00      	nop
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	200011a0 	.word	0x200011a0
 800c324:	40012400 	.word	0x40012400

0800c328 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b090      	sub	sp, #64	; 0x40
 800c32c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c32e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	605a      	str	r2, [r3, #4]
 800c338:	609a      	str	r2, [r3, #8]
 800c33a:	60da      	str	r2, [r3, #12]
 800c33c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c33e:	2300      	movs	r3, #0
 800c340:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800c342:	463b      	mov	r3, r7
 800c344:	2228      	movs	r2, #40	; 0x28
 800c346:	2100      	movs	r1, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	f005 fe01 	bl	8011f50 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c34e:	4b3a      	ldr	r3, [pc, #232]	; (800c438 <MX_RTC_Init+0x110>)
 800c350:	4a3a      	ldr	r2, [pc, #232]	; (800c43c <MX_RTC_Init+0x114>)
 800c352:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c354:	4b38      	ldr	r3, [pc, #224]	; (800c438 <MX_RTC_Init+0x110>)
 800c356:	2200      	movs	r2, #0
 800c358:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c35a:	4b37      	ldr	r3, [pc, #220]	; (800c438 <MX_RTC_Init+0x110>)
 800c35c:	227f      	movs	r2, #127	; 0x7f
 800c35e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c360:	4b35      	ldr	r3, [pc, #212]	; (800c438 <MX_RTC_Init+0x110>)
 800c362:	22ff      	movs	r2, #255	; 0xff
 800c364:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c366:	4b34      	ldr	r3, [pc, #208]	; (800c438 <MX_RTC_Init+0x110>)
 800c368:	2200      	movs	r2, #0
 800c36a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c36c:	4b32      	ldr	r3, [pc, #200]	; (800c438 <MX_RTC_Init+0x110>)
 800c36e:	2200      	movs	r2, #0
 800c370:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c372:	4b31      	ldr	r3, [pc, #196]	; (800c438 <MX_RTC_Init+0x110>)
 800c374:	2200      	movs	r2, #0
 800c376:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c378:	482f      	ldr	r0, [pc, #188]	; (800c438 <MX_RTC_Init+0x110>)
 800c37a:	f7f6 fe71 	bl	8003060 <HAL_RTC_Init>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d001      	beq.n	800c388 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800c384:	f000 f932 	bl	800c5ec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800c388:	2300      	movs	r3, #0
 800c38a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800c38e:	2300      	movs	r3, #0
 800c390:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800c394:	2300      	movs	r3, #0
 800c396:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c39a:	2300      	movs	r3, #0
 800c39c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800c3a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4823      	ldr	r0, [pc, #140]	; (800c438 <MX_RTC_Init+0x110>)
 800c3ac:	f7f6 fee9 	bl	8003182 <HAL_RTC_SetTime>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d001      	beq.n	800c3ba <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800c3b6:	f000 f919 	bl	800c5ec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800c3d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4817      	ldr	r0, [pc, #92]	; (800c438 <MX_RTC_Init+0x110>)
 800c3dc:	f7f6 ffe2 	bl	80033a4 <HAL_RTC_SetDate>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800c3e6:	f000 f901 	bl	800c5ec <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c3fe:	2300      	movs	r3, #0
 800c400:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800c406:	2300      	movs	r3, #0
 800c408:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800c40a:	2300      	movs	r3, #0
 800c40c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800c40e:	2301      	movs	r3, #1
 800c410:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800c414:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800c41a:	463b      	mov	r3, r7
 800c41c:	2201      	movs	r2, #1
 800c41e:	4619      	mov	r1, r3
 800c420:	4805      	ldr	r0, [pc, #20]	; (800c438 <MX_RTC_Init+0x110>)
 800c422:	f7f7 f8aa 	bl	800357a <HAL_RTC_SetAlarm>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800c42c:	f000 f8de 	bl	800c5ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c430:	bf00      	nop
 800c432:	3740      	adds	r7, #64	; 0x40
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	20001078 	.word	0x20001078
 800c43c:	40002800 	.word	0x40002800

0800c440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c444:	4b17      	ldr	r3, [pc, #92]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c446:	4a18      	ldr	r2, [pc, #96]	; (800c4a8 <MX_SPI1_Init+0x68>)
 800c448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c44a:	4b16      	ldr	r3, [pc, #88]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c44c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c452:	4b14      	ldr	r3, [pc, #80]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c454:	2200      	movs	r2, #0
 800c456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c458:	4b12      	ldr	r3, [pc, #72]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c45e:	4b11      	ldr	r3, [pc, #68]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c460:	2200      	movs	r2, #0
 800c462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c464:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c466:	2200      	movs	r2, #0
 800c468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c46a:	4b0e      	ldr	r3, [pc, #56]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c46c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c470:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c472:	4b0c      	ldr	r3, [pc, #48]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c474:	2200      	movs	r2, #0
 800c476:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c478:	4b0a      	ldr	r3, [pc, #40]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c47e:	4b09      	ldr	r3, [pc, #36]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c480:	2200      	movs	r2, #0
 800c482:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c486:	2200      	movs	r2, #0
 800c488:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c48a:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c48c:	220a      	movs	r2, #10
 800c48e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c490:	4804      	ldr	r0, [pc, #16]	; (800c4a4 <MX_SPI1_Init+0x64>)
 800c492:	f7f7 fd14 	bl	8003ebe <HAL_SPI_Init>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c49c:	f000 f8a6 	bl	800c5ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c4a0:	bf00      	nop
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	20001148 	.word	0x20001148
 800c4a8:	40013000 	.word	0x40013000

0800c4ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c4b0:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4b2:	4a12      	ldr	r2, [pc, #72]	; (800c4fc <MX_USART1_UART_Init+0x50>)
 800c4b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c4b6:	4b10      	ldr	r3, [pc, #64]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c4bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c4be:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c4c4:	4b0c      	ldr	r3, [pc, #48]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c4ca:	4b0b      	ldr	r3, [pc, #44]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c4d0:	4b09      	ldr	r3, [pc, #36]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4d2:	220c      	movs	r2, #12
 800c4d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c4dc:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c4e2:	4805      	ldr	r0, [pc, #20]	; (800c4f8 <MX_USART1_UART_Init+0x4c>)
 800c4e4:	f7f7 fd74 	bl	8003fd0 <HAL_UART_Init>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c4ee:	f000 f87d 	bl	800c5ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c4f2:	bf00      	nop
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20001034 	.word	0x20001034
 800c4fc:	40013800 	.word	0x40013800

0800c500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b082      	sub	sp, #8
 800c504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c506:	4b0c      	ldr	r3, [pc, #48]	; (800c538 <MX_DMA_Init+0x38>)
 800c508:	69db      	ldr	r3, [r3, #28]
 800c50a:	4a0b      	ldr	r2, [pc, #44]	; (800c538 <MX_DMA_Init+0x38>)
 800c50c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c510:	61d3      	str	r3, [r2, #28]
 800c512:	4b09      	ldr	r3, [pc, #36]	; (800c538 <MX_DMA_Init+0x38>)
 800c514:	69db      	ldr	r3, [r3, #28]
 800c516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c51a:	607b      	str	r3, [r7, #4]
 800c51c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800c51e:	2200      	movs	r2, #0
 800c520:	2100      	movs	r1, #0
 800c522:	200e      	movs	r0, #14
 800c524:	f7f5 facb 	bl	8001abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800c528:	200e      	movs	r0, #14
 800c52a:	f7f5 fae4 	bl	8001af6 <HAL_NVIC_EnableIRQ>

}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	40023800 	.word	0x40023800

0800c53c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08a      	sub	sp, #40	; 0x28
 800c540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c542:	f107 0314 	add.w	r3, r7, #20
 800c546:	2200      	movs	r2, #0
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	605a      	str	r2, [r3, #4]
 800c54c:	609a      	str	r2, [r3, #8]
 800c54e:	60da      	str	r2, [r3, #12]
 800c550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c552:	4b24      	ldr	r3, [pc, #144]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	4a23      	ldr	r2, [pc, #140]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c558:	f043 0304 	orr.w	r3, r3, #4
 800c55c:	61d3      	str	r3, [r2, #28]
 800c55e:	4b21      	ldr	r3, [pc, #132]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	f003 0304 	and.w	r3, r3, #4
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c56a:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	4a1d      	ldr	r2, [pc, #116]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c570:	f043 0320 	orr.w	r3, r3, #32
 800c574:	61d3      	str	r3, [r2, #28]
 800c576:	4b1b      	ldr	r3, [pc, #108]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	f003 0320 	and.w	r3, r3, #32
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c582:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	4a17      	ldr	r2, [pc, #92]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c588:	f043 0301 	orr.w	r3, r3, #1
 800c58c:	61d3      	str	r3, [r2, #28]
 800c58e:	4b15      	ldr	r3, [pc, #84]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	60bb      	str	r3, [r7, #8]
 800c598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c59a:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	4a11      	ldr	r2, [pc, #68]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c5a0:	f043 0302 	orr.w	r3, r3, #2
 800c5a4:	61d3      	str	r3, [r2, #28]
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <MX_GPIO_Init+0xa8>)
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	607b      	str	r3, [r7, #4]
 800c5b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f44f 7184 	mov.w	r1, #264	; 0x108
 800c5b8:	480b      	ldr	r0, [pc, #44]	; (800c5e8 <MX_GPIO_Init+0xac>)
 800c5ba:	f7f5 fe8f 	bl	80022dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 800c5be:	f44f 7384 	mov.w	r3, #264	; 0x108
 800c5c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c5d0:	f107 0314 	add.w	r3, r7, #20
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4804      	ldr	r0, [pc, #16]	; (800c5e8 <MX_GPIO_Init+0xac>)
 800c5d8:	f7f5 fd00 	bl	8001fdc <HAL_GPIO_Init>

}
 800c5dc:	bf00      	nop
 800c5de:	3728      	adds	r7, #40	; 0x28
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	40023800 	.word	0x40023800
 800c5e8:	40020400 	.word	0x40020400

0800c5ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c5f0:	bf00      	nop
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bc80      	pop	{r7}
 800c5f6:	4770      	bx	lr

0800c5f8 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitialized == false )
 800c5fe:	4b29      	ldr	r3, [pc, #164]	; (800c6a4 <RtcInit+0xac>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	f083 0301 	eor.w	r3, r3, #1
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d047      	beq.n	800c69c <RtcInit+0xa4>
    {
        __HAL_RCC_RTC_ENABLE( );
 800c60c:	4b26      	ldr	r3, [pc, #152]	; (800c6a8 <RtcInit+0xb0>)
 800c60e:	2201      	movs	r2, #1
 800c610:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance = RTC;
 800c612:	4b26      	ldr	r3, [pc, #152]	; (800c6ac <RtcInit+0xb4>)
 800c614:	4a26      	ldr	r2, [pc, #152]	; (800c6b0 <RtcInit+0xb8>)
 800c616:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c618:	4b24      	ldr	r3, [pc, #144]	; (800c6ac <RtcInit+0xb4>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 3;
 800c61e:	4b23      	ldr	r3, [pc, #140]	; (800c6ac <RtcInit+0xb4>)
 800c620:	2203      	movs	r2, #3
 800c622:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 3;
 800c624:	4b21      	ldr	r3, [pc, #132]	; (800c6ac <RtcInit+0xb4>)
 800c626:	2203      	movs	r2, #3
 800c628:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c62a:	4b20      	ldr	r3, [pc, #128]	; (800c6ac <RtcInit+0xb4>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c630:	4b1e      	ldr	r3, [pc, #120]	; (800c6ac <RtcInit+0xb4>)
 800c632:	2200      	movs	r2, #0
 800c634:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c636:	4b1d      	ldr	r3, [pc, #116]	; (800c6ac <RtcInit+0xb4>)
 800c638:	2200      	movs	r2, #0
 800c63a:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 800c63c:	481b      	ldr	r0, [pc, #108]	; (800c6ac <RtcInit+0xb4>)
 800c63e:	f7f6 fd0f 	bl	8003060 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 800c642:	2300      	movs	r3, #0
 800c644:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 800c646:	2301      	movs	r3, #1
 800c648:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800c64a:	2301      	movs	r3, #1
 800c64c:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800c64e:	2306      	movs	r3, #6
 800c650:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 800c652:	1d3b      	adds	r3, r7, #4
 800c654:	3302      	adds	r3, #2
 800c656:	2200      	movs	r2, #0
 800c658:	4619      	mov	r1, r3
 800c65a:	4814      	ldr	r0, [pc, #80]	; (800c6ac <RtcInit+0xb4>)
 800c65c:	f7f6 fea2 	bl	80033a4 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 800c664:	2300      	movs	r3, #0
 800c666:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800c66c:	2300      	movs	r3, #0
 800c66e:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c670:	2300      	movs	r3, #0
 800c672:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c674:	2300      	movs	r3, #0
 800c676:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 800c678:	1d3b      	adds	r3, r7, #4
 800c67a:	3308      	adds	r3, #8
 800c67c:	2200      	movs	r2, #0
 800c67e:	4619      	mov	r1, r3
 800c680:	480a      	ldr	r0, [pc, #40]	; (800c6ac <RtcInit+0xb4>)
 800c682:	f7f6 fd7e 	bl	8003182 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 4, 0 );
 800c686:	2200      	movs	r2, #0
 800c688:	2104      	movs	r1, #4
 800c68a:	2029      	movs	r0, #41	; 0x29
 800c68c:	f7f5 fa17 	bl	8001abe <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 800c690:	2029      	movs	r0, #41	; 0x29
 800c692:	f7f5 fa30 	bl	8001af6 <HAL_NVIC_EnableIRQ>
        RtcInitialized = true;
 800c696:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <RtcInit+0xac>)
 800c698:	2201      	movs	r2, #1
 800c69a:	701a      	strb	r2, [r3, #0]
    }
}
 800c69c:	bf00      	nop
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200007a8 	.word	0x200007a8
 800c6a8:	424706d8 	.word	0x424706d8
 800c6ac:	20000788 	.word	0x20000788
 800c6b0:	40002800 	.word	0x40002800

0800c6b4 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f923 	bl	800c908 <RtcStartWakeUpAlarm>
}
 800c6c2:	bf00      	nop
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
	...

0800c6cc <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 800c6d4:	4b15      	ldr	r3, [pc, #84]	; (800c72c <RtcGetAdjustedTimeoutValue+0x60>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d90c      	bls.n	800c6f8 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800c6de:	4b14      	ldr	r3, [pc, #80]	; (800c730 <RtcGetAdjustedTimeoutValue+0x64>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d007      	beq.n	800c6f8 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800c6e8:	4b11      	ldr	r3, [pc, #68]	; (800c730 <RtcGetAdjustedTimeoutValue+0x64>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	; (800c72c <RtcGetAdjustedTimeoutValue+0x60>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	607b      	str	r3, [r7, #4]
        }
    }

    if( timeout > McuWakeUpTime )
 800c6f8:	4b0c      	ldr	r3, [pc, #48]	; (800c72c <RtcGetAdjustedTimeoutValue+0x60>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d90e      	bls.n	800c720 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)
        if( timeout < 50 ) // 50 ms
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b31      	cmp	r3, #49	; 0x31
 800c706:	d803      	bhi.n	800c710 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800c708:	4b0a      	ldr	r3, [pc, #40]	; (800c734 <RtcGetAdjustedTimeoutValue+0x68>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	e007      	b.n	800c720 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 800c710:	4b08      	ldr	r3, [pc, #32]	; (800c734 <RtcGetAdjustedTimeoutValue+0x68>)
 800c712:	2201      	movs	r2, #1
 800c714:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800c716:	4b05      	ldr	r3, [pc, #20]	; (800c72c <RtcGetAdjustedTimeoutValue+0x60>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	1ad3      	subs	r3, r2, r3
 800c71e:	607b      	str	r3, [r7, #4]
        }
    }
    return  timeout;
 800c720:	687b      	ldr	r3, [r7, #4]
}
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	bc80      	pop	{r7}
 800c72a:	4770      	bx	lr
 800c72c:	200007ac 	.word	0x200007ac
 800c730:	20000785 	.word	0x20000785
 800c734:	20000786 	.word	0x20000786

0800c738 <RtcGetTimerValue>:

TimerTime_t RtcGetTimerValue( void )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	af00      	add	r7, sp, #0
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
 800c73c:	2000      	movs	r0, #0
 800c73e:	f000 fb07 	bl	800cd50 <RtcConvertCalendarTickToTimerTime>
 800c742:	4603      	mov	r3, r0
}
 800c744:	4618      	mov	r0, r3
 800c746:	bd80      	pop	{r7, pc}

0800c748 <RtcGetElapsedAlarmTime>:

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800c756:	2000      	movs	r0, #0
 800c758:	f000 fafa 	bl	800cd50 <RtcConvertCalendarTickToTimerTime>
 800c75c:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 800c75e:	480a      	ldr	r0, [pc, #40]	; (800c788 <RtcGetElapsedAlarmTime+0x40>)
 800c760:	f000 faf6 	bl	800cd50 <RtcConvertCalendarTickToTimerTime>
 800c764:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d204      	bcs.n	800c778 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	3b01      	subs	r3, #1
 800c776:	e002      	b.n	800c77e <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	1ad3      	subs	r3, r2, r3
    }
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200011f4 	.word	0x200011f4

0800c78c <RtcComputeElapsedTime>:
{
    return( RtcGetTimerValue( ) + futureEventInTime );
}

TimerTime_t RtcComputeElapsedTime( TimerTime_t eventInTime )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
    TimerTime_t elapsedTime = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	60fb      	str	r3, [r7, #12]

    // Needed at boot, cannot compute with 0 or elapsed time will be equal to current time
    if( eventInTime == 0 )
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d101      	bne.n	800c7a2 <RtcComputeElapsedTime+0x16>
    {
        return 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e00f      	b.n	800c7c2 <RtcComputeElapsedTime+0x36>
    }

    elapsedTime = RtcConvertCalendarTickToTimerTime( NULL );
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	f000 fad4 	bl	800cd50 <RtcConvertCalendarTickToTimerTime>
 800c7a8:	60f8      	str	r0, [r7, #12]

    if( elapsedTime < eventInTime )
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d204      	bcs.n	800c7bc <RtcComputeElapsedTime+0x30>
    { // roll over of the counter
        return( elapsedTime + ( 0xFFFFFFFF - eventInTime ) );
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	e002      	b.n	800c7c2 <RtcComputeElapsedTime+0x36>
    }
    else
    {
        return( elapsedTime - eventInTime );
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	1ad3      	subs	r3, r2, r3
    }
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
	...

0800c7cc <BlockLowPowerDuringTask>:

void BlockLowPowerDuringTask ( bool status )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800c7d6:	79fb      	ldrb	r3, [r7, #7]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d001      	beq.n	800c7e0 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 800c7dc:	f000 f80a 	bl	800c7f4 <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 800c7e0:	4a03      	ldr	r2, [pc, #12]	; (800c7f0 <BlockLowPowerDuringTask+0x24>)
 800c7e2:	79fb      	ldrb	r3, [r7, #7]
 800c7e4:	7013      	strb	r3, [r2, #0]
}
 800c7e6:	bf00      	nop
 800c7e8:	3708      	adds	r7, #8
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000787 	.word	0x20000787

0800c7f4 <RtcRecoverMcuStatus>:
        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
    }
}

void RtcRecoverMcuStatus( void )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
    // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
    if( __HAL_PWR_GET_FLAG( PWR_FLAG_WU ) != RESET )
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <RtcRecoverMcuStatus+0x44>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	2b01      	cmp	r3, #1
 800c802:	d106      	bne.n	800c812 <RtcRecoverMcuStatus+0x1e>
    {
        __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 800c804:	4b0c      	ldr	r3, [pc, #48]	; (800c838 <RtcRecoverMcuStatus+0x44>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a0b      	ldr	r2, [pc, #44]	; (800c838 <RtcRecoverMcuStatus+0x44>)
 800c80a:	f043 0304 	orr.w	r3, r3, #4
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	e002      	b.n	800c818 <RtcRecoverMcuStatus+0x24>
    }
    else
    {
        NonScheduledWakeUp = true;
 800c812:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <RtcRecoverMcuStatus+0x48>)
 800c814:	2201      	movs	r2, #1
 800c816:	701a      	strb	r2, [r3, #0]
    }
    // check the clk source and set to full speed if we are coming from sleep mode
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800c818:	4b09      	ldr	r3, [pc, #36]	; (800c840 <RtcRecoverMcuStatus+0x4c>)
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f003 030c 	and.w	r3, r3, #12
 800c820:	2b04      	cmp	r3, #4
 800c822:	d005      	beq.n	800c830 <RtcRecoverMcuStatus+0x3c>
        ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 800c824:	4b06      	ldr	r3, [pc, #24]	; (800c840 <RtcRecoverMcuStatus+0x4c>)
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f003 030c 	and.w	r3, r3, #12
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <RtcRecoverMcuStatus+0x40>
    {
        BoardInitMcu( );
 800c830:	f7fe fc12 	bl	800b058 <BoardInitMcu>
    }
}
 800c834:	bf00      	nop
 800c836:	bd80      	pop	{r7, pc}
 800c838:	40007000 	.word	0x40007000
 800c83c:	20000785 	.word	0x20000785
 800c840:	40023800 	.word	0x40023800

0800c844 <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b094      	sub	sp, #80	; 0x50
 800c848:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t stop = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	64bb      	str	r3, [r7, #72]	; 0x48
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 800c852:	4b29      	ldr	r3, [pc, #164]	; (800c8f8 <RtcComputeWakeUpTime+0xb4>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	f083 0301 	eor.w	r3, r3, #1
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d047      	beq.n	800c8f0 <RtcComputeWakeUpTime+0xac>
    {
        now = RtcGetCalendar( );
 800c860:	1d3b      	adds	r3, r7, #4
 800c862:	4618      	mov	r0, r3
 800c864:	f000 fb8c 	bl	800cf80 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800c868:	f107 0120 	add.w	r1, r7, #32
 800c86c:	2300      	movs	r3, #0
 800c86e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c872:	4822      	ldr	r0, [pc, #136]	; (800c8fc <RtcComputeWakeUpTime+0xb8>)
 800c874:	f7f7 f959 	bl	8003b2a <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800c878:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c87c:	461a      	mov	r2, r3
 800c87e:	233c      	movs	r3, #60	; 0x3c
 800c880:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800c884:	fb01 f303 	mul.w	r3, r1, r3
 800c888:	441a      	add	r2, r3
 800c88a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c88e:	f897 1020 	ldrb.w	r1, [r7, #32]
 800c892:	fb01 f303 	mul.w	r3, r1, r3
 800c896:	4413      	add	r3, r2
 800c898:	64fb      	str	r3, [r7, #76]	; 0x4c
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 800c89a:	7bbb      	ldrb	r3, [r7, #14]
 800c89c:	461a      	mov	r2, r3
 800c89e:	233c      	movs	r3, #60	; 0x3c
 800c8a0:	7b79      	ldrb	r1, [r7, #13]
 800c8a2:	fb01 f303 	mul.w	r3, r1, r3
 800c8a6:	441a      	add	r2, r3
 800c8a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c8ac:	7b39      	ldrb	r1, [r7, #12]
 800c8ae:	fb01 f303 	mul.w	r3, r1, r3
 800c8b2:	4413      	add	r3, r2
 800c8b4:	64bb      	str	r3, [r7, #72]	; 0x48

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 800c8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f3 fda1 	bl	8000404 <__aeabi_ui2d>
 800c8c2:	f04f 0200 	mov.w	r2, #0
 800c8c6:	4b0e      	ldr	r3, [pc, #56]	; (800c900 <RtcComputeWakeUpTime+0xbc>)
 800c8c8:	f7f3 fe16 	bl	80004f8 <__aeabi_dmul>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	f005 fb44 	bl	8011f60 <ceil>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4610      	mov	r0, r2
 800c8de:	4619      	mov	r1, r3
 800c8e0:	f7f4 f8cc 	bl	8000a7c <__aeabi_d2uiz>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	4a07      	ldr	r2, [pc, #28]	; (800c904 <RtcComputeWakeUpTime+0xc0>)
 800c8e8:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 800c8ea:	4b03      	ldr	r3, [pc, #12]	; (800c8f8 <RtcComputeWakeUpTime+0xb4>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
    }
}
 800c8f0:	bf00      	nop
 800c8f2:	3750      	adds	r7, #80	; 0x50
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200007a9 	.word	0x200007a9
 800c8fc:	20000788 	.word	0x20000788
 800c900:	3fdf4000 	.word	0x3fdf4000
 800c904:	200007ac 	.word	0x200007ac

0800c908 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800c908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c90a:	b0a1      	sub	sp, #132	; 0x84
 800c90c:	af06      	add	r7, sp, #24
 800c90e:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800c910:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c914:	4826      	ldr	r0, [pc, #152]	; (800c9b0 <RtcStartWakeUpAlarm+0xa8>)
 800c916:	f7f7 f87d 	bl	8003a14 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800c91a:	4825      	ldr	r0, [pc, #148]	; (800c9b0 <RtcStartWakeUpAlarm+0xa8>)
 800c91c:	f7f7 fa70 	bl	8003e00 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800c920:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fb2b 	bl	800cf80 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800c92a:	4b22      	ldr	r3, [pc, #136]	; (800c9b4 <RtcStartWakeUpAlarm+0xac>)
 800c92c:	461d      	mov	r5, r3
 800c92e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800c932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c936:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c93a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800c93e:	f107 0630 	add.w	r6, r7, #48	; 0x30
 800c942:	466d      	mov	r5, sp
 800c944:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800c948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c94a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c954:	cb0c      	ldmia	r3, {r2, r3}
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	4630      	mov	r0, r6
 800c95a:	f000 f82d 	bl	800c9b8 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800c95e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c962:	62fb      	str	r3, [r7, #44]	; 0x2c
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800c964:	2300      	movs	r3, #0
 800c966:	627b      	str	r3, [r7, #36]	; 0x24
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800c968:	2300      	movs	r3, #0
 800c96a:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800c96c:	2300      	movs	r3, #0
 800c96e:	72fb      	strb	r3, [r7, #11]

    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800c970:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c974:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800c976:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c97a:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 800c97c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c980:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800c982:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c986:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    //SubSeconds must be added manual, this part can't config by CubeMX
	alarmStructure.AlarmTime.SubSeconds = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
	alarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c98e:	2300      	movs	r3, #0
 800c990:	617b      	str	r3, [r7, #20]
    alarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
    alarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800c996:	2300      	movs	r3, #0
 800c998:	623b      	str	r3, [r7, #32]

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800c99a:	f107 0308 	add.w	r3, r7, #8
 800c99e:	2200      	movs	r2, #0
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4803      	ldr	r0, [pc, #12]	; (800c9b0 <RtcStartWakeUpAlarm+0xa8>)
 800c9a4:	f7f6 fefe 	bl	80037a4 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800c9a8:	bf00      	nop
 800c9aa:	376c      	adds	r7, #108	; 0x6c
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b0:	20000788 	.word	0x20000788
 800c9b4:	200011f4 	.word	0x200011f4

0800c9b8 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	b5b0      	push	{r4, r5, r7, lr}
 800c9bc:	b092      	sub	sp, #72	; 0x48
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6039      	str	r1, [r7, #0]
 800c9c4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c9c8:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 800c9cc:	f107 040c 	add.w	r4, r7, #12
 800c9d0:	f107 0558 	add.w	r5, r7, #88	; 0x58
 800c9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c9dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 800c9e0:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800c9e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 800c9e8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800c9ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    uint16_t hours = now.CalendarTime.Hours;
 800c9f0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800c9f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t days = now.CalendarDate.Date;
 800c9f8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800c9fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    double timeoutValueTemp = 0.0;
 800ca00:	f04f 0200 	mov.w	r2, #0
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double timeoutValue = 0.0;
 800ca0c:	f04f 0200 	mov.w	r2, #0
 800ca10:	f04f 0300 	mov.w	r3, #0
 800ca14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double error = 0.0;
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800ca24:	4ac2      	ldr	r2, [pc, #776]	; (800cd30 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800ca26:	4613      	mov	r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f3 fce8 	bl	8000404 <__aeabi_ui2d>
 800ca34:	f04f 0200 	mov.w	r2, #0
 800ca38:	4bbe      	ldr	r3, [pc, #760]	; (800cd34 <RtcComputeTimerTimeToAlarmTick+0x37c>)
 800ca3a:	f7f3 fd5d 	bl	80004f8 <__aeabi_dmul>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	4610      	mov	r0, r2
 800ca44:	4619      	mov	r1, r3
 800ca46:	f7f4 f819 	bl	8000a7c <__aeabi_d2uiz>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	bf28      	it	cs
 800ca52:	4613      	movcs	r3, r2
 800ca54:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 800ca60:	6838      	ldr	r0, [r7, #0]
 800ca62:	f7f3 fccf 	bl	8000404 <__aeabi_ui2d>
 800ca66:	a3b0      	add	r3, pc, #704	; (adr r3, 800cd28 <RtcComputeTimerTimeToAlarmTick+0x370>)
 800ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6c:	f7f3 fd44 	bl	80004f8 <__aeabi_dmul>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4610      	mov	r0, r2
 800ca76:	4619      	mov	r1, r3
 800ca78:	f005 fb72 	bl	8012160 <round>
 800ca7c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 800ca80:	6838      	ldr	r0, [r7, #0]
 800ca82:	f7f3 fcbf 	bl	8000404 <__aeabi_ui2d>
 800ca86:	a3a8      	add	r3, pc, #672	; (adr r3, 800cd28 <RtcComputeTimerTimeToAlarmTick+0x370>)
 800ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8c:	f7f3 fd34 	bl	80004f8 <__aeabi_dmul>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 800ca98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ca9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800caa0:	f7f3 fb72 	bl	8000188 <__aeabi_dsub>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 800caac:	4ba2      	ldr	r3, [pc, #648]	; (800cd38 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7f3 fcb7 	bl	8000424 <__aeabi_i2d>
 800cab6:	4604      	mov	r4, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	f04f 0200 	mov.w	r2, #0
 800cabe:	4b9f      	ldr	r3, [pc, #636]	; (800cd3c <RtcComputeTimerTimeToAlarmTick+0x384>)
 800cac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cac4:	f7f3 fd18 	bl	80004f8 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f3 fb5c 	bl	800018c <__adddf3>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	4610      	mov	r0, r2
 800cada:	4619      	mov	r1, r3
 800cadc:	f7f3 ffa6 	bl	8000a2c <__aeabi_d2iz>
 800cae0:	4603      	mov	r3, r0
 800cae2:	4a95      	ldr	r2, [pc, #596]	; (800cd38 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cae4:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 800cae6:	4b94      	ldr	r3, [pc, #592]	; (800cd38 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800caee:	db25      	blt.n	800cb3c <RtcComputeTimerTimeToAlarmTick+0x184>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 800caf0:	4b91      	ldr	r3, [pc, #580]	; (800cd38 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800caf8:	461a      	mov	r2, r3
 800cafa:	4b8f      	ldr	r3, [pc, #572]	; (800cd38 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cafc:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800cafe:	f04f 0200 	mov.w	r2, #0
 800cb02:	4b8f      	ldr	r3, [pc, #572]	; (800cd40 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800cb04:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cb08:	f7f3 fb40 	bl	800018c <__adddf3>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800cb14:	e012      	b.n	800cb3c <RtcComputeTimerTimeToAlarmTick+0x184>
    {
        timeoutValue -= SecondsInDay;
 800cb16:	4b86      	ldr	r3, [pc, #536]	; (800cd30 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f3 fc73 	bl	8000404 <__aeabi_ui2d>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cb26:	f7f3 fb2f 	bl	8000188 <__aeabi_dsub>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        days++;
 800cb32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb36:	3301      	adds	r3, #1
 800cb38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( timeoutValue >= SecondsInDay )
 800cb3c:	4b7c      	ldr	r3, [pc, #496]	; (800cd30 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f3 fc60 	bl	8000404 <__aeabi_ui2d>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cb4c:	f7f3 ff5a 	bl	8000a04 <__aeabi_dcmpge>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1df      	bne.n	800cb16 <RtcComputeTimerTimeToAlarmTick+0x15e>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800cb56:	e013      	b.n	800cb80 <RtcComputeTimerTimeToAlarmTick+0x1c8>
    {
        timeoutValue -= SecondsInHour;
 800cb58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7f3 fc61 	bl	8000424 <__aeabi_i2d>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cb6a:	f7f3 fb0d 	bl	8000188 <__aeabi_dsub>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        hours++;
 800cb76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( timeoutValue >= SecondsInHour )
 800cb80:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7f3 fc4d 	bl	8000424 <__aeabi_i2d>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cb92:	f7f3 ff37 	bl	8000a04 <__aeabi_dcmpge>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1dd      	bne.n	800cb58 <RtcComputeTimerTimeToAlarmTick+0x1a0>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800cb9c:	e012      	b.n	800cbc4 <RtcComputeTimerTimeToAlarmTick+0x20c>
    {
        timeoutValue -= SecondsInMinute;
 800cb9e:	233c      	movs	r3, #60	; 0x3c
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7f3 fc3f 	bl	8000424 <__aeabi_i2d>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cbae:	f7f3 faeb 	bl	8000188 <__aeabi_dsub>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        minutes++;
 800cbba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( timeoutValue >= SecondsInMinute )
 800cbc4:	233c      	movs	r3, #60	; 0x3c
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7f3 fc2c 	bl	8000424 <__aeabi_i2d>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cbd4:	f7f3 ff16 	bl	8000a04 <__aeabi_dcmpge>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1df      	bne.n	800cb9e <RtcComputeTimerTimeToAlarmTick+0x1e6>
    }

    // Calculate seconds
    seconds += timeoutValue;
 800cbde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7f3 fc1e 	bl	8000424 <__aeabi_i2d>
 800cbe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cbec:	f7f3 face 	bl	800018c <__adddf3>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4610      	mov	r0, r2
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	f7f3 ff40 	bl	8000a7c <__aeabi_d2uiz>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    // Correct for modulo
    while( seconds >= 60 )
 800cc02:	e009      	b.n	800cc18 <RtcComputeTimerTimeToAlarmTick+0x260>
    {
        seconds -= 60;
 800cc04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cc08:	3b3c      	subs	r3, #60	; 0x3c
 800cc0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        minutes++;
 800cc0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cc12:	3301      	adds	r3, #1
 800cc14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( seconds >= 60 )
 800cc18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cc1c:	2b3b      	cmp	r3, #59	; 0x3b
 800cc1e:	d8f1      	bhi.n	800cc04 <RtcComputeTimerTimeToAlarmTick+0x24c>
    }

    while( minutes >= 60 )
 800cc20:	e009      	b.n	800cc36 <RtcComputeTimerTimeToAlarmTick+0x27e>
    {
        minutes -= 60;
 800cc22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cc26:	3b3c      	subs	r3, #60	; 0x3c
 800cc28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        hours++;
 800cc2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cc30:	3301      	adds	r3, #1
 800cc32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( minutes >= 60 )
 800cc36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cc3a:	2b3b      	cmp	r3, #59	; 0x3b
 800cc3c:	d8f1      	bhi.n	800cc22 <RtcComputeTimerTimeToAlarmTick+0x26a>
    }

    while( hours >= HoursInDay )
 800cc3e:	e00b      	b.n	800cc58 <RtcComputeTimerTimeToAlarmTick+0x2a0>
    {
        hours -= HoursInDay;
 800cc40:	2318      	movs	r3, #24
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        days++;
 800cc4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc52:	3301      	adds	r3, #1
 800cc54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( hours >= HoursInDay )
 800cc58:	2318      	movs	r3, #24
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d2ed      	bcs.n	800cc40 <RtcComputeTimerTimeToAlarmTick+0x288>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800cc64:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d009      	beq.n	800cc80 <RtcComputeTimerTimeToAlarmTick+0x2c8>
 800cc6c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800cc70:	461a      	mov	r2, r3
 800cc72:	4b34      	ldr	r3, [pc, #208]	; (800cd44 <RtcComputeTimerTimeToAlarmTick+0x38c>)
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	4413      	add	r3, r2
 800cc78:	f003 0303 	and.w	r3, r3, #3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d118      	bne.n	800ccb2 <RtcComputeTimerTimeToAlarmTick+0x2fa>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800cc80:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cc84:	3b01      	subs	r3, #1
 800cc86:	4a30      	ldr	r2, [pc, #192]	; (800cd48 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800cc88:	5cd3      	ldrb	r3, [r2, r3]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d926      	bls.n	800cce2 <RtcComputeTimerTimeToAlarmTick+0x32a>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800cc94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cc98:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800cc9c:	3a01      	subs	r2, #1
 800cc9e:	492a      	ldr	r1, [pc, #168]	; (800cd48 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800cca0:	5c8a      	ldrb	r2, [r1, r2]
 800cca2:	fb93 f1f2 	sdiv	r1, r3, r2
 800cca6:	fb02 f201 	mul.w	r2, r2, r1
 800ccaa:	1a9b      	subs	r3, r3, r2
 800ccac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800ccb0:	e017      	b.n	800cce2 <RtcComputeTimerTimeToAlarmTick+0x32a>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 800ccb2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	4a24      	ldr	r2, [pc, #144]	; (800cd4c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800ccba:	5cd3      	ldrb	r3, [r2, r3]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d90d      	bls.n	800cce2 <RtcComputeTimerTimeToAlarmTick+0x32a>
        {
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 800ccc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800ccce:	3a01      	subs	r2, #1
 800ccd0:	491e      	ldr	r1, [pc, #120]	; (800cd4c <RtcComputeTimerTimeToAlarmTick+0x394>)
 800ccd2:	5c8a      	ldrb	r2, [r1, r2]
 800ccd4:	fb93 f1f2 	sdiv	r1, r3, r2
 800ccd8:	fb02 f201 	mul.w	r2, r2, r1
 800ccdc:	1a9b      	subs	r3, r3, r2
 800ccde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 800cce2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 800ccea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 800ccf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800ccfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	743b      	strb	r3, [r7, #16]

    return calendar;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	461d      	mov	r5, r3
 800cd06:	f107 040c 	add.w	r4, r7, #12
 800cd0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cd12:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	3748      	adds	r7, #72	; 0x48
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cd20:	b002      	add	sp, #8
 800cd22:	4770      	bx	lr
 800cd24:	f3af 8000 	nop.w
 800cd28:	d2f1a9fc 	.word	0xd2f1a9fc
 800cd2c:	4000624d 	.word	0x4000624d
 800cd30:	00015180 	.word	0x00015180
 800cd34:	3fdf4000 	.word	0x3fdf4000
 800cd38:	200007b0 	.word	0x200007b0
 800cd3c:	408f4000 	.word	0x408f4000
 800cd40:	3ff00000 	.word	0x3ff00000
 800cd44:	20000782 	.word	0x20000782
 800cd48:	08012788 	.word	0x08012788
 800cd4c:	0801277c 	.word	0x0801277c

0800cd50 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 800cd50:	b5b0      	push	{r4, r5, r7, lr}
 800cd52:	b08e      	sub	sp, #56	; 0x38
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	62bb      	str	r3, [r7, #40]	; 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800cd5c:	f04f 0200 	mov.w	r2, #0
 800cd60:	f04f 0300 	mov.w	r3, #0
 800cd64:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d105      	bne.n	800cd7a <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800cd6e:	f107 030c 	add.w	r3, r7, #12
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 f904 	bl	800cf80 <RtcGetCalendar>
 800cd78:	e009      	b.n	800cd8e <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f107 040c 	add.w	r4, r7, #12
 800cd80:	461d      	mov	r5, r3
 800cd82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800cd8e:	2300      	movs	r3, #0
 800cd90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cd92:	e02c      	b.n	800cdee <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800cd94:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d005      	beq.n	800cda8 <RtcConvertCalendarTickToTimerTime+0x58>
 800cd9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cd9e:	f003 0303 	and.w	r3, r3, #3
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d10e      	bne.n	800cdc6 <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 800cda8:	4b5d      	ldr	r3, [pc, #372]	; (800cf20 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f3 fb2a 	bl	8000404 <__aeabi_ui2d>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cdb8:	f7f3 f9e8 	bl	800018c <__adddf3>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800cdc4:	e00d      	b.n	800cde2 <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 800cdc6:	4b57      	ldr	r3, [pc, #348]	; (800cf24 <RtcConvertCalendarTickToTimerTime+0x1d4>)
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7f3 fb1b 	bl	8000404 <__aeabi_ui2d>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cdd6:	f7f3 f9d9 	bl	800018c <__adddf3>
 800cdda:	4602      	mov	r2, r0
 800cddc:	460b      	mov	r3, r1
 800cdde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800cde2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	3301      	adds	r3, #1
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cdee:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800cdf2:	7c7b      	ldrb	r3, [r7, #17]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	89bb      	ldrh	r3, [r7, #12]
 800cdf8:	440b      	add	r3, r1
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	dbca      	blt.n	800cd94 <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800cdfe:	7c7b      	ldrb	r3, [r7, #17]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d007      	beq.n	800ce14 <RtcConvertCalendarTickToTimerTime+0xc4>
 800ce04:	7c7b      	ldrb	r3, [r7, #17]
 800ce06:	461a      	mov	r2, r3
 800ce08:	89bb      	ldrh	r3, [r7, #12]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f003 0303 	and.w	r3, r3, #3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d124      	bne.n	800ce5e <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800ce14:	2300      	movs	r3, #0
 800ce16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ce1a:	e019      	b.n	800ce50 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800ce1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ce20:	4a41      	ldr	r2, [pc, #260]	; (800cf28 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 800ce22:	5cd3      	ldrb	r3, [r2, r3]
 800ce24:	461a      	mov	r2, r3
 800ce26:	4b41      	ldr	r3, [pc, #260]	; (800cf2c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800ce28:	fb03 f302 	mul.w	r3, r3, r2
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f3 fae9 	bl	8000404 <__aeabi_ui2d>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ce3a:	f7f3 f9a7 	bl	800018c <__adddf3>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800ce46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ce50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ce54:	7bfb      	ldrb	r3, [r7, #15]
 800ce56:	3b01      	subs	r3, #1
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	dbdf      	blt.n	800ce1c <RtcConvertCalendarTickToTimerTime+0xcc>
 800ce5c:	e023      	b.n	800cea6 <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800ce64:	e019      	b.n	800ce9a <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800ce66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce6a:	4a31      	ldr	r2, [pc, #196]	; (800cf30 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 800ce6c:	5cd3      	ldrb	r3, [r2, r3]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	4b2e      	ldr	r3, [pc, #184]	; (800cf2c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800ce72:	fb03 f302 	mul.w	r3, r3, r2
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f3 fac4 	bl	8000404 <__aeabi_ui2d>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ce84:	f7f3 f982 	bl	800018c <__adddf3>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800ce90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce94:	3301      	adds	r3, #1
 800ce96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800ce9a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	429a      	cmp	r2, r3
 800cea4:	dbdf      	blt.n	800ce66 <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800cea6:	7dbb      	ldrb	r3, [r7, #22]
 800cea8:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800ceaa:	7d3b      	ldrb	r3, [r7, #20]
 800ceac:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800ceb0:	fb02 f203 	mul.w	r2, r2, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 800ceb4:	7d7b      	ldrb	r3, [r7, #21]
 800ceb6:	203c      	movs	r0, #60	; 0x3c
 800ceb8:	fb00 f303 	mul.w	r3, r0, r3
 800cebc:	4413      	add	r3, r2
 800cebe:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 800cec0:	7c3b      	ldrb	r3, [r7, #16]
 800cec2:	4619      	mov	r1, r3
 800cec4:	4b19      	ldr	r3, [pc, #100]	; (800cf2c <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800cec6:	fb03 f301 	mul.w	r3, r3, r1
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800ceca:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800cecc:	4618      	mov	r0, r3
 800cece:	f7f3 fa99 	bl	8000404 <__aeabi_ui2d>
 800ced2:	4602      	mov	r2, r0
 800ced4:	460b      	mov	r3, r1
 800ced6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800ceda:	f7f3 f957 	bl	800018c <__adddf3>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 800cee6:	f04f 0200 	mov.w	r2, #0
 800ceea:	4b12      	ldr	r3, [pc, #72]	; (800cf34 <RtcConvertCalendarTickToTimerTime+0x1e4>)
 800ceec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cef0:	f7f3 fb02 	bl	80004f8 <__aeabi_dmul>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounter = round( timeCounterTemp );
 800cefc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800cf00:	f005 f92e 	bl	8012160 <round>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	f7f3 fdb6 	bl	8000a7c <__aeabi_d2uiz>
 800cf10:	4603      	mov	r3, r0
 800cf12:	62bb      	str	r3, [r7, #40]	; 0x28
    return ( timeCounter );
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3738      	adds	r7, #56	; 0x38
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bdb0      	pop	{r4, r5, r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	01e28500 	.word	0x01e28500
 800cf24:	01e13380 	.word	0x01e13380
 800cf28:	08012788 	.word	0x08012788
 800cf2c:	00015180 	.word	0x00015180
 800cf30:	0801277c 	.word	0x0801277c
 800cf34:	3fdf4000 	.word	0x3fdf4000

0800cf38 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	4603      	mov	r3, r0
 800cf40:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800cf42:	79fb      	ldrb	r3, [r7, #7]
 800cf44:	2b63      	cmp	r3, #99	; 0x63
 800cf46:	d102      	bne.n	800cf4e <RtcCheckCalendarRollOver+0x16>
    {
        CalendarRollOverReady = true;
 800cf48:	4b0b      	ldr	r3, [pc, #44]	; (800cf78 <RtcCheckCalendarRollOver+0x40>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	701a      	strb	r2, [r3, #0]
    }

    if( ( CalendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800cf4e:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <RtcCheckCalendarRollOver+0x40>)
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00b      	beq.n	800cf6e <RtcCheckCalendarRollOver+0x36>
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d108      	bne.n	800cf6e <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CalendarRollOverReady = false;
 800cf5c:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <RtcCheckCalendarRollOver+0x40>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800cf62:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <RtcCheckCalendarRollOver+0x44>)
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	3364      	adds	r3, #100	; 0x64
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	4b04      	ldr	r3, [pc, #16]	; (800cf7c <RtcCheckCalendarRollOver+0x44>)
 800cf6c:	801a      	strh	r2, [r3, #0]
    }
}
 800cf6e:	bf00      	nop
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc80      	pop	{r7}
 800cf76:	4770      	bx	lr
 800cf78:	20000784 	.word	0x20000784
 800cf7c:	20000782 	.word	0x20000782

0800cf80 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800cf80:	b5b0      	push	{r4, r5, r7, lr}
 800cf82:	b08a      	sub	sp, #40	; 0x28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800cf88:	f107 030c 	add.w	r3, r7, #12
 800cf8c:	3308      	adds	r3, #8
 800cf8e:	2200      	movs	r2, #0
 800cf90:	4619      	mov	r1, r3
 800cf92:	4810      	ldr	r0, [pc, #64]	; (800cfd4 <RtcGetCalendar+0x54>)
 800cf94:	f7f6 f9a9 	bl	80032ea <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 800cf98:	f107 030c 	add.w	r3, r7, #12
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	480c      	ldr	r0, [pc, #48]	; (800cfd4 <RtcGetCalendar+0x54>)
 800cfa4:	f7f6 fa9c 	bl	80034e0 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 800cfa8:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <RtcGetCalendar+0x58>)
 800cfaa:	881b      	ldrh	r3, [r3, #0]
 800cfac:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 800cfae:	7c7b      	ldrb	r3, [r7, #17]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff ffc1 	bl	800cf38 <RtcCheckCalendarRollOver>
    return calendar;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	461d      	mov	r5, r3
 800cfba:	f107 040c 	add.w	r4, r7, #12
 800cfbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cfc2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cfc6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	3728      	adds	r7, #40	; 0x28
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20000788 	.word	0x20000788
 800cfd8:	20000782 	.word	0x20000782

0800cfdc <RTC_Alarm_IRQHandler>:

/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
void RTC_Alarm_IRQHandler( void )
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 800cfe0:	4809      	ldr	r0, [pc, #36]	; (800d008 <RTC_Alarm_IRQHandler+0x2c>)
 800cfe2:	f7f6 fe2d 	bl	8003c40 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800cfe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cfea:	4807      	ldr	r0, [pc, #28]	; (800d008 <RTC_Alarm_IRQHandler+0x2c>)
 800cfec:	f7f6 fd12 	bl	8003a14 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 800cff0:	f7ff fc00 	bl	800c7f4 <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 800cff4:	f7ff fc26 	bl	800c844 <RtcComputeWakeUpTime>
    BlockLowPowerDuringTask( false );
 800cff8:	2000      	movs	r0, #0
 800cffa:	f7ff fbe7 	bl	800c7cc <BlockLowPowerDuringTask>
    TimerIrqHandler( );
 800cffe:	f002 ff57 	bl	800feb0 <TimerIrqHandler>
}
 800d002:	bf00      	nop
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20000788 	.word	0x20000788

0800d00c <SpiInit>:
    SPI_1 = ( uint32_t )SPI1_BASE,
    SPI_2 = ( uint32_t )SPI2_BASE,
}SPIName;

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af02      	add	r7, sp, #8
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	4608      	mov	r0, r1
 800d016:	4611      	mov	r1, r2
 800d018:	461a      	mov	r2, r3
 800d01a:	4603      	mov	r3, r0
 800d01c:	70fb      	strb	r3, [r7, #3]
 800d01e:	460b      	mov	r3, r1
 800d020:	70bb      	strb	r3, [r7, #2]
 800d022:	4613      	mov	r3, r2
 800d024:	707b      	strb	r3, [r7, #1]
    BoardDisableIrq( );
 800d026:	f7fd fff3 	bl	800b010 <BoardDisableIrq>

    // Choose SPI interface according to the given pins
    if( mosi == PA_7 )
 800d02a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d02e:	2b07      	cmp	r3, #7
 800d030:	d169      	bne.n	800d106 <SpiInit+0xfa>
    {
        __HAL_RCC_SPI1_FORCE_RESET( );
 800d032:	4b72      	ldr	r3, [pc, #456]	; (800d1fc <SpiInit+0x1f0>)
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	4a71      	ldr	r2, [pc, #452]	; (800d1fc <SpiInit+0x1f0>)
 800d038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d03c:	6153      	str	r3, [r2, #20]
        __HAL_RCC_SPI1_RELEASE_RESET( );
 800d03e:	4b6f      	ldr	r3, [pc, #444]	; (800d1fc <SpiInit+0x1f0>)
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	4a6e      	ldr	r2, [pc, #440]	; (800d1fc <SpiInit+0x1f0>)
 800d044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d048:	6153      	str	r3, [r2, #20]

        __HAL_RCC_SPI1_CLK_ENABLE( );
 800d04a:	4b6c      	ldr	r3, [pc, #432]	; (800d1fc <SpiInit+0x1f0>)
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	4a6b      	ldr	r2, [pc, #428]	; (800d1fc <SpiInit+0x1f0>)
 800d050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d054:	6213      	str	r3, [r2, #32]
 800d056:	4b69      	ldr	r3, [pc, #420]	; (800d1fc <SpiInit+0x1f0>)
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	68fb      	ldr	r3, [r7, #12]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI1_BASE;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a66      	ldr	r2, [pc, #408]	; (800d200 <SpiInit+0x1f4>)
 800d066:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d06e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d072:	2305      	movs	r3, #5
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	2302      	movs	r3, #2
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	2300      	movs	r3, #0
 800d07c:	2202      	movs	r2, #2
 800d07e:	f7fe ffb1 	bl	800bfe4 <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d088:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d08c:	2305      	movs	r3, #5
 800d08e:	9301      	str	r3, [sp, #4]
 800d090:	2302      	movs	r3, #2
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	2300      	movs	r3, #0
 800d096:	2202      	movs	r2, #2
 800d098:	f7fe ffa4 	bl	800bfe4 <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d0a2:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d0a6:	2305      	movs	r3, #5
 800d0a8:	9301      	str	r3, [sp, #4]
 800d0aa:	2302      	movs	r3, #2
 800d0ac:	9300      	str	r3, [sp, #0]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	f7fe ff97 	bl	800bfe4 <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d0bc:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d0c0:	2305      	movs	r3, #5
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	f7fe ff8a 	bl	800bfe4 <GpioInit>

        if( nss == NC )
 800d0d0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d8:	d10c      	bne.n	800d0f4 <SpiInit+0xe8>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e0:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	9300      	str	r3, [sp, #0]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f88d 	bl	800d20c <SpiFormat>
 800d0f2:	e075      	b.n	800d1e0 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f884 	bl	800d20c <SpiFormat>
 800d104:	e06c      	b.n	800d1e0 <SpiInit+0x1d4>
        }
    }
    else if( mosi == PB_15 )
 800d106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d10a:	2b1f      	cmp	r3, #31
 800d10c:	d168      	bne.n	800d1e0 <SpiInit+0x1d4>
    {
        __HAL_RCC_SPI2_FORCE_RESET( );
 800d10e:	4b3b      	ldr	r3, [pc, #236]	; (800d1fc <SpiInit+0x1f0>)
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	4a3a      	ldr	r2, [pc, #232]	; (800d1fc <SpiInit+0x1f0>)
 800d114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d118:	6193      	str	r3, [r2, #24]
        __HAL_RCC_SPI2_RELEASE_RESET( );
 800d11a:	4b38      	ldr	r3, [pc, #224]	; (800d1fc <SpiInit+0x1f0>)
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	4a37      	ldr	r2, [pc, #220]	; (800d1fc <SpiInit+0x1f0>)
 800d120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d124:	6193      	str	r3, [r2, #24]

        __HAL_RCC_SPI2_CLK_ENABLE( );
 800d126:	4b35      	ldr	r3, [pc, #212]	; (800d1fc <SpiInit+0x1f0>)
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	4a34      	ldr	r2, [pc, #208]	; (800d1fc <SpiInit+0x1f0>)
 800d12c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d130:	6253      	str	r3, [r2, #36]	; 0x24
 800d132:	4b32      	ldr	r3, [pc, #200]	; (800d1fc <SpiInit+0x1f0>)
 800d134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d13a:	60bb      	str	r3, [r7, #8]
 800d13c:	68bb      	ldr	r3, [r7, #8]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI2_BASE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a30      	ldr	r2, [pc, #192]	; (800d204 <SpiInit+0x1f8>)
 800d142:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d14a:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d14e:	2305      	movs	r3, #5
 800d150:	9301      	str	r3, [sp, #4]
 800d152:	2302      	movs	r3, #2
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	2300      	movs	r3, #0
 800d158:	2202      	movs	r2, #2
 800d15a:	f7fe ff43 	bl	800bfe4 <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d164:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d168:	2305      	movs	r3, #5
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	2302      	movs	r3, #2
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	2300      	movs	r3, #0
 800d172:	2202      	movs	r2, #2
 800d174:	f7fe ff36 	bl	800bfe4 <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d17e:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d182:	2305      	movs	r3, #5
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	2302      	movs	r3, #2
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	2300      	movs	r3, #0
 800d18c:	2202      	movs	r2, #2
 800d18e:	f7fe ff29 	bl	800bfe4 <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d198:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d19c:	2305      	movs	r3, #5
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	f7fe ff1c 	bl	800bfe4 <GpioInit>

        if( nss == NC )
 800d1ac:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b4:	d10c      	bne.n	800d1d0 <SpiInit+0x1c4>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1bc:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9300      	str	r3, [sp, #0]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f81f 	bl	800d20c <SpiFormat>
 800d1ce:	e007      	b.n	800d1e0 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	2100      	movs	r1, #0
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f816 	bl	800d20c <SpiFormat>
        }
    }
    SpiFrequency( obj, 10000000 );
 800d1e0:	4909      	ldr	r1, [pc, #36]	; (800d208 <SpiInit+0x1fc>)
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f854 	bl	800d290 <SpiFrequency>

    HAL_SPI_Init( &obj->Spi );
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7f6 fe67 	bl	8003ebe <HAL_SPI_Init>
		//DebugPrintf("abc");

    BoardEnableIrq( );
 800d1f0:	f7fd ff1e 	bl	800b030 <BoardEnableIrq>
}
 800d1f4:	bf00      	nop
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	40023800 	.word	0x40023800
 800d200:	40013000 	.word	0x40013000
 800d204:	40003800 	.word	0x40003800
 800d208:	00989680 	.word	0x00989680

0800d20c <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 800d20c:	b480      	push	{r7}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	4608      	mov	r0, r1
 800d216:	4611      	mov	r1, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	4603      	mov	r3, r0
 800d21c:	70fb      	strb	r3, [r7, #3]
 800d21e:	460b      	mov	r3, r1
 800d220:	70bb      	strb	r3, [r7, #2]
 800d222:	4613      	mov	r3, r2
 800d224:	707b      	strb	r3, [r7, #1]
    obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	609a      	str	r2, [r3, #8]
    if( bits == SPI_DATASIZE_8BIT )
 800d22c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d103      	bne.n	800d23c <SpiFormat+0x30>
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	60da      	str	r2, [r3, #12]
 800d23a:	e003      	b.n	800d244 <SpiFormat+0x38>
    }
    else
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d242:	60da      	str	r2, [r3, #12]
    }
    obj->Spi.Init.CLKPolarity = cpol;
 800d244:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	611a      	str	r2, [r3, #16]
    obj->Spi.Init.CLKPhase = cpha;
 800d24c:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	615a      	str	r2, [r3, #20]
    obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	621a      	str	r2, [r3, #32]
    obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	625a      	str	r2, [r3, #36]	; 0x24
    obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	629a      	str	r2, [r3, #40]	; 0x28
    obj->Spi.Init.CRCPolynomial = 7;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2207      	movs	r2, #7
 800d26a:	62da      	str	r2, [r3, #44]	; 0x2c

    if( slave == 0 )
 800d26c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d104      	bne.n	800d27e <SpiFormat+0x72>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d27a:	605a      	str	r2, [r3, #4]
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
    }
}
 800d27c:	e002      	b.n	800d284 <SpiFormat+0x78>
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	605a      	str	r2, [r3, #4]
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	bc80      	pop	{r7}
 800d28c:	4770      	bx	lr
	...

0800d290 <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 800d290:	b480      	push	{r7}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
    uint32_t divisor = 0;
 800d29a:	2300      	movs	r3, #0
 800d29c:	617b      	str	r3, [r7, #20]
    uint32_t sysClkTmp = SystemCoreClock;
 800d29e:	4b1b      	ldr	r3, [pc, #108]	; (800d30c <SpiFrequency+0x7c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	613b      	str	r3, [r7, #16]
    uint32_t baudRate;

    while( sysClkTmp > hz )
 800d2a4:	e008      	b.n	800d2b8 <SpiFrequency+0x28>
    {
        divisor++;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	617b      	str	r3, [r7, #20]
        sysClkTmp = ( sysClkTmp >> 1 );
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	085b      	lsrs	r3, r3, #1
 800d2b0:	613b      	str	r3, [r7, #16]

        if( divisor >= 7 )
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	2b06      	cmp	r3, #6
 800d2b6:	d804      	bhi.n	800d2c2 <SpiFrequency+0x32>
    while( sysClkTmp > hz )
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d8f2      	bhi.n	800d2a6 <SpiFrequency+0x16>
 800d2c0:	e000      	b.n	800d2c4 <SpiFrequency+0x34>
        {
            break;
 800d2c2:	bf00      	nop
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f003 0304 	and.w	r3, r3, #4
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <SpiFrequency+0x42>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	e000      	b.n	800d2d4 <SpiFrequency+0x44>
 800d2d2:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	f003 0302 	and.w	r3, r3, #2
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <SpiFrequency+0x52>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	e000      	b.n	800d2e4 <SpiFrequency+0x54>
 800d2e2:	2310      	movs	r3, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d2e4:	4313      	orrs	r3, r2
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	f002 0201 	and.w	r2, r2, #1
 800d2ec:	2a00      	cmp	r2, #0
 800d2ee:	d101      	bne.n	800d2f4 <SpiFrequency+0x64>
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	e000      	b.n	800d2f6 <SpiFrequency+0x66>
 800d2f4:	2208      	movs	r2, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]

    obj->Spi.Init.BaudRatePrescaler = baudRate;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	61da      	str	r2, [r3, #28]
}
 800d300:	bf00      	nop
 800d302:	371c      	adds	r7, #28
 800d304:	46bd      	mov	sp, r7
 800d306:	bc80      	pop	{r7}
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	2000009c 	.word	0x2000009c

0800d310 <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	460b      	mov	r3, r1
 800d31a:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 800d31c:	2300      	movs	r3, #0
 800d31e:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( obj->Spi.Instance ) == NULL )
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &obj->Spi );
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	681a      	ldr	r2, [r3, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d332:	601a      	str	r2, [r3, #0]

    BoardDisableIrq( );
 800d334:	f7fd fe6c 	bl	800b010 <BoardDisableIrq>

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_TXE ) == RESET );
 800d338:	bf00      	nop
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f003 0302 	and.w	r3, r3, #2
 800d344:	2b02      	cmp	r3, #2
 800d346:	d1f8      	bne.n	800d33a <SpiInOut+0x2a>
    obj->Spi.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 800d348:	887a      	ldrh	r2, [r7, #2]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	b2d2      	uxtb	r2, r2
 800d350:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_RXNE ) == RESET );
 800d352:	bf00      	nop
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	f003 0301 	and.w	r3, r3, #1
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d1f8      	bne.n	800d354 <SpiInOut+0x44>
    rxData = ( uint16_t ) obj->Spi.Instance->DR;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	73fb      	strb	r3, [r7, #15]

    BoardEnableIrq( );
 800d36a:	f7fd fe61 	bl	800b030 <BoardEnableIrq>

    return( rxData );
 800d36e:	7bfb      	ldrb	r3, [r7, #15]
 800d370:	b29b      	uxth	r3, r3
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800d382:	4b14      	ldr	r3, [pc, #80]	; (800d3d4 <HAL_MspInit+0x58>)
 800d384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d386:	4a13      	ldr	r2, [pc, #76]	; (800d3d4 <HAL_MspInit+0x58>)
 800d388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d38c:	6253      	str	r3, [r2, #36]	; 0x24
 800d38e:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <HAL_MspInit+0x58>)
 800d390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d396:	60fb      	str	r3, [r7, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d39a:	4b0e      	ldr	r3, [pc, #56]	; (800d3d4 <HAL_MspInit+0x58>)
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	4a0d      	ldr	r2, [pc, #52]	; (800d3d4 <HAL_MspInit+0x58>)
 800d3a0:	f043 0301 	orr.w	r3, r3, #1
 800d3a4:	6213      	str	r3, [r2, #32]
 800d3a6:	4b0b      	ldr	r3, [pc, #44]	; (800d3d4 <HAL_MspInit+0x58>)
 800d3a8:	6a1b      	ldr	r3, [r3, #32]
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	60bb      	str	r3, [r7, #8]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d3b2:	4b08      	ldr	r3, [pc, #32]	; (800d3d4 <HAL_MspInit+0x58>)
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b6:	4a07      	ldr	r2, [pc, #28]	; (800d3d4 <HAL_MspInit+0x58>)
 800d3b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d3bc:	6253      	str	r3, [r2, #36]	; 0x24
 800d3be:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <HAL_MspInit+0x58>)
 800d3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d3c6:	607b      	str	r3, [r7, #4]
 800d3c8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d3ca:	bf00      	nop
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bc80      	pop	{r7}
 800d3d2:	4770      	bx	lr
 800d3d4:	40023800 	.word	0x40023800

0800d3d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b08a      	sub	sp, #40	; 0x28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3e0:	f107 0314 	add.w	r3, r7, #20
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	605a      	str	r2, [r3, #4]
 800d3ea:	609a      	str	r2, [r3, #8]
 800d3ec:	60da      	str	r2, [r3, #12]
 800d3ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a15      	ldr	r2, [pc, #84]	; (800d44c <HAL_ADC_MspInit+0x74>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d123      	bne.n	800d442 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d3fa:	4b15      	ldr	r3, [pc, #84]	; (800d450 <HAL_ADC_MspInit+0x78>)
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	4a14      	ldr	r2, [pc, #80]	; (800d450 <HAL_ADC_MspInit+0x78>)
 800d400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d404:	6213      	str	r3, [r2, #32]
 800d406:	4b12      	ldr	r3, [pc, #72]	; (800d450 <HAL_ADC_MspInit+0x78>)
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d40e:	613b      	str	r3, [r7, #16]
 800d410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d412:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <HAL_ADC_MspInit+0x78>)
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	4a0e      	ldr	r2, [pc, #56]	; (800d450 <HAL_ADC_MspInit+0x78>)
 800d418:	f043 0301 	orr.w	r3, r3, #1
 800d41c:	61d3      	str	r3, [r2, #28]
 800d41e:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <HAL_ADC_MspInit+0x78>)
 800d420:	69db      	ldr	r3, [r3, #28]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d42a:	2304      	movs	r3, #4
 800d42c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d42e:	2303      	movs	r3, #3
 800d430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d432:	2300      	movs	r3, #0
 800d434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d436:	f107 0314 	add.w	r3, r7, #20
 800d43a:	4619      	mov	r1, r3
 800d43c:	4805      	ldr	r0, [pc, #20]	; (800d454 <HAL_ADC_MspInit+0x7c>)
 800d43e:	f7f4 fdcd 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800d442:	bf00      	nop
 800d444:	3728      	adds	r7, #40	; 0x28
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	40012400 	.word	0x40012400
 800d450:	40023800 	.word	0x40023800
 800d454:	40020000 	.word	0x40020000

0800d458 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4a05      	ldr	r2, [pc, #20]	; (800d47c <HAL_RTC_MspInit+0x24>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d102      	bne.n	800d470 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <HAL_RTC_MspInit+0x28>)
 800d46c:	2201      	movs	r2, #1
 800d46e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	bc80      	pop	{r7}
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	40002800 	.word	0x40002800
 800d480:	424706d8 	.word	0x424706d8

0800d484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b08a      	sub	sp, #40	; 0x28
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d48c:	f107 0314 	add.w	r3, r7, #20
 800d490:	2200      	movs	r2, #0
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	605a      	str	r2, [r3, #4]
 800d496:	609a      	str	r2, [r3, #8]
 800d498:	60da      	str	r2, [r3, #12]
 800d49a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a17      	ldr	r2, [pc, #92]	; (800d500 <HAL_SPI_MspInit+0x7c>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d127      	bne.n	800d4f6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d4a6:	4b17      	ldr	r3, [pc, #92]	; (800d504 <HAL_SPI_MspInit+0x80>)
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	4a16      	ldr	r2, [pc, #88]	; (800d504 <HAL_SPI_MspInit+0x80>)
 800d4ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4b0:	6213      	str	r3, [r2, #32]
 800d4b2:	4b14      	ldr	r3, [pc, #80]	; (800d504 <HAL_SPI_MspInit+0x80>)
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4ba:	613b      	str	r3, [r7, #16]
 800d4bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4be:	4b11      	ldr	r3, [pc, #68]	; (800d504 <HAL_SPI_MspInit+0x80>)
 800d4c0:	69db      	ldr	r3, [r3, #28]
 800d4c2:	4a10      	ldr	r2, [pc, #64]	; (800d504 <HAL_SPI_MspInit+0x80>)
 800d4c4:	f043 0301 	orr.w	r3, r3, #1
 800d4c8:	61d3      	str	r3, [r2, #28]
 800d4ca:	4b0e      	ldr	r3, [pc, #56]	; (800d504 <HAL_SPI_MspInit+0x80>)
 800d4cc:	69db      	ldr	r3, [r3, #28]
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d4d6:	23e0      	movs	r3, #224	; 0xe0
 800d4d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4da:	2302      	movs	r3, #2
 800d4dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4e2:	2303      	movs	r3, #3
 800d4e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d4e6:	2305      	movs	r3, #5
 800d4e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4ea:	f107 0314 	add.w	r3, r7, #20
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4805      	ldr	r0, [pc, #20]	; (800d508 <HAL_SPI_MspInit+0x84>)
 800d4f2:	f7f4 fd73 	bl	8001fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d4f6:	bf00      	nop
 800d4f8:	3728      	adds	r7, #40	; 0x28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	40013000 	.word	0x40013000
 800d504:	40023800 	.word	0x40023800
 800d508:	40020000 	.word	0x40020000

0800d50c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08a      	sub	sp, #40	; 0x28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	605a      	str	r2, [r3, #4]
 800d51e:	609a      	str	r2, [r3, #8]
 800d520:	60da      	str	r2, [r3, #12]
 800d522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a2e      	ldr	r2, [pc, #184]	; (800d5e4 <HAL_UART_MspInit+0xd8>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d156      	bne.n	800d5dc <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d52e:	4b2e      	ldr	r3, [pc, #184]	; (800d5e8 <HAL_UART_MspInit+0xdc>)
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	4a2d      	ldr	r2, [pc, #180]	; (800d5e8 <HAL_UART_MspInit+0xdc>)
 800d534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d538:	6213      	str	r3, [r2, #32]
 800d53a:	4b2b      	ldr	r3, [pc, #172]	; (800d5e8 <HAL_UART_MspInit+0xdc>)
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d546:	4b28      	ldr	r3, [pc, #160]	; (800d5e8 <HAL_UART_MspInit+0xdc>)
 800d548:	69db      	ldr	r3, [r3, #28]
 800d54a:	4a27      	ldr	r2, [pc, #156]	; (800d5e8 <HAL_UART_MspInit+0xdc>)
 800d54c:	f043 0301 	orr.w	r3, r3, #1
 800d550:	61d3      	str	r3, [r2, #28]
 800d552:	4b25      	ldr	r3, [pc, #148]	; (800d5e8 <HAL_UART_MspInit+0xdc>)
 800d554:	69db      	ldr	r3, [r3, #28]
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	60fb      	str	r3, [r7, #12]
 800d55c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d55e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d564:	2302      	movs	r3, #2
 800d566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d568:	2300      	movs	r3, #0
 800d56a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d56c:	2303      	movs	r3, #3
 800d56e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d570:	2307      	movs	r3, #7
 800d572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d574:	f107 0314 	add.w	r3, r7, #20
 800d578:	4619      	mov	r1, r3
 800d57a:	481c      	ldr	r0, [pc, #112]	; (800d5ec <HAL_UART_MspInit+0xe0>)
 800d57c:	f7f4 fd2e 	bl	8001fdc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800d580:	4b1b      	ldr	r3, [pc, #108]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d582:	4a1c      	ldr	r2, [pc, #112]	; (800d5f4 <HAL_UART_MspInit+0xe8>)
 800d584:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d586:	4b1a      	ldr	r3, [pc, #104]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d588:	2210      	movs	r2, #16
 800d58a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d58c:	4b18      	ldr	r3, [pc, #96]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d58e:	2200      	movs	r2, #0
 800d590:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d592:	4b17      	ldr	r3, [pc, #92]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d594:	2280      	movs	r2, #128	; 0x80
 800d596:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d598:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d59e:	4b14      	ldr	r3, [pc, #80]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800d5a4:	4b12      	ldr	r3, [pc, #72]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d5aa:	4b11      	ldr	r3, [pc, #68]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800d5b0:	480f      	ldr	r0, [pc, #60]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d5b2:	f7f4 fae3 	bl	8001b7c <HAL_DMA_Init>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d001      	beq.n	800d5c0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800d5bc:	f7ff f816 	bl	800c5ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a0b      	ldr	r2, [pc, #44]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d5c4:	635a      	str	r2, [r3, #52]	; 0x34
 800d5c6:	4a0a      	ldr	r2, [pc, #40]	; (800d5f0 <HAL_UART_MspInit+0xe4>)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	2025      	movs	r0, #37	; 0x25
 800d5d2:	f7f4 fa74 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d5d6:	2025      	movs	r0, #37	; 0x25
 800d5d8:	f7f4 fa8d 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d5dc:	bf00      	nop
 800d5de:	3728      	adds	r7, #40	; 0x28
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	40013800 	.word	0x40013800
 800d5e8:	40023800 	.word	0x40023800
 800d5ec:	40020000 	.word	0x40020000
 800d5f0:	20000ff0 	.word	0x20000ff0
 800d5f4:	40026044 	.word	0x40026044

0800d5f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d5fc:	bf00      	nop
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bc80      	pop	{r7}
 800d602:	4770      	bx	lr

0800d604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d608:	e7fe      	b.n	800d608 <HardFault_Handler+0x4>

0800d60a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d60a:	b480      	push	{r7}
 800d60c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d60e:	e7fe      	b.n	800d60e <MemManage_Handler+0x4>

0800d610 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d610:	b480      	push	{r7}
 800d612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d614:	e7fe      	b.n	800d614 <BusFault_Handler+0x4>

0800d616 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d616:	b480      	push	{r7}
 800d618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d61a:	e7fe      	b.n	800d61a <UsageFault_Handler+0x4>

0800d61c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d620:	bf00      	nop
 800d622:	46bd      	mov	sp, r7
 800d624:	bc80      	pop	{r7}
 800d626:	4770      	bx	lr

0800d628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d628:	b480      	push	{r7}
 800d62a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d62c:	bf00      	nop
 800d62e:	46bd      	mov	sp, r7
 800d630:	bc80      	pop	{r7}
 800d632:	4770      	bx	lr

0800d634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d634:	b480      	push	{r7}
 800d636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d638:	bf00      	nop
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bc80      	pop	{r7}
 800d63e:	4770      	bx	lr

0800d640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d644:	f7f3 fe66 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler( );
 800d648:	f7f4 fa8c 	bl	8001b64 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800d64c:	bf00      	nop
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800d654:	4802      	ldr	r0, [pc, #8]	; (800d660 <DMA1_Channel4_IRQHandler+0x10>)
 800d656:	f7f4 fbe3 	bl	8001e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800d65a:	bf00      	nop
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20000ff0 	.word	0x20000ff0

0800d664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d668:	4802      	ldr	r0, [pc, #8]	; (800d674 <USART1_IRQHandler+0x10>)
 800d66a:	f7f6 fe81 	bl	8004370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d66e:	bf00      	nop
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	20001034 	.word	0x20001034

0800d678 <SX1276IoInit>:
  SX1276SetPublicNetwork,
  SX1276GetWakeupTime
};

void SX1276IoInit( void )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af02      	add	r7, sp, #8
//	GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
//	GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
  
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800d67e:	2301      	movs	r3, #1
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	2301      	movs	r3, #1
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	2300      	movs	r3, #0
 800d688:	2201      	movs	r2, #1
 800d68a:	2104      	movs	r1, #4
 800d68c:	480c      	ldr	r0, [pc, #48]	; (800d6c0 <SX1276IoInit+0x48>)
 800d68e:	f7fe fca9 	bl	800bfe4 <GpioInit>

	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d692:	2300      	movs	r3, #0
 800d694:	9301      	str	r3, [sp, #4]
 800d696:	2301      	movs	r3, #1
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	2300      	movs	r3, #0
 800d69c:	2200      	movs	r2, #0
 800d69e:	211b      	movs	r1, #27
 800d6a0:	4808      	ldr	r0, [pc, #32]	; (800d6c4 <SX1276IoInit+0x4c>)
 800d6a2:	f7fe fc9f 	bl	800bfe4 <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	211a      	movs	r1, #26
 800d6b4:	4804      	ldr	r0, [pc, #16]	; (800d6c8 <SX1276IoInit+0x50>)
 800d6b6:	f7fe fc95 	bl	800bfe4 <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800d6ba:	bf00      	nop
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20001308 	.word	0x20001308
 800d6c4:	20001244 	.word	0x20001244
 800d6c8:	20001250 	.word	0x20001250

0800d6cc <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
	GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2203      	movs	r2, #3
 800d6da:	2101      	movs	r1, #1
 800d6dc:	4807      	ldr	r0, [pc, #28]	; (800d6fc <SX1276IoIrqInit+0x30>)
 800d6de:	f7fe fca5 	bl	800c02c <GpioSetInterrupt>
	GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2203      	movs	r2, #3
 800d6ea:	2101      	movs	r1, #1
 800d6ec:	4804      	ldr	r0, [pc, #16]	; (800d700 <SX1276IoIrqInit+0x34>)
 800d6ee:	f7fe fc9d 	bl	800c02c <GpioSetInterrupt>
//	GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
//	GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
//	GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
//	GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
}
 800d6f2:	bf00      	nop
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20001244 	.word	0x20001244
 800d700:	20001250 	.word	0x20001250

0800d704 <SX1276SetRfTxPower>:
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}

void SX1276SetRfTxPower( int8_t power )
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	4603      	mov	r3, r0
 800d70c:	71fb      	strb	r3, [r7, #7]
  uint8_t paConfig = 0;
 800d70e:	2300      	movs	r3, #0
 800d710:	73fb      	strb	r3, [r7, #15]
  uint8_t paDac = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	73bb      	strb	r3, [r7, #14]
  
  paConfig = SX1276Read( REG_PACONFIG );
 800d716:	2009      	movs	r0, #9
 800d718:	f001 fcbc 	bl	800f094 <SX1276Read>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]
  paDac = SX1276Read( REG_PADAC );
 800d720:	204d      	movs	r0, #77	; 0x4d
 800d722:	f001 fcb7 	bl	800f094 <SX1276Read>
 800d726:	4603      	mov	r3, r0
 800d728:	73bb      	strb	r3, [r7, #14]
  
  paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800d72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d72e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d732:	b25c      	sxtb	r4, r3
 800d734:	4b45      	ldr	r3, [pc, #276]	; (800d84c <SX1276SetRfTxPower+0x148>)
 800d736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 f888 	bl	800d850 <SX1276GetPaSelect>
 800d740:	4603      	mov	r3, r0
 800d742:	b25b      	sxtb	r3, r3
 800d744:	4323      	orrs	r3, r4
 800d746:	b25b      	sxtb	r3, r3
 800d748:	73fb      	strb	r3, [r7, #15]
  paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800d74a:	7bfb      	ldrb	r3, [r7, #15]
 800d74c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d750:	73fb      	strb	r3, [r7, #15]
  
  if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800d752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d756:	2b00      	cmp	r3, #0
 800d758:	da4e      	bge.n	800d7f8 <SX1276SetRfTxPower+0xf4>
  {
    if( power > 17 )
 800d75a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d75e:	2b11      	cmp	r3, #17
 800d760:	dd04      	ble.n	800d76c <SX1276SetRfTxPower+0x68>
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800d762:	7bbb      	ldrb	r3, [r7, #14]
 800d764:	f043 0307 	orr.w	r3, r3, #7
 800d768:	73bb      	strb	r3, [r7, #14]
 800d76a:	e008      	b.n	800d77e <SX1276SetRfTxPower+0x7a>
    }
    else
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800d76c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d770:	f023 0307 	bic.w	r3, r3, #7
 800d774:	b25b      	sxtb	r3, r3
 800d776:	f043 0304 	orr.w	r3, r3, #4
 800d77a:	b25b      	sxtb	r3, r3
 800d77c:	73bb      	strb	r3, [r7, #14]
    }
    if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800d77e:	7bbb      	ldrb	r3, [r7, #14]
 800d780:	f003 0307 	and.w	r3, r3, #7
 800d784:	2b07      	cmp	r3, #7
 800d786:	d11b      	bne.n	800d7c0 <SX1276SetRfTxPower+0xbc>
    {
      if( power < 5 )
 800d788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	dc01      	bgt.n	800d794 <SX1276SetRfTxPower+0x90>
      {
        power = 5;
 800d790:	2305      	movs	r3, #5
 800d792:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 20 )
 800d794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d798:	2b14      	cmp	r3, #20
 800d79a:	dd01      	ble.n	800d7a0 <SX1276SetRfTxPower+0x9c>
      {
        power = 20;
 800d79c:	2314      	movs	r3, #20
 800d79e:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800d7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7a4:	f023 030f 	bic.w	r3, r3, #15
 800d7a8:	b25a      	sxtb	r2, r3
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	3b05      	subs	r3, #5
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	b25b      	sxtb	r3, r3
 800d7b2:	f003 030f 	and.w	r3, r3, #15
 800d7b6:	b25b      	sxtb	r3, r3
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	b25b      	sxtb	r3, r3
 800d7bc:	73fb      	strb	r3, [r7, #15]
 800d7be:	e037      	b.n	800d830 <SX1276SetRfTxPower+0x12c>
    }
    else
    {
      if( power < 2 )
 800d7c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	dc01      	bgt.n	800d7cc <SX1276SetRfTxPower+0xc8>
      {
        power = 2;
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 17 )
 800d7cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7d0:	2b11      	cmp	r3, #17
 800d7d2:	dd01      	ble.n	800d7d8 <SX1276SetRfTxPower+0xd4>
      {
        power = 17;
 800d7d4:	2311      	movs	r3, #17
 800d7d6:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800d7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7dc:	f023 030f 	bic.w	r3, r3, #15
 800d7e0:	b25a      	sxtb	r2, r3
 800d7e2:	79fb      	ldrb	r3, [r7, #7]
 800d7e4:	3b02      	subs	r3, #2
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	b25b      	sxtb	r3, r3
 800d7ea:	f003 030f 	and.w	r3, r3, #15
 800d7ee:	b25b      	sxtb	r3, r3
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	b25b      	sxtb	r3, r3
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	e01b      	b.n	800d830 <SX1276SetRfTxPower+0x12c>
    }
  }
  else
  {
    if( power < -1 )
 800d7f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d800:	da01      	bge.n	800d806 <SX1276SetRfTxPower+0x102>
    {
      power = -1;
 800d802:	23ff      	movs	r3, #255	; 0xff
 800d804:	71fb      	strb	r3, [r7, #7]
    }
    if( power > 14 )
 800d806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d80a:	2b0e      	cmp	r3, #14
 800d80c:	dd01      	ble.n	800d812 <SX1276SetRfTxPower+0x10e>
    {
      power = 14;
 800d80e:	230e      	movs	r3, #14
 800d810:	71fb      	strb	r3, [r7, #7]
    }
    paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800d812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d816:	f023 030f 	bic.w	r3, r3, #15
 800d81a:	b25a      	sxtb	r2, r3
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	3301      	adds	r3, #1
 800d820:	b2db      	uxtb	r3, r3
 800d822:	b25b      	sxtb	r3, r3
 800d824:	f003 030f 	and.w	r3, r3, #15
 800d828:	b25b      	sxtb	r3, r3
 800d82a:	4313      	orrs	r3, r2
 800d82c:	b25b      	sxtb	r3, r3
 800d82e:	73fb      	strb	r3, [r7, #15]
  }
  SX1276Write( REG_PACONFIG, paConfig );
 800d830:	7bfb      	ldrb	r3, [r7, #15]
 800d832:	4619      	mov	r1, r3
 800d834:	2009      	movs	r0, #9
 800d836:	f001 fc1b 	bl	800f070 <SX1276Write>
  SX1276Write( REG_PADAC, paDac );
 800d83a:	7bbb      	ldrb	r3, [r7, #14]
 800d83c:	4619      	mov	r1, r3
 800d83e:	204d      	movs	r0, #77	; 0x4d
 800d840:	f001 fc16 	bl	800f070 <SX1276Write>
}
 800d844:	bf00      	nop
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd90      	pop	{r4, r7, pc}
 800d84c:	20001238 	.word	0x20001238

0800d850 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]

    return RF_PACONFIG_PASELECT_PABOOST;
 800d858:	2380      	movs	r3, #128	; 0x80

}
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	bc80      	pop	{r7}
 800d862:	4770      	bx	lr

0800d864 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	4603      	mov	r3, r0
 800d86c:	71fb      	strb	r3, [r7, #7]
  if( RadioIsActive != status )
 800d86e:	4b0b      	ldr	r3, [pc, #44]	; (800d89c <SX1276SetAntSwLowPower+0x38>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	79fa      	ldrb	r2, [r7, #7]
 800d874:	429a      	cmp	r2, r3
 800d876:	d00d      	beq.n	800d894 <SX1276SetAntSwLowPower+0x30>
  {
    RadioIsActive = status;
 800d878:	4a08      	ldr	r2, [pc, #32]	; (800d89c <SX1276SetAntSwLowPower+0x38>)
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	7013      	strb	r3, [r2, #0]
    
    if( status == false )
 800d87e:	79fb      	ldrb	r3, [r7, #7]
 800d880:	f083 0301 	eor.w	r3, r3, #1
 800d884:	b2db      	uxtb	r3, r3
 800d886:	2b00      	cmp	r3, #0
 800d888:	d002      	beq.n	800d890 <SX1276SetAntSwLowPower+0x2c>
    {
      SX1276AntSwInit( );
 800d88a:	f000 f809 	bl	800d8a0 <SX1276AntSwInit>
    else
    {
      SX1276AntSwDeInit( );
    }
  }
}
 800d88e:	e001      	b.n	800d894 <SX1276SetAntSwLowPower+0x30>
      SX1276AntSwDeInit( );
 800d890:	f000 f80c 	bl	800d8ac <SX1276AntSwDeInit>
}
 800d894:	bf00      	nop
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	200007b4 	.word	0x200007b4

0800d8a0 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800d8a4:	bf00      	nop
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bc80      	pop	{r7}
 800d8aa:	4770      	bx	lr

0800d8ac <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); 
}
 800d8b0:	bf00      	nop
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bc80      	pop	{r7}
 800d8b6:	4770      	bx	lr

0800d8b8 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	71fb      	strb	r3, [r7, #7]
  switch( opMode )
 800d8c2:	79fb      	ldrb	r3, [r7, #7]
 800d8c4:	2b03      	cmp	r3, #3
  case RFLR_OPMODE_RECEIVER_SINGLE:
  case RFLR_OPMODE_CAD:
  default:
//    GpioWrite( &rftrx1, 0 );
//    GpioWrite( &rftrx2, 1 );
    break;
 800d8c6:	bf00      	nop
  }
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bc80      	pop	{r7}
 800d8d0:	4770      	bx	lr

0800d8d2 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 800d8da:	2301      	movs	r3, #1
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bc80      	pop	{r7}
 800d8e4:	4770      	bx	lr
	...

0800d8e8 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 800d8f0:	4a24      	ldr	r2, [pc, #144]	; (800d984 <SX1276Init+0x9c>)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d8f6:	4924      	ldr	r1, [pc, #144]	; (800d988 <SX1276Init+0xa0>)
 800d8f8:	4824      	ldr	r0, [pc, #144]	; (800d98c <SX1276Init+0xa4>)
 800d8fa:	f002 f9cf 	bl	800fc9c <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800d8fe:	4922      	ldr	r1, [pc, #136]	; (800d988 <SX1276Init+0xa0>)
 800d900:	4823      	ldr	r0, [pc, #140]	; (800d990 <SX1276Init+0xa8>)
 800d902:	f002 f9cb 	bl	800fc9c <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800d906:	4920      	ldr	r1, [pc, #128]	; (800d988 <SX1276Init+0xa0>)
 800d908:	4822      	ldr	r0, [pc, #136]	; (800d994 <SX1276Init+0xac>)
 800d90a:	f002 f9c7 	bl	800fc9c <TimerInit>

    SX1276Reset( );
 800d90e:	f001 fb0f 	bl	800ef30 <SX1276Reset>

    RxChainCalibration( );
 800d912:	f000 f8e5 	bl	800dae0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d916:	2000      	movs	r0, #0
 800d918:	f001 fb2c 	bl	800ef74 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800d91c:	481e      	ldr	r0, [pc, #120]	; (800d998 <SX1276Init+0xb0>)
 800d91e:	f7ff fed5 	bl	800d6cc <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d922:	2300      	movs	r3, #0
 800d924:	73fb      	strb	r3, [r7, #15]
 800d926:	e01f      	b.n	800d968 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800d928:	7bfa      	ldrb	r2, [r7, #15]
 800d92a:	491c      	ldr	r1, [pc, #112]	; (800d99c <SX1276Init+0xb4>)
 800d92c:	4613      	mov	r3, r2
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	4413      	add	r3, r2
 800d932:	440b      	add	r3, r1
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	4618      	mov	r0, r3
 800d938:	f001 fb44 	bl	800efc4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d93c:	7bfa      	ldrb	r2, [r7, #15]
 800d93e:	4917      	ldr	r1, [pc, #92]	; (800d99c <SX1276Init+0xb4>)
 800d940:	4613      	mov	r3, r2
 800d942:	005b      	lsls	r3, r3, #1
 800d944:	4413      	add	r3, r2
 800d946:	440b      	add	r3, r1
 800d948:	3301      	adds	r3, #1
 800d94a:	7818      	ldrb	r0, [r3, #0]
 800d94c:	7bfa      	ldrb	r2, [r7, #15]
 800d94e:	4913      	ldr	r1, [pc, #76]	; (800d99c <SX1276Init+0xb4>)
 800d950:	4613      	mov	r3, r2
 800d952:	005b      	lsls	r3, r3, #1
 800d954:	4413      	add	r3, r2
 800d956:	440b      	add	r3, r1
 800d958:	3302      	adds	r3, #2
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	4619      	mov	r1, r3
 800d95e:	f001 fb87 	bl	800f070 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d962:	7bfb      	ldrb	r3, [r7, #15]
 800d964:	3301      	adds	r3, #1
 800d966:	73fb      	strb	r3, [r7, #15]
 800d968:	7bfb      	ldrb	r3, [r7, #15]
 800d96a:	2b0f      	cmp	r3, #15
 800d96c:	d9dc      	bls.n	800d928 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 800d96e:	2000      	movs	r0, #0
 800d970:	f001 fb28 	bl	800efc4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800d974:	4b0a      	ldr	r3, [pc, #40]	; (800d9a0 <SX1276Init+0xb8>)
 800d976:	2200      	movs	r2, #0
 800d978:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800d97c:	bf00      	nop
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	200007b8 	.word	0x200007b8
 800d988:	0800f275 	.word	0x0800f275
 800d98c:	20001210 	.word	0x20001210
 800d990:	20001378 	.word	0x20001378
 800d994:	20001224 	.word	0x20001224
 800d998:	20000084 	.word	0x20000084
 800d99c:	080127f4 	.word	0x080127f4
 800d9a0:	20001238 	.word	0x20001238

0800d9a4 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800d9a8:	4b03      	ldr	r3, [pc, #12]	; (800d9b8 <SX1276GetStatus+0x14>)
 800d9aa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bc80      	pop	{r7}
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	20001238 	.word	0x20001238
 800d9bc:	00000000 	.word	0x00000000

0800d9c0 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 800d9c8:	4a17      	ldr	r2, [pc, #92]	; (800da28 <SX1276SetChannel+0x68>)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7f2 fd17 	bl	8000404 <__aeabi_ui2d>
 800d9d6:	a312      	add	r3, pc, #72	; (adr r3, 800da20 <SX1276SetChannel+0x60>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 feb6 	bl	800074c <__aeabi_ddiv>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f7f3 f848 	bl	8000a7c <__aeabi_d2uiz>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	0c1b      	lsrs	r3, r3, #16
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	2006      	movs	r0, #6
 800d9fa:	f001 fb39 	bl	800f070 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	0a1b      	lsrs	r3, r3, #8
 800da02:	b2db      	uxtb	r3, r3
 800da04:	4619      	mov	r1, r3
 800da06:	2007      	movs	r0, #7
 800da08:	f001 fb32 	bl	800f070 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	4619      	mov	r1, r3
 800da12:	2008      	movs	r0, #8
 800da14:	f001 fb2c 	bl	800f070 <SX1276Write>
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}
 800da20:	00000000 	.word	0x00000000
 800da24:	404e8480 	.word	0x404e8480
 800da28:	20001238 	.word	0x20001238

0800da2c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	71fb      	strb	r3, [r7, #7]
 800da38:	4613      	mov	r3, r2
 800da3a:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 800da40:	79fb      	ldrb	r3, [r7, #7]
 800da42:	4618      	mov	r0, r3
 800da44:	f001 fabe 	bl	800efc4 <SX1276SetModem>

    SX1276SetChannel( freq );
 800da48:	6838      	ldr	r0, [r7, #0]
 800da4a:	f7ff ffb9 	bl	800d9c0 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800da4e:	2005      	movs	r0, #5
 800da50:	f001 fa90 	bl	800ef74 <SX1276SetOpMode>

    DelayMs( 1 );
 800da54:	2001      	movs	r0, #1
 800da56:	f7fd ffb0 	bl	800b9ba <DelayMs>

    rssi = SX1276ReadRssi( modem );
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f001 fa29 	bl	800eeb4 <SX1276ReadRssi>
 800da62:	4603      	mov	r3, r0
 800da64:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800da66:	f000 ff07 	bl	800e878 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800da6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800da6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	dd01      	ble.n	800da7a <SX1276IsChannelFree+0x4e>
    {
        return false;
 800da76:	2300      	movs	r3, #0
 800da78:	e000      	b.n	800da7c <SX1276IsChannelFree+0x50>
    }
    return true;
 800da7a:	2301      	movs	r3, #1
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <SX1276Random>:

uint32_t SX1276Random( void )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800da8e:	2001      	movs	r0, #1
 800da90:	f001 fa98 	bl	800efc4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800da94:	21ff      	movs	r1, #255	; 0xff
 800da96:	2011      	movs	r0, #17
 800da98:	f001 faea 	bl	800f070 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800da9c:	2005      	movs	r0, #5
 800da9e:	f001 fa69 	bl	800ef74 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800daa2:	2300      	movs	r3, #0
 800daa4:	71fb      	strb	r3, [r7, #7]
 800daa6:	e011      	b.n	800dacc <SX1276Random+0x48>
    {
        DelayMs( 1 );
 800daa8:	2001      	movs	r0, #1
 800daaa:	f7fd ff86 	bl	800b9ba <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800daae:	202c      	movs	r0, #44	; 0x2c
 800dab0:	f001 faf0 	bl	800f094 <SX1276Read>
 800dab4:	4603      	mov	r3, r0
 800dab6:	f003 0201 	and.w	r2, r3, #1
 800daba:	79fb      	ldrb	r3, [r7, #7]
 800dabc:	fa02 f303 	lsl.w	r3, r2, r3
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	4313      	orrs	r3, r2
 800dac4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	3301      	adds	r3, #1
 800daca:	71fb      	strb	r3, [r7, #7]
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b1f      	cmp	r3, #31
 800dad0:	d9ea      	bls.n	800daa8 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800dad2:	f000 fed1 	bl	800e878 <SX1276SetSleep>

    return rnd;
 800dad6:	683b      	ldr	r3, [r7, #0]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800dae6:	2009      	movs	r0, #9
 800dae8:	f001 fad4 	bl	800f094 <SX1276Read>
 800daec:	4603      	mov	r3, r0
 800daee:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800daf0:	2006      	movs	r0, #6
 800daf2:	f001 facf 	bl	800f094 <SX1276Read>
 800daf6:	4603      	mov	r3, r0
 800daf8:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800dafa:	2007      	movs	r0, #7
 800dafc:	f001 faca 	bl	800f094 <SX1276Read>
 800db00:	4603      	mov	r3, r0
 800db02:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800db04:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800db06:	2008      	movs	r0, #8
 800db08:	f001 fac4 	bl	800f094 <SX1276Read>
 800db0c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800db0e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800db10:	4618      	mov	r0, r3
 800db12:	f7f2 fc77 	bl	8000404 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800db16:	a324      	add	r3, pc, #144	; (adr r3, 800dba8 <RxChainCalibration+0xc8>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7f2 fcec 	bl	80004f8 <__aeabi_dmul>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800db24:	4610      	mov	r0, r2
 800db26:	4619      	mov	r1, r3
 800db28:	f7f2 ffa8 	bl	8000a7c <__aeabi_d2uiz>
 800db2c:	4603      	mov	r3, r0
 800db2e:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800db30:	2100      	movs	r1, #0
 800db32:	2009      	movs	r0, #9
 800db34:	f001 fa9c 	bl	800f070 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800db38:	203b      	movs	r0, #59	; 0x3b
 800db3a:	f001 faab 	bl	800f094 <SX1276Read>
 800db3e:	4603      	mov	r3, r0
 800db40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db44:	b2db      	uxtb	r3, r3
 800db46:	4619      	mov	r1, r3
 800db48:	203b      	movs	r0, #59	; 0x3b
 800db4a:	f001 fa91 	bl	800f070 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800db4e:	bf00      	nop
 800db50:	203b      	movs	r0, #59	; 0x3b
 800db52:	f001 fa9f 	bl	800f094 <SX1276Read>
 800db56:	4603      	mov	r3, r0
 800db58:	f003 0320 	and.w	r3, r3, #32
 800db5c:	2b20      	cmp	r3, #32
 800db5e:	d0f7      	beq.n	800db50 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800db60:	4813      	ldr	r0, [pc, #76]	; (800dbb0 <RxChainCalibration+0xd0>)
 800db62:	f7ff ff2d 	bl	800d9c0 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800db66:	203b      	movs	r0, #59	; 0x3b
 800db68:	f001 fa94 	bl	800f094 <SX1276Read>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db72:	b2db      	uxtb	r3, r3
 800db74:	4619      	mov	r1, r3
 800db76:	203b      	movs	r0, #59	; 0x3b
 800db78:	f001 fa7a 	bl	800f070 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800db7c:	bf00      	nop
 800db7e:	203b      	movs	r0, #59	; 0x3b
 800db80:	f001 fa88 	bl	800f094 <SX1276Read>
 800db84:	4603      	mov	r3, r0
 800db86:	f003 0320 	and.w	r3, r3, #32
 800db8a:	2b20      	cmp	r3, #32
 800db8c:	d0f7      	beq.n	800db7e <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	4619      	mov	r1, r3
 800db92:	2009      	movs	r0, #9
 800db94:	f001 fa6c 	bl	800f070 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800db98:	6838      	ldr	r0, [r7, #0]
 800db9a:	f7ff ff11 	bl	800d9c0 <SX1276SetChannel>
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd90      	pop	{r4, r7, pc}
 800dba6:	bf00      	nop
 800dba8:	00000000 	.word	0x00000000
 800dbac:	404e8480 	.word	0x404e8480
 800dbb0:	33bca100 	.word	0x33bca100

0800dbb4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	73fb      	strb	r3, [r7, #15]
 800dbc0:	e017      	b.n	800dbf2 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800dbc2:	7bfb      	ldrb	r3, [r7, #15]
 800dbc4:	4a0f      	ldr	r2, [pc, #60]	; (800dc04 <GetFskBandwidthRegValue+0x50>)
 800dbc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d30d      	bcc.n	800dbec <GetFskBandwidthRegValue+0x38>
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	4a0b      	ldr	r2, [pc, #44]	; (800dc04 <GetFskBandwidthRegValue+0x50>)
 800dbd6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d205      	bcs.n	800dbec <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
 800dbe2:	4a08      	ldr	r2, [pc, #32]	; (800dc04 <GetFskBandwidthRegValue+0x50>)
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	4413      	add	r3, r2
 800dbe8:	791b      	ldrb	r3, [r3, #4]
 800dbea:	e006      	b.n	800dbfa <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	73fb      	strb	r3, [r7, #15]
 800dbf2:	7bfb      	ldrb	r3, [r7, #15]
 800dbf4:	2b14      	cmp	r3, #20
 800dbf6:	d9e4      	bls.n	800dbc2 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800dbf8:	e7fe      	b.n	800dbf8 <GetFskBandwidthRegValue+0x44>
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bc80      	pop	{r7}
 800dc02:	4770      	bx	lr
 800dc04:	08012824 	.word	0x08012824

0800dc08 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800dc08:	b5b0      	push	{r4, r5, r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	461a      	mov	r2, r3
 800dc14:	4603      	mov	r3, r0
 800dc16:	73fb      	strb	r3, [r7, #15]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f001 f9d0 	bl	800efc4 <SX1276SetModem>

    switch( modem )
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <SX1276SetRxConfig+0x2a>
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	f000 80d2 	beq.w	800ddd4 <SX1276SetRxConfig+0x1cc>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800dc30:	e206      	b.n	800e040 <SX1276SetRxConfig+0x438>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800dc32:	4a97      	ldr	r2, [pc, #604]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800dc3a:	4a95      	ldr	r2, [pc, #596]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800dc42:	4a93      	ldr	r2, [pc, #588]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
 800dc4a:	4a91      	ldr	r2, [pc, #580]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc50:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800dc54:	4a8e      	ldr	r2, [pc, #568]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800dc5a:	f882 30fb 	strb.w	r3, [r2, #251]	; 0xfb
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800dc5e:	4a8c      	ldr	r2, [pc, #560]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800dc64:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800dc68:	4a89      	ldr	r2, [pc, #548]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dc6e:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800dc72:	4a87      	ldr	r2, [pc, #540]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc74:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800dc78:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800dc7c:	4a84      	ldr	r2, [pc, #528]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dc7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc80:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.RxSingleTimeout = symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1e3;
 800dc84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7f2 fbcc 	bl	8000424 <__aeabi_i2d>
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	460d      	mov	r5, r1
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7f2 fbb7 	bl	8000404 <__aeabi_ui2d>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	f04f 0000 	mov.w	r0, #0
 800dc9e:	497d      	ldr	r1, [pc, #500]	; (800de94 <SX1276SetRxConfig+0x28c>)
 800dca0:	f7f2 fd54 	bl	800074c <__aeabi_ddiv>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	4610      	mov	r0, r2
 800dcaa:	4619      	mov	r1, r3
 800dcac:	f04f 0200 	mov.w	r2, #0
 800dcb0:	4b79      	ldr	r3, [pc, #484]	; (800de98 <SX1276SetRxConfig+0x290>)
 800dcb2:	f7f2 fc21 	bl	80004f8 <__aeabi_dmul>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4620      	mov	r0, r4
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	f7f2 fc1b 	bl	80004f8 <__aeabi_dmul>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4610      	mov	r0, r2
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	4b73      	ldr	r3, [pc, #460]	; (800de9c <SX1276SetRxConfig+0x294>)
 800dcd0:	f7f2 fc12 	bl	80004f8 <__aeabi_dmul>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	460b      	mov	r3, r1
 800dcd8:	4610      	mov	r0, r2
 800dcda:	4619      	mov	r1, r3
 800dcdc:	f7f2 fece 	bl	8000a7c <__aeabi_d2uiz>
 800dce0:	4603      	mov	r3, r0
 800dce2:	4a6b      	ldr	r2, [pc, #428]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dce4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7f2 fb8b 	bl	8000404 <__aeabi_ui2d>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	a165      	add	r1, pc, #404	; (adr r1, 800de88 <SX1276SetRxConfig+0x280>)
 800dcf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcf8:	f7f2 fd28 	bl	800074c <__aeabi_ddiv>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4610      	mov	r0, r2
 800dd02:	4619      	mov	r1, r3
 800dd04:	f7f2 feba 	bl	8000a7c <__aeabi_d2uiz>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	0a1b      	lsrs	r3, r3, #8
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	4619      	mov	r1, r3
 800dd16:	2002      	movs	r0, #2
 800dd18:	f001 f9aa 	bl	800f070 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	4619      	mov	r1, r3
 800dd22:	2003      	movs	r0, #3
 800dd24:	f001 f9a4 	bl	800f070 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800dd28:	68b8      	ldr	r0, [r7, #8]
 800dd2a:	f7ff ff43 	bl	800dbb4 <GetFskBandwidthRegValue>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	4619      	mov	r1, r3
 800dd32:	2012      	movs	r0, #18
 800dd34:	f001 f99c 	bl	800f070 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800dd38:	6a38      	ldr	r0, [r7, #32]
 800dd3a:	f7ff ff3b 	bl	800dbb4 <GetFskBandwidthRegValue>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4619      	mov	r1, r3
 800dd42:	2013      	movs	r0, #19
 800dd44:	f001 f994 	bl	800f070 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800dd48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd4a:	0a1b      	lsrs	r3, r3, #8
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	4619      	mov	r1, r3
 800dd52:	2025      	movs	r0, #37	; 0x25
 800dd54:	f001 f98c 	bl	800f070 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800dd58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	2026      	movs	r0, #38	; 0x26
 800dd60:	f001 f986 	bl	800f070 <SX1276Write>
            if( fixLen == 1 )
 800dd64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d006      	beq.n	800dd7a <SX1276SetRxConfig+0x172>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800dd6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800dd70:	4619      	mov	r1, r3
 800dd72:	2032      	movs	r0, #50	; 0x32
 800dd74:	f001 f97c 	bl	800f070 <SX1276Write>
 800dd78:	e003      	b.n	800dd82 <SX1276SetRxConfig+0x17a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800dd7a:	21ff      	movs	r1, #255	; 0xff
 800dd7c:	2032      	movs	r0, #50	; 0x32
 800dd7e:	f001 f977 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800dd82:	2030      	movs	r0, #48	; 0x30
 800dd84:	f001 f986 	bl	800f094 <SX1276Read>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800dd8c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800dd90:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800dd92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd96:	2a00      	cmp	r2, #0
 800dd98:	d001      	beq.n	800dd9e <SX1276SetRxConfig+0x196>
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	e001      	b.n	800dda2 <SX1276SetRxConfig+0x19a>
 800dd9e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800dda2:	4313      	orrs	r3, r2
 800dda4:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800dda6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ddaa:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800ddac:	b25b      	sxtb	r3, r3
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	2030      	movs	r0, #48	; 0x30
 800ddb8:	f001 f95a 	bl	800f070 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800ddbc:	2031      	movs	r0, #49	; 0x31
 800ddbe:	f001 f969 	bl	800f094 <SX1276Read>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	4619      	mov	r1, r3
 800ddcc:	2031      	movs	r0, #49	; 0x31
 800ddce:	f001 f94f 	bl	800f070 <SX1276Write>
        break;
 800ddd2:	e135      	b.n	800e040 <SX1276SetRxConfig+0x438>
            if( bandwidth > 2 )
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d900      	bls.n	800dddc <SX1276SetRxConfig+0x1d4>
                while( 1 );
 800ddda:	e7fe      	b.n	800ddda <SX1276SetRxConfig+0x1d2>
            bandwidth += 7;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	3307      	adds	r3, #7
 800dde0:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800dde2:	4a2b      	ldr	r2, [pc, #172]	; (800de90 <SX1276SetRxConfig+0x288>)
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800ddea:	4a29      	ldr	r2, [pc, #164]	; (800de90 <SX1276SetRxConfig+0x288>)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800ddf2:	4a27      	ldr	r2, [pc, #156]	; (800de90 <SX1276SetRxConfig+0x288>)
 800ddf4:	7bbb      	ldrb	r3, [r7, #14]
 800ddf6:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800ddfa:	4a25      	ldr	r2, [pc, #148]	; (800de90 <SX1276SetRxConfig+0x288>)
 800ddfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddfe:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800de02:	4a23      	ldr	r2, [pc, #140]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de08:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800de0c:	4a20      	ldr	r2, [pc, #128]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de0e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800de12:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800de16:	4a1e      	ldr	r2, [pc, #120]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de18:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800de1c:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800de20:	4a1b      	ldr	r2, [pc, #108]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de22:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800de26:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800de2a:	4a19      	ldr	r2, [pc, #100]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de2c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de30:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800de34:	4a16      	ldr	r2, [pc, #88]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800de3a:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800de3e:	4a14      	ldr	r2, [pc, #80]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800de44:	f882 312e 	strb.w	r3, [r2, #302]	; 0x12e
            if( datarate > 12 )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2b0c      	cmp	r3, #12
 800de4c:	d902      	bls.n	800de54 <SX1276SetRxConfig+0x24c>
                datarate = 12;
 800de4e:	230c      	movs	r3, #12
 800de50:	607b      	str	r3, [r7, #4]
 800de52:	e004      	b.n	800de5e <SX1276SetRxConfig+0x256>
            else if( datarate < 6 )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b05      	cmp	r3, #5
 800de58:	d801      	bhi.n	800de5e <SX1276SetRxConfig+0x256>
                datarate = 6;
 800de5a:	2306      	movs	r3, #6
 800de5c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2b07      	cmp	r3, #7
 800de62:	d105      	bne.n	800de70 <SX1276SetRxConfig+0x268>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b0b      	cmp	r3, #11
 800de68:	d008      	beq.n	800de7c <SX1276SetRxConfig+0x274>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2b0c      	cmp	r3, #12
 800de6e:	d005      	beq.n	800de7c <SX1276SetRxConfig+0x274>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b08      	cmp	r3, #8
 800de74:	d114      	bne.n	800dea0 <SX1276SetRxConfig+0x298>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b0c      	cmp	r3, #12
 800de7a:	d111      	bne.n	800dea0 <SX1276SetRxConfig+0x298>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800de7c:	4b04      	ldr	r3, [pc, #16]	; (800de90 <SX1276SetRxConfig+0x288>)
 800de7e:	2201      	movs	r2, #1
 800de80:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800de84:	e010      	b.n	800dea8 <SX1276SetRxConfig+0x2a0>
 800de86:	bf00      	nop
 800de88:	00000000 	.word	0x00000000
 800de8c:	417e8480 	.word	0x417e8480
 800de90:	20001238 	.word	0x20001238
 800de94:	3ff00000 	.word	0x3ff00000
 800de98:	40200000 	.word	0x40200000
 800de9c:	408f4000 	.word	0x408f4000
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800dea0:	4b69      	ldr	r3, [pc, #420]	; (800e048 <SX1276SetRxConfig+0x440>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800dea8:	201d      	movs	r0, #29
 800deaa:	f001 f8f3 	bl	800f094 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	011b      	lsls	r3, r3, #4
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	7bbb      	ldrb	r3, [r7, #14]
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	b2db      	uxtb	r3, r3
 800debc:	4313      	orrs	r3, r2
 800debe:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800dec0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800dec4:	4313      	orrs	r3, r2
 800dec6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800dec8:	4619      	mov	r1, r3
 800deca:	201d      	movs	r0, #29
 800decc:	f001 f8d0 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800ded0:	201e      	movs	r0, #30
 800ded2:	f001 f8df 	bl	800f094 <SX1276Read>
 800ded6:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800ded8:	f003 0308 	and.w	r3, r3, #8
 800dedc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	011b      	lsls	r3, r3, #4
 800dee4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800dee6:	4313      	orrs	r3, r2
 800dee8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800deea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	b2db      	uxtb	r3, r3
 800def2:	4313      	orrs	r3, r2
 800def4:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800def6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800def8:	0a1b      	lsrs	r3, r3, #8
 800defa:	b29b      	uxth	r3, r3
 800defc:	b2db      	uxtb	r3, r3
 800defe:	f003 0303 	and.w	r3, r3, #3
 800df02:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800df04:	4313      	orrs	r3, r2
 800df06:	b2db      	uxtb	r3, r3
 800df08:	4619      	mov	r1, r3
 800df0a:	201e      	movs	r0, #30
 800df0c:	f001 f8b0 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800df10:	2026      	movs	r0, #38	; 0x26
 800df12:	f001 f8bf 	bl	800f094 <SX1276Read>
 800df16:	4603      	mov	r3, r0
 800df18:	b25b      	sxtb	r3, r3
 800df1a:	f023 0308 	bic.w	r3, r3, #8
 800df1e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800df20:	4b49      	ldr	r3, [pc, #292]	; (800e048 <SX1276SetRxConfig+0x440>)
 800df22:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800df26:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800df28:	b25b      	sxtb	r3, r3
 800df2a:	4313      	orrs	r3, r2
 800df2c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	4619      	mov	r1, r3
 800df32:	2026      	movs	r0, #38	; 0x26
 800df34:	f001 f89c 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800df38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	4619      	mov	r1, r3
 800df3e:	201f      	movs	r0, #31
 800df40:	f001 f896 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800df44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df46:	0a1b      	lsrs	r3, r3, #8
 800df48:	b29b      	uxth	r3, r3
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	4619      	mov	r1, r3
 800df4e:	2020      	movs	r0, #32
 800df50:	f001 f88e 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800df54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df56:	b2db      	uxtb	r3, r3
 800df58:	4619      	mov	r1, r3
 800df5a:	2021      	movs	r0, #33	; 0x21
 800df5c:	f001 f888 	bl	800f070 <SX1276Write>
            if( fixLen == 1 )
 800df60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df64:	2b00      	cmp	r3, #0
 800df66:	d005      	beq.n	800df74 <SX1276SetRxConfig+0x36c>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800df68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800df6c:	4619      	mov	r1, r3
 800df6e:	2022      	movs	r0, #34	; 0x22
 800df70:	f001 f87e 	bl	800f070 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800df74:	4b34      	ldr	r3, [pc, #208]	; (800e048 <SX1276SetRxConfig+0x440>)
 800df76:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d011      	beq.n	800dfa2 <SX1276SetRxConfig+0x39a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800df7e:	2044      	movs	r0, #68	; 0x44
 800df80:	f001 f888 	bl	800f094 <SX1276Read>
 800df84:	4603      	mov	r3, r0
 800df86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df8a:	b2db      	uxtb	r3, r3
 800df8c:	4619      	mov	r1, r3
 800df8e:	2044      	movs	r0, #68	; 0x44
 800df90:	f001 f86e 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800df94:	4b2c      	ldr	r3, [pc, #176]	; (800e048 <SX1276SetRxConfig+0x440>)
 800df96:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800df9a:	4619      	mov	r1, r3
 800df9c:	2024      	movs	r0, #36	; 0x24
 800df9e:	f001 f867 	bl	800f070 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	2b09      	cmp	r3, #9
 800dfa6:	d10e      	bne.n	800dfc6 <SX1276SetRxConfig+0x3be>
 800dfa8:	4b27      	ldr	r3, [pc, #156]	; (800e048 <SX1276SetRxConfig+0x440>)
 800dfaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfae:	4a27      	ldr	r2, [pc, #156]	; (800e04c <SX1276SetRxConfig+0x444>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d908      	bls.n	800dfc6 <SX1276SetRxConfig+0x3be>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800dfb4:	2102      	movs	r1, #2
 800dfb6:	2036      	movs	r0, #54	; 0x36
 800dfb8:	f001 f85a 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 800dfbc:	2164      	movs	r1, #100	; 0x64
 800dfbe:	203a      	movs	r0, #58	; 0x3a
 800dfc0:	f001 f856 	bl	800f070 <SX1276Write>
 800dfc4:	e00f      	b.n	800dfe6 <SX1276SetRxConfig+0x3de>
            else if( bandwidth == 9 )
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b09      	cmp	r3, #9
 800dfca:	d108      	bne.n	800dfde <SX1276SetRxConfig+0x3d6>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800dfcc:	2102      	movs	r1, #2
 800dfce:	2036      	movs	r0, #54	; 0x36
 800dfd0:	f001 f84e 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 800dfd4:	217f      	movs	r1, #127	; 0x7f
 800dfd6:	203a      	movs	r0, #58	; 0x3a
 800dfd8:	f001 f84a 	bl	800f070 <SX1276Write>
 800dfdc:	e003      	b.n	800dfe6 <SX1276SetRxConfig+0x3de>
                SX1276Write( REG_LR_TEST36, 0x03 );
 800dfde:	2103      	movs	r1, #3
 800dfe0:	2036      	movs	r0, #54	; 0x36
 800dfe2:	f001 f845 	bl	800f070 <SX1276Write>
            if( datarate == 6 )
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b06      	cmp	r3, #6
 800dfea:	d114      	bne.n	800e016 <SX1276SetRxConfig+0x40e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800dfec:	2031      	movs	r0, #49	; 0x31
 800dfee:	f001 f851 	bl	800f094 <SX1276Read>
 800dff2:	4603      	mov	r3, r0
 800dff4:	b25b      	sxtb	r3, r3
 800dff6:	f023 0307 	bic.w	r3, r3, #7
 800dffa:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800dffc:	f043 0305 	orr.w	r3, r3, #5
 800e000:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e002:	b2db      	uxtb	r3, r3
 800e004:	4619      	mov	r1, r3
 800e006:	2031      	movs	r0, #49	; 0x31
 800e008:	f001 f832 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e00c:	210c      	movs	r1, #12
 800e00e:	2037      	movs	r0, #55	; 0x37
 800e010:	f001 f82e 	bl	800f070 <SX1276Write>
        break;
 800e014:	e013      	b.n	800e03e <SX1276SetRxConfig+0x436>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e016:	2031      	movs	r0, #49	; 0x31
 800e018:	f001 f83c 	bl	800f094 <SX1276Read>
 800e01c:	4603      	mov	r3, r0
 800e01e:	b25b      	sxtb	r3, r3
 800e020:	f023 0307 	bic.w	r3, r3, #7
 800e024:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e026:	f043 0303 	orr.w	r3, r3, #3
 800e02a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	4619      	mov	r1, r3
 800e030:	2031      	movs	r0, #49	; 0x31
 800e032:	f001 f81d 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e036:	210a      	movs	r1, #10
 800e038:	2037      	movs	r0, #55	; 0x37
 800e03a:	f001 f819 	bl	800f070 <SX1276Write>
        break;
 800e03e:	bf00      	nop
}
 800e040:	bf00      	nop
 800e042:	3710      	adds	r7, #16
 800e044:	46bd      	mov	sp, r7
 800e046:	bdb0      	pop	{r4, r5, r7, pc}
 800e048:	20001238 	.word	0x20001238
 800e04c:	1f4add40 	.word	0x1f4add40

0800e050 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	60ba      	str	r2, [r7, #8]
 800e058:	607b      	str	r3, [r7, #4]
 800e05a:	4603      	mov	r3, r0
 800e05c:	73fb      	strb	r3, [r7, #15]
 800e05e:	460b      	mov	r3, r1
 800e060:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800e062:	7bfb      	ldrb	r3, [r7, #15]
 800e064:	4618      	mov	r0, r3
 800e066:	f000 ffad 	bl	800efc4 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 800e06a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff fb48 	bl	800d704 <SX1276SetRfTxPower>

    switch( modem )
 800e074:	7bfb      	ldrb	r3, [r7, #15]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d003      	beq.n	800e082 <SX1276SetTxConfig+0x32>
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	f000 809d 	beq.w	800e1ba <SX1276SetTxConfig+0x16a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e080:	e191      	b.n	800e3a6 <SX1276SetTxConfig+0x356>
            SX1276.Settings.Fsk.Power = power;
 800e082:	4abd      	ldr	r2, [pc, #756]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	f882 30e4 	strb.w	r3, [r2, #228]	; 0xe4
            SX1276.Settings.Fsk.Fdev = fdev;
 800e08a:	4abb      	ldr	r2, [pc, #748]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e092:	4ab9      	ldr	r2, [pc, #740]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800e09a:	4ab7      	ldr	r2, [pc, #732]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e0a2:	4ab5      	ldr	r2, [pc, #724]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e0a4:	8c3b      	ldrh	r3, [r7, #32]
 800e0a6:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e0aa:	4ab3      	ldr	r2, [pc, #716]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e0ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0b0:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e0b4:	4ab0      	ldr	r2, [pc, #704]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e0b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0ba:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e0be:	4aae      	ldr	r2, [pc, #696]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e0c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e0c4:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e0c8:	4aab      	ldr	r2, [pc, #684]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800e0d0:	68b8      	ldr	r0, [r7, #8]
 800e0d2:	f7f2 f997 	bl	8000404 <__aeabi_ui2d>
 800e0d6:	a3a4      	add	r3, pc, #656	; (adr r3, 800e368 <SX1276SetTxConfig+0x318>)
 800e0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0dc:	f7f2 fb36 	bl	800074c <__aeabi_ddiv>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	f7f2 fcc8 	bl	8000a7c <__aeabi_d2uiz>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	0a1b      	lsrs	r3, r3, #8
 800e0f6:	b2db      	uxtb	r3, r3
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	2004      	movs	r0, #4
 800e0fc:	f000 ffb8 	bl	800f070 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	4619      	mov	r1, r3
 800e106:	2005      	movs	r0, #5
 800e108:	f000 ffb2 	bl	800f070 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e10c:	69b8      	ldr	r0, [r7, #24]
 800e10e:	f7f2 f979 	bl	8000404 <__aeabi_ui2d>
 800e112:	4602      	mov	r2, r0
 800e114:	460b      	mov	r3, r1
 800e116:	a196      	add	r1, pc, #600	; (adr r1, 800e370 <SX1276SetTxConfig+0x320>)
 800e118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e11c:	f7f2 fb16 	bl	800074c <__aeabi_ddiv>
 800e120:	4602      	mov	r2, r0
 800e122:	460b      	mov	r3, r1
 800e124:	4610      	mov	r0, r2
 800e126:	4619      	mov	r1, r3
 800e128:	f7f2 fca8 	bl	8000a7c <__aeabi_d2uiz>
 800e12c:	4603      	mov	r3, r0
 800e12e:	b29b      	uxth	r3, r3
 800e130:	61bb      	str	r3, [r7, #24]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	0a1b      	lsrs	r3, r3, #8
 800e136:	b2db      	uxtb	r3, r3
 800e138:	4619      	mov	r1, r3
 800e13a:	2002      	movs	r0, #2
 800e13c:	f000 ff98 	bl	800f070 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	4619      	mov	r1, r3
 800e146:	2003      	movs	r0, #3
 800e148:	f000 ff92 	bl	800f070 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e14c:	8c3b      	ldrh	r3, [r7, #32]
 800e14e:	0a1b      	lsrs	r3, r3, #8
 800e150:	b29b      	uxth	r3, r3
 800e152:	b2db      	uxtb	r3, r3
 800e154:	4619      	mov	r1, r3
 800e156:	2025      	movs	r0, #37	; 0x25
 800e158:	f000 ff8a 	bl	800f070 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800e15c:	8c3b      	ldrh	r3, [r7, #32]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	4619      	mov	r1, r3
 800e162:	2026      	movs	r0, #38	; 0x26
 800e164:	f000 ff84 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e168:	2030      	movs	r0, #48	; 0x30
 800e16a:	f000 ff93 	bl	800f094 <SX1276Read>
 800e16e:	4603      	mov	r3, r0
 800e170:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e172:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800e176:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e178:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e17c:	2a00      	cmp	r2, #0
 800e17e:	d001      	beq.n	800e184 <SX1276SetTxConfig+0x134>
 800e180:	2200      	movs	r2, #0
 800e182:	e001      	b.n	800e188 <SX1276SetTxConfig+0x138>
 800e184:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e188:	4313      	orrs	r3, r2
 800e18a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800e18c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e190:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e192:	b25b      	sxtb	r3, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	4619      	mov	r1, r3
 800e19c:	2030      	movs	r0, #48	; 0x30
 800e19e:	f000 ff67 	bl	800f070 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e1a2:	2031      	movs	r0, #49	; 0x31
 800e1a4:	f000 ff76 	bl	800f094 <SX1276Read>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	2031      	movs	r0, #49	; 0x31
 800e1b4:	f000 ff5c 	bl	800f070 <SX1276Write>
        break;
 800e1b8:	e0f5      	b.n	800e3a6 <SX1276SetTxConfig+0x356>
            SX1276.Settings.LoRa.Power = power;
 800e1ba:	4a6f      	ldr	r2, [pc, #444]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1bc:	7bbb      	ldrb	r3, [r7, #14]
 800e1be:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            if( bandwidth > 2 )
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d900      	bls.n	800e1ca <SX1276SetTxConfig+0x17a>
                while( 1 );
 800e1c8:	e7fe      	b.n	800e1c8 <SX1276SetTxConfig+0x178>
            bandwidth += 7;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	3307      	adds	r3, #7
 800e1ce:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e1d0:	4a69      	ldr	r2, [pc, #420]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800e1d8:	4a67      	ldr	r2, [pc, #412]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800e1e0:	4a65      	ldr	r2, [pc, #404]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1e2:	7f3b      	ldrb	r3, [r7, #28]
 800e1e4:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e1e8:	4a63      	ldr	r2, [pc, #396]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1ea:	8c3b      	ldrh	r3, [r7, #32]
 800e1ec:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e1f0:	4a61      	ldr	r2, [pc, #388]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1f6:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e1fa:	4a5f      	ldr	r2, [pc, #380]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e1fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e200:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e204:	4a5c      	ldr	r2, [pc, #368]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e206:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e20a:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e20e:	4a5a      	ldr	r2, [pc, #360]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e214:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e218:	4a57      	ldr	r2, [pc, #348]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e21a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e21e:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e222:	4a55      	ldr	r2, [pc, #340]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
            if( datarate > 12 )
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	2b0c      	cmp	r3, #12
 800e22e:	d902      	bls.n	800e236 <SX1276SetTxConfig+0x1e6>
                datarate = 12;
 800e230:	230c      	movs	r3, #12
 800e232:	61bb      	str	r3, [r7, #24]
 800e234:	e004      	b.n	800e240 <SX1276SetTxConfig+0x1f0>
            else if( datarate < 6 )
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	2b05      	cmp	r3, #5
 800e23a:	d801      	bhi.n	800e240 <SX1276SetTxConfig+0x1f0>
                datarate = 6;
 800e23c:	2306      	movs	r3, #6
 800e23e:	61bb      	str	r3, [r7, #24]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b07      	cmp	r3, #7
 800e244:	d105      	bne.n	800e252 <SX1276SetTxConfig+0x202>
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	2b0b      	cmp	r3, #11
 800e24a:	d008      	beq.n	800e25e <SX1276SetTxConfig+0x20e>
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	2b0c      	cmp	r3, #12
 800e250:	d005      	beq.n	800e25e <SX1276SetTxConfig+0x20e>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b08      	cmp	r3, #8
 800e256:	d107      	bne.n	800e268 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	2b0c      	cmp	r3, #12
 800e25c:	d104      	bne.n	800e268 <SX1276SetTxConfig+0x218>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e25e:	4b46      	ldr	r3, [pc, #280]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e260:	2201      	movs	r2, #1
 800e262:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800e266:	e003      	b.n	800e270 <SX1276SetTxConfig+0x220>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e268:	4b43      	ldr	r3, [pc, #268]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e270:	4b41      	ldr	r3, [pc, #260]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e272:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800e276:	2b00      	cmp	r3, #0
 800e278:	d011      	beq.n	800e29e <SX1276SetTxConfig+0x24e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e27a:	2044      	movs	r0, #68	; 0x44
 800e27c:	f000 ff0a 	bl	800f094 <SX1276Read>
 800e280:	4603      	mov	r3, r0
 800e282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e286:	b2db      	uxtb	r3, r3
 800e288:	4619      	mov	r1, r3
 800e28a:	2044      	movs	r0, #68	; 0x44
 800e28c:	f000 fef0 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e290:	4b39      	ldr	r3, [pc, #228]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e292:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800e296:	4619      	mov	r1, r3
 800e298:	2024      	movs	r0, #36	; 0x24
 800e29a:	f000 fee9 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e29e:	201d      	movs	r0, #29
 800e2a0:	f000 fef8 	bl	800f094 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	011b      	lsls	r3, r3, #4
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	7f3b      	ldrb	r3, [r7, #28]
 800e2ae:	005b      	lsls	r3, r3, #1
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e2b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e2be:	4619      	mov	r1, r3
 800e2c0:	201d      	movs	r0, #29
 800e2c2:	f000 fed5 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e2c6:	201e      	movs	r0, #30
 800e2c8:	f000 fee4 	bl	800f094 <SX1276Read>
 800e2cc:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800e2ce:	f003 030b 	and.w	r3, r3, #11
 800e2d2:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	011b      	lsls	r3, r3, #4
 800e2da:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800e2e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	201e      	movs	r0, #30
 800e2f0:	f000 febe 	bl	800f070 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e2f4:	2026      	movs	r0, #38	; 0x26
 800e2f6:	f000 fecd 	bl	800f094 <SX1276Read>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	b25b      	sxtb	r3, r3
 800e2fe:	f023 0308 	bic.w	r3, r3, #8
 800e302:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e304:	4b1c      	ldr	r3, [pc, #112]	; (800e378 <SX1276SetTxConfig+0x328>)
 800e306:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e30a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e30c:	b25b      	sxtb	r3, r3
 800e30e:	4313      	orrs	r3, r2
 800e310:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e312:	b2db      	uxtb	r3, r3
 800e314:	4619      	mov	r1, r3
 800e316:	2026      	movs	r0, #38	; 0x26
 800e318:	f000 feaa 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e31c:	8c3b      	ldrh	r3, [r7, #32]
 800e31e:	0a1b      	lsrs	r3, r3, #8
 800e320:	b29b      	uxth	r3, r3
 800e322:	b2db      	uxtb	r3, r3
 800e324:	4619      	mov	r1, r3
 800e326:	2020      	movs	r0, #32
 800e328:	f000 fea2 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800e32c:	8c3b      	ldrh	r3, [r7, #32]
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	4619      	mov	r1, r3
 800e332:	2021      	movs	r0, #33	; 0x21
 800e334:	f000 fe9c 	bl	800f070 <SX1276Write>
            if( datarate == 6 )
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	2b06      	cmp	r3, #6
 800e33c:	d11e      	bne.n	800e37c <SX1276SetTxConfig+0x32c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e33e:	2031      	movs	r0, #49	; 0x31
 800e340:	f000 fea8 	bl	800f094 <SX1276Read>
 800e344:	4603      	mov	r3, r0
 800e346:	b25b      	sxtb	r3, r3
 800e348:	f023 0307 	bic.w	r3, r3, #7
 800e34c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e34e:	f043 0305 	orr.w	r3, r3, #5
 800e352:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e354:	b2db      	uxtb	r3, r3
 800e356:	4619      	mov	r1, r3
 800e358:	2031      	movs	r0, #49	; 0x31
 800e35a:	f000 fe89 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e35e:	210c      	movs	r1, #12
 800e360:	2037      	movs	r0, #55	; 0x37
 800e362:	f000 fe85 	bl	800f070 <SX1276Write>
        break;
 800e366:	e01d      	b.n	800e3a4 <SX1276SetTxConfig+0x354>
 800e368:	00000000 	.word	0x00000000
 800e36c:	404e8480 	.word	0x404e8480
 800e370:	00000000 	.word	0x00000000
 800e374:	417e8480 	.word	0x417e8480
 800e378:	20001238 	.word	0x20001238
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e37c:	2031      	movs	r0, #49	; 0x31
 800e37e:	f000 fe89 	bl	800f094 <SX1276Read>
 800e382:	4603      	mov	r3, r0
 800e384:	b25b      	sxtb	r3, r3
 800e386:	f023 0307 	bic.w	r3, r3, #7
 800e38a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e38c:	f043 0303 	orr.w	r3, r3, #3
 800e390:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e392:	b2db      	uxtb	r3, r3
 800e394:	4619      	mov	r1, r3
 800e396:	2031      	movs	r0, #49	; 0x31
 800e398:	f000 fe6a 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e39c:	210a      	movs	r1, #10
 800e39e:	2037      	movs	r0, #55	; 0x37
 800e3a0:	f000 fe66 	bl	800f070 <SX1276Write>
        break;
 800e3a4:	bf00      	nop
}
 800e3a6:	bf00      	nop
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop

0800e3b0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800e3b0:	b5b0      	push	{r4, r5, r7, lr}
 800e3b2:	b094      	sub	sp, #80	; 0x50
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	460a      	mov	r2, r1
 800e3ba:	71fb      	strb	r3, [r7, #7]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d003      	beq.n	800e3d2 <SX1276GetTimeOnAir+0x22>
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	f000 808e 	beq.w	800e4ec <SX1276GetTimeOnAir+0x13c>
 800e3d0:	e17c      	b.n	800e6cc <SX1276GetTimeOnAir+0x31c>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e3d2:	4bc9      	ldr	r3, [pc, #804]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e3d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800e3d8:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800e3da:	2027      	movs	r0, #39	; 0x27
 800e3dc:	f000 fe5a 	bl	800f094 <SX1276Read>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e3e6:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e3e8:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f2 f81a 	bl	8000424 <__aeabi_i2d>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800e3f4:	49c0      	ldr	r1, [pc, #768]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e3f6:	f891 10fa 	ldrb.w	r1, [r1, #250]	; 0xfa
 800e3fa:	2900      	cmp	r1, #0
 800e3fc:	d004      	beq.n	800e408 <SX1276GetTimeOnAir+0x58>
 800e3fe:	f04f 0000 	mov.w	r0, #0
 800e402:	f04f 0100 	mov.w	r1, #0
 800e406:	e002      	b.n	800e40e <SX1276GetTimeOnAir+0x5e>
 800e408:	f04f 0000 	mov.w	r0, #0
 800e40c:	49bb      	ldr	r1, [pc, #748]	; (800e6fc <SX1276GetTimeOnAir+0x34c>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800e40e:	f7f1 febd 	bl	800018c <__adddf3>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4614      	mov	r4, r2
 800e418:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800e41a:	2030      	movs	r0, #48	; 0x30
 800e41c:	f000 fe3a 	bl	800f094 <SX1276Read>
 800e420:	4603      	mov	r3, r0
 800e422:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 800e426:	2b00      	cmp	r3, #0
 800e428:	d003      	beq.n	800e432 <SX1276GetTimeOnAir+0x82>
 800e42a:	f04f 0000 	mov.w	r0, #0
 800e42e:	49b3      	ldr	r1, [pc, #716]	; (800e6fc <SX1276GetTimeOnAir+0x34c>)
 800e430:	e003      	b.n	800e43a <SX1276GetTimeOnAir+0x8a>
 800e432:	f04f 0000 	mov.w	r0, #0
 800e436:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800e43a:	4622      	mov	r2, r4
 800e43c:	462b      	mov	r3, r5
 800e43e:	f7f1 fea5 	bl	800018c <__adddf3>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	4614      	mov	r4, r2
 800e448:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800e44a:	79bb      	ldrb	r3, [r7, #6]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f1 ffe9 	bl	8000424 <__aeabi_i2d>
 800e452:	4602      	mov	r2, r0
 800e454:	460b      	mov	r3, r1
 800e456:	4620      	mov	r0, r4
 800e458:	4629      	mov	r1, r5
 800e45a:	f7f1 fe97 	bl	800018c <__adddf3>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	4614      	mov	r4, r2
 800e464:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800e466:	4ba4      	ldr	r3, [pc, #656]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e468:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <SX1276GetTimeOnAir+0xca>
 800e470:	f04f 0000 	mov.w	r0, #0
 800e474:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e478:	e003      	b.n	800e482 <SX1276GetTimeOnAir+0xd2>
 800e47a:	f04f 0000 	mov.w	r0, #0
 800e47e:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800e482:	4622      	mov	r2, r4
 800e484:	462b      	mov	r3, r5
 800e486:	f7f1 fe81 	bl	800018c <__adddf3>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	4610      	mov	r0, r2
 800e490:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e492:	f04f 0200 	mov.w	r2, #0
 800e496:	4b9a      	ldr	r3, [pc, #616]	; (800e700 <SX1276GetTimeOnAir+0x350>)
 800e498:	f7f2 f82e 	bl	80004f8 <__aeabi_dmul>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	4614      	mov	r4, r2
 800e4a2:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 800e4a4:	4b94      	ldr	r3, [pc, #592]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e4a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7f1 ffaa 	bl	8000404 <__aeabi_ui2d>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	f7f2 f948 	bl	800074c <__aeabi_ddiv>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4610      	mov	r0, r2
 800e4c2:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e4c4:	f04f 0200 	mov.w	r2, #0
 800e4c8:	4b8e      	ldr	r3, [pc, #568]	; (800e704 <SX1276GetTimeOnAir+0x354>)
 800e4ca:	f7f2 f815 	bl	80004f8 <__aeabi_dmul>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	f003 fe43 	bl	8012160 <round>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	4610      	mov	r0, r2
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f7f2 facb 	bl	8000a7c <__aeabi_d2uiz>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800e4ea:	e0ef      	b.n	800e6cc <SX1276GetTimeOnAir+0x31c>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800e4ec:	f04f 0200 	mov.w	r2, #0
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800e4f8:	4b7f      	ldr	r3, [pc, #508]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e4fa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e4fe:	2b09      	cmp	r3, #9
 800e500:	d012      	beq.n	800e528 <SX1276GetTimeOnAir+0x178>
 800e502:	2b09      	cmp	r3, #9
 800e504:	d816      	bhi.n	800e534 <SX1276GetTimeOnAir+0x184>
 800e506:	2b07      	cmp	r3, #7
 800e508:	d002      	beq.n	800e510 <SX1276GetTimeOnAir+0x160>
 800e50a:	2b08      	cmp	r3, #8
 800e50c:	d006      	beq.n	800e51c <SX1276GetTimeOnAir+0x16c>
 800e50e:	e011      	b.n	800e534 <SX1276GetTimeOnAir+0x184>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 800e510:	a371      	add	r3, pc, #452	; (adr r3, 800e6d8 <SX1276GetTimeOnAir+0x328>)
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800e51a:	e00b      	b.n	800e534 <SX1276GetTimeOnAir+0x184>
            case 8: // 250 kHz
                bw = 250e3;
 800e51c:	a370      	add	r3, pc, #448	; (adr r3, 800e6e0 <SX1276GetTimeOnAir+0x330>)
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800e526:	e005      	b.n	800e534 <SX1276GetTimeOnAir+0x184>
            case 9: // 500 kHz
                bw = 500e3;
 800e528:	a36f      	add	r3, pc, #444	; (adr r3, 800e6e8 <SX1276GetTimeOnAir+0x338>)
 800e52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800e532:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800e534:	4b70      	ldr	r3, [pc, #448]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e536:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e53a:	2201      	movs	r2, #1
 800e53c:	fa02 f303 	lsl.w	r3, r2, r3
 800e540:	4618      	mov	r0, r3
 800e542:	f7f1 ff6f 	bl	8000424 <__aeabi_i2d>
 800e546:	4602      	mov	r2, r0
 800e548:	460b      	mov	r3, r1
 800e54a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e54e:	f7f2 f8fd 	bl	800074c <__aeabi_ddiv>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            double ts = 1 / rs;
 800e55a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e55e:	f04f 0000 	mov.w	r0, #0
 800e562:	4966      	ldr	r1, [pc, #408]	; (800e6fc <SX1276GetTimeOnAir+0x34c>)
 800e564:	f7f2 f8f2 	bl	800074c <__aeabi_ddiv>
 800e568:	4602      	mov	r2, r0
 800e56a:	460b      	mov	r3, r1
 800e56c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800e570:	4b61      	ldr	r3, [pc, #388]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e572:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 800e576:	4618      	mov	r0, r3
 800e578:	f7f1 ff54 	bl	8000424 <__aeabi_i2d>
 800e57c:	f04f 0200 	mov.w	r2, #0
 800e580:	4b61      	ldr	r3, [pc, #388]	; (800e708 <SX1276GetTimeOnAir+0x358>)
 800e582:	f7f1 fe03 	bl	800018c <__adddf3>
 800e586:	4602      	mov	r2, r0
 800e588:	460b      	mov	r3, r1
 800e58a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e58e:	f7f1 ffb3 	bl	80004f8 <__aeabi_dmul>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800e59a:	79bb      	ldrb	r3, [r7, #6]
 800e59c:	00db      	lsls	r3, r3, #3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	4b55      	ldr	r3, [pc, #340]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e5a2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e5a6:	009b      	lsls	r3, r3, #2
 800e5a8:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800e5aa:	4a53      	ldr	r2, [pc, #332]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e5ac:	f892 212a 	ldrb.w	r2, [r2, #298]	; 0x12a
 800e5b0:	0112      	lsls	r2, r2, #4
 800e5b2:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800e5b4:	4b50      	ldr	r3, [pc, #320]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e5b6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d001      	beq.n	800e5c2 <SX1276GetTimeOnAir+0x212>
 800e5be:	2314      	movs	r3, #20
 800e5c0:	e000      	b.n	800e5c4 <SX1276GetTimeOnAir+0x214>
 800e5c2:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7f1 ff1b 	bl	8000404 <__aeabi_ui2d>
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800e5d2:	4b49      	ldr	r3, [pc, #292]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e5d4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800e5d8:	4b47      	ldr	r3, [pc, #284]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e5da:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <SX1276GetTimeOnAir+0x236>
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	e000      	b.n	800e5e8 <SX1276GetTimeOnAir+0x238>
 800e5e6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7f1 ff09 	bl	8000404 <__aeabi_ui2d>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	f7f2 f8a7 	bl	800074c <__aeabi_ddiv>
 800e5fe:	4602      	mov	r2, r0
 800e600:	460b      	mov	r3, r1
 800e602:	4610      	mov	r0, r2
 800e604:	4619      	mov	r1, r3
 800e606:	f003 fcab 	bl	8011f60 <ceil>
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800e60e:	4b3a      	ldr	r3, [pc, #232]	; (800e6f8 <SX1276GetTimeOnAir+0x348>)
 800e610:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800e614:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800e616:	4618      	mov	r0, r3
 800e618:	f7f1 ff04 	bl	8000424 <__aeabi_i2d>
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800e620:	4620      	mov	r0, r4
 800e622:	4629      	mov	r1, r5
 800e624:	f7f1 ff68 	bl	80004f8 <__aeabi_dmul>
 800e628:	4602      	mov	r2, r0
 800e62a:	460b      	mov	r3, r1
 800e62c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800e630:	f04f 0200 	mov.w	r2, #0
 800e634:	f04f 0300 	mov.w	r3, #0
 800e638:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e63c:	f7f2 f9ec 	bl	8000a18 <__aeabi_dcmpgt>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d002      	beq.n	800e64c <SX1276GetTimeOnAir+0x29c>
 800e646:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e64a:	e003      	b.n	800e654 <SX1276GetTimeOnAir+0x2a4>
 800e64c:	f04f 0000 	mov.w	r0, #0
 800e650:	f04f 0100 	mov.w	r1, #0
 800e654:	f04f 0200 	mov.w	r2, #0
 800e658:	4b29      	ldr	r3, [pc, #164]	; (800e700 <SX1276GetTimeOnAir+0x350>)
 800e65a:	f7f1 fd97 	bl	800018c <__adddf3>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
 800e662:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 800e666:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e66a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e66e:	f7f1 ff43 	bl	80004f8 <__aeabi_dmul>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800e67a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e67e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e682:	f7f1 fd83 	bl	800018c <__adddf3>
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
 800e68a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800e68e:	f04f 0200 	mov.w	r2, #0
 800e692:	4b1c      	ldr	r3, [pc, #112]	; (800e704 <SX1276GetTimeOnAir+0x354>)
 800e694:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e698:	f7f1 ff2e 	bl	80004f8 <__aeabi_dmul>
 800e69c:	4602      	mov	r2, r0
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	a312      	add	r3, pc, #72	; (adr r3, 800e6f0 <SX1276GetTimeOnAir+0x340>)
 800e6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6aa:	f7f1 fd6f 	bl	800018c <__adddf3>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	f003 fcd3 	bl	8012060 <floor>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4610      	mov	r0, r2
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	f7f2 f9db 	bl	8000a7c <__aeabi_d2uiz>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800e6ca:	bf00      	nop
    }
    return airTime;
 800e6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3750      	adds	r7, #80	; 0x50
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	00000000 	.word	0x00000000
 800e6dc:	40fe8480 	.word	0x40fe8480
 800e6e0:	00000000 	.word	0x00000000
 800e6e4:	410e8480 	.word	0x410e8480
 800e6e8:	00000000 	.word	0x00000000
 800e6ec:	411e8480 	.word	0x411e8480
 800e6f0:	d916872b 	.word	0xd916872b
 800e6f4:	3feff7ce 	.word	0x3feff7ce
 800e6f8:	20001238 	.word	0x20001238
 800e6fc:	3ff00000 	.word	0x3ff00000
 800e700:	40200000 	.word	0x40200000
 800e704:	408f4000 	.word	0x408f4000
 800e708:	40110000 	.word	0x40110000

0800e70c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800e718:	2300      	movs	r3, #0
 800e71a:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800e71c:	4b54      	ldr	r3, [pc, #336]	; (800e870 <SX1276Send+0x164>)
 800e71e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800e722:	2b00      	cmp	r3, #0
 800e724:	d002      	beq.n	800e72c <SX1276Send+0x20>
 800e726:	2b01      	cmp	r3, #1
 800e728:	d04a      	beq.n	800e7c0 <SX1276Send+0xb4>
 800e72a:	e09a      	b.n	800e862 <SX1276Send+0x156>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e72c:	4b50      	ldr	r3, [pc, #320]	; (800e870 <SX1276Send+0x164>)
 800e72e:	2200      	movs	r2, #0
 800e730:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = size;
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	b29a      	uxth	r2, r3
 800e738:	4b4d      	ldr	r3, [pc, #308]	; (800e870 <SX1276Send+0x164>)
 800e73a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

            if( SX1276.Settings.Fsk.FixLen == false )
 800e73e:	4b4c      	ldr	r3, [pc, #304]	; (800e870 <SX1276Send+0x164>)
 800e740:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800e744:	f083 0301 	eor.w	r3, r3, #1
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d005      	beq.n	800e75a <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800e74e:	1cfb      	adds	r3, r7, #3
 800e750:	2101      	movs	r1, #1
 800e752:	4618      	mov	r0, r3
 800e754:	f000 fd1a 	bl	800f18c <SX1276WriteFifo>
 800e758:	e004      	b.n	800e764 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800e75a:	78fb      	ldrb	r3, [r7, #3]
 800e75c:	4619      	mov	r1, r3
 800e75e:	2032      	movs	r0, #50	; 0x32
 800e760:	f000 fc86 	bl	800f070 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d007      	beq.n	800e77a <SX1276Send+0x6e>
 800e76a:	78fb      	ldrb	r3, [r7, #3]
 800e76c:	2b40      	cmp	r3, #64	; 0x40
 800e76e:	d804      	bhi.n	800e77a <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800e770:	78fa      	ldrb	r2, [r7, #3]
 800e772:	4b3f      	ldr	r3, [pc, #252]	; (800e870 <SX1276Send+0x164>)
 800e774:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 800e778:	e00a      	b.n	800e790 <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800e77a:	78fb      	ldrb	r3, [r7, #3]
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	461a      	mov	r2, r3
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	483c      	ldr	r0, [pc, #240]	; (800e874 <SX1276Send+0x168>)
 800e784:	f001 fdcf 	bl	8010326 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800e788:	4b39      	ldr	r3, [pc, #228]	; (800e870 <SX1276Send+0x164>)
 800e78a:	2220      	movs	r2, #32
 800e78c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800e790:	4b37      	ldr	r3, [pc, #220]	; (800e870 <SX1276Send+0x164>)
 800e792:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800e796:	4619      	mov	r1, r3
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fcf7 	bl	800f18c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800e79e:	4b34      	ldr	r3, [pc, #208]	; (800e870 <SX1276Send+0x164>)
 800e7a0:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800e7a4:	4b32      	ldr	r3, [pc, #200]	; (800e870 <SX1276Send+0x164>)
 800e7a6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	4413      	add	r3, r2
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	4b2f      	ldr	r3, [pc, #188]	; (800e870 <SX1276Send+0x164>)
 800e7b2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800e7b6:	4b2e      	ldr	r3, [pc, #184]	; (800e870 <SX1276Send+0x164>)
 800e7b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e7bc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e7be:	e050      	b.n	800e862 <SX1276Send+0x156>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800e7c0:	4b2b      	ldr	r3, [pc, #172]	; (800e870 <SX1276Send+0x164>)
 800e7c2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00f      	beq.n	800e7ea <SX1276Send+0xde>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800e7ca:	2033      	movs	r0, #51	; 0x33
 800e7cc:	f000 fc62 	bl	800f094 <SX1276Read>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	4619      	mov	r1, r3
 800e7da:	2033      	movs	r0, #51	; 0x33
 800e7dc:	f000 fc48 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800e7e0:	2119      	movs	r1, #25
 800e7e2:	203b      	movs	r0, #59	; 0x3b
 800e7e4:	f000 fc44 	bl	800f070 <SX1276Write>
 800e7e8:	e013      	b.n	800e812 <SX1276Send+0x106>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800e7ea:	2033      	movs	r0, #51	; 0x33
 800e7ec:	f000 fc52 	bl	800f094 <SX1276Read>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	b25b      	sxtb	r3, r3
 800e7f4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800e7f8:	b25b      	sxtb	r3, r3
 800e7fa:	f043 0301 	orr.w	r3, r3, #1
 800e7fe:	b25b      	sxtb	r3, r3
 800e800:	b2db      	uxtb	r3, r3
 800e802:	4619      	mov	r1, r3
 800e804:	2033      	movs	r0, #51	; 0x33
 800e806:	f000 fc33 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800e80a:	211d      	movs	r1, #29
 800e80c:	203b      	movs	r0, #59	; 0x3b
 800e80e:	f000 fc2f 	bl	800f070 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800e812:	78fa      	ldrb	r2, [r7, #3]
 800e814:	4b16      	ldr	r3, [pc, #88]	; (800e870 <SX1276Send+0x164>)
 800e816:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800e81a:	78fb      	ldrb	r3, [r7, #3]
 800e81c:	4619      	mov	r1, r3
 800e81e:	2022      	movs	r0, #34	; 0x22
 800e820:	f000 fc26 	bl	800f070 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800e824:	2100      	movs	r1, #0
 800e826:	200e      	movs	r0, #14
 800e828:	f000 fc22 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800e82c:	2100      	movs	r1, #0
 800e82e:	200d      	movs	r0, #13
 800e830:	f000 fc1e 	bl	800f070 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800e834:	2001      	movs	r0, #1
 800e836:	f000 fc2d 	bl	800f094 <SX1276Read>
 800e83a:	4603      	mov	r3, r0
 800e83c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e840:	2b00      	cmp	r3, #0
 800e842:	d104      	bne.n	800e84e <SX1276Send+0x142>
            {
                SX1276SetStby( );
 800e844:	f000 f830 	bl	800e8a8 <SX1276SetStby>
                DelayMs( 1 );
 800e848:	2001      	movs	r0, #1
 800e84a:	f7fd f8b6 	bl	800b9ba <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800e84e:	78fb      	ldrb	r3, [r7, #3]
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 fc9a 	bl	800f18c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800e858:	4b05      	ldr	r3, [pc, #20]	; (800e870 <SX1276Send+0x164>)
 800e85a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800e85e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e860:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f000 fa26 	bl	800ecb4 <SX1276SetTx>
}
 800e868:	bf00      	nop
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	20001238 	.word	0x20001238
 800e874:	200007bc 	.word	0x200007bc

0800e878 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800e87c:	4807      	ldr	r0, [pc, #28]	; (800e89c <SX1276SetSleep+0x24>)
 800e87e:	f001 fb6f 	bl	800ff60 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800e882:	4807      	ldr	r0, [pc, #28]	; (800e8a0 <SX1276SetSleep+0x28>)
 800e884:	f001 fb6c 	bl	800ff60 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800e888:	2000      	movs	r0, #0
 800e88a:	f000 fb73 	bl	800ef74 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800e88e:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <SX1276SetSleep+0x2c>)
 800e890:	2200      	movs	r2, #0
 800e892:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800e896:	bf00      	nop
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	20001378 	.word	0x20001378
 800e8a0:	20001210 	.word	0x20001210
 800e8a4:	20001238 	.word	0x20001238

0800e8a8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800e8ac:	4807      	ldr	r0, [pc, #28]	; (800e8cc <SX1276SetStby+0x24>)
 800e8ae:	f001 fb57 	bl	800ff60 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800e8b2:	4807      	ldr	r0, [pc, #28]	; (800e8d0 <SX1276SetStby+0x28>)
 800e8b4:	f001 fb54 	bl	800ff60 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800e8b8:	2001      	movs	r0, #1
 800e8ba:	f000 fb5b 	bl	800ef74 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800e8be:	4b05      	ldr	r3, [pc, #20]	; (800e8d4 <SX1276SetStby+0x2c>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800e8c6:	bf00      	nop
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20001378 	.word	0x20001378
 800e8d0:	20001210 	.word	0x20001210
 800e8d4:	20001238 	.word	0x20001238

0800e8d8 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800e8e4:	4bc4      	ldr	r3, [pc, #784]	; (800ebf8 <SX1276SetRx+0x320>)
 800e8e6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d002      	beq.n	800e8f4 <SX1276SetRx+0x1c>
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d03e      	beq.n	800e970 <SX1276SetRx+0x98>
 800e8f2:	e19b      	b.n	800ec2c <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800e8f4:	4bc0      	ldr	r3, [pc, #768]	; (800ebf8 <SX1276SetRx+0x320>)
 800e8f6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800e8fa:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800e8fc:	2040      	movs	r0, #64	; 0x40
 800e8fe:	f000 fbc9 	bl	800f094 <SX1276Read>
 800e902:	4603      	mov	r3, r0
 800e904:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800e906:	f003 0303 	and.w	r3, r3, #3
 800e90a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800e90c:	f043 030c 	orr.w	r3, r3, #12
 800e910:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800e912:	b2db      	uxtb	r3, r3
 800e914:	4619      	mov	r1, r3
 800e916:	2040      	movs	r0, #64	; 0x40
 800e918:	f000 fbaa 	bl	800f070 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800e91c:	2041      	movs	r0, #65	; 0x41
 800e91e:	f000 fbb9 	bl	800f094 <SX1276Read>
 800e922:	4603      	mov	r3, r0
 800e924:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	4619      	mov	r1, r3
 800e92c:	2041      	movs	r0, #65	; 0x41
 800e92e:	f000 fb9f 	bl	800f070 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800e932:	2035      	movs	r0, #53	; 0x35
 800e934:	f000 fbae 	bl	800f094 <SX1276Read>
 800e938:	4603      	mov	r3, r0
 800e93a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e93e:	b2da      	uxtb	r2, r3
 800e940:	4bad      	ldr	r3, [pc, #692]	; (800ebf8 <SX1276SetRx+0x320>)
 800e942:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800e946:	211e      	movs	r1, #30
 800e948:	200d      	movs	r0, #13
 800e94a:	f000 fb91 	bl	800f070 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800e94e:	4baa      	ldr	r3, [pc, #680]	; (800ebf8 <SX1276SetRx+0x320>)
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800e956:	4ba8      	ldr	r3, [pc, #672]	; (800ebf8 <SX1276SetRx+0x320>)
 800e958:	2200      	movs	r2, #0
 800e95a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800e95e:	4ba6      	ldr	r3, [pc, #664]	; (800ebf8 <SX1276SetRx+0x320>)
 800e960:	2200      	movs	r2, #0
 800e962:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800e966:	4ba4      	ldr	r3, [pc, #656]	; (800ebf8 <SX1276SetRx+0x320>)
 800e968:	2200      	movs	r2, #0
 800e96a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
        }
        break;
 800e96e:	e15d      	b.n	800ec2c <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800e970:	4ba1      	ldr	r3, [pc, #644]	; (800ebf8 <SX1276SetRx+0x320>)
 800e972:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00f      	beq.n	800e99a <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800e97a:	2033      	movs	r0, #51	; 0x33
 800e97c:	f000 fb8a 	bl	800f094 <SX1276Read>
 800e980:	4603      	mov	r3, r0
 800e982:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800e986:	b2db      	uxtb	r3, r3
 800e988:	4619      	mov	r1, r3
 800e98a:	2033      	movs	r0, #51	; 0x33
 800e98c:	f000 fb70 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800e990:	2119      	movs	r1, #25
 800e992:	203b      	movs	r0, #59	; 0x3b
 800e994:	f000 fb6c 	bl	800f070 <SX1276Write>
 800e998:	e013      	b.n	800e9c2 <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800e99a:	2033      	movs	r0, #51	; 0x33
 800e99c:	f000 fb7a 	bl	800f094 <SX1276Read>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	b25b      	sxtb	r3, r3
 800e9a4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800e9a8:	b25b      	sxtb	r3, r3
 800e9aa:	f043 0301 	orr.w	r3, r3, #1
 800e9ae:	b25b      	sxtb	r3, r3
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	2033      	movs	r0, #51	; 0x33
 800e9b6:	f000 fb5b 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800e9ba:	211d      	movs	r1, #29
 800e9bc:	203b      	movs	r0, #59	; 0x3b
 800e9be:	f000 fb57 	bl	800f070 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800e9c2:	4b8d      	ldr	r3, [pc, #564]	; (800ebf8 <SX1276SetRx+0x320>)
 800e9c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e9c8:	2b08      	cmp	r3, #8
 800e9ca:	f200 80d6 	bhi.w	800eb7a <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800e9ce:	2031      	movs	r0, #49	; 0x31
 800e9d0:	f000 fb60 	bl	800f094 <SX1276Read>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	4619      	mov	r1, r3
 800e9de:	2031      	movs	r0, #49	; 0x31
 800e9e0:	f000 fb46 	bl	800f070 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	2030      	movs	r0, #48	; 0x30
 800e9e8:	f000 fb42 	bl	800f070 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800e9ec:	4b82      	ldr	r3, [pc, #520]	; (800ebf8 <SX1276SetRx+0x320>)
 800e9ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e9f2:	2b08      	cmp	r3, #8
 800e9f4:	f200 80cc 	bhi.w	800eb90 <SX1276SetRx+0x2b8>
 800e9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ea00 <SX1276SetRx+0x128>)
 800e9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fe:	bf00      	nop
 800ea00:	0800ea25 	.word	0x0800ea25
 800ea04:	0800ea59 	.word	0x0800ea59
 800ea08:	0800ea8d 	.word	0x0800ea8d
 800ea0c:	0800eac1 	.word	0x0800eac1
 800ea10:	0800eaf5 	.word	0x0800eaf5
 800ea14:	0800eb29 	.word	0x0800eb29
 800ea18:	0800eb5d 	.word	0x0800eb5d
 800ea1c:	0800eb67 	.word	0x0800eb67
 800ea20:	0800eb71 	.word	0x0800eb71
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800ea24:	2148      	movs	r1, #72	; 0x48
 800ea26:	202f      	movs	r0, #47	; 0x2f
 800ea28:	f000 fb22 	bl	800f070 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800ea2c:	4b72      	ldr	r3, [pc, #456]	; (800ebf8 <SX1276SetRx+0x320>)
 800ea2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7f1 fce6 	bl	8000404 <__aeabi_ui2d>
 800ea38:	a363      	add	r3, pc, #396	; (adr r3, 800ebc8 <SX1276SetRx+0x2f0>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f7f1 fba5 	bl	800018c <__adddf3>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4610      	mov	r0, r2
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f7f2 f817 	bl	8000a7c <__aeabi_d2uiz>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe ffb5 	bl	800d9c0 <SX1276SetChannel>
                    break;
 800ea56:	e09b      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ea58:	2144      	movs	r1, #68	; 0x44
 800ea5a:	202f      	movs	r0, #47	; 0x2f
 800ea5c:	f000 fb08 	bl	800f070 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 800ea60:	4b65      	ldr	r3, [pc, #404]	; (800ebf8 <SX1276SetRx+0x320>)
 800ea62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7f1 fccc 	bl	8000404 <__aeabi_ui2d>
 800ea6c:	a358      	add	r3, pc, #352	; (adr r3, 800ebd0 <SX1276SetRx+0x2f8>)
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	f7f1 fb8b 	bl	800018c <__adddf3>
 800ea76:	4602      	mov	r2, r0
 800ea78:	460b      	mov	r3, r1
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	f7f1 fffd 	bl	8000a7c <__aeabi_d2uiz>
 800ea82:	4603      	mov	r3, r0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe ff9b 	bl	800d9c0 <SX1276SetChannel>
                    break;
 800ea8a:	e081      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ea8c:	2144      	movs	r1, #68	; 0x44
 800ea8e:	202f      	movs	r0, #47	; 0x2f
 800ea90:	f000 faee 	bl	800f070 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800ea94:	4b58      	ldr	r3, [pc, #352]	; (800ebf8 <SX1276SetRx+0x320>)
 800ea96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f1 fcb2 	bl	8000404 <__aeabi_ui2d>
 800eaa0:	a34d      	add	r3, pc, #308	; (adr r3, 800ebd8 <SX1276SetRx+0x300>)
 800eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa6:	f7f1 fb71 	bl	800018c <__adddf3>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4610      	mov	r0, r2
 800eab0:	4619      	mov	r1, r3
 800eab2:	f7f1 ffe3 	bl	8000a7c <__aeabi_d2uiz>
 800eab6:	4603      	mov	r3, r0
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fe ff81 	bl	800d9c0 <SX1276SetChannel>
                    break;
 800eabe:	e067      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800eac0:	2144      	movs	r1, #68	; 0x44
 800eac2:	202f      	movs	r0, #47	; 0x2f
 800eac4:	f000 fad4 	bl	800f070 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 800eac8:	4b4b      	ldr	r3, [pc, #300]	; (800ebf8 <SX1276SetRx+0x320>)
 800eaca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eace:	4618      	mov	r0, r3
 800ead0:	f7f1 fc98 	bl	8000404 <__aeabi_ui2d>
 800ead4:	a342      	add	r3, pc, #264	; (adr r3, 800ebe0 <SX1276SetRx+0x308>)
 800ead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eada:	f7f1 fb57 	bl	800018c <__adddf3>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	4610      	mov	r0, r2
 800eae4:	4619      	mov	r1, r3
 800eae6:	f7f1 ffc9 	bl	8000a7c <__aeabi_d2uiz>
 800eaea:	4603      	mov	r3, r0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe ff67 	bl	800d9c0 <SX1276SetChannel>
                    break;
 800eaf2:	e04d      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800eaf4:	2144      	movs	r1, #68	; 0x44
 800eaf6:	202f      	movs	r0, #47	; 0x2f
 800eaf8:	f000 faba 	bl	800f070 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800eafc:	4b3e      	ldr	r3, [pc, #248]	; (800ebf8 <SX1276SetRx+0x320>)
 800eafe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7f1 fc7e 	bl	8000404 <__aeabi_ui2d>
 800eb08:	a337      	add	r3, pc, #220	; (adr r3, 800ebe8 <SX1276SetRx+0x310>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	f7f1 fb3d 	bl	800018c <__adddf3>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	4610      	mov	r0, r2
 800eb18:	4619      	mov	r1, r3
 800eb1a:	f7f1 ffaf 	bl	8000a7c <__aeabi_d2uiz>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fe ff4d 	bl	800d9c0 <SX1276SetChannel>
                    break;
 800eb26:	e033      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800eb28:	2144      	movs	r1, #68	; 0x44
 800eb2a:	202f      	movs	r0, #47	; 0x2f
 800eb2c:	f000 faa0 	bl	800f070 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 800eb30:	4b31      	ldr	r3, [pc, #196]	; (800ebf8 <SX1276SetRx+0x320>)
 800eb32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f1 fc64 	bl	8000404 <__aeabi_ui2d>
 800eb3c:	a32c      	add	r3, pc, #176	; (adr r3, 800ebf0 <SX1276SetRx+0x318>)
 800eb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb42:	f7f1 fb23 	bl	800018c <__adddf3>
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	f7f1 ff95 	bl	8000a7c <__aeabi_d2uiz>
 800eb52:	4603      	mov	r3, r0
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7fe ff33 	bl	800d9c0 <SX1276SetChannel>
                    break;
 800eb5a:	e019      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800eb5c:	2140      	movs	r1, #64	; 0x40
 800eb5e:	202f      	movs	r0, #47	; 0x2f
 800eb60:	f000 fa86 	bl	800f070 <SX1276Write>
                    break;
 800eb64:	e014      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800eb66:	2140      	movs	r1, #64	; 0x40
 800eb68:	202f      	movs	r0, #47	; 0x2f
 800eb6a:	f000 fa81 	bl	800f070 <SX1276Write>
                    break;
 800eb6e:	e00f      	b.n	800eb90 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800eb70:	2140      	movs	r1, #64	; 0x40
 800eb72:	202f      	movs	r0, #47	; 0x2f
 800eb74:	f000 fa7c 	bl	800f070 <SX1276Write>
                    break;
 800eb78:	e00a      	b.n	800eb90 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800eb7a:	2031      	movs	r0, #49	; 0x31
 800eb7c:	f000 fa8a 	bl	800f094 <SX1276Read>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	4619      	mov	r1, r3
 800eb8a:	2031      	movs	r0, #49	; 0x31
 800eb8c:	f000 fa70 	bl	800f070 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800eb90:	4b19      	ldr	r3, [pc, #100]	; (800ebf8 <SX1276SetRx+0x320>)
 800eb92:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800eb96:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800eb98:	4b17      	ldr	r3, [pc, #92]	; (800ebf8 <SX1276SetRx+0x320>)
 800eb9a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d02c      	beq.n	800ebfc <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800eba2:	211d      	movs	r1, #29
 800eba4:	2011      	movs	r0, #17
 800eba6:	f000 fa63 	bl	800f070 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800ebaa:	2040      	movs	r0, #64	; 0x40
 800ebac:	f000 fa72 	bl	800f094 <SX1276Read>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	4619      	mov	r1, r3
 800ebba:	2040      	movs	r0, #64	; 0x40
 800ebbc:	f000 fa58 	bl	800f070 <SX1276Write>
 800ebc0:	e02b      	b.n	800ec1a <SX1276SetRx+0x342>
 800ebc2:	bf00      	nop
 800ebc4:	f3af 8000 	nop.w
 800ebc8:	00000000 	.word	0x00000000
 800ebcc:	40be8200 	.word	0x40be8200
 800ebd0:	00000000 	.word	0x00000000
 800ebd4:	40c45a00 	.word	0x40c45a00
 800ebd8:	00000000 	.word	0x00000000
 800ebdc:	40ce8200 	.word	0x40ce8200
 800ebe0:	00000000 	.word	0x00000000
 800ebe4:	40d45780 	.word	0x40d45780
 800ebe8:	00000000 	.word	0x00000000
 800ebec:	40de8480 	.word	0x40de8480
 800ebf0:	00000000 	.word	0x00000000
 800ebf4:	40e458c0 	.word	0x40e458c0
 800ebf8:	20001238 	.word	0x20001238
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800ebfc:	211f      	movs	r1, #31
 800ebfe:	2011      	movs	r0, #17
 800ec00:	f000 fa36 	bl	800f070 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800ec04:	2040      	movs	r0, #64	; 0x40
 800ec06:	f000 fa45 	bl	800f094 <SX1276Read>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	4619      	mov	r1, r3
 800ec14:	2040      	movs	r0, #64	; 0x40
 800ec16:	f000 fa2b 	bl	800f070 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	200f      	movs	r0, #15
 800ec1e:	f000 fa27 	bl	800f070 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ec22:	2100      	movs	r1, #0
 800ec24:	200d      	movs	r0, #13
 800ec26:	f000 fa23 	bl	800f070 <SX1276Write>
        }
        break;
 800ec2a:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800ec2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec30:	2100      	movs	r1, #0
 800ec32:	481c      	ldr	r0, [pc, #112]	; (800eca4 <SX1276SetRx+0x3cc>)
 800ec34:	f003 f98c 	bl	8011f50 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800ec38:	4b1b      	ldr	r3, [pc, #108]	; (800eca8 <SX1276SetRx+0x3d0>)
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    if( timeout != 0 )
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d006      	beq.n	800ec54 <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	4818      	ldr	r0, [pc, #96]	; (800ecac <SX1276SetRx+0x3d4>)
 800ec4a:	f001 fa45 	bl	80100d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800ec4e:	4817      	ldr	r0, [pc, #92]	; (800ecac <SX1276SetRx+0x3d4>)
 800ec50:	f001 f83e 	bl	800fcd0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800ec54:	4b14      	ldr	r3, [pc, #80]	; (800eca8 <SX1276SetRx+0x3d0>)
 800ec56:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d113      	bne.n	800ec86 <SX1276SetRx+0x3ae>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800ec5e:	2005      	movs	r0, #5
 800ec60:	f000 f988 	bl	800ef74 <SX1276SetOpMode>

        if( rxContinuous == false )
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	f083 0301 	eor.w	r3, r3, #1
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d014      	beq.n	800ec9a <SX1276SetRx+0x3c2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800ec70:	4b0d      	ldr	r3, [pc, #52]	; (800eca8 <SX1276SetRx+0x3d0>)
 800ec72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ec76:	4619      	mov	r1, r3
 800ec78:	480d      	ldr	r0, [pc, #52]	; (800ecb0 <SX1276SetRx+0x3d8>)
 800ec7a:	f001 fa2d 	bl	80100d8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800ec7e:	480c      	ldr	r0, [pc, #48]	; (800ecb0 <SX1276SetRx+0x3d8>)
 800ec80:	f001 f826 	bl	800fcd0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800ec84:	e009      	b.n	800ec9a <SX1276SetRx+0x3c2>
        if( rxContinuous == true )
 800ec86:	7bfb      	ldrb	r3, [r7, #15]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d003      	beq.n	800ec94 <SX1276SetRx+0x3bc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800ec8c:	2005      	movs	r0, #5
 800ec8e:	f000 f971 	bl	800ef74 <SX1276SetOpMode>
}
 800ec92:	e002      	b.n	800ec9a <SX1276SetRx+0x3c2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800ec94:	2006      	movs	r0, #6
 800ec96:	f000 f96d 	bl	800ef74 <SX1276SetOpMode>
}
 800ec9a:	bf00      	nop
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	200007bc 	.word	0x200007bc
 800eca8:	20001238 	.word	0x20001238
 800ecac:	20001378 	.word	0x20001378
 800ecb0:	20001224 	.word	0x20001224

0800ecb4 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	4837      	ldr	r0, [pc, #220]	; (800ed9c <SX1276SetTx+0xe8>)
 800ecc0:	f001 fa0a 	bl	80100d8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800ecc4:	4b36      	ldr	r3, [pc, #216]	; (800eda0 <SX1276SetTx+0xec>)
 800ecc6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <SX1276SetTx+0x20>
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d026      	beq.n	800ed20 <SX1276SetTx+0x6c>
 800ecd2:	e054      	b.n	800ed7e <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800ecd4:	2040      	movs	r0, #64	; 0x40
 800ecd6:	f000 f9dd 	bl	800f094 <SX1276Read>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800ecde:	f003 0303 	and.w	r3, r3, #3
 800ece2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 800ece4:	f043 0310 	orr.w	r3, r3, #16
 800ece8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	4619      	mov	r1, r3
 800ecee:	2040      	movs	r0, #64	; 0x40
 800ecf0:	f000 f9be 	bl	800f070 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800ecf4:	2041      	movs	r0, #65	; 0x41
 800ecf6:	f000 f9cd 	bl	800f094 <SX1276Read>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	4619      	mov	r1, r3
 800ed04:	2041      	movs	r0, #65	; 0x41
 800ed06:	f000 f9b3 	bl	800f070 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800ed0a:	2035      	movs	r0, #53	; 0x35
 800ed0c:	f000 f9c2 	bl	800f094 <SX1276Read>
 800ed10:	4603      	mov	r3, r0
 800ed12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	4b21      	ldr	r3, [pc, #132]	; (800eda0 <SX1276SetTx+0xec>)
 800ed1a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
        }
        break;
 800ed1e:	e02e      	b.n	800ed7e <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ed20:	4b1f      	ldr	r3, [pc, #124]	; (800eda0 <SX1276SetTx+0xec>)
 800ed22:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d014      	beq.n	800ed54 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ed2a:	21f5      	movs	r1, #245	; 0xf5
 800ed2c:	2011      	movs	r0, #17
 800ed2e:	f000 f99f 	bl	800f070 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800ed32:	2040      	movs	r0, #64	; 0x40
 800ed34:	f000 f9ae 	bl	800f094 <SX1276Read>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	b25b      	sxtb	r3, r3
 800ed3c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800ed40:	b25b      	sxtb	r3, r3
 800ed42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed46:	b25b      	sxtb	r3, r3
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	2040      	movs	r0, #64	; 0x40
 800ed4e:	f000 f98f 	bl	800f070 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800ed52:	e013      	b.n	800ed7c <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ed54:	21f7      	movs	r1, #247	; 0xf7
 800ed56:	2011      	movs	r0, #17
 800ed58:	f000 f98a 	bl	800f070 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800ed5c:	2040      	movs	r0, #64	; 0x40
 800ed5e:	f000 f999 	bl	800f094 <SX1276Read>
 800ed62:	4603      	mov	r3, r0
 800ed64:	b25b      	sxtb	r3, r3
 800ed66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed6a:	b25b      	sxtb	r3, r3
 800ed6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed70:	b25b      	sxtb	r3, r3
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	4619      	mov	r1, r3
 800ed76:	2040      	movs	r0, #64	; 0x40
 800ed78:	f000 f97a 	bl	800f070 <SX1276Write>
        break;
 800ed7c:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800ed7e:	4b08      	ldr	r3, [pc, #32]	; (800eda0 <SX1276SetTx+0xec>)
 800ed80:	2202      	movs	r2, #2
 800ed82:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800ed86:	4805      	ldr	r0, [pc, #20]	; (800ed9c <SX1276SetTx+0xe8>)
 800ed88:	f000 ffa2 	bl	800fcd0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800ed8c:	2003      	movs	r0, #3
 800ed8e:	f000 f8f1 	bl	800ef74 <SX1276SetOpMode>
}
 800ed92:	bf00      	nop
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20001210 	.word	0x20001210
 800eda0:	20001238 	.word	0x20001238

0800eda4 <SX1276StartCad>:

void SX1276StartCad( void )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800eda8:	4b10      	ldr	r3, [pc, #64]	; (800edec <SX1276StartCad+0x48>)
 800edaa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d019      	beq.n	800ede6 <SX1276StartCad+0x42>
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d000      	beq.n	800edb8 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800edb6:	e017      	b.n	800ede8 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800edb8:	21fa      	movs	r1, #250	; 0xfa
 800edba:	2011      	movs	r0, #17
 800edbc:	f000 f958 	bl	800f070 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800edc0:	2040      	movs	r0, #64	; 0x40
 800edc2:	f000 f967 	bl	800f094 <SX1276Read>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f023 0303 	bic.w	r3, r3, #3
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	4619      	mov	r1, r3
 800edd0:	2040      	movs	r0, #64	; 0x40
 800edd2:	f000 f94d 	bl	800f070 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800edd6:	4b05      	ldr	r3, [pc, #20]	; (800edec <SX1276StartCad+0x48>)
 800edd8:	2203      	movs	r2, #3
 800edda:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800edde:	2007      	movs	r0, #7
 800ede0:	f000 f8c8 	bl	800ef74 <SX1276SetOpMode>
        break;
 800ede4:	e000      	b.n	800ede8 <SX1276StartCad+0x44>
        break;
 800ede6:	bf00      	nop
    }
}
 800ede8:	bf00      	nop
 800edea:	bd80      	pop	{r7, pc}
 800edec:	20001238 	.word	0x20001238

0800edf0 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08e      	sub	sp, #56	; 0x38
 800edf4:	af0a      	add	r7, sp, #40	; 0x28
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
 800edfc:	4613      	mov	r3, r2
 800edfe:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800ee00:	883b      	ldrh	r3, [r7, #0]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7f1 fb0e 	bl	8000424 <__aeabi_i2d>
 800ee08:	f04f 0200 	mov.w	r2, #0
 800ee0c:	4b26      	ldr	r3, [pc, #152]	; (800eea8 <SX1276SetTxContinuousWave+0xb8>)
 800ee0e:	f7f1 fb73 	bl	80004f8 <__aeabi_dmul>
 800ee12:	4602      	mov	r2, r0
 800ee14:	460b      	mov	r3, r1
 800ee16:	4610      	mov	r0, r2
 800ee18:	4619      	mov	r1, r3
 800ee1a:	f7f1 fe2f 	bl	8000a7c <__aeabi_d2uiz>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7fe fdcc 	bl	800d9c0 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800ee28:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	9308      	str	r3, [sp, #32]
 800ee30:	2300      	movs	r3, #0
 800ee32:	9307      	str	r3, [sp, #28]
 800ee34:	2300      	movs	r3, #0
 800ee36:	9306      	str	r3, [sp, #24]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	9305      	str	r3, [sp, #20]
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	9304      	str	r3, [sp, #16]
 800ee40:	2300      	movs	r3, #0
 800ee42:	9303      	str	r3, [sp, #12]
 800ee44:	2305      	movs	r3, #5
 800ee46:	9302      	str	r3, [sp, #8]
 800ee48:	2300      	movs	r3, #0
 800ee4a:	9301      	str	r3, [sp, #4]
 800ee4c:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	2300      	movs	r3, #0
 800ee54:	2200      	movs	r2, #0
 800ee56:	2000      	movs	r0, #0
 800ee58:	f7ff f8fa 	bl	800e050 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800ee5c:	2031      	movs	r0, #49	; 0x31
 800ee5e:	f000 f919 	bl	800f094 <SX1276Read>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	2031      	movs	r0, #49	; 0x31
 800ee6e:	f000 f8ff 	bl	800f070 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800ee72:	21f0      	movs	r1, #240	; 0xf0
 800ee74:	2040      	movs	r0, #64	; 0x40
 800ee76:	f000 f8fb 	bl	800f070 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800ee7a:	21a0      	movs	r1, #160	; 0xa0
 800ee7c:	2041      	movs	r0, #65	; 0x41
 800ee7e:	f000 f8f7 	bl	800f070 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800ee82:	68f9      	ldr	r1, [r7, #12]
 800ee84:	4809      	ldr	r0, [pc, #36]	; (800eeac <SX1276SetTxContinuousWave+0xbc>)
 800ee86:	f001 f927 	bl	80100d8 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 800ee8a:	4b09      	ldr	r3, [pc, #36]	; (800eeb0 <SX1276SetTxContinuousWave+0xc0>)
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800ee92:	4806      	ldr	r0, [pc, #24]	; (800eeac <SX1276SetTxContinuousWave+0xbc>)
 800ee94:	f000 ff1c 	bl	800fcd0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800ee98:	2003      	movs	r0, #3
 800ee9a:	f000 f86b 	bl	800ef74 <SX1276SetOpMode>
}
 800ee9e:	bf00      	nop
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	408f4000 	.word	0x408f4000
 800eeac:	20001210 	.word	0x20001210
 800eeb0:	20001238 	.word	0x20001238

0800eeb4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	4603      	mov	r3, r0
 800eebc:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800eebe:	2300      	movs	r3, #0
 800eec0:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <SX1276ReadRssi+0x1a>
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d00b      	beq.n	800eee4 <SX1276ReadRssi+0x30>
 800eecc:	e022      	b.n	800ef14 <SX1276ReadRssi+0x60>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800eece:	2011      	movs	r0, #17
 800eed0:	f000 f8e0 	bl	800f094 <SX1276Read>
 800eed4:	4603      	mov	r3, r0
 800eed6:	085b      	lsrs	r3, r3, #1
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	425b      	negs	r3, r3
 800eede:	b29b      	uxth	r3, r3
 800eee0:	81fb      	strh	r3, [r7, #14]
        break;
 800eee2:	e01b      	b.n	800ef1c <SX1276ReadRssi+0x68>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800eee4:	4b10      	ldr	r3, [pc, #64]	; (800ef28 <SX1276ReadRssi+0x74>)
 800eee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eeea:	4a10      	ldr	r2, [pc, #64]	; (800ef2c <SX1276ReadRssi+0x78>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d908      	bls.n	800ef02 <SX1276ReadRssi+0x4e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800eef0:	201b      	movs	r0, #27
 800eef2:	f000 f8cf 	bl	800f094 <SX1276Read>
 800eef6:	4603      	mov	r3, r0
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b9d      	subs	r3, #157	; 0x9d
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800ef00:	e00c      	b.n	800ef1c <SX1276ReadRssi+0x68>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800ef02:	201b      	movs	r0, #27
 800ef04:	f000 f8c6 	bl	800f094 <SX1276Read>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	3ba4      	subs	r3, #164	; 0xa4
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	81fb      	strh	r3, [r7, #14]
        break;
 800ef12:	e003      	b.n	800ef1c <SX1276ReadRssi+0x68>
    default:
        rssi = -1;
 800ef14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef18:	81fb      	strh	r3, [r7, #14]
        break;
 800ef1a:	bf00      	nop
    }
    return rssi;
 800ef1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20001238 	.word	0x20001238
 800ef2c:	1f4add40 	.word	0x1f4add40

0800ef30 <SX1276Reset>:

void SX1276Reset( void )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800ef36:	2300      	movs	r3, #0
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	2300      	movs	r3, #0
 800ef40:	2201      	movs	r2, #1
 800ef42:	2103      	movs	r1, #3
 800ef44:	480a      	ldr	r0, [pc, #40]	; (800ef70 <SX1276Reset+0x40>)
 800ef46:	f7fd f84d 	bl	800bfe4 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800ef4a:	2001      	movs	r0, #1
 800ef4c:	f7fc fd35 	bl	800b9ba <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800ef50:	2301      	movs	r3, #1
 800ef52:	9301      	str	r3, [sp, #4]
 800ef54:	2300      	movs	r3, #0
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	2103      	movs	r1, #3
 800ef5e:	4804      	ldr	r0, [pc, #16]	; (800ef70 <SX1276Reset+0x40>)
 800ef60:	f7fd f840 	bl	800bfe4 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 800ef64:	2006      	movs	r0, #6
 800ef66:	f7fc fd28 	bl	800b9ba <DelayMs>
}
 800ef6a:	bf00      	nop
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	20001238 	.word	0x20001238

0800ef74 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d103      	bne.n	800ef8c <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 800ef84:	2001      	movs	r0, #1
 800ef86:	f7fe fc6d 	bl	800d864 <SX1276SetAntSwLowPower>
 800ef8a:	e006      	b.n	800ef9a <SX1276SetOpMode+0x26>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	f7fe fc69 	bl	800d864 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7fe fc8f 	bl	800d8b8 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	f000 f87a 	bl	800f094 <SX1276Read>
 800efa0:	4603      	mov	r3, r0
 800efa2:	b25b      	sxtb	r3, r3
 800efa4:	f023 0307 	bic.w	r3, r3, #7
 800efa8:	b25a      	sxtb	r2, r3
 800efaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efae:	4313      	orrs	r3, r2
 800efb0:	b25b      	sxtb	r3, r3
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	4619      	mov	r1, r3
 800efb6:	2001      	movs	r0, #1
 800efb8:	f000 f85a 	bl	800f070 <SX1276Write>
}
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	4603      	mov	r3, r0
 800efcc:	71fb      	strb	r3, [r7, #7]
    assert_param( ( SX1276.Spi.Spi.Instance != NULL ) );

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800efce:	2001      	movs	r0, #1
 800efd0:	f000 f860 	bl	800f094 <SX1276Read>
 800efd4:	4603      	mov	r3, r0
 800efd6:	b25b      	sxtb	r3, r3
 800efd8:	2b00      	cmp	r3, #0
 800efda:	da04      	bge.n	800efe6 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 800efdc:	4b23      	ldr	r3, [pc, #140]	; (800f06c <SX1276SetModem+0xa8>)
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800efe4:	e003      	b.n	800efee <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 800efe6:	4b21      	ldr	r3, [pc, #132]	; (800f06c <SX1276SetModem+0xa8>)
 800efe8:	2200      	movs	r2, #0
 800efea:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    }

    if( SX1276.Settings.Modem == modem )
 800efee:	4b1f      	ldr	r3, [pc, #124]	; (800f06c <SX1276SetModem+0xa8>)
 800eff0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800eff4:	79fa      	ldrb	r2, [r7, #7]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d034      	beq.n	800f064 <SX1276SetModem+0xa0>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 800effa:	4a1c      	ldr	r2, [pc, #112]	; (800f06c <SX1276SetModem+0xa8>)
 800effc:	79fb      	ldrb	r3, [r7, #7]
 800effe:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    switch( SX1276.Settings.Modem )
 800f002:	4b1a      	ldr	r3, [pc, #104]	; (800f06c <SX1276SetModem+0xa8>)
 800f004:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d015      	beq.n	800f038 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 800f00c:	f7ff fc34 	bl	800e878 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800f010:	2001      	movs	r0, #1
 800f012:	f000 f83f 	bl	800f094 <SX1276Read>
 800f016:	4603      	mov	r3, r0
 800f018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	4619      	mov	r1, r3
 800f020:	2001      	movs	r0, #1
 800f022:	f000 f825 	bl	800f070 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f026:	2100      	movs	r1, #0
 800f028:	2040      	movs	r0, #64	; 0x40
 800f02a:	f000 f821 	bl	800f070 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800f02e:	2130      	movs	r1, #48	; 0x30
 800f030:	2041      	movs	r0, #65	; 0x41
 800f032:	f000 f81d 	bl	800f070 <SX1276Write>
        break;
 800f036:	e016      	b.n	800f066 <SX1276SetModem+0xa2>
    case MODEM_LORA:
        SX1276SetSleep( );
 800f038:	f7ff fc1e 	bl	800e878 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800f03c:	2001      	movs	r0, #1
 800f03e:	f000 f829 	bl	800f094 <SX1276Read>
 800f042:	4603      	mov	r3, r0
 800f044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	4619      	mov	r1, r3
 800f04c:	2001      	movs	r0, #1
 800f04e:	f000 f80f 	bl	800f070 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f052:	2100      	movs	r1, #0
 800f054:	2040      	movs	r0, #64	; 0x40
 800f056:	f000 f80b 	bl	800f070 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800f05a:	2100      	movs	r1, #0
 800f05c:	2041      	movs	r0, #65	; 0x41
 800f05e:	f000 f807 	bl	800f070 <SX1276Write>
        break;
 800f062:	e000      	b.n	800f066 <SX1276SetModem+0xa2>
        return;
 800f064:	bf00      	nop
    }
}
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20001238 	.word	0x20001238

0800f070 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	4603      	mov	r3, r0
 800f078:	460a      	mov	r2, r1
 800f07a:	71fb      	strb	r3, [r7, #7]
 800f07c:	4613      	mov	r3, r2
 800f07e:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800f080:	1db9      	adds	r1, r7, #6
 800f082:	79fb      	ldrb	r3, [r7, #7]
 800f084:	2201      	movs	r2, #1
 800f086:	4618      	mov	r0, r3
 800f088:	f000 f816 	bl	800f0b8 <SX1276WriteBuffer>
}
 800f08c:	bf00      	nop
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800f09e:	f107 010f 	add.w	r1, r7, #15
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f000 f83a 	bl	800f120 <SX1276ReadBuffer>
    return data;
 800f0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3710      	adds	r7, #16
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	71fb      	strb	r3, [r7, #7]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	4813      	ldr	r0, [pc, #76]	; (800f118 <SX1276WriteBuffer+0x60>)
 800f0cc:	f7fc ffc9 	bl	800c062 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 800f0d0:	79fb      	ldrb	r3, [r7, #7]
 800f0d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	4619      	mov	r1, r3
 800f0dc:	480f      	ldr	r0, [pc, #60]	; (800f11c <SX1276WriteBuffer+0x64>)
 800f0de:	f7fe f917 	bl	800d310 <SpiInOut>
    for( i = 0; i < size; i++ )
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]
 800f0e6:	e00b      	b.n	800f100 <SX1276WriteBuffer+0x48>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ea:	683a      	ldr	r2, [r7, #0]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4809      	ldr	r0, [pc, #36]	; (800f11c <SX1276WriteBuffer+0x64>)
 800f0f6:	f7fe f90b 	bl	800d310 <SpiInOut>
    for( i = 0; i < size; i++ )
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	73fb      	strb	r3, [r7, #15]
 800f100:	7bfa      	ldrb	r2, [r7, #15]
 800f102:	79bb      	ldrb	r3, [r7, #6]
 800f104:	429a      	cmp	r2, r3
 800f106:	d3ef      	bcc.n	800f0e8 <SX1276WriteBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f108:	2101      	movs	r1, #1
 800f10a:	4803      	ldr	r0, [pc, #12]	; (800f118 <SX1276WriteBuffer+0x60>)
 800f10c:	f7fc ffa9 	bl	800c062 <GpioWrite>
}
 800f110:	bf00      	nop
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20001308 	.word	0x20001308
 800f11c:	2000128c 	.word	0x2000128c

0800f120 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	4603      	mov	r3, r0
 800f128:	6039      	str	r1, [r7, #0]
 800f12a:	71fb      	strb	r3, [r7, #7]
 800f12c:	4613      	mov	r3, r2
 800f12e:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f130:	2100      	movs	r1, #0
 800f132:	4814      	ldr	r0, [pc, #80]	; (800f184 <SX1276ReadBuffer+0x64>)
 800f134:	f7fc ff95 	bl	800c062 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f140:	b29b      	uxth	r3, r3
 800f142:	4619      	mov	r1, r3
 800f144:	4810      	ldr	r0, [pc, #64]	; (800f188 <SX1276ReadBuffer+0x68>)
 800f146:	f7fe f8e3 	bl	800d310 <SpiInOut>

    for( i = 0; i < size; i++ )
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]
 800f14e:	e00d      	b.n	800f16c <SX1276ReadBuffer+0x4c>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 800f150:	2100      	movs	r1, #0
 800f152:	480d      	ldr	r0, [pc, #52]	; (800f188 <SX1276ReadBuffer+0x68>)
 800f154:	f7fe f8dc 	bl	800d310 <SpiInOut>
 800f158:	4603      	mov	r3, r0
 800f15a:	4619      	mov	r1, r3
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	4413      	add	r3, r2
 800f162:	b2ca      	uxtb	r2, r1
 800f164:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800f166:	7bfb      	ldrb	r3, [r7, #15]
 800f168:	3301      	adds	r3, #1
 800f16a:	73fb      	strb	r3, [r7, #15]
 800f16c:	7bfa      	ldrb	r2, [r7, #15]
 800f16e:	79bb      	ldrb	r3, [r7, #6]
 800f170:	429a      	cmp	r2, r3
 800f172:	d3ed      	bcc.n	800f150 <SX1276ReadBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f174:	2101      	movs	r1, #1
 800f176:	4803      	ldr	r0, [pc, #12]	; (800f184 <SX1276ReadBuffer+0x64>)
 800f178:	f7fc ff73 	bl	800c062 <GpioWrite>
}
 800f17c:	bf00      	nop
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20001308 	.word	0x20001308
 800f188:	2000128c 	.word	0x2000128c

0800f18c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800f198:	78fb      	ldrb	r3, [r7, #3]
 800f19a:	461a      	mov	r2, r3
 800f19c:	6879      	ldr	r1, [r7, #4]
 800f19e:	2000      	movs	r0, #0
 800f1a0:	f7ff ff8a 	bl	800f0b8 <SX1276WriteBuffer>
}
 800f1a4:	bf00      	nop
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800f1b8:	78fb      	ldrb	r3, [r7, #3]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	2000      	movs	r0, #0
 800f1c0:	f7ff ffae 	bl	800f120 <SX1276ReadBuffer>
}
 800f1c4:	bf00      	nop
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	460a      	mov	r2, r1
 800f1d6:	71fb      	strb	r3, [r7, #7]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800f1dc:	79fb      	ldrb	r3, [r7, #7]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff fef0 	bl	800efc4 <SX1276SetModem>

    switch( modem )
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <SX1276SetMaxPayloadLength+0x24>
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d00e      	beq.n	800f20c <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800f1ee:	e014      	b.n	800f21a <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 800f1f0:	4b0c      	ldr	r3, [pc, #48]	; (800f224 <SX1276SetMaxPayloadLength+0x58>)
 800f1f2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f1f6:	f083 0301 	eor.w	r3, r3, #1
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00b      	beq.n	800f218 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800f200:	79bb      	ldrb	r3, [r7, #6]
 800f202:	4619      	mov	r1, r3
 800f204:	2032      	movs	r0, #50	; 0x32
 800f206:	f7ff ff33 	bl	800f070 <SX1276Write>
        break;
 800f20a:	e005      	b.n	800f218 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800f20c:	79bb      	ldrb	r3, [r7, #6]
 800f20e:	4619      	mov	r1, r3
 800f210:	2023      	movs	r0, #35	; 0x23
 800f212:	f7ff ff2d 	bl	800f070 <SX1276Write>
        break;
 800f216:	e000      	b.n	800f21a <SX1276SetMaxPayloadLength+0x4e>
        break;
 800f218:	bf00      	nop
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20001238 	.word	0x20001238

0800f228 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 800f232:	2001      	movs	r0, #1
 800f234:	f7ff fec6 	bl	800efc4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800f238:	4a09      	ldr	r2, [pc, #36]	; (800f260 <SX1276SetPublicNetwork+0x38>)
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	f882 3134 	strb.w	r3, [r2, #308]	; 0x134
    if( enable == true )
 800f240:	79fb      	ldrb	r3, [r7, #7]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d004      	beq.n	800f250 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800f246:	2134      	movs	r1, #52	; 0x34
 800f248:	2039      	movs	r0, #57	; 0x39
 800f24a:	f7ff ff11 	bl	800f070 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 800f24e:	e003      	b.n	800f258 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800f250:	2112      	movs	r1, #18
 800f252:	2039      	movs	r0, #57	; 0x39
 800f254:	f7ff ff0c 	bl	800f070 <SX1276Write>
}
 800f258:	bf00      	nop
 800f25a:	3708      	adds	r7, #8
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	20001238 	.word	0x20001238

0800f264 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 800f264:	b480      	push	{r7}
 800f266:	af00      	add	r7, sp, #0
    return  RADIO_WAKEUP_TIME;
 800f268:	2301      	movs	r3, #1
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bc80      	pop	{r7}
 800f270:	4770      	bx	lr
	...

0800f274 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800f27a:	4b4e      	ldr	r3, [pc, #312]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f27c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f280:	2b01      	cmp	r3, #1
 800f282:	d002      	beq.n	800f28a <SX1276OnTimeoutIrq+0x16>
 800f284:	2b02      	cmp	r3, #2
 800f286:	d046      	beq.n	800f316 <SX1276OnTimeoutIrq+0xa2>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800f288:	e090      	b.n	800f3ac <SX1276OnTimeoutIrq+0x138>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800f28a:	4b4a      	ldr	r3, [pc, #296]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f28c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f290:	2b00      	cmp	r3, #0
 800f292:	d132      	bne.n	800f2fa <SX1276OnTimeoutIrq+0x86>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f294:	4b47      	ldr	r3, [pc, #284]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f296:	2200      	movs	r2, #0
 800f298:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f29c:	4b45      	ldr	r3, [pc, #276]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f2a4:	4b43      	ldr	r3, [pc, #268]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f2ac:	4b41      	ldr	r3, [pc, #260]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800f2b4:	210b      	movs	r1, #11
 800f2b6:	203e      	movs	r0, #62	; 0x3e
 800f2b8:	f7ff feda 	bl	800f070 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800f2bc:	2110      	movs	r1, #16
 800f2be:	203f      	movs	r0, #63	; 0x3f
 800f2c0:	f7ff fed6 	bl	800f070 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800f2c4:	4b3b      	ldr	r3, [pc, #236]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f2c6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00e      	beq.n	800f2ec <SX1276OnTimeoutIrq+0x78>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f2ce:	200d      	movs	r0, #13
 800f2d0:	f7ff fee0 	bl	800f094 <SX1276Read>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	4619      	mov	r1, r3
 800f2de:	200d      	movs	r0, #13
 800f2e0:	f7ff fec6 	bl	800f070 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800f2e4:	4834      	ldr	r0, [pc, #208]	; (800f3b8 <SX1276OnTimeoutIrq+0x144>)
 800f2e6:	f000 fcf3 	bl	800fcd0 <TimerStart>
 800f2ea:	e006      	b.n	800f2fa <SX1276OnTimeoutIrq+0x86>
                SX1276.Settings.State = RF_IDLE;
 800f2ec:	4b31      	ldr	r3, [pc, #196]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                TimerStop( &RxTimeoutSyncWord );
 800f2f4:	4830      	ldr	r0, [pc, #192]	; (800f3b8 <SX1276OnTimeoutIrq+0x144>)
 800f2f6:	f000 fe33 	bl	800ff60 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f2fa:	4b30      	ldr	r3, [pc, #192]	; (800f3bc <SX1276OnTimeoutIrq+0x148>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d051      	beq.n	800f3a6 <SX1276OnTimeoutIrq+0x132>
 800f302:	4b2e      	ldr	r3, [pc, #184]	; (800f3bc <SX1276OnTimeoutIrq+0x148>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d04c      	beq.n	800f3a6 <SX1276OnTimeoutIrq+0x132>
            RadioEvents->RxTimeout( );
 800f30c:	4b2b      	ldr	r3, [pc, #172]	; (800f3bc <SX1276OnTimeoutIrq+0x148>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	4798      	blx	r3
        break;
 800f314:	e047      	b.n	800f3a6 <SX1276OnTimeoutIrq+0x132>
        SX1276Reset( );
 800f316:	f7ff fe0b 	bl	800ef30 <SX1276Reset>
        RxChainCalibration( );
 800f31a:	f7fe fbe1 	bl	800dae0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f31e:	2000      	movs	r0, #0
 800f320:	f7ff fe28 	bl	800ef74 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800f324:	2300      	movs	r3, #0
 800f326:	71fb      	strb	r3, [r7, #7]
 800f328:	e01f      	b.n	800f36a <SX1276OnTimeoutIrq+0xf6>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800f32a:	79fa      	ldrb	r2, [r7, #7]
 800f32c:	4924      	ldr	r1, [pc, #144]	; (800f3c0 <SX1276OnTimeoutIrq+0x14c>)
 800f32e:	4613      	mov	r3, r2
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4413      	add	r3, r2
 800f334:	440b      	add	r3, r1
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff fe43 	bl	800efc4 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800f33e:	79fa      	ldrb	r2, [r7, #7]
 800f340:	491f      	ldr	r1, [pc, #124]	; (800f3c0 <SX1276OnTimeoutIrq+0x14c>)
 800f342:	4613      	mov	r3, r2
 800f344:	005b      	lsls	r3, r3, #1
 800f346:	4413      	add	r3, r2
 800f348:	440b      	add	r3, r1
 800f34a:	3301      	adds	r3, #1
 800f34c:	7818      	ldrb	r0, [r3, #0]
 800f34e:	79fa      	ldrb	r2, [r7, #7]
 800f350:	491b      	ldr	r1, [pc, #108]	; (800f3c0 <SX1276OnTimeoutIrq+0x14c>)
 800f352:	4613      	mov	r3, r2
 800f354:	005b      	lsls	r3, r3, #1
 800f356:	4413      	add	r3, r2
 800f358:	440b      	add	r3, r1
 800f35a:	3302      	adds	r3, #2
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	4619      	mov	r1, r3
 800f360:	f7ff fe86 	bl	800f070 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800f364:	79fb      	ldrb	r3, [r7, #7]
 800f366:	3301      	adds	r3, #1
 800f368:	71fb      	strb	r3, [r7, #7]
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	2b0f      	cmp	r3, #15
 800f36e:	d9dc      	bls.n	800f32a <SX1276OnTimeoutIrq+0xb6>
        SX1276SetModem( MODEM_FSK );
 800f370:	2000      	movs	r0, #0
 800f372:	f7ff fe27 	bl	800efc4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800f376:	4b0f      	ldr	r3, [pc, #60]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f378:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff ff53 	bl	800f228 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800f382:	4b0c      	ldr	r3, [pc, #48]	; (800f3b4 <SX1276OnTimeoutIrq+0x140>)
 800f384:	2200      	movs	r2, #0
 800f386:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f38a:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <SX1276OnTimeoutIrq+0x148>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d00b      	beq.n	800f3aa <SX1276OnTimeoutIrq+0x136>
 800f392:	4b0a      	ldr	r3, [pc, #40]	; (800f3bc <SX1276OnTimeoutIrq+0x148>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d006      	beq.n	800f3aa <SX1276OnTimeoutIrq+0x136>
            RadioEvents->TxTimeout( );
 800f39c:	4b07      	ldr	r3, [pc, #28]	; (800f3bc <SX1276OnTimeoutIrq+0x148>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	4798      	blx	r3
        break;
 800f3a4:	e001      	b.n	800f3aa <SX1276OnTimeoutIrq+0x136>
        break;
 800f3a6:	bf00      	nop
 800f3a8:	e000      	b.n	800f3ac <SX1276OnTimeoutIrq+0x138>
        break;
 800f3aa:	bf00      	nop
    }
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	20001238 	.word	0x20001238
 800f3b8:	20001224 	.word	0x20001224
 800f3bc:	200007b8 	.word	0x200007b8
 800f3c0:	080127f4 	.word	0x080127f4

0800f3c4 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 800f3c4:	b590      	push	{r4, r7, lr}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	70fb      	strb	r3, [r7, #3]
	//DebugPrintf("0");
    switch( SX1276.Settings.State )
 800f3ce:	4ba9      	ldr	r3, [pc, #676]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f3d0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d003      	beq.n	800f3e0 <SX1276OnDio0Irq+0x1c>
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	f000 81f4 	beq.w	800f7c6 <SX1276OnDio0Irq+0x402>
                }
                break;
            }
            break;
        default:
            break;
 800f3de:	e211      	b.n	800f804 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 800f3e0:	4ba4      	ldr	r3, [pc, #656]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f3e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d003      	beq.n	800f3f2 <SX1276OnDio0Irq+0x2e>
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	f000 80f2 	beq.w	800f5d4 <SX1276OnDio0Irq+0x210>
                break;
 800f3f0:	e1e8      	b.n	800f7c4 <SX1276OnDio0Irq+0x400>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800f3f2:	4ba0      	ldr	r3, [pc, #640]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f3f4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d051      	beq.n	800f4a0 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800f3fc:	203f      	movs	r0, #63	; 0x3f
 800f3fe:	f7ff fe49 	bl	800f094 <SX1276Read>
 800f402:	4603      	mov	r3, r0
 800f404:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800f406:	78fb      	ldrb	r3, [r7, #3]
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	f003 0302 	and.w	r3, r3, #2
 800f40e:	2b02      	cmp	r3, #2
 800f410:	d046      	beq.n	800f4a0 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800f412:	210b      	movs	r1, #11
 800f414:	203e      	movs	r0, #62	; 0x3e
 800f416:	f7ff fe2b 	bl	800f070 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800f41a:	2110      	movs	r1, #16
 800f41c:	203f      	movs	r0, #63	; 0x3f
 800f41e:	f7ff fe27 	bl	800f070 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800f422:	4895      	ldr	r0, [pc, #596]	; (800f678 <SX1276OnDio0Irq+0x2b4>)
 800f424:	f000 fd9c 	bl	800ff60 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800f428:	4b92      	ldr	r3, [pc, #584]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f42a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f42e:	f083 0301 	eor.w	r3, r3, #1
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d007      	beq.n	800f448 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 800f438:	4890      	ldr	r0, [pc, #576]	; (800f67c <SX1276OnDio0Irq+0x2b8>)
 800f43a:	f000 fd91 	bl	800ff60 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800f43e:	4b8d      	ldr	r3, [pc, #564]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f440:	2200      	movs	r2, #0
 800f442:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800f446:	e00d      	b.n	800f464 <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f448:	200d      	movs	r0, #13
 800f44a:	f7ff fe23 	bl	800f094 <SX1276Read>
 800f44e:	4603      	mov	r3, r0
 800f450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f454:	b2db      	uxtb	r3, r3
 800f456:	4619      	mov	r1, r3
 800f458:	200d      	movs	r0, #13
 800f45a:	f7ff fe09 	bl	800f070 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800f45e:	4887      	ldr	r0, [pc, #540]	; (800f67c <SX1276OnDio0Irq+0x2b8>)
 800f460:	f000 fc36 	bl	800fcd0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800f464:	4b86      	ldr	r3, [pc, #536]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d008      	beq.n	800f47e <SX1276OnDio0Irq+0xba>
 800f46c:	4b84      	ldr	r3, [pc, #528]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d003      	beq.n	800f47e <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 800f476:	4b82      	ldr	r3, [pc, #520]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f47e:	4b7d      	ldr	r3, [pc, #500]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f486:	4b7b      	ldr	r3, [pc, #492]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f48e:	4b79      	ldr	r3, [pc, #484]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f490:	2200      	movs	r2, #0
 800f492:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800f496:	4b77      	ldr	r3, [pc, #476]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f498:	2200      	movs	r2, #0
 800f49a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                        break;
 800f49e:	e191      	b.n	800f7c4 <SX1276OnDio0Irq+0x400>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800f4a0:	4b74      	ldr	r3, [pc, #464]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4a2:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d133      	bne.n	800f512 <SX1276OnDio0Irq+0x14e>
 800f4aa:	4b72      	ldr	r3, [pc, #456]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4ac:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d12e      	bne.n	800f512 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800f4b4:	4b6f      	ldr	r3, [pc, #444]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4b6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f4ba:	f083 0301 	eor.w	r3, r3, #1
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d004      	beq.n	800f4ce <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800f4c4:	2101      	movs	r1, #1
 800f4c6:	486f      	ldr	r0, [pc, #444]	; (800f684 <SX1276OnDio0Irq+0x2c0>)
 800f4c8:	f7ff fe70 	bl	800f1ac <SX1276ReadFifo>
 800f4cc:	e007      	b.n	800f4de <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800f4ce:	2032      	movs	r0, #50	; 0x32
 800f4d0:	f7ff fde0 	bl	800f094 <SX1276Read>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	4b66      	ldr	r3, [pc, #408]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4da:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f4de:	4b65      	ldr	r3, [pc, #404]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4e0:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	4b68      	ldr	r3, [pc, #416]	; (800f688 <SX1276OnDio0Irq+0x2c4>)
 800f4e8:	18d0      	adds	r0, r2, r3
 800f4ea:	4b62      	ldr	r3, [pc, #392]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4ec:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	4b60      	ldr	r3, [pc, #384]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f4f4:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	1ad3      	subs	r3, r2, r3
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	4619      	mov	r1, r3
 800f500:	f7ff fe54 	bl	800f1ac <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f504:	4b5b      	ldr	r3, [pc, #364]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f506:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800f50a:	4b5a      	ldr	r3, [pc, #360]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f50c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800f510:	e018      	b.n	800f544 <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f512:	4b58      	ldr	r3, [pc, #352]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f514:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f518:	461a      	mov	r2, r3
 800f51a:	4b5b      	ldr	r3, [pc, #364]	; (800f688 <SX1276OnDio0Irq+0x2c4>)
 800f51c:	18d0      	adds	r0, r2, r3
 800f51e:	4b55      	ldr	r3, [pc, #340]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f520:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f524:	b2da      	uxtb	r2, r3
 800f526:	4b53      	ldr	r3, [pc, #332]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f528:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	b2db      	uxtb	r3, r3
 800f532:	4619      	mov	r1, r3
 800f534:	f7ff fe3a 	bl	800f1ac <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f538:	4b4e      	ldr	r3, [pc, #312]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f53a:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800f53e:	4b4d      	ldr	r3, [pc, #308]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f540:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                TimerStop( &RxTimeoutTimer );
 800f544:	484c      	ldr	r0, [pc, #304]	; (800f678 <SX1276OnDio0Irq+0x2b4>)
 800f546:	f000 fd0b 	bl	800ff60 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800f54a:	4b4a      	ldr	r3, [pc, #296]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f54c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f550:	f083 0301 	eor.w	r3, r3, #1
 800f554:	b2db      	uxtb	r3, r3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d007      	beq.n	800f56a <SX1276OnDio0Irq+0x1a6>
                    SX1276.Settings.State = RF_IDLE;
 800f55a:	4b46      	ldr	r3, [pc, #280]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutSyncWord );
 800f562:	4846      	ldr	r0, [pc, #280]	; (800f67c <SX1276OnDio0Irq+0x2b8>)
 800f564:	f000 fcfc 	bl	800ff60 <TimerStop>
 800f568:	e00d      	b.n	800f586 <SX1276OnDio0Irq+0x1c2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f56a:	200d      	movs	r0, #13
 800f56c:	f7ff fd92 	bl	800f094 <SX1276Read>
 800f570:	4603      	mov	r3, r0
 800f572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f576:	b2db      	uxtb	r3, r3
 800f578:	4619      	mov	r1, r3
 800f57a:	200d      	movs	r0, #13
 800f57c:	f7ff fd78 	bl	800f070 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800f580:	483e      	ldr	r0, [pc, #248]	; (800f67c <SX1276OnDio0Irq+0x2b8>)
 800f582:	f000 fba5 	bl	800fcd0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f586:	4b3e      	ldr	r3, [pc, #248]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d011      	beq.n	800f5b2 <SX1276OnDio0Irq+0x1ee>
 800f58e:	4b3c      	ldr	r3, [pc, #240]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00c      	beq.n	800f5b2 <SX1276OnDio0Irq+0x1ee>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800f598:	4b39      	ldr	r3, [pc, #228]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	689c      	ldr	r4, [r3, #8]
 800f59e:	4b35      	ldr	r3, [pc, #212]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f5a0:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800f5a4:	4b33      	ldr	r3, [pc, #204]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f5a6:	f993 310a 	ldrsb.w	r3, [r3, #266]	; 0x10a
 800f5aa:	b21a      	sxth	r2, r3
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	4836      	ldr	r0, [pc, #216]	; (800f688 <SX1276OnDio0Irq+0x2c4>)
 800f5b0:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f5b2:	4b30      	ldr	r3, [pc, #192]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f5ba:	4b2e      	ldr	r3, [pc, #184]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f5c2:	4b2c      	ldr	r3, [pc, #176]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                SX1276.Settings.FskPacketHandler.Size = 0;
 800f5ca:	4b2a      	ldr	r3, [pc, #168]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                break;
 800f5d2:	e0f7      	b.n	800f7c4 <SX1276OnDio0Irq+0x400>
                    int8_t snr = 0;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800f5d8:	2140      	movs	r1, #64	; 0x40
 800f5da:	2012      	movs	r0, #18
 800f5dc:	f7ff fd48 	bl	800f070 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800f5e0:	2012      	movs	r0, #18
 800f5e2:	f7ff fd57 	bl	800f094 <SX1276Read>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800f5ea:	78fb      	ldrb	r3, [r7, #3]
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	f003 0320 	and.w	r3, r3, #32
 800f5f2:	2b20      	cmp	r3, #32
 800f5f4:	d122      	bne.n	800f63c <SX1276OnDio0Irq+0x278>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800f5f6:	2120      	movs	r1, #32
 800f5f8:	2012      	movs	r0, #18
 800f5fa:	f7ff fd39 	bl	800f070 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800f5fe:	4b1d      	ldr	r3, [pc, #116]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f600:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800f604:	f083 0301 	eor.w	r3, r3, #1
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <SX1276OnDio0Irq+0x252>
                            SX1276.Settings.State = RF_IDLE;
 800f60e:	4b19      	ldr	r3, [pc, #100]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f610:	2200      	movs	r2, #0
 800f612:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                        TimerStop( &RxTimeoutTimer );
 800f616:	4818      	ldr	r0, [pc, #96]	; (800f678 <SX1276OnDio0Irq+0x2b4>)
 800f618:	f000 fca2 	bl	800ff60 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800f61c:	4b18      	ldr	r3, [pc, #96]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	f000 80cc 	beq.w	800f7be <SX1276OnDio0Irq+0x3fa>
 800f626:	4b16      	ldr	r3, [pc, #88]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f000 80c6 	beq.w	800f7be <SX1276OnDio0Irq+0x3fa>
                            RadioEvents->RxError( );
 800f632:	4b13      	ldr	r3, [pc, #76]	; (800f680 <SX1276OnDio0Irq+0x2bc>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	4798      	blx	r3
                        break;
 800f63a:	e0c0      	b.n	800f7be <SX1276OnDio0Irq+0x3fa>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800f63c:	2019      	movs	r0, #25
 800f63e:	f7ff fd29 	bl	800f094 <SX1276Read>
 800f642:	4603      	mov	r3, r0
 800f644:	b25a      	sxtb	r2, r3
 800f646:	4b0b      	ldr	r3, [pc, #44]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f648:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800f64c:	4b09      	ldr	r3, [pc, #36]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f64e:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800f652:	2b00      	cmp	r3, #0
 800f654:	da1a      	bge.n	800f68c <SX1276OnDio0Irq+0x2c8>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800f656:	4b07      	ldr	r3, [pc, #28]	; (800f674 <SX1276OnDio0Irq+0x2b0>)
 800f658:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800f65c:	425b      	negs	r3, r3
 800f65e:	109b      	asrs	r3, r3, #2
 800f660:	b25b      	sxtb	r3, r3
 800f662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f666:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	425b      	negs	r3, r3
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	71fb      	strb	r3, [r7, #7]
 800f670:	e014      	b.n	800f69c <SX1276OnDio0Irq+0x2d8>
 800f672:	bf00      	nop
 800f674:	20001238 	.word	0x20001238
 800f678:	20001378 	.word	0x20001378
 800f67c:	20001224 	.word	0x20001224
 800f680:	200007b8 	.word	0x200007b8
 800f684:	2000134a 	.word	0x2000134a
 800f688:	200007bc 	.word	0x200007bc
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800f68c:	4b5f      	ldr	r3, [pc, #380]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f68e:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800f692:	109b      	asrs	r3, r3, #2
 800f694:	b25b      	sxtb	r3, r3
 800f696:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f69a:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800f69c:	201a      	movs	r0, #26
 800f69e:	f7ff fcf9 	bl	800f094 <SX1276Read>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800f6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	da2d      	bge.n	800f70a <SX1276OnDio0Irq+0x346>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f6ae:	4b57      	ldr	r3, [pc, #348]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f6b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f6b4:	4a56      	ldr	r2, [pc, #344]	; (800f810 <SX1276OnDio0Irq+0x44c>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d913      	bls.n	800f6e2 <SX1276OnDio0Irq+0x31e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800f6ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f6be:	111b      	asrs	r3, r3, #4
 800f6c0:	b21b      	sxth	r3, r3
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	88bb      	ldrh	r3, [r7, #4]
 800f6c6:	4413      	add	r3, r2
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	4413      	add	r3, r2
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	3b9d      	subs	r3, #157	; 0x9d
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	b21a      	sxth	r2, r3
 800f6da:	4b4c      	ldr	r3, [pc, #304]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f6dc:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800f6e0:	e036      	b.n	800f750 <SX1276OnDio0Irq+0x38c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800f6e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f6e6:	111b      	asrs	r3, r3, #4
 800f6e8:	b21b      	sxth	r3, r3
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	88bb      	ldrh	r3, [r7, #4]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	4413      	add	r3, r2
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	3ba4      	subs	r3, #164	; 0xa4
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	b21a      	sxth	r2, r3
 800f702:	4b42      	ldr	r3, [pc, #264]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f704:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800f708:	e022      	b.n	800f750 <SX1276OnDio0Irq+0x38c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f70a:	4b40      	ldr	r3, [pc, #256]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f70c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f710:	4a3f      	ldr	r2, [pc, #252]	; (800f810 <SX1276OnDio0Irq+0x44c>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d90e      	bls.n	800f734 <SX1276OnDio0Irq+0x370>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800f716:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f71a:	111b      	asrs	r3, r3, #4
 800f71c:	b21b      	sxth	r3, r3
 800f71e:	b29a      	uxth	r2, r3
 800f720:	88bb      	ldrh	r3, [r7, #4]
 800f722:	4413      	add	r3, r2
 800f724:	b29b      	uxth	r3, r3
 800f726:	3b9d      	subs	r3, #157	; 0x9d
 800f728:	b29b      	uxth	r3, r3
 800f72a:	b21a      	sxth	r2, r3
 800f72c:	4b37      	ldr	r3, [pc, #220]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f72e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800f732:	e00d      	b.n	800f750 <SX1276OnDio0Irq+0x38c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800f734:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800f738:	111b      	asrs	r3, r3, #4
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	88bb      	ldrh	r3, [r7, #4]
 800f740:	4413      	add	r3, r2
 800f742:	b29b      	uxth	r3, r3
 800f744:	3ba4      	subs	r3, #164	; 0xa4
 800f746:	b29b      	uxth	r3, r3
 800f748:	b21a      	sxth	r2, r3
 800f74a:	4b30      	ldr	r3, [pc, #192]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f74c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800f750:	2013      	movs	r0, #19
 800f752:	f7ff fc9f 	bl	800f094 <SX1276Read>
 800f756:	4603      	mov	r3, r0
 800f758:	461a      	mov	r2, r3
 800f75a:	4b2c      	ldr	r3, [pc, #176]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f75c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800f760:	4b2a      	ldr	r3, [pc, #168]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f762:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800f766:	4619      	mov	r1, r3
 800f768:	482a      	ldr	r0, [pc, #168]	; (800f814 <SX1276OnDio0Irq+0x450>)
 800f76a:	f7ff fd1f 	bl	800f1ac <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800f76e:	4b27      	ldr	r3, [pc, #156]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f770:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800f774:	f083 0301 	eor.w	r3, r3, #1
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <SX1276OnDio0Irq+0x3c2>
                        SX1276.Settings.State = RF_IDLE;
 800f77e:	4b23      	ldr	r3, [pc, #140]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f780:	2200      	movs	r2, #0
 800f782:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutTimer );
 800f786:	4824      	ldr	r0, [pc, #144]	; (800f818 <SX1276OnDio0Irq+0x454>)
 800f788:	f000 fbea 	bl	800ff60 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f78c:	4b23      	ldr	r3, [pc, #140]	; (800f81c <SX1276OnDio0Irq+0x458>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d016      	beq.n	800f7c2 <SX1276OnDio0Irq+0x3fe>
 800f794:	4b21      	ldr	r3, [pc, #132]	; (800f81c <SX1276OnDio0Irq+0x458>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	689b      	ldr	r3, [r3, #8]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d011      	beq.n	800f7c2 <SX1276OnDio0Irq+0x3fe>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800f79e:	4b1f      	ldr	r3, [pc, #124]	; (800f81c <SX1276OnDio0Irq+0x458>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	689c      	ldr	r4, [r3, #8]
 800f7a4:	4b19      	ldr	r3, [pc, #100]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f7a6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800f7aa:	b299      	uxth	r1, r3
 800f7ac:	4b17      	ldr	r3, [pc, #92]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f7ae:	f9b3 213a 	ldrsh.w	r2, [r3, #314]	; 0x13a
 800f7b2:	4b16      	ldr	r3, [pc, #88]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f7b4:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800f7b8:	4816      	ldr	r0, [pc, #88]	; (800f814 <SX1276OnDio0Irq+0x450>)
 800f7ba:	47a0      	blx	r4
                break;
 800f7bc:	e001      	b.n	800f7c2 <SX1276OnDio0Irq+0x3fe>
                        break;
 800f7be:	bf00      	nop
 800f7c0:	e020      	b.n	800f804 <SX1276OnDio0Irq+0x440>
                break;
 800f7c2:	bf00      	nop
            break;
 800f7c4:	e01e      	b.n	800f804 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 800f7c6:	4816      	ldr	r0, [pc, #88]	; (800f820 <SX1276OnDio0Irq+0x45c>)
 800f7c8:	f000 fbca 	bl	800ff60 <TimerStop>
            switch( SX1276.Settings.Modem )
 800f7cc:	4b0f      	ldr	r3, [pc, #60]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f7ce:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d103      	bne.n	800f7de <SX1276OnDio0Irq+0x41a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800f7d6:	2108      	movs	r1, #8
 800f7d8:	2012      	movs	r0, #18
 800f7da:	f7ff fc49 	bl	800f070 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800f7de:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <SX1276OnDio0Irq+0x448>)
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800f7e6:	4b0d      	ldr	r3, [pc, #52]	; (800f81c <SX1276OnDio0Irq+0x458>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d008      	beq.n	800f800 <SX1276OnDio0Irq+0x43c>
 800f7ee:	4b0b      	ldr	r3, [pc, #44]	; (800f81c <SX1276OnDio0Irq+0x458>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d003      	beq.n	800f800 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 800f7f8:	4b08      	ldr	r3, [pc, #32]	; (800f81c <SX1276OnDio0Irq+0x458>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4798      	blx	r3
                break;
 800f800:	bf00      	nop
            break;
 800f802:	bf00      	nop
    }
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd90      	pop	{r4, r7, pc}
 800f80c:	20001238 	.word	0x20001238
 800f810:	1f4add40 	.word	0x1f4add40
 800f814:	200007bc 	.word	0x200007bc
 800f818:	20001378 	.word	0x20001378
 800f81c:	200007b8 	.word	0x200007b8
 800f820:	20001210 	.word	0x20001210

0800f824 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	af00      	add	r7, sp, #0
	//DebugPrintf("1");
    switch( SX1276.Settings.State )
 800f828:	4b6a      	ldr	r3, [pc, #424]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f82a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d003      	beq.n	800f83a <SX1276OnDio1Irq+0x16>
 800f832:	2b02      	cmp	r3, #2
 800f834:	f000 8083 	beq.w	800f93e <SX1276OnDio1Irq+0x11a>
            default:
                break;
            }
            break;
        default:
            break;
 800f838:	e0ca      	b.n	800f9d0 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800f83a:	4b66      	ldr	r3, [pc, #408]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f83c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <SX1276OnDio1Irq+0x26>
 800f844:	2b01      	cmp	r3, #1
 800f846:	d060      	beq.n	800f90a <SX1276OnDio1Irq+0xe6>
                break;
 800f848:	e078      	b.n	800f93c <SX1276OnDio1Irq+0x118>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800f84a:	4b62      	ldr	r3, [pc, #392]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f84c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f850:	2b00      	cmp	r3, #0
 800f852:	d119      	bne.n	800f888 <SX1276OnDio1Irq+0x64>
 800f854:	4b5f      	ldr	r3, [pc, #380]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f856:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d114      	bne.n	800f888 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800f85e:	4b5d      	ldr	r3, [pc, #372]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f860:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f864:	f083 0301 	eor.w	r3, r3, #1
 800f868:	b2db      	uxtb	r3, r3
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d004      	beq.n	800f878 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800f86e:	2101      	movs	r1, #1
 800f870:	4859      	ldr	r0, [pc, #356]	; (800f9d8 <SX1276OnDio1Irq+0x1b4>)
 800f872:	f7ff fc9b 	bl	800f1ac <SX1276ReadFifo>
 800f876:	e007      	b.n	800f888 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800f878:	2032      	movs	r0, #50	; 0x32
 800f87a:	f7ff fc0b 	bl	800f094 <SX1276Read>
 800f87e:	4603      	mov	r3, r0
 800f880:	b29a      	uxth	r2, r3
 800f882:	4b54      	ldr	r3, [pc, #336]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f884:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 800f888:	4b52      	ldr	r3, [pc, #328]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f88a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f88e:	461a      	mov	r2, r3
 800f890:	4b50      	ldr	r3, [pc, #320]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f892:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	4a4e      	ldr	r2, [pc, #312]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f89a:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	dd19      	ble.n	800f8d6 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 800f8a2:	4b4c      	ldr	r3, [pc, #304]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8a4:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4b4c      	ldr	r3, [pc, #304]	; (800f9dc <SX1276OnDio1Irq+0x1b8>)
 800f8ac:	4413      	add	r3, r2
 800f8ae:	4a49      	ldr	r2, [pc, #292]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8b0:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 800f8b4:	4611      	mov	r1, r2
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7ff fc78 	bl	800f1ac <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800f8bc:	4b45      	ldr	r3, [pc, #276]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8be:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800f8c2:	4b44      	ldr	r3, [pc, #272]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8c4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	4413      	add	r3, r2
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	4b41      	ldr	r3, [pc, #260]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8d0:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800f8d4:	e032      	b.n	800f93c <SX1276OnDio1Irq+0x118>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f8d6:	4b3f      	ldr	r3, [pc, #252]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8d8:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4b3f      	ldr	r3, [pc, #252]	; (800f9dc <SX1276OnDio1Irq+0x1b8>)
 800f8e0:	18d0      	adds	r0, r2, r3
 800f8e2:	4b3c      	ldr	r3, [pc, #240]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8e4:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f8e8:	b2da      	uxtb	r2, r3
 800f8ea:	4b3a      	ldr	r3, [pc, #232]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8ec:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	f7ff fc58 	bl	800f1ac <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f8fc:	4b35      	ldr	r3, [pc, #212]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f8fe:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800f902:	4b34      	ldr	r3, [pc, #208]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f904:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800f908:	e018      	b.n	800f93c <SX1276OnDio1Irq+0x118>
                TimerStop( &RxTimeoutTimer );
 800f90a:	4835      	ldr	r0, [pc, #212]	; (800f9e0 <SX1276OnDio1Irq+0x1bc>)
 800f90c:	f000 fb28 	bl	800ff60 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800f910:	2180      	movs	r1, #128	; 0x80
 800f912:	2012      	movs	r0, #18
 800f914:	f7ff fbac 	bl	800f070 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800f918:	4b2e      	ldr	r3, [pc, #184]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f91a:	2200      	movs	r2, #0
 800f91c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f920:	4b30      	ldr	r3, [pc, #192]	; (800f9e4 <SX1276OnDio1Irq+0x1c0>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d008      	beq.n	800f93a <SX1276OnDio1Irq+0x116>
 800f928:	4b2e      	ldr	r3, [pc, #184]	; (800f9e4 <SX1276OnDio1Irq+0x1c0>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	68db      	ldr	r3, [r3, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d003      	beq.n	800f93a <SX1276OnDio1Irq+0x116>
                    RadioEvents->RxTimeout( );
 800f932:	4b2c      	ldr	r3, [pc, #176]	; (800f9e4 <SX1276OnDio1Irq+0x1c0>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	4798      	blx	r3
                break;
 800f93a:	bf00      	nop
            break;
 800f93c:	e048      	b.n	800f9d0 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800f93e:	4b25      	ldr	r3, [pc, #148]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f940:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f944:	2b00      	cmp	r3, #0
 800f946:	d001      	beq.n	800f94c <SX1276OnDio1Irq+0x128>
 800f948:	2b01      	cmp	r3, #1
                break;
 800f94a:	e040      	b.n	800f9ce <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800f94c:	4b21      	ldr	r3, [pc, #132]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f94e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f952:	461a      	mov	r2, r3
 800f954:	4b1f      	ldr	r3, [pc, #124]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f956:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	4a1d      	ldr	r2, [pc, #116]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f95e:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 800f962:	4293      	cmp	r3, r2
 800f964:	dd19      	ble.n	800f99a <SX1276OnDio1Irq+0x176>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800f966:	4b1b      	ldr	r3, [pc, #108]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f968:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f96c:	461a      	mov	r2, r3
 800f96e:	4b1b      	ldr	r3, [pc, #108]	; (800f9dc <SX1276OnDio1Irq+0x1b8>)
 800f970:	4413      	add	r3, r2
 800f972:	4a18      	ldr	r2, [pc, #96]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f974:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 800f978:	4611      	mov	r1, r2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff fc06 	bl	800f18c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800f980:	4b14      	ldr	r3, [pc, #80]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f982:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800f986:	4b13      	ldr	r3, [pc, #76]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f988:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4413      	add	r3, r2
 800f990:	b29a      	uxth	r2, r3
 800f992:	4b10      	ldr	r3, [pc, #64]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f994:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800f998:	e018      	b.n	800f9cc <SX1276OnDio1Irq+0x1a8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f99a:	4b0e      	ldr	r3, [pc, #56]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f99c:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4b0e      	ldr	r3, [pc, #56]	; (800f9dc <SX1276OnDio1Irq+0x1b8>)
 800f9a4:	18d0      	adds	r0, r2, r3
 800f9a6:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f9a8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f9ac:	b2da      	uxtb	r2, r3
 800f9ae:	4b09      	ldr	r3, [pc, #36]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f9b0:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	f7ff fbe6 	bl	800f18c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800f9c0:	4b04      	ldr	r3, [pc, #16]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f9c2:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800f9c6:	4b03      	ldr	r3, [pc, #12]	; (800f9d4 <SX1276OnDio1Irq+0x1b0>)
 800f9c8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800f9cc:	bf00      	nop
            break;
 800f9ce:	bf00      	nop
    }
}
 800f9d0:	bf00      	nop
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	20001238 	.word	0x20001238
 800f9d8:	2000134a 	.word	0x2000134a
 800f9dc:	200007bc 	.word	0x200007bc
 800f9e0:	20001378 	.word	0x20001378
 800f9e4:	200007b8 	.word	0x200007b8

0800f9e8 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 800f9e8:	b598      	push	{r3, r4, r7, lr}
 800f9ea:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800f9ec:	4b5e      	ldr	r3, [pc, #376]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800f9ee:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d003      	beq.n	800f9fe <SX1276OnDio2Irq+0x16>
 800f9f6:	2b02      	cmp	r3, #2
 800f9f8:	f000 8084 	beq.w	800fb04 <SX1276OnDio2Irq+0x11c>
            default:
                break;
            }
            break;
        default:
            break;
 800f9fc:	e0ae      	b.n	800fb5c <SX1276OnDio2Irq+0x174>
            switch( SX1276.Settings.Modem )
 800f9fe:	4b5a      	ldr	r3, [pc, #360]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa00:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <SX1276OnDio2Irq+0x26>
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d058      	beq.n	800fabe <SX1276OnDio2Irq+0xd6>
                break;
 800fa0c:	e079      	b.n	800fb02 <SX1276OnDio2Irq+0x11a>
                if( SX1276.DIO4.port == NULL )
 800fa0e:	4b56      	ldr	r3, [pc, #344]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d103      	bne.n	800fa1e <SX1276OnDio2Irq+0x36>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800fa16:	4b54      	ldr	r3, [pc, #336]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa18:	2201      	movs	r2, #1
 800fa1a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800fa1e:	4b52      	ldr	r3, [pc, #328]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa20:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800fa24:	2b01      	cmp	r3, #1
 800fa26:	d169      	bne.n	800fafc <SX1276OnDio2Irq+0x114>
 800fa28:	4b4f      	ldr	r3, [pc, #316]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa2a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d164      	bne.n	800fafc <SX1276OnDio2Irq+0x114>
                    TimerStop( &RxTimeoutSyncWord );
 800fa32:	484e      	ldr	r0, [pc, #312]	; (800fb6c <SX1276OnDio2Irq+0x184>)
 800fa34:	f000 fa94 	bl	800ff60 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800fa38:	4b4b      	ldr	r3, [pc, #300]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800fa40:	2011      	movs	r0, #17
 800fa42:	f7ff fb27 	bl	800f094 <SX1276Read>
 800fa46:	4603      	mov	r3, r0
 800fa48:	085b      	lsrs	r3, r3, #1
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	425b      	negs	r3, r3
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	b25a      	sxtb	r2, r3
 800fa52:	4b45      	ldr	r3, [pc, #276]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fa54:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800fa58:	201b      	movs	r0, #27
 800fa5a:	f7ff fb1b 	bl	800f094 <SX1276Read>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800fa62:	201c      	movs	r0, #28
 800fa64:	f7ff fb16 	bl	800f094 <SX1276Read>
 800fa68:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800fa6a:	4323      	orrs	r3, r4
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f0 fcd9 	bl	8000424 <__aeabi_i2d>
 800fa72:	4602      	mov	r2, r0
 800fa74:	460b      	mov	r3, r1
 800fa76:	4610      	mov	r0, r2
 800fa78:	4619      	mov	r1, r3
 800fa7a:	f7f0 ffd7 	bl	8000a2c <__aeabi_d2iz>
 800fa7e:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f0 fccf 	bl	8000424 <__aeabi_i2d>
 800fa86:	a336      	add	r3, pc, #216	; (adr r3, 800fb60 <SX1276OnDio2Irq+0x178>)
 800fa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8c:	f7f0 fd34 	bl	80004f8 <__aeabi_dmul>
 800fa90:	4602      	mov	r2, r0
 800fa92:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800fa94:	4610      	mov	r0, r2
 800fa96:	4619      	mov	r1, r3
 800fa98:	f7f0 ffc8 	bl	8000a2c <__aeabi_d2iz>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	4a32      	ldr	r2, [pc, #200]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800faa0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800faa4:	200c      	movs	r0, #12
 800faa6:	f7ff faf5 	bl	800f094 <SX1276Read>
 800faaa:	4603      	mov	r3, r0
 800faac:	095b      	lsrs	r3, r3, #5
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f003 0307 	and.w	r3, r3, #7
 800fab4:	b2da      	uxtb	r2, r3
 800fab6:	4b2c      	ldr	r3, [pc, #176]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fab8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                break;
 800fabc:	e01e      	b.n	800fafc <SX1276OnDio2Irq+0x114>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800fabe:	4b2a      	ldr	r3, [pc, #168]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fac0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d01b      	beq.n	800fb00 <SX1276OnDio2Irq+0x118>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800fac8:	2102      	movs	r1, #2
 800faca:	2012      	movs	r0, #18
 800facc:	f7ff fad0 	bl	800f070 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800fad0:	4b27      	ldr	r3, [pc, #156]	; (800fb70 <SX1276OnDio2Irq+0x188>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d013      	beq.n	800fb00 <SX1276OnDio2Irq+0x118>
 800fad8:	4b25      	ldr	r3, [pc, #148]	; (800fb70 <SX1276OnDio2Irq+0x188>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	695b      	ldr	r3, [r3, #20]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00e      	beq.n	800fb00 <SX1276OnDio2Irq+0x118>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800fae2:	4b23      	ldr	r3, [pc, #140]	; (800fb70 <SX1276OnDio2Irq+0x188>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	695c      	ldr	r4, [r3, #20]
 800fae8:	201c      	movs	r0, #28
 800faea:	f7ff fad3 	bl	800f094 <SX1276Read>
 800faee:	4603      	mov	r3, r0
 800faf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	4618      	mov	r0, r3
 800faf8:	47a0      	blx	r4
                break;
 800fafa:	e001      	b.n	800fb00 <SX1276OnDio2Irq+0x118>
                break;
 800fafc:	bf00      	nop
 800fafe:	e02d      	b.n	800fb5c <SX1276OnDio2Irq+0x174>
                break;
 800fb00:	bf00      	nop
            break;
 800fb02:	e02b      	b.n	800fb5c <SX1276OnDio2Irq+0x174>
            switch( SX1276.Settings.Modem )
 800fb04:	4b18      	ldr	r3, [pc, #96]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fb06:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d020      	beq.n	800fb50 <SX1276OnDio2Irq+0x168>
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d120      	bne.n	800fb54 <SX1276OnDio2Irq+0x16c>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800fb12:	4b15      	ldr	r3, [pc, #84]	; (800fb68 <SX1276OnDio2Irq+0x180>)
 800fb14:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d01d      	beq.n	800fb58 <SX1276OnDio2Irq+0x170>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800fb1c:	2102      	movs	r1, #2
 800fb1e:	2012      	movs	r0, #18
 800fb20:	f7ff faa6 	bl	800f070 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800fb24:	4b12      	ldr	r3, [pc, #72]	; (800fb70 <SX1276OnDio2Irq+0x188>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d015      	beq.n	800fb58 <SX1276OnDio2Irq+0x170>
 800fb2c:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <SX1276OnDio2Irq+0x188>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	695b      	ldr	r3, [r3, #20]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d010      	beq.n	800fb58 <SX1276OnDio2Irq+0x170>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800fb36:	4b0e      	ldr	r3, [pc, #56]	; (800fb70 <SX1276OnDio2Irq+0x188>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	695c      	ldr	r4, [r3, #20]
 800fb3c:	201c      	movs	r0, #28
 800fb3e:	f7ff faa9 	bl	800f094 <SX1276Read>
 800fb42:	4603      	mov	r3, r0
 800fb44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	47a0      	blx	r4
                break;
 800fb4e:	e003      	b.n	800fb58 <SX1276OnDio2Irq+0x170>
                break;
 800fb50:	bf00      	nop
 800fb52:	e002      	b.n	800fb5a <SX1276OnDio2Irq+0x172>
                break;
 800fb54:	bf00      	nop
 800fb56:	e000      	b.n	800fb5a <SX1276OnDio2Irq+0x172>
                break;
 800fb58:	bf00      	nop
            break;
 800fb5a:	bf00      	nop
    }
}
 800fb5c:	bf00      	nop
 800fb5e:	bd98      	pop	{r3, r4, r7, pc}
 800fb60:	00000000 	.word	0x00000000
 800fb64:	404e8480 	.word	0x404e8480
 800fb68:	20001238 	.word	0x20001238
 800fb6c:	20001224 	.word	0x20001224
 800fb70:	200007b8 	.word	0x200007b8

0800fb74 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800fb78:	4b1d      	ldr	r3, [pc, #116]	; (800fbf0 <SX1276OnDio3Irq+0x7c>)
 800fb7a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d030      	beq.n	800fbe4 <SX1276OnDio3Irq+0x70>
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d000      	beq.n	800fb88 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800fb86:	e030      	b.n	800fbea <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800fb88:	2012      	movs	r0, #18
 800fb8a:	f7ff fa83 	bl	800f094 <SX1276Read>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	f003 0301 	and.w	r3, r3, #1
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d112      	bne.n	800fbbe <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800fb98:	2105      	movs	r1, #5
 800fb9a:	2012      	movs	r0, #18
 800fb9c:	f7ff fa68 	bl	800f070 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fba0:	4b14      	ldr	r3, [pc, #80]	; (800fbf4 <SX1276OnDio3Irq+0x80>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d01f      	beq.n	800fbe8 <SX1276OnDio3Irq+0x74>
 800fba8:	4b12      	ldr	r3, [pc, #72]	; (800fbf4 <SX1276OnDio3Irq+0x80>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d01a      	beq.n	800fbe8 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800fbb2:	4b10      	ldr	r3, [pc, #64]	; (800fbf4 <SX1276OnDio3Irq+0x80>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	699b      	ldr	r3, [r3, #24]
 800fbb8:	2001      	movs	r0, #1
 800fbba:	4798      	blx	r3
        break;
 800fbbc:	e014      	b.n	800fbe8 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800fbbe:	2104      	movs	r1, #4
 800fbc0:	2012      	movs	r0, #18
 800fbc2:	f7ff fa55 	bl	800f070 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800fbc6:	4b0b      	ldr	r3, [pc, #44]	; (800fbf4 <SX1276OnDio3Irq+0x80>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00c      	beq.n	800fbe8 <SX1276OnDio3Irq+0x74>
 800fbce:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <SX1276OnDio3Irq+0x80>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	699b      	ldr	r3, [r3, #24]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d007      	beq.n	800fbe8 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 800fbd8:	4b06      	ldr	r3, [pc, #24]	; (800fbf4 <SX1276OnDio3Irq+0x80>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	699b      	ldr	r3, [r3, #24]
 800fbde:	2000      	movs	r0, #0
 800fbe0:	4798      	blx	r3
        break;
 800fbe2:	e001      	b.n	800fbe8 <SX1276OnDio3Irq+0x74>
        break;
 800fbe4:	bf00      	nop
 800fbe6:	e000      	b.n	800fbea <SX1276OnDio3Irq+0x76>
        break;
 800fbe8:	bf00      	nop
    }
}
 800fbea:	bf00      	nop
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	20001238 	.word	0x20001238
 800fbf4:	200007b8 	.word	0x200007b8

0800fbf8 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800fbfc:	4b0c      	ldr	r3, [pc, #48]	; (800fc30 <SX1276OnDio4Irq+0x38>)
 800fbfe:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d002      	beq.n	800fc0c <SX1276OnDio4Irq+0x14>
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d00a      	beq.n	800fc20 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800fc0a:	e00c      	b.n	800fc26 <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800fc0c:	4b08      	ldr	r3, [pc, #32]	; (800fc30 <SX1276OnDio4Irq+0x38>)
 800fc0e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d106      	bne.n	800fc24 <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800fc16:	4b06      	ldr	r3, [pc, #24]	; (800fc30 <SX1276OnDio4Irq+0x38>)
 800fc18:	2201      	movs	r2, #1
 800fc1a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        break;
 800fc1e:	e001      	b.n	800fc24 <SX1276OnDio4Irq+0x2c>
        break;
 800fc20:	bf00      	nop
 800fc22:	e000      	b.n	800fc26 <SX1276OnDio4Irq+0x2e>
        break;
 800fc24:	bf00      	nop
    }
}
 800fc26:	bf00      	nop
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bc80      	pop	{r7}
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop
 800fc30:	20001238 	.word	0x20001238

0800fc34 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800fc34:	b480      	push	{r7}
 800fc36:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800fc38:	4b15      	ldr	r3, [pc, #84]	; (800fc90 <SystemInit+0x5c>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a14      	ldr	r2, [pc, #80]	; (800fc90 <SystemInit+0x5c>)
 800fc3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc42:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800fc44:	4b12      	ldr	r3, [pc, #72]	; (800fc90 <SystemInit+0x5c>)
 800fc46:	689a      	ldr	r2, [r3, #8]
 800fc48:	4911      	ldr	r1, [pc, #68]	; (800fc90 <SystemInit+0x5c>)
 800fc4a:	4b12      	ldr	r3, [pc, #72]	; (800fc94 <SystemInit+0x60>)
 800fc4c:	4013      	ands	r3, r2
 800fc4e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 800fc50:	4b0f      	ldr	r3, [pc, #60]	; (800fc90 <SystemInit+0x5c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	4a0e      	ldr	r2, [pc, #56]	; (800fc90 <SystemInit+0x5c>)
 800fc56:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800fc5a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800fc5e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800fc60:	4b0b      	ldr	r3, [pc, #44]	; (800fc90 <SystemInit+0x5c>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	4a0a      	ldr	r2, [pc, #40]	; (800fc90 <SystemInit+0x5c>)
 800fc66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fc6a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800fc6c:	4b08      	ldr	r3, [pc, #32]	; (800fc90 <SystemInit+0x5c>)
 800fc6e:	689b      	ldr	r3, [r3, #8]
 800fc70:	4a07      	ldr	r2, [pc, #28]	; (800fc90 <SystemInit+0x5c>)
 800fc72:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800fc76:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <SystemInit+0x5c>)
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800fc7e:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <SystemInit+0x64>)
 800fc80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800fc84:	609a      	str	r2, [r3, #8]
#endif
}
 800fc86:	bf00      	nop
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bc80      	pop	{r7}
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	40023800 	.word	0x40023800
 800fc94:	88ffc00c 	.word	0x88ffc00c
 800fc98:	e000ed00 	.word	0xe000ed00

0800fc9c <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	611a      	str	r2, [r3, #16]
}
 800fcc4:	bf00      	nop
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bc80      	pop	{r7}
 800fccc:	4770      	bx	lr
	...

0800fcd0 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60bb      	str	r3, [r7, #8]

    BoardDisableIrq( );
 800fce0:	f7fb f996 	bl	800b010 <BoardDisableIrq>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d005      	beq.n	800fcf6 <TimerStart+0x26>
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f9d8 	bl	80100a0 <TimerExists>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d002      	beq.n	800fcfc <TimerStart+0x2c>
    {
        BoardEnableIrq( );
 800fcf6:	f7fb f99b 	bl	800b030 <BoardEnableIrq>
        return;
 800fcfa:	e03e      	b.n	800fd7a <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	685a      	ldr	r2, [r3, #4]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 800fd0a:	4b1d      	ldr	r3, [pc, #116]	; (800fd80 <TimerStart+0xb0>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d106      	bne.n	800fd20 <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 f8a1 	bl	800fe60 <TimerInsertNewHeadTimer>
 800fd1e:	e02a      	b.n	800fd76 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 800fd20:	4b17      	ldr	r3, [pc, #92]	; (800fd80 <TimerStart+0xb0>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	7a1b      	ldrb	r3, [r3, #8]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d013      	beq.n	800fd52 <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 800fd2a:	f000 f9e7 	bl	80100fc <TimerGetValue>
 800fd2e:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 800fd30:	4b13      	ldr	r3, [pc, #76]	; (800fd80 <TimerStart+0xb0>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d903      	bls.n	800fd44 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 800fd3c:	4b10      	ldr	r3, [pc, #64]	; (800fd80 <TimerStart+0xb0>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 800fd44:	4b0e      	ldr	r3, [pc, #56]	; (800fd80 <TimerStart+0xb0>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	60bb      	str	r3, [r7, #8]
 800fd50:	e003      	b.n	800fd5a <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 800fd52:	4b0b      	ldr	r3, [pc, #44]	; (800fd80 <TimerStart+0xb0>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d904      	bls.n	800fd6e <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 800fd64:	68b9      	ldr	r1, [r7, #8]
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f87a 	bl	800fe60 <TimerInsertNewHeadTimer>
 800fd6c:	e003      	b.n	800fd76 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 800fd6e:	68b9      	ldr	r1, [r7, #8]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 f807 	bl	800fd84 <TimerInsertTimer>
        }
    }
    BoardEnableIrq( );
 800fd76:	f7fb f95b 	bl	800b030 <BoardEnableIrq>
}
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	200008c0 	.word	0x200008c0

0800fd84 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b087      	sub	sp, #28
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 800fd8e:	2300      	movs	r3, #0
 800fd90:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 800fd92:	2300      	movs	r3, #0
 800fd94:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 800fd96:	4b31      	ldr	r3, [pc, #196]	; (800fe5c <TimerInsertTimer+0xd8>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 800fd9c:	4b2f      	ldr	r3, [pc, #188]	; (800fe5c <TimerInsertTimer+0xd8>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d10c      	bne.n	800fdc4 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	1ad2      	subs	r2, r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 800fdc2:	e045      	b.n	800fe50 <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	683a      	ldr	r2, [r7, #0]
 800fdce:	4413      	add	r3, r2
 800fdd0:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800fdd2:	e039      	b.n	800fe48 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	693a      	ldr	r2, [r7, #16]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d916      	bls.n	800fe0c <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	1ad2      	subs	r2, r2, r3
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d006      	beq.n	800fdfe <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	1ad2      	subs	r2, r2, r3
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	611a      	str	r2, [r3, #16]
                break;
 800fe0a:	e021      	b.n	800fe50 <TimerInsertTimer+0xcc>
                prev = cur;
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10e      	bne.n	800fe3a <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	1ad2      	subs	r2, r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2200      	movs	r2, #0
 800fe36:	611a      	str	r2, [r3, #16]
                    break;
 800fe38:	e00a      	b.n	800fe50 <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	693a      	ldr	r2, [r7, #16]
 800fe44:	4413      	add	r3, r2
 800fe46:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1c2      	bne.n	800fdd4 <TimerInsertTimer+0x50>
}
 800fe4e:	e7ff      	b.n	800fe50 <TimerInsertTimer+0xcc>
 800fe50:	bf00      	nop
 800fe52:	371c      	adds	r7, #28
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bc80      	pop	{r7}
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	200008c0 	.word	0x200008c0

0800fe60 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 800fe6a:	4b10      	ldr	r3, [pc, #64]	; (800feac <TimerInsertNewHeadTimer+0x4c>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d008      	beq.n	800fe88 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	683a      	ldr	r2, [r7, #0]
 800fe7c:	1ad2      	subs	r2, r2, r3
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	68fa      	ldr	r2, [r7, #12]
 800fe8c:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2201      	movs	r2, #1
 800fe92:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 800fe94:	4a05      	ldr	r2, [pc, #20]	; (800feac <TimerInsertNewHeadTimer+0x4c>)
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 800fe9a:	4b04      	ldr	r3, [pc, #16]	; (800feac <TimerInsertNewHeadTimer+0x4c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f000 f946 	bl	8010130 <TimerSetTimeout>
}
 800fea4:	bf00      	nop
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	200008c0 	.word	0x200008c0

0800feb0 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 800feb6:	2300      	movs	r3, #0
 800feb8:	607b      	str	r3, [r7, #4]

    // Early out when TimerListHead is null to prevent null pointer
    if ( TimerListHead == NULL )
 800feba:	4b28      	ldr	r3, [pc, #160]	; (800ff5c <TimerIrqHandler+0xac>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d048      	beq.n	800ff54 <TimerIrqHandler+0xa4>
    {
        return;
    }

    elapsedTime = TimerGetValue( );
 800fec2:	f000 f91b 	bl	80100fc <TimerGetValue>
 800fec6:	6078      	str	r0, [r7, #4]

    if( elapsedTime >= TimerListHead->Timestamp )
 800fec8:	4b24      	ldr	r3, [pc, #144]	; (800ff5c <TimerIrqHandler+0xac>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d304      	bcc.n	800fede <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 800fed4:	4b21      	ldr	r3, [pc, #132]	; (800ff5c <TimerIrqHandler+0xac>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2200      	movs	r2, #0
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	e007      	b.n	800feee <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 800fede:	4b1f      	ldr	r3, [pc, #124]	; (800ff5c <TimerIrqHandler+0xac>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	6819      	ldr	r1, [r3, #0]
 800fee4:	4b1d      	ldr	r3, [pc, #116]	; (800ff5c <TimerIrqHandler+0xac>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	1a8a      	subs	r2, r1, r2
 800feec:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 800feee:	4b1b      	ldr	r3, [pc, #108]	; (800ff5c <TimerIrqHandler+0xac>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	2200      	movs	r2, #0
 800fef4:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800fef6:	e00e      	b.n	800ff16 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 800fef8:	4b18      	ldr	r3, [pc, #96]	; (800ff5c <TimerIrqHandler+0xac>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 800fefe:	4b17      	ldr	r3, [pc, #92]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	4a15      	ldr	r2, [pc, #84]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff06:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d002      	beq.n	800ff16 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 800ff16:	4b11      	ldr	r3, [pc, #68]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d004      	beq.n	800ff28 <TimerIrqHandler+0x78>
 800ff1e:	4b0f      	ldr	r3, [pc, #60]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d0e7      	beq.n	800fef8 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 800ff28:	4b0c      	ldr	r3, [pc, #48]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d012      	beq.n	800ff56 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 800ff30:	4b0a      	ldr	r3, [pc, #40]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	7a1b      	ldrb	r3, [r3, #8]
 800ff36:	f083 0301 	eor.w	r3, r3, #1
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d00a      	beq.n	800ff56 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 800ff40:	4b06      	ldr	r3, [pc, #24]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2201      	movs	r2, #1
 800ff46:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 800ff48:	4b04      	ldr	r3, [pc, #16]	; (800ff5c <TimerIrqHandler+0xac>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f000 f8ef 	bl	8010130 <TimerSetTimeout>
 800ff52:	e000      	b.n	800ff56 <TimerIrqHandler+0xa6>
        return;
 800ff54:	bf00      	nop
        }
    }
}
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	200008c0 	.word	0x200008c0

0800ff60 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
    BoardDisableIrq( );
 800ff68:	f7fb f852 	bl	800b010 <BoardDisableIrq>

    uint32_t elapsedTime = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 800ff74:	4b49      	ldr	r3, [pc, #292]	; (801009c <TimerStop+0x13c>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 800ff7a:	4b48      	ldr	r3, [pc, #288]	; (801009c <TimerStop+0x13c>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800ff80:	4b46      	ldr	r3, [pc, #280]	; (801009c <TimerStop+0x13c>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <TimerStop+0x2e>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d102      	bne.n	800ff94 <TimerStop+0x34>
    {
        BoardEnableIrq( );
 800ff8e:	f7fb f84f 	bl	800b030 <BoardEnableIrq>
        return;
 800ff92:	e080      	b.n	8010096 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 800ff94:	4b41      	ldr	r3, [pc, #260]	; (801009c <TimerStop+0x13c>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d152      	bne.n	8010044 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 800ff9e:	4b3f      	ldr	r3, [pc, #252]	; (801009c <TimerStop+0x13c>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	7a1b      	ldrb	r3, [r3, #8]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d033      	beq.n	8010010 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 800ffa8:	f000 f8a8 	bl	80100fc <TimerGetValue>
 800ffac:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	697a      	ldr	r2, [r7, #20]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d902      	bls.n	800ffbe <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 800ffc8:	4b34      	ldr	r3, [pc, #208]	; (801009c <TimerStop+0x13c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01a      	beq.n	8010008 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 800ffd2:	4b32      	ldr	r3, [pc, #200]	; (801009c <TimerStop+0x13c>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 800ffda:	4b30      	ldr	r3, [pc, #192]	; (801009c <TimerStop+0x13c>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	691b      	ldr	r3, [r3, #16]
 800ffe0:	4a2e      	ldr	r2, [pc, #184]	; (801009c <TimerStop+0x13c>)
 800ffe2:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 800ffe4:	4b2d      	ldr	r3, [pc, #180]	; (801009c <TimerStop+0x13c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6819      	ldr	r1, [r3, #0]
 800ffea:	4b2c      	ldr	r3, [pc, #176]	; (801009c <TimerStop+0x13c>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	440a      	add	r2, r1
 800fff2:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 800fff4:	4b29      	ldr	r3, [pc, #164]	; (801009c <TimerStop+0x13c>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2201      	movs	r2, #1
 800fffa:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 800fffc:	4b27      	ldr	r3, [pc, #156]	; (801009c <TimerStop+0x13c>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4618      	mov	r0, r3
 8010002:	f000 f895 	bl	8010130 <TimerSetTimeout>
 8010006:	e044      	b.n	8010092 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8010008:	4b24      	ldr	r3, [pc, #144]	; (801009c <TimerStop+0x13c>)
 801000a:	2200      	movs	r2, #0
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	e040      	b.n	8010092 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8010010:	4b22      	ldr	r3, [pc, #136]	; (801009c <TimerStop+0x13c>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d010      	beq.n	801003c <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8010020:	4b1e      	ldr	r3, [pc, #120]	; (801009c <TimerStop+0x13c>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	4a1d      	ldr	r2, [pc, #116]	; (801009c <TimerStop+0x13c>)
 8010028:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 801002a:	4b1c      	ldr	r3, [pc, #112]	; (801009c <TimerStop+0x13c>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	6819      	ldr	r1, [r3, #0]
 8010030:	4b1a      	ldr	r3, [pc, #104]	; (801009c <TimerStop+0x13c>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	440a      	add	r2, r1
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	e02a      	b.n	8010092 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 801003c:	4b17      	ldr	r3, [pc, #92]	; (801009c <TimerStop+0x13c>)
 801003e:	2200      	movs	r2, #0
 8010040:	601a      	str	r2, [r3, #0]
 8010042:	e026      	b.n	8010092 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 801004a:	e01f      	b.n	801008c <TimerStop+0x12c>
        {
            if( cur == obj )
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	429a      	cmp	r2, r3
 8010052:	d116      	bne.n	8010082 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d00c      	beq.n	8010076 <TimerStop+0x116>
                {
                    cur = cur->Next;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	441a      	add	r2, r3
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8010074:	e00d      	b.n	8010092 <TimerStop+0x132>
                    cur = NULL;
 8010076:	2300      	movs	r3, #0
 8010078:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	611a      	str	r2, [r3, #16]
                break;
 8010080:	e007      	b.n	8010092 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d1dc      	bne.n	801004c <TimerStop+0xec>
            }
        }
    }
    BoardEnableIrq( );
 8010092:	f7fa ffcd 	bl	800b030 <BoardEnableIrq>
}
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	200008c0 	.word	0x200008c0

080100a0 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80100a8:	4b0a      	ldr	r3, [pc, #40]	; (80100d4 <TimerExists+0x34>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 80100ae:	e008      	b.n	80100c2 <TimerExists+0x22>
    {
        if( cur == obj )
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d101      	bne.n	80100bc <TimerExists+0x1c>
        {
            return true;
 80100b8:	2301      	movs	r3, #1
 80100ba:	e006      	b.n	80100ca <TimerExists+0x2a>
        }
        cur = cur->Next;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	691b      	ldr	r3, [r3, #16]
 80100c0:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d1f3      	bne.n	80100b0 <TimerExists+0x10>
    }
    return false;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bc80      	pop	{r7}
 80100d2:	4770      	bx	lr
 80100d4:	200008c0 	.word	0x200008c0

080100d8 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7ff ff3c 	bl	800ff60 <TimerStop>
    obj->Timestamp = value;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	683a      	ldr	r2, [r7, #0]
 80100f2:	605a      	str	r2, [r3, #4]
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8010100:	f7fc fb22 	bl	800c748 <RtcGetElapsedAlarmTime>
 8010104:	4603      	mov	r3, r0
}
 8010106:	4618      	mov	r0, r3
 8010108:	bd80      	pop	{r7, pc}

0801010a <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 801010a:	b580      	push	{r7, lr}
 801010c:	af00      	add	r7, sp, #0
    return RtcGetTimerValue( );
 801010e:	f7fc fb13 	bl	800c738 <RtcGetTimerValue>
 8010112:	4603      	mov	r3, r0
}
 8010114:	4618      	mov	r0, r3
 8010116:	bd80      	pop	{r7, pc}

08010118 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t savedTime )
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
    return RtcComputeElapsedTime( savedTime );
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f7fc fb33 	bl	800c78c <RtcComputeElapsedTime>
 8010126:	4603      	mov	r3, r0
}
 8010128:	4618      	mov	r0, r3
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 8010138:	4b09      	ldr	r3, [pc, #36]	; (8010160 <TimerSetTimeout+0x30>)
 801013a:	2200      	movs	r2, #0
 801013c:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp );
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7fc fac2 	bl	800c6cc <RtcGetAdjustedTimeoutValue>
 8010148:	4602      	mov	r2, r0
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4618      	mov	r0, r3
 8010154:	f7fc faae 	bl	800c6b4 <RtcSetTimeout>
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	200008bc 	.word	0x200008bc

08010164 <TimerLowPowerHandler>:

void TimerLowPowerHandler( void )
{
 8010164:	b580      	push	{r7, lr}
 8010166:	af00      	add	r7, sp, #0
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == true ) )
 8010168:	4b0e      	ldr	r3, [pc, #56]	; (80101a4 <TimerLowPowerHandler+0x40>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d016      	beq.n	801019e <TimerLowPowerHandler+0x3a>
 8010170:	4b0c      	ldr	r3, [pc, #48]	; (80101a4 <TimerLowPowerHandler+0x40>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	7a1b      	ldrb	r3, [r3, #8]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d011      	beq.n	801019e <TimerLowPowerHandler+0x3a>
    {
        if( HasLoopedThroughMain < 5 )
 801017a:	4b0b      	ldr	r3, [pc, #44]	; (80101a8 <TimerLowPowerHandler+0x44>)
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	b2db      	uxtb	r3, r3
 8010180:	2b04      	cmp	r3, #4
 8010182:	d807      	bhi.n	8010194 <TimerLowPowerHandler+0x30>
        {
            HasLoopedThroughMain++;
 8010184:	4b08      	ldr	r3, [pc, #32]	; (80101a8 <TimerLowPowerHandler+0x44>)
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	b2db      	uxtb	r3, r3
 801018a:	3301      	adds	r3, #1
 801018c:	b2da      	uxtb	r2, r3
 801018e:	4b06      	ldr	r3, [pc, #24]	; (80101a8 <TimerLowPowerHandler+0x44>)
 8010190:	701a      	strb	r2, [r3, #0]
                RtcEnterLowPowerStopMode( );
#endif
            }
        }
    }
}
 8010192:	e004      	b.n	801019e <TimerLowPowerHandler+0x3a>
            HasLoopedThroughMain = 0;
 8010194:	4b04      	ldr	r3, [pc, #16]	; (80101a8 <TimerLowPowerHandler+0x44>)
 8010196:	2200      	movs	r2, #0
 8010198:	701a      	strb	r2, [r3, #0]
            if( GetBoardPowerSource( ) == BATTERY_POWER )
 801019a:	f7fb f9c9 	bl	800b530 <GetBoardPowerSource>
}
 801019e:	bf00      	nop
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	200008c0 	.word	0x200008c0
 80101a8:	200008bc 	.word	0x200008bc

080101ac <HAL_UART_TxCpltCallback>:
    BoardEnableIrq( );
    return 1;
}

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *handle )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]

    if( IsFifoEmpty( &Uart1.FifoTx ) == false )
 80101b4:	4810      	ldr	r0, [pc, #64]	; (80101f8 <HAL_UART_TxCpltCallback+0x4c>)
 80101b6:	f7fb fc5a 	bl	800ba6e <IsFifoEmpty>
 80101ba:	4603      	mov	r3, r0
 80101bc:	f083 0301 	eor.w	r3, r3, #1
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00b      	beq.n	80101de <HAL_UART_TxCpltCallback+0x32>
    {
        TxData = FifoPop( &Uart1.FifoTx );
 80101c6:	480c      	ldr	r0, [pc, #48]	; (80101f8 <HAL_UART_TxCpltCallback+0x4c>)
 80101c8:	f7fb fc32 	bl	800ba30 <FifoPop>
 80101cc:	4603      	mov	r3, r0
 80101ce:	461a      	mov	r2, r3
 80101d0:	4b0a      	ldr	r3, [pc, #40]	; (80101fc <HAL_UART_TxCpltCallback+0x50>)
 80101d2:	701a      	strb	r2, [r3, #0]
        //  Write one byte to the transmit data register
        HAL_UART_Transmit_IT( &UartHandle, &TxData, 1 );
 80101d4:	2201      	movs	r2, #1
 80101d6:	4909      	ldr	r1, [pc, #36]	; (80101fc <HAL_UART_TxCpltCallback+0x50>)
 80101d8:	4809      	ldr	r0, [pc, #36]	; (8010200 <HAL_UART_TxCpltCallback+0x54>)
 80101da:	f7f3 ffe8 	bl	80041ae <HAL_UART_Transmit_IT>
    }

    if( Uart1.IrqNotify != NULL )
 80101de:	4b09      	ldr	r3, [pc, #36]	; (8010204 <HAL_UART_TxCpltCallback+0x58>)
 80101e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d003      	beq.n	80101ee <HAL_UART_TxCpltCallback+0x42>
    {
        Uart1.IrqNotify( UART_NOTIFY_TX );
 80101e6:	4b07      	ldr	r3, [pc, #28]	; (8010204 <HAL_UART_TxCpltCallback+0x58>)
 80101e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ea:	2000      	movs	r0, #0
 80101ec:	4798      	blx	r3
    }
}
 80101ee:	bf00      	nop
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	20000bc8 	.word	0x20000bc8
 80101fc:	200008c5 	.word	0x200008c5
 8010200:	2000138c 	.word	0x2000138c
 8010204:	20000bac 	.word	0x20000bac

08010208 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *handle )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
    if( IsFifoFull( &Uart1.FifoRx ) == false )
 8010210:	480f      	ldr	r0, [pc, #60]	; (8010250 <HAL_UART_RxCpltCallback+0x48>)
 8010212:	f7fb fc3e 	bl	800ba92 <IsFifoFull>
 8010216:	4603      	mov	r3, r0
 8010218:	f083 0301 	eor.w	r3, r3, #1
 801021c:	b2db      	uxtb	r3, r3
 801021e:	2b00      	cmp	r3, #0
 8010220:	d005      	beq.n	801022e <HAL_UART_RxCpltCallback+0x26>
    {
        // Read one byte from the receive data register
        FifoPush( &Uart1.FifoRx, RxData );
 8010222:	4b0c      	ldr	r3, [pc, #48]	; (8010254 <HAL_UART_RxCpltCallback+0x4c>)
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	4619      	mov	r1, r3
 8010228:	4809      	ldr	r0, [pc, #36]	; (8010250 <HAL_UART_RxCpltCallback+0x48>)
 801022a:	f7fb fbe6 	bl	800b9fa <FifoPush>
    }

    if( Uart1.IrqNotify != NULL )
 801022e:	4b0a      	ldr	r3, [pc, #40]	; (8010258 <HAL_UART_RxCpltCallback+0x50>)
 8010230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <HAL_UART_RxCpltCallback+0x36>
    {
        Uart1.IrqNotify( UART_NOTIFY_RX );
 8010236:	4b08      	ldr	r3, [pc, #32]	; (8010258 <HAL_UART_RxCpltCallback+0x50>)
 8010238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023a:	2001      	movs	r0, #1
 801023c:	4798      	blx	r3
    }

    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 801023e:	2201      	movs	r2, #1
 8010240:	4904      	ldr	r1, [pc, #16]	; (8010254 <HAL_UART_RxCpltCallback+0x4c>)
 8010242:	4806      	ldr	r0, [pc, #24]	; (801025c <HAL_UART_RxCpltCallback+0x54>)
 8010244:	f7f3 fff7 	bl	8004236 <HAL_UART_Receive_IT>
}
 8010248:	bf00      	nop
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20000bd4 	.word	0x20000bd4
 8010254:	200008c4 	.word	0x200008c4
 8010258:	20000bac 	.word	0x20000bac
 801025c:	2000138c 	.word	0x2000138c

08010260 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback( UART_HandleTypeDef *handle )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 8010268:	2201      	movs	r2, #1
 801026a:	4904      	ldr	r1, [pc, #16]	; (801027c <HAL_UART_ErrorCallback+0x1c>)
 801026c:	4804      	ldr	r0, [pc, #16]	; (8010280 <HAL_UART_ErrorCallback+0x20>)
 801026e:	f7f3 ffe2 	bl	8004236 <HAL_UART_Receive_IT>
}
 8010272:	bf00      	nop
 8010274:	3708      	adds	r7, #8
 8010276:	46bd      	mov	sp, r7
 8010278:	bd80      	pop	{r7, pc}
 801027a:	bf00      	nop
 801027c:	200008c4 	.word	0x200008c4
 8010280:	2000138c 	.word	0x2000138c

08010284 <DebugPrintf>:
        return 0; // OK
    }
}

void  DebugPrintf (char  *p_fmt, ...)
{
 8010284:	b40f      	push	{r0, r1, r2, r3}
 8010286:	b480      	push	{r7}
 8010288:	b0b5      	sub	sp, #212	; 0xd4
 801028a:	af00      	add	r7, sp, #0
        //CDC_Transmit_FS((uint8_t*) str, len);
        UartPutBuffer(&Uart1, (uint8_t *)str, len);
    }


}
 801028c:	bf00      	nop
 801028e:	37d4      	adds	r7, #212	; 0xd4
 8010290:	46bd      	mov	sp, r7
 8010292:	bc80      	pop	{r7}
 8010294:	b004      	add	sp, #16
 8010296:	4770      	bx	lr

08010298 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 8010298:	b480      	push	{r7}
 801029a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801029c:	4b0d      	ldr	r3, [pc, #52]	; (80102d4 <rand1+0x3c>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4a0d      	ldr	r2, [pc, #52]	; (80102d8 <rand1+0x40>)
 80102a2:	fb02 f303 	mul.w	r3, r2, r3
 80102a6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80102aa:	3339      	adds	r3, #57	; 0x39
 80102ac:	4a09      	ldr	r2, [pc, #36]	; (80102d4 <rand1+0x3c>)
 80102ae:	6013      	str	r3, [r2, #0]
 80102b0:	4b08      	ldr	r3, [pc, #32]	; (80102d4 <rand1+0x3c>)
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	2303      	movs	r3, #3
 80102b6:	fba3 1302 	umull	r1, r3, r3, r2
 80102ba:	1ad1      	subs	r1, r2, r3
 80102bc:	0849      	lsrs	r1, r1, #1
 80102be:	440b      	add	r3, r1
 80102c0:	0f99      	lsrs	r1, r3, #30
 80102c2:	460b      	mov	r3, r1
 80102c4:	07db      	lsls	r3, r3, #31
 80102c6:	1a5b      	subs	r3, r3, r1
 80102c8:	1ad1      	subs	r1, r2, r3
 80102ca:	460b      	mov	r3, r1
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bc80      	pop	{r7}
 80102d2:	4770      	bx	lr
 80102d4:	200000a0 	.word	0x200000a0
 80102d8:	41c64e6d 	.word	0x41c64e6d

080102dc <srand1>:

void srand1( uint32_t seed )
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
    next = seed;
 80102e4:	4a03      	ldr	r2, [pc, #12]	; (80102f4 <srand1+0x18>)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6013      	str	r3, [r2, #0]
}
 80102ea:	bf00      	nop
 80102ec:	370c      	adds	r7, #12
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bc80      	pop	{r7}
 80102f2:	4770      	bx	lr
 80102f4:	200000a0 	.word	0x200000a0

080102f8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8010302:	f7ff ffc9 	bl	8010298 <rand1>
 8010306:	4602      	mov	r2, r0
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	1acb      	subs	r3, r1, r3
 801030e:	3301      	adds	r3, #1
 8010310:	fb92 f1f3 	sdiv	r1, r2, r3
 8010314:	fb03 f301 	mul.w	r3, r3, r1
 8010318:	1ad2      	subs	r2, r2, r3
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4413      	add	r3, r2
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010326:	b480      	push	{r7}
 8010328:	b085      	sub	sp, #20
 801032a:	af00      	add	r7, sp, #0
 801032c:	60f8      	str	r0, [r7, #12]
 801032e:	60b9      	str	r1, [r7, #8]
 8010330:	4613      	mov	r3, r2
 8010332:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8010334:	e007      	b.n	8010346 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	1c53      	adds	r3, r2, #1
 801033a:	60bb      	str	r3, [r7, #8]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	1c59      	adds	r1, r3, #1
 8010340:	60f9      	str	r1, [r7, #12]
 8010342:	7812      	ldrb	r2, [r2, #0]
 8010344:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010346:	88fb      	ldrh	r3, [r7, #6]
 8010348:	1e5a      	subs	r2, r3, #1
 801034a:	80fa      	strh	r2, [r7, #6]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1f2      	bne.n	8010336 <memcpy1+0x10>
    }
}
 8010350:	bf00      	nop
 8010352:	bf00      	nop
 8010354:	3714      	adds	r7, #20
 8010356:	46bd      	mov	sp, r7
 8010358:	bc80      	pop	{r7}
 801035a:	4770      	bx	lr

0801035c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801035c:	b480      	push	{r7}
 801035e:	b085      	sub	sp, #20
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	60b9      	str	r1, [r7, #8]
 8010366:	4613      	mov	r3, r2
 8010368:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801036a:	88fb      	ldrh	r3, [r7, #6]
 801036c:	3b01      	subs	r3, #1
 801036e:	68fa      	ldr	r2, [r7, #12]
 8010370:	4413      	add	r3, r2
 8010372:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8010374:	e007      	b.n	8010386 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	1c53      	adds	r3, r2, #1
 801037a:	60bb      	str	r3, [r7, #8]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	1e59      	subs	r1, r3, #1
 8010380:	60f9      	str	r1, [r7, #12]
 8010382:	7812      	ldrb	r2, [r2, #0]
 8010384:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010386:	88fb      	ldrh	r3, [r7, #6]
 8010388:	1e5a      	subs	r2, r3, #1
 801038a:	80fa      	strh	r2, [r7, #6]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1f2      	bne.n	8010376 <memcpyr+0x1a>
    }
}
 8010390:	bf00      	nop
 8010392:	bf00      	nop
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	bc80      	pop	{r7}
 801039a:	4770      	bx	lr

0801039c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	460b      	mov	r3, r1
 80103a6:	70fb      	strb	r3, [r7, #3]
 80103a8:	4613      	mov	r3, r2
 80103aa:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80103ac:	e004      	b.n	80103b8 <memset1+0x1c>
    {
        *dst++ = value;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	1c5a      	adds	r2, r3, #1
 80103b2:	607a      	str	r2, [r7, #4]
 80103b4:	78fa      	ldrb	r2, [r7, #3]
 80103b6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80103b8:	883b      	ldrh	r3, [r7, #0]
 80103ba:	1e5a      	subs	r2, r3, #1
 80103bc:	803a      	strh	r2, [r7, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1f5      	bne.n	80103ae <memset1+0x12>
    }
}
 80103c2:	bf00      	nop
 80103c4:	bf00      	nop
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bc80      	pop	{r7}
 80103cc:	4770      	bx	lr

080103ce <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 80103ce:	b480      	push	{r7}
 80103d0:	b083      	sub	sp, #12
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	683a      	ldr	r2, [r7, #0]
 80103dc:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2200      	movs	r2, #0
 8010412:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->lon = 0;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->height = 0;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->hMSL = 0;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hAcc = 0;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GNSS->vAcc = 0;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->gSpeed = 0;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->headMot = 0;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8010454:	bf00      	nop
 8010456:	370c      	adds	r7, #12
 8010458:	46bd      	mov	sp, r7
 801045a:	bc80      	pop	{r7}
 801045c:	4770      	bx	lr

0801045e <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 801045e:	b580      	push	{r7, lr}
 8010460:	b084      	sub	sp, #16
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8010466:	2300      	movs	r3, #0
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	e044      	b.n	80104f6 <GNSS_ParseBuffer+0x98>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	4413      	add	r3, r2
 8010472:	3308      	adds	r3, #8
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2bb5      	cmp	r3, #181	; 0xb5
 8010478:	d13a      	bne.n	80104f0 <GNSS_ParseBuffer+0x92>
				&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	3301      	adds	r3, #1
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	4413      	add	r3, r2
 8010482:	7a1b      	ldrb	r3, [r3, #8]
 8010484:	2b62      	cmp	r3, #98	; 0x62
 8010486:	d133      	bne.n	80104f0 <GNSS_ParseBuffer+0x92>
			if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	3302      	adds	r3, #2
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	4413      	add	r3, r2
 8010490:	7a1b      	ldrb	r3, [r3, #8]
 8010492:	2b27      	cmp	r3, #39	; 0x27
 8010494:	d106      	bne.n	80104a4 <GNSS_ParseBuffer+0x46>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3303      	adds	r3, #3
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	4413      	add	r3, r2
 801049e:	7a1b      	ldrb	r3, [r3, #8]
 80104a0:	2b03      	cmp	r3, #3
 80104a2:	d025      	beq.n	80104f0 <GNSS_ParseBuffer+0x92>
//				GNSS_ParseUniqID(GNSS);
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	3302      	adds	r3, #2
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	4413      	add	r3, r2
 80104ac:	7a1b      	ldrb	r3, [r3, #8]
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d106      	bne.n	80104c0 <GNSS_ParseBuffer+0x62>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	3303      	adds	r3, #3
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	4413      	add	r3, r2
 80104ba:	7a1b      	ldrb	r3, [r3, #8]
 80104bc:	2b21      	cmp	r3, #33	; 0x21
 80104be:	d017      	beq.n	80104f0 <GNSS_ParseBuffer+0x92>
//				GNSS_ParseNavigatorData(GNSS);
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3302      	adds	r3, #2
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	4413      	add	r3, r2
 80104c8:	7a1b      	ldrb	r3, [r3, #8]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d110      	bne.n	80104f0 <GNSS_ParseBuffer+0x92>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	3303      	adds	r3, #3
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	4413      	add	r3, r2
 80104d6:	7a1b      	ldrb	r3, [r3, #8]
 80104d8:	2b07      	cmp	r3, #7
 80104da:	d103      	bne.n	80104e4 <GNSS_ParseBuffer+0x86>
				GNSS_ParsePVTData(GNSS);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 f843 	bl	8010568 <GNSS_ParsePVTData>
 80104e2:	e005      	b.n	80104f0 <GNSS_ParseBuffer+0x92>
			} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	3302      	adds	r3, #2
 80104e8:	687a      	ldr	r2, [r7, #4]
 80104ea:	4413      	add	r3, r2
 80104ec:	7a1b      	ldrb	r3, [r3, #8]
 80104ee:	2b01      	cmp	r3, #1
	for (int var = 0; var <= 100; ++var) {
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	3301      	adds	r3, #1
 80104f4:	60fb      	str	r3, [r7, #12]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b64      	cmp	r3, #100	; 0x64
 80104fa:	ddb7      	ble.n	801046c <GNSS_ParseBuffer+0xe>
					&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
//				GNSS_ParsePOSLLHData(GNSS);
			}
		}
	}
}
 80104fc:	bf00      	nop
 80104fe:	bf00      	nop
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
	...

08010508 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2208      	movs	r2, #8
 8010516:	4911      	ldr	r1, [pc, #68]	; (801055c <GNSS_GetPVTData+0x54>)
 8010518:	4618      	mov	r0, r3
 801051a:	f7f3 febd 	bl	8004298 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 801051e:	bf00      	nop
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4618      	mov	r0, r3
 8010526:	f7f4 f8e1 	bl	80046ec <HAL_UART_GetState>
 801052a:	4603      	mov	r3, r0
 801052c:	2b20      	cmp	r3, #32
 801052e:	d1f7      	bne.n	8010520 <GNSS_GetPVTData+0x18>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6818      	ldr	r0, [r3, #0]
 8010534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010538:	2264      	movs	r2, #100	; 0x64
 801053a:	4909      	ldr	r1, [pc, #36]	; (8010560 <GNSS_GetPVTData+0x58>)
 801053c:	f7f3 fd95 	bl	800406a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 8010540:	bf00      	nop
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4618      	mov	r0, r3
 8010548:	f7f4 f8d0 	bl	80046ec <HAL_UART_GetState>
 801054c:	4603      	mov	r3, r0
 801054e:	2b20      	cmp	r3, #32
 8010550:	d1f7      	bne.n	8010542 <GNSS_GetPVTData+0x3a>
	{

	}
}
 8010552:	bf00      	nop
 8010554:	bf00      	nop
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}
 801055c:	0801295c 	.word	0x0801295c
 8010560:	200010a0 	.word	0x200010a0
 8010564:	00000000 	.word	0x00000000

08010568 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8010568:	b580      	push	{r7, lr}
 801056a:	b08a      	sub	sp, #40	; 0x28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[10];
 8010570:	4b94      	ldr	r3, [pc, #592]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 8010572:	7c9a      	ldrb	r2, [r3, #18]
 8010574:	4b94      	ldr	r3, [pc, #592]	; (80107c8 <GNSS_ParsePVTData+0x260>)
 8010576:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.uartWorkingBuffer[10];
 8010578:	4b92      	ldr	r3, [pc, #584]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 801057a:	7c9a      	ldrb	r2, [r3, #18]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[11];
 8010582:	4b90      	ldr	r3, [pc, #576]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 8010584:	7cda      	ldrb	r2, [r3, #19]
 8010586:	4b90      	ldr	r3, [pc, #576]	; (80107c8 <GNSS_ParsePVTData+0x260>)
 8010588:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.uartWorkingBuffer[11];
 801058a:	4b8e      	ldr	r3, [pc, #568]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 801058c:	7cda      	ldrb	r2, [r3, #19]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->year = uShort.uShort;
 8010594:	4b8c      	ldr	r3, [pc, #560]	; (80107c8 <GNSS_ParsePVTData+0x260>)
 8010596:	881a      	ldrh	r2, [r3, #0]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[12];
 801059e:	4b89      	ldr	r3, [pc, #548]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105a0:	7d1a      	ldrb	r2, [r3, #20]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[13];
 80105a8:	4b86      	ldr	r3, [pc, #536]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105aa:	7d5a      	ldrb	r2, [r3, #21]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[14];
 80105b2:	4b84      	ldr	r3, [pc, #528]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105b4:	7d9a      	ldrb	r2, [r3, #22]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[15];
 80105bc:	4b81      	ldr	r3, [pc, #516]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105be:	7dda      	ldrb	r2, [r3, #23]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[16];
 80105c6:	4b7f      	ldr	r3, [pc, #508]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105c8:	7e1a      	ldrb	r2, [r3, #24]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = GNSS_Handle.uartWorkingBuffer[26];
 80105d0:	4b7c      	ldr	r3, [pc, #496]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105d2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

	for (int var = 0; var < 4; ++var) {
 80105dc:	2300      	movs	r3, #0
 80105de:	627b      	str	r3, [r7, #36]	; 0x24
 80105e0:	e017      	b.n	8010612 <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 80105e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e4:	331e      	adds	r3, #30
 80105e6:	4a77      	ldr	r2, [pc, #476]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105e8:	4413      	add	r3, r2
 80105ea:	7a19      	ldrb	r1, [r3, #8]
 80105ec:	4a77      	ldr	r2, [pc, #476]	; (80107cc <GNSS_ParsePVTData+0x264>)
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	4413      	add	r3, r2
 80105f2:	460a      	mov	r2, r1
 80105f4:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.uartWorkingBuffer[var + 30];
 80105f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f8:	331e      	adds	r3, #30
 80105fa:	4a72      	ldr	r2, [pc, #456]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80105fc:	4413      	add	r3, r2
 80105fe:	7a19      	ldrb	r1, [r3, #8]
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010604:	4413      	add	r3, r2
 8010606:	337c      	adds	r3, #124	; 0x7c
 8010608:	460a      	mov	r2, r1
 801060a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060e:	3301      	adds	r3, #1
 8010610:	627b      	str	r3, [r7, #36]	; 0x24
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	2b03      	cmp	r3, #3
 8010616:	dde4      	ble.n	80105e2 <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 8010618:	4b6c      	ldr	r3, [pc, #432]	; (80107cc <GNSS_ParsePVTData+0x264>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8010620:	4b6a      	ldr	r3, [pc, #424]	; (80107cc <GNSS_ParsePVTData+0x264>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4618      	mov	r0, r3
 8010626:	f7f0 fb03 	bl	8000c30 <__aeabi_i2f>
 801062a:	4603      	mov	r3, r0
 801062c:	4968      	ldr	r1, [pc, #416]	; (80107d0 <GNSS_ParsePVTData+0x268>)
 801062e:	4618      	mov	r0, r3
 8010630:	f7f0 fc06 	bl	8000e40 <__aeabi_fdiv>
 8010634:	4603      	mov	r3, r0
 8010636:	461a      	mov	r2, r3
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	for (int var = 0; var < 4; ++var) {
 801063e:	2300      	movs	r3, #0
 8010640:	623b      	str	r3, [r7, #32]
 8010642:	e017      	b.n	8010674 <GNSS_ParsePVTData+0x10c>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 34];
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	3322      	adds	r3, #34	; 0x22
 8010648:	4a5e      	ldr	r2, [pc, #376]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 801064a:	4413      	add	r3, r2
 801064c:	7a19      	ldrb	r1, [r3, #8]
 801064e:	4a5f      	ldr	r2, [pc, #380]	; (80107cc <GNSS_ParsePVTData+0x264>)
 8010650:	6a3b      	ldr	r3, [r7, #32]
 8010652:	4413      	add	r3, r2
 8010654:	460a      	mov	r2, r1
 8010656:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.uartWorkingBuffer[var + 34];
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	3322      	adds	r3, #34	; 0x22
 801065c:	4a59      	ldr	r2, [pc, #356]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 801065e:	4413      	add	r3, r2
 8010660:	7a19      	ldrb	r1, [r3, #8]
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	4413      	add	r3, r2
 8010668:	3384      	adds	r3, #132	; 0x84
 801066a:	460a      	mov	r2, r1
 801066c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 801066e:	6a3b      	ldr	r3, [r7, #32]
 8010670:	3301      	adds	r3, #1
 8010672:	623b      	str	r3, [r7, #32]
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	2b03      	cmp	r3, #3
 8010678:	dde4      	ble.n	8010644 <GNSS_ParsePVTData+0xdc>
	}
	GNSS->lat = iLong.iLong;
 801067a:	4b54      	ldr	r3, [pc, #336]	; (80107cc <GNSS_ParsePVTData+0x264>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8010684:	4b51      	ldr	r3, [pc, #324]	; (80107cc <GNSS_ParsePVTData+0x264>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4618      	mov	r0, r3
 801068a:	f7f0 fad1 	bl	8000c30 <__aeabi_i2f>
 801068e:	4603      	mov	r3, r0
 8010690:	494f      	ldr	r1, [pc, #316]	; (80107d0 <GNSS_ParsePVTData+0x268>)
 8010692:	4618      	mov	r0, r3
 8010694:	f7f0 fbd4 	bl	8000e40 <__aeabi_fdiv>
 8010698:	4603      	mov	r3, r0
 801069a:	461a      	mov	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	for (int var = 0; var < 4; ++var) {
 80106a2:	2300      	movs	r3, #0
 80106a4:	61fb      	str	r3, [r7, #28]
 80106a6:	e00c      	b.n	80106c2 <GNSS_ParsePVTData+0x15a>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 38];
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	3326      	adds	r3, #38	; 0x26
 80106ac:	4a45      	ldr	r2, [pc, #276]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80106ae:	4413      	add	r3, r2
 80106b0:	7a19      	ldrb	r1, [r3, #8]
 80106b2:	4a46      	ldr	r2, [pc, #280]	; (80107cc <GNSS_ParsePVTData+0x264>)
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	4413      	add	r3, r2
 80106b8:	460a      	mov	r2, r1
 80106ba:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	3301      	adds	r3, #1
 80106c0:	61fb      	str	r3, [r7, #28]
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	2b03      	cmp	r3, #3
 80106c6:	ddef      	ble.n	80106a8 <GNSS_ParsePVTData+0x140>
	}
	GNSS->height = iLong.iLong;
 80106c8:	4b40      	ldr	r3, [pc, #256]	; (80107cc <GNSS_ParsePVTData+0x264>)
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 80106d2:	2300      	movs	r3, #0
 80106d4:	61bb      	str	r3, [r7, #24]
 80106d6:	e017      	b.n	8010708 <GNSS_ParsePVTData+0x1a0>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	332a      	adds	r3, #42	; 0x2a
 80106dc:	4a39      	ldr	r2, [pc, #228]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80106de:	4413      	add	r3, r2
 80106e0:	7a19      	ldrb	r1, [r3, #8]
 80106e2:	4a3a      	ldr	r2, [pc, #232]	; (80107cc <GNSS_ParsePVTData+0x264>)
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	4413      	add	r3, r2
 80106e8:	460a      	mov	r2, r1
 80106ea:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 80106ec:	69bb      	ldr	r3, [r7, #24]
 80106ee:	332a      	adds	r3, #42	; 0x2a
 80106f0:	4a34      	ldr	r2, [pc, #208]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 80106f2:	4413      	add	r3, r2
 80106f4:	7a19      	ldrb	r1, [r3, #8]
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	4413      	add	r3, r2
 80106fc:	3398      	adds	r3, #152	; 0x98
 80106fe:	460a      	mov	r2, r1
 8010700:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	3301      	adds	r3, #1
 8010706:	61bb      	str	r3, [r7, #24]
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	2b03      	cmp	r3, #3
 801070c:	dde4      	ble.n	80106d8 <GNSS_ParsePVTData+0x170>
	}
	GNSS->hMSL = iLong.iLong;
 801070e:	4b2f      	ldr	r3, [pc, #188]	; (80107cc <GNSS_ParsePVTData+0x264>)
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 8010718:	2300      	movs	r3, #0
 801071a:	617b      	str	r3, [r7, #20]
 801071c:	e00c      	b.n	8010738 <GNSS_ParsePVTData+0x1d0>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 46];
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	332e      	adds	r3, #46	; 0x2e
 8010722:	4a28      	ldr	r2, [pc, #160]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 8010724:	4413      	add	r3, r2
 8010726:	7a19      	ldrb	r1, [r3, #8]
 8010728:	4a2a      	ldr	r2, [pc, #168]	; (80107d4 <GNSS_ParsePVTData+0x26c>)
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	4413      	add	r3, r2
 801072e:	460a      	mov	r2, r1
 8010730:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	3301      	adds	r3, #1
 8010736:	617b      	str	r3, [r7, #20]
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	2b03      	cmp	r3, #3
 801073c:	ddef      	ble.n	801071e <GNSS_ParsePVTData+0x1b6>
	}
	GNSS->hAcc = uLong.uLong;
 801073e:	4b25      	ldr	r3, [pc, #148]	; (80107d4 <GNSS_ParsePVTData+0x26c>)
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 8010748:	2300      	movs	r3, #0
 801074a:	613b      	str	r3, [r7, #16]
 801074c:	e00c      	b.n	8010768 <GNSS_ParsePVTData+0x200>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 50];
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	3332      	adds	r3, #50	; 0x32
 8010752:	4a1c      	ldr	r2, [pc, #112]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 8010754:	4413      	add	r3, r2
 8010756:	7a19      	ldrb	r1, [r3, #8]
 8010758:	4a1e      	ldr	r2, [pc, #120]	; (80107d4 <GNSS_ParsePVTData+0x26c>)
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	4413      	add	r3, r2
 801075e:	460a      	mov	r2, r1
 8010760:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	3301      	adds	r3, #1
 8010766:	613b      	str	r3, [r7, #16]
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	2b03      	cmp	r3, #3
 801076c:	ddef      	ble.n	801074e <GNSS_ParsePVTData+0x1e6>
	}
	GNSS->vAcc = uLong.uLong;
 801076e:	4b19      	ldr	r3, [pc, #100]	; (80107d4 <GNSS_ParsePVTData+0x26c>)
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 8010778:	2300      	movs	r3, #0
 801077a:	60fb      	str	r3, [r7, #12]
 801077c:	e017      	b.n	80107ae <GNSS_ParsePVTData+0x246>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3342      	adds	r3, #66	; 0x42
 8010782:	4a10      	ldr	r2, [pc, #64]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 8010784:	4413      	add	r3, r2
 8010786:	7a19      	ldrb	r1, [r3, #8]
 8010788:	4a10      	ldr	r2, [pc, #64]	; (80107cc <GNSS_ParsePVTData+0x264>)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	4413      	add	r3, r2
 801078e:	460a      	mov	r2, r1
 8010790:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	3342      	adds	r3, #66	; 0x42
 8010796:	4a0b      	ldr	r2, [pc, #44]	; (80107c4 <GNSS_ParsePVTData+0x25c>)
 8010798:	4413      	add	r3, r2
 801079a:	7a19      	ldrb	r1, [r3, #8]
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	4413      	add	r3, r2
 80107a2:	33a8      	adds	r3, #168	; 0xa8
 80107a4:	460a      	mov	r2, r1
 80107a6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	3301      	adds	r3, #1
 80107ac:	60fb      	str	r3, [r7, #12]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2b03      	cmp	r3, #3
 80107b2:	dde4      	ble.n	801077e <GNSS_ParsePVTData+0x216>
	}
	GNSS->gSpeed = iLong.iLong;
 80107b4:	4b05      	ldr	r3, [pc, #20]	; (80107cc <GNSS_ParsePVTData+0x264>)
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (int var = 0; var < 4; ++var) {
 80107be:	2300      	movs	r3, #0
 80107c0:	60bb      	str	r3, [r7, #8]
 80107c2:	e016      	b.n	80107f2 <GNSS_ParsePVTData+0x28a>
 80107c4:	20001098 	.word	0x20001098
 80107c8:	200013d0 	.word	0x200013d0
 80107cc:	200013d4 	.word	0x200013d4
 80107d0:	4b189680 	.word	0x4b189680
 80107d4:	200013dc 	.word	0x200013dc
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 70];
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	3346      	adds	r3, #70	; 0x46
 80107dc:	4a14      	ldr	r2, [pc, #80]	; (8010830 <GNSS_ParsePVTData+0x2c8>)
 80107de:	4413      	add	r3, r2
 80107e0:	7a19      	ldrb	r1, [r3, #8]
 80107e2:	4a14      	ldr	r2, [pc, #80]	; (8010834 <GNSS_ParsePVTData+0x2cc>)
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	4413      	add	r3, r2
 80107e8:	460a      	mov	r2, r1
 80107ea:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	3301      	adds	r3, #1
 80107f0:	60bb      	str	r3, [r7, #8]
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	2b03      	cmp	r3, #3
 80107f6:	ddef      	ble.n	80107d8 <GNSS_ParsePVTData+0x270>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 80107f8:	4b0e      	ldr	r3, [pc, #56]	; (8010834 <GNSS_ParsePVTData+0x2cc>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ef fe11 	bl	8000424 <__aeabi_i2d>
 8010802:	a309      	add	r3, pc, #36	; (adr r3, 8010828 <GNSS_ParsePVTData+0x2c0>)
 8010804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010808:	f7ef fe76 	bl	80004f8 <__aeabi_dmul>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4610      	mov	r0, r2
 8010812:	4619      	mov	r1, r3
 8010814:	f7f0 f90a 	bl	8000a2c <__aeabi_d2iz>
 8010818:	4602      	mov	r2, r0
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8010820:	bf00      	nop
 8010822:	3728      	adds	r7, #40	; 0x28
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}
 8010828:	88e368f1 	.word	0x88e368f1
 801082c:	3ee4f8b5 	.word	0x3ee4f8b5
 8010830:	20001098 	.word	0x20001098
 8010834:	200013d4 	.word	0x200013d4

08010838 <GNSS_LoadConfig>:


void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	221c      	movs	r2, #28
 8010846:	4932      	ldr	r1, [pc, #200]	; (8010910 <GNSS_LoadConfig+0xd8>)
 8010848:	4618      	mov	r0, r3
 801084a:	f7f3 fd25 	bl	8004298 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 801084e:	bf00      	nop
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4618      	mov	r0, r3
 8010856:	f7f3 ff49 	bl	80046ec <HAL_UART_GetState>
 801085a:	4603      	mov	r3, r0
 801085c:	2b20      	cmp	r3, #32
 801085e:	d1f7      	bne.n	8010850 <GNSS_LoadConfig+0x18>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6818      	ldr	r0, [r3, #0]
 8010864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010868:	2264      	movs	r2, #100	; 0x64
 801086a:	492a      	ldr	r1, [pc, #168]	; (8010914 <GNSS_LoadConfig+0xdc>)
 801086c:	f7f3 fbfd 	bl	800406a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 8010870:	bf00      	nop
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4618      	mov	r0, r3
 8010878:	f7f3 ff38 	bl	80046ec <HAL_UART_GetState>
 801087c:	4603      	mov	r3, r0
 801087e:	2b20      	cmp	r3, #32
 8010880:	d1f7      	bne.n	8010872 <GNSS_LoadConfig+0x3a>
	{

	}


	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	221c      	movs	r2, #28
 8010888:	4923      	ldr	r1, [pc, #140]	; (8010918 <GNSS_LoadConfig+0xe0>)
 801088a:	4618      	mov	r0, r3
 801088c:	f7f3 fd04 	bl	8004298 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 8010890:	bf00      	nop
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4618      	mov	r0, r3
 8010898:	f7f3 ff28 	bl	80046ec <HAL_UART_GetState>
 801089c:	4603      	mov	r3, r0
 801089e:	2b20      	cmp	r3, #32
 80108a0:	d1f7      	bne.n	8010892 <GNSS_LoadConfig+0x5a>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6818      	ldr	r0, [r3, #0]
 80108a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108aa:	2264      	movs	r2, #100	; 0x64
 80108ac:	4919      	ldr	r1, [pc, #100]	; (8010914 <GNSS_LoadConfig+0xdc>)
 80108ae:	f7f3 fbdc 	bl	800406a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 80108b2:	bf00      	nop
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f3 ff17 	bl	80046ec <HAL_UART_GetState>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b20      	cmp	r3, #32
 80108c2:	d1f7      	bne.n	80108b4 <GNSS_LoadConfig+0x7c>
	{

	}


	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	222c      	movs	r2, #44	; 0x2c
 80108ca:	4914      	ldr	r1, [pc, #80]	; (801091c <GNSS_LoadConfig+0xe4>)
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f3 fce3 	bl	8004298 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 80108d2:	bf00      	nop
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4618      	mov	r0, r3
 80108da:	f7f3 ff07 	bl	80046ec <HAL_UART_GetState>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b20      	cmp	r3, #32
 80108e2:	d1f7      	bne.n	80108d4 <GNSS_LoadConfig+0x9c>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6818      	ldr	r0, [r3, #0]
 80108e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108ec:	2264      	movs	r2, #100	; 0x64
 80108ee:	4909      	ldr	r1, [pc, #36]	; (8010914 <GNSS_LoadConfig+0xdc>)
 80108f0:	f7f3 fbbb 	bl	800406a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 80108f4:	bf00      	nop
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7f3 fef6 	bl	80046ec <HAL_UART_GetState>
 8010900:	4603      	mov	r3, r0
 8010902:	2b20      	cmp	r3, #32
 8010904:	d1f7      	bne.n	80108f6 <GNSS_LoadConfig+0xbe>
	{

	}
}
 8010906:	bf00      	nop
 8010908:	bf00      	nop
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	080128f8 	.word	0x080128f8
 8010914:	200010a0 	.word	0x200010a0
 8010918:	08012914 	.word	0x08012914
 801091c:	08012930 	.word	0x08012930

08010920 <GetNextLowerTxDr>:
 */
static uint16_t ChannelsDefaultMask[CHANNELS_MASK_SIZE];

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8010920:	b480      	push	{r7}
 8010922:	b085      	sub	sp, #20
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	460a      	mov	r2, r1
 801092a:	71fb      	strb	r3, [r7, #7]
 801092c:	4613      	mov	r3, r2
 801092e:	71bb      	strb	r3, [r7, #6]
    uint8_t nextLowerDr = 0;
 8010930:	2300      	movs	r3, #0
 8010932:	73fb      	strb	r3, [r7, #15]

    if( dr == minDr )
 8010934:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8010938:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801093c:	429a      	cmp	r2, r3
 801093e:	d102      	bne.n	8010946 <GetNextLowerTxDr+0x26>
    {
        nextLowerDr = minDr;
 8010940:	79bb      	ldrb	r3, [r7, #6]
 8010942:	73fb      	strb	r3, [r7, #15]
 8010944:	e002      	b.n	801094c <GetNextLowerTxDr+0x2c>
    }
    else
    {
        nextLowerDr = dr - 1;
 8010946:	79fb      	ldrb	r3, [r7, #7]
 8010948:	3b01      	subs	r3, #1
 801094a:	73fb      	strb	r3, [r7, #15]
    }
    return nextLowerDr;
 801094c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010950:	4618      	mov	r0, r3
 8010952:	3714      	adds	r7, #20
 8010954:	46bd      	mov	sp, r7
 8010956:	bc80      	pop	{r7}
 8010958:	4770      	bx	lr
	...

0801095c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801095c:	b480      	push	{r7}
 801095e:	b083      	sub	sp, #12
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8010964:	4a09      	ldr	r2, [pc, #36]	; (801098c <GetBandwidth+0x30>)
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801096c:	4a08      	ldr	r2, [pc, #32]	; (8010990 <GetBandwidth+0x34>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d004      	beq.n	801097c <GetBandwidth+0x20>
 8010972:	4a08      	ldr	r2, [pc, #32]	; (8010994 <GetBandwidth+0x38>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d003      	beq.n	8010980 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8010978:	2300      	movs	r3, #0
 801097a:	e002      	b.n	8010982 <GetBandwidth+0x26>
        case 250000:
            return 1;
 801097c:	2301      	movs	r3, #1
 801097e:	e000      	b.n	8010982 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8010980:	2302      	movs	r3, #2
    }
}
 8010982:	4618      	mov	r0, r3
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	bc80      	pop	{r7}
 801098a:	4770      	bx	lr
 801098c:	0801296c 	.word	0x0801296c
 8010990:	0003d090 	.word	0x0003d090
 8010994:	0007a120 	.word	0x0007a120

08010998 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8010998:	b480      	push	{r7}
 801099a:	b085      	sub	sp, #20
 801099c:	af00      	add	r7, sp, #0
 801099e:	603b      	str	r3, [r7, #0]
 80109a0:	4603      	mov	r3, r0
 80109a2:	71fb      	strb	r3, [r7, #7]
 80109a4:	460b      	mov	r3, r1
 80109a6:	71bb      	strb	r3, [r7, #6]
 80109a8:	4613      	mov	r3, r2
 80109aa:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80109ac:	79fb      	ldrb	r3, [r7, #7]
 80109ae:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80109b0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80109b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80109b8:	4293      	cmp	r3, r2
 80109ba:	bfb8      	it	lt
 80109bc:	4613      	movlt	r3, r2
 80109be:	73fb      	strb	r3, [r7, #15]

    return txPowerResult;
 80109c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bc80      	pop	{r7}
 80109cc:	4770      	bx	lr
	...

080109d0 <VerifyTxFreq>:

static bool VerifyTxFreq( uint32_t freq, uint8_t *band )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80109da:	4b2d      	ldr	r3, [pc, #180]	; (8010a90 <VerifyTxFreq+0xc0>)
 80109dc:	6a1b      	ldr	r3, [r3, #32]
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	4798      	blx	r3
 80109e2:	4603      	mov	r3, r0
 80109e4:	f083 0301 	eor.w	r3, r3, #1
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d001      	beq.n	80109f2 <VerifyTxFreq+0x22>
    {
        return false;
 80109ee:	2300      	movs	r3, #0
 80109f0:	e04a      	b.n	8010a88 <VerifyTxFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4a27      	ldr	r2, [pc, #156]	; (8010a94 <VerifyTxFreq+0xc4>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d307      	bcc.n	8010a0a <VerifyTxFreq+0x3a>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4a26      	ldr	r2, [pc, #152]	; (8010a98 <VerifyTxFreq+0xc8>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d803      	bhi.n	8010a0a <VerifyTxFreq+0x3a>
    {
        *band = 2;
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	2202      	movs	r2, #2
 8010a06:	701a      	strb	r2, [r3, #0]
 8010a08:	e03d      	b.n	8010a86 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4a22      	ldr	r2, [pc, #136]	; (8010a98 <VerifyTxFreq+0xc8>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d907      	bls.n	8010a22 <VerifyTxFreq+0x52>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4a21      	ldr	r2, [pc, #132]	; (8010a9c <VerifyTxFreq+0xcc>)
 8010a16:	4293      	cmp	r3, r2
 8010a18:	d803      	bhi.n	8010a22 <VerifyTxFreq+0x52>
    {
        *band = 0;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	701a      	strb	r2, [r3, #0]
 8010a20:	e031      	b.n	8010a86 <VerifyTxFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	4a1d      	ldr	r2, [pc, #116]	; (8010a9c <VerifyTxFreq+0xcc>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d907      	bls.n	8010a3a <VerifyTxFreq+0x6a>
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4a1c      	ldr	r2, [pc, #112]	; (8010aa0 <VerifyTxFreq+0xd0>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d803      	bhi.n	8010a3a <VerifyTxFreq+0x6a>
    {
        *band = 1;
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	2201      	movs	r2, #1
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	e025      	b.n	8010a86 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4a19      	ldr	r2, [pc, #100]	; (8010aa4 <VerifyTxFreq+0xd4>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d907      	bls.n	8010a52 <VerifyTxFreq+0x82>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	4a18      	ldr	r2, [pc, #96]	; (8010aa8 <VerifyTxFreq+0xd8>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d803      	bhi.n	8010a52 <VerifyTxFreq+0x82>
    {
        *band = 2;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	2202      	movs	r2, #2
 8010a4e:	701a      	strb	r2, [r3, #0]
 8010a50:	e019      	b.n	8010a86 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4a15      	ldr	r2, [pc, #84]	; (8010aac <VerifyTxFreq+0xdc>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d907      	bls.n	8010a6a <VerifyTxFreq+0x9a>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4a14      	ldr	r2, [pc, #80]	; (8010ab0 <VerifyTxFreq+0xe0>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d803      	bhi.n	8010a6a <VerifyTxFreq+0x9a>
    {
        *band = 3;
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	2203      	movs	r2, #3
 8010a66:	701a      	strb	r2, [r3, #0]
 8010a68:	e00d      	b.n	8010a86 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4a11      	ldr	r2, [pc, #68]	; (8010ab4 <VerifyTxFreq+0xe4>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d307      	bcc.n	8010a82 <VerifyTxFreq+0xb2>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4a10      	ldr	r2, [pc, #64]	; (8010ab8 <VerifyTxFreq+0xe8>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d803      	bhi.n	8010a82 <VerifyTxFreq+0xb2>
    {
        *band = 4;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2204      	movs	r2, #4
 8010a7e:	701a      	strb	r2, [r3, #0]
 8010a80:	e001      	b.n	8010a86 <VerifyTxFreq+0xb6>
    }
    else
    {
        return false;
 8010a82:	2300      	movs	r3, #0
 8010a84:	e000      	b.n	8010a88 <VerifyTxFreq+0xb8>
    }
    return true;
 8010a86:	2301      	movs	r3, #1
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3708      	adds	r7, #8
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	08012794 	.word	0x08012794
 8010a94:	337055c0 	.word	0x337055c0
 8010a98:	338eda3f 	.word	0x338eda3f
 8010a9c:	33bca100 	.word	0x33bca100
 8010aa0:	33c5c8c0 	.word	0x33c5c8c0
 8010aa4:	33c74f5f 	.word	0x33c74f5f
 8010aa8:	33cef080 	.word	0x33cef080
 8010aac:	33d1fdbf 	.word	0x33d1fdbf
 8010ab0:	33d5ce50 	.word	0x33d5ce50
 8010ab4:	33d691a0 	.word	0x33d691a0
 8010ab8:	33db2580 	.word	0x33db2580

08010abc <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	60ba      	str	r2, [r7, #8]
 8010ac4:	607b      	str	r3, [r7, #4]
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	73fb      	strb	r3, [r7, #15]
 8010aca:	460b      	mov	r3, r1
 8010acc:	73bb      	strb	r3, [r7, #14]
    uint8_t nbEnabledChannels = 0;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	75fb      	strb	r3, [r7, #23]
    uint8_t delayTransmission = 0;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	757b      	strb	r3, [r7, #21]
 8010ada:	2300      	movs	r3, #0
 8010adc:	753b      	strb	r3, [r7, #20]
 8010ade:	e085      	b.n	8010bec <CountNbOfEnabledChannels+0x130>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	74fb      	strb	r3, [r7, #19]
 8010ae4:	e079      	b.n	8010bda <CountNbOfEnabledChannels+0x11e>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8010ae6:	7d3b      	ldrb	r3, [r7, #20]
 8010ae8:	005b      	lsls	r3, r3, #1
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	4413      	add	r3, r2
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	461a      	mov	r2, r3
 8010af2:	7cfb      	ldrb	r3, [r7, #19]
 8010af4:	fa42 f303 	asr.w	r3, r2, r3
 8010af8:	f003 0301 	and.w	r3, r3, #1
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d069      	beq.n	8010bd4 <CountNbOfEnabledChannels+0x118>
            {
                if( channels[i + j].Frequency == 0 )
 8010b00:	7d7a      	ldrb	r2, [r7, #21]
 8010b02:	7cfb      	ldrb	r3, [r7, #19]
 8010b04:	4413      	add	r3, r2
 8010b06:	461a      	mov	r2, r3
 8010b08:	4613      	mov	r3, r2
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	461a      	mov	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	4413      	add	r3, r2
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d056      	beq.n	8010bca <CountNbOfEnabledChannels+0x10e>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
 8010b1e:	f083 0301 	eor.w	r3, r3, #1
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d007      	beq.n	8010b38 <CountNbOfEnabledChannels+0x7c>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8010b28:	7cfb      	ldrb	r3, [r7, #19]
 8010b2a:	2207      	movs	r2, #7
 8010b2c:	fa42 f303 	asr.w	r3, r2, r3
 8010b30:	f003 0301 	and.w	r3, r3, #1
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d04a      	beq.n	8010bce <CountNbOfEnabledChannels+0x112>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010b38:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8010b3c:	7d7a      	ldrb	r2, [r7, #21]
 8010b3e:	7cfb      	ldrb	r3, [r7, #19]
 8010b40:	4413      	add	r3, r2
 8010b42:	461a      	mov	r2, r3
 8010b44:	4613      	mov	r3, r2
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	4413      	add	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4413      	add	r3, r2
 8010b52:	7a1b      	ldrb	r3, [r3, #8]
 8010b54:	f343 0303 	sbfx	r3, r3, #0, #4
 8010b58:	b25b      	sxtb	r3, r3
 8010b5a:	4619      	mov	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8010b5c:	7d7a      	ldrb	r2, [r7, #21]
 8010b5e:	7cfb      	ldrb	r3, [r7, #19]
 8010b60:	4413      	add	r3, r2
 8010b62:	461a      	mov	r2, r3
 8010b64:	4613      	mov	r3, r2
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4413      	add	r3, r2
 8010b72:	7a1b      	ldrb	r3, [r3, #8]
 8010b74:	f343 1303 	sbfx	r3, r3, #4, #4
 8010b78:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	f7f9 fa0f 	bl	8009f9e <RegionCommonValueInRange>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d025      	beq.n	8010bd2 <CountNbOfEnabledChannels+0x116>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8010b86:	7d7a      	ldrb	r2, [r7, #21]
 8010b88:	7cfb      	ldrb	r3, [r7, #19]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	461a      	mov	r2, r3
 8010b8e:	4613      	mov	r3, r2
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	4413      	add	r3, r2
 8010b94:	009b      	lsls	r3, r3, #2
 8010b96:	461a      	mov	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	7a5b      	ldrb	r3, [r3, #9]
 8010b9e:	011b      	lsls	r3, r3, #4
 8010ba0:	6a3a      	ldr	r2, [r7, #32]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d003      	beq.n	8010bb2 <CountNbOfEnabledChannels+0xf6>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8010baa:	7dbb      	ldrb	r3, [r7, #22]
 8010bac:	3301      	adds	r3, #1
 8010bae:	75bb      	strb	r3, [r7, #22]
                    continue;
 8010bb0:	e010      	b.n	8010bd4 <CountNbOfEnabledChannels+0x118>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8010bb2:	7dfb      	ldrb	r3, [r7, #23]
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	75fa      	strb	r2, [r7, #23]
 8010bb8:	461a      	mov	r2, r3
 8010bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bbc:	4413      	add	r3, r2
 8010bbe:	7d79      	ldrb	r1, [r7, #21]
 8010bc0:	7cfa      	ldrb	r2, [r7, #19]
 8010bc2:	440a      	add	r2, r1
 8010bc4:	b2d2      	uxtb	r2, r2
 8010bc6:	701a      	strb	r2, [r3, #0]
 8010bc8:	e004      	b.n	8010bd4 <CountNbOfEnabledChannels+0x118>
                    continue;
 8010bca:	bf00      	nop
 8010bcc:	e002      	b.n	8010bd4 <CountNbOfEnabledChannels+0x118>
                        continue;
 8010bce:	bf00      	nop
 8010bd0:	e000      	b.n	8010bd4 <CountNbOfEnabledChannels+0x118>
                    continue;
 8010bd2:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8010bd4:	7cfb      	ldrb	r3, [r7, #19]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	74fb      	strb	r3, [r7, #19]
 8010bda:	7cfb      	ldrb	r3, [r7, #19]
 8010bdc:	2b0f      	cmp	r3, #15
 8010bde:	d982      	bls.n	8010ae6 <CountNbOfEnabledChannels+0x2a>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8010be0:	7d7b      	ldrb	r3, [r7, #21]
 8010be2:	3310      	adds	r3, #16
 8010be4:	757b      	strb	r3, [r7, #21]
 8010be6:	7d3b      	ldrb	r3, [r7, #20]
 8010be8:	3301      	adds	r3, #1
 8010bea:	753b      	strb	r3, [r7, #20]
 8010bec:	7d7b      	ldrb	r3, [r7, #21]
 8010bee:	2b0f      	cmp	r3, #15
 8010bf0:	f67f af76 	bls.w	8010ae0 <CountNbOfEnabledChannels+0x24>
            }
        }
    }

    *delayTx = delayTransmission;
 8010bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf6:	7dba      	ldrb	r2, [r7, #22]
 8010bf8:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8010bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3718      	adds	r7, #24
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	60bb      	str	r3, [r7, #8]

    switch( getPhy->Attribute )
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	2b32      	cmp	r3, #50	; 0x32
 8010c16:	f200 80e6 	bhi.w	8010de6 <RegionEU868GetPhyParam+0x1e2>
 8010c1a:	a201      	add	r2, pc, #4	; (adr r2, 8010c20 <RegionEU868GetPhyParam+0x1c>)
 8010c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c20:	08010ced 	.word	0x08010ced
 8010c24:	08010cf3 	.word	0x08010cf3
 8010c28:	08010de7 	.word	0x08010de7
 8010c2c:	08010cf9 	.word	0x08010cf9
 8010c30:	08010de7 	.word	0x08010de7
 8010c34:	08010cff 	.word	0x08010cff
 8010c38:	08010de7 	.word	0x08010de7
 8010c3c:	08010de7 	.word	0x08010de7
 8010c40:	08010d19 	.word	0x08010d19
 8010c44:	08010d1f 	.word	0x08010d1f
 8010c48:	08010d2f 	.word	0x08010d2f
 8010c4c:	08010d3f 	.word	0x08010d3f
 8010c50:	08010d45 	.word	0x08010d45
 8010c54:	08010d4d 	.word	0x08010d4d
 8010c58:	08010d55 	.word	0x08010d55
 8010c5c:	08010d5d 	.word	0x08010d5d
 8010c60:	08010d65 	.word	0x08010d65
 8010c64:	08010d6d 	.word	0x08010d6d
 8010c68:	08010d75 	.word	0x08010d75
 8010c6c:	08010d89 	.word	0x08010d89
 8010c70:	08010d8f 	.word	0x08010d8f
 8010c74:	08010d95 	.word	0x08010d95
 8010c78:	08010d9b 	.word	0x08010d9b
 8010c7c:	08010da1 	.word	0x08010da1
 8010c80:	08010da7 	.word	0x08010da7
 8010c84:	08010dad 	.word	0x08010dad
 8010c88:	08010db3 	.word	0x08010db3
 8010c8c:	08010db3 	.word	0x08010db3
 8010c90:	08010db9 	.word	0x08010db9
 8010c94:	08010dc1 	.word	0x08010dc1
 8010c98:	08010d05 	.word	0x08010d05
 8010c9c:	08010de7 	.word	0x08010de7
 8010ca0:	08010de7 	.word	0x08010de7
 8010ca4:	08010de7 	.word	0x08010de7
 8010ca8:	08010de7 	.word	0x08010de7
 8010cac:	08010de7 	.word	0x08010de7
 8010cb0:	08010de7 	.word	0x08010de7
 8010cb4:	08010de7 	.word	0x08010de7
 8010cb8:	08010de7 	.word	0x08010de7
 8010cbc:	08010de7 	.word	0x08010de7
 8010cc0:	08010de7 	.word	0x08010de7
 8010cc4:	08010de7 	.word	0x08010de7
 8010cc8:	08010de7 	.word	0x08010de7
 8010ccc:	08010de7 	.word	0x08010de7
 8010cd0:	08010dcd 	.word	0x08010dcd
 8010cd4:	08010dd3 	.word	0x08010dd3
 8010cd8:	08010de1 	.word	0x08010de1
 8010cdc:	08010de7 	.word	0x08010de7
 8010ce0:	08010de7 	.word	0x08010de7
 8010ce4:	08010dc7 	.word	0x08010dc7
 8010ce8:	08010dc7 	.word	0x08010dc7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8010cec:	2300      	movs	r3, #0
 8010cee:	60bb      	str	r3, [r7, #8]
            break;
 8010cf0:	e07a      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60bb      	str	r3, [r7, #8]
            break;
 8010cf6:	e077      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_TX_DR:
        {
            phyParam.Value = EU868_TX_MAX_DATARATE;
 8010cf8:	2307      	movs	r3, #7
 8010cfa:	60bb      	str	r3, [r7, #8]
            break;
 8010cfc:	e074      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8010cfe:	2305      	movs	r3, #5
 8010d00:	60bb      	str	r3, [r7, #8]
            break;
 8010d02:	e071      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010d0a:	2100      	movs	r1, #0
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7ff fe07 	bl	8010920 <GetNextLowerTxDr>
 8010d12:	4603      	mov	r3, r0
 8010d14:	60bb      	str	r3, [r7, #8]
            break;
 8010d16:	e067      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	60bb      	str	r3, [r7, #8]
            break;
 8010d1c:	e064      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010d24:	461a      	mov	r2, r3
 8010d26:	4b34      	ldr	r3, [pc, #208]	; (8010df8 <RegionEU868GetPhyParam+0x1f4>)
 8010d28:	5c9b      	ldrb	r3, [r3, r2]
 8010d2a:	60bb      	str	r3, [r7, #8]
            break;
 8010d2c:	e05c      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010d34:	461a      	mov	r2, r3
 8010d36:	4b31      	ldr	r3, [pc, #196]	; (8010dfc <RegionEU868GetPhyParam+0x1f8>)
 8010d38:	5c9b      	ldrb	r3, [r3, r2]
 8010d3a:	60bb      	str	r3, [r7, #8]
            break;
 8010d3c:	e054      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	60bb      	str	r3, [r7, #8]
            break;
 8010d42:	e051      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010d44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010d48:	60bb      	str	r3, [r7, #8]
            break;
 8010d4a:	e04d      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8010d4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d50:	60bb      	str	r3, [r7, #8]
            break;
 8010d52:	e049      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8010d54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010d58:	60bb      	str	r3, [r7, #8]
            break;
 8010d5a:	e045      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8010d5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8010d60:	60bb      	str	r3, [r7, #8]
            break;
 8010d62:	e041      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8010d64:	f241 7370 	movw	r3, #6000	; 0x1770
 8010d68:	60bb      	str	r3, [r7, #8]
            break;
 8010d6a:	e03d      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8010d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d70:	60bb      	str	r3, [r7, #8]
            break;
 8010d72:	e039      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8010d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d78:	4821      	ldr	r0, [pc, #132]	; (8010e00 <RegionEU868GetPhyParam+0x1fc>)
 8010d7a:	f7ff fabd 	bl	80102f8 <randr>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010d84:	60bb      	str	r3, [r7, #8]
            break;
 8010d86:	e02f      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	60bb      	str	r3, [r7, #8]
            break;
 8010d8c:	e02c      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8010d8e:	4b1d      	ldr	r3, [pc, #116]	; (8010e04 <RegionEU868GetPhyParam+0x200>)
 8010d90:	60bb      	str	r3, [r7, #8]
            break;
 8010d92:	e029      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60bb      	str	r3, [r7, #8]
            break;
 8010d98:	e026      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = ChannelsMask;
 8010d9a:	4b1b      	ldr	r3, [pc, #108]	; (8010e08 <RegionEU868GetPhyParam+0x204>)
 8010d9c:	60bb      	str	r3, [r7, #8]
            break;
 8010d9e:	e023      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = ChannelsDefaultMask;
 8010da0:	4b1a      	ldr	r3, [pc, #104]	; (8010e0c <RegionEU868GetPhyParam+0x208>)
 8010da2:	60bb      	str	r3, [r7, #8]
            break;
 8010da4:	e020      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010da6:	2310      	movs	r3, #16
 8010da8:	60bb      	str	r3, [r7, #8]
            break;
 8010daa:	e01d      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = Channels;
 8010dac:	4b18      	ldr	r3, [pc, #96]	; (8010e10 <RegionEU868GetPhyParam+0x20c>)
 8010dae:	60bb      	str	r3, [r7, #8]
            break;
 8010db0:	e01a      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	60bb      	str	r3, [r7, #8]
            break;
 8010db6:	e017      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010db8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010dbc:	60bb      	str	r3, [r7, #8]
            break;
 8010dbe:	e013      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8010dc0:	4b14      	ldr	r3, [pc, #80]	; (8010e14 <RegionEU868GetPhyParam+0x210>)
 8010dc2:	60bb      	str	r3, [r7, #8]
            break;
 8010dc4:	e010      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_NB_JOIN_TRIALS:
        case PHY_DEF_NB_JOIN_TRIALS:
        {
            phyParam.Value = EU868_DEFAULT_PHY_NB_JOIN_TRIALS;
 8010dc6:	2330      	movs	r3, #48	; 0x30
 8010dc8:	60bb      	str	r3, [r7, #8]
            break;
 8010dca:	e00d      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8010dcc:	4b0d      	ldr	r3, [pc, #52]	; (8010e04 <RegionEU868GetPhyParam+0x200>)
 8010dce:	60bb      	str	r3, [r7, #8]
            break;
 8010dd0:	e00a      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8010dd2:	2311      	movs	r3, #17
 8010dd4:	723b      	strb	r3, [r7, #8]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8010dd6:	2302      	movs	r3, #2
 8010dd8:	727b      	strb	r3, [r7, #9]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	72bb      	strb	r3, [r7, #10]
            break;
 8010dde:	e003      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8010de0:	2303      	movs	r3, #3
 8010de2:	60bb      	str	r3, [r7, #8]
            break;
 8010de4:	e000      	b.n	8010de8 <RegionEU868GetPhyParam+0x1e4>
        }
        default:
        {
            break;
 8010de6:	bf00      	nop
        }
    }

    return phyParam;
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	2300      	movs	r3, #0
 8010dee:	68fb      	ldr	r3, [r7, #12]
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	0801298c 	.word	0x0801298c
 8010dfc:	08012994 	.word	0x08012994
 8010e00:	fffffc18 	.word	0xfffffc18
 8010e04:	33d3e608 	.word	0x33d3e608
 8010e08:	20000988 	.word	0x20000988
 8010e0c:	2000098c 	.word	0x2000098c
 8010e10:	200008c8 	.word	0x200008c8
 8010e14:	4009999a 	.word	0x4009999a

08010e18 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	7858      	ldrb	r0, [r3, #1]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	4619      	mov	r1, r3
 8010e2a:	4a0a      	ldr	r2, [pc, #40]	; (8010e54 <RegionEU868SetBandTxDone+0x3c>)
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	440b      	add	r3, r1
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	4413      	add	r3, r2
 8010e36:	3309      	adds	r3, #9
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	011b      	lsls	r3, r3, #4
 8010e3c:	4a06      	ldr	r2, [pc, #24]	; (8010e58 <RegionEU868SetBandTxDone+0x40>)
 8010e3e:	1899      	adds	r1, r3, r2
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	461a      	mov	r2, r3
 8010e46:	f7f9 f94d 	bl	800a0e4 <RegionCommonSetBandTxDone>
}
 8010e4a:	bf00      	nop
 8010e4c:	3708      	adds	r7, #8
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	200008c8 	.word	0x200008c8
 8010e58:	200000a4 	.word	0x200000a4

08010e5c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitType_t type )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b08c      	sub	sp, #48	; 0x30
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	4603      	mov	r3, r0
 8010e64:	71fb      	strb	r3, [r7, #7]
    switch( type )
 8010e66:	79fb      	ldrb	r3, [r7, #7]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d002      	beq.n	8010e72 <RegionEU868InitDefaults+0x16>
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d01a      	beq.n	8010ea6 <RegionEU868InitDefaults+0x4a>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8010e70:	e022      	b.n	8010eb8 <RegionEU868InitDefaults+0x5c>
            Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010e72:	4b13      	ldr	r3, [pc, #76]	; (8010ec0 <RegionEU868InitDefaults+0x64>)
 8010e74:	4a13      	ldr	r2, [pc, #76]	; (8010ec4 <RegionEU868InitDefaults+0x68>)
 8010e76:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010e7c:	4b10      	ldr	r3, [pc, #64]	; (8010ec0 <RegionEU868InitDefaults+0x64>)
 8010e7e:	4a12      	ldr	r2, [pc, #72]	; (8010ec8 <RegionEU868InitDefaults+0x6c>)
 8010e80:	330c      	adds	r3, #12
 8010e82:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010e88:	4b0d      	ldr	r3, [pc, #52]	; (8010ec0 <RegionEU868InitDefaults+0x64>)
 8010e8a:	4a10      	ldr	r2, [pc, #64]	; (8010ecc <RegionEU868InitDefaults+0x70>)
 8010e8c:	3318      	adds	r3, #24
 8010e8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010e94:	4b0e      	ldr	r3, [pc, #56]	; (8010ed0 <RegionEU868InitDefaults+0x74>)
 8010e96:	2207      	movs	r2, #7
 8010e98:	801a      	strh	r2, [r3, #0]
            RegionCommonChanMaskCopy( ChannelsMask, ChannelsDefaultMask, 1 );
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	490c      	ldr	r1, [pc, #48]	; (8010ed0 <RegionEU868InitDefaults+0x74>)
 8010e9e:	480d      	ldr	r0, [pc, #52]	; (8010ed4 <RegionEU868InitDefaults+0x78>)
 8010ea0:	f7f9 f8fa 	bl	800a098 <RegionCommonChanMaskCopy>
            break;
 8010ea4:	e008      	b.n	8010eb8 <RegionEU868InitDefaults+0x5c>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
 8010ea6:	4b0b      	ldr	r3, [pc, #44]	; (8010ed4 <RegionEU868InitDefaults+0x78>)
 8010ea8:	881a      	ldrh	r2, [r3, #0]
 8010eaa:	4b09      	ldr	r3, [pc, #36]	; (8010ed0 <RegionEU868InitDefaults+0x74>)
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	4b08      	ldr	r3, [pc, #32]	; (8010ed4 <RegionEU868InitDefaults+0x78>)
 8010eb4:	801a      	strh	r2, [r3, #0]
            break;
 8010eb6:	bf00      	nop
        }
    }
}
 8010eb8:	bf00      	nop
 8010eba:	3730      	adds	r7, #48	; 0x30
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	200008c8 	.word	0x200008c8
 8010ec4:	08012448 	.word	0x08012448
 8010ec8:	08012454 	.word	0x08012454
 8010ecc:	08012460 	.word	0x08012460
 8010ed0:	2000098c 	.word	0x2000098c
 8010ed4:	20000988 	.word	0x20000988

08010ed8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	70fb      	strb	r3, [r7, #3]
    switch( phyAttribute )
 8010ee4:	78fb      	ldrb	r3, [r7, #3]
 8010ee6:	3b04      	subs	r3, #4
 8010ee8:	2b2d      	cmp	r3, #45	; 0x2d
 8010eea:	f200 80a3 	bhi.w	8011034 <RegionEU868Verify+0x15c>
 8010eee:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <RegionEU868Verify+0x1c>)
 8010ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef4:	08010fad 	.word	0x08010fad
 8010ef8:	08010fcb 	.word	0x08010fcb
 8010efc:	08010fe9 	.word	0x08010fe9
 8010f00:	08011007 	.word	0x08011007
 8010f04:	08011007 	.word	0x08011007
 8010f08:	08011035 	.word	0x08011035
 8010f0c:	08011035 	.word	0x08011035
 8010f10:	08011025 	.word	0x08011025
 8010f14:	08011035 	.word	0x08011035
 8010f18:	08011035 	.word	0x08011035
 8010f1c:	08011035 	.word	0x08011035
 8010f20:	08011035 	.word	0x08011035
 8010f24:	08011035 	.word	0x08011035
 8010f28:	08011035 	.word	0x08011035
 8010f2c:	08011035 	.word	0x08011035
 8010f30:	08011035 	.word	0x08011035
 8010f34:	08011035 	.word	0x08011035
 8010f38:	08011035 	.word	0x08011035
 8010f3c:	08011035 	.word	0x08011035
 8010f40:	08011035 	.word	0x08011035
 8010f44:	08011035 	.word	0x08011035
 8010f48:	08011035 	.word	0x08011035
 8010f4c:	08011035 	.word	0x08011035
 8010f50:	08011035 	.word	0x08011035
 8010f54:	08011035 	.word	0x08011035
 8010f58:	08011035 	.word	0x08011035
 8010f5c:	08011035 	.word	0x08011035
 8010f60:	08011035 	.word	0x08011035
 8010f64:	08011035 	.word	0x08011035
 8010f68:	08011035 	.word	0x08011035
 8010f6c:	08011035 	.word	0x08011035
 8010f70:	08011035 	.word	0x08011035
 8010f74:	08011035 	.word	0x08011035
 8010f78:	08011035 	.word	0x08011035
 8010f7c:	08011035 	.word	0x08011035
 8010f80:	08011035 	.word	0x08011035
 8010f84:	08011035 	.word	0x08011035
 8010f88:	08011035 	.word	0x08011035
 8010f8c:	08011035 	.word	0x08011035
 8010f90:	08011035 	.word	0x08011035
 8010f94:	08011035 	.word	0x08011035
 8010f98:	08011035 	.word	0x08011035
 8010f9c:	08011035 	.word	0x08011035
 8010fa0:	08011035 	.word	0x08011035
 8010fa4:	08011035 	.word	0x08011035
 8010fa8:	08011029 	.word	0x08011029
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f993 3000 	ldrsb.w	r3, [r3]
 8010fb2:	2207      	movs	r2, #7
 8010fb4:	2100      	movs	r1, #0
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7f8 fff1 	bl	8009f9e <RegionCommonValueInRange>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	bf14      	ite	ne
 8010fc2:	2301      	movne	r3, #1
 8010fc4:	2300      	moveq	r3, #0
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	e038      	b.n	801103c <RegionEU868Verify+0x164>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8010fd0:	2205      	movs	r2, #5
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7f8 ffe2 	bl	8009f9e <RegionCommonValueInRange>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	bf14      	ite	ne
 8010fe0:	2301      	movne	r3, #1
 8010fe2:	2300      	moveq	r3, #0
 8010fe4:	b2db      	uxtb	r3, r3
 8010fe6:	e029      	b.n	801103c <RegionEU868Verify+0x164>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f993 3000 	ldrsb.w	r3, [r3]
 8010fee:	2207      	movs	r2, #7
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7f8 ffd3 	bl	8009f9e <RegionCommonValueInRange>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bf14      	ite	ne
 8010ffe:	2301      	movne	r3, #1
 8011000:	2300      	moveq	r3, #0
 8011002:	b2db      	uxtb	r3, r3
 8011004:	e01a      	b.n	801103c <RegionEU868Verify+0x164>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f993 3000 	ldrsb.w	r3, [r3]
 801100c:	2207      	movs	r2, #7
 801100e:	2100      	movs	r1, #0
 8011010:	4618      	mov	r0, r3
 8011012:	f7f8 ffc4 	bl	8009f9e <RegionCommonValueInRange>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	bf14      	ite	ne
 801101c:	2301      	movne	r3, #1
 801101e:	2300      	moveq	r3, #0
 8011020:	b2db      	uxtb	r3, r3
 8011022:	e00b      	b.n	801103c <RegionEU868Verify+0x164>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8011024:	2301      	movs	r3, #1
 8011026:	e009      	b.n	801103c <RegionEU868Verify+0x164>
        }
        case PHY_NB_JOIN_TRIALS:
        {
            if( verify->NbJoinTrials < EU868_DEFAULT_PHY_NB_JOIN_TRIALS )
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	2b2f      	cmp	r3, #47	; 0x2f
 801102e:	d803      	bhi.n	8011038 <RegionEU868Verify+0x160>
            {
                return false;
 8011030:	2300      	movs	r3, #0
 8011032:	e003      	b.n	801103c <RegionEU868Verify+0x164>
            }
            break;
        }
        default:
            return false;
 8011034:	2300      	movs	r3, #0
 8011036:	e001      	b.n	801103c <RegionEU868Verify+0x164>
            break;
 8011038:	bf00      	nop
    }
    return true;
 801103a:	2301      	movs	r3, #1
}
 801103c:	4618      	mov	r0, r3
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b08a      	sub	sp, #40	; 0x28
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801104c:	2350      	movs	r3, #80	; 0x50
 801104e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	791b      	ldrb	r3, [r3, #4]
 8011056:	2b10      	cmp	r3, #16
 8011058:	d15c      	bne.n	8011114 <RegionEU868ApplyCFList+0xd0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801105a:	2300      	movs	r3, #0
 801105c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011060:	2303      	movs	r3, #3
 8011062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011066:	e050      	b.n	801110a <RegionEU868ApplyCFList+0xc6>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8011068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801106c:	2b07      	cmp	r3, #7
 801106e:	d824      	bhi.n	80110ba <RegionEU868ApplyCFList+0x76>
    {
        // Channel frequency
        newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011078:	4413      	add	r3, r2
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801107e:	69ba      	ldr	r2, [r7, #24]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6819      	ldr	r1, [r3, #0]
 8011084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011088:	3301      	adds	r3, #1
 801108a:	440b      	add	r3, r1
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	021b      	lsls	r3, r3, #8
 8011090:	4313      	orrs	r3, r2
 8011092:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8011094:	69ba      	ldr	r2, [r7, #24]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6819      	ldr	r1, [r3, #0]
 801109a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801109e:	3302      	adds	r3, #2
 80110a0:	440b      	add	r3, r1
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	041b      	lsls	r3, r3, #16
 80110a6:	4313      	orrs	r3, r2
 80110a8:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency *= 100;
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	2264      	movs	r2, #100	; 0x64
 80110ae:	fb02 f303 	mul.w	r3, r2, r3
 80110b2:	61bb      	str	r3, [r7, #24]

        // Initialize alternative frequency to 0
        newChannel.Rx1Frequency = 0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	61fb      	str	r3, [r7, #28]
 80110b8:	e006      	b.n	80110c8 <RegionEU868ApplyCFList+0x84>
        }
        else
        {
            newChannel.Frequency = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80110be:	2300      	movs	r3, #0
 80110c0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80110c4:	2300      	movs	r3, #0
 80110c6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00b      	beq.n	80110e6 <RegionEU868ApplyCFList+0xa2>
        {
            channelAdd.NewChannel = &newChannel;
 80110ce:	f107 0318 	add.w	r3, r7, #24
 80110d2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80110d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110d8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80110da:	f107 0310 	add.w	r3, r7, #16
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 fd8a 	bl	8011bf8 <RegionEU868ChannelAdd>
 80110e4:	e007      	b.n	80110f6 <RegionEU868ApplyCFList+0xb2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80110e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110ea:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80110ec:	f107 030c 	add.w	r3, r7, #12
 80110f0:	4618      	mov	r0, r3
 80110f2:	f000 fe47 	bl	8011d84 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80110f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110fa:	3303      	adds	r3, #3
 80110fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011104:	3301      	adds	r3, #1
 8011106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801110a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801110e:	2b0f      	cmp	r3, #15
 8011110:	d9aa      	bls.n	8011068 <RegionEU868ApplyCFList+0x24>
 8011112:	e000      	b.n	8011116 <RegionEU868ApplyCFList+0xd2>
        return;
 8011114:	bf00      	nop
        }
    }
}
 8011116:	3728      	adds	r7, #40	; 0x28
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	791b      	ldrb	r3, [r3, #4]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d002      	beq.n	8011132 <RegionEU868ChanMaskSet+0x16>
 801112c:	2b01      	cmp	r3, #1
 801112e:	d008      	beq.n	8011142 <RegionEU868ChanMaskSet+0x26>
 8011130:	e00f      	b.n	8011152 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	2201      	movs	r2, #1
 8011138:	4619      	mov	r1, r3
 801113a:	4809      	ldr	r0, [pc, #36]	; (8011160 <RegionEU868ChanMaskSet+0x44>)
 801113c:	f7f8 ffac 	bl	800a098 <RegionCommonChanMaskCopy>
            break;
 8011140:	e009      	b.n	8011156 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2201      	movs	r2, #1
 8011148:	4619      	mov	r1, r3
 801114a:	4806      	ldr	r0, [pc, #24]	; (8011164 <RegionEU868ChanMaskSet+0x48>)
 801114c:	f7f8 ffa4 	bl	800a098 <RegionCommonChanMaskCopy>
            break;
 8011150:	e001      	b.n	8011156 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 8011152:	2300      	movs	r3, #0
 8011154:	e000      	b.n	8011158 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8011156:	2301      	movs	r3, #1
}
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	20000988 	.word	0x20000988
 8011164:	2000098c 	.word	0x2000098c

08011168 <RegionEU868AdrNext>:

bool RegionEU868AdrNext( AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b088      	sub	sp, #32
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011176:	2300      	movs	r3, #0
 8011178:	77fb      	strb	r3, [r7, #31]
    int8_t datarate = adrNext->Datarate;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	7a1b      	ldrb	r3, [r3, #8]
 801117e:	77bb      	strb	r3, [r7, #30]
    int8_t txPower = adrNext->TxPower;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	7a5b      	ldrb	r3, [r3, #9]
 8011184:	777b      	strb	r3, [r7, #29]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	785b      	ldrb	r3, [r3, #1]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d03f      	beq.n	8011216 <RegionEU868AdrNext+0xae>
    {
        if( datarate == EU868_TX_MIN_DATARATE )
 8011196:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d105      	bne.n	80111aa <RegionEU868AdrNext+0x42>
        {
            *adrAckCounter = 0;
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	2200      	movs	r2, #0
 80111a2:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80111a4:	2300      	movs	r3, #0
 80111a6:	77fb      	strb	r3, [r7, #31]
 80111a8:	e035      	b.n	8011216 <RegionEU868AdrNext+0xae>
        }
        else
        {
            if( adrNext->AdrAckCounter >= EU868_ADR_ACK_LIMIT )
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	685b      	ldr	r3, [r3, #4]
 80111ae:	2b3f      	cmp	r3, #63	; 0x3f
 80111b0:	d904      	bls.n	80111bc <RegionEU868AdrNext+0x54>
            {
                adrAckReq = true;
 80111b2:	2301      	movs	r3, #1
 80111b4:	77fb      	strb	r3, [r7, #31]
                txPower = EU868_MAX_TX_POWER;
 80111b6:	2300      	movs	r3, #0
 80111b8:	777b      	strb	r3, [r7, #29]
 80111ba:	e001      	b.n	80111c0 <RegionEU868AdrNext+0x58>
            }
            else
            {
                adrAckReq = false;
 80111bc:	2300      	movs	r3, #0
 80111be:	77fb      	strb	r3, [r7, #31]
            }
            if( adrNext->AdrAckCounter >= ( EU868_ADR_ACK_LIMIT + EU868_ADR_ACK_DELAY ) )
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	2b5f      	cmp	r3, #95	; 0x5f
 80111c6:	d926      	bls.n	8011216 <RegionEU868AdrNext+0xae>
            {
                if( ( adrNext->AdrAckCounter % EU868_ADR_ACK_DELAY ) == 1 )
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	f003 031f 	and.w	r3, r3, #31
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d120      	bne.n	8011216 <RegionEU868AdrNext+0xae>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80111d4:	231e      	movs	r3, #30
 80111d6:	763b      	strb	r3, [r7, #24]
                    getPhy.Datarate = datarate;
 80111d8:	7fbb      	ldrb	r3, [r7, #30]
 80111da:	767b      	strb	r3, [r7, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	7a9b      	ldrb	r3, [r3, #10]
 80111e0:	76bb      	strb	r3, [r7, #26]
                    phyParam = RegionEU868GetPhyParam( &getPhy );
 80111e2:	f107 0318 	add.w	r3, r7, #24
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7ff fd0c 	bl	8010c04 <RegionEU868GetPhyParam>
 80111ec:	4603      	mov	r3, r0
 80111ee:	617b      	str	r3, [r7, #20]
                    datarate = phyParam.Value;
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	77bb      	strb	r3, [r7, #30]

                    if( datarate == EU868_TX_MIN_DATARATE )
 80111f4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d10c      	bne.n	8011216 <RegionEU868AdrNext+0xae>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80111fc:	2300      	movs	r3, #0
 80111fe:	77fb      	strb	r3, [r7, #31]
                        if( adrNext->UpdateChanMask == true )
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d006      	beq.n	8011216 <RegionEU868AdrNext+0xae>
                        {
                            // Re-enable default channels
                            ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011208:	4b08      	ldr	r3, [pc, #32]	; (801122c <RegionEU868AdrNext+0xc4>)
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	f043 0307 	orr.w	r3, r3, #7
 8011210:	b29a      	uxth	r2, r3
 8011212:	4b06      	ldr	r3, [pc, #24]	; (801122c <RegionEU868AdrNext+0xc4>)
 8011214:	801a      	strh	r2, [r3, #0]
                }
            }
        }
    }

    *drOut = datarate;
 8011216:	68bb      	ldr	r3, [r7, #8]
 8011218:	7fba      	ldrb	r2, [r7, #30]
 801121a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	7f7a      	ldrb	r2, [r7, #29]
 8011220:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011222:	7ffb      	ldrb	r3, [r7, #31]
}
 8011224:	4618      	mov	r0, r3
 8011226:	3720      	adds	r7, #32
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000988 	.word	0x20000988

08011230 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b08c      	sub	sp, #48	; 0x30
 8011234:	af04      	add	r7, sp, #16
 8011236:	60ba      	str	r2, [r7, #8]
 8011238:	607b      	str	r3, [r7, #4]
 801123a:	4603      	mov	r3, r0
 801123c:	73fb      	strb	r3, [r7, #15]
 801123e:	460b      	mov	r3, r1
 8011240:	73bb      	strb	r3, [r7, #14]
    double tSymbol = 0.0;
 8011242:	f04f 0200 	mov.w	r2, #0
 8011246:	f04f 0300 	mov.w	r3, #0
 801124a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t radioWakeUpTime;

    rxConfigParams->Datarate = datarate;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	7bfa      	ldrb	r2, [r7, #15]
 8011252:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( datarate );
 8011254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff fb7f 	bl	801095c <GetBandwidth>
 801125e:	4603      	mov	r3, r0
 8011260:	b2da      	uxtb	r2, r3
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	709a      	strb	r2, [r3, #2]

    if( datarate == DR_7 )
 8011266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801126a:	2b07      	cmp	r3, #7
 801126c:	d109      	bne.n	8011282 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[datarate] );
 801126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011272:	4a17      	ldr	r2, [pc, #92]	; (80112d0 <RegionEU868ComputeRxWindowParameters+0xa0>)
 8011274:	5cd3      	ldrb	r3, [r2, r3]
 8011276:	4618      	mov	r0, r3
 8011278:	f7f9 f88e 	bl	800a398 <RegionCommonComputeSymbolTimeFsk>
 801127c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011280:	e00e      	b.n	80112a0 <RegionEU868ComputeRxWindowParameters+0x70>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[datarate], BandwidthsEU868[datarate] );
 8011282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011286:	4a12      	ldr	r2, [pc, #72]	; (80112d0 <RegionEU868ComputeRxWindowParameters+0xa0>)
 8011288:	5cd2      	ldrb	r2, [r2, r3]
 801128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801128e:	4911      	ldr	r1, [pc, #68]	; (80112d4 <RegionEU868ComputeRxWindowParameters+0xa4>)
 8011290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011294:	4619      	mov	r1, r3
 8011296:	4610      	mov	r0, r2
 8011298:	f7f9 f854 	bl	800a344 <RegionCommonComputeSymbolTimeLoRa>
 801129c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    }

    radioWakeUpTime = Radio.GetWakeupTime();
 80112a0:	4b0d      	ldr	r3, [pc, #52]	; (80112d8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80112a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112a4:	4798      	blx	r3
 80112a6:	6178      	str	r0, [r7, #20]
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, radioWakeUpTime, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	3308      	adds	r3, #8
 80112ac:	687a      	ldr	r2, [r7, #4]
 80112ae:	320c      	adds	r2, #12
 80112b0:	7bb9      	ldrb	r1, [r7, #14]
 80112b2:	9202      	str	r2, [sp, #8]
 80112b4:	9301      	str	r3, [sp, #4]
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	9300      	str	r3, [sp, #0]
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	460a      	mov	r2, r1
 80112be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80112c2:	f7f9 f883 	bl	800a3cc <RegionCommonComputeRxWindowParameters>
}
 80112c6:	bf00      	nop
 80112c8:	3720      	adds	r7, #32
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	08012964 	.word	0x08012964
 80112d4:	0801296c 	.word	0x0801296c
 80112d8:	08012794 	.word	0x08012794

080112dc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80112dc:	b5b0      	push	{r4, r5, r7, lr}
 80112de:	b090      	sub	sp, #64	; 0x40
 80112e0:	af0a      	add	r7, sp, #40	; 0x28
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	785b      	ldrb	r3, [r3, #1]
 80112ea:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80112ec:	2300      	movs	r3, #0
 80112ee:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80112f0:	2300      	movs	r3, #0
 80112f2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80112fa:	4b55      	ldr	r3, [pc, #340]	; (8011450 <RegionEU868RxConfig+0x174>)
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	4798      	blx	r3
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8011306:	2300      	movs	r3, #0
 8011308:	e09d      	b.n	8011446 <RegionEU868RxConfig+0x16a>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	7cdb      	ldrb	r3, [r3, #19]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d123      	bne.n	801135a <RegionEU868RxConfig+0x7e>
    {
        // Apply window 1 frequency
        frequency = Channels[rxConfig->Channel].Frequency;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	4619      	mov	r1, r3
 8011318:	4a4e      	ldr	r2, [pc, #312]	; (8011454 <RegionEU868RxConfig+0x178>)
 801131a:	460b      	mov	r3, r1
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	440b      	add	r3, r1
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	4413      	add	r3, r2
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	4619      	mov	r1, r3
 801132e:	4a49      	ldr	r2, [pc, #292]	; (8011454 <RegionEU868RxConfig+0x178>)
 8011330:	460b      	mov	r3, r1
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	440b      	add	r3, r1
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	3304      	adds	r3, #4
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d00b      	beq.n	801135a <RegionEU868RxConfig+0x7e>
        {
            frequency = Channels[rxConfig->Channel].Rx1Frequency;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	4619      	mov	r1, r3
 8011348:	4a42      	ldr	r2, [pc, #264]	; (8011454 <RegionEU868RxConfig+0x178>)
 801134a:	460b      	mov	r3, r1
 801134c:	005b      	lsls	r3, r3, #1
 801134e:	440b      	add	r3, r1
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	4413      	add	r3, r2
 8011354:	3304      	adds	r3, #4
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801135e:	4a3e      	ldr	r2, [pc, #248]	; (8011458 <RegionEU868RxConfig+0x17c>)
 8011360:	5cd3      	ldrb	r3, [r2, r3]
 8011362:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8011364:	4b3a      	ldr	r3, [pc, #232]	; (8011450 <RegionEU868RxConfig+0x174>)
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	6938      	ldr	r0, [r7, #16]
 801136a:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011370:	2b07      	cmp	r3, #7
 8011372:	d128      	bne.n	80113c6 <RegionEU868RxConfig+0xea>
    {
        modem = MODEM_FSK;
 8011374:	2300      	movs	r3, #0
 8011376:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8011378:	4b35      	ldr	r3, [pc, #212]	; (8011450 <RegionEU868RxConfig+0x174>)
 801137a:	699c      	ldr	r4, [r3, #24]
 801137c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011384:	fb02 f303 	mul.w	r3, r2, r3
 8011388:	4619      	mov	r1, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	689b      	ldr	r3, [r3, #8]
 801138e:	b29b      	uxth	r3, r3
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	7c92      	ldrb	r2, [r2, #18]
 8011394:	7df8      	ldrb	r0, [r7, #23]
 8011396:	9209      	str	r2, [sp, #36]	; 0x24
 8011398:	2200      	movs	r2, #0
 801139a:	9208      	str	r2, [sp, #32]
 801139c:	2200      	movs	r2, #0
 801139e:	9207      	str	r2, [sp, #28]
 80113a0:	2200      	movs	r2, #0
 80113a2:	9206      	str	r2, [sp, #24]
 80113a4:	2201      	movs	r2, #1
 80113a6:	9205      	str	r2, [sp, #20]
 80113a8:	2200      	movs	r2, #0
 80113aa:	9204      	str	r2, [sp, #16]
 80113ac:	2200      	movs	r2, #0
 80113ae:	9203      	str	r2, [sp, #12]
 80113b0:	9302      	str	r3, [sp, #8]
 80113b2:	2305      	movs	r3, #5
 80113b4:	9301      	str	r3, [sp, #4]
 80113b6:	4b29      	ldr	r3, [pc, #164]	; (801145c <RegionEU868RxConfig+0x180>)
 80113b8:	9300      	str	r3, [sp, #0]
 80113ba:	2300      	movs	r3, #0
 80113bc:	460a      	mov	r2, r1
 80113be:	f24c 3150 	movw	r1, #50000	; 0xc350
 80113c2:	47a0      	blx	r4
 80113c4:	e024      	b.n	8011410 <RegionEU868RxConfig+0x134>
    }
    else
    {
        modem = MODEM_LORA;
 80113c6:	2301      	movs	r3, #1
 80113c8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80113ca:	4b21      	ldr	r3, [pc, #132]	; (8011450 <RegionEU868RxConfig+0x174>)
 80113cc:	699c      	ldr	r4, [r3, #24]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	789b      	ldrb	r3, [r3, #2]
 80113d2:	461d      	mov	r5, r3
 80113d4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	689b      	ldr	r3, [r3, #8]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	7c92      	ldrb	r2, [r2, #18]
 80113e2:	7df8      	ldrb	r0, [r7, #23]
 80113e4:	9209      	str	r2, [sp, #36]	; 0x24
 80113e6:	2201      	movs	r2, #1
 80113e8:	9208      	str	r2, [sp, #32]
 80113ea:	2200      	movs	r2, #0
 80113ec:	9207      	str	r2, [sp, #28]
 80113ee:	2200      	movs	r2, #0
 80113f0:	9206      	str	r2, [sp, #24]
 80113f2:	2200      	movs	r2, #0
 80113f4:	9205      	str	r2, [sp, #20]
 80113f6:	2200      	movs	r2, #0
 80113f8:	9204      	str	r2, [sp, #16]
 80113fa:	2200      	movs	r2, #0
 80113fc:	9203      	str	r2, [sp, #12]
 80113fe:	9302      	str	r3, [sp, #8]
 8011400:	2308      	movs	r3, #8
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	2300      	movs	r3, #0
 8011406:	9300      	str	r3, [sp, #0]
 8011408:	2301      	movs	r3, #1
 801140a:	460a      	mov	r2, r1
 801140c:	4629      	mov	r1, r5
 801140e:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	7c5b      	ldrb	r3, [r3, #17]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d005      	beq.n	8011424 <RegionEU868RxConfig+0x148>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8011418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801141c:	4a10      	ldr	r2, [pc, #64]	; (8011460 <RegionEU868RxConfig+0x184>)
 801141e:	5cd3      	ldrb	r3, [r2, r3]
 8011420:	75bb      	strb	r3, [r7, #22]
 8011422:	e004      	b.n	801142e <RegionEU868RxConfig+0x152>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8011424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011428:	4a0e      	ldr	r2, [pc, #56]	; (8011464 <RegionEU868RxConfig+0x188>)
 801142a:	5cd3      	ldrb	r3, [r2, r3]
 801142c:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801142e:	4b08      	ldr	r3, [pc, #32]	; (8011450 <RegionEU868RxConfig+0x174>)
 8011430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011432:	7dba      	ldrb	r2, [r7, #22]
 8011434:	320d      	adds	r2, #13
 8011436:	b2d1      	uxtb	r1, r2
 8011438:	7dfa      	ldrb	r2, [r7, #23]
 801143a:	4610      	mov	r0, r2
 801143c:	4798      	blx	r3
    FREQ_PRINTF("RX on freq %u Hz at DR %d\r\n", (unsigned int)frequency, dr);

    *datarate = (uint8_t) dr;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	7bfa      	ldrb	r2, [r7, #15]
 8011442:	701a      	strb	r2, [r3, #0]
    return true;
 8011444:	2301      	movs	r3, #1
}
 8011446:	4618      	mov	r0, r3
 8011448:	3718      	adds	r7, #24
 801144a:	46bd      	mov	sp, r7
 801144c:	bdb0      	pop	{r4, r5, r7, pc}
 801144e:	bf00      	nop
 8011450:	08012794 	.word	0x08012794
 8011454:	200008c8 	.word	0x200008c8
 8011458:	08012964 	.word	0x08012964
 801145c:	00014585 	.word	0x00014585
 8011460:	08012994 	.word	0x08012994
 8011464:	0801298c 	.word	0x0801298c

08011468 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011468:	b590      	push	{r4, r7, lr}
 801146a:	b093      	sub	sp, #76	; 0x4c
 801146c:	af0a      	add	r7, sp, #40	; 0x28
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801147a:	461a      	mov	r2, r3
 801147c:	4b51      	ldr	r3, [pc, #324]	; (80115c4 <RegionEU868TxConfig+0x15c>)
 801147e:	5c9b      	ldrb	r3, [r3, r2]
 8011480:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask );
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	4619      	mov	r1, r3
 801148e:	4a4e      	ldr	r2, [pc, #312]	; (80115c8 <RegionEU868TxConfig+0x160>)
 8011490:	460b      	mov	r3, r1
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	440b      	add	r3, r1
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	3309      	adds	r3, #9
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	4a4b      	ldr	r2, [pc, #300]	; (80115cc <RegionEU868TxConfig+0x164>)
 80114a0:	011b      	lsls	r3, r3, #4
 80114a2:	4413      	add	r3, r2
 80114a4:	3302      	adds	r3, #2
 80114a6:	f993 1000 	ldrsb.w	r1, [r3]
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80114b0:	4b47      	ldr	r3, [pc, #284]	; (80115d0 <RegionEU868TxConfig+0x168>)
 80114b2:	f7ff fa71 	bl	8010998 <LimitTxPower>
 80114b6:	4603      	mov	r3, r0
 80114b8:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff fa4b 	bl	801095c <GetBandwidth>
 80114c6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80114c8:	2300      	movs	r3, #0
 80114ca:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6859      	ldr	r1, [r3, #4]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	689a      	ldr	r2, [r3, #8]
 80114d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80114d8:	4618      	mov	r0, r3
 80114da:	f7f8 fffd 	bl	800a4d8 <RegionCommonComputeTxPower>
 80114de:	4603      	mov	r3, r0
 80114e0:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( Channels[txConfig->Channel].Frequency );
 80114e2:	4b3c      	ldr	r3, [pc, #240]	; (80115d4 <RegionEU868TxConfig+0x16c>)
 80114e4:	68da      	ldr	r2, [r3, #12]
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	4618      	mov	r0, r3
 80114ec:	4936      	ldr	r1, [pc, #216]	; (80115c8 <RegionEU868TxConfig+0x160>)
 80114ee:	4603      	mov	r3, r0
 80114f0:	005b      	lsls	r3, r3, #1
 80114f2:	4403      	add	r3, r0
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	440b      	add	r3, r1
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	4618      	mov	r0, r3
 80114fc:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011504:	2b07      	cmp	r3, #7
 8011506:	d124      	bne.n	8011552 <RegionEU868TxConfig+0xea>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8011508:	2300      	movs	r3, #0
 801150a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 801150c:	4b31      	ldr	r3, [pc, #196]	; (80115d4 <RegionEU868TxConfig+0x16c>)
 801150e:	69dc      	ldr	r4, [r3, #28]
 8011510:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011518:	fb02 f303 	mul.w	r3, r2, r3
 801151c:	461a      	mov	r2, r3
 801151e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8011522:	7ff8      	ldrb	r0, [r7, #31]
 8011524:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011528:	9308      	str	r3, [sp, #32]
 801152a:	2300      	movs	r3, #0
 801152c:	9307      	str	r3, [sp, #28]
 801152e:	2300      	movs	r3, #0
 8011530:	9306      	str	r3, [sp, #24]
 8011532:	2300      	movs	r3, #0
 8011534:	9305      	str	r3, [sp, #20]
 8011536:	2301      	movs	r3, #1
 8011538:	9304      	str	r3, [sp, #16]
 801153a:	2300      	movs	r3, #0
 801153c:	9303      	str	r3, [sp, #12]
 801153e:	2305      	movs	r3, #5
 8011540:	9302      	str	r3, [sp, #8]
 8011542:	2300      	movs	r3, #0
 8011544:	9301      	str	r3, [sp, #4]
 8011546:	9200      	str	r2, [sp, #0]
 8011548:	69bb      	ldr	r3, [r7, #24]
 801154a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801154e:	47a0      	blx	r4
 8011550:	e01d      	b.n	801158e <RegionEU868TxConfig+0x126>
    }
    else
    {
        modem = MODEM_LORA;
 8011552:	2301      	movs	r3, #1
 8011554:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 16, false, true, 0, 0, false, 3000 );
 8011556:	4b1f      	ldr	r3, [pc, #124]	; (80115d4 <RegionEU868TxConfig+0x16c>)
 8011558:	69dc      	ldr	r4, [r3, #28]
 801155a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801155e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8011562:	7ff8      	ldrb	r0, [r7, #31]
 8011564:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8011568:	9208      	str	r2, [sp, #32]
 801156a:	2200      	movs	r2, #0
 801156c:	9207      	str	r2, [sp, #28]
 801156e:	2200      	movs	r2, #0
 8011570:	9206      	str	r2, [sp, #24]
 8011572:	2200      	movs	r2, #0
 8011574:	9205      	str	r2, [sp, #20]
 8011576:	2201      	movs	r2, #1
 8011578:	9204      	str	r2, [sp, #16]
 801157a:	2200      	movs	r2, #0
 801157c:	9203      	str	r2, [sp, #12]
 801157e:	2210      	movs	r2, #16
 8011580:	9202      	str	r2, [sp, #8]
 8011582:	2201      	movs	r2, #1
 8011584:	9201      	str	r2, [sp, #4]
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	69bb      	ldr	r3, [r7, #24]
 801158a:	2200      	movs	r2, #0
 801158c:	47a0      	blx	r4
    }
    FREQ_PRINTF("TX on freq %u Hz at DR %d\r\n", (unsigned int)Channels[txConfig->Channel].Frequency, txConfig->Datarate);
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801158e:	4b11      	ldr	r3, [pc, #68]	; (80115d4 <RegionEU868TxConfig+0x16c>)
 8011590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	8992      	ldrh	r2, [r2, #12]
 8011596:	b2d1      	uxtb	r1, r2
 8011598:	7ffa      	ldrb	r2, [r7, #31]
 801159a:	4610      	mov	r0, r2
 801159c:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem,  txConfig->PktLen );
 801159e:	4b0d      	ldr	r3, [pc, #52]	; (80115d4 <RegionEU868TxConfig+0x16c>)
 80115a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	8992      	ldrh	r2, [r2, #12]
 80115a6:	b2d1      	uxtb	r1, r2
 80115a8:	7ffa      	ldrb	r2, [r7, #31]
 80115aa:	4610      	mov	r0, r2
 80115ac:	4798      	blx	r3
 80115ae:	4602      	mov	r2, r0
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	7f7a      	ldrb	r2, [r7, #29]
 80115b8:	701a      	strb	r2, [r3, #0]
    return true;
 80115ba:	2301      	movs	r3, #1
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3724      	adds	r7, #36	; 0x24
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd90      	pop	{r4, r7, pc}
 80115c4:	08012964 	.word	0x08012964
 80115c8:	200008c8 	.word	0x200008c8
 80115cc:	200000a4 	.word	0x200000a4
 80115d0:	20000988 	.word	0x20000988
 80115d4:	08012794 	.word	0x08012794

080115d8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b08a      	sub	sp, #40	; 0x28
 80115dc:	af02      	add	r7, sp, #8
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	60b9      	str	r1, [r7, #8]
 80115e2:	607a      	str	r2, [r7, #4]
 80115e4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80115e6:	2307      	movs	r3, #7
 80115e8:	77fb      	strb	r3, [r7, #31]
    LinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	773b      	strb	r3, [r7, #28]
    uint8_t bytesProcessed = 0;
 80115ee:	2300      	movs	r3, #0
 80115f0:	77bb      	strb	r3, [r7, #30]
    uint16_t chMask = 0;
 80115f2:	2300      	movs	r3, #0
 80115f4:	827b      	strh	r3, [r7, #18]

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80115f6:	e068      	b.n	80116ca <RegionEU868LinkAdrReq+0xf2>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	7fbb      	ldrb	r3, [r7, #30]
 80115fe:	4413      	add	r3, r2
 8011600:	f107 0214 	add.w	r2, r7, #20
 8011604:	4611      	mov	r1, r2
 8011606:	4618      	mov	r0, r3
 8011608:	f7f8 fe4a 	bl	800a2a0 <RegionCommonParseLinkAdrReq>
 801160c:	4603      	mov	r3, r0
 801160e:	773b      	strb	r3, [r7, #28]

        if( nextIndex == 0 )
 8011610:	7f3b      	ldrb	r3, [r7, #28]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d05f      	beq.n	80116d6 <RegionEU868LinkAdrReq+0xfe>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8011616:	7fba      	ldrb	r2, [r7, #30]
 8011618:	7f3b      	ldrb	r3, [r7, #28]
 801161a:	4413      	add	r3, r2
 801161c:	77bb      	strb	r3, [r7, #30]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801161e:	2307      	movs	r3, #7
 8011620:	77fb      	strb	r3, [r7, #31]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8011622:	8b3b      	ldrh	r3, [r7, #24]
 8011624:	827b      	strh	r3, [r7, #18]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8011626:	7dfb      	ldrb	r3, [r7, #23]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d107      	bne.n	801163c <RegionEU868LinkAdrReq+0x64>
 801162c:	8a7b      	ldrh	r3, [r7, #18]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d104      	bne.n	801163c <RegionEU868LinkAdrReq+0x64>
        {
            status &= 0xFE; // Channel mask KO
 8011632:	7ffb      	ldrb	r3, [r7, #31]
 8011634:	f023 0301 	bic.w	r3, r3, #1
 8011638:	77fb      	strb	r3, [r7, #31]
 801163a:	e046      	b.n	80116ca <RegionEU868LinkAdrReq+0xf2>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801163c:	7dfb      	ldrb	r3, [r7, #23]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d002      	beq.n	8011648 <RegionEU868LinkAdrReq+0x70>
 8011642:	7dfb      	ldrb	r3, [r7, #23]
 8011644:	2b05      	cmp	r3, #5
 8011646:	d902      	bls.n	801164e <RegionEU868LinkAdrReq+0x76>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8011648:	7dfb      	ldrb	r3, [r7, #23]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801164a:	2b06      	cmp	r3, #6
 801164c:	d904      	bls.n	8011658 <RegionEU868LinkAdrReq+0x80>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801164e:	7ffb      	ldrb	r3, [r7, #31]
 8011650:	f023 0301 	bic.w	r3, r3, #1
 8011654:	77fb      	strb	r3, [r7, #31]
 8011656:	e038      	b.n	80116ca <RegionEU868LinkAdrReq+0xf2>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8011658:	2300      	movs	r3, #0
 801165a:	777b      	strb	r3, [r7, #29]
 801165c:	e032      	b.n	80116c4 <RegionEU868LinkAdrReq+0xec>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801165e:	7dfb      	ldrb	r3, [r7, #23]
 8011660:	2b06      	cmp	r3, #6
 8011662:	d115      	bne.n	8011690 <RegionEU868LinkAdrReq+0xb8>
                {
                    if( Channels[i].Frequency != 0 )
 8011664:	7f7a      	ldrb	r2, [r7, #29]
 8011666:	4942      	ldr	r1, [pc, #264]	; (8011770 <RegionEU868LinkAdrReq+0x198>)
 8011668:	4613      	mov	r3, r2
 801166a:	005b      	lsls	r3, r3, #1
 801166c:	4413      	add	r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	440b      	add	r3, r1
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d022      	beq.n	80116be <RegionEU868LinkAdrReq+0xe6>
                    {
                        chMask |= 1 << i;
 8011678:	7f7b      	ldrb	r3, [r7, #29]
 801167a:	2201      	movs	r2, #1
 801167c:	fa02 f303 	lsl.w	r3, r2, r3
 8011680:	b21a      	sxth	r2, r3
 8011682:	8a7b      	ldrh	r3, [r7, #18]
 8011684:	b21b      	sxth	r3, r3
 8011686:	4313      	orrs	r3, r2
 8011688:	b21b      	sxth	r3, r3
 801168a:	b29b      	uxth	r3, r3
 801168c:	827b      	strh	r3, [r7, #18]
 801168e:	e016      	b.n	80116be <RegionEU868LinkAdrReq+0xe6>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8011690:	8a7b      	ldrh	r3, [r7, #18]
 8011692:	461a      	mov	r2, r3
 8011694:	7f7b      	ldrb	r3, [r7, #29]
 8011696:	fa42 f303 	asr.w	r3, r2, r3
 801169a:	f003 0301 	and.w	r3, r3, #1
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d00d      	beq.n	80116be <RegionEU868LinkAdrReq+0xe6>
                        ( Channels[i].Frequency == 0 ) )
 80116a2:	7f7a      	ldrb	r2, [r7, #29]
 80116a4:	4932      	ldr	r1, [pc, #200]	; (8011770 <RegionEU868LinkAdrReq+0x198>)
 80116a6:	4613      	mov	r3, r2
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4413      	add	r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	440b      	add	r3, r1
 80116b0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d103      	bne.n	80116be <RegionEU868LinkAdrReq+0xe6>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80116b6:	7ffb      	ldrb	r3, [r7, #31]
 80116b8:	f023 0301 	bic.w	r3, r3, #1
 80116bc:	77fb      	strb	r3, [r7, #31]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80116be:	7f7b      	ldrb	r3, [r7, #29]
 80116c0:	3301      	adds	r3, #1
 80116c2:	777b      	strb	r3, [r7, #29]
 80116c4:	7f7b      	ldrb	r3, [r7, #29]
 80116c6:	2b0f      	cmp	r3, #15
 80116c8:	d9c9      	bls.n	801165e <RegionEU868LinkAdrReq+0x86>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	791b      	ldrb	r3, [r3, #4]
 80116ce:	7fba      	ldrb	r2, [r7, #30]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d391      	bcc.n	80115f8 <RegionEU868LinkAdrReq+0x20>
 80116d4:	e000      	b.n	80116d8 <RegionEU868LinkAdrReq+0x100>
            break; // break loop, since no more request has been found
 80116d6:	bf00      	nop
            }
        }
    }

    // Verify datarate
    if( RegionCommonChanVerifyDr( EU868_MAX_NB_CHANNELS, &chMask, linkAdrParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE, Channels  ) == false )
 80116d8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80116dc:	f107 0112 	add.w	r1, r7, #18
 80116e0:	4b23      	ldr	r3, [pc, #140]	; (8011770 <RegionEU868LinkAdrReq+0x198>)
 80116e2:	9301      	str	r3, [sp, #4]
 80116e4:	2307      	movs	r3, #7
 80116e6:	9300      	str	r3, [sp, #0]
 80116e8:	2300      	movs	r3, #0
 80116ea:	2010      	movs	r0, #16
 80116ec:	f7f8 fbdc 	bl	8009ea8 <RegionCommonChanVerifyDr>
 80116f0:	4603      	mov	r3, r0
 80116f2:	f083 0301 	eor.w	r3, r3, #1
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d003      	beq.n	8011704 <RegionEU868LinkAdrReq+0x12c>
    {
        status &= 0xFD; // Datarate KO
 80116fc:	7ffb      	ldrb	r3, [r7, #31]
 80116fe:	f023 0302 	bic.w	r3, r3, #2
 8011702:	77fb      	strb	r3, [r7, #31]
    }

    // Verify tx power
    if( RegionCommonValueInRange( linkAdrParams.TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER ) == 0 )
 8011704:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011708:	2207      	movs	r2, #7
 801170a:	2100      	movs	r1, #0
 801170c:	4618      	mov	r0, r3
 801170e:	f7f8 fc46 	bl	8009f9e <RegionCommonValueInRange>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d10a      	bne.n	801172e <RegionEU868LinkAdrReq+0x156>
    {
        // Verify if the maximum TX power is exceeded
        if( EU868_MAX_TX_POWER > linkAdrParams.TxPower )
 8011718:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801171c:	2b00      	cmp	r3, #0
 801171e:	da02      	bge.n	8011726 <RegionEU868LinkAdrReq+0x14e>
        { // Apply maximum TX power. Accept TX power.
            linkAdrParams.TxPower = EU868_MAX_TX_POWER;
 8011720:	2300      	movs	r3, #0
 8011722:	75bb      	strb	r3, [r7, #22]
 8011724:	e003      	b.n	801172e <RegionEU868LinkAdrReq+0x156>
        }
        else
        {
            status &= 0xFB; // TxPower KO
 8011726:	7ffb      	ldrb	r3, [r7, #31]
 8011728:	f023 0304 	bic.w	r3, r3, #4
 801172c:	77fb      	strb	r3, [r7, #31]
        }
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801172e:	7ffb      	ldrb	r3, [r7, #31]
 8011730:	2b07      	cmp	r3, #7
 8011732:	d10a      	bne.n	801174a <RegionEU868LinkAdrReq+0x172>
    {
        if( linkAdrParams.NbRep == 0 )
 8011734:	7d3b      	ldrb	r3, [r7, #20]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d101      	bne.n	801173e <RegionEU868LinkAdrReq+0x166>
        { // Value of 0 is not allowed, revert to default.
            linkAdrParams.NbRep = 1;
 801173a:	2301      	movs	r3, #1
 801173c:	753b      	strb	r3, [r7, #20]
 801173e:	4b0d      	ldr	r3, [pc, #52]	; (8011774 <RegionEU868LinkAdrReq+0x19c>)
 8011740:	2200      	movs	r2, #0
 8011742:	801a      	strh	r2, [r3, #0]
        }

        // Set the channels mask to a default value
        memset( ChannelsMask, 0, sizeof( ChannelsMask ) );
        // Update the channels mask
        ChannelsMask[0] = chMask;
 8011744:	8a7a      	ldrh	r2, [r7, #18]
 8011746:	4b0b      	ldr	r3, [pc, #44]	; (8011774 <RegionEU868LinkAdrReq+0x19c>)
 8011748:	801a      	strh	r2, [r3, #0]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801174a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8011752:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801175a:	7d3a      	ldrb	r2, [r7, #20]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8011760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011762:	7fba      	ldrb	r2, [r7, #30]
 8011764:	701a      	strb	r2, [r3, #0]

    return status;
 8011766:	7ffb      	ldrb	r3, [r7, #31]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3720      	adds	r7, #32
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	200008c8 	.word	0x200008c8
 8011774:	20000988 	.word	0x20000988

08011778 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8011780:	2307      	movs	r3, #7
 8011782:	73fb      	strb	r3, [r7, #15]

    // Verify radio frequency
    if( Radio.CheckRfFrequency( rxParamSetupReq->Frequency ) == false )
 8011784:	4b19      	ldr	r3, [pc, #100]	; (80117ec <RegionEU868RxParamSetupReq+0x74>)
 8011786:	6a1b      	ldr	r3, [r3, #32]
 8011788:	687a      	ldr	r2, [r7, #4]
 801178a:	6852      	ldr	r2, [r2, #4]
 801178c:	4610      	mov	r0, r2
 801178e:	4798      	blx	r3
 8011790:	4603      	mov	r3, r0
 8011792:	f083 0301 	eor.w	r3, r3, #1
 8011796:	b2db      	uxtb	r3, r3
 8011798:	2b00      	cmp	r3, #0
 801179a:	d003      	beq.n	80117a4 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFE; // Channel frequency KO
 801179c:	7bfb      	ldrb	r3, [r7, #15]
 801179e:	f023 0301 	bic.w	r3, r3, #1
 80117a2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f993 3000 	ldrsb.w	r3, [r3]
 80117aa:	2207      	movs	r2, #7
 80117ac:	2100      	movs	r1, #0
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7f8 fbf5 	bl	8009f9e <RegionCommonValueInRange>
 80117b4:	4603      	mov	r3, r0
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d103      	bne.n	80117c2 <RegionEU868RxParamSetupReq+0x4a>
    {
        status &= 0xFD; // Datarate KO
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
 80117bc:	f023 0302 	bic.w	r3, r3, #2
 80117c0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80117c8:	2205      	movs	r2, #5
 80117ca:	2100      	movs	r1, #0
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7f8 fbe6 	bl	8009f9e <RegionCommonValueInRange>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d103      	bne.n	80117e0 <RegionEU868RxParamSetupReq+0x68>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80117d8:	7bfb      	ldrb	r3, [r7, #15]
 80117da:	f023 0304 	bic.w	r3, r3, #4
 80117de:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 80117e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	08012794 	.word	0x08012794

080117f0 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b086      	sub	sp, #24
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80117f8:	2303      	movs	r3, #3
 80117fa:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d114      	bne.n	8011830 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801180c:	b2db      	uxtb	r3, r3
 801180e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8011810:	f107 0308 	add.w	r3, r7, #8
 8011814:	4618      	mov	r0, r3
 8011816:	f000 fab5 	bl	8011d84 <RegionEU868ChannelsRemove>
 801181a:	4603      	mov	r3, r0
 801181c:	f083 0301 	eor.w	r3, r3, #1
 8011820:	b2db      	uxtb	r3, r3
 8011822:	2b00      	cmp	r3, #0
 8011824:	d03b      	beq.n	801189e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8011826:	7dfb      	ldrb	r3, [r7, #23]
 8011828:	f023 0303 	bic.w	r3, r3, #3
 801182c:	75fb      	strb	r3, [r7, #23]
 801182e:	e036      	b.n	801189e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801183c:	b2db      	uxtb	r3, r3
 801183e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8011840:	f107 030c 	add.w	r3, r7, #12
 8011844:	4618      	mov	r0, r3
 8011846:	f000 f9d7 	bl	8011bf8 <RegionEU868ChannelAdd>
 801184a:	4603      	mov	r3, r0
 801184c:	2b06      	cmp	r3, #6
 801184e:	d820      	bhi.n	8011892 <RegionEU868NewChannelReq+0xa2>
 8011850:	a201      	add	r2, pc, #4	; (adr r2, 8011858 <RegionEU868NewChannelReq+0x68>)
 8011852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011856:	bf00      	nop
 8011858:	0801189d 	.word	0x0801189d
 801185c:	08011893 	.word	0x08011893
 8011860:	08011893 	.word	0x08011893
 8011864:	08011893 	.word	0x08011893
 8011868:	08011875 	.word	0x08011875
 801186c:	0801187f 	.word	0x0801187f
 8011870:	08011889 	.word	0x08011889
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8011874:	7dfb      	ldrb	r3, [r7, #23]
 8011876:	f023 0301 	bic.w	r3, r3, #1
 801187a:	75fb      	strb	r3, [r7, #23]
                break;
 801187c:	e00f      	b.n	801189e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801187e:	7dfb      	ldrb	r3, [r7, #23]
 8011880:	f023 0302 	bic.w	r3, r3, #2
 8011884:	75fb      	strb	r3, [r7, #23]
                break;
 8011886:	e00a      	b.n	801189e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8011888:	7dfb      	ldrb	r3, [r7, #23]
 801188a:	f023 0303 	bic.w	r3, r3, #3
 801188e:	75fb      	strb	r3, [r7, #23]
                break;
 8011890:	e005      	b.n	801189e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8011892:	7dfb      	ldrb	r3, [r7, #23]
 8011894:	f023 0303 	bic.w	r3, r3, #3
 8011898:	75fb      	strb	r3, [r7, #23]
                break;
 801189a:	e000      	b.n	801189e <RegionEU868NewChannelReq+0xae>
                break;
 801189c:	bf00      	nop
            }
        }
    }

    return status;
 801189e:	7dfb      	ldrb	r3, [r7, #23]
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3718      	adds	r7, #24
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80118a8:	b480      	push	{r7}
 80118aa:	b083      	sub	sp, #12
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
    return -1;
 80118b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bc80      	pop	{r7}
 80118bc:	4770      	bx	lr
	...

080118c0 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80118c8:	2303      	movs	r3, #3
 80118ca:	73fb      	strb	r3, [r7, #15]
    uint8_t band = 0;
 80118cc:	2300      	movs	r3, #0
 80118ce:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyTxFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	f107 020e 	add.w	r2, r7, #14
 80118d8:	4611      	mov	r1, r2
 80118da:	4618      	mov	r0, r3
 80118dc:	f7ff f878 	bl	80109d0 <VerifyTxFreq>
 80118e0:	4603      	mov	r3, r0
 80118e2:	f083 0301 	eor.w	r3, r3, #1
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d003      	beq.n	80118f4 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80118ec:	7bfb      	ldrb	r3, [r7, #15]
 80118ee:	f023 0301 	bic.w	r3, r3, #1
 80118f2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	4619      	mov	r1, r3
 80118fa:	4a11      	ldr	r2, [pc, #68]	; (8011940 <RegionEU868DlChannelReq+0x80>)
 80118fc:	460b      	mov	r3, r1
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	440b      	add	r3, r1
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	4413      	add	r3, r2
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d103      	bne.n	8011914 <RegionEU868DlChannelReq+0x54>
    {
        status &= 0xFD;
 801190c:	7bfb      	ldrb	r3, [r7, #15]
 801190e:	f023 0302 	bic.w	r3, r3, #2
 8011912:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8011914:	7bfb      	ldrb	r3, [r7, #15]
 8011916:	2b03      	cmp	r3, #3
 8011918:	d10c      	bne.n	8011934 <RegionEU868DlChannelReq+0x74>
    {
        Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	4618      	mov	r0, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	4906      	ldr	r1, [pc, #24]	; (8011940 <RegionEU868DlChannelReq+0x80>)
 8011926:	4603      	mov	r3, r0
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	4403      	add	r3, r0
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	440b      	add	r3, r1
 8011930:	3304      	adds	r3, #4
 8011932:	601a      	str	r2, [r3, #0]
    }

    return status;
 8011934:	7bfb      	ldrb	r3, [r7, #15]
}
 8011936:	4618      	mov	r0, r3
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	200008c8 	.word	0x200008c8

08011944 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( AlternateDrParams_t* alternateDr )
{
 8011944:	b480      	push	{r7}
 8011946:	b085      	sub	sp, #20
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
    int8_t datarate = 0;
 801194c:	2300      	movs	r3, #0
 801194e:	73fb      	strb	r3, [r7, #15]

    if( ( alternateDr->NbTrials % 48 ) == 0 )
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	881a      	ldrh	r2, [r3, #0]
 8011954:	4b23      	ldr	r3, [pc, #140]	; (80119e4 <RegionEU868AlternateDr+0xa0>)
 8011956:	fba3 1302 	umull	r1, r3, r3, r2
 801195a:	0959      	lsrs	r1, r3, #5
 801195c:	460b      	mov	r3, r1
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	440b      	add	r3, r1
 8011962:	011b      	lsls	r3, r3, #4
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	b29b      	uxth	r3, r3
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <RegionEU868AlternateDr+0x2e>
    {
        datarate = DR_0;
 801196c:	2300      	movs	r3, #0
 801196e:	73fb      	strb	r3, [r7, #15]
 8011970:	e030      	b.n	80119d4 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 32 ) == 0 )
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	f003 031f 	and.w	r3, r3, #31
 801197a:	b29b      	uxth	r3, r3
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <RegionEU868AlternateDr+0x42>
    {
        datarate = DR_1;
 8011980:	2301      	movs	r3, #1
 8011982:	73fb      	strb	r3, [r7, #15]
 8011984:	e026      	b.n	80119d4 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 24 ) == 0 )
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	881a      	ldrh	r2, [r3, #0]
 801198a:	4b16      	ldr	r3, [pc, #88]	; (80119e4 <RegionEU868AlternateDr+0xa0>)
 801198c:	fba3 1302 	umull	r1, r3, r3, r2
 8011990:	0919      	lsrs	r1, r3, #4
 8011992:	460b      	mov	r3, r1
 8011994:	005b      	lsls	r3, r3, #1
 8011996:	440b      	add	r3, r1
 8011998:	00db      	lsls	r3, r3, #3
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	b29b      	uxth	r3, r3
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d102      	bne.n	80119a8 <RegionEU868AlternateDr+0x64>
    {
        datarate = DR_2;
 80119a2:	2302      	movs	r3, #2
 80119a4:	73fb      	strb	r3, [r7, #15]
 80119a6:	e015      	b.n	80119d4 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 16 ) == 0 )
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	881b      	ldrh	r3, [r3, #0]
 80119ac:	f003 030f 	and.w	r3, r3, #15
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d102      	bne.n	80119bc <RegionEU868AlternateDr+0x78>
    {
        datarate = DR_3;
 80119b6:	2303      	movs	r3, #3
 80119b8:	73fb      	strb	r3, [r7, #15]
 80119ba:	e00b      	b.n	80119d4 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 8 ) == 0 )
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	881b      	ldrh	r3, [r3, #0]
 80119c0:	f003 0307 	and.w	r3, r3, #7
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d102      	bne.n	80119d0 <RegionEU868AlternateDr+0x8c>
    {
        datarate = DR_4;
 80119ca:	2304      	movs	r3, #4
 80119cc:	73fb      	strb	r3, [r7, #15]
 80119ce:	e001      	b.n	80119d4 <RegionEU868AlternateDr+0x90>
    }
    else
    {
        datarate = DR_5;
 80119d0:	2305      	movs	r3, #5
 80119d2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80119d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3714      	adds	r7, #20
 80119dc:	46bd      	mov	sp, r7
 80119de:	bc80      	pop	{r7}
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	aaaaaaab 	.word	0xaaaaaaab

080119e8 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80119e8:	b590      	push	{r4, r7, lr}
 80119ea:	b085      	sub	sp, #20
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
    uint8_t channel = calcBackOff->Channel;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	78db      	ldrb	r3, [r3, #3]
 80119f4:	73fb      	strb	r3, [r7, #15]
    uint16_t dutyCycle = Bands[Channels[channel].Band].DCycle;
 80119f6:	7bfa      	ldrb	r2, [r7, #15]
 80119f8:	4931      	ldr	r1, [pc, #196]	; (8011ac0 <RegionEU868CalcBackOff+0xd8>)
 80119fa:	4613      	mov	r3, r2
 80119fc:	005b      	lsls	r3, r3, #1
 80119fe:	4413      	add	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	440b      	add	r3, r1
 8011a04:	3309      	adds	r3, #9
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	4a2e      	ldr	r2, [pc, #184]	; (8011ac4 <RegionEU868CalcBackOff+0xdc>)
 8011a0a:	011b      	lsls	r3, r3, #4
 8011a0c:	4413      	add	r3, r2
 8011a0e:	881b      	ldrh	r3, [r3, #0]
 8011a10:	81bb      	strh	r3, [r7, #12]
    uint16_t joinDutyCycle = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	817b      	strh	r3, [r7, #10]

    // Reset time-off to initial value.
    Bands[Channels[channel].Band].TimeOff = 0;
 8011a16:	7bfa      	ldrb	r2, [r7, #15]
 8011a18:	4929      	ldr	r1, [pc, #164]	; (8011ac0 <RegionEU868CalcBackOff+0xd8>)
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	4413      	add	r3, r2
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	440b      	add	r3, r1
 8011a24:	3309      	adds	r3, #9
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	4a26      	ldr	r2, [pc, #152]	; (8011ac4 <RegionEU868CalcBackOff+0xdc>)
 8011a2a:	011b      	lsls	r3, r3, #4
 8011a2c:	4413      	add	r3, r2
 8011a2e:	330c      	adds	r3, #12
 8011a30:	2200      	movs	r2, #0
 8011a32:	601a      	str	r2, [r3, #0]

    if( calcBackOff->Joined == false )
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	f083 0301 	eor.w	r3, r3, #1
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d021      	beq.n	8011a86 <RegionEU868CalcBackOff+0x9e>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOff->ElapsedTime );
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7f8 fa0e 	bl	8009e68 <RegionCommonGetJoinDc>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	817b      	strh	r3, [r7, #10]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8011a50:	897a      	ldrh	r2, [r7, #10]
 8011a52:	89bb      	ldrh	r3, [r7, #12]
 8011a54:	4293      	cmp	r3, r2
 8011a56:	bf38      	it	cc
 8011a58:	4613      	movcc	r3, r2
 8011a5a:	81bb      	strh	r3, [r7, #12]
        // Apply band time-off.
        Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
 8011a5c:	89bb      	ldrh	r3, [r7, #12]
 8011a5e:	1e59      	subs	r1, r3, #1
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6898      	ldr	r0, [r3, #8]
 8011a64:	7bfa      	ldrb	r2, [r7, #15]
 8011a66:	4c16      	ldr	r4, [pc, #88]	; (8011ac0 <RegionEU868CalcBackOff+0xd8>)
 8011a68:	4613      	mov	r3, r2
 8011a6a:	005b      	lsls	r3, r3, #1
 8011a6c:	4413      	add	r3, r2
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4423      	add	r3, r4
 8011a72:	3309      	adds	r3, #9
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	fb00 f201 	mul.w	r2, r0, r1
 8011a7a:	4912      	ldr	r1, [pc, #72]	; (8011ac4 <RegionEU868CalcBackOff+0xdc>)
 8011a7c:	011b      	lsls	r3, r3, #4
 8011a7e:	440b      	add	r3, r1
 8011a80:	330c      	adds	r3, #12
 8011a82:	601a      	str	r2, [r3, #0]
        if( calcBackOff->DutyCycleEnabled == true )
        {
            Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
        }
    }
}
 8011a84:	e017      	b.n	8011ab6 <RegionEU868CalcBackOff+0xce>
        if( calcBackOff->DutyCycleEnabled == true )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	789b      	ldrb	r3, [r3, #2]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d013      	beq.n	8011ab6 <RegionEU868CalcBackOff+0xce>
            Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
 8011a8e:	89bb      	ldrh	r3, [r7, #12]
 8011a90:	1e59      	subs	r1, r3, #1
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6898      	ldr	r0, [r3, #8]
 8011a96:	7bfa      	ldrb	r2, [r7, #15]
 8011a98:	4c09      	ldr	r4, [pc, #36]	; (8011ac0 <RegionEU868CalcBackOff+0xd8>)
 8011a9a:	4613      	mov	r3, r2
 8011a9c:	005b      	lsls	r3, r3, #1
 8011a9e:	4413      	add	r3, r2
 8011aa0:	009b      	lsls	r3, r3, #2
 8011aa2:	4423      	add	r3, r4
 8011aa4:	3309      	adds	r3, #9
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	fb00 f201 	mul.w	r2, r0, r1
 8011aac:	4905      	ldr	r1, [pc, #20]	; (8011ac4 <RegionEU868CalcBackOff+0xdc>)
 8011aae:	011b      	lsls	r3, r3, #4
 8011ab0:	440b      	add	r3, r1
 8011ab2:	330c      	adds	r3, #12
 8011ab4:	601a      	str	r2, [r3, #0]
}
 8011ab6:	bf00      	nop
 8011ab8:	3714      	adds	r7, #20
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd90      	pop	{r4, r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	200008c8 	.word	0x200008c8
 8011ac4:	200000a4 	.word	0x200000a4

08011ac8 <RegionEU868NextChannel>:

bool RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011ac8:	b590      	push	{r4, r7, lr}
 8011aca:	b091      	sub	sp, #68	; 0x44
 8011acc:	af04      	add	r7, sp, #16
 8011ace:	60f8      	str	r0, [r7, #12]
 8011ad0:	60b9      	str	r1, [r7, #8]
 8011ad2:	607a      	str	r2, [r7, #4]
 8011ad4:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t delayTx = 0;
 8011adc:	2300      	movs	r3, #0
 8011ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	617b      	str	r3, [r7, #20]
 8011ae6:	f107 0318 	add.w	r3, r7, #24
 8011aea:	2200      	movs	r2, #0
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	605a      	str	r2, [r3, #4]
 8011af0:	609a      	str	r2, [r3, #8]
    TimerTime_t nextTxDelay = 0;
 8011af2:	2300      	movs	r3, #0
 8011af4:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( ChannelsMask, 0, 1 ) == 0 )
 8011af6:	2201      	movs	r2, #1
 8011af8:	2100      	movs	r1, #0
 8011afa:	483c      	ldr	r0, [pc, #240]	; (8011bec <RegionEU868NextChannel+0x124>)
 8011afc:	f7f8 faa0 	bl	800a040 <RegionCommonCountChannels>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <RegionEU868NextChannel+0x4c>
    { // Reactivate default channels
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011b06:	4b39      	ldr	r3, [pc, #228]	; (8011bec <RegionEU868NextChannel+0x124>)
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	f043 0307 	orr.w	r3, r3, #7
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	4b36      	ldr	r3, [pc, #216]	; (8011bec <RegionEU868NextChannel+0x124>)
 8011b12:	801a      	strh	r2, [r3, #0]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	681c      	ldr	r4, [r3, #0]
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fe fafb 	bl	8010118 <TimerGetElapsedTime>
 8011b22:	4603      	mov	r3, r0
 8011b24:	429c      	cmp	r4, r3
 8011b26:	d821      	bhi.n	8011b6c <RegionEU868NextChannel+0xa4>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, EU868_MAX_NB_BANDS );
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	7a58      	ldrb	r0, [r3, #9]
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	7a99      	ldrb	r1, [r3, #10]
 8011b36:	2305      	movs	r3, #5
 8011b38:	4a2d      	ldr	r2, [pc, #180]	; (8011bf0 <RegionEU868NextChannel+0x128>)
 8011b3a:	f7f8 faec 	bl	800a116 <RegionCommonUpdateBandTimeOff>
 8011b3e:	62b8      	str	r0, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	7a58      	ldrb	r0, [r3, #9]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011b4a:	b2d9      	uxtb	r1, r3
 8011b4c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8011b50:	9302      	str	r3, [sp, #8]
 8011b52:	f107 0314 	add.w	r3, r7, #20
 8011b56:	9301      	str	r3, [sp, #4]
 8011b58:	4b25      	ldr	r3, [pc, #148]	; (8011bf0 <RegionEU868NextChannel+0x128>)
 8011b5a:	9300      	str	r3, [sp, #0]
 8011b5c:	4b25      	ldr	r3, [pc, #148]	; (8011bf4 <RegionEU868NextChannel+0x12c>)
 8011b5e:	4a23      	ldr	r2, [pc, #140]	; (8011bec <RegionEU868NextChannel+0x124>)
 8011b60:	f7fe ffac 	bl	8010abc <CountNbOfEnabledChannels>
 8011b64:	4603      	mov	r3, r0
 8011b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011b6a:	e00f      	b.n	8011b8c <RegionEU868NextChannel+0xc4>
                                                      ChannelsMask, Channels,
                                                      Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8011b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b70:	3301      	adds	r3, #1
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	681c      	ldr	r4, [r3, #0]
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe fac9 	bl	8010118 <TimerGetElapsedTime>
 8011b86:	4603      	mov	r3, r0
 8011b88:	1ae3      	subs	r3, r4, r3
 8011b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8011b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d013      	beq.n	8011bbc <RegionEU868NextChannel+0xf4>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011b94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b98:	3b01      	subs	r3, #1
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	f7fe fbab 	bl	80102f8 <randr>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ba8:	4413      	add	r3, r2
 8011baa:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]
        return true;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e013      	b.n	8011be4 <RegionEU868NextChannel+0x11c>
    }
    else
    {
        if( delayTx > 0 )
 8011bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d004      	beq.n	8011bce <RegionEU868NextChannel+0x106>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bc8:	601a      	str	r2, [r3, #0]
            return true;
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e00a      	b.n	8011be4 <RegionEU868NextChannel+0x11c>
        }
        // Datarate not supported by any channel, restore defaults
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011bce:	4b07      	ldr	r3, [pc, #28]	; (8011bec <RegionEU868NextChannel+0x124>)
 8011bd0:	881b      	ldrh	r3, [r3, #0]
 8011bd2:	f043 0307 	orr.w	r3, r3, #7
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	4b04      	ldr	r3, [pc, #16]	; (8011bec <RegionEU868NextChannel+0x124>)
 8011bda:	801a      	strh	r2, [r3, #0]
        *time = 0;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	601a      	str	r2, [r3, #0]
        return false;
 8011be2:	2300      	movs	r3, #0
    }
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3734      	adds	r7, #52	; 0x34
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd90      	pop	{r4, r7, pc}
 8011bec:	20000988 	.word	0x20000988
 8011bf0:	200000a4 	.word	0x200000a4
 8011bf4:	200008c8 	.word	0x200008c8

08011bf8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8011c04:	2300      	movs	r3, #0
 8011c06:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	791b      	ldrb	r3, [r3, #4]
 8011c10:	737b      	strb	r3, [r7, #13]

    if( id >= EU868_MAX_NB_CHANNELS )
 8011c12:	7b7b      	ldrb	r3, [r7, #13]
 8011c14:	2b0f      	cmp	r3, #15
 8011c16:	d901      	bls.n	8011c1c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c18:	2303      	movs	r3, #3
 8011c1a:	e0aa      	b.n	8011d72 <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	7a1b      	ldrb	r3, [r3, #8]
 8011c22:	f343 0303 	sbfx	r3, r3, #0, #4
 8011c26:	b25b      	sxtb	r3, r3
 8011c28:	2207      	movs	r2, #7
 8011c2a:	2100      	movs	r1, #0
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7f8 f9b6 	bl	8009f9e <RegionCommonValueInRange>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d101      	bne.n	8011c3c <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8011c38:	2301      	movs	r3, #1
 8011c3a:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	7a1b      	ldrb	r3, [r3, #8]
 8011c42:	f343 1303 	sbfx	r3, r3, #4, #4
 8011c46:	b25b      	sxtb	r3, r3
 8011c48:	2207      	movs	r2, #7
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f8 f9a6 	bl	8009f9e <RegionCommonValueInRange>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d101      	bne.n	8011c5c <RegionEU868ChannelAdd+0x64>
    {
        drInvalid = true;
 8011c58:	2301      	movs	r3, #1
 8011c5a:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	7a1b      	ldrb	r3, [r3, #8]
 8011c62:	f343 0303 	sbfx	r3, r3, #0, #4
 8011c66:	b25a      	sxtb	r2, r3
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	7a1b      	ldrb	r3, [r3, #8]
 8011c6e:	f343 1303 	sbfx	r3, r3, #4, #4
 8011c72:	b25b      	sxtb	r3, r3
 8011c74:	429a      	cmp	r2, r3
 8011c76:	dd01      	ble.n	8011c7c <RegionEU868ChannelAdd+0x84>
    {
        drInvalid = true;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	73fb      	strb	r3, [r7, #15]
    }

    // Default channels don't accept all values
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011c7c:	7b7b      	ldrb	r3, [r7, #13]
 8011c7e:	2b02      	cmp	r3, #2
 8011c80:	d828      	bhi.n	8011cd4 <RegionEU868ChannelAdd+0xdc>
    {
        // Validate the datarate range for min: must be DR_0
        if( channelAdd->NewChannel->DrRange.Fields.Min > DR_0 )
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	7a1b      	ldrb	r3, [r3, #8]
 8011c88:	f343 0303 	sbfx	r3, r3, #0, #4
 8011c8c:	b25b      	sxtb	r3, r3
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	dd01      	ble.n	8011c96 <RegionEU868ChannelAdd+0x9e>
        {
            drInvalid = true;
 8011c92:	2301      	movs	r3, #1
 8011c94:	73fb      	strb	r3, [r7, #15]
        }
        // Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
        if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE ) == false )
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	7a1b      	ldrb	r3, [r3, #8]
 8011c9c:	f343 1303 	sbfx	r3, r3, #4, #4
 8011ca0:	b25b      	sxtb	r3, r3
 8011ca2:	2207      	movs	r2, #7
 8011ca4:	2105      	movs	r1, #5
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7f8 f979 	bl	8009f9e <RegionCommonValueInRange>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <RegionEU868ChannelAdd+0xbe>
        {
            drInvalid = true;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	73fb      	strb	r3, [r7, #15]
        }
        // We are not allowed to change the frequency
        if( channelAdd->NewChannel->Frequency != Channels[id].Frequency )
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	6819      	ldr	r1, [r3, #0]
 8011cbc:	7b7a      	ldrb	r2, [r7, #13]
 8011cbe:	482f      	ldr	r0, [pc, #188]	; (8011d7c <RegionEU868ChannelAdd+0x184>)
 8011cc0:	4613      	mov	r3, r2
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	4413      	add	r3, r2
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4403      	add	r3, r0
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4299      	cmp	r1, r3
 8011cce:	d001      	beq.n	8011cd4 <RegionEU868ChannelAdd+0xdc>
        {
            freqInvalid = true;
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check frequency
    if( freqInvalid == false )
 8011cd4:	7bbb      	ldrb	r3, [r7, #14]
 8011cd6:	f083 0301 	eor.w	r3, r3, #1
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d010      	beq.n	8011d02 <RegionEU868ChannelAdd+0x10a>
    {
        if( VerifyTxFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f107 020c 	add.w	r2, r7, #12
 8011cea:	4611      	mov	r1, r2
 8011cec:	4618      	mov	r0, r3
 8011cee:	f7fe fe6f 	bl	80109d0 <VerifyTxFreq>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	f083 0301 	eor.w	r3, r3, #1
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d001      	beq.n	8011d02 <RegionEU868ChannelAdd+0x10a>
        {
            freqInvalid = true;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d004      	beq.n	8011d12 <RegionEU868ChannelAdd+0x11a>
 8011d08:	7bbb      	ldrb	r3, [r7, #14]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011d0e:	2306      	movs	r3, #6
 8011d10:	e02f      	b.n	8011d72 <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8011d12:	7bfb      	ldrb	r3, [r7, #15]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d001      	beq.n	8011d1c <RegionEU868ChannelAdd+0x124>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011d18:	2305      	movs	r3, #5
 8011d1a:	e02a      	b.n	8011d72 <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8011d1c:	7bbb      	ldrb	r3, [r7, #14]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d001      	beq.n	8011d26 <RegionEU868ChannelAdd+0x12e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011d22:	2304      	movs	r3, #4
 8011d24:	e025      	b.n	8011d72 <RegionEU868ChannelAdd+0x17a>
    }

    memcpy( &(Channels[id]), channelAdd->NewChannel, sizeof( Channels[id] ) );
 8011d26:	7b7a      	ldrb	r2, [r7, #13]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	005b      	lsls	r3, r3, #1
 8011d2c:	4413      	add	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	4a12      	ldr	r2, [pc, #72]	; (8011d7c <RegionEU868ChannelAdd+0x184>)
 8011d32:	1898      	adds	r0, r3, r2
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	220c      	movs	r2, #12
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	f000 f8fa 	bl	8011f34 <memcpy>
    Channels[id].Band = band;
 8011d40:	7b7a      	ldrb	r2, [r7, #13]
 8011d42:	7b38      	ldrb	r0, [r7, #12]
 8011d44:	490d      	ldr	r1, [pc, #52]	; (8011d7c <RegionEU868ChannelAdd+0x184>)
 8011d46:	4613      	mov	r3, r2
 8011d48:	005b      	lsls	r3, r3, #1
 8011d4a:	4413      	add	r3, r2
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	440b      	add	r3, r1
 8011d50:	3309      	adds	r3, #9
 8011d52:	4602      	mov	r2, r0
 8011d54:	701a      	strb	r2, [r3, #0]
    ChannelsMask[0] |= ( 1 << id );
 8011d56:	4b0a      	ldr	r3, [pc, #40]	; (8011d80 <RegionEU868ChannelAdd+0x188>)
 8011d58:	881b      	ldrh	r3, [r3, #0]
 8011d5a:	b21a      	sxth	r2, r3
 8011d5c:	7b7b      	ldrb	r3, [r7, #13]
 8011d5e:	2101      	movs	r1, #1
 8011d60:	fa01 f303 	lsl.w	r3, r1, r3
 8011d64:	b21b      	sxth	r3, r3
 8011d66:	4313      	orrs	r3, r2
 8011d68:	b21b      	sxth	r3, r3
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	4b04      	ldr	r3, [pc, #16]	; (8011d80 <RegionEU868ChannelAdd+0x188>)
 8011d6e:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 8011d70:	2300      	movs	r3, #0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	200008c8 	.word	0x200008c8
 8011d80:	20000988 	.word	0x20000988

08011d84 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011d92:	7dfb      	ldrb	r3, [r7, #23]
 8011d94:	2b02      	cmp	r3, #2
 8011d96:	d801      	bhi.n	8011d9c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	e012      	b.n	8011dc2 <RegionEU868ChannelsRemove+0x3e>
    }

    // Remove the channel from the list of channels
    Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011d9c:	7dfa      	ldrb	r2, [r7, #23]
 8011d9e:	490b      	ldr	r1, [pc, #44]	; (8011dcc <RegionEU868ChannelsRemove+0x48>)
 8011da0:	4613      	mov	r3, r2
 8011da2:	005b      	lsls	r3, r3, #1
 8011da4:	4413      	add	r3, r2
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	440b      	add	r3, r1
 8011daa:	461a      	mov	r2, r3
 8011dac:	2300      	movs	r3, #0
 8011dae:	6013      	str	r3, [r2, #0]
 8011db0:	6053      	str	r3, [r2, #4]
 8011db2:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8011db4:	7dfb      	ldrb	r3, [r7, #23]
 8011db6:	2210      	movs	r2, #16
 8011db8:	4619      	mov	r1, r3
 8011dba:	4805      	ldr	r0, [pc, #20]	; (8011dd0 <RegionEU868ChannelsRemove+0x4c>)
 8011dbc:	f7f8 f90c 	bl	8009fd8 <RegionCommonChanDisable>
 8011dc0:	4603      	mov	r3, r0
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3718      	adds	r7, #24
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	200008c8 	.word	0x200008c8
 8011dd0:	20000988 	.word	0x20000988

08011dd4 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask );
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	4619      	mov	r1, r3
 8011de8:	4a1c      	ldr	r2, [pc, #112]	; (8011e5c <RegionEU868SetContinuousWave+0x88>)
 8011dea:	460b      	mov	r3, r1
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	440b      	add	r3, r1
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	4413      	add	r3, r2
 8011df4:	3309      	adds	r3, #9
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	4a19      	ldr	r2, [pc, #100]	; (8011e60 <RegionEU868SetContinuousWave+0x8c>)
 8011dfa:	011b      	lsls	r3, r3, #4
 8011dfc:	4413      	add	r3, r2
 8011dfe:	3302      	adds	r3, #2
 8011e00:	f993 1000 	ldrsb.w	r1, [r3]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8011e0a:	4b16      	ldr	r3, [pc, #88]	; (8011e64 <RegionEU868SetContinuousWave+0x90>)
 8011e0c:	f7fe fdc4 	bl	8010998 <LimitTxPower>
 8011e10:	4603      	mov	r3, r0
 8011e12:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4a0f      	ldr	r2, [pc, #60]	; (8011e5c <RegionEU868SetContinuousWave+0x88>)
 8011e20:	460b      	mov	r3, r1
 8011e22:	005b      	lsls	r3, r3, #1
 8011e24:	440b      	add	r3, r1
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	4413      	add	r3, r2
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6859      	ldr	r1, [r3, #4]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	689a      	ldr	r2, [r3, #8]
 8011e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f8 fb4c 	bl	800a4d8 <RegionCommonComputeTxPower>
 8011e40:	4603      	mov	r3, r0
 8011e42:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011e44:	4b08      	ldr	r3, [pc, #32]	; (8011e68 <RegionEU868SetContinuousWave+0x94>)
 8011e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	8992      	ldrh	r2, [r2, #12]
 8011e4c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011e50:	68b8      	ldr	r0, [r7, #8]
 8011e52:	4798      	blx	r3
}
 8011e54:	bf00      	nop
 8011e56:	3710      	adds	r7, #16
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	200008c8 	.word	0x200008c8
 8011e60:	200000a4 	.word	0x200000a4
 8011e64:	20000988 	.word	0x20000988
 8011e68:	08012794 	.word	0x08012794

08011e6c <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	71fb      	strb	r3, [r7, #7]
 8011e76:	460b      	mov	r3, r1
 8011e78:	71bb      	strb	r3, [r7, #6]
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	717b      	strb	r3, [r7, #5]
    int8_t datarate = dr - drOffset;
 8011e7e:	79ba      	ldrb	r2, [r7, #6]
 8011e80:	797b      	ldrb	r3, [r7, #5]
 8011e82:	1ad3      	subs	r3, r2, r3
 8011e84:	b2db      	uxtb	r3, r3
 8011e86:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8011e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	da01      	bge.n	8011e94 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8011e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3714      	adds	r7, #20
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bc80      	pop	{r7}
 8011e9e:	4770      	bx	lr

08011ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8011ea0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8011ea2:	e003      	b.n	8011eac <LoopCopyDataInit>

08011ea4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8011ea4:	4b0b      	ldr	r3, [pc, #44]	; (8011ed4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8011ea6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8011ea8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8011eaa:	3104      	adds	r1, #4

08011eac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8011eac:	480a      	ldr	r0, [pc, #40]	; (8011ed8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8011eae:	4b0b      	ldr	r3, [pc, #44]	; (8011edc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8011eb0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8011eb2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8011eb4:	d3f6      	bcc.n	8011ea4 <CopyDataInit>
  ldr r2, =_sbss
 8011eb6:	4a0a      	ldr	r2, [pc, #40]	; (8011ee0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8011eb8:	e002      	b.n	8011ec0 <LoopFillZerobss>

08011eba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8011eba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8011ebc:	f842 3b04 	str.w	r3, [r2], #4

08011ec0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8011ec0:	4b08      	ldr	r3, [pc, #32]	; (8011ee4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8011ec2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8011ec4:	d3f9      	bcc.n	8011eba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011ec6:	f7fd feb5 	bl	800fc34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011eca:	f000 f80f 	bl	8011eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011ece:	f7fa f8ff 	bl	800c0d0 <main>
  bx lr
 8011ed2:	4770      	bx	lr
  ldr r3, =_sidata
 8011ed4:	080129ac 	.word	0x080129ac
  ldr r0, =_sdata
 8011ed8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8011edc:	200000f4 	.word	0x200000f4
  ldr r2, =_sbss
 8011ee0:	200000f4 	.word	0x200000f4
  ldr r3, = _ebss
 8011ee4:	200013e0 	.word	0x200013e0

08011ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011ee8:	e7fe      	b.n	8011ee8 <ADC1_IRQHandler>
	...

08011eec <__libc_init_array>:
 8011eec:	b570      	push	{r4, r5, r6, lr}
 8011eee:	2600      	movs	r6, #0
 8011ef0:	4d0c      	ldr	r5, [pc, #48]	; (8011f24 <__libc_init_array+0x38>)
 8011ef2:	4c0d      	ldr	r4, [pc, #52]	; (8011f28 <__libc_init_array+0x3c>)
 8011ef4:	1b64      	subs	r4, r4, r5
 8011ef6:	10a4      	asrs	r4, r4, #2
 8011ef8:	42a6      	cmp	r6, r4
 8011efa:	d109      	bne.n	8011f10 <__libc_init_array+0x24>
 8011efc:	f000 f978 	bl	80121f0 <_init>
 8011f00:	2600      	movs	r6, #0
 8011f02:	4d0a      	ldr	r5, [pc, #40]	; (8011f2c <__libc_init_array+0x40>)
 8011f04:	4c0a      	ldr	r4, [pc, #40]	; (8011f30 <__libc_init_array+0x44>)
 8011f06:	1b64      	subs	r4, r4, r5
 8011f08:	10a4      	asrs	r4, r4, #2
 8011f0a:	42a6      	cmp	r6, r4
 8011f0c:	d105      	bne.n	8011f1a <__libc_init_array+0x2e>
 8011f0e:	bd70      	pop	{r4, r5, r6, pc}
 8011f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f14:	4798      	blx	r3
 8011f16:	3601      	adds	r6, #1
 8011f18:	e7ee      	b.n	8011ef8 <__libc_init_array+0xc>
 8011f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f1e:	4798      	blx	r3
 8011f20:	3601      	adds	r6, #1
 8011f22:	e7f2      	b.n	8011f0a <__libc_init_array+0x1e>
 8011f24:	080129a4 	.word	0x080129a4
 8011f28:	080129a4 	.word	0x080129a4
 8011f2c:	080129a4 	.word	0x080129a4
 8011f30:	080129a8 	.word	0x080129a8

08011f34 <memcpy>:
 8011f34:	440a      	add	r2, r1
 8011f36:	4291      	cmp	r1, r2
 8011f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f3c:	d100      	bne.n	8011f40 <memcpy+0xc>
 8011f3e:	4770      	bx	lr
 8011f40:	b510      	push	{r4, lr}
 8011f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f46:	4291      	cmp	r1, r2
 8011f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f4c:	d1f9      	bne.n	8011f42 <memcpy+0xe>
 8011f4e:	bd10      	pop	{r4, pc}

08011f50 <memset>:
 8011f50:	4603      	mov	r3, r0
 8011f52:	4402      	add	r2, r0
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d100      	bne.n	8011f5a <memset+0xa>
 8011f58:	4770      	bx	lr
 8011f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8011f5e:	e7f9      	b.n	8011f54 <memset+0x4>

08011f60 <ceil>:
 8011f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f64:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8011f68:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8011f6c:	2e13      	cmp	r6, #19
 8011f6e:	4602      	mov	r2, r0
 8011f70:	460b      	mov	r3, r1
 8011f72:	4607      	mov	r7, r0
 8011f74:	460c      	mov	r4, r1
 8011f76:	4605      	mov	r5, r0
 8011f78:	dc31      	bgt.n	8011fde <ceil+0x7e>
 8011f7a:	2e00      	cmp	r6, #0
 8011f7c:	da12      	bge.n	8011fa4 <ceil+0x44>
 8011f7e:	a334      	add	r3, pc, #208	; (adr r3, 8012050 <ceil+0xf0>)
 8011f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f84:	f7ee f902 	bl	800018c <__adddf3>
 8011f88:	2200      	movs	r2, #0
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	f7ee fd44 	bl	8000a18 <__aeabi_dcmpgt>
 8011f90:	b128      	cbz	r0, 8011f9e <ceil+0x3e>
 8011f92:	2c00      	cmp	r4, #0
 8011f94:	db56      	blt.n	8012044 <ceil+0xe4>
 8011f96:	433c      	orrs	r4, r7
 8011f98:	d058      	beq.n	801204c <ceil+0xec>
 8011f9a:	2500      	movs	r5, #0
 8011f9c:	4c2e      	ldr	r4, [pc, #184]	; (8012058 <ceil+0xf8>)
 8011f9e:	4623      	mov	r3, r4
 8011fa0:	462f      	mov	r7, r5
 8011fa2:	e025      	b.n	8011ff0 <ceil+0x90>
 8011fa4:	4a2d      	ldr	r2, [pc, #180]	; (801205c <ceil+0xfc>)
 8011fa6:	fa42 f806 	asr.w	r8, r2, r6
 8011faa:	ea01 0208 	and.w	r2, r1, r8
 8011fae:	4302      	orrs	r2, r0
 8011fb0:	d01e      	beq.n	8011ff0 <ceil+0x90>
 8011fb2:	a327      	add	r3, pc, #156	; (adr r3, 8012050 <ceil+0xf0>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee f8e8 	bl	800018c <__adddf3>
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	f7ee fd2a 	bl	8000a18 <__aeabi_dcmpgt>
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d0ea      	beq.n	8011f9e <ceil+0x3e>
 8011fc8:	2c00      	cmp	r4, #0
 8011fca:	bfc2      	ittt	gt
 8011fcc:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8011fd0:	fa43 f606 	asrgt.w	r6, r3, r6
 8011fd4:	19a4      	addgt	r4, r4, r6
 8011fd6:	2500      	movs	r5, #0
 8011fd8:	ea24 0408 	bic.w	r4, r4, r8
 8011fdc:	e7df      	b.n	8011f9e <ceil+0x3e>
 8011fde:	2e33      	cmp	r6, #51	; 0x33
 8011fe0:	dd0a      	ble.n	8011ff8 <ceil+0x98>
 8011fe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011fe6:	d103      	bne.n	8011ff0 <ceil+0x90>
 8011fe8:	f7ee f8d0 	bl	800018c <__adddf3>
 8011fec:	4607      	mov	r7, r0
 8011fee:	460b      	mov	r3, r1
 8011ff0:	4638      	mov	r0, r7
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8011ffc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012000:	fa22 f808 	lsr.w	r8, r2, r8
 8012004:	ea18 0f00 	tst.w	r8, r0
 8012008:	d0f2      	beq.n	8011ff0 <ceil+0x90>
 801200a:	a311      	add	r3, pc, #68	; (adr r3, 8012050 <ceil+0xf0>)
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	f7ee f8bc 	bl	800018c <__adddf3>
 8012014:	2200      	movs	r2, #0
 8012016:	2300      	movs	r3, #0
 8012018:	f7ee fcfe 	bl	8000a18 <__aeabi_dcmpgt>
 801201c:	2800      	cmp	r0, #0
 801201e:	d0be      	beq.n	8011f9e <ceil+0x3e>
 8012020:	2c00      	cmp	r4, #0
 8012022:	dd02      	ble.n	801202a <ceil+0xca>
 8012024:	2e14      	cmp	r6, #20
 8012026:	d103      	bne.n	8012030 <ceil+0xd0>
 8012028:	3401      	adds	r4, #1
 801202a:	ea25 0508 	bic.w	r5, r5, r8
 801202e:	e7b6      	b.n	8011f9e <ceil+0x3e>
 8012030:	2301      	movs	r3, #1
 8012032:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012036:	fa03 f606 	lsl.w	r6, r3, r6
 801203a:	4435      	add	r5, r6
 801203c:	42bd      	cmp	r5, r7
 801203e:	bf38      	it	cc
 8012040:	18e4      	addcc	r4, r4, r3
 8012042:	e7f2      	b.n	801202a <ceil+0xca>
 8012044:	2500      	movs	r5, #0
 8012046:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801204a:	e7a8      	b.n	8011f9e <ceil+0x3e>
 801204c:	4625      	mov	r5, r4
 801204e:	e7a6      	b.n	8011f9e <ceil+0x3e>
 8012050:	8800759c 	.word	0x8800759c
 8012054:	7e37e43c 	.word	0x7e37e43c
 8012058:	3ff00000 	.word	0x3ff00000
 801205c:	000fffff 	.word	0x000fffff

08012060 <floor>:
 8012060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012064:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8012068:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801206c:	2e13      	cmp	r6, #19
 801206e:	4602      	mov	r2, r0
 8012070:	460b      	mov	r3, r1
 8012072:	4607      	mov	r7, r0
 8012074:	460c      	mov	r4, r1
 8012076:	4605      	mov	r5, r0
 8012078:	dc34      	bgt.n	80120e4 <floor+0x84>
 801207a:	2e00      	cmp	r6, #0
 801207c:	da15      	bge.n	80120aa <floor+0x4a>
 801207e:	a334      	add	r3, pc, #208	; (adr r3, 8012150 <floor+0xf0>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	f7ee f882 	bl	800018c <__adddf3>
 8012088:	2200      	movs	r2, #0
 801208a:	2300      	movs	r3, #0
 801208c:	f7ee fcc4 	bl	8000a18 <__aeabi_dcmpgt>
 8012090:	b140      	cbz	r0, 80120a4 <floor+0x44>
 8012092:	2c00      	cmp	r4, #0
 8012094:	da59      	bge.n	801214a <floor+0xea>
 8012096:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801209a:	ea57 0503 	orrs.w	r5, r7, r3
 801209e:	d001      	beq.n	80120a4 <floor+0x44>
 80120a0:	2500      	movs	r5, #0
 80120a2:	4c2d      	ldr	r4, [pc, #180]	; (8012158 <floor+0xf8>)
 80120a4:	4623      	mov	r3, r4
 80120a6:	462f      	mov	r7, r5
 80120a8:	e025      	b.n	80120f6 <floor+0x96>
 80120aa:	4a2c      	ldr	r2, [pc, #176]	; (801215c <floor+0xfc>)
 80120ac:	fa42 f806 	asr.w	r8, r2, r6
 80120b0:	ea01 0208 	and.w	r2, r1, r8
 80120b4:	4302      	orrs	r2, r0
 80120b6:	d01e      	beq.n	80120f6 <floor+0x96>
 80120b8:	a325      	add	r3, pc, #148	; (adr r3, 8012150 <floor+0xf0>)
 80120ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120be:	f7ee f865 	bl	800018c <__adddf3>
 80120c2:	2200      	movs	r2, #0
 80120c4:	2300      	movs	r3, #0
 80120c6:	f7ee fca7 	bl	8000a18 <__aeabi_dcmpgt>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	d0ea      	beq.n	80120a4 <floor+0x44>
 80120ce:	2c00      	cmp	r4, #0
 80120d0:	bfbe      	ittt	lt
 80120d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80120d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80120da:	19a4      	addlt	r4, r4, r6
 80120dc:	2500      	movs	r5, #0
 80120de:	ea24 0408 	bic.w	r4, r4, r8
 80120e2:	e7df      	b.n	80120a4 <floor+0x44>
 80120e4:	2e33      	cmp	r6, #51	; 0x33
 80120e6:	dd0a      	ble.n	80120fe <floor+0x9e>
 80120e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80120ec:	d103      	bne.n	80120f6 <floor+0x96>
 80120ee:	f7ee f84d 	bl	800018c <__adddf3>
 80120f2:	4607      	mov	r7, r0
 80120f4:	460b      	mov	r3, r1
 80120f6:	4638      	mov	r0, r7
 80120f8:	4619      	mov	r1, r3
 80120fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012102:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012106:	fa22 f808 	lsr.w	r8, r2, r8
 801210a:	ea18 0f00 	tst.w	r8, r0
 801210e:	d0f2      	beq.n	80120f6 <floor+0x96>
 8012110:	a30f      	add	r3, pc, #60	; (adr r3, 8012150 <floor+0xf0>)
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	f7ee f839 	bl	800018c <__adddf3>
 801211a:	2200      	movs	r2, #0
 801211c:	2300      	movs	r3, #0
 801211e:	f7ee fc7b 	bl	8000a18 <__aeabi_dcmpgt>
 8012122:	2800      	cmp	r0, #0
 8012124:	d0be      	beq.n	80120a4 <floor+0x44>
 8012126:	2c00      	cmp	r4, #0
 8012128:	da02      	bge.n	8012130 <floor+0xd0>
 801212a:	2e14      	cmp	r6, #20
 801212c:	d103      	bne.n	8012136 <floor+0xd6>
 801212e:	3401      	adds	r4, #1
 8012130:	ea25 0508 	bic.w	r5, r5, r8
 8012134:	e7b6      	b.n	80120a4 <floor+0x44>
 8012136:	2301      	movs	r3, #1
 8012138:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801213c:	fa03 f606 	lsl.w	r6, r3, r6
 8012140:	4435      	add	r5, r6
 8012142:	42bd      	cmp	r5, r7
 8012144:	bf38      	it	cc
 8012146:	18e4      	addcc	r4, r4, r3
 8012148:	e7f2      	b.n	8012130 <floor+0xd0>
 801214a:	2500      	movs	r5, #0
 801214c:	462c      	mov	r4, r5
 801214e:	e7a9      	b.n	80120a4 <floor+0x44>
 8012150:	8800759c 	.word	0x8800759c
 8012154:	7e37e43c 	.word	0x7e37e43c
 8012158:	bff00000 	.word	0xbff00000
 801215c:	000fffff 	.word	0x000fffff

08012160 <round>:
 8012160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012162:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012166:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 801216a:	2c13      	cmp	r4, #19
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4606      	mov	r6, r0
 8012172:	460d      	mov	r5, r1
 8012174:	dc19      	bgt.n	80121aa <round+0x4a>
 8012176:	2c00      	cmp	r4, #0
 8012178:	da09      	bge.n	801218e <round+0x2e>
 801217a:	3401      	adds	r4, #1
 801217c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8012180:	d103      	bne.n	801218a <round+0x2a>
 8012182:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012186:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801218a:	2200      	movs	r2, #0
 801218c:	e02a      	b.n	80121e4 <round+0x84>
 801218e:	4917      	ldr	r1, [pc, #92]	; (80121ec <round+0x8c>)
 8012190:	4121      	asrs	r1, r4
 8012192:	ea03 0001 	and.w	r0, r3, r1
 8012196:	4302      	orrs	r2, r0
 8012198:	d010      	beq.n	80121bc <round+0x5c>
 801219a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801219e:	fa42 f404 	asr.w	r4, r2, r4
 80121a2:	4423      	add	r3, r4
 80121a4:	ea23 0301 	bic.w	r3, r3, r1
 80121a8:	e7ef      	b.n	801218a <round+0x2a>
 80121aa:	2c33      	cmp	r4, #51	; 0x33
 80121ac:	dd09      	ble.n	80121c2 <round+0x62>
 80121ae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80121b2:	d103      	bne.n	80121bc <round+0x5c>
 80121b4:	f7ed ffea 	bl	800018c <__adddf3>
 80121b8:	4606      	mov	r6, r0
 80121ba:	460d      	mov	r5, r1
 80121bc:	4630      	mov	r0, r6
 80121be:	4629      	mov	r1, r5
 80121c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c2:	f04f 30ff 	mov.w	r0, #4294967295
 80121c6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80121ca:	40f8      	lsrs	r0, r7
 80121cc:	4202      	tst	r2, r0
 80121ce:	d0f5      	beq.n	80121bc <round+0x5c>
 80121d0:	2101      	movs	r1, #1
 80121d2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80121d6:	fa01 f404 	lsl.w	r4, r1, r4
 80121da:	1912      	adds	r2, r2, r4
 80121dc:	bf28      	it	cs
 80121de:	185b      	addcs	r3, r3, r1
 80121e0:	ea22 0200 	bic.w	r2, r2, r0
 80121e4:	4619      	mov	r1, r3
 80121e6:	4610      	mov	r0, r2
 80121e8:	e7e6      	b.n	80121b8 <round+0x58>
 80121ea:	bf00      	nop
 80121ec:	000fffff 	.word	0x000fffff

080121f0 <_init>:
 80121f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f2:	bf00      	nop
 80121f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121f6:	bc08      	pop	{r3}
 80121f8:	469e      	mov	lr, r3
 80121fa:	4770      	bx	lr

080121fc <_fini>:
 80121fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121fe:	bf00      	nop
 8012200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012202:	bc08      	pop	{r3}
 8012204:	469e      	mov	lr, r3
 8012206:	4770      	bx	lr
