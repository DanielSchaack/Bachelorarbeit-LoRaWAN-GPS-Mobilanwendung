
LoRa_Node_151_LoRaWAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012118  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  08012258  08012258  00022258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129d0  080129d0  000300f4  2**0
                  CONTENTS
  4 .ARM          00000008  080129d0  080129d0  000229d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129d8  080129d8  000300f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129d8  080129d8  000229d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129dc  080129dc  000229dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080129e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e4  200000f4  08012ad4  000300f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013d8  08012ad4  000313d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fac2  00000000  00000000  0003011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006743  00000000  00000000  0006fbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00076328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00077cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe8f  00000000  00000000  00079430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f46  00000000  00000000  000992bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d00  00000000  00000000  000bc205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015df05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006920  00000000  00000000  0015df58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f4 	.word	0x200000f4
 800015c:	00000000 	.word	0x00000000
 8000160:	08012240 	.word	0x08012240

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f8 	.word	0x200000f8
 800017c:	08012240 	.word	0x08012240

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	bf28      	it	cs
 8000b78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b7c:	d2ed      	bcs.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b96e 	b.w	8000fcc <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	468e      	mov	lr, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f040 8083 	bne.w	8000e20 <__udivmoddi4+0x118>
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	4617      	mov	r7, r2
 8000d1e:	d947      	bls.n	8000db0 <__udivmoddi4+0xa8>
 8000d20:	fab2 f382 	clz	r3, r2
 8000d24:	b14b      	cbz	r3, 8000d3a <__udivmoddi4+0x32>
 8000d26:	f1c3 0120 	rsb	r1, r3, #32
 8000d2a:	fa05 fe03 	lsl.w	lr, r5, r3
 8000d2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d32:	409f      	lsls	r7, r3
 8000d34:	ea41 0e0e 	orr.w	lr, r1, lr
 8000d38:	409c      	lsls	r4, r3
 8000d3a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d3e:	fbbe fcf8 	udiv	ip, lr, r8
 8000d42:	fa1f f987 	uxth.w	r9, r7
 8000d46:	fb08 e21c 	mls	r2, r8, ip, lr
 8000d4a:	fb0c f009 	mul.w	r0, ip, r9
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000d54:	4290      	cmp	r0, r2
 8000d56:	d90a      	bls.n	8000d6e <__udivmoddi4+0x66>
 8000d58:	18ba      	adds	r2, r7, r2
 8000d5a:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000d5e:	f080 8118 	bcs.w	8000f92 <__udivmoddi4+0x28a>
 8000d62:	4290      	cmp	r0, r2
 8000d64:	f240 8115 	bls.w	8000f92 <__udivmoddi4+0x28a>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443a      	add	r2, r7
 8000d6e:	1a12      	subs	r2, r2, r0
 8000d70:	fbb2 f0f8 	udiv	r0, r2, r8
 8000d74:	fb08 2210 	mls	r2, r8, r0, r2
 8000d78:	fb00 f109 	mul.w	r1, r0, r9
 8000d7c:	b2a4      	uxth	r4, r4
 8000d7e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d82:	42a1      	cmp	r1, r4
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d86:	193c      	adds	r4, r7, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	f080 8103 	bcs.w	8000f96 <__udivmoddi4+0x28e>
 8000d90:	42a1      	cmp	r1, r4
 8000d92:	f240 8100 	bls.w	8000f96 <__udivmoddi4+0x28e>
 8000d96:	3802      	subs	r0, #2
 8000d98:	443c      	add	r4, r7
 8000d9a:	1a64      	subs	r4, r4, r1
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da2:	b11e      	cbz	r6, 8000dac <__udivmoddi4+0xa4>
 8000da4:	2200      	movs	r2, #0
 8000da6:	40dc      	lsrs	r4, r3
 8000da8:	e9c6 4200 	strd	r4, r2, [r6]
 8000dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xac>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f382 	clz	r3, r2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d14f      	bne.n	8000e5c <__udivmoddi4+0x154>
 8000dbc:	1a8d      	subs	r5, r1, r2
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000dc4:	fa1f f882 	uxth.w	r8, r2
 8000dc8:	fbb5 fcfe 	udiv	ip, r5, lr
 8000dcc:	fb0e 551c 	mls	r5, lr, ip, r5
 8000dd0:	fb08 f00c 	mul.w	r0, r8, ip
 8000dd4:	0c22      	lsrs	r2, r4, #16
 8000dd6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000dda:	42a8      	cmp	r0, r5
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0xe6>
 8000dde:	197d      	adds	r5, r7, r5
 8000de0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0xe4>
 8000de6:	42a8      	cmp	r0, r5
 8000de8:	f200 80e9 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000dec:	4694      	mov	ip, r2
 8000dee:	1a2d      	subs	r5, r5, r0
 8000df0:	fbb5 f0fe 	udiv	r0, r5, lr
 8000df4:	fb0e 5510 	mls	r5, lr, r0, r5
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	b2a4      	uxth	r4, r4
 8000dfe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e02:	45a0      	cmp	r8, r4
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x10e>
 8000e06:	193c      	adds	r4, r7, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x10c>
 8000e0e:	45a0      	cmp	r8, r4
 8000e10:	f200 80d9 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 0408 	sub.w	r4, r4, r8
 8000e1a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1e:	e7c0      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x12e>
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	f000 80b1 	beq.w	8000f8c <__udivmoddi4+0x284>
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e30:	4608      	mov	r0, r1
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f183 	clz	r1, r3
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	d14b      	bne.n	8000ed6 <__udivmoddi4+0x1ce>
 8000e3e:	42ab      	cmp	r3, r5
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0x140>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80b9 	bhi.w	8000fba <__udivmoddi4+0x2b2>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0aa      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000e56:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e5a:	e7a7      	b.n	8000dac <__udivmoddi4+0xa4>
 8000e5c:	409f      	lsls	r7, r3
 8000e5e:	f1c3 0220 	rsb	r2, r3, #32
 8000e62:	40d1      	lsrs	r1, r2
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e6c:	fa1f f887 	uxth.w	r8, r7
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	fa24 f202 	lsr.w	r2, r4, r2
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	fb00 fc08 	mul.w	ip, r0, r8
 8000e7e:	432a      	orrs	r2, r5
 8000e80:	0c15      	lsrs	r5, r2, #16
 8000e82:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000e86:	45ac      	cmp	ip, r5
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x19a>
 8000e8e:	197d      	adds	r5, r7, r5
 8000e90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e94:	f080 808f 	bcs.w	8000fb6 <__udivmoddi4+0x2ae>
 8000e98:	45ac      	cmp	ip, r5
 8000e9a:	f240 808c 	bls.w	8000fb6 <__udivmoddi4+0x2ae>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443d      	add	r5, r7
 8000ea2:	eba5 050c 	sub.w	r5, r5, ip
 8000ea6:	fbb5 f1fe 	udiv	r1, r5, lr
 8000eaa:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000eae:	fb01 f908 	mul.w	r9, r1, r8
 8000eb2:	b295      	uxth	r5, r2
 8000eb4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000eb8:	45a9      	cmp	r9, r5
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x1c4>
 8000ebc:	197d      	adds	r5, r7, r5
 8000ebe:	f101 32ff 	add.w	r2, r1, #4294967295
 8000ec2:	d274      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000ec4:	45a9      	cmp	r9, r5
 8000ec6:	d972      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000ec8:	3902      	subs	r1, #2
 8000eca:	443d      	add	r5, r7
 8000ecc:	eba5 0509 	sub.w	r5, r5, r9
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e778      	b.n	8000dc8 <__udivmoddi4+0xc0>
 8000ed6:	f1c1 0720 	rsb	r7, r1, #32
 8000eda:	408b      	lsls	r3, r1
 8000edc:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee0:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee4:	fa25 f407 	lsr.w	r4, r5, r7
 8000ee8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000eec:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ef0:	fa1f f88c 	uxth.w	r8, ip
 8000ef4:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ef8:	fa20 f307 	lsr.w	r3, r0, r7
 8000efc:	fb09 fa08 	mul.w	sl, r9, r8
 8000f00:	408d      	lsls	r5, r1
 8000f02:	431d      	orrs	r5, r3
 8000f04:	0c2b      	lsrs	r3, r5, #16
 8000f06:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f0a:	45a2      	cmp	sl, r4
 8000f0c:	fa02 f201 	lsl.w	r2, r2, r1
 8000f10:	fa00 f301 	lsl.w	r3, r0, r1
 8000f14:	d909      	bls.n	8000f2a <__udivmoddi4+0x222>
 8000f16:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1a:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f1e:	d248      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000f20:	45a2      	cmp	sl, r4
 8000f22:	d946      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000f24:	f1a9 0902 	sub.w	r9, r9, #2
 8000f28:	4464      	add	r4, ip
 8000f2a:	eba4 040a 	sub.w	r4, r4, sl
 8000f2e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000f32:	fb0e 4410 	mls	r4, lr, r0, r4
 8000f36:	fb00 fa08 	mul.w	sl, r0, r8
 8000f3a:	b2ad      	uxth	r5, r5
 8000f3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f40:	45a2      	cmp	sl, r4
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x24e>
 8000f44:	eb1c 0404 	adds.w	r4, ip, r4
 8000f48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f4c:	d22d      	bcs.n	8000faa <__udivmoddi4+0x2a2>
 8000f4e:	45a2      	cmp	sl, r4
 8000f50:	d92b      	bls.n	8000faa <__udivmoddi4+0x2a2>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4464      	add	r4, ip
 8000f56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5e:	eba4 040a 	sub.w	r4, r4, sl
 8000f62:	454c      	cmp	r4, r9
 8000f64:	46c6      	mov	lr, r8
 8000f66:	464d      	mov	r5, r9
 8000f68:	d319      	bcc.n	8000f9e <__udivmoddi4+0x296>
 8000f6a:	d016      	beq.n	8000f9a <__udivmoddi4+0x292>
 8000f6c:	b15e      	cbz	r6, 8000f86 <__udivmoddi4+0x27e>
 8000f6e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f72:	eb64 0405 	sbc.w	r4, r4, r5
 8000f76:	fa04 f707 	lsl.w	r7, r4, r7
 8000f7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	40cc      	lsrs	r4, r1
 8000f82:	e9c6 7400 	strd	r7, r4, [r6]
 8000f86:	2100      	movs	r1, #0
 8000f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e70c      	b.n	8000dac <__udivmoddi4+0xa4>
 8000f92:	468c      	mov	ip, r1
 8000f94:	e6eb      	b.n	8000d6e <__udivmoddi4+0x66>
 8000f96:	4610      	mov	r0, r2
 8000f98:	e6ff      	b.n	8000d9a <__udivmoddi4+0x92>
 8000f9a:	4543      	cmp	r3, r8
 8000f9c:	d2e6      	bcs.n	8000f6c <__udivmoddi4+0x264>
 8000f9e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fa2:	eb69 050c 	sbc.w	r5, r9, ip
 8000fa6:	3801      	subs	r0, #1
 8000fa8:	e7e0      	b.n	8000f6c <__udivmoddi4+0x264>
 8000faa:	4628      	mov	r0, r5
 8000fac:	e7d3      	b.n	8000f56 <__udivmoddi4+0x24e>
 8000fae:	4611      	mov	r1, r2
 8000fb0:	e78c      	b.n	8000ecc <__udivmoddi4+0x1c4>
 8000fb2:	4681      	mov	r9, r0
 8000fb4:	e7b9      	b.n	8000f2a <__udivmoddi4+0x222>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e773      	b.n	8000ea2 <__udivmoddi4+0x19a>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e749      	b.n	8000e52 <__udivmoddi4+0x14a>
 8000fbe:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc2:	443d      	add	r5, r7
 8000fc4:	e713      	b.n	8000dee <__udivmoddi4+0xe6>
 8000fc6:	3802      	subs	r0, #2
 8000fc8:	443c      	add	r4, r7
 8000fca:	e724      	b.n	8000e16 <__udivmoddi4+0x10e>

08000fcc <__aeabi_idiv0>:
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 fc30 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f80d 	bl	8001000 <HAL_InitTick>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e001      	b.n	8000ff6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff2:	f00c fb83 	bl	800d6fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_InitTick+0x68>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d022      	beq.n	800105a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_InitTick+0x6c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_InitTick+0x68>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001020:	fbb1 f3f3 	udiv	r3, r1, r3
 8001024:	fbb2 f3f3 	udiv	r3, r2, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fc3e 	bl	80018aa <HAL_SYSTICK_Config>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10f      	bne.n	8001054 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d809      	bhi.n	800104e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	f000 fc08 	bl	8001856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_InitTick+0x70>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e007      	b.n	800105e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e004      	b.n	800105e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000004 	.word	0x20000004
 800106c:	2000009c 	.word	0x2000009c
 8001070:	20000000 	.word	0x20000000

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x1c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x20>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4413      	add	r3, r2
 8001082:	4a03      	ldr	r2, [pc, #12]	; (8001090 <HAL_IncTick+0x1c>)
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000097c 	.word	0x2000097c
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	; (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	2000097c 	.word	0x2000097c

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff fff0 	bl	8001098 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d004      	beq.n	80010d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_Delay+0x40>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	4413      	add	r3, r2
 80010ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d0:	bf00      	nop
 80010d2:	f7ff ffe1 	bl	8001098 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d8f7      	bhi.n	80010d2 <HAL_Delay+0x26>
  {
  }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004

080010f0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <HAL_SuspendTick+0x18>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_SuspendTick+0x18>)
 80010fa:	f023 0302 	bic.w	r3, r3, #2
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_ResumeTick+0x18>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a03      	ldr	r2, [pc, #12]	; (8001124 <HAL_ResumeTick+0x18>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6053      	str	r3, [r2, #4]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	e0042000 	.word	0xe0042000

08001144 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a03      	ldr	r2, [pc, #12]	; (800115c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6053      	str	r3, [r2, #4]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	e0042000 	.word	0xe0042000

08001160 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6053      	str	r3, [r2, #4]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	e0042000 	.word	0xe0042000

0800117c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e127      	b.n	80013ec <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d115      	bne.n	80011d6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b8:	4b8e      	ldr	r3, [pc, #568]	; (80013f4 <HAL_ADC_Init+0x278>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a8d      	ldr	r2, [pc, #564]	; (80013f4 <HAL_ADC_Init+0x278>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_ADC_Init+0x278>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f00c fac1 	bl	800d758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 80ff 	bne.w	80013e2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ec:	f023 0302 	bic.w	r3, r3, #2
 80011f0:	f043 0202 	orr.w	r2, r3, #2
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80011f8:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_ADC_Init+0x27c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	497c      	ldr	r1, [pc, #496]	; (80013f8 <HAL_ADC_Init+0x27c>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001212:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121a:	4619      	mov	r1, r3
 800121c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001220:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001236:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800123c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001244:	4619      	mov	r1, r3
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800125e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001262:	4313      	orrs	r3, r2
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	2b10      	cmp	r3, #16
 800126c:	d007      	beq.n	800127e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001276:	4313      	orrs	r3, r2
 8001278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127a:	4313      	orrs	r3, r2
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d04f      	beq.n	800132c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001292:	4313      	orrs	r3, r2
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800129e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6912      	ldr	r2, [r2, #16]
 80012a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80012a8:	d003      	beq.n	80012b2 <HAL_ADC_Init+0x136>
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6912      	ldr	r2, [r2, #16]
 80012ae:	2a01      	cmp	r2, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_ADC_Init+0x13c>
 80012b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b6:	e000      	b.n	80012ba <HAL_ADC_Init+0x13e>
 80012b8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80012ba:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80012bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012be:	4313      	orrs	r3, r2
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d125      	bne.n	8001318 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d114      	bne.n	8001300 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	3b01      	subs	r3, #1
 80012dc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80012e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	fa92 f2a2 	rbit	r2, r2
 80012e8:	617a      	str	r2, [r7, #20]
  return result;
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	fab2 f282 	clz	r2, r2
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	4093      	lsls	r3, r2
 80012f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fa:	4313      	orrs	r3, r2
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
 80012fe:	e00b      	b.n	8001318 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f043 0220 	orr.w	r2, r3, #32
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_ADC_Init+0x280>)
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001328:	430b      	orrs	r3, r1
 800132a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <HAL_ADC_Init+0x284>)
 8001334:	4013      	ands	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800133c:	430b      	orrs	r3, r1
 800133e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001348:	d003      	beq.n	8001352 <HAL_ADC_Init+0x1d6>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d119      	bne.n	8001386 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	3b01      	subs	r3, #1
 8001362:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001366:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	fa92 f2a2 	rbit	r2, r2
 800136e:	60fa      	str	r2, [r7, #12]
  return result;
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	fab2 f282 	clz	r2, r2
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	fa03 f202 	lsl.w	r2, r3, r2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	e007      	b.n	8001396 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_ADC_Init+0x288>)
 800139e:	4013      	ands	r3, r2
 80013a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d10b      	bne.n	80013be <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	f023 0303 	bic.w	r3, r3, #3
 80013b4:	f043 0201 	orr.w	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80013bc:	e014      	b.n	80013e8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	f023 0312 	bic.w	r3, r3, #18
 80013c6:	f043 0210 	orr.w	r2, r3, #16
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3738      	adds	r7, #56	; 0x38
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40012700 	.word	0x40012700
 80013fc:	fcfc16ff 	.word	0xfcfc16ff
 8001400:	c0fff189 	.word	0xc0fff189
 8001404:	bf80fffe 	.word	0xbf80fffe

08001408 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x20>
 8001424:	2302      	movs	r3, #2
 8001426:	e134      	b.n	8001692 <HAL_ADC_ConfigChannel+0x28a>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d81c      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	4019      	ands	r1, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b05      	subs	r3, #5
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
 8001470:	e07e      	b.n	8001570 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d81c      	bhi.n	80014b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b23      	subs	r3, #35	; 0x23
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	4019      	ands	r1, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6818      	ldr	r0, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b23      	subs	r3, #35	; 0x23
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80014b2:	e05d      	b.n	8001570 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d81c      	bhi.n	80014f6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	3b41      	subs	r3, #65	; 0x41
 80014ce:	221f      	movs	r2, #31
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4019      	ands	r1, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b41      	subs	r3, #65	; 0x41
 80014e8:	fa00 f203 	lsl.w	r2, r0, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
 80014f4:	e03c      	b.n	8001570 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b18      	cmp	r3, #24
 80014fc:	d81c      	bhi.n	8001538 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	3b5f      	subs	r3, #95	; 0x5f
 8001510:	221f      	movs	r2, #31
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	4019      	ands	r1, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b5f      	subs	r3, #95	; 0x5f
 800152a:	fa00 f203 	lsl.w	r2, r0, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
 8001536:	e01b      	b.n	8001570 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b7d      	subs	r3, #125	; 0x7d
 800154a:	221f      	movs	r2, #31
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	4019      	ands	r1, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b7d      	subs	r3, #125	; 0x7d
 8001564:	fa00 f203 	lsl.w	r2, r0, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b09      	cmp	r3, #9
 8001576:	d81a      	bhi.n	80015ae <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6959      	ldr	r1, [r3, #20]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	2207      	movs	r2, #7
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	4019      	ands	r1, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6898      	ldr	r0, [r3, #8]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	e042      	b.n	8001634 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b13      	cmp	r3, #19
 80015b4:	d81c      	bhi.n	80015f0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6919      	ldr	r1, [r3, #16]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	3b1e      	subs	r3, #30
 80015c8:	2207      	movs	r2, #7
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4019      	ands	r1, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6898      	ldr	r0, [r3, #8]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	e021      	b.n	8001634 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b1a      	cmp	r3, #26
 80015f6:	d81c      	bhi.n	8001632 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b3c      	subs	r3, #60	; 0x3c
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	3b3c      	subs	r3, #60	; 0x3c
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	e000      	b.n	8001634 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001632:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b10      	cmp	r3, #16
 800163a:	d003      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001640:	2b11      	cmp	r3, #17
 8001642:	d121      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_ADC_ConfigChannel+0x294>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11b      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_ADC_ConfigChannel+0x294>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a11      	ldr	r2, [pc, #68]	; (800169c <HAL_ADC_ConfigChannel+0x294>)
 8001656:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800165a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b10      	cmp	r3, #16
 8001662:	d111      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_ADC_ConfigChannel+0x298>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_ADC_ConfigChannel+0x29c>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9a      	lsrs	r2, r3, #18
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800167a:	e002      	b.n	8001682 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3b01      	subs	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f9      	bne.n	800167c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	40012700 	.word	0x40012700
 80016a0:	2000009c 	.word	0x2000009c
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4906      	ldr	r1, [pc, #24]	; (8001740 <__NVIC_EnableIRQ+0x34>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff90 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff2d 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff42 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff35 	bl	800170c <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d106      	bne.n	80018e0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80018de:	e005      	b.n	80018ec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80018e6:	f023 0304 	bic.w	r3, r3, #4
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001900:	f000 f802 	bl	8001908 <HAL_SYSTICK_Callback>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e059      	b.n	80019da <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_DMA_Init+0xd0>)
 800192e:	429a      	cmp	r2, r3
 8001930:	d80f      	bhi.n	8001952 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_DMA_Init+0xd4>)
 800193a:	4413      	add	r3, r2
 800193c:	4a2b      	ldr	r2, [pc, #172]	; (80019ec <HAL_DMA_Init+0xd8>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_DMA_Init+0xdc>)
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001950:	e00e      	b.n	8001970 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_DMA_Init+0xe0>)
 800195a:	4413      	add	r3, r2
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <HAL_DMA_Init+0xd8>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_DMA_Init+0xe4>)
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40026407 	.word	0x40026407
 80019e8:	bffd9ff8 	.word	0xbffd9ff8
 80019ec:	cccccccd 	.word	0xcccccccd
 80019f0:	40026000 	.word	0x40026000
 80019f4:	bffd9bf8 	.word	0xbffd9bf8
 80019f8:	40026400 	.word	0x40026400

080019fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_DMA_Start_IT+0x20>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e04b      	b.n	8001ab4 <HAL_DMA_Start_IT+0xb8>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d13a      	bne.n	8001aa6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f95e 	bl	8001d16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 020e 	orr.w	r2, r2, #14
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e00f      	b.n	8001a94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0204 	bic.w	r2, r2, #4
 8001a82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 020a 	orr.w	r2, r2, #10
 8001a92:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e005      	b.n	8001ab2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d008      	beq.n	8001ae6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e022      	b.n	8001b2c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 020e 	bic.w	r2, r2, #14
 8001af4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 021c 	and.w	r2, r3, #28
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d005      	beq.n	8001b5a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2204      	movs	r2, #4
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e029      	b.n	8001bae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 020e 	bic.w	r2, r2, #14
 8001b68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 021c 	and.w	r2, r3, #28
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
    }
  }
  return status;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f003 031c 	and.w	r3, r3, #28
 8001bd8:	2204      	movs	r2, #4
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d026      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x7a>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d021      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0204 	bic.w	r2, r2, #4
 8001c0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	f003 021c 	and.w	r2, r3, #28
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c18:	2104      	movs	r1, #4
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d071      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c30:	e06c      	b.n	8001d0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 031c 	and.w	r3, r3, #28
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d02e      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xec>
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d029      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10b      	bne.n	8001c76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 020a 	bic.w	r2, r2, #10
 8001c6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 021c 	and.w	r2, r3, #28
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	2102      	movs	r1, #2
 8001c84:	fa01 f202 	lsl.w	r2, r1, r2
 8001c88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d038      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ca2:	e033      	b.n	8001d0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f003 031c 	and.w	r3, r3, #28
 8001cac:	2208      	movs	r2, #8
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d02a      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x156>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d025      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 020e 	bic.w	r2, r2, #14
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 021c 	and.w	r2, r3, #28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
}
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 021c 	and.w	r2, r3, #28
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d108      	bne.n	8001d5a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d58:	e007      	b.n	8001d6a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	60da      	str	r2, [r3, #12]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d8a:	e154      	b.n	8002036 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8146 	beq.w	8002030 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a0 	beq.w	8002030 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f08:	4a53      	ldr	r2, [pc, #332]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d019      	beq.n	8001f68 <HAL_GPIO_Init+0x1f4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a4a      	ldr	r2, [pc, #296]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_GPIO_Init+0x1f0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00d      	beq.n	8001f60 <HAL_GPIO_Init+0x1ec>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2f4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <HAL_GPIO_Init+0x1e8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_GPIO_Init+0x1e4>
 8001f54:	2304      	movs	r3, #4
 8001f56:	e008      	b.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f58:	2305      	movs	r3, #5
 8001f5a:	e006      	b.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e004      	b.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	f002 0203 	and.w	r2, r2, #3
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	4093      	lsls	r3, r2
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f7a:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3301      	adds	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f aea3 	bne.w	8001d8c <HAL_GPIO_Init+0x18>
  }
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40010000 	.word	0x40010000
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40021000 	.word	0x40021000
 8002070:	40010400 	.word	0x40010400

08002074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800208a:	e0b8      	b.n	80021fe <HAL_GPIO_DeInit+0x18a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800208c:	2201      	movs	r2, #1
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80ab 	beq.w	80021f8 <HAL_GPIO_DeInit+0x184>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 80020a2:	4a5d      	ldr	r2, [pc, #372]	; (8002218 <HAL_GPIO_DeInit+0x1a4>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a55      	ldr	r2, [pc, #340]	; (800221c <HAL_GPIO_DeInit+0x1a8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d019      	beq.n	8002100 <HAL_GPIO_DeInit+0x8c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a54      	ldr	r2, [pc, #336]	; (8002220 <HAL_GPIO_DeInit+0x1ac>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_GPIO_DeInit+0x88>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a53      	ldr	r2, [pc, #332]	; (8002224 <HAL_GPIO_DeInit+0x1b0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00d      	beq.n	80020f8 <HAL_GPIO_DeInit+0x84>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_GPIO_DeInit+0x1b4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <HAL_GPIO_DeInit+0x80>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a51      	ldr	r2, [pc, #324]	; (800222c <HAL_GPIO_DeInit+0x1b8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_GPIO_DeInit+0x7c>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_DeInit+0x8e>
 80020f0:	2305      	movs	r3, #5
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_DeInit+0x8e>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_DeInit+0x8e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_DeInit+0x8e>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_DeInit+0x8e>
 8002100:	2300      	movs	r3, #0
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	429a      	cmp	r2, r3
 8002110:	d132      	bne.n	8002178 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002112:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	4945      	ldr	r1, [pc, #276]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 800211c:	4013      	ands	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	4941      	ldr	r1, [pc, #260]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 800212a:	4013      	ands	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	493e      	ldr	r1, [pc, #248]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 8002138:	4013      	ands	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	493a      	ldr	r1, [pc, #232]	; (8002230 <HAL_GPIO_DeInit+0x1bc>)
 8002146:	4013      	ands	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 800215a:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <HAL_GPIO_DeInit+0x1a4>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43da      	mvns	r2, r3
 800216a:	482b      	ldr	r0, [pc, #172]	; (8002218 <HAL_GPIO_DeInit+0x1a4>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	400a      	ands	r2, r1
 8002172:	3302      	adds	r3, #2
 8002174:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2103      	movs	r1, #3
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	08d2      	lsrs	r2, r2, #3
 80021ae:	4019      	ands	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3208      	adds	r2, #8
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2103      	movs	r1, #3
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	2101      	movs	r1, #1
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2103      	movs	r1, #3
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
    }

    position++;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3301      	adds	r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f af40 	bne.w	800208c <HAL_GPIO_DeInit+0x18>
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40010000 	.word	0x40010000
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	4618      	mov	r0, r3
 8002284:	f009 ff94 	bl	800c1b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	2310      	movs	r3, #16
 800229c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	603b      	str	r3, [r7, #0]
  return result;
 80022a6:	683b      	ldr	r3, [r7, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80022a8:	fab3 f383 	clz	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80022b4:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 80022b8:	461a      	mov	r2, r3
 80022ba:	2300      	movs	r3, #0
 80022bc:	6013      	str	r3, [r2, #0]
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_PWR_EnterSTOPMode+0x50>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 0203 	bic.w	r2, r3, #3
 80022dc:	490e      	ldr	r1, [pc, #56]	; (8002318 <HAL_PWR_EnterSTOPMode+0x50>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_PWR_EnterSTOPMode+0x54>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_PWR_EnterSTOPMode+0x54>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80022f6:	bf30      	wfi
 80022f8:	e002      	b.n	8002300 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80022fa:	bf40      	sev
    __WFE();
 80022fc:	bf20      	wfe
    __WFE();
 80022fe:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_PWR_EnterSTOPMode+0x54>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a05      	ldr	r2, [pc, #20]	; (800231c <HAL_PWR_EnterSTOPMode+0x54>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6113      	str	r3, [r2, #16]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007000 	.word	0x40007000
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <HAL_PWREx_EnableFastWakeUp>:
  *         Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when
  *         exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800232a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	603b      	str	r3, [r7, #0]
  return result;
 8002334:	683b      	ldr	r3, [r7, #0]
  /* Enable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)ENABLE;
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002342:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 8002346:	461a      	mov	r2, r3
 8002348:	2301      	movs	r3, #1
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	603b      	str	r3, [r7, #0]
  return result;
 800236a:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8002378:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800237c:	461a      	mov	r2, r3
 800237e:	2301      	movs	r3, #1
 8002380:	6013      	str	r3, [r2, #0]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e31d      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b94      	ldr	r3, [pc, #592]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a8:	4b91      	ldr	r3, [pc, #580]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d07b      	beq.n	80024b6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d006      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d10f      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b87      	ldr	r3, [pc, #540]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06a      	beq.n	80024b4 <HAL_RCC_OscConfig+0x128>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d166      	bne.n	80024b4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e2f7      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e02d      	b.n	800245c <HAL_RCC_OscConfig+0xd0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10c      	bne.n	8002422 <HAL_RCC_OscConfig+0x96>
 8002408:	4b79      	ldr	r3, [pc, #484]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a78      	ldr	r2, [pc, #480]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a75      	ldr	r2, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0xd0>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b05      	cmp	r3, #5
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0xb8>
 800242a:	4b71      	ldr	r3, [pc, #452]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a70      	ldr	r2, [pc, #448]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b6e      	ldr	r3, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6d      	ldr	r2, [pc, #436]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e00b      	b.n	800245c <HAL_RCC_OscConfig+0xd0>
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a69      	ldr	r2, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800244a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fe18 	bl	8001098 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246c:	f7fe fe14 	bl	8001098 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e2ad      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800247e:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7fe fe04 	bl	8001098 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fe00 	bl	8001098 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e299      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024a6:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d05a      	beq.n	8002578 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d119      	bne.n	8002502 <HAL_RCC_OscConfig+0x176>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d116      	bne.n	8002502 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_OscConfig+0x160>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e276      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	493d      	ldr	r1, [pc, #244]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002500:	e03a      	b.n	8002578 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d020      	beq.n	800254c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250a:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_RCC_OscConfig+0x268>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fdc2 	bl	8001098 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fdbe 	bl	8001098 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e257      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800252a:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	492a      	ldr	r1, [pc, #168]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
 800254a:	e015      	b.n	8002578 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_RCC_OscConfig+0x268>)
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fda1 	bl	8001098 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255a:	f7fe fd9d 	bl	8001098 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e236      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f0      	bne.n	800255a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80b8 	beq.w	80026f6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d170      	bne.n	800266e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x218>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e21a      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d921      	bls.n	80025f8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fc4b 	bl	8002e54 <RCC_SetFlashLatencyFromMSIRange>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e208      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4906      	ldr	r1, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	4901      	ldr	r1, [pc, #4]	; (80025f0 <HAL_RCC_OscConfig+0x264>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
 80025ee:	e020      	b.n	8002632 <HAL_RCC_OscConfig+0x2a6>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f8:	4ba4      	ldr	r3, [pc, #656]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	49a1      	ldr	r1, [pc, #644]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800260a:	4ba0      	ldr	r3, [pc, #640]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	499c      	ldr	r1, [pc, #624]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 fc16 	bl	8002e54 <RCC_SetFlashLatencyFromMSIRange>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1d3      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	0b5b      	lsrs	r3, r3, #13
 8002638:	3301      	adds	r3, #1
 800263a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002642:	4a92      	ldr	r2, [pc, #584]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002644:	6892      	ldr	r2, [r2, #8]
 8002646:	0912      	lsrs	r2, r2, #4
 8002648:	f002 020f 	and.w	r2, r2, #15
 800264c:	4990      	ldr	r1, [pc, #576]	; (8002890 <HAL_RCC_OscConfig+0x504>)
 800264e:	5c8a      	ldrb	r2, [r1, r2]
 8002650:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002652:	4a90      	ldr	r2, [pc, #576]	; (8002894 <HAL_RCC_OscConfig+0x508>)
 8002654:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002656:	4b90      	ldr	r3, [pc, #576]	; (8002898 <HAL_RCC_OscConfig+0x50c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fcd0 	bl	8001000 <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d045      	beq.n	80026f6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	e1b5      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d029      	beq.n	80026ca <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_RCC_OscConfig+0x510>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fd0c 	bl	8001098 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002684:	f7fe fd08 	bl	8001098 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1a1      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002696:	4b7d      	ldr	r3, [pc, #500]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4977      	ldr	r1, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b4:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	4972      	ldr	r1, [pc, #456]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	e015      	b.n	80026f6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCC_OscConfig+0x510>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fce2 	bl	8001098 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d8:	f7fe fcde 	bl	8001098 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e177      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026ea:	4b68      	ldr	r3, [pc, #416]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d030      	beq.n	8002764 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d016      	beq.n	8002738 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270a:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <HAL_RCC_OscConfig+0x514>)
 800270c:	2201      	movs	r2, #1
 800270e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7fe fcc2 	bl	8001098 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002718:	f7fe fcbe 	bl	8001098 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e157      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272a:	4b58      	ldr	r3, [pc, #352]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x38c>
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_OscConfig+0x514>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273e:	f7fe fcab 	bl	8001098 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7fe fca7 	bl	8001098 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e140      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002758:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80b5 	beq.w	80028dc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b45      	ldr	r3, [pc, #276]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	4a41      	ldr	r2, [pc, #260]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	6253      	str	r3, [r2, #36]	; 0x24
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_OscConfig+0x518>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCC_OscConfig+0x518>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a3d      	ldr	r2, [pc, #244]	; (80028a4 <HAL_RCC_OscConfig+0x518>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fc6f 	bl	8001098 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe fc6b 	bl	8001098 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e104      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x518>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x466>
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6353      	str	r3, [r2, #52]	; 0x34
 80027f0:	e02d      	b.n	800284e <HAL_RCC_OscConfig+0x4c2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x488>
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x500>)
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002800:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002804:	6353      	str	r3, [r2, #52]	; 0x34
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	4a20      	ldr	r2, [pc, #128]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800280c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002810:	6353      	str	r3, [r2, #52]	; 0x34
 8002812:	e01c      	b.n	800284e <HAL_RCC_OscConfig+0x4c2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b05      	cmp	r3, #5
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x4aa>
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002826:	6353      	str	r3, [r2, #52]	; 0x34
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002832:	6353      	str	r3, [r2, #52]	; 0x34
 8002834:	e00b      	b.n	800284e <HAL_RCC_OscConfig+0x4c2>
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800283c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002840:	6353      	str	r3, [r2, #52]	; 0x34
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800284c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7fe fc1f 	bl	8001098 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800285c:	e00a      	b.n	8002874 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe fc1b 	bl	8001098 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0b2      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_OscConfig+0x500>)
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCC_OscConfig+0x4d2>
 8002880:	e023      	b.n	80028ca <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fc09 	bl	8001098 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002888:	e019      	b.n	80028be <HAL_RCC_OscConfig+0x532>
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	0801291c 	.word	0x0801291c
 8002894:	2000009c 	.word	0x2000009c
 8002898:	20000000 	.word	0x20000000
 800289c:	42470020 	.word	0x42470020
 80028a0:	42470680 	.word	0x42470680
 80028a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a8:	f7fe fbf6 	bl	8001098 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e08d      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028be:	4b49      	ldr	r3, [pc, #292]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1ee      	bne.n	80028a8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d0:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	4a43      	ldr	r2, [pc, #268]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 80028d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028da:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d079      	beq.n	80029d8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d056      	beq.n	8002998 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d13b      	bne.n	800296a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x65c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fbce 	bl	8001098 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fbca 	bl	8001098 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e063      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002912:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	4b31      	ldr	r3, [pc, #196]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	4319      	orrs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	430b      	orrs	r3, r1
 8002936:	492b      	ldr	r1, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 8002938:	4313      	orrs	r3, r2
 800293a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x65c>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe fba9 	bl	8001098 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fba5 	bl	8001098 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03e      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x5be>
 8002968:	e036      	b.n	80029d8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_RCC_OscConfig+0x65c>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7fe fb92 	bl	8001098 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fb8e 	bl	8001098 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e027      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x5ec>
 8002996:	e01f      	b.n	80029d8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e01a      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <HAL_RCC_OscConfig+0x658>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40023800 	.word	0x40023800
 80029e8:	42470060 	.word	0x42470060

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e11a      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d919      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x34>
 8002a14:	4b8a      	ldr	r3, [pc, #552]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a89      	ldr	r2, [pc, #548]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 0201 	bic.w	r2, r3, #1
 8002a28:	4985      	ldr	r1, [pc, #532]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a30:	4b83      	ldr	r3, [pc, #524]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0f9      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a4e:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	497a      	ldr	r1, [pc, #488]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 808e 	beq.w	8002b8a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0d7      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d115      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e0cb      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0bf      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e0b7      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	495c      	ldr	r1, [pc, #368]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fade 	bl	8001098 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe fad6 	bl	8001098 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e09b      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d1ee      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xfc>
 8002b0a:	e03e      	b.n	8002b8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b16:	f7fe fabf 	bl	8001098 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e084      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2c:	4b45      	ldr	r3, [pc, #276]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	d1ee      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x12a>
 8002b38:	e027      	b.n	8002b8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d11d      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe faa8 	bl	8001098 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e06d      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x158>
 8002b66:	e010      	b.n	8002b8a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fe fa96 	bl	8001098 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e05b      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b7e:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d219      	bcs.n	8002bcc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <HAL_RCC_ClockConfig+0x1be>
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	4923      	ldr	r1, [pc, #140]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_ClockConfig+0x254>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d001      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e034      	b.n	8002c36 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	490f      	ldr	r1, [pc, #60]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0a:	f000 f823 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCC_ClockConfig+0x258>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	490b      	ldr	r1, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x25c>)
 8002c1c:	5ccb      	ldrb	r3, [r1, r3]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x260>)
 8002c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x264>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f9e8 	bl	8001000 <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00
 8002c44:	40023800 	.word	0x40023800
 8002c48:	0801291c 	.word	0x0801291c
 8002c4c:	2000009c 	.word	0x2000009c
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b5b0      	push	{r4, r5, r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c5a:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d00d      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x32>
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	f200 80a4 	bhi.w	8002db8 <HAL_RCC_GetSysClockFreq+0x164>
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d002      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x26>
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d003      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c78:	e09e      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x190>)
 8002c7c:	613b      	str	r3, [r7, #16]
      break;
 8002c7e:	e0a9      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x194>)
 8002c82:	613b      	str	r3, [r7, #16]
      break;
 8002c84:	e0a6      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	0c9b      	lsrs	r3, r3, #18
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_RCC_GetSysClockFreq+0x198>)
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0d9b      	lsrs	r3, r3, #22
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d041      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	461c      	mov	r4, r3
 8002cb0:	f04f 0500 	mov.w	r5, #0
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	014b      	lsls	r3, r1, #5
 8002cc2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cc6:	0142      	lsls	r2, r0, #5
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	1b00      	subs	r0, r0, r4
 8002cce:	eb61 0105 	sbc.w	r1, r1, r5
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ce0:	0182      	lsls	r2, r0, #6
 8002ce2:	1a12      	subs	r2, r2, r0
 8002ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	00d9      	lsls	r1, r3, #3
 8002cf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf6:	00d0      	lsls	r0, r2, #3
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	1912      	adds	r2, r2, r4
 8002cfe:	eb45 0303 	adc.w	r3, r5, r3
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0259      	lsls	r1, r3, #9
 8002d0c:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d10:	0250      	lsls	r0, r2, #9
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	f7fd ffd9 	bl	8000cd8 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e040      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	461c      	mov	r4, r3
 8002d34:	f04f 0500 	mov.w	r5, #0
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	014b      	lsls	r3, r1, #5
 8002d46:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d4a:	0142      	lsls	r2, r0, #5
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	1b00      	subs	r0, r0, r4
 8002d52:	eb61 0105 	sbc.w	r1, r1, r5
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	018b      	lsls	r3, r1, #6
 8002d60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d64:	0182      	lsls	r2, r0, #6
 8002d66:	1a12      	subs	r2, r2, r0
 8002d68:	eb63 0301 	sbc.w	r3, r3, r1
 8002d6c:	f04f 0000 	mov.w	r0, #0
 8002d70:	f04f 0100 	mov.w	r1, #0
 8002d74:	00d9      	lsls	r1, r3, #3
 8002d76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d7a:	00d0      	lsls	r0, r2, #3
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	1912      	adds	r2, r2, r4
 8002d82:	eb45 0303 	adc.w	r3, r5, r3
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	0299      	lsls	r1, r3, #10
 8002d90:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d94:	0290      	lsls	r0, r2, #10
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	f7fd ff97 	bl	8000cd8 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4613      	mov	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	613b      	str	r3, [r7, #16]
      break;
 8002db6:	e00d      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0b5b      	lsrs	r3, r3, #13
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	613b      	str	r3, [r7, #16]
      break;
 8002dd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd4:	693b      	ldr	r3, [r7, #16]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	007a1200 	.word	0x007a1200
 8002dec:	08012910 	.word	0x08012910

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b02      	ldr	r3, [pc, #8]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	2000009c 	.word	0x2000009c

08002e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e08:	f7ff fff2 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	0801292c 	.word	0x0801292c

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e30:	f7ff ffde 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0adb      	lsrs	r3, r3, #11
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4903      	ldr	r1, [pc, #12]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	0801292c 	.word	0x0801292c

08002e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d12c      	bne.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e6c:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e016      	b.n	8002eb2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6253      	str	r3, [r2, #36]	; 0x24
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002ea4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002eb8:	d105      	bne.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ec0:	d101      	bne.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002ecc:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 0201 	bic.w	r2, r3, #1
 8002ee0:	490b      	ldr	r1, [pc, #44]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80b8 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2e:	4b5d      	ldr	r3, [pc, #372]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3a:	4b5a      	ldr	r3, [pc, #360]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	4a59      	ldr	r2, [pc, #356]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6253      	str	r3, [r2, #36]	; 0x24
 8002f46:	4b57      	ldr	r3, [pc, #348]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b54      	ldr	r3, [pc, #336]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe f893 	bl	8001098 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe f88f 	bl	8001098 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	; 0x64
 8002f82:	d901      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e089      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x188>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f94:	4b43      	ldr	r3, [pc, #268]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002f9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d00f      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb8:	d108      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002fba:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e067      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002fcc:	4b35      	ldr	r3, [pc, #212]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d034      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d02d      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d027      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ff6:	4b2b      	ldr	r3, [pc, #172]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ffe:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003006:	4b29      	ldr	r3, [pc, #164]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800300c:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d014      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x132>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7fe f83c 	bl	8001098 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003022:	e00a      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe f838 	bl	8001098 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e030      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x188>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800303a:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800305e:	d10a      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003084:	4313      	orrs	r3, r2
 8003086:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40007000 	.word	0x40007000
 80030ac:	424706dc 	.word	0x424706dc

080030b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e083      	b.n	80031ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	7f5b      	ldrb	r3, [r3, #29]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f00a fb80 	bl	800d7d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	22ca      	movs	r2, #202	; 0xca
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2253      	movs	r2, #83	; 0x53
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fe4a 	bl	8003d88 <RTC_EnterInitMode>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	22ff      	movs	r2, #255	; 0xff
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e05e      	b.n	80031ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800311a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6919      	ldr	r1, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	041a      	lsls	r2, r3, #16
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316a:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fdd7 	bl	8003d2e <HAL_RTC_WaitForSynchro>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2204      	movs	r2, #4
 8003192:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e018      	b.n	80031ca <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031d2:	b590      	push	{r4, r7, lr}
 80031d4:	b087      	sub	sp, #28
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	7f1b      	ldrb	r3, [r3, #28]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_RTC_SetTime+0x18>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0a3      	b.n	8003332 <HAL_RTC_SetTime+0x160>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2202      	movs	r2, #2
 80031f4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d126      	bne.n	800324a <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2200      	movs	r2, #0
 800320e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fde1 	bl	8003ddc <RTC_ByteToBcd2>
 800321a:	4603      	mov	r3, r0
 800321c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fdda 	bl	8003ddc <RTC_ByteToBcd2>
 8003228:	4603      	mov	r3, r0
 800322a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800322c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	789b      	ldrb	r3, [r3, #2]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fdd2 	bl	8003ddc <RTC_ByteToBcd2>
 8003238:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800323a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	78db      	ldrb	r3, [r3, #3]
 8003242:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e018      	b.n	800327c <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800326a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003270:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	78db      	ldrb	r3, [r3, #3]
 8003276:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	22ca      	movs	r2, #202	; 0xca
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2253      	movs	r2, #83	; 0x53
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fd7b 	bl	8003d88 <RTC_EnterInitMode>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2204      	movs	r2, #4
 80032a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e040      	b.n	8003332 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80032ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80032be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	431a      	orrs	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fd18 	bl	8003d2e <HAL_RTC_WaitForSynchro>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	22ff      	movs	r2, #255	; 0xff
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2204      	movs	r2, #4
 8003310:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e00a      	b.n	8003332 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}

0800333a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	b29a      	uxth	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800336a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800336e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	0c1b      	lsrs	r3, r3, #16
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11a      	bne.n	80033ea <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fd2e 	bl	8003e1a <RTC_Bcd2ToByte>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fd25 	bl	8003e1a <RTC_Bcd2ToByte>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	789b      	ldrb	r3, [r3, #2]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd1c 	bl	8003e1a <RTC_Bcd2ToByte>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	7f1b      	ldrb	r3, [r3, #28]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_RTC_SetDate+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e08d      	b.n	8003528 <HAL_RTC_SetDate+0x134>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2202      	movs	r2, #2
 8003416:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10e      	bne.n	800343c <HAL_RTC_SetDate+0x48>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	785b      	ldrb	r3, [r3, #1]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	f023 0310 	bic.w	r3, r3, #16
 8003432:	b2db      	uxtb	r3, r3
 8003434:	330a      	adds	r3, #10
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11c      	bne.n	800347c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	78db      	ldrb	r3, [r3, #3]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fcc8 	bl	8003ddc <RTC_ByteToBcd2>
 800344c:	4603      	mov	r3, r0
 800344e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fcc1 	bl	8003ddc <RTC_ByteToBcd2>
 800345a:	4603      	mov	r3, r0
 800345c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800345e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	789b      	ldrb	r3, [r3, #2]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fcb9 	bl	8003ddc <RTC_ByteToBcd2>
 800346a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800346c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e00e      	b.n	800349a <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	78db      	ldrb	r3, [r3, #3]
 8003480:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	785b      	ldrb	r3, [r3, #1]
 8003486:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003488:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800348e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	22ca      	movs	r2, #202	; 0xca
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2253      	movs	r2, #83	; 0x53
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fc6c 	bl	8003d88 <RTC_EnterInitMode>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	22ff      	movs	r2, #255	; 0xff
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2204      	movs	r2, #4
 80034c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e02c      	b.n	8003528 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ec:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fc1d 	bl	8003d2e <HAL_RTC_WaitForSynchro>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00b      	beq.n	8003512 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2204      	movs	r2, #4
 8003506:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00a      	b.n	8003528 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	22ff      	movs	r2, #255	; 0xff
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003526:	2300      	movs	r3, #0
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}

08003530 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003546:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800354a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	b2da      	uxtb	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	0b5b      	lsrs	r3, r3, #13
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d11a      	bne.n	80035c0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	78db      	ldrb	r3, [r3, #3]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fc43 	bl	8003e1a <RTC_Bcd2ToByte>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fc3a 	bl	8003e1a <RTC_Bcd2ToByte>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	789b      	ldrb	r3, [r3, #2]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fc31 	bl	8003e1a <RTC_Bcd2ToByte>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80035ca:	b590      	push	{r4, r7, lr}
 80035cc:	b089      	sub	sp, #36	; 0x24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpreg;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	7f1b      	ldrb	r3, [r3, #28]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_RTC_SetAlarm+0x1c>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e101      	b.n	80037ea <HAL_RTC_SetAlarm+0x220>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2202      	movs	r2, #2
 80035f0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d137      	bne.n	8003668 <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fbe3 	bl	8003ddc <RTC_ByteToBcd2>
 8003616:	4603      	mov	r3, r0
 8003618:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fbdc 	bl	8003ddc <RTC_ByteToBcd2>
 8003624:	4603      	mov	r3, r0
 8003626:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003628:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	789b      	ldrb	r3, [r3, #2]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fbd4 	bl	8003ddc <RTC_ByteToBcd2>
 8003634:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003636:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003640:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fbc6 	bl	8003ddc <RTC_ByteToBcd2>
 8003650:	4603      	mov	r3, r0
 8003652:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003654:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800365c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003662:	4313      	orrs	r3, r2
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e023      	b.n	80036b0 <HAL_RTC_SetAlarm+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_RTC_SetAlarm+0xb2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003688:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800368e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	78db      	ldrb	r3, [r3, #3]
 8003694:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003696:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80036a0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80036a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61fb      	str	r3, [r7, #28]
  }

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	22ca      	movs	r2, #202	; 0xca
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2253      	movs	r2, #83	; 0x53
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d4:	d13f      	bne.n	8003756 <HAL_RTC_SetAlarm+0x18c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80036f6:	f7fd fccf 	bl	8001098 <HAL_GetTick>
 80036fa:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036fc:	e013      	b.n	8003726 <HAL_RTC_SetAlarm+0x15c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036fe:	f7fd fccb 	bl	8001098 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370c:	d90b      	bls.n	8003726 <HAL_RTC_SetAlarm+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	22ff      	movs	r2, #255	; 0xff
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2203      	movs	r2, #3
 800371a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e061      	b.n	80037ea <HAL_RTC_SetAlarm+0x220>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0e4      	beq.n	80036fe <HAL_RTC_SetAlarm+0x134>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e03e      	b.n	80037d4 <HAL_RTC_SetAlarm+0x20a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003764:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003774:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003776:	f7fd fc8f 	bl	8001098 <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800377c:	e013      	b.n	80037a6 <HAL_RTC_SetAlarm+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800377e:	f7fd fc8b 	bl	8001098 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800378c:	d90b      	bls.n	80037a6 <HAL_RTC_SetAlarm+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2203      	movs	r2, #3
 800379a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e021      	b.n	80037ea <HAL_RTC_SetAlarm+0x220>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0e4      	beq.n	800377e <HAL_RTC_SetAlarm+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	22ff      	movs	r2, #255	; 0xff
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3724      	adds	r7, #36	; 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}
	...

080037f4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	7f1b      	ldrb	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_RTC_SetAlarm_IT+0x24>
 8003814:	2302      	movs	r3, #2
 8003816:	e11f      	b.n	8003a58 <HAL_RTC_SetAlarm_IT+0x264>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d137      	bne.n	800389a <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 faca 	bl	8003ddc <RTC_ByteToBcd2>
 8003848:	4603      	mov	r3, r0
 800384a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fac3 	bl	8003ddc <RTC_ByteToBcd2>
 8003856:	4603      	mov	r3, r0
 8003858:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800385a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	789b      	ldrb	r3, [r3, #2]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fabb 	bl	8003ddc <RTC_ByteToBcd2>
 8003866:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003868:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	78db      	ldrb	r3, [r3, #3]
 8003870:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003872:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 faad 	bl	8003ddc <RTC_ByteToBcd2>
 8003882:	4603      	mov	r3, r0
 8003884:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003886:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800388e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003894:	4313      	orrs	r3, r2
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e023      	b.n	80038e2 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2200      	movs	r2, #0
 80038ac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038ba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	78db      	ldrb	r3, [r3, #3]
 80038c6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80038c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80038d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80038d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80038de:	4313      	orrs	r3, r2
 80038e0:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	22ca      	movs	r2, #202	; 0xca
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2253      	movs	r2, #83	; 0x53
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003906:	d148      	bne.n	800399a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003916:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003928:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800392a:	f7fd fbb5 	bl	8001098 <HAL_GetTick>
 800392e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003930:	e013      	b.n	800395a <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003932:	f7fd fbb1 	bl	8001098 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003940:	d90b      	bls.n	800395a <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	22ff      	movs	r2, #255	; 0xff
 8003948:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2203      	movs	r2, #3
 800394e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e07e      	b.n	8003a58 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0e4      	beq.n	8003932 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003986:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	e047      	b.n	8003a2a <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80039ba:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039bc:	f7fd fb6c 	bl	8001098 <HAL_GetTick>
 80039c0:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039c2:	e013      	b.n	80039ec <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039c4:	f7fd fb68 	bl	8001098 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d2:	d90b      	bls.n	80039ec <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	22ff      	movs	r2, #255	; 0xff
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2203      	movs	r2, #3
 80039e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e035      	b.n	8003a58 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0e4      	beq.n	80039c4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a40:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3724      	adds	r7, #36	; 0x24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd90      	pop	{r4, r7, pc}
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	7f1b      	ldrb	r3, [r3, #28]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_RTC_DeactivateAlarm+0x16>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e07b      	b.n	8003b72 <HAL_RTC_DeactivateAlarm+0x10e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	22ca      	movs	r2, #202	; 0xca
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2253      	movs	r2, #83	; 0x53
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9c:	d12f      	bne.n	8003afe <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aac:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003abc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003abe:	f7fd faeb 	bl	8001098 <HAL_GetTick>
 8003ac2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ac4:	e013      	b.n	8003aee <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ac6:	f7fd fae7 	bl	8001098 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad4:	d90b      	bls.n	8003aee <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	22ff      	movs	r2, #255	; 0xff
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e041      	b.n	8003b72 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0e4      	beq.n	8003ac6 <HAL_RTC_DeactivateAlarm+0x62>
 8003afc:	e02e      	b.n	8003b5c <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b0c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8003b1e:	f7fd fabb 	bl	8001098 <HAL_GetTick>
 8003b22:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b24:	e013      	b.n	8003b4e <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b26:	f7fd fab7 	bl	8001098 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b34:	d90b      	bls.n	8003b4e <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ff      	movs	r2, #255	; 0xff
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e011      	b.n	8003b72 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0e4      	beq.n	8003b26 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	22ff      	movs	r2, #255	; 0xff
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8e:	d10e      	bne.n	8003bae <HAL_RTC_GetAlarm+0x34>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	e00d      	b.n	8003bca <HAL_RTC_GetAlarm+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	617b      	str	r3, [r7, #20]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bc8:	613b      	str	r3, [r7, #16]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	70da      	strb	r2, [r3, #3]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	0e1b      	lsrs	r3, r3, #24
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d125      	bne.n	8003c86 <HAL_RTC_GetAlarm+0x10c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f8eb 	bl	8003e1a <RTC_Bcd2ToByte>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f8e2 	bl	8003e1a <RTC_Bcd2ToByte>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	789b      	ldrb	r3, [r3, #2]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f8d9 	bl	8003e1a <RTC_Bcd2ToByte>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f8cf 	bl	8003e1a <RTC_Bcd2ToByte>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f831 	bl	8003d1c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003cca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d012      	beq.n	8003d00 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f907 	bl	8003efc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003cfe:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003d02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d06:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	775a      	strb	r2, [r3, #29]
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40010400 	.word	0x40010400

08003d1c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d11c      	bne.n	8003d7e <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d54:	f7fd f9a0 	bl	8001098 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d5a:	e009      	b.n	8003d70 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d5c:	f7fd f99c 	bl	8001098 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d6a:	d901      	bls.n	8003d70 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e007      	b.n	8003d80 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ee      	beq.n	8003d5c <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d119      	bne.n	8003dd2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f04f 32ff 	mov.w	r2, #4294967295
 8003da6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003da8:	f7fd f976 	bl	8001098 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003dae:	e009      	b.n	8003dc4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003db0:	f7fd f972 	bl	8001098 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dbe:	d901      	bls.n	8003dc4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e007      	b.n	8003dd4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8003dee:	e005      	b.n	8003dfc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003df6:	7afb      	ldrb	r3, [r7, #11]
 8003df8:	3b0a      	subs	r3, #10
 8003dfa:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
 8003dfe:	2b09      	cmp	r3, #9
 8003e00:	d8f6      	bhi.n	8003df0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	b2db      	uxtb	r3, r3
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	7f1b      	ldrb	r3, [r3, #28]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_RTCEx_DeactivateWakeUpTimer+0x14>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e047      	b.n	8003ef4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	22ca      	movs	r2, #202	; 0xca
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2253      	movs	r2, #83	; 0x53
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e9e:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003ea0:	f7fd f8fa 	bl	8001098 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ea6:	e013      	b.n	8003ed0 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ea8:	f7fd f8f6 	bl	8001098 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eb6:	d90b      	bls.n	8003ed0 <HAL_RTCEx_DeactivateWakeUpTimer+0x80>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e011      	b.n	8003ef4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0e4      	beq.n	8003ea8 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e07b      	b.n	8004018 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f30:	d009      	beq.n	8003f46 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	61da      	str	r2, [r3, #28]
 8003f38:	e005      	b.n	8003f46 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f009 fc4f 	bl	800d804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	ea42 0103 	orr.w	r1, r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	f003 0104 	and.w	r1, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0210 	and.w	r2, r3, #16
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69da      	ldr	r2, [r3, #28]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004006:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e01a      	b.n	8004068 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004048:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f009 fc1e 	bl	800d88c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e03f      	b.n	8004102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f009 fc16 	bl	800d8c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fdef 	bl	8004c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b08a      	sub	sp, #40	; 0x28
 800410e:	af02      	add	r7, sp, #8
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b20      	cmp	r3, #32
 8004128:	f040 808c 	bne.w	8004244 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_UART_Receive+0x2e>
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e084      	b.n	8004246 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_UART_Receive+0x40>
 8004146:	2302      	movs	r3, #2
 8004148:	e07d      	b.n	8004246 <HAL_UART_Receive+0x13c>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2222      	movs	r2, #34	; 0x22
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004166:	f7fc ff97 	bl	8001098 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004180:	d108      	bne.n	8004194 <HAL_UART_Receive+0x8a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e003      	b.n	800419c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041a4:	e043      	b.n	800422e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2120      	movs	r1, #32
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb89 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e042      	b.n	8004246 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3302      	adds	r3, #2
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	e01f      	b.n	8004220 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d007      	beq.n	80041fa <HAL_UART_Receive+0xf0>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_UART_Receive+0xfe>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e008      	b.n	800421a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004214:	b2da      	uxtb	r2, r3
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1b6      	bne.n	80041a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800424e:	b480      	push	{r7}
 8004250:	b085      	sub	sp, #20
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	4613      	mov	r3, r2
 800425a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	d130      	bne.n	80042ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_UART_Transmit_IT+0x26>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e029      	b.n	80042cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_UART_Transmit_IT+0x38>
 8004282:	2302      	movs	r3, #2
 8004284:	e022      	b.n	80042cc <HAL_UART_Transmit_IT+0x7e>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2221      	movs	r2, #33	; 0x21
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
  }
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d11d      	bne.n	800432c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_UART_Receive_IT+0x26>
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e016      	b.n	800432e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_UART_Receive_IT+0x38>
 800430a:	2302      	movs	r3, #2
 800430c:	e00f      	b.n	800432e <HAL_UART_Receive_IT+0x58>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	461a      	mov	r2, r3
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fb1a 	bl	800495c <UART_Start_Receive_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	e000      	b.n	800432e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
  }
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	d153      	bne.n	80043fa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <HAL_UART_Transmit_DMA+0x26>
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e04c      	b.n	80043fc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_UART_Transmit_DMA+0x38>
 800436c:	2302      	movs	r3, #2
 800436e:	e045      	b.n	80043fc <HAL_UART_Transmit_DMA+0xc4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	; 0x21
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_UART_Transmit_DMA+0xcc>)
 800439e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_UART_Transmit_DMA+0xd0>)
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_UART_Transmit_DMA+0xd4>)
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	2200      	movs	r2, #0
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3304      	adds	r3, #4
 80043cc:	461a      	mov	r2, r3
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	f7fd fb14 	bl	80019fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043f4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	080047c7 	.word	0x080047c7
 8004408:	08004819 	.word	0x08004819
 800440c:	08004835 	.word	0x08004835

08004410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_UART_IRQHandler+0x52>
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fb73 	bl	8004b46 <UART_Receive_IT>
      return;
 8004460:	e17b      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80b1 	beq.w	80045cc <HAL_UART_IRQHandler+0x1bc>
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_IRQHandler+0x70>
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80a6 	beq.w	80045cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_UART_IRQHandler+0x90>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_UART_IRQHandler+0xb0>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_UART_IRQHandler+0xd0>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00f      	beq.n	800450a <HAL_UART_IRQHandler+0xfa>
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_UART_IRQHandler+0xee>
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0208 	orr.w	r2, r3, #8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 811e 	beq.w	8004750 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_UART_IRQHandler+0x11e>
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fb0c 	bl	8004b46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <HAL_UART_IRQHandler+0x146>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d031      	beq.n	80045ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa4e 	bl	80049f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d123      	bne.n	80045b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	4a76      	ldr	r2, [pc, #472]	; (8004760 <HAL_UART_IRQHandler+0x350>)
 8004588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd fad1 	bl	8001b36 <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e00e      	b.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f00c f866 	bl	801067c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00a      	b.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f00c f862 	bl	801067c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e006      	b.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f00c f85e 	bl	801067c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045c6:	e0c3      	b.n	8004750 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	bf00      	nop
    return;
 80045ca:	e0c1      	b.n	8004750 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	f040 80a1 	bne.w	8004718 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 809b 	beq.w	8004718 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8095 	beq.w	8004718 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d14e      	bne.n	80046b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800461c:	8a3b      	ldrh	r3, [r7, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8098 	beq.w	8004754 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004628:	8a3a      	ldrh	r2, [r7, #16]
 800462a:	429a      	cmp	r2, r3
 800462c:	f080 8092 	bcs.w	8004754 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8a3a      	ldrh	r2, [r7, #16]
 8004634:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b20      	cmp	r3, #32
 800463e:	d02b      	beq.n	8004698 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0210 	bic.w	r2, r2, #16
 800468c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fa12 	bl	8001abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f864 	bl	8004776 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046ae:	e051      	b.n	8004754 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d047      	beq.n	8004758 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046c8:	8a7b      	ldrh	r3, [r7, #18]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d044      	beq.n	8004758 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0210 	bic.w	r2, r2, #16
 800470a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f830 	bl	8004776 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004716:	e01f      	b.n	8004758 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_UART_IRQHandler+0x324>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f9a3 	bl	8004a78 <UART_Transmit_IT>
    return;
 8004732:	e012      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_UART_IRQHandler+0x34a>
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f9e4 	bl	8004b16 <UART_EndTransmit_IT>
    return;
 800474e:	e004      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
    return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
      return;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
      return;
 8004758:	bf00      	nop
  }
}
 800475a:	3728      	adds	r7, #40	; 0x28
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08004a51 	.word	0x08004a51

08004764 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b2db      	uxtb	r3, r3
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d113      	bne.n	800480a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004806:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004808:	e002      	b.n	8004810 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f00b fedc 	bl	80105c8 <HAL_UART_TxCpltCallback>
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff ff9c 	bl	8004764 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b80      	cmp	r3, #128	; 0x80
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b21      	cmp	r3, #33	; 0x21
 8004866:	d108      	bne.n	800487a <UART_DMAError+0x46>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004874:	68b8      	ldr	r0, [r7, #8]
 8004876:	f000 f8aa 	bl	80049ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b22      	cmp	r3, #34	; 0x22
 800489a:	d108      	bne.n	80048ae <UART_DMAError+0x7a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f000 f8a5 	bl	80049f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0210 	orr.w	r2, r3, #16
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ba:	68b8      	ldr	r0, [r7, #8]
 80048bc:	f00b fede 	bl	801067c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	e02c      	b.n	8004934 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d028      	beq.n	8004934 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048e8:	f7fc fbd6 	bl	8001098 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d21d      	bcs.n	8004934 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004906:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e00f      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	429a      	cmp	r2, r3
 8004950:	d0c3      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2222      	movs	r2, #34	; 0x22
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80049e4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d107      	bne.n	8004a38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0210 	bic.w	r2, r2, #16
 8004a36:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f00b fe06 	bl	801067c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b21      	cmp	r3, #33	; 0x21
 8004a8a:	d13e      	bne.n	8004b0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a94:	d114      	bne.n	8004ac0 <UART_Transmit_IT+0x48>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d110      	bne.n	8004ac0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	1c9a      	adds	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	621a      	str	r2, [r3, #32]
 8004abe:	e008      	b.n	8004ad2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6211      	str	r1, [r2, #32]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f00b fd46 	bl	80105c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b22      	cmp	r3, #34	; 0x22
 8004b58:	f040 8099 	bne.w	8004c8e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d117      	bne.n	8004b96 <UART_Receive_IT+0x50>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d113      	bne.n	8004b96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	1c9a      	adds	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
 8004b94:	e026      	b.n	8004be4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d007      	beq.n	8004bba <UART_Receive_IT+0x74>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <UART_Receive_IT+0x82>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e008      	b.n	8004bda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d148      	bne.n	8004c8a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0220 	bic.w	r2, r2, #32
 8004c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d123      	bne.n	8004c80 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0210 	bic.w	r2, r2, #16
 8004c4c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d10a      	bne.n	8004c72 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c76:	4619      	mov	r1, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fd7c 	bl	8004776 <HAL_UARTEx_RxEventCallback>
 8004c7e:	e002      	b.n	8004c86 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f00b fccf 	bl	8010624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e002      	b.n	8004c90 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e000      	b.n	8004c90 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
  }
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cd8:	f023 030c 	bic.w	r3, r3, #12
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a55      	ldr	r2, [pc, #340]	; (8004e58 <UART_SetConfig+0x1c0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d103      	bne.n	8004d0e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d06:	f7fe f891 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	e002      	b.n	8004d14 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d0e:	f7fe f879 	bl	8002e04 <HAL_RCC_GetPCLK1Freq>
 8004d12:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	d14c      	bne.n	8004db8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009a      	lsls	r2, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	4a49      	ldr	r2, [pc, #292]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	0119      	lsls	r1, r3, #4
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	009a      	lsls	r2, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d54:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004d56:	fba3 0302 	umull	r0, r3, r3, r2
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2064      	movs	r0, #100	; 0x64
 8004d5e:	fb00 f303 	mul.w	r3, r0, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	3332      	adds	r3, #50	; 0x32
 8004d68:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	095b      	lsrs	r3, r3, #5
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d76:	4419      	add	r1, r3
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009a      	lsls	r2, r3, #2
 8004d82:	441a      	add	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d8e:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004d90:	fba3 0302 	umull	r0, r3, r3, r2
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	2064      	movs	r0, #100	; 0x64
 8004d98:	fb00 f303 	mul.w	r3, r0, r3
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	3332      	adds	r3, #50	; 0x32
 8004da2:	4a2e      	ldr	r2, [pc, #184]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	f003 0207 	and.w	r2, r3, #7
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	440a      	add	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004db6:	e04a      	b.n	8004e4e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009a      	lsls	r2, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	4a23      	ldr	r2, [pc, #140]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	0119      	lsls	r1, r3, #4
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004df0:	fba3 0302 	umull	r0, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2064      	movs	r0, #100	; 0x64
 8004df8:	fb00 f303 	mul.w	r3, r0, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a16      	ldr	r2, [pc, #88]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e0e:	4419      	add	r1, r3
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	009a      	lsls	r2, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e26:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004e28:	fba3 0302 	umull	r0, r3, r3, r2
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	2064      	movs	r0, #100	; 0x64
 8004e30:	fb00 f303 	mul.w	r3, r0, r3
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	3332      	adds	r3, #50	; 0x32
 8004e3a:	4a08      	ldr	r2, [pc, #32]	; (8004e5c <UART_SetConfig+0x1c4>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	f003 020f 	and.w	r2, r3, #15
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	440a      	add	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40013800 	.word	0x40013800
 8004e5c:	51eb851f 	.word	0x51eb851f

08004e60 <BewegungssensorInit>:
bool BewegungInterruptAusgeloest;
bool WurdeBewegt;


void BewegungssensorInit()
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
	BewegungInterruptAusgeloest = false;
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <BewegungssensorInit+0x18>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
	WurdeBewegt = true;
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <BewegungssensorInit+0x1c>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	20000981 	.word	0x20000981
 8004e7c:	20000980 	.word	0x20000980

08004e80 <PruefeInterruptStatus>:

void PruefeInterruptStatus(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
	if(BewegungInterruptAusgeloest==true)
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <PruefeInterruptStatus+0x24>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d009      	beq.n	8004ea0 <PruefeInterruptStatus+0x20>
		{
			BewegungInterruptAusgeloest=false;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <PruefeInterruptStatus+0x24>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
			WurdeBewegt=true;
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <PruefeInterruptStatus+0x28>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
			SetzeBewegungssensorInDenSchlaf();
 8004e98:	f000 f830 	bl	8004efc <SetzeBewegungssensorInDenSchlaf>
			RtcEnterLowPowerStopMode( );
 8004e9c:	f007 fdfa 	bl	800ca94 <RtcEnterLowPowerStopMode>
		}
}
 8004ea0:	bf00      	nop
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000981 	.word	0x20000981
 8004ea8:	20000980 	.word	0x20000980

08004eac <PruefeConfirm>:

void PruefeConfirm(McpsConfirm_t *mcpsConfirm)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	if(mcpsConfirm->AckReceived)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	791b      	ldrb	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <PruefeConfirm+0x20>
	{
		SensorAktivieren();
 8004ebc:	f000 f812 	bl	8004ee4 <SensorAktivieren>
		SetappTxDutyCycleInit(DutyCycle);
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <PruefeConfirm+0x34>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f007 fcd3 	bl	800c870 <SetappTxDutyCycleInit>
	}else{
		SetappTxDutyCycleInit(DutyCycle/2);
	}
}
 8004eca:	e005      	b.n	8004ed8 <PruefeConfirm+0x2c>
		SetappTxDutyCycleInit(DutyCycle/2);
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <PruefeConfirm+0x34>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	085b      	lsrs	r3, r3, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f007 fccc 	bl	800c870 <SetappTxDutyCycleInit>
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	080127b4 	.word	0x080127b4

08004ee4 <SensorAktivieren>:

void SensorAktivieren()
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	WurdeBewegt = false;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <SensorAktivieren+0x14>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
	HoleDenBewegungssensorAusDemSchlaf();
 8004eee:	f000 f811 	bl	8004f14 <HoleDenBewegungssensorAusDemSchlaf>
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000980 	.word	0x20000980

08004efc <SetzeBewegungssensorInDenSchlaf>:

void SetzeBewegungssensorInDenSchlaf(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f06:	4802      	ldr	r0, [pc, #8]	; (8004f10 <SetzeBewegungssensorInDenSchlaf+0x14>)
 8004f08:	f7fd f994 	bl	8002234 <HAL_GPIO_WritePin>
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40020400 	.word	0x40020400

08004f14 <HoleDenBewegungssensorAusDemSchlaf>:

void HoleDenBewegungssensorAusDemSchlaf(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f1e:	4802      	ldr	r0, [pc, #8]	; (8004f28 <HoleDenBewegungssensorAusDemSchlaf+0x14>)
 8004f20:	f7fd f988 	bl	8002234 <HAL_GPIO_WritePin>
}
 8004f24:	bf00      	nop
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40020400 	.word	0x40020400

08004f2c <OnRadioTxDone>:
 *        class c devices.
 */
static void OpenContinuousRx2Window( void );

static void OnRadioTxDone( void )
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;
    TimerTime_t curTime = TimerGetCurrentTime( );
 8004f32:	f00b faf2 	bl	801051a <TimerGetCurrentTime>
 8004f36:	6178      	str	r0, [r7, #20]

    if( LoRaMacDeviceClass != CLASS_C )
 8004f38:	4b49      	ldr	r3, [pc, #292]	; (8005060 <OnRadioTxDone+0x134>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d003      	beq.n	8004f48 <OnRadioTxDone+0x1c>
    {
        Radio.Sleep( );
 8004f40:	4b48      	ldr	r3, [pc, #288]	; (8005064 <OnRadioTxDone+0x138>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	4798      	blx	r3
 8004f46:	e001      	b.n	8004f4c <OnRadioTxDone+0x20>
    }
    else
    {
        OpenContinuousRx2Window( );
 8004f48:	f002 fa14 	bl	8007374 <OpenContinuousRx2Window>
    }

    // Setup timers
    if ( IsRxWindowsEnabled == true ) {
 8004f4c:	4b46      	ldr	r3, [pc, #280]	; (8005068 <OnRadioTxDone+0x13c>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d035      	beq.n	8004fc0 <OnRadioTxDone+0x94>
        TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
 8004f54:	4b45      	ldr	r3, [pc, #276]	; (800506c <OnRadioTxDone+0x140>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4845      	ldr	r0, [pc, #276]	; (8005070 <OnRadioTxDone+0x144>)
 8004f5c:	f00b fac4 	bl	80104e8 <TimerSetValue>
        TimerStart( &RxWindowTimer1 );
 8004f60:	4843      	ldr	r0, [pc, #268]	; (8005070 <OnRadioTxDone+0x144>)
 8004f62:	f00b f8bd 	bl	80100e0 <TimerStart>
        if ( LoRaMacDeviceClass != CLASS_C ) {
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <OnRadioTxDone+0x134>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d008      	beq.n	8004f80 <OnRadioTxDone+0x54>
            TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <OnRadioTxDone+0x148>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4619      	mov	r1, r3
 8004f74:	4840      	ldr	r0, [pc, #256]	; (8005078 <OnRadioTxDone+0x14c>)
 8004f76:	f00b fab7 	bl	80104e8 <TimerSetValue>
            TimerStart( &RxWindowTimer2 );
 8004f7a:	483f      	ldr	r0, [pc, #252]	; (8005078 <OnRadioTxDone+0x14c>)
 8004f7c:	f00b f8b0 	bl	80100e0 <TimerStart>
        }
        if ( ( LoRaMacDeviceClass == CLASS_C ) || ( NodeAckRequested == true ) ) {
 8004f80:	4b37      	ldr	r3, [pc, #220]	; (8005060 <OnRadioTxDone+0x134>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d003      	beq.n	8004f90 <OnRadioTxDone+0x64>
 8004f88:	4b3c      	ldr	r3, [pc, #240]	; (800507c <OnRadioTxDone+0x150>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d02b      	beq.n	8004fe8 <OnRadioTxDone+0xbc>
            getPhy.Attribute = PHY_ACK_TIMEOUT;
 8004f90:	2312      	movs	r3, #18
 8004f92:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8004f94:	4b3a      	ldr	r3, [pc, #232]	; (8005080 <OnRadioTxDone+0x154>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f107 0210 	add.w	r2, r7, #16
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f004 fe2e 	bl	8009c00 <RegionGetPhyParam>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	60fb      	str	r3, [r7, #12]
            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + phyParam.Value );
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4b32      	ldr	r3, [pc, #200]	; (8005074 <OnRadioTxDone+0x148>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4413      	add	r3, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4834      	ldr	r0, [pc, #208]	; (8005084 <OnRadioTxDone+0x158>)
 8004fb4:	f00b fa98 	bl	80104e8 <TimerSetValue>
            TimerStart( &AckTimeoutTimer );
 8004fb8:	4832      	ldr	r0, [pc, #200]	; (8005084 <OnRadioTxDone+0x158>)
 8004fba:	f00b f891 	bl	80100e0 <TimerStart>
 8004fbe:	e013      	b.n	8004fe8 <OnRadioTxDone+0xbc>
        }
    } else {
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8004fc0:	4b31      	ldr	r3, [pc, #196]	; (8005088 <OnRadioTxDone+0x15c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	705a      	strb	r2, [r3, #1]
        LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8004fc6:	2004      	movs	r0, #4
 8004fc8:	f003 ffba 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>

        if ( LoRaMacFlags.Value == 0 ) {
 8004fcc:	4b2f      	ldr	r3, [pc, #188]	; (800508c <OnRadioTxDone+0x160>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <OnRadioTxDone+0xb2>
            LoRaMacFlags.Bits.McpsReq = 1;
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <OnRadioTxDone+0x160>)
 8004fd6:	7813      	ldrb	r3, [r2, #0]
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	7013      	strb	r3, [r2, #0]
        }
        LoRaMacFlags.Bits.MacDone = 1;
 8004fde:	4a2b      	ldr	r2, [pc, #172]	; (800508c <OnRadioTxDone+0x160>)
 8004fe0:	7813      	ldrb	r3, [r2, #0]
 8004fe2:	f043 0320 	orr.w	r3, r3, #32
 8004fe6:	7013      	strb	r3, [r2, #0]
    }

    // Verify if the last uplink was a join request
    if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8004fe8:	4b28      	ldr	r3, [pc, #160]	; (800508c <OnRadioTxDone+0x160>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d007      	beq.n	8005006 <OnRadioTxDone+0xda>
 8004ff6:	4b26      	ldr	r3, [pc, #152]	; (8005090 <OnRadioTxDone+0x164>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <OnRadioTxDone+0xda>
        LastTxIsJoinRequest = true;
 8004ffe:	4b25      	ldr	r3, [pc, #148]	; (8005094 <OnRadioTxDone+0x168>)
 8005000:	2201      	movs	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e002      	b.n	800500c <OnRadioTxDone+0xe0>
    } else {
        LastTxIsJoinRequest = false;
 8005006:	4b23      	ldr	r3, [pc, #140]	; (8005094 <OnRadioTxDone+0x168>)
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
    }

    // Store last Tx channel
    LastTxChannel = Channel;
 800500c:	4b22      	ldr	r3, [pc, #136]	; (8005098 <OnRadioTxDone+0x16c>)
 800500e:	781a      	ldrb	r2, [r3, #0]
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <OnRadioTxDone+0x170>)
 8005012:	701a      	strb	r2, [r3, #0]
    // Update last tx done time for the current channel
    txDone.Channel = Channel;
 8005014:	4b20      	ldr	r3, [pc, #128]	; (8005098 <OnRadioTxDone+0x16c>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	713b      	strb	r3, [r7, #4]
    txDone.Joined = IsLoRaMacNetworkJoined;
 800501a:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <OnRadioTxDone+0x174>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	717b      	strb	r3, [r7, #5]
    txDone.LastTxDoneTime = curTime;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	60bb      	str	r3, [r7, #8]
    RegionSetBandTxDone( LoRaMacRegion, &txDone );
 8005024:	4b16      	ldr	r3, [pc, #88]	; (8005080 <OnRadioTxDone+0x154>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	1d3a      	adds	r2, r7, #4
 800502a:	4611      	mov	r1, r2
 800502c:	4618      	mov	r0, r3
 800502e:	f004 fe00 	bl	8009c32 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    AggregatedLastTxDoneTime = curTime;
 8005032:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <OnRadioTxDone+0x178>)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6013      	str	r3, [r2, #0]

    if ( NodeAckRequested == false ) {
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <OnRadioTxDone+0x150>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f083 0301 	eor.w	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <OnRadioTxDone+0x12c>
        McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <OnRadioTxDone+0x15c>)
 8005048:	2200      	movs	r2, #0
 800504a:	705a      	strb	r2, [r3, #1]
        ChannelsNbRepCounter++;
 800504c:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <OnRadioTxDone+0x17c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	3301      	adds	r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <OnRadioTxDone+0x17c>)
 8005056:	701a      	strb	r2, [r3, #0]
    }
}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000148 	.word	0x20000148
 8005064:	080127d0 	.word	0x080127d0
 8005068:	20000008 	.word	0x20000008
 800506c:	20000a60 	.word	0x20000a60
 8005070:	200009f0 	.word	0x200009f0
 8005074:	20000ae8 	.word	0x20000ae8
 8005078:	20000998 	.word	0x20000998
 800507c:	20000360 	.word	0x20000360
 8005080:	20000110 	.word	0x20000110
 8005084:	20000ac0 	.word	0x20000ac0
 8005088:	200009b0 	.word	0x200009b0
 800508c:	20000a08 	.word	0x20000a08
 8005090:	20000984 	.word	0x20000984
 8005094:	20000477 	.word	0x20000477
 8005098:	20000475 	.word	0x20000475
 800509c:	20000476 	.word	0x20000476
 80050a0:	20000359 	.word	0x20000359
 80050a4:	2000046c 	.word	0x2000046c
 80050a8:	20000468 	.word	0x20000468

080050ac <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
    LoRaMacState |= LORAMAC_RX_ABORT;
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <PrepareRxDoneAbort+0x38>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b8:	4a0a      	ldr	r2, [pc, #40]	; (80050e4 <PrepareRxDoneAbort+0x38>)
 80050ba:	6013      	str	r3, [r2, #0]

    if ( NodeAckRequested ) {
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <PrepareRxDoneAbort+0x3c>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <PrepareRxDoneAbort+0x1c>
        OnAckTimeoutTimerEvent( );
 80050c4:	f001 f940 	bl	8006348 <OnAckTimeoutTimerEvent>
    }

    LoRaMacFlags.Bits.McpsInd = 1;
 80050c8:	4a08      	ldr	r2, [pc, #32]	; (80050ec <PrepareRxDoneAbort+0x40>)
 80050ca:	7813      	ldrb	r3, [r2, #0]
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	7013      	strb	r3, [r2, #0]
    LoRaMacFlags.Bits.MacDone = 1;
 80050d2:	4a06      	ldr	r2, [pc, #24]	; (80050ec <PrepareRxDoneAbort+0x40>)
 80050d4:	7813      	ldrb	r3, [r2, #0]
 80050d6:	f043 0320 	orr.w	r3, r3, #32
 80050da:	7013      	strb	r3, [r2, #0]

    // Trig OnMacCheckTimerEvent call as soon as possible
    OnMacStateCheckTimerEvent();
 80050dc:	f000 fda2 	bl	8005c24 <OnMacStateCheckTimerEvent>
}
 80050e0:	bf00      	nop
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	2000047c 	.word	0x2000047c
 80050e8:	20000360 	.word	0x20000360
 80050ec:	20000a08 	.word	0x20000a08

080050f0 <OnRadioRxDone>:

void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b09d      	sub	sp, #116	; 0x74
 80050f4:	af04      	add	r7, sp, #16
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	71fb      	strb	r3, [r7, #7]
	uint8_t * temp = payload;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	64bb      	str	r3, [r7, #72]	; 0x48
    LoRaMacFrameCtrl_t fCtrl;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    uint8_t pktHeaderLen = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t address = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	643b      	str	r3, [r7, #64]	; 0x40
    uint8_t appPayloadStartIndex = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    uint8_t port = 0xFF;
 800511e:	23ff      	movs	r3, #255	; 0xff
 8005120:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    uint8_t frameLen = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint32_t mic = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
    uint32_t micRx = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38

    uint16_t sequenceCounter = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t sequenceCounterPrev = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t sequenceCounterDiff = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	867b      	strh	r3, [r7, #50]	; 0x32
    uint32_t downLinkCounter = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	65fb      	str	r3, [r7, #92]	; 0x5c

    MulticastParams_t *curMulticastParams = NULL;
 8005142:	2300      	movs	r3, #0
 8005144:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *nwkSKey = LoRaMacNwkSKey;
 8005146:	4b99      	ldr	r3, [pc, #612]	; (80053ac <OnRadioRxDone+0x2bc>)
 8005148:	657b      	str	r3, [r7, #84]	; 0x54
    uint8_t *appSKey = LoRaMacAppSKey;
 800514a:	4b99      	ldr	r3, [pc, #612]	; (80053b0 <OnRadioRxDone+0x2c0>)
 800514c:	653b      	str	r3, [r7, #80]	; 0x50

    uint8_t multicast = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    bool isMicOk = false;
 8005154:	2300      	movs	r3, #0
 8005156:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

    McpsConfirm.AckReceived = false;
 800515a:	4b96      	ldr	r3, [pc, #600]	; (80053b4 <OnRadioRxDone+0x2c4>)
 800515c:	2200      	movs	r2, #0
 800515e:	711a      	strb	r2, [r3, #4]
    McpsIndication.Rssi = rssi;
 8005160:	4a95      	ldr	r2, [pc, #596]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005162:	893b      	ldrh	r3, [r7, #8]
 8005164:	81d3      	strh	r3, [r2, #14]
    McpsIndication.Snr = snr;
 8005166:	4a94      	ldr	r2, [pc, #592]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	7413      	strb	r3, [r2, #16]
    McpsIndication.RxSlot = RxSlot;
 800516c:	4b93      	ldr	r3, [pc, #588]	; (80053bc <OnRadioRxDone+0x2cc>)
 800516e:	781a      	ldrb	r2, [r3, #0]
 8005170:	4b91      	ldr	r3, [pc, #580]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005172:	745a      	strb	r2, [r3, #17]
    McpsIndication.Port = 0;
 8005174:	4b90      	ldr	r3, [pc, #576]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005176:	2200      	movs	r2, #0
 8005178:	70da      	strb	r2, [r3, #3]
    McpsIndication.Multicast = 0;
 800517a:	4b8f      	ldr	r3, [pc, #572]	; (80053b8 <OnRadioRxDone+0x2c8>)
 800517c:	2200      	movs	r2, #0
 800517e:	709a      	strb	r2, [r3, #2]
    McpsIndication.FramePending = 0;
 8005180:	4b8d      	ldr	r3, [pc, #564]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005182:	2200      	movs	r2, #0
 8005184:	715a      	strb	r2, [r3, #5]
    McpsIndication.Buffer = NULL;
 8005186:	4b8c      	ldr	r3, [pc, #560]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005188:	2200      	movs	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
    McpsIndication.BufferSize = 0;
 800518c:	4b8a      	ldr	r3, [pc, #552]	; (80053b8 <OnRadioRxDone+0x2c8>)
 800518e:	2200      	movs	r2, #0
 8005190:	731a      	strb	r2, [r3, #12]
    McpsIndication.RxData = false;
 8005192:	4b89      	ldr	r3, [pc, #548]	; (80053b8 <OnRadioRxDone+0x2c8>)
 8005194:	2200      	movs	r2, #0
 8005196:	735a      	strb	r2, [r3, #13]
    McpsIndication.AckReceived = false;
 8005198:	4b87      	ldr	r3, [pc, #540]	; (80053b8 <OnRadioRxDone+0x2c8>)
 800519a:	2200      	movs	r2, #0
 800519c:	749a      	strb	r2, [r3, #18]
    McpsIndication.DownLinkCounter = 0;
 800519e:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <OnRadioRxDone+0x2c8>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	615a      	str	r2, [r3, #20]
    McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80051a4:	4b84      	ldr	r3, [pc, #528]	; (80053b8 <OnRadioRxDone+0x2c8>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]

    Radio.Sleep( );
 80051aa:	4b85      	ldr	r3, [pc, #532]	; (80053c0 <OnRadioRxDone+0x2d0>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4798      	blx	r3
    TimerStop( &RxWindowTimer2 );
 80051b0:	4884      	ldr	r0, [pc, #528]	; (80053c4 <OnRadioRxDone+0x2d4>)
 80051b2:	f00b f8dd 	bl	8010370 <TimerStop>



    macHdr.Value = payload[pktHeaderLen++];
 80051b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80051c0:	461a      	mov	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    switch ( macHdr.Bits.MType ) {
 80051cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	2b06      	cmp	r3, #6
 80051da:	f200 83fd 	bhi.w	80059d8 <OnRadioRxDone+0x8e8>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <OnRadioRxDone+0xf4>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005201 	.word	0x08005201
 80051e8:	080059d9 	.word	0x080059d9
 80051ec:	080053f1 	.word	0x080053f1
 80051f0:	080059d9 	.word	0x080059d9
 80051f4:	080053f1 	.word	0x080053f1
 80051f8:	080059d9 	.word	0x080059d9
 80051fc:	08005999 	.word	0x08005999
        case FRAME_TYPE_JOIN_ACCEPT:
            if ( IsLoRaMacNetworkJoined == true ) {
 8005200:	4b71      	ldr	r3, [pc, #452]	; (80053c8 <OnRadioRxDone+0x2d8>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d006      	beq.n	8005216 <OnRadioRxDone+0x126>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8005208:	4b6b      	ldr	r3, [pc, #428]	; (80053b8 <OnRadioRxDone+0x2c8>)
 800520a:	2201      	movs	r2, #1
 800520c:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 800520e:	f7ff ff4d 	bl	80050ac <PrepareRxDoneAbort>
                return;
 8005212:	f000 bc04 	b.w	8005a1e <OnRadioRxDone+0x92e>
            }
            LoRaMacJoinDecrypt( payload + 1, size - 1, LoRaMacAppKey, LoRaMacRxPayload + 1 );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1c58      	adds	r0, r3, #1
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	3b01      	subs	r3, #1
 800521e:	b299      	uxth	r1, r3
 8005220:	4b6a      	ldr	r3, [pc, #424]	; (80053cc <OnRadioRxDone+0x2dc>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <OnRadioRxDone+0x2e0>)
 8005226:	f004 f8a1 	bl	800936c <LoRaMacJoinDecrypt>

            LoRaMacRxPayload[0] = macHdr.Value;
 800522a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800522e:	4b69      	ldr	r3, [pc, #420]	; (80053d4 <OnRadioRxDone+0x2e4>)
 8005230:	701a      	strb	r2, [r3, #0]

            LoRaMacJoinComputeMic( LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic );
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	3b04      	subs	r3, #4
 8005236:	b299      	uxth	r1, r3
 8005238:	4b64      	ldr	r3, [pc, #400]	; (80053cc <OnRadioRxDone+0x2dc>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	4864      	ldr	r0, [pc, #400]	; (80053d4 <OnRadioRxDone+0x2e4>)
 8005242:	f004 f861 	bl	8009308 <LoRaMacJoinComputeMic>

            micRx |= ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	3b04      	subs	r3, #4
 800524a:	4a62      	ldr	r2, [pc, #392]	; (80053d4 <OnRadioRxDone+0x2e4>)
 800524c:	5cd3      	ldrb	r3, [r2, r3]
 800524e:	461a      	mov	r2, r3
 8005250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005252:	4313      	orrs	r3, r2
 8005254:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8 );
 8005256:	897b      	ldrh	r3, [r7, #10]
 8005258:	3b03      	subs	r3, #3
 800525a:	4a5e      	ldr	r2, [pc, #376]	; (80053d4 <OnRadioRxDone+0x2e4>)
 800525c:	5cd3      	ldrb	r3, [r2, r3]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005262:	4313      	orrs	r3, r2
 8005264:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16 );
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	3b02      	subs	r3, #2
 800526a:	4a5a      	ldr	r2, [pc, #360]	; (80053d4 <OnRadioRxDone+0x2e4>)
 800526c:	5cd3      	ldrb	r3, [r2, r3]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005272:	4313      	orrs	r3, r2
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24 );
 8005276:	897b      	ldrh	r3, [r7, #10]
 8005278:	3b01      	subs	r3, #1
 800527a:	4a56      	ldr	r2, [pc, #344]	; (80053d4 <OnRadioRxDone+0x2e4>)
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005282:	4313      	orrs	r3, r2
 8005284:	63bb      	str	r3, [r7, #56]	; 0x38
            if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8005286:	2000      	movs	r0, #0
 8005288:	f003 fe96 	bl	8008fb8 <LoRaMacConfirmQueueIsCmdActive>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 83a8 	beq.w	80059e4 <OnRadioRxDone+0x8f4>
            {
                if( micRx == mic ) {
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005298:	429a      	cmp	r2, r3
 800529a:	f040 8081 	bne.w	80053a0 <OnRadioRxDone+0x2b0>
                    LoRaMacJoinComputeSKeys( LoRaMacAppKey, LoRaMacRxPayload + 1, LoRaMacDevNonce, LoRaMacNwkSKey, LoRaMacAppSKey );
 800529e:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <OnRadioRxDone+0x2dc>)
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	494b      	ldr	r1, [pc, #300]	; (80053d0 <OnRadioRxDone+0x2e0>)
 80052a4:	4b4c      	ldr	r3, [pc, #304]	; (80053d8 <OnRadioRxDone+0x2e8>)
 80052a6:	881a      	ldrh	r2, [r3, #0]
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <OnRadioRxDone+0x2c0>)
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <OnRadioRxDone+0x2bc>)
 80052ae:	f004 f887 	bl	80093c0 <LoRaMacJoinComputeSKeys>

                    LoRaMacNetID = ( uint32_t )LoRaMacRxPayload[4];
 80052b2:	4b48      	ldr	r3, [pc, #288]	; (80053d4 <OnRadioRxDone+0x2e4>)
 80052b4:	791b      	ldrb	r3, [r3, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b48      	ldr	r3, [pc, #288]	; (80053dc <OnRadioRxDone+0x2ec>)
 80052ba:	601a      	str	r2, [r3, #0]
                    LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[5] << 8 );
 80052bc:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <OnRadioRxDone+0x2e4>)
 80052be:	795b      	ldrb	r3, [r3, #5]
 80052c0:	021a      	lsls	r2, r3, #8
 80052c2:	4b46      	ldr	r3, [pc, #280]	; (80053dc <OnRadioRxDone+0x2ec>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	4a44      	ldr	r2, [pc, #272]	; (80053dc <OnRadioRxDone+0x2ec>)
 80052ca:	6013      	str	r3, [r2, #0]
                    LoRaMacNetID |= ( ( uint32_t )LoRaMacRxPayload[6] << 16 );
 80052cc:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <OnRadioRxDone+0x2e4>)
 80052ce:	799b      	ldrb	r3, [r3, #6]
 80052d0:	041a      	lsls	r2, r3, #16
 80052d2:	4b42      	ldr	r3, [pc, #264]	; (80053dc <OnRadioRxDone+0x2ec>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a40      	ldr	r2, [pc, #256]	; (80053dc <OnRadioRxDone+0x2ec>)
 80052da:	6013      	str	r3, [r2, #0]

                    LoRaMacDevAddr = ( uint32_t )LoRaMacRxPayload[7];
 80052dc:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <OnRadioRxDone+0x2e4>)
 80052de:	79db      	ldrb	r3, [r3, #7]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <OnRadioRxDone+0x2f0>)
 80052e4:	601a      	str	r2, [r3, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[8] << 8 );
 80052e6:	4b3b      	ldr	r3, [pc, #236]	; (80053d4 <OnRadioRxDone+0x2e4>)
 80052e8:	7a1b      	ldrb	r3, [r3, #8]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <OnRadioRxDone+0x2f0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	4a3b      	ldr	r2, [pc, #236]	; (80053e0 <OnRadioRxDone+0x2f0>)
 80052f4:	6013      	str	r3, [r2, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[9] << 16 );
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <OnRadioRxDone+0x2e4>)
 80052f8:	7a5b      	ldrb	r3, [r3, #9]
 80052fa:	041a      	lsls	r2, r3, #16
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <OnRadioRxDone+0x2f0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	4a37      	ldr	r2, [pc, #220]	; (80053e0 <OnRadioRxDone+0x2f0>)
 8005304:	6013      	str	r3, [r2, #0]
                    LoRaMacDevAddr |= ( ( uint32_t )LoRaMacRxPayload[10] << 24 );
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <OnRadioRxDone+0x2e4>)
 8005308:	7a9b      	ldrb	r3, [r3, #10]
 800530a:	061a      	lsls	r2, r3, #24
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <OnRadioRxDone+0x2f0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4313      	orrs	r3, r2
 8005312:	4a33      	ldr	r2, [pc, #204]	; (80053e0 <OnRadioRxDone+0x2f0>)
 8005314:	6013      	str	r3, [r2, #0]

                    // DLSettings
                    LoRaMacParams.Rx1DrOffset = ( LoRaMacRxPayload[11] >> 4 ) & 0x07;
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <OnRadioRxDone+0x2e4>)
 8005318:	7adb      	ldrb	r3, [r3, #11]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	b2da      	uxtb	r2, r3
 8005324:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                    LoRaMacParams.Rx2Channel.Datarate = LoRaMacRxPayload[11] & 0x0F;
 800532a:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <OnRadioRxDone+0x2e4>)
 800532c:	7adb      	ldrb	r3, [r3, #11]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	b2da      	uxtb	r2, r3
 8005334:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                    // RxDelay
                    LoRaMacParams.ReceiveDelay1 = ( LoRaMacRxPayload[12] & 0x0F );
 800533a:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <OnRadioRxDone+0x2e4>)
 800533c:	7b1b      	ldrb	r3, [r3, #12]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005344:	6113      	str	r3, [r2, #16]
                    if( LoRaMacParams.ReceiveDelay1 == 0 ) {
 8005346:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <OnRadioRxDone+0x264>
                        LoRaMacParams.ReceiveDelay1 = 1;
 800534e:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005350:	2201      	movs	r2, #1
 8005352:	611a      	str	r2, [r3, #16]
                    }
                    LoRaMacParams.ReceiveDelay1 *= 1000;
 8005354:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800535c:	fb02 f303 	mul.w	r3, r2, r3
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005362:	6113      	str	r3, [r2, #16]
                    LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8005364:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <OnRadioRxDone+0x2f4>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <OnRadioRxDone+0x2f4>)
 800536e:	6153      	str	r3, [r2, #20]
                    // Apply CF list
                    applyCFList.Payload = &LoRaMacRxPayload[13];
 8005370:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <OnRadioRxDone+0x2f8>)
 8005372:	61fb      	str	r3, [r7, #28]
                    // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                    applyCFList.Size = size - 17;
 8005374:	897b      	ldrh	r3, [r7, #10]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	3b11      	subs	r3, #17
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f887 3020 	strb.w	r3, [r7, #32]

                    RegionApplyCFList( LoRaMacRegion, &applyCFList );
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <OnRadioRxDone+0x2fc>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f107 021c 	add.w	r2, r7, #28
 8005388:	4611      	mov	r1, r2
 800538a:	4618      	mov	r0, r3
 800538c:	f004 fc8e 	bl	8009cac <RegionApplyCFList>

                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8005390:	2100      	movs	r1, #0
 8005392:	2000      	movs	r0, #0
 8005394:	f003 fd84 	bl	8008ea0 <LoRaMacConfirmQueueSetStatus>
                    IsLoRaMacNetworkJoined = true;
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <OnRadioRxDone+0x2d8>)
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
//                	LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
            	} else {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800539e:	e321      	b.n	80059e4 <OnRadioRxDone+0x8f4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80053a0:	2100      	movs	r1, #0
 80053a2:	2007      	movs	r0, #7
 80053a4:	f003 fd7c 	bl	8008ea0 <LoRaMacConfirmQueueSetStatus>
            break;
 80053a8:	e31c      	b.n	80059e4 <OnRadioRxDone+0x8f4>
 80053aa:	bf00      	nop
 80053ac:	2000011c 	.word	0x2000011c
 80053b0:	2000012c 	.word	0x2000012c
 80053b4:	200009b0 	.word	0x200009b0
 80053b8:	200009d8 	.word	0x200009d8
 80053bc:	20000a64 	.word	0x20000a64
 80053c0:	080127d0 	.word	0x080127d0
 80053c4:	20000998 	.word	0x20000998
 80053c8:	20000359 	.word	0x20000359
 80053cc:	20000abc 	.word	0x20000abc
 80053d0:	20000251 	.word	0x20000251
 80053d4:	20000250 	.word	0x20000250
 80053d8:	20000a48 	.word	0x20000a48
 80053dc:	2000013c 	.word	0x2000013c
 80053e0:	20000140 	.word	0x20000140
 80053e4:	20000a68 	.word	0x20000a68
 80053e8:	2000025d 	.word	0x2000025d
 80053ec:	20000110 	.word	0x20000110
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN: {
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80053f0:	4bad      	ldr	r3, [pc, #692]	; (80056a8 <OnRadioRxDone+0x5b8>)
 80053f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053f6:	76bb      	strb	r3, [r7, #26]
            getPhy.Datarate = McpsIndication.RxDatarate;
 80053f8:	4bac      	ldr	r3, [pc, #688]	; (80056ac <OnRadioRxDone+0x5bc>)
 80053fa:	791b      	ldrb	r3, [r3, #4]
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	767b      	strb	r3, [r7, #25]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8005400:	2309      	movs	r3, #9
 8005402:	763b      	strb	r3, [r7, #24]

            // Get the maximum payload length
            if( LoRaMacParams.RepeaterSupport == true ) {
 8005404:	4ba8      	ldr	r3, [pc, #672]	; (80056a8 <OnRadioRxDone+0x5b8>)
 8005406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <OnRadioRxDone+0x322>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800540e:	230a      	movs	r3, #10
 8005410:	763b      	strb	r3, [r7, #24]
            }
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8005412:	4ba7      	ldr	r3, [pc, #668]	; (80056b0 <OnRadioRxDone+0x5c0>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f107 0218 	add.w	r2, r7, #24
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f004 fbef 	bl	8009c00 <RegionGetPhyParam>
 8005422:	4603      	mov	r3, r0
 8005424:	617b      	str	r3, [r7, #20]
            if ( MAX( 0, ( int16_t )( ( int16_t )size - ( int16_t )LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > phyParam.Value ) {
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	3b0d      	subs	r3, #13
 800542a:	b29b      	uxth	r3, r3
 800542c:	b21b      	sxth	r3, r3
 800542e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005432:	b21b      	sxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	429a      	cmp	r2, r3
 800543a:	d905      	bls.n	8005448 <OnRadioRxDone+0x358>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800543c:	4b9b      	ldr	r3, [pc, #620]	; (80056ac <OnRadioRxDone+0x5bc>)
 800543e:	2201      	movs	r2, #1
 8005440:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 8005442:	f7ff fe33 	bl	80050ac <PrepareRxDoneAbort>
                return;
 8005446:	e2ea      	b.n	8005a1e <OnRadioRxDone+0x92e>
            }

            address = payload[pktHeaderLen++];
 8005448:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005452:	461a      	mov	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 8 );
 800545c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005472:	4313      	orrs	r3, r2
 8005474:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 16 );
 8005476:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8005480:	461a      	mov	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800548c:	4313      	orrs	r3, r2
 800548e:	643b      	str	r3, [r7, #64]	; 0x40
            address |= ( (uint32_t)payload[pktHeaderLen++] << 24 );
 8005490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054a6:	4313      	orrs	r3, r2
 80054a8:	643b      	str	r3, [r7, #64]	; 0x40

            fCtrl.Value = payload[pktHeaderLen++];
 80054aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80054b4:	461a      	mov	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

            if ( address != LoRaMacDevAddr ) {
 80054c0:	4b7c      	ldr	r3, [pc, #496]	; (80056b4 <OnRadioRxDone+0x5c4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d040      	beq.n	800554c <OnRadioRxDone+0x45c>
                curMulticastParams = MulticastChannels;
 80054ca:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <OnRadioRxDone+0x5c8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	65bb      	str	r3, [r7, #88]	; 0x58
                while ( curMulticastParams != NULL ) {
 80054d0:	e014      	b.n	80054fc <OnRadioRxDone+0x40c>
                    if ( address == curMulticastParams->Address ) {
 80054d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054d8:	429a      	cmp	r2, r3
 80054da:	d10c      	bne.n	80054f6 <OnRadioRxDone+0x406>
                        multicast = 1;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        nwkSKey = curMulticastParams->NwkSKey;
 80054e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e4:	3304      	adds	r3, #4
 80054e6:	657b      	str	r3, [r7, #84]	; 0x54
                        appSKey = curMulticastParams->AppSKey;
 80054e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ea:	3314      	adds	r3, #20
 80054ec:	653b      	str	r3, [r7, #80]	; 0x50
                        downLinkCounter = curMulticastParams->DownLinkCounter;
 80054ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	65fb      	str	r3, [r7, #92]	; 0x5c
                        break;
 80054f4:	e005      	b.n	8005502 <OnRadioRxDone+0x412>
                    }
                    curMulticastParams = curMulticastParams->Next;
 80054f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	65bb      	str	r3, [r7, #88]	; 0x58
                while ( curMulticastParams != NULL ) {
 80054fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e7      	bne.n	80054d2 <OnRadioRxDone+0x3e2>
                }
                if ( multicast == 0 ) {
 8005502:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005506:	2b00      	cmp	r3, #0
 8005508:	d105      	bne.n	8005516 <OnRadioRxDone+0x426>
                    // We are not the destination of this frame.
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800550a:	4b68      	ldr	r3, [pc, #416]	; (80056ac <OnRadioRxDone+0x5bc>)
 800550c:	220b      	movs	r2, #11
 800550e:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 8005510:	f7ff fdcc 	bl	80050ac <PrepareRxDoneAbort>
                    return;
 8005514:	e283      	b.n	8005a1e <OnRadioRxDone+0x92e>
                }
                if( ( macHdr.Bits.MType != FRAME_TYPE_DATA_UNCONFIRMED_DOWN ) ||
 8005516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800551a:	f023 031f 	bic.w	r3, r3, #31
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b60      	cmp	r3, #96	; 0x60
 8005522:	d10d      	bne.n	8005540 <OnRadioRxDone+0x450>
                        ( fCtrl.Bits.Ack == 1 ) ||
 8005524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	b2db      	uxtb	r3, r3
                if( ( macHdr.Bits.MType != FRAME_TYPE_DATA_UNCONFIRMED_DOWN ) ||
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <OnRadioRxDone+0x450>
                        ( fCtrl.Bits.AdrAckReq == 1 ) ) {
 8005532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	b2db      	uxtb	r3, r3
                        ( fCtrl.Bits.Ack == 1 ) ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00f      	beq.n	8005560 <OnRadioRxDone+0x470>
                    // Wrong multicast message format. Refer to chapter 11.2.2 of the specification
                    McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MULTICAST_FAIL;
 8005540:	4b5a      	ldr	r3, [pc, #360]	; (80056ac <OnRadioRxDone+0x5bc>)
 8005542:	220d      	movs	r2, #13
 8005544:	705a      	strb	r2, [r3, #1]
                    PrepareRxDoneAbort( );
 8005546:	f7ff fdb1 	bl	80050ac <PrepareRxDoneAbort>
                    return;
 800554a:	e268      	b.n	8005a1e <OnRadioRxDone+0x92e>
                }
            } else {
                multicast = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                nwkSKey = LoRaMacNwkSKey;
 8005552:	4b5a      	ldr	r3, [pc, #360]	; (80056bc <OnRadioRxDone+0x5cc>)
 8005554:	657b      	str	r3, [r7, #84]	; 0x54
                appSKey = LoRaMacAppSKey;
 8005556:	4b5a      	ldr	r3, [pc, #360]	; (80056c0 <OnRadioRxDone+0x5d0>)
 8005558:	653b      	str	r3, [r7, #80]	; 0x50
                downLinkCounter = DownLinkCounter;
 800555a:	4b5a      	ldr	r3, [pc, #360]	; (80056c4 <OnRadioRxDone+0x5d4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	65fb      	str	r3, [r7, #92]	; 0x5c
            }

            sequenceCounter = ( uint16_t )payload[pktHeaderLen++];
 8005560:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	86fb      	strh	r3, [r7, #54]	; 0x36
            sequenceCounter |= ( uint16_t )payload[pktHeaderLen++] << 8;
 8005574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800557e:	461a      	mov	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	b21a      	sxth	r2, r3
 800558a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800558e:	4313      	orrs	r3, r2
 8005590:	b21b      	sxth	r3, r3
 8005592:	86fb      	strh	r3, [r7, #54]	; 0x36

            appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 8005594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005598:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800559c:	b2db      	uxtb	r3, r3
 800559e:	3308      	adds	r3, #8
 80055a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            micRx |= ( uint32_t )payload[size - LORAMAC_MFR_LEN];
 80055a4:	897b      	ldrh	r3, [r7, #10]
 80055a6:	3b04      	subs	r3, #4
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	4313      	orrs	r3, r2
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 1] << 8 );
 80055b6:	897b      	ldrh	r3, [r7, #10]
 80055b8:	3b03      	subs	r3, #3
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c4:	4313      	orrs	r3, r2
 80055c6:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 2] << 16 );
 80055c8:	897b      	ldrh	r3, [r7, #10]
 80055ca:	3b02      	subs	r3, #2
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055d6:	4313      	orrs	r3, r2
 80055d8:	63bb      	str	r3, [r7, #56]	; 0x38
            micRx |= ( ( uint32_t )payload[size - LORAMAC_MFR_LEN + 3] << 24 );
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	3b01      	subs	r3, #1
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	061b      	lsls	r3, r3, #24
 80055e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e8:	4313      	orrs	r3, r2
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38

            sequenceCounterPrev = ( uint16_t )downLinkCounter;
 80055ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ee:	86bb      	strh	r3, [r7, #52]	; 0x34
            sequenceCounterDiff = ( sequenceCounter - sequenceCounterPrev );
 80055f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	867b      	strh	r3, [r7, #50]	; 0x32

            if ( sequenceCounterDiff < ( 1 << 15 ) ) {
 80055f8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	db1a      	blt.n	8005636 <OnRadioRxDone+0x546>
                downLinkCounter += sequenceCounterDiff;
 8005600:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005602:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005604:	4413      	add	r3, r2
 8005606:	65fb      	str	r3, [r7, #92]	; 0x5c
                LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic );
 8005608:	897b      	ldrh	r3, [r7, #10]
 800560a:	3b04      	subs	r3, #4
 800560c:	b299      	uxth	r1, r3
 800560e:	f107 0310 	add.w	r3, r7, #16
 8005612:	9302      	str	r3, [sp, #8]
 8005614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	2301      	movs	r3, #1
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f003 fd4d 	bl	80090c0 <LoRaMacComputeMic>
                if ( micRx == mic ) {
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562a:	429a      	cmp	r2, r3
 800562c:	d123      	bne.n	8005676 <OnRadioRxDone+0x586>
                    isMicOk = true;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8005634:	e01f      	b.n	8005676 <OnRadioRxDone+0x586>
                }
            } else {
                // check for sequence roll-over
                uint32_t  downLinkCounterTmp = downLinkCounter + 0x10000 + ( int16_t )sequenceCounterDiff;
 8005636:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800563a:	461a      	mov	r2, r3
 800563c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800563e:	4413      	add	r3, r2
 8005640:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
                LoRaMacComputeMic( payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic );
 8005646:	897b      	ldrh	r3, [r7, #10]
 8005648:	3b04      	subs	r3, #4
 800564a:	b299      	uxth	r1, r3
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	9302      	str	r3, [sp, #8]
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	2301      	movs	r3, #1
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f003 fd2e 	bl	80090c0 <LoRaMacComputeMic>
                if ( micRx == mic ) {
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005668:	429a      	cmp	r2, r3
 800566a:	d104      	bne.n	8005676 <OnRadioRxDone+0x586>
                    isMicOk = true;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    downLinkCounter = downLinkCounterTmp;
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	65fb      	str	r3, [r7, #92]	; 0x5c
                }
            }

            // Check for a the maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8005676:	2311      	movs	r3, #17
 8005678:	763b      	strb	r3, [r7, #24]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <OnRadioRxDone+0x5c0>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f107 0218 	add.w	r2, r7, #24
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f004 fabb 	bl	8009c00 <RegionGetPhyParam>
 800568a:	4603      	mov	r3, r0
 800568c:	617b      	str	r3, [r7, #20]
            if ( sequenceCounterDiff >= phyParam.Value ) {
 800568e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	429a      	cmp	r2, r3
 8005694:	d318      	bcc.n	80056c8 <OnRadioRxDone+0x5d8>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <OnRadioRxDone+0x5bc>)
 8005698:	220a      	movs	r2, #10
 800569a:	705a      	strb	r2, [r3, #1]
                McpsIndication.DownLinkCounter = downLinkCounter;
 800569c:	4a03      	ldr	r2, [pc, #12]	; (80056ac <OnRadioRxDone+0x5bc>)
 800569e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a0:	6153      	str	r3, [r2, #20]
                PrepareRxDoneAbort( );
 80056a2:	f7ff fd03 	bl	80050ac <PrepareRxDoneAbort>
                return;
 80056a6:	e1ba      	b.n	8005a1e <OnRadioRxDone+0x92e>
 80056a8:	20000a68 	.word	0x20000a68
 80056ac:	200009d8 	.word	0x200009d8
 80056b0:	20000110 	.word	0x20000110
 80056b4:	20000140 	.word	0x20000140
 80056b8:	20000144 	.word	0x20000144
 80056bc:	2000011c 	.word	0x2000011c
 80056c0:	2000012c 	.word	0x2000012c
 80056c4:	20000354 	.word	0x20000354
            }

            if ( isMicOk == true ) {
 80056c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 814a 	beq.w	8005966 <OnRadioRxDone+0x876>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80056d2:	4ba8      	ldr	r3, [pc, #672]	; (8005974 <OnRadioRxDone+0x884>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	705a      	strb	r2, [r3, #1]
                McpsIndication.Multicast = multicast;
 80056d8:	4aa6      	ldr	r2, [pc, #664]	; (8005974 <OnRadioRxDone+0x884>)
 80056da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056de:	7093      	strb	r3, [r2, #2]
                McpsIndication.FramePending = fCtrl.Bits.FPending;
 80056e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	4ba1      	ldr	r3, [pc, #644]	; (8005974 <OnRadioRxDone+0x884>)
 80056ee:	715a      	strb	r2, [r3, #5]
                McpsIndication.Buffer = NULL;
 80056f0:	4ba0      	ldr	r3, [pc, #640]	; (8005974 <OnRadioRxDone+0x884>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
                McpsIndication.BufferSize = 0;
 80056f6:	4b9f      	ldr	r3, [pc, #636]	; (8005974 <OnRadioRxDone+0x884>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	731a      	strb	r2, [r3, #12]
                McpsIndication.DownLinkCounter = downLinkCounter;
 80056fc:	4a9d      	ldr	r2, [pc, #628]	; (8005974 <OnRadioRxDone+0x884>)
 80056fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005700:	6153      	str	r3, [r2, #20]
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8005702:	4b9d      	ldr	r3, [pc, #628]	; (8005978 <OnRadioRxDone+0x888>)
 8005704:	2200      	movs	r2, #0
 8005706:	705a      	strb	r2, [r3, #1]

                AdrAckCounter = 0;
 8005708:	4b9c      	ldr	r3, [pc, #624]	; (800597c <OnRadioRxDone+0x88c>)
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
                MacCommandsBufferToRepeatIndex = 0;
 800570e:	4b9c      	ldr	r3, [pc, #624]	; (8005980 <OnRadioRxDone+0x890>)
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]

                // Update 32 bits downlink counter
                if ( multicast == 1 ) {
 8005714:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005718:	2b01      	cmp	r3, #1
 800571a:	d118      	bne.n	800574e <OnRadioRxDone+0x65e>
                    McpsIndication.McpsIndication = MCPS_MULTICAST;
 800571c:	4b95      	ldr	r3, [pc, #596]	; (8005974 <OnRadioRxDone+0x884>)
 800571e:	2202      	movs	r2, #2
 8005720:	701a      	strb	r2, [r3, #0]

                    if ( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8005722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005728:	429a      	cmp	r2, r3
 800572a:	d10c      	bne.n	8005746 <OnRadioRxDone+0x656>
                         ( curMulticastParams->DownLinkCounter != 0 ) ) {
 800572c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    if ( ( curMulticastParams->DownLinkCounter == downLinkCounter ) &&
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <OnRadioRxDone+0x656>
                        McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8005734:	4b8f      	ldr	r3, [pc, #572]	; (8005974 <OnRadioRxDone+0x884>)
 8005736:	2208      	movs	r2, #8
 8005738:	705a      	strb	r2, [r3, #1]
                        McpsIndication.DownLinkCounter = downLinkCounter;
 800573a:	4a8e      	ldr	r2, [pc, #568]	; (8005974 <OnRadioRxDone+0x884>)
 800573c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573e:	6153      	str	r3, [r2, #20]
                        PrepareRxDoneAbort( );
 8005740:	f7ff fcb4 	bl	80050ac <PrepareRxDoneAbort>
                        return;
 8005744:	e16b      	b.n	8005a1e <OnRadioRxDone+0x92e>
                    }
                    curMulticastParams->DownLinkCounter = downLinkCounter;
 8005746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005748:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800574a:	625a      	str	r2, [r3, #36]	; 0x24
 800574c:	e036      	b.n	80057bc <OnRadioRxDone+0x6cc>
                } else {
                    if ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) {
 800574e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005752:	f023 031f 	bic.w	r3, r3, #31
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2ba0      	cmp	r3, #160	; 0xa0
 800575a:	d114      	bne.n	8005786 <OnRadioRxDone+0x696>
                        SrvAckRequested = true;
 800575c:	4b89      	ldr	r3, [pc, #548]	; (8005984 <OnRadioRxDone+0x894>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
                        McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8005762:	4b84      	ldr	r3, [pc, #528]	; (8005974 <OnRadioRxDone+0x884>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]

                        if ( ( DownLinkCounter == downLinkCounter ) &&
 8005768:	4b87      	ldr	r3, [pc, #540]	; (8005988 <OnRadioRxDone+0x898>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800576e:	429a      	cmp	r2, r3
 8005770:	d121      	bne.n	80057b6 <OnRadioRxDone+0x6c6>
                             ( DownLinkCounter != 0 ) ) {
 8005772:	4b85      	ldr	r3, [pc, #532]	; (8005988 <OnRadioRxDone+0x898>)
 8005774:	681b      	ldr	r3, [r3, #0]
                        if ( ( DownLinkCounter == downLinkCounter ) &&
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01d      	beq.n	80057b6 <OnRadioRxDone+0x6c6>
                            // Duplicated confirmed downlink. Skip indication.
                            // In this case, the MAC layer shall accept the MAC commands
                            // which are included in the downlink retransmission.
                            // It should not provide the same frame to the application
                            // layer again.
                            LoRaMacFlags.Bits.McpsIndSkip = 1;
 800577a:	4a84      	ldr	r2, [pc, #528]	; (800598c <OnRadioRxDone+0x89c>)
 800577c:	7813      	ldrb	r3, [r2, #0]
 800577e:	f043 0304 	orr.w	r3, r3, #4
 8005782:	7013      	strb	r3, [r2, #0]
 8005784:	e017      	b.n	80057b6 <OnRadioRxDone+0x6c6>
                        }
                    } else {
                        SrvAckRequested = false;
 8005786:	4b7f      	ldr	r3, [pc, #508]	; (8005984 <OnRadioRxDone+0x894>)
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
                        McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800578c:	4b79      	ldr	r3, [pc, #484]	; (8005974 <OnRadioRxDone+0x884>)
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]

                        if ( ( DownLinkCounter == downLinkCounter ) &&
 8005792:	4b7d      	ldr	r3, [pc, #500]	; (8005988 <OnRadioRxDone+0x898>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005798:	429a      	cmp	r2, r3
 800579a:	d10c      	bne.n	80057b6 <OnRadioRxDone+0x6c6>
                             ( DownLinkCounter != 0 ) ) {
 800579c:	4b7a      	ldr	r3, [pc, #488]	; (8005988 <OnRadioRxDone+0x898>)
 800579e:	681b      	ldr	r3, [r3, #0]
                        if ( ( DownLinkCounter == downLinkCounter ) &&
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <OnRadioRxDone+0x6c6>
                            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80057a4:	4b73      	ldr	r3, [pc, #460]	; (8005974 <OnRadioRxDone+0x884>)
 80057a6:	2208      	movs	r2, #8
 80057a8:	705a      	strb	r2, [r3, #1]
                            McpsIndication.DownLinkCounter = downLinkCounter;
 80057aa:	4a72      	ldr	r2, [pc, #456]	; (8005974 <OnRadioRxDone+0x884>)
 80057ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ae:	6153      	str	r3, [r2, #20]
                            PrepareRxDoneAbort( );
 80057b0:	f7ff fc7c 	bl	80050ac <PrepareRxDoneAbort>
                            return;
 80057b4:	e133      	b.n	8005a1e <OnRadioRxDone+0x92e>
                        }
                    }
                    DownLinkCounter = downLinkCounter;
 80057b6:	4a74      	ldr	r2, [pc, #464]	; (8005988 <OnRadioRxDone+0x898>)
 80057b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ba:	6013      	str	r3, [r2, #0]

                // This must be done before parsing the payload and the MAC commands.
                // We need to reset the MacCommandsBufferIndex here, since we need
                // to take retransmissions and repetitions into account. Error cases
                // will be handled in function OnMacStateCheckTimerEvent.
                if ( McpsConfirm.McpsRequest == MCPS_CONFIRMED ) {
 80057bc:	4b6e      	ldr	r3, [pc, #440]	; (8005978 <OnRadioRxDone+0x888>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d122      	bne.n	800580a <OnRadioRxDone+0x71a>
                    if ( fCtrl.Bits.Ack == 1 ) {
 80057c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01e      	beq.n	8005810 <OnRadioRxDone+0x720>
                        // Reset MacCommandsBufferIndex when we have received an ACK.
                        MacCommandsBufferIndex = 0;
 80057d2:	4b6f      	ldr	r3, [pc, #444]	; (8005990 <OnRadioRxDone+0x8a0>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
                        // Update acknowledgement information
                        McpsConfirm.AckReceived = fCtrl.Bits.Ack;
 80057d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057dc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	4b62      	ldr	r3, [pc, #392]	; (8005978 <OnRadioRxDone+0x888>)
 80057ee:	711a      	strb	r2, [r3, #4]
                        McpsIndication.AckReceived = fCtrl.Bits.Ack;
 80057f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bf14      	ite	ne
 80057fe:	2301      	movne	r3, #1
 8005800:	2300      	moveq	r3, #0
 8005802:	b2da      	uxtb	r2, r3
 8005804:	4b5b      	ldr	r3, [pc, #364]	; (8005974 <OnRadioRxDone+0x884>)
 8005806:	749a      	strb	r2, [r3, #18]
 8005808:	e002      	b.n	8005810 <OnRadioRxDone+0x720>
                    }
                } else {
                    // Reset the variable if we have received any valid frame.
                    MacCommandsBufferIndex = 0;
 800580a:	4b61      	ldr	r3, [pc, #388]	; (8005990 <OnRadioRxDone+0x8a0>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
                }
                port = payload[appPayloadStartIndex];
 8005810:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                // Process payload and MAC commands
                if ( ( ( size - 4 ) - appPayloadStartIndex ) > 0 ) {
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	1f1a      	subs	r2, r3, #4
 8005822:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	f340 8084 	ble.w	8005936 <OnRadioRxDone+0x846>
                    port = payload[appPayloadStartIndex++];
 800582e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8005838:	461a      	mov	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4413      	add	r3, r2
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
                    frameLen = ( size - 4 ) - appPayloadStartIndex;
 8005844:	897b      	ldrh	r3, [r7, #10]
 8005846:	b2da      	uxtb	r2, r3
 8005848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	3b04      	subs	r3, #4
 8005852:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

                    McpsIndication.Port = port;
 8005856:	4a47      	ldr	r2, [pc, #284]	; (8005974 <OnRadioRxDone+0x884>)
 8005858:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800585c:	70d3      	strb	r3, [r2, #3]
                    if ( port == 0 ) {
 800585e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005862:	2b00      	cmp	r3, #0
 8005864:	d133      	bne.n	80058ce <OnRadioRxDone+0x7de>
                        // Only allow frames which do not have fOpts
                            if( ( fCtrl.Bits.FOptsLen == 0 ) && ( multicast == 0 ) ) {
 8005866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d120      	bne.n	80058b6 <OnRadioRxDone+0x7c6>
 8005874:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11c      	bne.n	80058b6 <OnRadioRxDone+0x7c6>
                            LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 800587c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	18d0      	adds	r0, r2, r3
 8005884:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005888:	b299      	uxth	r1, r3
 800588a:	4b42      	ldr	r3, [pc, #264]	; (8005994 <OnRadioRxDone+0x8a4>)
 800588c:	9302      	str	r3, [sp, #8]
 800588e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	2301      	movs	r3, #1
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800589a:	f003 fd1d 	bl	80092d8 <LoRaMacPayloadDecrypt>
                                                   address,
                                                   DOWN_LINK,
                                                   downLinkCounter,
                                                   LoRaMacRxPayload );
                            // Decode frame payload MAC commands
                                ProcessMacCommands( LoRaMacRxPayload, 0, frameLen, snr, McpsIndication.RxSlot );
 800589e:	79f9      	ldrb	r1, [r7, #7]
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <OnRadioRxDone+0x884>)
 80058a2:	7c5b      	ldrb	r3, [r3, #17]
 80058a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	460b      	mov	r3, r1
 80058ac:	2100      	movs	r1, #0
 80058ae:	4839      	ldr	r0, [pc, #228]	; (8005994 <OnRadioRxDone+0x8a4>)
 80058b0:	f001 f8aa 	bl	8006a08 <ProcessMacCommands>
 80058b4:	e051      	b.n	800595a <OnRadioRxDone+0x86a>
                        } else {
                            LoRaMacFlags.Bits.McpsIndSkip = 1;
 80058b6:	4a35      	ldr	r2, [pc, #212]	; (800598c <OnRadioRxDone+0x89c>)
 80058b8:	7813      	ldrb	r3, [r2, #0]
 80058ba:	f043 0304 	orr.w	r3, r3, #4
 80058be:	7013      	strb	r3, [r2, #0]
                            // This is not a valid frame. Drop it and reset the ACK bits
                            McpsConfirm.AckReceived = false;
 80058c0:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <OnRadioRxDone+0x888>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	711a      	strb	r2, [r3, #4]
                            McpsIndication.AckReceived = false;
 80058c6:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <OnRadioRxDone+0x884>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	749a      	strb	r2, [r3, #18]
 80058cc:	e045      	b.n	800595a <OnRadioRxDone+0x86a>
                        }
                    } else {
                        if( ( fCtrl.Bits.FOptsLen > 0 ) && ( multicast == 0 ) ){
 80058ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <OnRadioRxDone+0x80e>
 80058dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10c      	bne.n	80058fe <OnRadioRxDone+0x80e>
                            // Decode Options field MAC commands. Omit the fPort.
                                ProcessMacCommands( payload, 8, appPayloadStartIndex - 1, snr, McpsIndication.RxSlot );
 80058e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	79f9      	ldrb	r1, [r7, #7]
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <OnRadioRxDone+0x884>)
 80058f0:	7c5b      	ldrb	r3, [r3, #17]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	460b      	mov	r3, r1
 80058f6:	2108      	movs	r1, #8
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f001 f885 	bl	8006a08 <ProcessMacCommands>
                        }

                        LoRaMacPayloadDecrypt( payload + appPayloadStartIndex,
 80058fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	18d0      	adds	r0, r2, r3
 8005906:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800590a:	b299      	uxth	r1, r3
 800590c:	4b21      	ldr	r3, [pc, #132]	; (8005994 <OnRadioRxDone+0x8a4>)
 800590e:	9302      	str	r3, [sp, #8]
 8005910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	2301      	movs	r3, #1
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800591c:	f003 fcdc 	bl	80092d8 <LoRaMacPayloadDecrypt>
                                               address,
                                               DOWN_LINK,
                                               downLinkCounter,
                                               LoRaMacRxPayload );

                        McpsIndication.Buffer = LoRaMacRxPayload;
 8005920:	4b14      	ldr	r3, [pc, #80]	; (8005974 <OnRadioRxDone+0x884>)
 8005922:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <OnRadioRxDone+0x8a4>)
 8005924:	609a      	str	r2, [r3, #8]
                        McpsIndication.BufferSize = frameLen;
 8005926:	4a13      	ldr	r2, [pc, #76]	; (8005974 <OnRadioRxDone+0x884>)
 8005928:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800592c:	7313      	strb	r3, [r2, #12]
                        McpsIndication.RxData = true;
 800592e:	4b11      	ldr	r3, [pc, #68]	; (8005974 <OnRadioRxDone+0x884>)
 8005930:	2201      	movs	r2, #1
 8005932:	735a      	strb	r2, [r3, #13]
 8005934:	e011      	b.n	800595a <OnRadioRxDone+0x86a>
                    }
                } else {
                    if ( fCtrl.Bits.FOptsLen > 0 ) {
 8005936:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <OnRadioRxDone+0x86a>
                        // Decode Options field MAC commands
                        ProcessMacCommands( payload, 8, appPayloadStartIndex, snr , McpsIndication.RxSlot);
 8005944:	79f9      	ldrb	r1, [r7, #7]
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <OnRadioRxDone+0x884>)
 8005948:	7c5b      	ldrb	r3, [r3, #17]
 800594a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	460b      	mov	r3, r1
 8005952:	2108      	movs	r1, #8
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f001 f857 	bl	8006a08 <ProcessMacCommands>
                    }
                }

                // Provide always an indication, skip the callback to the user application,
                // in case of a confirmed downlink retransmission.
                LoRaMacFlags.Bits.McpsInd = 1;
 800595a:	4a0c      	ldr	r2, [pc, #48]	; (800598c <OnRadioRxDone+0x89c>)
 800595c:	7813      	ldrb	r3, [r2, #0]
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	7013      	strb	r3, [r2, #0]

                PrepareRxDoneAbort( );
                return;
            }
        }
        break;
 8005964:	e03f      	b.n	80059e6 <OnRadioRxDone+0x8f6>
                McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8005966:	4b03      	ldr	r3, [pc, #12]	; (8005974 <OnRadioRxDone+0x884>)
 8005968:	220c      	movs	r2, #12
 800596a:	705a      	strb	r2, [r3, #1]
                PrepareRxDoneAbort( );
 800596c:	f7ff fb9e 	bl	80050ac <PrepareRxDoneAbort>
                return;
 8005970:	e055      	b.n	8005a1e <OnRadioRxDone+0x92e>
 8005972:	bf00      	nop
 8005974:	200009d8 	.word	0x200009d8
 8005978:	200009b0 	.word	0x200009b0
 800597c:	2000035c 	.word	0x2000035c
 8005980:	20000364 	.word	0x20000364
 8005984:	20000361 	.word	0x20000361
 8005988:	20000354 	.word	0x20000354
 800598c:	20000a08 	.word	0x20000a08
 8005990:	20000363 	.word	0x20000363
 8005994:	20000250 	.word	0x20000250
        case FRAME_TYPE_PROPRIETARY: {
            memcpy1( LoRaMacRxPayload, &payload[pktHeaderLen], size );
 8005998:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	897a      	ldrh	r2, [r7, #10]
 80059a2:	4619      	mov	r1, r3
 80059a4:	481f      	ldr	r0, [pc, #124]	; (8005a24 <OnRadioRxDone+0x934>)
 80059a6:	f00a fecc 	bl	8010742 <memcpy1>

            McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80059aa:	4b1f      	ldr	r3, [pc, #124]	; (8005a28 <OnRadioRxDone+0x938>)
 80059ac:	2203      	movs	r2, #3
 80059ae:	701a      	strb	r2, [r3, #0]
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80059b0:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <OnRadioRxDone+0x938>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	705a      	strb	r2, [r3, #1]
            McpsIndication.Buffer = LoRaMacRxPayload;
 80059b6:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <OnRadioRxDone+0x938>)
 80059b8:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <OnRadioRxDone+0x934>)
 80059ba:	609a      	str	r2, [r3, #8]
            McpsIndication.BufferSize = size - pktHeaderLen;
 80059bc:	897b      	ldrh	r3, [r7, #10]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <OnRadioRxDone+0x938>)
 80059ca:	731a      	strb	r2, [r3, #12]

            LoRaMacFlags.Bits.McpsInd = 1;
 80059cc:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <OnRadioRxDone+0x93c>)
 80059ce:	7813      	ldrb	r3, [r2, #0]
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	7013      	strb	r3, [r2, #0]
            break;
 80059d6:	e006      	b.n	80059e6 <OnRadioRxDone+0x8f6>
        }
        default:
            McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <OnRadioRxDone+0x938>)
 80059da:	2201      	movs	r2, #1
 80059dc:	705a      	strb	r2, [r3, #1]
            PrepareRxDoneAbort( );
 80059de:	f7ff fb65 	bl	80050ac <PrepareRxDoneAbort>
            break;
 80059e2:	e000      	b.n	80059e6 <OnRadioRxDone+0x8f6>
            break;
 80059e4:	bf00      	nop
    }
    // Verify if we need to disable the AckTimeoutTimer
    CheckToDisableAckTimeout( NodeAckRequested, LoRaMacDeviceClass, McpsConfirm.AckReceived,
 80059e6:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <OnRadioRxDone+0x940>)
 80059e8:	7818      	ldrb	r0, [r3, #0]
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <OnRadioRxDone+0x944>)
 80059ec:	7819      	ldrb	r1, [r3, #0]
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <OnRadioRxDone+0x948>)
 80059f0:	791a      	ldrb	r2, [r3, #4]
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <OnRadioRxDone+0x94c>)
 80059f4:	781c      	ldrb	r4, [r3, #0]
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <OnRadioRxDone+0x950>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	4623      	mov	r3, r4
 80059fe:	f000 fc73 	bl	80062e8 <CheckToDisableAckTimeout>
                                AckTimeoutRetriesCounter, AckTimeoutRetries );
    if( AckTimeoutTimer.IsRunning == false )
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <OnRadioRxDone+0x954>)
 8005a04:	7a1b      	ldrb	r3, [r3, #8]
 8005a06:	f083 0301 	eor.w	r3, r3, #1
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <OnRadioRxDone+0x92e>
    {// Procedure is completed when the AckTimeoutTimer is not running anymore
    	LoRaMacFlags.Bits.MacDone = 1;
 8005a10:	4a06      	ldr	r2, [pc, #24]	; (8005a2c <OnRadioRxDone+0x93c>)
 8005a12:	7813      	ldrb	r3, [r2, #0]
 8005a14:	f043 0320 	orr.w	r3, r3, #32
 8005a18:	7013      	strb	r3, [r2, #0]
    	// Trig OnMacCheckTimerEvent call as soon as possible
    	OnMacStateCheckTimerEvent();
 8005a1a:	f000 f903 	bl	8005c24 <OnMacStateCheckTimerEvent>
    }
}
 8005a1e:	3764      	adds	r7, #100	; 0x64
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}
 8005a24:	20000250 	.word	0x20000250
 8005a28:	200009d8 	.word	0x200009d8
 8005a2c:	20000a08 	.word	0x20000a08
 8005a30:	20000360 	.word	0x20000360
 8005a34:	20000148 	.word	0x20000148
 8005a38:	200009b0 	.word	0x200009b0
 8005a3c:	2000000a 	.word	0x2000000a
 8005a40:	20000009 	.word	0x20000009
 8005a44:	20000ac0 	.word	0x20000ac0

08005a48 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
	DIO_PRINTF("TX Timeout\r\n");

    if( LoRaMacDeviceClass != CLASS_C )
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <OnRadioTxTimeout+0x34>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d003      	beq.n	8005a5c <OnRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <OnRadioTxTimeout+0x38>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4798      	blx	r3
 8005a5a:	e001      	b.n	8005a60 <OnRadioTxTimeout+0x18>
    }
    else
    {
        OpenContinuousRx2Window( );
 8005a5c:	f001 fc8a 	bl	8007374 <OpenContinuousRx2Window>
    }

    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8005a60:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <OnRadioTxTimeout+0x3c>)
 8005a62:	2202      	movs	r2, #2
 8005a64:	705a      	strb	r2, [r3, #1]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8005a66:	2002      	movs	r0, #2
 8005a68:	f003 fa6a 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>
    LoRaMacFlags.Bits.MacDone = 1;
 8005a6c:	4a06      	ldr	r2, [pc, #24]	; (8005a88 <OnRadioTxTimeout+0x40>)
 8005a6e:	7813      	ldrb	r3, [r2, #0]
 8005a70:	f043 0320 	orr.w	r3, r3, #32
 8005a74:	7013      	strb	r3, [r2, #0]
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000148 	.word	0x20000148
 8005a80:	080127d0 	.word	0x080127d0
 8005a84:	200009b0 	.word	0x200009b0
 8005a88:	20000a08 	.word	0x20000a08

08005a8c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
    bool classBRx = false;
 8005a92:	2300      	movs	r3, #0
 8005a94:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacDeviceClass != CLASS_C )
 8005a96:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <OnRadioRxError+0xa8>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d002      	beq.n	8005aa4 <OnRadioRxError+0x18>
    {
        Radio.Sleep( );
 8005a9e:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <OnRadioRxError+0xac>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4798      	blx	r3
    }

    if( classBRx == false )
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	f083 0301 	eor.w	r3, r3, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d037      	beq.n	8005b20 <OnRadioRxError+0x94>
    {
        if( RxSlot == RX_SLOT_WIN_1 )
 8005ab0:	4b22      	ldr	r3, [pc, #136]	; (8005b3c <OnRadioRxError+0xb0>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d120      	bne.n	8005afa <OnRadioRxError+0x6e>
        {
            if( NodeAckRequested == true )
 8005ab8:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <OnRadioRxError+0xb4>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <OnRadioRxError+0x3a>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 8005ac0:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <OnRadioRxError+0xb8>)
 8005ac2:	2205      	movs	r2, #5
 8005ac4:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR );
 8005ac6:	2005      	movs	r0, #5
 8005ac8:	f003 fa3a 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005acc:	4b19      	ldr	r3, [pc, #100]	; (8005b34 <OnRadioRxError+0xa8>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d025      	beq.n	8005b20 <OnRadioRxError+0x94>
            {
                if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8005ad4:	4b1c      	ldr	r3, [pc, #112]	; (8005b48 <OnRadioRxError+0xbc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f00a fd25 	bl	8010528 <TimerGetElapsedTime>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <OnRadioRxError+0xc0>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d31b      	bcc.n	8005b20 <OnRadioRxError+0x94>
                {
                    TimerStop( &RxWindowTimer2 );
 8005ae8:	4819      	ldr	r0, [pc, #100]	; (8005b50 <OnRadioRxError+0xc4>)
 8005aea:	f00a fc41 	bl	8010370 <TimerStop>
                    LoRaMacFlags.Bits.MacDone = 1;
 8005aee:	4a19      	ldr	r2, [pc, #100]	; (8005b54 <OnRadioRxError+0xc8>)
 8005af0:	7813      	ldrb	r3, [r2, #0]
 8005af2:	f043 0320 	orr.w	r3, r3, #32
 8005af6:	7013      	strb	r3, [r2, #0]
 8005af8:	e012      	b.n	8005b20 <OnRadioRxError+0x94>
                }
            }
        }
        else
        {
            if( NodeAckRequested == true )
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <OnRadioRxError+0xb4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <OnRadioRxError+0x7c>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 8005b02:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <OnRadioRxError+0xb8>)
 8005b04:	2206      	movs	r2, #6
 8005b06:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8005b08:	2006      	movs	r0, #6
 8005b0a:	f003 fa19 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <OnRadioRxError+0xa8>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d004      	beq.n	8005b20 <OnRadioRxError+0x94>
            {
                LoRaMacFlags.Bits.MacDone = 1;
 8005b16:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <OnRadioRxError+0xc8>)
 8005b18:	7813      	ldrb	r3, [r2, #0]
 8005b1a:	f043 0320 	orr.w	r3, r3, #32
 8005b1e:	7013      	strb	r3, [r2, #0]
            }
        }
    }

    if( LoRaMacDeviceClass == CLASS_C )
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <OnRadioRxError+0xa8>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d101      	bne.n	8005b2c <OnRadioRxError+0xa0>
    {
        OpenContinuousRx2Window( );
 8005b28:	f001 fc24 	bl	8007374 <OpenContinuousRx2Window>
    }
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000148 	.word	0x20000148
 8005b38:	080127d0 	.word	0x080127d0
 8005b3c:	20000a64 	.word	0x20000a64
 8005b40:	20000360 	.word	0x20000360
 8005b44:	200009b0 	.word	0x200009b0
 8005b48:	2000046c 	.word	0x2000046c
 8005b4c:	20000ae8 	.word	0x20000ae8
 8005b50:	20000998 	.word	0x20000998
 8005b54:	20000a08 	.word	0x20000a08

08005b58 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
    bool classBRx = false;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	71fb      	strb	r3, [r7, #7]

    if( LoRaMacDeviceClass != CLASS_C )
 8005b62:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <OnRadioRxTimeout+0xa8>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d002      	beq.n	8005b70 <OnRadioRxTimeout+0x18>
    {
        Radio.Sleep( );
 8005b6a:	4b26      	ldr	r3, [pc, #152]	; (8005c04 <OnRadioRxTimeout+0xac>)
 8005b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6e:	4798      	blx	r3
    }

    if( classBRx == false )
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	f083 0301 	eor.w	r3, r3, #1
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d037      	beq.n	8005bec <OnRadioRxTimeout+0x94>
    {
        if( RxSlot == RX_SLOT_WIN_1 )
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <OnRadioRxTimeout+0xb0>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d120      	bne.n	8005bc6 <OnRadioRxTimeout+0x6e>
        {
            if( NodeAckRequested == true )
 8005b84:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <OnRadioRxTimeout+0xb4>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <OnRadioRxTimeout+0x3a>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <OnRadioRxTimeout+0xb8>)
 8005b8e:	2203      	movs	r2, #3
 8005b90:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT );
 8005b92:	2003      	movs	r0, #3
 8005b94:	f003 f9d4 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <OnRadioRxTimeout+0xa8>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d025      	beq.n	8005bec <OnRadioRxTimeout+0x94>
            {
                if( TimerGetElapsedTime( AggregatedLastTxDoneTime ) >= RxWindow2Delay )
 8005ba0:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <OnRadioRxTimeout+0xbc>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f00a fcbf 	bl	8010528 <TimerGetElapsedTime>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <OnRadioRxTimeout+0xc0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d31b      	bcc.n	8005bec <OnRadioRxTimeout+0x94>
                {
                    TimerStop( &RxWindowTimer2 );
 8005bb4:	4819      	ldr	r0, [pc, #100]	; (8005c1c <OnRadioRxTimeout+0xc4>)
 8005bb6:	f00a fbdb 	bl	8010370 <TimerStop>
                    LoRaMacFlags.Bits.MacDone = 1;
 8005bba:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <OnRadioRxTimeout+0xc8>)
 8005bbc:	7813      	ldrb	r3, [r2, #0]
 8005bbe:	f043 0320 	orr.w	r3, r3, #32
 8005bc2:	7013      	strb	r3, [r2, #0]
 8005bc4:	e012      	b.n	8005bec <OnRadioRxTimeout+0x94>
                }
            }
        }
        else
        {
            if( NodeAckRequested == true )
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <OnRadioRxTimeout+0xb4>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <OnRadioRxTimeout+0x7c>
            {
                McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <OnRadioRxTimeout+0xb8>)
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	705a      	strb	r2, [r3, #1]
            }
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8005bd4:	2004      	movs	r0, #4
 8005bd6:	f003 f9b3 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>

            if( LoRaMacDeviceClass != CLASS_C )
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <OnRadioRxTimeout+0xa8>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d004      	beq.n	8005bec <OnRadioRxTimeout+0x94>
            {
                LoRaMacFlags.Bits.MacDone = 1;
 8005be2:	4a0f      	ldr	r2, [pc, #60]	; (8005c20 <OnRadioRxTimeout+0xc8>)
 8005be4:	7813      	ldrb	r3, [r2, #0]
 8005be6:	f043 0320 	orr.w	r3, r3, #32
 8005bea:	7013      	strb	r3, [r2, #0]
            }
        }
    }

    if( LoRaMacDeviceClass == CLASS_C )
 8005bec:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <OnRadioRxTimeout+0xa8>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d101      	bne.n	8005bf8 <OnRadioRxTimeout+0xa0>
    {
        OpenContinuousRx2Window( );
 8005bf4:	f001 fbbe 	bl	8007374 <OpenContinuousRx2Window>
    }
}
 8005bf8:	bf00      	nop
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000148 	.word	0x20000148
 8005c04:	080127d0 	.word	0x080127d0
 8005c08:	20000a64 	.word	0x20000a64
 8005c0c:	20000360 	.word	0x20000360
 8005c10:	200009b0 	.word	0x200009b0
 8005c14:	2000046c 	.word	0x2000046c
 8005c18:	20000ae8 	.word	0x20000ae8
 8005c1c:	20000998 	.word	0x20000998
 8005c20:	20000a08 	.word	0x20000a08

08005c24 <OnMacStateCheckTimerEvent>:


static void OnMacStateCheckTimerEvent( void )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
//	lora_printf("OnMacStateCheckTimerEvent\r\n");
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    bool noTx = false;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

    TimerStop( &MacStateCheckTimer );
 8005c2e:	486b      	ldr	r0, [pc, #428]	; (8005ddc <OnMacStateCheckTimerEvent+0x1b8>)
 8005c30:	f00a fb9e 	bl	8010370 <TimerStop>

    if ( LoRaMacFlags.Bits.MacDone == 1 ) {
 8005c34:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 81b7 	beq.w	8005fb2 <OnMacStateCheckTimerEvent+0x38e>
        if ( ( LoRaMacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT ) {
 8005c44:	4b67      	ldr	r3, [pc, #412]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00b      	beq.n	8005c68 <OnMacStateCheckTimerEvent+0x44>
            LoRaMacState &= ~LORAMAC_RX_ABORT;
 8005c50:	4b64      	ldr	r3, [pc, #400]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c58:	4a62      	ldr	r2, [pc, #392]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c5a:	6013      	str	r3, [r2, #0]
            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005c5c:	4b61      	ldr	r3, [pc, #388]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	4a5f      	ldr	r2, [pc, #380]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005c66:	6013      	str	r3, [r2, #0]
        }

        if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) ) {
 8005c68:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <OnMacStateCheckTimerEvent+0x60>
 8005c76:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d022      	beq.n	8005cca <OnMacStateCheckTimerEvent+0xa6>
            // Get a status of any request and check if we have a TX timeout
            MlmeConfirm.Status = LoRaMacConfirmQueueGetStatusCmn( );
 8005c84:	f003 f98e 	bl	8008fa4 <LoRaMacConfirmQueueGetStatusCmn>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	4b56      	ldr	r3, [pc, #344]	; (8005de8 <OnMacStateCheckTimerEvent+0x1c4>)
 8005c8e:	705a      	strb	r2, [r3, #1]
            if ( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8005c90:	4b56      	ldr	r3, [pc, #344]	; (8005dec <OnMacStateCheckTimerEvent+0x1c8>)
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d003      	beq.n	8005ca0 <OnMacStateCheckTimerEvent+0x7c>
                 ( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ) {
 8005c98:	4b53      	ldr	r3, [pc, #332]	; (8005de8 <OnMacStateCheckTimerEvent+0x1c4>)
 8005c9a:	785b      	ldrb	r3, [r3, #1]
            if ( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d114      	bne.n	8005cca <OnMacStateCheckTimerEvent+0xa6>
                // Stop transmit cycle due to tx timeout.
                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005ca0:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	4a4e      	ldr	r2, [pc, #312]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005caa:	6013      	str	r3, [r2, #0]
                MacCommandsBufferIndex = 0;
 8005cac:	4b50      	ldr	r3, [pc, #320]	; (8005df0 <OnMacStateCheckTimerEvent+0x1cc>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005cb2:	4b50      	ldr	r3, [pc, #320]	; (8005df4 <OnMacStateCheckTimerEvent+0x1d0>)
 8005cb4:	781a      	ldrb	r2, [r3, #0]
 8005cb6:	4b4d      	ldr	r3, [pc, #308]	; (8005dec <OnMacStateCheckTimerEvent+0x1c8>)
 8005cb8:	715a      	strb	r2, [r3, #5]
                McpsConfirm.AckReceived = false;
 8005cba:	4b4c      	ldr	r3, [pc, #304]	; (8005dec <OnMacStateCheckTimerEvent+0x1c8>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	711a      	strb	r2, [r3, #4]
                McpsConfirm.TxTimeOnAir = 0;
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <OnMacStateCheckTimerEvent+0x1c8>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	609a      	str	r2, [r3, #8]
                noTx = true;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
            }
        }

        if ( ( NodeAckRequested == false ) && ( noTx == false ) ) {
 8005cca:	4b4b      	ldr	r3, [pc, #300]	; (8005df8 <OnMacStateCheckTimerEvent+0x1d4>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	f083 0301 	eor.w	r3, r3, #1
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80a6 	beq.w	8005e26 <OnMacStateCheckTimerEvent+0x202>
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	f083 0301 	eor.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 809f 	beq.w	8005e26 <OnMacStateCheckTimerEvent+0x202>
            if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) ) {
 8005ce8:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d107      	bne.n	8005d06 <OnMacStateCheckTimerEvent+0xe2>
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8090 	beq.w	8005e26 <OnMacStateCheckTimerEvent+0x202>
                if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d02f      	beq.n	8005d74 <OnMacStateCheckTimerEvent+0x150>
 8005d14:	4b34      	ldr	r3, [pc, #208]	; (8005de8 <OnMacStateCheckTimerEvent+0x1c4>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d12b      	bne.n	8005d74 <OnMacStateCheckTimerEvent+0x150>
                    // Procedure for the join request
                    MlmeConfirm.NbRetries = JoinRequestTrials;
 8005d1c:	4b37      	ldr	r3, [pc, #220]	; (8005dfc <OnMacStateCheckTimerEvent+0x1d8>)
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	4b31      	ldr	r3, [pc, #196]	; (8005de8 <OnMacStateCheckTimerEvent+0x1c4>)
 8005d22:	729a      	strb	r2, [r3, #10]

                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005d24:	2000      	movs	r0, #0
 8005d26:	f003 f8e5 	bl	8008ef4 <LoRaMacConfirmQueueGetStatus>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10c      	bne.n	8005d4a <OnMacStateCheckTimerEvent+0x126>
                        // Node joined successfully
                        UpLinkCounter = 0;
 8005d30:	4b33      	ldr	r3, [pc, #204]	; (8005e00 <OnMacStateCheckTimerEvent+0x1dc>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
                        ChannelsNbRepCounter = 0;
 8005d36:	4b33      	ldr	r3, [pc, #204]	; (8005e04 <OnMacStateCheckTimerEvent+0x1e0>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005d3c:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005d46:	6013      	str	r3, [r2, #0]
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005d48:	e06d      	b.n	8005e26 <OnMacStateCheckTimerEvent+0x202>
                    } else {
                        if ( JoinRequestTrials >= MaxJoinRequestTrials ) {
 8005d4a:	4b2c      	ldr	r3, [pc, #176]	; (8005dfc <OnMacStateCheckTimerEvent+0x1d8>)
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	4b2e      	ldr	r3, [pc, #184]	; (8005e08 <OnMacStateCheckTimerEvent+0x1e4>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d306      	bcc.n	8005d64 <OnMacStateCheckTimerEvent+0x140>
                            LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005d60:	6013      	str	r3, [r2, #0]
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005d62:	e060      	b.n	8005e26 <OnMacStateCheckTimerEvent+0x202>
                        } else {
                            LoRaMacFlags.Bits.MacDone = 0;
 8005d64:	4a1e      	ldr	r2, [pc, #120]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005d66:	7813      	ldrb	r3, [r2, #0]
 8005d68:	f36f 1345 	bfc	r3, #5, #1
 8005d6c:	7013      	strb	r3, [r2, #0]
                            // Sends the same frame again
                            OnTxDelayedTimerEvent( );
 8005d6e:	f000 f9c9 	bl	8006104 <OnTxDelayedTimerEvent>
                    if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK ) {
 8005d72:	e058      	b.n	8005e26 <OnMacStateCheckTimerEvent+0x202>
                        }
                    }
                } else {
                    // Procedure for all other frames
                    if ( ( ChannelsNbRepCounter >= LoRaMacParams.ChannelsNbRep ) || ( LoRaMacFlags.Bits.McpsInd == 1 ) ) {
 8005d74:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <OnMacStateCheckTimerEvent+0x1e8>)
 8005d76:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005d7a:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <OnMacStateCheckTimerEvent+0x1e0>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d906      	bls.n	8005d90 <OnMacStateCheckTimerEvent+0x16c>
 8005d82:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d043      	beq.n	8005e18 <OnMacStateCheckTimerEvent+0x1f4>
                        if ( LoRaMacFlags.Bits.McpsInd == 0 ) {
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <OnMacStateCheckTimerEvent+0x1bc>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <OnMacStateCheckTimerEvent+0x18a>
                            // Maximum repetitions without downlink. Reset MacCommandsBufferIndex. Increase ADR Ack counter.
                            // Only process the case when the MAC did not receive a downlink.
                            MacCommandsBufferIndex = 0;
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <OnMacStateCheckTimerEvent+0x1cc>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
                            AdrAckCounter++;
 8005da4:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <OnMacStateCheckTimerEvent+0x1ec>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	4a19      	ldr	r2, [pc, #100]	; (8005e10 <OnMacStateCheckTimerEvent+0x1ec>)
 8005dac:	6013      	str	r3, [r2, #0]
                        }

                        ChannelsNbRepCounter = 0;
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <OnMacStateCheckTimerEvent+0x1e0>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]

                        if ( IsUpLinkCounterFixed == false ) {
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <OnMacStateCheckTimerEvent+0x1f0>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f083 0301 	eor.w	r3, r3, #1
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d004      	beq.n	8005dcc <OnMacStateCheckTimerEvent+0x1a8>
                            UpLinkCounter++;
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <OnMacStateCheckTimerEvent+0x1dc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <OnMacStateCheckTimerEvent+0x1dc>)
 8005dca:	6013      	str	r3, [r2, #0]
                        }

                        LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f023 0301 	bic.w	r3, r3, #1
 8005dd4:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <OnMacStateCheckTimerEvent+0x1c0>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e025      	b.n	8005e26 <OnMacStateCheckTimerEvent+0x202>
 8005dda:	bf00      	nop
 8005ddc:	20000480 	.word	0x20000480
 8005de0:	20000a08 	.word	0x20000a08
 8005de4:	2000047c 	.word	0x2000047c
 8005de8:	20000984 	.word	0x20000984
 8005dec:	200009b0 	.word	0x200009b0
 8005df0:	20000363 	.word	0x20000363
 8005df4:	2000000a 	.word	0x2000000a
 8005df8:	20000360 	.word	0x20000360
 8005dfc:	20000a04 	.word	0x20000a04
 8005e00:	20000350 	.word	0x20000350
 8005e04:	20000468 	.word	0x20000468
 8005e08:	200009ac 	.word	0x200009ac
 8005e0c:	20000a68 	.word	0x20000a68
 8005e10:	2000035c 	.word	0x2000035c
 8005e14:	20000358 	.word	0x20000358
                    } else {
                        LoRaMacFlags.Bits.MacDone = 0;
 8005e18:	4aa8      	ldr	r2, [pc, #672]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005e1a:	7813      	ldrb	r3, [r2, #0]
 8005e1c:	f36f 1345 	bfc	r3, #5, #1
 8005e20:	7013      	strb	r3, [r2, #0]
                        // Sends the same frame again
                        OnTxDelayedTimerEvent( );
 8005e22:	f000 f96f 	bl	8006104 <OnTxDelayedTimerEvent>
                    }
                }
            }
        }

        if ( LoRaMacFlags.Bits.McpsInd == 1 ) {
 8005e26:	4ba5      	ldr	r3, [pc, #660]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d025      	beq.n	8005e80 <OnMacStateCheckTimerEvent+0x25c>
            // Procedure if we received a frame
            if ( ( McpsConfirm.AckReceived == true ) || ( AckTimeoutRetriesCounter > AckTimeoutRetries ) ) {
 8005e34:	4ba2      	ldr	r3, [pc, #648]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005e36:	791b      	ldrb	r3, [r3, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <OnMacStateCheckTimerEvent+0x224>
 8005e3c:	4ba1      	ldr	r3, [pc, #644]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	4ba1      	ldr	r3, [pc, #644]	; (80060c8 <OnMacStateCheckTimerEvent+0x4a4>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d91b      	bls.n	8005e80 <OnMacStateCheckTimerEvent+0x25c>
                AckTimeoutRetry = false;
 8005e48:	4ba0      	ldr	r3, [pc, #640]	; (80060cc <OnMacStateCheckTimerEvent+0x4a8>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 8005e4e:	4ba0      	ldr	r3, [pc, #640]	; (80060d0 <OnMacStateCheckTimerEvent+0x4ac>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
                if ( IsUpLinkCounterFixed == false ) {
 8005e54:	4b9f      	ldr	r3, [pc, #636]	; (80060d4 <OnMacStateCheckTimerEvent+0x4b0>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f083 0301 	eor.w	r3, r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <OnMacStateCheckTimerEvent+0x248>
                    UpLinkCounter++;
 8005e62:	4b9d      	ldr	r3, [pc, #628]	; (80060d8 <OnMacStateCheckTimerEvent+0x4b4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a9b      	ldr	r2, [pc, #620]	; (80060d8 <OnMacStateCheckTimerEvent+0x4b4>)
 8005e6a:	6013      	str	r3, [r2, #0]
                }
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005e6c:	4b95      	ldr	r3, [pc, #596]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005e6e:	781a      	ldrb	r2, [r3, #0]
 8005e70:	4b93      	ldr	r3, [pc, #588]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005e72:	715a      	strb	r2, [r3, #5]

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005e74:	4b99      	ldr	r3, [pc, #612]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	4a97      	ldr	r2, [pc, #604]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005e7e:	6013      	str	r3, [r2, #0]
            }
        }

        if ( ( AckTimeoutRetry == true ) && ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == 0 ) ) {
 8005e80:	4b92      	ldr	r3, [pc, #584]	; (80060cc <OnMacStateCheckTimerEvent+0x4a8>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8094 	beq.w	8005fb2 <OnMacStateCheckTimerEvent+0x38e>
 8005e8a:	4b94      	ldr	r3, [pc, #592]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 808d 	bne.w	8005fb2 <OnMacStateCheckTimerEvent+0x38e>
            // Retransmissions procedure for confirmed uplinks
            AckTimeoutRetry = false;
 8005e98:	4b8c      	ldr	r3, [pc, #560]	; (80060cc <OnMacStateCheckTimerEvent+0x4a8>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	701a      	strb	r2, [r3, #0]
            if ( ( AckTimeoutRetriesCounter < AckTimeoutRetries ) && ( AckTimeoutRetriesCounter <= MAX_ACK_RETRIES ) ) {
 8005e9e:	4b89      	ldr	r3, [pc, #548]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	4b89      	ldr	r3, [pc, #548]	; (80060c8 <OnMacStateCheckTimerEvent+0x4a4>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d25c      	bcs.n	8005f64 <OnMacStateCheckTimerEvent+0x340>
 8005eaa:	4b86      	ldr	r3, [pc, #536]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b08      	cmp	r3, #8
 8005eb0:	d858      	bhi.n	8005f64 <OnMacStateCheckTimerEvent+0x340>
                AckTimeoutRetriesCounter++;
 8005eb2:	4b84      	ldr	r3, [pc, #528]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4b82      	ldr	r3, [pc, #520]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005ebc:	701a      	strb	r2, [r3, #0]

                if ( ( AckTimeoutRetriesCounter % 2 ) == 1 ) {
 8005ebe:	4b81      	ldr	r3, [pc, #516]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <OnMacStateCheckTimerEvent+0x2d8>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8005ecc:	231e      	movs	r3, #30
 8005ece:	723b      	strb	r3, [r7, #8]
                    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8005ed0:	4b83      	ldr	r3, [pc, #524]	; (80060e0 <OnMacStateCheckTimerEvent+0x4bc>)
 8005ed2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ed6:	72bb      	strb	r3, [r7, #10]
                    getPhy.Datarate = LoRaMacParams.ChannelsDatarate;
 8005ed8:	4b81      	ldr	r3, [pc, #516]	; (80060e0 <OnMacStateCheckTimerEvent+0x4bc>)
 8005eda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005ede:	727b      	strb	r3, [r7, #9]
                    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8005ee0:	4b80      	ldr	r3, [pc, #512]	; (80060e4 <OnMacStateCheckTimerEvent+0x4c0>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f107 0208 	add.w	r2, r7, #8
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f003 fe88 	bl	8009c00 <RegionGetPhyParam>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	607b      	str	r3, [r7, #4]
                    LoRaMacParams.ChannelsDatarate = phyParam.Value;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	b25a      	sxtb	r2, r3
 8005ef8:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <OnMacStateCheckTimerEvent+0x4bc>)
 8005efa:	705a      	strb	r2, [r3, #1]
                }
                // Try to send the frame again
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005efc:	f001 f864 	bl	8006fc8 <ScheduleTx>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d105      	bne.n	8005f12 <OnMacStateCheckTimerEvent+0x2ee>
                    LoRaMacFlags.Bits.MacDone = 0;
 8005f06:	4a6d      	ldr	r2, [pc, #436]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005f08:	7813      	ldrb	r3, [r2, #0]
 8005f0a:	f36f 1345 	bfc	r3, #5, #1
 8005f0e:	7013      	strb	r3, [r2, #0]
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005f10:	e04e      	b.n	8005fb0 <OnMacStateCheckTimerEvent+0x38c>
                } else {
                    // The DR is not applicable for the payload size
                    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8005f12:	4b6b      	ldr	r3, [pc, #428]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005f14:	2209      	movs	r2, #9
 8005f16:	705a      	strb	r2, [r3, #1]

                    MacCommandsBufferIndex = 0;
 8005f18:	4b73      	ldr	r3, [pc, #460]	; (80060e8 <OnMacStateCheckTimerEvent+0x4c4>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
                    LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005f1e:	4b6f      	ldr	r3, [pc, #444]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	4a6d      	ldr	r2, [pc, #436]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005f28:	6013      	str	r3, [r2, #0]
                    NodeAckRequested = false;
 8005f2a:	4b69      	ldr	r3, [pc, #420]	; (80060d0 <OnMacStateCheckTimerEvent+0x4ac>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
                    McpsConfirm.AckReceived = false;
 8005f30:	4b63      	ldr	r3, [pc, #396]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	711a      	strb	r2, [r3, #4]
                    McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005f36:	4b63      	ldr	r3, [pc, #396]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	4b61      	ldr	r3, [pc, #388]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005f3c:	715a      	strb	r2, [r3, #5]
                    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 8005f3e:	4b68      	ldr	r3, [pc, #416]	; (80060e0 <OnMacStateCheckTimerEvent+0x4bc>)
 8005f40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	4b5e      	ldr	r3, [pc, #376]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005f48:	709a      	strb	r2, [r3, #2]
                    if ( IsUpLinkCounterFixed == false ) {
 8005f4a:	4b62      	ldr	r3, [pc, #392]	; (80060d4 <OnMacStateCheckTimerEvent+0x4b0>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f083 0301 	eor.w	r3, r3, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02b      	beq.n	8005fb0 <OnMacStateCheckTimerEvent+0x38c>
                        UpLinkCounter++;
 8005f58:	4b5f      	ldr	r3, [pc, #380]	; (80060d8 <OnMacStateCheckTimerEvent+0x4b4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a5e      	ldr	r2, [pc, #376]	; (80060d8 <OnMacStateCheckTimerEvent+0x4b4>)
 8005f60:	6013      	str	r3, [r2, #0]
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005f62:	e025      	b.n	8005fb0 <OnMacStateCheckTimerEvent+0x38c>
                    }
                }
            } else {
                RegionInitDefaults( LoRaMacRegion, INIT_TYPE_RESTORE );
 8005f64:	4b5f      	ldr	r3, [pc, #380]	; (80060e4 <OnMacStateCheckTimerEvent+0x4c0>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f003 fe72 	bl	8009c54 <RegionInitDefaults>

                LoRaMacState &= ~LORAMAC_TX_RUNNING;
 8005f70:	4b5a      	ldr	r3, [pc, #360]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	4a58      	ldr	r2, [pc, #352]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005f7a:	6013      	str	r3, [r2, #0]

                MacCommandsBufferIndex = 0;
 8005f7c:	4b5a      	ldr	r3, [pc, #360]	; (80060e8 <OnMacStateCheckTimerEvent+0x4c4>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
                NodeAckRequested = false;
 8005f82:	4b53      	ldr	r3, [pc, #332]	; (80060d0 <OnMacStateCheckTimerEvent+0x4ac>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	701a      	strb	r2, [r3, #0]
                McpsConfirm.AckReceived = false;
 8005f88:	4b4d      	ldr	r3, [pc, #308]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	711a      	strb	r2, [r3, #4]
                McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 8005f8e:	4b4d      	ldr	r3, [pc, #308]	; (80060c4 <OnMacStateCheckTimerEvent+0x4a0>)
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	4b4b      	ldr	r3, [pc, #300]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005f94:	715a      	strb	r2, [r3, #5]
                if ( IsUpLinkCounterFixed == false ) {
 8005f96:	4b4f      	ldr	r3, [pc, #316]	; (80060d4 <OnMacStateCheckTimerEvent+0x4b0>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	f083 0301 	eor.w	r3, r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <OnMacStateCheckTimerEvent+0x38e>
                    UpLinkCounter++;
 8005fa4:	4b4c      	ldr	r3, [pc, #304]	; (80060d8 <OnMacStateCheckTimerEvent+0x4b4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	4a4b      	ldr	r2, [pc, #300]	; (80060d8 <OnMacStateCheckTimerEvent+0x4b4>)
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e000      	b.n	8005fb2 <OnMacStateCheckTimerEvent+0x38e>
                if ( ScheduleTx( ) == LORAMAC_STATUS_OK ) {
 8005fb0:	bf00      	nop
            }
        }
    }

    // Handle events
    if( LoRaMacState == LORAMAC_IDLE )
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	; (80060dc <OnMacStateCheckTimerEvent+0x4b8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d151      	bne.n	800605e <OnMacStateCheckTimerEvent+0x43a>
    {
        if( LoRaMacFlags.Bits.McpsReq == 1 )
 8005fba:	4b40      	ldr	r3, [pc, #256]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <OnMacStateCheckTimerEvent+0x3b8>
        {
            LoRaMacFlags.Bits.McpsReq = 0;
 8005fc8:	4a3c      	ldr	r2, [pc, #240]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005fca:	7813      	ldrb	r3, [r2, #0]
 8005fcc:	f36f 0300 	bfc	r3, #0, #1
 8005fd0:	7013      	strb	r3, [r2, #0]
            LoRaMacPrimitives->MacMcpsConfirm( &McpsConfirm );
 8005fd2:	4b46      	ldr	r3, [pc, #280]	; (80060ec <OnMacStateCheckTimerEvent+0x4c8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4839      	ldr	r0, [pc, #228]	; (80060c0 <OnMacStateCheckTimerEvent+0x49c>)
 8005fda:	4798      	blx	r3
        }

        if( LoRaMacFlags.Bits.MlmeReq == 1 )
 8005fdc:	4b37      	ldr	r3, [pc, #220]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d011      	beq.n	800600e <OnMacStateCheckTimerEvent+0x3ea>
        {
            LoRaMacFlags.Bits.MlmeReq = 0;
 8005fea:	4a34      	ldr	r2, [pc, #208]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8005fec:	7813      	ldrb	r3, [r2, #0]
 8005fee:	f36f 03c3 	bfc	r3, #3, #1
 8005ff2:	7013      	strb	r3, [r2, #0]
            LoRaMacConfirmQueueHandleCb( &MlmeConfirm );
 8005ff4:	483e      	ldr	r0, [pc, #248]	; (80060f0 <OnMacStateCheckTimerEvent+0x4cc>)
 8005ff6:	f002 fffb 	bl	8008ff0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8005ffa:	f003 f847 	bl	800908c <LoRaMacConfirmQueueGetCnt>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <OnMacStateCheckTimerEvent+0x3ea>
            {
                LoRaMacFlags.Bits.MlmeReq = 1;
 8006004:	4a2d      	ldr	r2, [pc, #180]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8006006:	7813      	ldrb	r3, [r2, #0]
 8006008:	f043 0308 	orr.w	r3, r3, #8
 800600c:	7013      	strb	r3, [r2, #0]
            }
        }

        // Handle MLME indication
        if( LoRaMacFlags.Bits.MlmeInd == 1 )
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <OnMacStateCheckTimerEvent+0x40c>
        {
            LoRaMacPrimitives->MacMlmeIndication( &MlmeIndication );
 800601c:	4b33      	ldr	r3, [pc, #204]	; (80060ec <OnMacStateCheckTimerEvent+0x4c8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4834      	ldr	r0, [pc, #208]	; (80060f4 <OnMacStateCheckTimerEvent+0x4d0>)
 8006024:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeInd = 0;
 8006026:	4a25      	ldr	r2, [pc, #148]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8006028:	7813      	ldrb	r3, [r2, #0]
 800602a:	f36f 1304 	bfc	r3, #4, #1
 800602e:	7013      	strb	r3, [r2, #0]
        }
        // Verify if sticky MAC commands are pending or not
        if( IsStickyMacCommandPending( ) == true )
 8006030:	f000 fa6c 	bl	800650c <IsStickyMacCommandPending>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00b      	beq.n	8006052 <OnMacStateCheckTimerEvent+0x42e>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800603a:	f000 fa77 	bl	800652c <SetMlmeScheduleUplinkIndication>
            LoRaMacPrimitives->MacMlmeIndication( &MlmeIndication );
 800603e:	4b2b      	ldr	r3, [pc, #172]	; (80060ec <OnMacStateCheckTimerEvent+0x4c8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	482b      	ldr	r0, [pc, #172]	; (80060f4 <OnMacStateCheckTimerEvent+0x4d0>)
 8006046:	4798      	blx	r3
            LoRaMacFlags.Bits.MlmeInd = 0;
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 800604a:	7813      	ldrb	r3, [r2, #0]
 800604c:	f36f 1304 	bfc	r3, #4, #1
 8006050:	7013      	strb	r3, [r2, #0]
        }

        // Procedure done. Reset variables.
        LoRaMacFlags.Bits.MacDone = 0;
 8006052:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8006054:	7813      	ldrb	r3, [r2, #0]
 8006056:	f36f 1345 	bfc	r3, #5, #1
 800605a:	7013      	strb	r3, [r2, #0]
 800605c:	e007      	b.n	800606e <OnMacStateCheckTimerEvent+0x44a>

    }
    else
    {
        // Operation not finished restart timer
        TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 800605e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006062:	4825      	ldr	r0, [pc, #148]	; (80060f8 <OnMacStateCheckTimerEvent+0x4d4>)
 8006064:	f00a fa40 	bl	80104e8 <TimerSetValue>
        TimerStart( &MacStateCheckTimer );
 8006068:	4823      	ldr	r0, [pc, #140]	; (80060f8 <OnMacStateCheckTimerEvent+0x4d4>)
 800606a:	f00a f839 	bl	80100e0 <TimerStart>
    }

    // Handle MCPS indication
    if( LoRaMacFlags.Bits.McpsInd == 1 )
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <OnMacStateCheckTimerEvent+0x490>
    {
        LoRaMacFlags.Bits.McpsInd = 0;
 800607c:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 800607e:	7813      	ldrb	r3, [r2, #0]
 8006080:	f36f 0341 	bfc	r3, #1, #1
 8006084:	7013      	strb	r3, [r2, #0]
        if( LoRaMacDeviceClass == CLASS_C )
 8006086:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <OnMacStateCheckTimerEvent+0x4d8>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d101      	bne.n	8006092 <OnMacStateCheckTimerEvent+0x46e>
        {// Activate RX2 window for Class C
            OpenContinuousRx2Window( );
 800608e:	f001 f971 	bl	8007374 <OpenContinuousRx2Window>
        }
        if( LoRaMacFlags.Bits.McpsIndSkip == 0 )
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <OnMacStateCheckTimerEvent+0x486>
        {
            LoRaMacPrimitives->MacMcpsIndication( &McpsIndication );
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <OnMacStateCheckTimerEvent+0x4c8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4816      	ldr	r0, [pc, #88]	; (8006100 <OnMacStateCheckTimerEvent+0x4dc>)
 80060a8:	4798      	blx	r3
        }
        LoRaMacFlags.Bits.McpsIndSkip = 0;
 80060aa:	4a04      	ldr	r2, [pc, #16]	; (80060bc <OnMacStateCheckTimerEvent+0x498>)
 80060ac:	7813      	ldrb	r3, [r2, #0]
 80060ae:	f36f 0382 	bfc	r3, #2, #1
 80060b2:	7013      	strb	r3, [r2, #0]
    }

}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20000a08 	.word	0x20000a08
 80060c0:	200009b0 	.word	0x200009b0
 80060c4:	2000000a 	.word	0x2000000a
 80060c8:	20000009 	.word	0x20000009
 80060cc:	200004b8 	.word	0x200004b8
 80060d0:	20000360 	.word	0x20000360
 80060d4:	20000358 	.word	0x20000358
 80060d8:	20000350 	.word	0x20000350
 80060dc:	2000047c 	.word	0x2000047c
 80060e0:	20000a68 	.word	0x20000a68
 80060e4:	20000110 	.word	0x20000110
 80060e8:	20000363 	.word	0x20000363
 80060ec:	20000494 	.word	0x20000494
 80060f0:	20000984 	.word	0x20000984
 80060f4:	20000aa4 	.word	0x20000aa4
 80060f8:	20000480 	.word	0x20000480
 80060fc:	20000148 	.word	0x20000148
 8006100:	200009d8 	.word	0x200009d8

08006104 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    LoRaMacFrameCtrl_t fCtrl;
    AlternateDrParams_t altDr;

    TimerStop( &TxDelayedTimer );
 800610a:	4822      	ldr	r0, [pc, #136]	; (8006194 <OnTxDelayedTimerEvent+0x90>)
 800610c:	f00a f930 	bl	8010370 <TimerStop>
    LoRaMacState &= ~LORAMAC_TX_DELAYED;
 8006110:	4b21      	ldr	r3, [pc, #132]	; (8006198 <OnTxDelayedTimerEvent+0x94>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f023 0310 	bic.w	r3, r3, #16
 8006118:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <OnTxDelayedTimerEvent+0x94>)
 800611a:	6013      	str	r3, [r2, #0]

    if ( ( LoRaMacFlags.Bits.MlmeReq == 1 ) && ( MlmeConfirm.MlmeRequest == MLME_JOIN ) ) {
 800611c:	4b1f      	ldr	r3, [pc, #124]	; (800619c <OnTxDelayedTimerEvent+0x98>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d02e      	beq.n	8006188 <OnTxDelayedTimerEvent+0x84>
 800612a:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <OnTxDelayedTimerEvent+0x9c>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d12a      	bne.n	8006188 <OnTxDelayedTimerEvent+0x84>
        ResetMacParameters( );
 8006132:	f001 f86b 	bl	800720c <ResetMacParameters>

        altDr.NbTrials = JoinRequestTrials + 1;
 8006136:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <OnTxDelayedTimerEvent+0xa0>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	3301      	adds	r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	80bb      	strh	r3, [r7, #4]

        LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <OnTxDelayedTimerEvent+0xa4>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	1d3a      	adds	r2, r7, #4
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f003 fe97 	bl	8009e7e <RegionAlternateDr>
 8006150:	4603      	mov	r3, r0
 8006152:	461a      	mov	r2, r3
 8006154:	4b15      	ldr	r3, [pc, #84]	; (80061ac <OnTxDelayedTimerEvent+0xa8>)
 8006156:	705a      	strb	r2, [r3, #1]

        macHdr.Value = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	733b      	strb	r3, [r7, #12]
        macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800615c:	7b3b      	ldrb	r3, [r7, #12]
 800615e:	f36f 1347 	bfc	r3, #5, #3
 8006162:	733b      	strb	r3, [r7, #12]

        fCtrl.Value = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	723b      	strb	r3, [r7, #8]
        fCtrl.Bits.Adr = AdrCtrlOn;
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <OnTxDelayedTimerEvent+0xac>)
 800616a:	781a      	ldrb	r2, [r3, #0]
 800616c:	7a3b      	ldrb	r3, [r7, #8]
 800616e:	f362 13c7 	bfi	r3, r2, #7, #1
 8006172:	723b      	strb	r3, [r7, #8]

        /* In case of join request retransmissions, the stack must prepare
         * the frame again, because the network server keeps track of the random
         * LoRaMacDevNonce values to prevent reply attacks. */
        PrepareFrame( &macHdr, &fCtrl, 0, NULL, 0 );
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	f107 000c 	add.w	r0, r7, #12
 800617c:	2300      	movs	r3, #0
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	2200      	movs	r2, #0
 8006184:	f001 f902 	bl	800738c <PrepareFrame>
    }

    ScheduleTx( );
 8006188:	f000 ff1e 	bl	8006fc8 <ScheduleTx>
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20000a4c 	.word	0x20000a4c
 8006198:	2000047c 	.word	0x2000047c
 800619c:	20000a08 	.word	0x20000a08
 80061a0:	20000984 	.word	0x20000984
 80061a4:	20000a04 	.word	0x20000a04
 80061a8:	20000110 	.word	0x20000110
 80061ac:	20000a68 	.word	0x20000a68
 80061b0:	2000035a 	.word	0x2000035a

080061b4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
    TimerStop( &RxWindowTimer1 );
 80061b8:	481c      	ldr	r0, [pc, #112]	; (800622c <OnRxWindow1TimerEvent+0x78>)
 80061ba:	f00a f8d9 	bl	8010370 <TimerStop>
    RxSlot = RX_SLOT_WIN_1;
 80061be:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <OnRxWindow1TimerEvent+0x7c>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]

    RxWindow1Config.Channel = Channel;
 80061c4:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <OnRxWindow1TimerEvent+0x80>)
 80061c6:	781a      	ldrb	r2, [r3, #0]
 80061c8:	4b1b      	ldr	r3, [pc, #108]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 80061ca:	701a      	strb	r2, [r3, #0]
    RxWindow1Config.DrOffset = LoRaMacParams.Rx1DrOffset;
 80061cc:	4b1b      	ldr	r3, [pc, #108]	; (800623c <OnRxWindow1TimerEvent+0x88>)
 80061ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061d2:	b25a      	sxtb	r2, r3
 80061d4:	4b18      	ldr	r3, [pc, #96]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 80061d6:	70da      	strb	r2, [r3, #3]
    RxWindow1Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80061d8:	4b18      	ldr	r3, [pc, #96]	; (800623c <OnRxWindow1TimerEvent+0x88>)
 80061da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80061de:	4b16      	ldr	r3, [pc, #88]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 80061e0:	741a      	strb	r2, [r3, #16]
    RxWindow1Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 80061e2:	4b16      	ldr	r3, [pc, #88]	; (800623c <OnRxWindow1TimerEvent+0x88>)
 80061e4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 80061ea:	745a      	strb	r2, [r3, #17]
    RxWindow1Config.RxContinuous = false;
 80061ec:	4b12      	ldr	r3, [pc, #72]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	749a      	strb	r2, [r3, #18]
    RxWindow1Config.RxSlot = RxSlot;
 80061f2:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <OnRxWindow1TimerEvent+0x7c>)
 80061f4:	781a      	ldrb	r2, [r3, #0]
 80061f6:	4b10      	ldr	r3, [pc, #64]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 80061f8:	74da      	strb	r2, [r3, #19]

    if ( LoRaMacDeviceClass == CLASS_C ) {
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <OnRxWindow1TimerEvent+0x8c>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d102      	bne.n	8006208 <OnRxWindow1TimerEvent+0x54>
        Radio.Standby( );
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <OnRxWindow1TimerEvent+0x90>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	4798      	blx	r3
    }

    RegionRxConfig( LoRaMacRegion, &RxWindow1Config, ( int8_t * )&McpsIndication.RxDatarate );
 8006208:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <OnRxWindow1TimerEvent+0x94>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	4a0f      	ldr	r2, [pc, #60]	; (800624c <OnRxWindow1TimerEvent+0x98>)
 800620e:	490a      	ldr	r1, [pc, #40]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 8006210:	4618      	mov	r0, r3
 8006212:	f003 fda2 	bl	8009d5a <RegionRxConfig>
    //printf("w1 dr:%d\r\n",McpsIndication.RxDatarate);
    RxWindowSetup( RxWindow1Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <OnRxWindow1TimerEvent+0x84>)
 8006218:	7c9b      	ldrb	r3, [r3, #18]
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <OnRxWindow1TimerEvent+0x88>)
 800621c:	68d2      	ldr	r2, [r2, #12]
 800621e:	4611      	mov	r1, r2
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f8bb 	bl	800639c <RxWindowSetup>
#if(LoraWan_RGB==1)
    RGB_ON(COLOR_RXWINDOW1,0);
#endif
}
 8006226:	bf00      	nop
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200009f0 	.word	0x200009f0
 8006230:	20000a64 	.word	0x20000a64
 8006234:	20000475 	.word	0x20000475
 8006238:	200009c4 	.word	0x200009c4
 800623c:	20000a68 	.word	0x20000a68
 8006240:	20000148 	.word	0x20000148
 8006244:	080127d0 	.word	0x080127d0
 8006248:	20000110 	.word	0x20000110
 800624c:	200009dc 	.word	0x200009dc

08006250 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
    TimerStop( &RxWindowTimer2 );
 8006254:	481c      	ldr	r0, [pc, #112]	; (80062c8 <OnRxWindow2TimerEvent+0x78>)
 8006256:	f00a f88b 	bl	8010370 <TimerStop>

    RxWindow2Config.Channel = Channel;
 800625a:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <OnRxWindow2TimerEvent+0x7c>)
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 8006260:	701a      	strb	r2, [r3, #0]
    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <OnRxWindow2TimerEvent+0x84>)
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	4a1a      	ldr	r2, [pc, #104]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 8006268:	6053      	str	r3, [r2, #4]
    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <OnRxWindow2TimerEvent+0x84>)
 800626c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 8006272:	741a      	strb	r2, [r3, #16]
    RxWindow2Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <OnRxWindow2TimerEvent+0x84>)
 8006276:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 800627c:	745a      	strb	r2, [r3, #17]
    RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800627e:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 8006280:	2201      	movs	r2, #1
 8006282:	74da      	strb	r2, [r3, #19]

    if ( LoRaMacDeviceClass != CLASS_C ) {
 8006284:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <OnRxWindow2TimerEvent+0x88>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d003      	beq.n	8006294 <OnRxWindow2TimerEvent+0x44>
        RxWindow2Config.RxContinuous = false;
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 800628e:	2200      	movs	r2, #0
 8006290:	749a      	strb	r2, [r3, #18]
 8006292:	e002      	b.n	800629a <OnRxWindow2TimerEvent+0x4a>
    } else {
        RxWindow2Config.RxContinuous = true;
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 8006296:	2201      	movs	r2, #1
 8006298:	749a      	strb	r2, [r3, #18]
    }

    if ( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t * )&McpsIndication.RxDatarate ) == true ) {
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <OnRxWindow2TimerEvent+0x8c>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <OnRxWindow2TimerEvent+0x90>)
 80062a0:	490b      	ldr	r1, [pc, #44]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 80062a2:	4618      	mov	r0, r3
 80062a4:	f003 fd59 	bl	8009d5a <RegionRxConfig>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <OnRxWindow2TimerEvent+0x74>
    	//printf("w2 dr:%d\r\n",McpsIndication.RxDatarate);
        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <OnRxWindow2TimerEvent+0x80>)
 80062b0:	7c9b      	ldrb	r3, [r3, #18]
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <OnRxWindow2TimerEvent+0x84>)
 80062b4:	68d2      	ldr	r2, [r2, #12]
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f86f 	bl	800639c <RxWindowSetup>
        RxSlot = RX_SLOT_WIN_2;
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <OnRxWindow2TimerEvent+0x94>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	701a      	strb	r2, [r3, #0]
    }
#if(LoraWan_RGB==1)
	RGB_ON(COLOR_RXWINDOW2,0);
#endif

}
 80062c4:	bf00      	nop
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000998 	.word	0x20000998
 80062cc:	20000475 	.word	0x20000475
 80062d0:	20000ad4 	.word	0x20000ad4
 80062d4:	20000a68 	.word	0x20000a68
 80062d8:	20000148 	.word	0x20000148
 80062dc:	20000110 	.word	0x20000110
 80062e0:	200009dc 	.word	0x200009dc
 80062e4:	20000a64 	.word	0x20000a64

080062e8 <CheckToDisableAckTimeout>:

static void CheckToDisableAckTimeout( bool nodeAckRequested, DeviceClass_t devClass, bool ackReceived,
                                      uint8_t ackTimeoutRetriesCounter, uint8_t ackTimeoutRetries )
{
 80062e8:	b590      	push	{r4, r7, lr}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4623      	mov	r3, r4
 80062f8:	71fb      	strb	r3, [r7, #7]
 80062fa:	4603      	mov	r3, r0
 80062fc:	71bb      	strb	r3, [r7, #6]
 80062fe:	460b      	mov	r3, r1
 8006300:	717b      	strb	r3, [r7, #5]
 8006302:	4613      	mov	r3, r2
 8006304:	713b      	strb	r3, [r7, #4]
    // There are three cases where we need to stop the AckTimeoutTimer:
    if( nodeAckRequested == false )
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	f083 0301 	eor.w	r3, r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d006      	beq.n	8006320 <CheckToDisableAckTimeout+0x38>
    {
        if( devClass == CLASS_C )
 8006312:	79bb      	ldrb	r3, [r7, #6]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d111      	bne.n	800633c <CheckToDisableAckTimeout+0x54>
        {// FIRST CASE
            // We have performed an unconfirmed uplink in class c mode
            // and have received a downlink in RX1 or RX2.
            TimerStop( &AckTimeoutTimer );
 8006318:	480a      	ldr	r0, [pc, #40]	; (8006344 <CheckToDisableAckTimeout+0x5c>)
 800631a:	f00a f829 	bl	8010370 <TimerStop>
                // elapsed. If so, stop the timer.
                TimerStop( &AckTimeoutTimer );
            }
        }
    }
}
 800631e:	e00d      	b.n	800633c <CheckToDisableAckTimeout+0x54>
        if( ackReceived == 1 )
 8006320:	797b      	ldrb	r3, [r7, #5]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <CheckToDisableAckTimeout+0x46>
            TimerStop( &AckTimeoutTimer );
 8006326:	4807      	ldr	r0, [pc, #28]	; (8006344 <CheckToDisableAckTimeout+0x5c>)
 8006328:	f00a f822 	bl	8010370 <TimerStop>
}
 800632c:	e006      	b.n	800633c <CheckToDisableAckTimeout+0x54>
            if( ackTimeoutRetriesCounter > ackTimeoutRetries )
 800632e:	793a      	ldrb	r2, [r7, #4]
 8006330:	7e3b      	ldrb	r3, [r7, #24]
 8006332:	429a      	cmp	r2, r3
 8006334:	d902      	bls.n	800633c <CheckToDisableAckTimeout+0x54>
                TimerStop( &AckTimeoutTimer );
 8006336:	4803      	ldr	r0, [pc, #12]	; (8006344 <CheckToDisableAckTimeout+0x5c>)
 8006338:	f00a f81a 	bl	8010370 <TimerStop>
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bd90      	pop	{r4, r7, pc}
 8006344:	20000ac0 	.word	0x20000ac0

08006348 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
    TimerStop( &AckTimeoutTimer );
 800634c:	480d      	ldr	r0, [pc, #52]	; (8006384 <OnAckTimeoutTimerEvent+0x3c>)
 800634e:	f00a f80f 	bl	8010370 <TimerStop>

    if ( NodeAckRequested == true ) {
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <OnAckTimeoutTimerEvent+0x40>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <OnAckTimeoutTimerEvent+0x24>
        AckTimeoutRetry = true;
 800635a:	4b0c      	ldr	r3, [pc, #48]	; (800638c <OnAckTimeoutTimerEvent+0x44>)
 800635c:	2201      	movs	r2, #1
 800635e:	701a      	strb	r2, [r3, #0]
        LoRaMacState &= ~LORAMAC_ACK_REQ;
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <OnAckTimeoutTimerEvent+0x48>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 0304 	bic.w	r3, r3, #4
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <OnAckTimeoutTimerEvent+0x48>)
 800636a:	6013      	str	r3, [r2, #0]
    }
    if ( LoRaMacDeviceClass == CLASS_C ) {
 800636c:	4b09      	ldr	r3, [pc, #36]	; (8006394 <OnAckTimeoutTimerEvent+0x4c>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d104      	bne.n	800637e <OnAckTimeoutTimerEvent+0x36>
        LoRaMacFlags.Bits.MacDone = 1;
 8006374:	4a08      	ldr	r2, [pc, #32]	; (8006398 <OnAckTimeoutTimerEvent+0x50>)
 8006376:	7813      	ldrb	r3, [r2, #0]
 8006378:	f043 0320 	orr.w	r3, r3, #32
 800637c:	7013      	strb	r3, [r2, #0]
    }
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000ac0 	.word	0x20000ac0
 8006388:	20000360 	.word	0x20000360
 800638c:	200004b8 	.word	0x200004b8
 8006390:	2000047c 	.word	0x2000047c
 8006394:	20000148 	.word	0x20000148
 8006398:	20000a08 	.word	0x20000a08

0800639c <RxWindowSetup>:

static void RxWindowSetup( bool rxContinuous, uint32_t maxRxWindow )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	6039      	str	r1, [r7, #0]
 80063a6:	71fb      	strb	r3, [r7, #7]
    if ( rxContinuous == false ) {
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	f083 0301 	eor.w	r3, r3, #1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d004      	beq.n	80063be <RxWindowSetup+0x22>
        Radio.Rx( maxRxWindow );
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <RxWindowSetup+0x34>)
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	6838      	ldr	r0, [r7, #0]
 80063ba:	4798      	blx	r3
    } else {
        Radio.Rx( 0 ); // Continuous mode
    }
}
 80063bc:	e003      	b.n	80063c6 <RxWindowSetup+0x2a>
        Radio.Rx( 0 ); // Continuous mode
 80063be:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <RxWindowSetup+0x34>)
 80063c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c2:	2000      	movs	r0, #0
 80063c4:	4798      	blx	r3
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	080127d0 	.word	0x080127d0

080063d4 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af02      	add	r7, sp, #8
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80063de:	2303      	movs	r3, #3
 80063e0:	73fb      	strb	r3, [r7, #15]

    switch( LoRaMacDeviceClass )
 80063e2:	4b1e      	ldr	r3, [pc, #120]	; (800645c <SwitchClass+0x88>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d024      	beq.n	8006434 <SwitchClass+0x60>
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	dc31      	bgt.n	8006452 <SwitchClass+0x7e>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <SwitchClass+0x22>
 80063f2:	2b01      	cmp	r3, #1
                status = LORAMAC_STATUS_OK;
            }
            break;
        }
        case CLASS_B:
        	break;
 80063f4:	e02d      	b.n	8006452 <SwitchClass+0x7e>
            if( deviceClass == CLASS_C )
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d127      	bne.n	800644c <SwitchClass+0x78>
                LoRaMacDeviceClass = deviceClass;
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <SwitchClass+0x88>)
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	7013      	strb	r3, [r2, #0]
                NodeAckRequested = false;
 8006402:	4b17      	ldr	r3, [pc, #92]	; (8006460 <SwitchClass+0x8c>)
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
                Radio.Sleep( );
 8006408:	4b16      	ldr	r3, [pc, #88]	; (8006464 <SwitchClass+0x90>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4798      	blx	r3
                RegionComputeRxWindowParameters( LoRaMacRegion,
 800640e:	4b16      	ldr	r3, [pc, #88]	; (8006468 <SwitchClass+0x94>)
 8006410:	7818      	ldrb	r0, [r3, #0]
                                                 LoRaMacParams.Rx2Channel.Datarate,
 8006412:	4b16      	ldr	r3, [pc, #88]	; (800646c <SwitchClass+0x98>)
 8006414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                RegionComputeRxWindowParameters( LoRaMacRegion,
 8006418:	b259      	sxtb	r1, r3
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <SwitchClass+0x98>)
 800641c:	7a1a      	ldrb	r2, [r3, #8]
 800641e:	4b13      	ldr	r3, [pc, #76]	; (800646c <SwitchClass+0x98>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	4c13      	ldr	r4, [pc, #76]	; (8006470 <SwitchClass+0x9c>)
 8006424:	9400      	str	r4, [sp, #0]
 8006426:	f003 fc7e 	bl	8009d26 <RegionComputeRxWindowParameters>
                OpenContinuousRx2Window( );
 800642a:	f000 ffa3 	bl	8007374 <OpenContinuousRx2Window>
                status = LORAMAC_STATUS_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
            break;
 8006432:	e00b      	b.n	800644c <SwitchClass+0x78>
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10a      	bne.n	8006450 <SwitchClass+0x7c>
            {
                LoRaMacDeviceClass = deviceClass;
 800643a:	4a08      	ldr	r2, [pc, #32]	; (800645c <SwitchClass+0x88>)
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	7013      	strb	r3, [r2, #0]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8006440:	4b08      	ldr	r3, [pc, #32]	; (8006464 <SwitchClass+0x90>)
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800644a:	e001      	b.n	8006450 <SwitchClass+0x7c>
            break;
 800644c:	bf00      	nop
 800644e:	e000      	b.n	8006452 <SwitchClass+0x7e>
            break;
 8006450:	bf00      	nop
        }
    }

    return status;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	bd90      	pop	{r4, r7, pc}
 800645c:	20000148 	.word	0x20000148
 8006460:	20000360 	.word	0x20000360
 8006464:	080127d0 	.word	0x080127d0
 8006468:	20000110 	.word	0x20000110
 800646c:	20000a68 	.word	0x20000a68
 8006470:	20000ad4 	.word	0x20000ad4

08006474 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	71fb      	strb	r3, [r7, #7]
 800647e:	460b      	mov	r3, r1
 8006480:	71bb      	strb	r3, [r7, #6]
 8006482:	4613      	mov	r3, r2
 8006484:	717b      	strb	r3, [r7, #5]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    uint16_t maxN = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	82fb      	strh	r3, [r7, #22]
    uint16_t payloadSize = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	82bb      	strh	r3, [r7, #20]

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <ValidatePayloadLength+0x90>)
 8006490:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006494:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8006496:	79bb      	ldrb	r3, [r7, #6]
 8006498:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800649a:	2309      	movs	r3, #9
 800649c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( LoRaMacParams.RepeaterSupport == true )
 800649e:	4b19      	ldr	r3, [pc, #100]	; (8006504 <ValidatePayloadLength+0x90>)
 80064a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <ValidatePayloadLength+0x38>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80064a8:	230a      	movs	r3, #10
 80064aa:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80064ac:	4b16      	ldr	r3, [pc, #88]	; (8006508 <ValidatePayloadLength+0x94>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f107 0210 	add.w	r2, r7, #16
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f003 fba2 	bl	8009c00 <RegionGetPhyParam>
 80064bc:	4603      	mov	r3, r0
 80064be:	60fb      	str	r3, [r7, #12]
    maxN = phyParam.Value;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	82fb      	strh	r3, [r7, #22]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	797b      	ldrb	r3, [r7, #5]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	82bb      	strh	r3, [r7, #20]

    // Validation of the application payload size
    if ( ((( payloadSize > maxN ) && (fOptsLen != 0) && (fOptsLen <= maxN)) || ( payloadSize <= maxN )) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) ) {
 80064d0:	8aba      	ldrh	r2, [r7, #20]
 80064d2:	8afb      	ldrh	r3, [r7, #22]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d907      	bls.n	80064e8 <ValidatePayloadLength+0x74>
 80064d8:	797b      	ldrb	r3, [r7, #5]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <ValidatePayloadLength+0x74>
 80064de:	797b      	ldrb	r3, [r7, #5]
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8afa      	ldrh	r2, [r7, #22]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d203      	bcs.n	80064f0 <ValidatePayloadLength+0x7c>
 80064e8:	8aba      	ldrh	r2, [r7, #20]
 80064ea:	8afb      	ldrh	r3, [r7, #22]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d804      	bhi.n	80064fa <ValidatePayloadLength+0x86>
 80064f0:	8abb      	ldrh	r3, [r7, #20]
 80064f2:	2bff      	cmp	r3, #255	; 0xff
 80064f4:	d801      	bhi.n	80064fa <ValidatePayloadLength+0x86>
        return true;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <ValidatePayloadLength+0x88>
    }
    return false;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000a68 	.word	0x20000a68
 8006508:	20000110 	.word	0x20000110

0800650c <IsStickyMacCommandPending>:

static bool IsStickyMacCommandPending( void )
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
    if( MacCommandsBufferToRepeatIndex > 0 )
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <IsStickyMacCommandPending+0x1c>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <IsStickyMacCommandPending+0x10>
    {
        // Sticky MAC commands pending
        return true;
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <IsStickyMacCommandPending+0x12>
    }
    return false;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000364 	.word	0x20000364

0800652c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
    MlmeIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <SetMlmeScheduleUplinkIndication+0x1c>)
 8006532:	2204      	movs	r2, #4
 8006534:	701a      	strb	r2, [r3, #0]
    LoRaMacFlags.Bits.MlmeInd = 1;
 8006536:	4a05      	ldr	r2, [pc, #20]	; (800654c <SetMlmeScheduleUplinkIndication+0x20>)
 8006538:	7813      	ldrb	r3, [r2, #0]
 800653a:	f043 0310 	orr.w	r3, r3, #16
 800653e:	7013      	strb	r3, [r2, #0]
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	20000aa4 	.word	0x20000aa4
 800654c:	20000a08 	.word	0x20000a08

08006550 <AddMacCommand>:

static LoRaMacStatus_t AddMacCommand( uint8_t cmd, uint8_t p1, uint8_t p2 )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
 800655a:	460b      	mov	r3, r1
 800655c:	71bb      	strb	r3, [r7, #6]
 800655e:	4613      	mov	r3, r2
 8006560:	717b      	strb	r3, [r7, #5]
    LoRaMacStatus_t status = LORAMAC_STATUS_BUSY;
 8006562:	2301      	movs	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
    // The maximum buffer length must take MAC commands to re-send into account.
    uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 8006566:	4bac      	ldr	r3, [pc, #688]	; (8006818 <AddMacCommand+0x2c8>)
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	73bb      	strb	r3, [r7, #14]

    switch ( cmd ) {
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	3b02      	subs	r3, #2
 8006576:	2b11      	cmp	r3, #17
 8006578:	f200 81a2 	bhi.w	80068c0 <AddMacCommand+0x370>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <AddMacCommand+0x34>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065cd 	.word	0x080065cd
 8006588:	080065f3 	.word	0x080065f3
 800658c:	08006631 	.word	0x08006631
 8006590:	08006657 	.word	0x08006657
 8006594:	08006699 	.word	0x08006699
 8006598:	080066ef 	.word	0x080066ef
 800659c:	0800672d 	.word	0x0800672d
 80065a0:	08006757 	.word	0x08006757
 80065a4:	0800677d 	.word	0x0800677d
 80065a8:	080068c1 	.word	0x080068c1
 80065ac:	080068c1 	.word	0x080068c1
 80065b0:	080067bb 	.word	0x080067bb
 80065b4:	080068c1 	.word	0x080068c1
 80065b8:	080068c1 	.word	0x080068c1
 80065bc:	080067e1 	.word	0x080067e1
 80065c0:	08006825 	.word	0x08006825
 80065c4:	08006861 	.word	0x08006861
 80065c8:	08006885 	.word	0x08006885
        case MOTE_MAC_LINK_CHECK_REQ:
            if ( MacCommandsBufferIndex < bufLen ) {
 80065cc:	4b93      	ldr	r3, [pc, #588]	; (800681c <AddMacCommand+0x2cc>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	7bba      	ldrb	r2, [r7, #14]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	f240 8176 	bls.w	80068c4 <AddMacCommand+0x374>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80065d8:	4b90      	ldr	r3, [pc, #576]	; (800681c <AddMacCommand+0x2cc>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	b2d1      	uxtb	r1, r2
 80065e0:	4a8e      	ldr	r2, [pc, #568]	; (800681c <AddMacCommand+0x2cc>)
 80065e2:	7011      	strb	r1, [r2, #0]
 80065e4:	4619      	mov	r1, r3
 80065e6:	4a8e      	ldr	r2, [pc, #568]	; (8006820 <AddMacCommand+0x2d0>)
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	5453      	strb	r3, [r2, r1]
                // No payload for this command
                status = LORAMAC_STATUS_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80065f0:	e168      	b.n	80068c4 <AddMacCommand+0x374>
        case MOTE_MAC_LINK_ADR_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 80065f2:	4b8a      	ldr	r3, [pc, #552]	; (800681c <AddMacCommand+0x2cc>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	f280 8163 	bge.w	80068c8 <AddMacCommand+0x378>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006602:	4b86      	ldr	r3, [pc, #536]	; (800681c <AddMacCommand+0x2cc>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	b2d1      	uxtb	r1, r2
 800660a:	4a84      	ldr	r2, [pc, #528]	; (800681c <AddMacCommand+0x2cc>)
 800660c:	7011      	strb	r1, [r2, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	4a83      	ldr	r2, [pc, #524]	; (8006820 <AddMacCommand+0x2d0>)
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	5453      	strb	r3, [r2, r1]
                // Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006616:	4b81      	ldr	r3, [pc, #516]	; (800681c <AddMacCommand+0x2cc>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	b2d1      	uxtb	r1, r2
 800661e:	4a7f      	ldr	r2, [pc, #508]	; (800681c <AddMacCommand+0x2cc>)
 8006620:	7011      	strb	r1, [r2, #0]
 8006622:	4619      	mov	r1, r3
 8006624:	4a7e      	ldr	r2, [pc, #504]	; (8006820 <AddMacCommand+0x2d0>)
 8006626:	79bb      	ldrb	r3, [r7, #6]
 8006628:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800662e:	e14b      	b.n	80068c8 <AddMacCommand+0x378>
        case MOTE_MAC_DUTY_CYCLE_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006630:	4b7a      	ldr	r3, [pc, #488]	; (800681c <AddMacCommand+0x2cc>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	7bba      	ldrb	r2, [r7, #14]
 8006636:	429a      	cmp	r2, r3
 8006638:	f240 8148 	bls.w	80068cc <AddMacCommand+0x37c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800663c:	4b77      	ldr	r3, [pc, #476]	; (800681c <AddMacCommand+0x2cc>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	b2d1      	uxtb	r1, r2
 8006644:	4a75      	ldr	r2, [pc, #468]	; (800681c <AddMacCommand+0x2cc>)
 8006646:	7011      	strb	r1, [r2, #0]
 8006648:	4619      	mov	r1, r3
 800664a:	4a75      	ldr	r2, [pc, #468]	; (8006820 <AddMacCommand+0x2d0>)
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006654:	e13a      	b.n	80068cc <AddMacCommand+0x37c>
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 8006656:	4b71      	ldr	r3, [pc, #452]	; (800681c <AddMacCommand+0x2cc>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	3b01      	subs	r3, #1
 8006660:	429a      	cmp	r2, r3
 8006662:	f280 8135 	bge.w	80068d0 <AddMacCommand+0x380>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006666:	4b6d      	ldr	r3, [pc, #436]	; (800681c <AddMacCommand+0x2cc>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	b2d1      	uxtb	r1, r2
 800666e:	4a6b      	ldr	r2, [pc, #428]	; (800681c <AddMacCommand+0x2cc>)
 8006670:	7011      	strb	r1, [r2, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	4a6a      	ldr	r2, [pc, #424]	; (8006820 <AddMacCommand+0x2d0>)
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	5453      	strb	r3, [r2, r1]
                // Status: Datarate ACK, Channel ACK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800667a:	4b68      	ldr	r3, [pc, #416]	; (800681c <AddMacCommand+0x2cc>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	b2d1      	uxtb	r1, r2
 8006682:	4a66      	ldr	r2, [pc, #408]	; (800681c <AddMacCommand+0x2cc>)
 8006684:	7011      	strb	r1, [r2, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	4a65      	ldr	r2, [pc, #404]	; (8006820 <AddMacCommand+0x2d0>)
 800668a:	79bb      	ldrb	r3, [r7, #6]
 800668c:	5453      	strb	r3, [r2, r1]
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 800668e:	f7ff ff4d 	bl	800652c <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006696:	e11b      	b.n	80068d0 <AddMacCommand+0x380>
        case MOTE_MAC_DEV_STATUS_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 2 ) ) {
 8006698:	4b60      	ldr	r3, [pc, #384]	; (800681c <AddMacCommand+0x2cc>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	3b02      	subs	r3, #2
 80066a2:	429a      	cmp	r2, r3
 80066a4:	f280 8116 	bge.w	80068d4 <AddMacCommand+0x384>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80066a8:	4b5c      	ldr	r3, [pc, #368]	; (800681c <AddMacCommand+0x2cc>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	b2d1      	uxtb	r1, r2
 80066b0:	4a5a      	ldr	r2, [pc, #360]	; (800681c <AddMacCommand+0x2cc>)
 80066b2:	7011      	strb	r1, [r2, #0]
 80066b4:	4619      	mov	r1, r3
 80066b6:	4a5a      	ldr	r2, [pc, #360]	; (8006820 <AddMacCommand+0x2d0>)
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	5453      	strb	r3, [r2, r1]
                // 1st byte Battery
                // 2nd byte Margin
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80066bc:	4b57      	ldr	r3, [pc, #348]	; (800681c <AddMacCommand+0x2cc>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	b2d1      	uxtb	r1, r2
 80066c4:	4a55      	ldr	r2, [pc, #340]	; (800681c <AddMacCommand+0x2cc>)
 80066c6:	7011      	strb	r1, [r2, #0]
 80066c8:	4619      	mov	r1, r3
 80066ca:	4a55      	ldr	r2, [pc, #340]	; (8006820 <AddMacCommand+0x2d0>)
 80066cc:	79bb      	ldrb	r3, [r7, #6]
 80066ce:	5453      	strb	r3, [r2, r1]
                MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 80066d0:	4b52      	ldr	r3, [pc, #328]	; (800681c <AddMacCommand+0x2cc>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	b2d1      	uxtb	r1, r2
 80066d8:	4a50      	ldr	r2, [pc, #320]	; (800681c <AddMacCommand+0x2cc>)
 80066da:	7011      	strb	r1, [r2, #0]
 80066dc:	4619      	mov	r1, r3
 80066de:	4a50      	ldr	r2, [pc, #320]	; (8006820 <AddMacCommand+0x2d0>)
 80066e0:	797b      	ldrb	r3, [r7, #5]
 80066e2:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 80066e4:	f7ff ff22 	bl	800652c <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_DEV_STATUS_ANS p1=%d p2=%d\r\n",p1,p2);
#endif
            }
            break;
 80066ec:	e0f2      	b.n	80068d4 <AddMacCommand+0x384>
        case MOTE_MAC_NEW_CHANNEL_ANS:
            if ( MacCommandsBufferIndex < ( bufLen - 1 ) ) {
 80066ee:	4b4b      	ldr	r3, [pc, #300]	; (800681c <AddMacCommand+0x2cc>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	429a      	cmp	r2, r3
 80066fa:	f280 80ed 	bge.w	80068d8 <AddMacCommand+0x388>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80066fe:	4b47      	ldr	r3, [pc, #284]	; (800681c <AddMacCommand+0x2cc>)
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	b2d1      	uxtb	r1, r2
 8006706:	4a45      	ldr	r2, [pc, #276]	; (800681c <AddMacCommand+0x2cc>)
 8006708:	7011      	strb	r1, [r2, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	4a44      	ldr	r2, [pc, #272]	; (8006820 <AddMacCommand+0x2d0>)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006712:	4b42      	ldr	r3, [pc, #264]	; (800681c <AddMacCommand+0x2cc>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	b2d1      	uxtb	r1, r2
 800671a:	4a40      	ldr	r2, [pc, #256]	; (800681c <AddMacCommand+0x2cc>)
 800671c:	7011      	strb	r1, [r2, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	4a3f      	ldr	r2, [pc, #252]	; (8006820 <AddMacCommand+0x2d0>)
 8006722:	79bb      	ldrb	r3, [r7, #6]
 8006724:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800672a:	e0d5      	b.n	80068d8 <AddMacCommand+0x388>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 800672c:	4b3b      	ldr	r3, [pc, #236]	; (800681c <AddMacCommand+0x2cc>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	7bba      	ldrb	r2, [r7, #14]
 8006732:	429a      	cmp	r2, r3
 8006734:	f240 80d2 	bls.w	80068dc <AddMacCommand+0x38c>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006738:	4b38      	ldr	r3, [pc, #224]	; (800681c <AddMacCommand+0x2cc>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	b2d1      	uxtb	r1, r2
 8006740:	4a36      	ldr	r2, [pc, #216]	; (800681c <AddMacCommand+0x2cc>)
 8006742:	7011      	strb	r1, [r2, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	4a36      	ldr	r2, [pc, #216]	; (8006820 <AddMacCommand+0x2d0>)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 800674c:	f7ff feee 	bl	800652c <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006754:	e0c2      	b.n	80068dc <AddMacCommand+0x38c>
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 8006756:	4b31      	ldr	r3, [pc, #196]	; (800681c <AddMacCommand+0x2cc>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	7bba      	ldrb	r2, [r7, #14]
 800675c:	429a      	cmp	r2, r3
 800675e:	f240 80bf 	bls.w	80068e0 <AddMacCommand+0x390>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006762:	4b2e      	ldr	r3, [pc, #184]	; (800681c <AddMacCommand+0x2cc>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	b2d1      	uxtb	r1, r2
 800676a:	4a2c      	ldr	r2, [pc, #176]	; (800681c <AddMacCommand+0x2cc>)
 800676c:	7011      	strb	r1, [r2, #0]
 800676e:	4619      	mov	r1, r3
 8006770:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <AddMacCommand+0x2d0>)
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800677a:	e0b1      	b.n	80068e0 <AddMacCommand+0x390>
        case MOTE_MAC_DL_CHANNEL_ANS:
            if ( MacCommandsBufferIndex < bufLen ) {
 800677c:	4b27      	ldr	r3, [pc, #156]	; (800681c <AddMacCommand+0x2cc>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	7bba      	ldrb	r2, [r7, #14]
 8006782:	429a      	cmp	r2, r3
 8006784:	f240 80ae 	bls.w	80068e4 <AddMacCommand+0x394>
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 8006788:	4b24      	ldr	r3, [pc, #144]	; (800681c <AddMacCommand+0x2cc>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	b2d1      	uxtb	r1, r2
 8006790:	4a22      	ldr	r2, [pc, #136]	; (800681c <AddMacCommand+0x2cc>)
 8006792:	7011      	strb	r1, [r2, #0]
 8006794:	4619      	mov	r1, r3
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <AddMacCommand+0x2d0>)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	5453      	strb	r3, [r2, r1]
                // Status: Uplink frequency exists, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800679c:	4b1f      	ldr	r3, [pc, #124]	; (800681c <AddMacCommand+0x2cc>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	b2d1      	uxtb	r1, r2
 80067a4:	4a1d      	ldr	r2, [pc, #116]	; (800681c <AddMacCommand+0x2cc>)
 80067a6:	7011      	strb	r1, [r2, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	4a1d      	ldr	r2, [pc, #116]	; (8006820 <AddMacCommand+0x2d0>)
 80067ac:	79bb      	ldrb	r3, [r7, #6]
 80067ae:	5453      	strb	r3, [r2, r1]
                // This is a sticky MAC command answer. Setup indication
                SetMlmeScheduleUplinkIndication( );
 80067b0:	f7ff febc 	bl	800652c <SetMlmeScheduleUplinkIndication>

                status = LORAMAC_STATUS_OK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80067b8:	e094      	b.n	80068e4 <AddMacCommand+0x394>
        case MOTE_MAC_DEVICE_TIME_REQ:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 80067ba:	4b18      	ldr	r3, [pc, #96]	; (800681c <AddMacCommand+0x2cc>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f2c0 8091 	blt.w	80068e8 <AddMacCommand+0x398>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80067c6:	4b15      	ldr	r3, [pc, #84]	; (800681c <AddMacCommand+0x2cc>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	b2d1      	uxtb	r1, r2
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <AddMacCommand+0x2cc>)
 80067d0:	7011      	strb	r1, [r2, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4a12      	ldr	r2, [pc, #72]	; (8006820 <AddMacCommand+0x2d0>)
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
               status = LORAMAC_STATUS_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_DEVICE_TIME_REQ\r\n");
#endif
            }
            break;
 80067de:	e083      	b.n	80068e8 <AddMacCommand+0x398>
        case MOTE_MAC_PING_SLOT_INFO_REQ:
            if( MacCommandsBufferIndex < ( LORA_MAC_COMMAND_MAX_LENGTH - 1 ) )
 80067e0:	4b0e      	ldr	r3, [pc, #56]	; (800681c <AddMacCommand+0x2cc>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b7e      	cmp	r3, #126	; 0x7e
 80067e6:	f200 8081 	bhi.w	80068ec <AddMacCommand+0x39c>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 80067ea:	4b0c      	ldr	r3, [pc, #48]	; (800681c <AddMacCommand+0x2cc>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	b2d1      	uxtb	r1, r2
 80067f2:	4a0a      	ldr	r2, [pc, #40]	; (800681c <AddMacCommand+0x2cc>)
 80067f4:	7011      	strb	r1, [r2, #0]
 80067f6:	4619      	mov	r1, r3
 80067f8:	4a09      	ldr	r2, [pc, #36]	; (8006820 <AddMacCommand+0x2d0>)
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	5453      	strb	r3, [r2, r1]
                // Status: Periodicity and Datarate
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80067fe:	4b07      	ldr	r3, [pc, #28]	; (800681c <AddMacCommand+0x2cc>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	b2d1      	uxtb	r1, r2
 8006806:	4a05      	ldr	r2, [pc, #20]	; (800681c <AddMacCommand+0x2cc>)
 8006808:	7011      	strb	r1, [r2, #0]
 800680a:	4619      	mov	r1, r3
 800680c:	4a04      	ldr	r2, [pc, #16]	; (8006820 <AddMacCommand+0x2d0>)
 800680e:	79bb      	ldrb	r3, [r7, #6]
 8006810:	5453      	strb	r3, [r2, r1]
                status = LORAMAC_STATUS_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("ready to send MOTE_MAC_PING_SLOT_INFO_REQ value=%d\r\n",p1);
#endif
            }
            break;
 8006816:	e069      	b.n	80068ec <AddMacCommand+0x39c>
 8006818:	20000364 	.word	0x20000364
 800681c:	20000363 	.word	0x20000363
 8006820:	20000368 	.word	0x20000368
        case MOTE_MAC_PING_SLOT_FREQ_ANS:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006824:	4b3d      	ldr	r3, [pc, #244]	; (800691c <AddMacCommand+0x3cc>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b25b      	sxtb	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	db60      	blt.n	80068f0 <AddMacCommand+0x3a0>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800682e:	4b3b      	ldr	r3, [pc, #236]	; (800691c <AddMacCommand+0x3cc>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	b2d1      	uxtb	r1, r2
 8006836:	4a39      	ldr	r2, [pc, #228]	; (800691c <AddMacCommand+0x3cc>)
 8006838:	7011      	strb	r1, [r2, #0]
 800683a:	4619      	mov	r1, r3
 800683c:	4a38      	ldr	r2, [pc, #224]	; (8006920 <AddMacCommand+0x3d0>)
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	5453      	strb	r3, [r2, r1]
                // Status: Datarate range OK, Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 8006842:	4b36      	ldr	r3, [pc, #216]	; (800691c <AddMacCommand+0x3cc>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	b2d1      	uxtb	r1, r2
 800684a:	4a34      	ldr	r2, [pc, #208]	; (800691c <AddMacCommand+0x3cc>)
 800684c:	7011      	strb	r1, [r2, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	4a33      	ldr	r2, [pc, #204]	; (8006920 <AddMacCommand+0x3d0>)
 8006852:	79bb      	ldrb	r3, [r7, #6]
 8006854:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 8006856:	f7ff fe69 	bl	800652c <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800685e:	e047      	b.n	80068f0 <AddMacCommand+0x3a0>
        case MOTE_MAC_BEACON_TIMING_REQ:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006860:	4b2e      	ldr	r3, [pc, #184]	; (800691c <AddMacCommand+0x3cc>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	b25b      	sxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	db44      	blt.n	80068f4 <AddMacCommand+0x3a4>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800686a:	4b2c      	ldr	r3, [pc, #176]	; (800691c <AddMacCommand+0x3cc>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	b2d1      	uxtb	r1, r2
 8006872:	4a2a      	ldr	r2, [pc, #168]	; (800691c <AddMacCommand+0x3cc>)
 8006874:	7011      	strb	r1, [r2, #0]
 8006876:	4619      	mov	r1, r3
 8006878:	4a29      	ldr	r2, [pc, #164]	; (8006920 <AddMacCommand+0x3d0>)
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	5453      	strb	r3, [r2, r1]
                // No payload for this answer
                status = LORAMAC_STATUS_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8006882:	e037      	b.n	80068f4 <AddMacCommand+0x3a4>
        case MOTE_MAC_BEACON_FREQ_ANS:
            if( MacCommandsBufferIndex < LORA_MAC_COMMAND_MAX_LENGTH )
 8006884:	4b25      	ldr	r3, [pc, #148]	; (800691c <AddMacCommand+0x3cc>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b25b      	sxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	db34      	blt.n	80068f8 <AddMacCommand+0x3a8>
            {
                MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800688e:	4b23      	ldr	r3, [pc, #140]	; (800691c <AddMacCommand+0x3cc>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	b2d1      	uxtb	r1, r2
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <AddMacCommand+0x3cc>)
 8006898:	7011      	strb	r1, [r2, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	4a20      	ldr	r2, [pc, #128]	; (8006920 <AddMacCommand+0x3d0>)
 800689e:	79fb      	ldrb	r3, [r7, #7]
 80068a0:	5453      	strb	r3, [r2, r1]
                // Status: Channel frequency OK
                MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 80068a2:	4b1e      	ldr	r3, [pc, #120]	; (800691c <AddMacCommand+0x3cc>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	b2d1      	uxtb	r1, r2
 80068aa:	4a1c      	ldr	r2, [pc, #112]	; (800691c <AddMacCommand+0x3cc>)
 80068ac:	7011      	strb	r1, [r2, #0]
 80068ae:	4619      	mov	r1, r3
 80068b0:	4a1b      	ldr	r2, [pc, #108]	; (8006920 <AddMacCommand+0x3d0>)
 80068b2:	79bb      	ldrb	r3, [r7, #6]
 80068b4:	5453      	strb	r3, [r2, r1]
                SetMlmeScheduleUplinkIndication( );
 80068b6:	f7ff fe39 	bl	800652c <SetMlmeScheduleUplinkIndication>
                status = LORAMAC_STATUS_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80068be:	e01b      	b.n	80068f8 <AddMacCommand+0x3a8>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80068c0:	2302      	movs	r3, #2
 80068c2:	e027      	b.n	8006914 <AddMacCommand+0x3c4>
            break;
 80068c4:	bf00      	nop
 80068c6:	e018      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068c8:	bf00      	nop
 80068ca:	e016      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068cc:	bf00      	nop
 80068ce:	e014      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068d0:	bf00      	nop
 80068d2:	e012      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068d4:	bf00      	nop
 80068d6:	e010      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068d8:	bf00      	nop
 80068da:	e00e      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068dc:	bf00      	nop
 80068de:	e00c      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068e0:	bf00      	nop
 80068e2:	e00a      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068e4:	bf00      	nop
 80068e6:	e008      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068e8:	bf00      	nop
 80068ea:	e006      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068ec:	bf00      	nop
 80068ee:	e004      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <AddMacCommand+0x3aa>
            break;
 80068f8:	bf00      	nop
    }
    if ( status == LORAMAC_STATUS_OK ) {
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <AddMacCommand+0x3c2>
        MacCommandsInNextTx = true;
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <AddMacCommand+0x3d4>)
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
        if (SrvAckRequested) {
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <AddMacCommand+0x3d8>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <AddMacCommand+0x3c2>
            SetMlmeScheduleUplinkIndication();
 800690e:	f7ff fe0d 	bl	800652c <SetMlmeScheduleUplinkIndication>
        }
    }
    return status;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000363 	.word	0x20000363
 8006920:	20000368 	.word	0x20000368
 8006924:	20000362 	.word	0x20000362
 8006928:	20000361 	.word	0x20000361

0800692c <ParseMacCommandsToRepeat>:

static uint8_t ParseMacCommandsToRepeat( uint8_t *cmdBufIn, uint8_t length, uint8_t *cmdBufOut )
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	460b      	mov	r3, r1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	72fb      	strb	r3, [r7, #11]
    uint8_t i = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
    uint8_t cmdCount = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	75bb      	strb	r3, [r7, #22]

    if ( ( cmdBufIn == NULL ) || ( cmdBufOut == NULL ) ) {
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <ParseMacCommandsToRepeat+0x22>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <ParseMacCommandsToRepeat+0x26>
        return 0;
 800694e:	2300      	movs	r3, #0
 8006950:	e055      	b.n	80069fe <ParseMacCommandsToRepeat+0xd2>
    }

    for ( i = 0; i < length; i++ ) {
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]
 8006956:	e04d      	b.n	80069f4 <ParseMacCommandsToRepeat+0xc8>
        switch ( cmdBufIn[i] ) {
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	3b02      	subs	r3, #2
 8006962:	2b08      	cmp	r3, #8
 8006964:	d842      	bhi.n	80069ec <ParseMacCommandsToRepeat+0xc0>
 8006966:	a201      	add	r2, pc, #4	; (adr r2, 800696c <ParseMacCommandsToRepeat+0x40>)
 8006968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696c:	080069ed 	.word	0x080069ed
 8006970:	080069e5 	.word	0x080069e5
 8006974:	080069ed 	.word	0x080069ed
 8006978:	08006991 	.word	0x08006991
 800697c:	080069dd 	.word	0x080069dd
 8006980:	080069e5 	.word	0x080069e5
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069ed 	.word	0x080069ed
 800698c:	08006991 	.word	0x08006991
            // STICKY
            case MOTE_MAC_DL_CHANNEL_ANS:
            case MOTE_MAC_RX_PARAM_SETUP_ANS: {
                // 1 byte payload
                cmdBufOut[cmdCount++] = cmdBufIn[i++];
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	75fa      	strb	r2, [r7, #23]
 8006996:	461a      	mov	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	441a      	add	r2, r3
 800699c:	7dbb      	ldrb	r3, [r7, #22]
 800699e:	1c59      	adds	r1, r3, #1
 80069a0:	75b9      	strb	r1, [r7, #22]
 80069a2:	4619      	mov	r1, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	440b      	add	r3, r1
 80069a8:	7812      	ldrb	r2, [r2, #0]
 80069aa:	701a      	strb	r2, [r3, #0]
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	441a      	add	r2, r3
 80069b2:	7dbb      	ldrb	r3, [r7, #22]
 80069b4:	1c59      	adds	r1, r3, #1
 80069b6:	75b9      	strb	r1, [r7, #22]
 80069b8:	4619      	mov	r1, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	440b      	add	r3, r1
 80069be:	7812      	ldrb	r2, [r2, #0]
 80069c0:	701a      	strb	r2, [r3, #0]
                break;
 80069c2:	e014      	b.n	80069ee <ParseMacCommandsToRepeat+0xc2>
            }
            case MOTE_MAC_RX_TIMING_SETUP_ANS: {
                // 0 byte payload
                cmdBufOut[cmdCount++] = cmdBufIn[i];
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	441a      	add	r2, r3
 80069ca:	7dbb      	ldrb	r3, [r7, #22]
 80069cc:	1c59      	adds	r1, r3, #1
 80069ce:	75b9      	strb	r1, [r7, #22]
 80069d0:	4619      	mov	r1, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	440b      	add	r3, r1
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
                break;
 80069da:	e008      	b.n	80069ee <ParseMacCommandsToRepeat+0xc2>
            }
            // NON-STICKY
            case MOTE_MAC_DEV_STATUS_ANS: {
                // 2 bytes payload
                i += 2;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	3302      	adds	r3, #2
 80069e0:	75fb      	strb	r3, [r7, #23]
                break;
 80069e2:	e004      	b.n	80069ee <ParseMacCommandsToRepeat+0xc2>
            }
            case MOTE_MAC_LINK_ADR_ANS:
            case MOTE_MAC_NEW_CHANNEL_ANS: {
                // 1 byte payload
                i++;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	3301      	adds	r3, #1
 80069e8:	75fb      	strb	r3, [r7, #23]
                break;
 80069ea:	e000      	b.n	80069ee <ParseMacCommandsToRepeat+0xc2>
            case MOTE_MAC_LINK_CHECK_REQ: {
                // 0 byte payload
                break;
            }
            default:
                break;
 80069ec:	bf00      	nop
    for ( i = 0; i < length; i++ ) {
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	3301      	adds	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
 80069f4:	7dfa      	ldrb	r2, [r7, #23]
 80069f6:	7afb      	ldrb	r3, [r7, #11]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d3ad      	bcc.n	8006958 <ParseMacCommandsToRepeat+0x2c>
        }
    }

    return cmdCount;
 80069fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b095      	sub	sp, #84	; 0x54
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	4608      	mov	r0, r1
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	70fb      	strb	r3, [r7, #3]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70bb      	strb	r3, [r7, #2]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    while ( macIndex < commandsSize ) {
 8006a28:	e265      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
        // Decode Frame MAC commands
        switch ( payload[macIndex++] ) {
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	70fa      	strb	r2, [r7, #3]
 8006a30:	461a      	mov	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4413      	add	r3, r2
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	3b02      	subs	r3, #2
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	f200 8261 	bhi.w	8006f02 <ProcessMacCommands+0x4fa>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <ProcessMacCommands+0x40>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006aa9 	.word	0x08006aa9
 8006a50:	08006b9f 	.word	0x08006b9f
 8006a54:	08006bcd 	.word	0x08006bcd
 8006a58:	08006c9b 	.word	0x08006c9b
 8006a5c:	08006cd1 	.word	0x08006cd1
 8006a60:	08006d95 	.word	0x08006d95
 8006a64:	08006de7 	.word	0x08006de7
 8006a68:	08006e75 	.word	0x08006e75
            case SRV_MAC_LINK_CHECK_ANS:
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	f002 faa3 	bl	8008fb8 <LoRaMacConfirmQueueIsCmdActive>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 823e 	beq.w	8006ef6 <ProcessMacCommands+0x4ee>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f002 fa0f 	bl	8008ea0 <LoRaMacConfirmQueueSetStatus>
                	MlmeConfirm.DemodMargin = payload[macIndex++];
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	70fa      	strb	r2, [r7, #3]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	4bb8      	ldr	r3, [pc, #736]	; (8006d74 <ProcessMacCommands+0x36c>)
 8006a92:	721a      	strb	r2, [r3, #8]
                	MlmeConfirm.NbGateways = payload[macIndex++];
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	70fa      	strb	r2, [r7, #3]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	781a      	ldrb	r2, [r3, #0]
 8006aa2:	4bb4      	ldr	r3, [pc, #720]	; (8006d74 <ProcessMacCommands+0x36c>)
 8006aa4:	725a      	strb	r2, [r3, #9]
                }
                break;
 8006aa6:	e226      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            case SRV_MAC_LINK_ADR_REQ: {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                int8_t linkAdrTxPower = TX_POWER_0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
                uint8_t linkAdrNbRep = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
                uint8_t linkAdrNbBytesParsed = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                // Fill parameter structure
                linkAdrReq.Payload = &payload[macIndex - 1];
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
                linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8006aca:	78ba      	ldrb	r2, [r7, #2]
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
                linkAdrReq.AdrEnabled = AdrCtrlOn;
 8006ada:	4ba7      	ldr	r3, [pc, #668]	; (8006d78 <ProcessMacCommands+0x370>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                linkAdrReq.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8006ae2:	4ba6      	ldr	r3, [pc, #664]	; (8006d7c <ProcessMacCommands+0x374>)
 8006ae4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ae8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                linkAdrReq.CurrentDatarate = LoRaMacParams.ChannelsDatarate;
 8006aec:	4ba3      	ldr	r3, [pc, #652]	; (8006d7c <ProcessMacCommands+0x374>)
 8006aee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                linkAdrReq.CurrentTxPower = LoRaMacParams.ChannelsTxPower;
 8006af6:	4ba1      	ldr	r3, [pc, #644]	; (8006d7c <ProcessMacCommands+0x374>)
 8006af8:	f993 3000 	ldrsb.w	r3, [r3]
 8006afc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                linkAdrReq.CurrentNbRep = LoRaMacParams.ChannelsNbRep;
 8006b00:	4b9e      	ldr	r3, [pc, #632]	; (8006d7c <ProcessMacCommands+0x374>)
 8006b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b06:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
                // Process the ADR requests
                status = RegionLinkAdrReq( LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 8006b0a:	4b9d      	ldr	r3, [pc, #628]	; (8006d80 <ProcessMacCommands+0x378>)
 8006b0c:	7818      	ldrb	r0, [r3, #0]
 8006b0e:	f107 0432 	add.w	r4, r7, #50	; 0x32
 8006b12:	f107 0233 	add.w	r2, r7, #51	; 0x33
 8006b16:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8006b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	4623      	mov	r3, r4
 8006b28:	f003 f943 	bl	8009db2 <RegionLinkAdrReq>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                                           &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );
                //printf("status:%d\r\n",status);

                if ( ( status & 0x07 ) == 0x07 ) {
 8006b32:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b07      	cmp	r3, #7
 8006b3c:	d10c      	bne.n	8006b58 <ProcessMacCommands+0x150>
                    LoRaMacParams.ChannelsDatarate = linkAdrDatarate;
 8006b3e:	f997 2033 	ldrsb.w	r2, [r7, #51]	; 0x33
 8006b42:	4b8e      	ldr	r3, [pc, #568]	; (8006d7c <ProcessMacCommands+0x374>)
 8006b44:	705a      	strb	r2, [r3, #1]
                    //SaveDr();
                    LoRaMacParams.ChannelsTxPower = linkAdrTxPower;
 8006b46:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 8006b4a:	4b8c      	ldr	r3, [pc, #560]	; (8006d7c <ProcessMacCommands+0x374>)
 8006b4c:	701a      	strb	r2, [r3, #0]
                    LoRaMacParams.ChannelsNbRep = linkAdrNbRep;
 8006b4e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8006b52:	4b8a      	ldr	r3, [pc, #552]	; (8006d7c <ProcessMacCommands+0x374>)
 8006b54:	f883 2020 	strb.w	r2, [r3, #32]
                    //lora_printf("ChannelsDatarate:%d ChannelsTxPower:%d,ChannelsNbRep:%d\r\n",LoRaMacParams.ChannelsDatarate,LoRaMacParams.ChannelsTxPower,LoRaMacParams.ChannelsNbRep);
                }

                // Add the answers to the buffer
                for ( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ ) {
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b5e:	e00b      	b.n	8006b78 <ProcessMacCommands+0x170>
                    AddMacCommand( MOTE_MAC_LINK_ADR_ANS, status, 0 );
 8006b60:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006b64:	2200      	movs	r2, #0
 8006b66:	4619      	mov	r1, r3
 8006b68:	2003      	movs	r0, #3
 8006b6a:	f7ff fcf1 	bl	8006550 <AddMacCommand>
                for ( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ ) {
 8006b6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b72:	3301      	adds	r3, #1
 8006b74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006b78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006b7c:	4a81      	ldr	r2, [pc, #516]	; (8006d84 <ProcessMacCommands+0x37c>)
 8006b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d3e8      	bcc.n	8006b60 <ProcessMacCommands+0x158>
                }
                // Update MAC index
                macIndex += linkAdrNbBytesParsed - 1;
 8006b8e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	4413      	add	r3, r2
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8006b9c:	e1ab      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            case SRV_MAC_DUTY_CYCLE_REQ:
                MaxDCycle = payload[macIndex++];
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	70fa      	strb	r2, [r7, #3]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	781a      	ldrb	r2, [r3, #0]
 8006bac:	4b76      	ldr	r3, [pc, #472]	; (8006d88 <ProcessMacCommands+0x380>)
 8006bae:	701a      	strb	r2, [r3, #0]
                AggregatedDCycle = 1 << MaxDCycle;
 8006bb0:	4b75      	ldr	r3, [pc, #468]	; (8006d88 <ProcessMacCommands+0x380>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4093      	lsls	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	4b73      	ldr	r3, [pc, #460]	; (8006d8c <ProcessMacCommands+0x384>)
 8006bbe:	801a      	strh	r2, [r3, #0]
                AddMacCommand( MOTE_MAC_DUTY_CYCLE_ANS, 0, 0 );
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	2004      	movs	r0, #4
 8006bc6:	f7ff fcc3 	bl	8006550 <AddMacCommand>
                break;
 8006bca:	e194      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            case SRV_MAC_RX_PARAM_SETUP_REQ: {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8006bcc:	2307      	movs	r3, #7
 8006bce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	091b      	lsrs	r3, r3, #4
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	b25b      	sxtb	r3, r3
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b25b      	sxtb	r3, r3
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                macIndex++;
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	3301      	adds	r3, #1
 8006c02:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency =  ( uint32_t )payload[macIndex++];
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	70fa      	strb	r2, [r7, #3]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	70fa      	strb	r2, [r7, #3]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	021a      	lsls	r2, r3, #8
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	4313      	orrs	r3, r2
 8006c28:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	70fa      	strb	r2, [r7, #3]
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	041a      	lsls	r2, r3, #16
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                rxParamSetupReq.Frequency *= 100;
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2264      	movs	r2, #100	; 0x64
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c

                // Perform request on region
                status = RegionRxParamSetupReq( LoRaMacRegion, &rxParamSetupReq );
 8006c4a:	4b4d      	ldr	r3, [pc, #308]	; (8006d80 <ProcessMacCommands+0x378>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f003 f8c6 	bl	8009de6 <RegionRxParamSetupReq>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if ( ( status & 0x07 ) == 0x07 ) {
 8006c60:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	2b07      	cmp	r3, #7
 8006c6a:	d10e      	bne.n	8006c8a <ProcessMacCommands+0x282>
                    LoRaMacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8006c6c:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	4b42      	ldr	r3, [pc, #264]	; (8006d7c <ProcessMacCommands+0x374>)
 8006c74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    LoRaMacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	4a40      	ldr	r2, [pc, #256]	; (8006d7c <ProcessMacCommands+0x374>)
 8006c7c:	6253      	str	r3, [r2, #36]	; 0x24
                    LoRaMacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8006c7e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <ProcessMacCommands+0x374>)
 8006c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
                }
                AddMacCommand( MOTE_MAC_RX_PARAM_SETUP_ANS, status, 0 );
 8006c8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4619      	mov	r1, r3
 8006c92:	2005      	movs	r0, #5
 8006c94:	f7ff fc5c 	bl	8006550 <AddMacCommand>
            }
            break;
 8006c98:	e12d      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            case SRV_MAC_DEV_STATUS_REQ: {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8006c9a:	23ff      	movs	r3, #255	; 0xff
 8006c9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                if ( ( LoRaMacCallbacks != NULL ) && ( LoRaMacCallbacks->GetBatteryLevel != NULL ) ) {
 8006ca0:	4b3b      	ldr	r3, [pc, #236]	; (8006d90 <ProcessMacCommands+0x388>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <ProcessMacCommands+0x2b8>
 8006ca8:	4b39      	ldr	r3, [pc, #228]	; (8006d90 <ProcessMacCommands+0x388>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d006      	beq.n	8006cc0 <ProcessMacCommands+0x2b8>
                    batteryLevel = LoRaMacCallbacks->GetBatteryLevel( );
 8006cb2:	4b37      	ldr	r3, [pc, #220]	; (8006d90 <ProcessMacCommands+0x388>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4798      	blx	r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
                }
#ifdef LORAMAC_CLASSB_TESTCASE
                DBG_PRINTF("receive SRV_MAC_DEV_STATUS_REQ\r\n");
#endif
                AddMacCommand( MOTE_MAC_DEV_STATUS_ANS, batteryLevel, snr );
 8006cc0:	787a      	ldrb	r2, [r7, #1]
 8006cc2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	2006      	movs	r0, #6
 8006cca:	f7ff fc41 	bl	8006550 <AddMacCommand>
                break;
 8006cce:	e112      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            }
            case SRV_MAC_NEW_CHANNEL_REQ: {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                newChannelReq.ChannelId = payload[macIndex++];
 8006cd6:	78fb      	ldrb	r3, [r7, #3]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	70fa      	strb	r2, [r7, #3]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                newChannelReq.NewChannel = &chParam;
 8006cea:	f107 0314 	add.w	r3, r7, #20
 8006cee:	623b      	str	r3, [r7, #32]

                chParam.Frequency = ( uint32_t )payload[macIndex++];
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	70fa      	strb	r2, [r7, #3]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
                chParam.Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	70fa      	strb	r2, [r7, #3]
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]
                chParam.Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	70fa      	strb	r2, [r7, #3]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4413      	add	r3, r2
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	041a      	lsls	r2, r3, #16
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
                chParam.Frequency *= 100;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2264      	movs	r2, #100	; 0x64
 8006d30:	fb02 f303 	mul.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]
                chParam.Rx1Frequency = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61bb      	str	r3, [r7, #24]
                chParam.DrRange.Value = payload[macIndex++];
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	70fa      	strb	r2, [r7, #3]
 8006d40:	461a      	mov	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	773b      	strb	r3, [r7, #28]

                status = RegionNewChannelReq( LoRaMacRegion, &newChannelReq );
 8006d4c:	4b0c      	ldr	r3, [pc, #48]	; (8006d80 <ProcessMacCommands+0x378>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	f107 0220 	add.w	r2, r7, #32
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f003 f858 	bl	8009e0c <RegionNewChannelReq>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                AddMacCommand( MOTE_MAC_NEW_CHANNEL_ANS, status, 0 );
 8006d62:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006d66:	2200      	movs	r2, #0
 8006d68:	4619      	mov	r1, r3
 8006d6a:	2007      	movs	r0, #7
 8006d6c:	f7ff fbf0 	bl	8006550 <AddMacCommand>
            }
            break;
 8006d70:	e0c1      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
 8006d72:	bf00      	nop
 8006d74:	20000984 	.word	0x20000984
 8006d78:	2000035a 	.word	0x2000035a
 8006d7c:	20000a68 	.word	0x20000a68
 8006d80:	20000110 	.word	0x20000110
 8006d84:	cccccccd 	.word	0xcccccccd
 8006d88:	20000469 	.word	0x20000469
 8006d8c:	2000046a 	.word	0x2000046a
 8006d90:	20000498 	.word	0x20000498
            case SRV_MAC_RX_TIMING_SETUP_REQ: {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	70fa      	strb	r2, [r7, #3]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4413      	add	r3, r2
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

                if ( delay == 0 ) {
 8006daa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <ProcessMacCommands+0x3b4>
                    delay++;
 8006db2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006db6:	3301      	adds	r3, #1
 8006db8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                }
                LoRaMacParams.ReceiveDelay1 = delay * 1000;
 8006dbc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b50      	ldr	r3, [pc, #320]	; (8006f0c <ProcessMacCommands+0x504>)
 8006dcc:	611a      	str	r2, [r3, #16]
                LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 8006dce:	4b4f      	ldr	r3, [pc, #316]	; (8006f0c <ProcessMacCommands+0x504>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006dd6:	4a4d      	ldr	r2, [pc, #308]	; (8006f0c <ProcessMacCommands+0x504>)
 8006dd8:	6153      	str	r3, [r2, #20]
                AddMacCommand( MOTE_MAC_RX_TIMING_SETUP_ANS, 0, 0 );
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	2008      	movs	r0, #8
 8006de0:	f7ff fbb6 	bl	8006550 <AddMacCommand>
            }
            break;
 8006de4:	e087      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            case SRV_MAC_TX_PARAM_SETUP_REQ: {
                TxParamSetupReqParams_t txParamSetupReq;
                uint8_t eirpDwellTime = payload[macIndex++];
 8006de6:	78fb      	ldrb	r3, [r7, #3]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	70fa      	strb	r2, [r7, #3]
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

                txParamSetupReq.UplinkDwellTime = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	743b      	strb	r3, [r7, #16]
                txParamSetupReq.DownlinkDwellTime = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	747b      	strb	r3, [r7, #17]

                if ( ( eirpDwellTime & 0x20 ) == 0x20 ) {
 8006e00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <ProcessMacCommands+0x408>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	747b      	strb	r3, [r7, #17]
                }
                if ( ( eirpDwellTime & 0x10 ) == 0x10 ) {
 8006e10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <ProcessMacCommands+0x418>
                    txParamSetupReq.UplinkDwellTime = 1;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	743b      	strb	r3, [r7, #16]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8006e20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	74bb      	strb	r3, [r7, #18]

                // Check the status for correctness
                if ( RegionTxParamSetupReq( LoRaMacRegion, &txParamSetupReq ) != -1 ) {
 8006e2c:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <ProcessMacCommands+0x508>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f107 0210 	add.w	r2, r7, #16
 8006e34:	4611      	mov	r1, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f002 fffb 	bl	8009e32 <RegionTxParamSetupReq>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e42:	d058      	beq.n	8006ef6 <ProcessMacCommands+0x4ee>
                    // Accept command
                    LoRaMacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8006e44:	7c3a      	ldrb	r2, [r7, #16]
 8006e46:	4b31      	ldr	r3, [pc, #196]	; (8006f0c <ProcessMacCommands+0x504>)
 8006e48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    LoRaMacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8006e4c:	7c7a      	ldrb	r2, [r7, #17]
 8006e4e:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <ProcessMacCommands+0x504>)
 8006e50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                    LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8006e54:	7cbb      	ldrb	r3, [r7, #18]
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b2e      	ldr	r3, [pc, #184]	; (8006f14 <ProcessMacCommands+0x50c>)
 8006e5a:	5c9b      	ldrb	r3, [r3, r2]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7f9 fee3 	bl	8000c28 <__aeabi_ui2f>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a29      	ldr	r2, [pc, #164]	; (8006f0c <ProcessMacCommands+0x504>)
 8006e66:	6313      	str	r3, [r2, #48]	; 0x30
                    // Add command response
                    AddMacCommand( MOTE_MAC_TX_PARAM_SETUP_ANS, 0, 0 );
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	2009      	movs	r0, #9
 8006e6e:	f7ff fb6f 	bl	8006550 <AddMacCommand>
                }
            }
            break;
 8006e72:	e040      	b.n	8006ef6 <ProcessMacCommands+0x4ee>
            case SRV_MAC_DL_CHANNEL_REQ: {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8006e74:	2303      	movs	r3, #3
 8006e76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                dlChannelReq.ChannelId = payload[macIndex++];
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	70fa      	strb	r2, [r7, #3]
 8006e80:	461a      	mov	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4413      	add	r3, r2
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	723b      	strb	r3, [r7, #8]
                dlChannelReq.Rx1Frequency = ( uint32_t )payload[macIndex++];
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	1c5a      	adds	r2, r3, #1
 8006e8e:	70fa      	strb	r2, [r7, #3]
 8006e90:	461a      	mov	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4413      	add	r3, r2
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 8;
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	70fa      	strb	r2, [r7, #3]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	021a      	lsls	r2, r3, #8
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency |= ( uint32_t )payload[macIndex++] << 16;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	70fa      	strb	r2, [r7, #3]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	041a      	lsls	r2, r3, #16
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
                dlChannelReq.Rx1Frequency *= 100;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2264      	movs	r2, #100	; 0x64
 8006eca:	fb02 f303 	mul.w	r3, r2, r3
 8006ece:	60fb      	str	r3, [r7, #12]

                status = RegionDlChannelReq( LoRaMacRegion, &dlChannelReq );
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <ProcessMacCommands+0x508>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f107 0208 	add.w	r2, r7, #8
 8006ed8:	4611      	mov	r1, r2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f002 ffbc 	bl	8009e58 <RegionDlChannelReq>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                AddMacCommand( MOTE_MAC_DL_CHANNEL_ANS, status, 0 );
 8006ee6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8006eea:	2200      	movs	r2, #0
 8006eec:	4619      	mov	r1, r3
 8006eee:	200a      	movs	r0, #10
 8006ef0:	f7ff fb2e 	bl	8006550 <AddMacCommand>
            }
            break;
 8006ef4:	bf00      	nop
    while ( macIndex < commandsSize ) {
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	78bb      	ldrb	r3, [r7, #2]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	f4ff ad95 	bcc.w	8006a2a <ProcessMacCommands+0x22>
 8006f00:	e000      	b.n	8006f04 <ProcessMacCommands+0x4fc>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8006f02:	bf00      	nop
        }
    }
}
 8006f04:	374c      	adds	r7, #76	; 0x4c
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd90      	pop	{r4, r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000a68 	.word	0x20000a68
 8006f10:	20000110 	.word	0x20000110
 8006f14:	080124a4 	.word	0x080124a4

08006f18 <Send>:


LoRaMacStatus_t Send( LoRaMacHeader_t *macHdr, uint8_t fPort, void *fBuffer, uint16_t fBufferSize )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	461a      	mov	r2, r3
 8006f24:	460b      	mov	r3, r1
 8006f26:	72fb      	strb	r3, [r7, #11]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	75fb      	strb	r3, [r7, #23]

    fCtrl.Value = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.FOptsLen      = 0;
 8006f34:	7d3b      	ldrb	r3, [r7, #20]
 8006f36:	f36f 0303 	bfc	r3, #0, #4
 8006f3a:	753b      	strb	r3, [r7, #20]
    if( LoRaMacDeviceClass == CLASS_B )
 8006f3c:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <Send+0xa0>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d104      	bne.n	8006f4e <Send+0x36>
    {
        fCtrl.Bits.FPending      = 1;
 8006f44:	7d3b      	ldrb	r3, [r7, #20]
 8006f46:	f043 0310 	orr.w	r3, r3, #16
 8006f4a:	753b      	strb	r3, [r7, #20]
 8006f4c:	e003      	b.n	8006f56 <Send+0x3e>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8006f4e:	7d3b      	ldrb	r3, [r7, #20]
 8006f50:	f36f 1304 	bfc	r3, #4, #1
 8006f54:	753b      	strb	r3, [r7, #20]
    }
    fCtrl.Bits.Ack           = false;
 8006f56:	7d3b      	ldrb	r3, [r7, #20]
 8006f58:	f36f 1345 	bfc	r3, #5, #1
 8006f5c:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq     = false;
 8006f5e:	7d3b      	ldrb	r3, [r7, #20]
 8006f60:	f36f 1386 	bfc	r3, #6, #1
 8006f64:	753b      	strb	r3, [r7, #20]
    fCtrl.Bits.Adr           = AdrCtrlOn;
 8006f66:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <Send+0xa4>)
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	7d3b      	ldrb	r3, [r7, #20]
 8006f6c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006f70:	753b      	strb	r3, [r7, #20]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8006f72:	7afa      	ldrb	r2, [r7, #11]
 8006f74:	f107 0114 	add.w	r1, r7, #20
 8006f78:	893b      	ldrh	r3, [r7, #8]
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fa04 	bl	800738c <PrepareFrame>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]

    // Validate status
    if ( status != LORAMAC_STATUS_OK ) {
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <Send+0x7a>
        return status;
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	e00e      	b.n	8006fb0 <Send+0x98>
    }

    // Reset confirm parameters
    McpsConfirm.NbRetries = 0;
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <Send+0xa8>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	715a      	strb	r2, [r3, #5]
    McpsConfirm.AckReceived = false;
 8006f98:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <Send+0xa8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	711a      	strb	r2, [r3, #4]
    McpsConfirm.UpLinkCounter = UpLinkCounter;
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <Send+0xac>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a07      	ldr	r2, [pc, #28]	; (8006fc0 <Send+0xa8>)
 8006fa4:	60d3      	str	r3, [r2, #12]

    status = ScheduleTx( );
 8006fa6:	f000 f80f 	bl	8006fc8 <ScheduleTx>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]

    return status;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000148 	.word	0x20000148
 8006fbc:	2000035a 	.word	0x2000035a
 8006fc0:	200009b0 	.word	0x200009b0
 8006fc4:	20000350 	.word	0x20000350

08006fc8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( void )
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af02      	add	r7, sp, #8
    TimerTime_t dutyCycleTimeOff = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
    NextChanParams_t nextChan;

    // Check if the device is off
    if ( MaxDCycle == 255 ) {
 8006fd2:	4b5c      	ldr	r3, [pc, #368]	; (8007144 <ScheduleTx+0x17c>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2bff      	cmp	r3, #255	; 0xff
 8006fd8:	d101      	bne.n	8006fde <ScheduleTx+0x16>
        return LORAMAC_STATUS_DEVICE_OFF;
 8006fda:	2309      	movs	r3, #9
 8006fdc:	e0ad      	b.n	800713a <ScheduleTx+0x172>
    }
    if ( MaxDCycle == 0 ) {
 8006fde:	4b59      	ldr	r3, [pc, #356]	; (8007144 <ScheduleTx+0x17c>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <ScheduleTx+0x24>
        AggregatedTimeOff = 0;
 8006fe6:	4b58      	ldr	r3, [pc, #352]	; (8007148 <ScheduleTx+0x180>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
    }

    // Update Backoff
    CalculateBackOff( LastTxChannel );
 8006fec:	4b57      	ldr	r3, [pc, #348]	; (800714c <ScheduleTx+0x184>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f8cb 	bl	800718c <CalculateBackOff>

    nextChan.AggrTimeOff = AggregatedTimeOff;
 8006ff6:	4b54      	ldr	r3, [pc, #336]	; (8007148 <ScheduleTx+0x180>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	603b      	str	r3, [r7, #0]
    nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8006ffc:	4b54      	ldr	r3, [pc, #336]	; (8007150 <ScheduleTx+0x188>)
 8006ffe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007002:	723b      	strb	r3, [r7, #8]
    nextChan.DutyCycleEnabled = DutyCycleOn;
 8007004:	4b53      	ldr	r3, [pc, #332]	; (8007154 <ScheduleTx+0x18c>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	72bb      	strb	r3, [r7, #10]
    nextChan.Joined = IsLoRaMacNetworkJoined;
 800700a:	4b53      	ldr	r3, [pc, #332]	; (8007158 <ScheduleTx+0x190>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	727b      	strb	r3, [r7, #9]
    nextChan.LastAggrTx = AggregatedLastTxDoneTime;
 8007010:	4b52      	ldr	r3, [pc, #328]	; (800715c <ScheduleTx+0x194>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	607b      	str	r3, [r7, #4]

    // Select channel
    while ( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false ) {
 8007016:	e008      	b.n	800702a <ScheduleTx+0x62>
        // Set the default datarate
        LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8007018:	4b51      	ldr	r3, [pc, #324]	; (8007160 <ScheduleTx+0x198>)
 800701a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800701e:	4b4c      	ldr	r3, [pc, #304]	; (8007150 <ScheduleTx+0x188>)
 8007020:	705a      	strb	r2, [r3, #1]
        // Update datarate in the function parameters
        nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 8007022:	4b4b      	ldr	r3, [pc, #300]	; (8007150 <ScheduleTx+0x188>)
 8007024:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007028:	723b      	strb	r3, [r7, #8]
    while ( RegionNextChannel( LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff ) == false ) {
 800702a:	4b4e      	ldr	r3, [pc, #312]	; (8007164 <ScheduleTx+0x19c>)
 800702c:	7818      	ldrb	r0, [r3, #0]
 800702e:	f107 030c 	add.w	r3, r7, #12
 8007032:	4639      	mov	r1, r7
 8007034:	4a44      	ldr	r2, [pc, #272]	; (8007148 <ScheduleTx+0x180>)
 8007036:	9200      	str	r2, [sp, #0]
 8007038:	4a4b      	ldr	r2, [pc, #300]	; (8007168 <ScheduleTx+0x1a0>)
 800703a:	f002 ff45 	bl	8009ec8 <RegionNextChannel>
 800703e:	4603      	mov	r3, r0
 8007040:	f083 0301 	eor.w	r3, r3, #1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <ScheduleTx+0x50>
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( LoRaMacRegion,
 800704a:	4b46      	ldr	r3, [pc, #280]	; (8007164 <ScheduleTx+0x19c>)
 800704c:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate,
 800704e:	4b45      	ldr	r3, [pc, #276]	; (8007164 <ScheduleTx+0x19c>)
 8007050:	7818      	ldrb	r0, [r3, #0]
 8007052:	4b3f      	ldr	r3, [pc, #252]	; (8007150 <ScheduleTx+0x188>)
 8007054:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8007058:	4b3d      	ldr	r3, [pc, #244]	; (8007150 <ScheduleTx+0x188>)
 800705a:	f993 2001 	ldrsb.w	r2, [r3, #1]
                                                          LoRaMacParams.Rx1DrOffset ),
 800705e:	4b3c      	ldr	r3, [pc, #240]	; (8007150 <ScheduleTx+0x188>)
 8007060:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
                                     RegionApplyDrOffset( LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate,
 8007064:	b25b      	sxtb	r3, r3
 8007066:	f002 ff6c 	bl	8009f42 <RegionApplyDrOffset>
 800706a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( LoRaMacRegion,
 800706c:	b259      	sxtb	r1, r3
 800706e:	4b38      	ldr	r3, [pc, #224]	; (8007150 <ScheduleTx+0x188>)
 8007070:	7a1a      	ldrb	r2, [r3, #8]
 8007072:	4b37      	ldr	r3, [pc, #220]	; (8007150 <ScheduleTx+0x188>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	483d      	ldr	r0, [pc, #244]	; (800716c <ScheduleTx+0x1a4>)
 8007078:	9000      	str	r0, [sp, #0]
 800707a:	4620      	mov	r0, r4
 800707c:	f002 fe53 	bl	8009d26 <RegionComputeRxWindowParameters>
                                     LoRaMacParams.MinRxSymbols,
                                     LoRaMacParams.SystemMaxRxError,
                                     &RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( LoRaMacRegion,
 8007080:	4b38      	ldr	r3, [pc, #224]	; (8007164 <ScheduleTx+0x19c>)
 8007082:	7818      	ldrb	r0, [r3, #0]
                                     LoRaMacParams.Rx2Channel.Datarate,
 8007084:	4b32      	ldr	r3, [pc, #200]	; (8007150 <ScheduleTx+0x188>)
 8007086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    RegionComputeRxWindowParameters( LoRaMacRegion,
 800708a:	b259      	sxtb	r1, r3
 800708c:	4b30      	ldr	r3, [pc, #192]	; (8007150 <ScheduleTx+0x188>)
 800708e:	7a1a      	ldrb	r2, [r3, #8]
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <ScheduleTx+0x188>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	4c36      	ldr	r4, [pc, #216]	; (8007170 <ScheduleTx+0x1a8>)
 8007096:	9400      	str	r4, [sp, #0]
 8007098:	f002 fe45 	bl	8009d26 <RegionComputeRxWindowParameters>
                                     LoRaMacParams.MinRxSymbols,
                                     LoRaMacParams.SystemMaxRxError,
                                     &RxWindow2Config );

    if ( IsLoRaMacNetworkJoined == false ) {
 800709c:	4b2e      	ldr	r3, [pc, #184]	; (8007158 <ScheduleTx+0x190>)
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	f083 0301 	eor.w	r3, r3, #1
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00e      	beq.n	80070c8 <ScheduleTx+0x100>
        RxWindow1Delay = LoRaMacParams.JoinAcceptDelay1 + RxWindow1Config.WindowOffset;
 80070aa:	4b29      	ldr	r3, [pc, #164]	; (8007150 <ScheduleTx+0x188>)
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	4a2f      	ldr	r2, [pc, #188]	; (800716c <ScheduleTx+0x1a4>)
 80070b0:	68d2      	ldr	r2, [r2, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <ScheduleTx+0x1ac>)
 80070b6:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.JoinAcceptDelay2 + RxWindow2Config.WindowOffset;
 80070b8:	4b25      	ldr	r3, [pc, #148]	; (8007150 <ScheduleTx+0x188>)
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <ScheduleTx+0x1a8>)
 80070be:	68d2      	ldr	r2, [r2, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	4a2d      	ldr	r2, [pc, #180]	; (8007178 <ScheduleTx+0x1b0>)
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e01f      	b.n	8007108 <ScheduleTx+0x140>
    } else {
        if ( ValidatePayloadLength( LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex ) == false ) {
 80070c8:	4b2c      	ldr	r3, [pc, #176]	; (800717c <ScheduleTx+0x1b4>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4a20      	ldr	r2, [pc, #128]	; (8007150 <ScheduleTx+0x188>)
 80070ce:	f992 1001 	ldrsb.w	r1, [r2, #1]
 80070d2:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <ScheduleTx+0x1b8>)
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff f9cc 	bl	8006474 <ValidatePayloadLength>
 80070dc:	4603      	mov	r3, r0
 80070de:	f083 0301 	eor.w	r3, r3, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <ScheduleTx+0x124>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80070e8:	2308      	movs	r3, #8
 80070ea:	e026      	b.n	800713a <ScheduleTx+0x172>
        }
        RxWindow1Delay = LoRaMacParams.ReceiveDelay1 + RxWindow1Config.WindowOffset;
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <ScheduleTx+0x188>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	4a1e      	ldr	r2, [pc, #120]	; (800716c <ScheduleTx+0x1a4>)
 80070f2:	68d2      	ldr	r2, [r2, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	4a1f      	ldr	r2, [pc, #124]	; (8007174 <ScheduleTx+0x1ac>)
 80070f8:	6013      	str	r3, [r2, #0]
        RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <ScheduleTx+0x188>)
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <ScheduleTx+0x1a8>)
 8007100:	68d2      	ldr	r2, [r2, #12]
 8007102:	4413      	add	r3, r2
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <ScheduleTx+0x1b0>)
 8007106:	6013      	str	r3, [r2, #0]
    }

    // Schedule transmission of frame
    if ( dutyCycleTimeOff == 0 ) {
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <ScheduleTx+0x154>
        // Try to send now
        return SendFrameOnChannel( Channel );
 800710e:	4b16      	ldr	r3, [pc, #88]	; (8007168 <ScheduleTx+0x1a0>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fc18 	bl	8007948 <SendFrameOnChannel>
 8007118:	4603      	mov	r3, r0
 800711a:	e00e      	b.n	800713a <ScheduleTx+0x172>
    } else {
        // Send later - prepare timer
        LoRaMacState |= LORAMAC_TX_DELAYED;
 800711c:	4b19      	ldr	r3, [pc, #100]	; (8007184 <ScheduleTx+0x1bc>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f043 0310 	orr.w	r3, r3, #16
 8007124:	4a17      	ldr	r2, [pc, #92]	; (8007184 <ScheduleTx+0x1bc>)
 8007126:	6013      	str	r3, [r2, #0]
        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4619      	mov	r1, r3
 800712c:	4816      	ldr	r0, [pc, #88]	; (8007188 <ScheduleTx+0x1c0>)
 800712e:	f009 f9db 	bl	80104e8 <TimerSetValue>
        TimerStart( &TxDelayedTimer );
 8007132:	4815      	ldr	r0, [pc, #84]	; (8007188 <ScheduleTx+0x1c0>)
 8007134:	f008 ffd4 	bl	80100e0 <TimerStart>

        return LORAMAC_STATUS_OK;
 8007138:	2300      	movs	r3, #0
    }
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bd90      	pop	{r4, r7, pc}
 8007142:	bf00      	nop
 8007144:	20000469 	.word	0x20000469
 8007148:	20000470 	.word	0x20000470
 800714c:	20000476 	.word	0x20000476
 8007150:	20000a68 	.word	0x20000a68
 8007154:	20000474 	.word	0x20000474
 8007158:	20000359 	.word	0x20000359
 800715c:	2000046c 	.word	0x2000046c
 8007160:	20000a0c 	.word	0x20000a0c
 8007164:	20000110 	.word	0x20000110
 8007168:	20000475 	.word	0x20000475
 800716c:	200009c4 	.word	0x200009c4
 8007170:	20000ad4 	.word	0x20000ad4
 8007174:	20000a60 	.word	0x20000a60
 8007178:	20000ae8 	.word	0x20000ae8
 800717c:	2000024e 	.word	0x2000024e
 8007180:	20000363 	.word	0x20000363
 8007184:	2000047c 	.word	0x2000047c
 8007188:	20000a4c 	.word	0x20000a4c

0800718c <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	71fb      	strb	r3, [r7, #7]
    CalcBackOffParams_t calcBackOff;

    calcBackOff.Joined = IsLoRaMacNetworkJoined;
 8007196:	4b15      	ldr	r3, [pc, #84]	; (80071ec <CalculateBackOff+0x60>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	733b      	strb	r3, [r7, #12]
    calcBackOff.DutyCycleEnabled = DutyCycleOn;
 800719c:	4b14      	ldr	r3, [pc, #80]	; (80071f0 <CalculateBackOff+0x64>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	73bb      	strb	r3, [r7, #14]
    calcBackOff.Channel = channel;
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	73fb      	strb	r3, [r7, #15]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( LoRaMacInitializationTime );
 80071a6:	4b13      	ldr	r3, [pc, #76]	; (80071f4 <CalculateBackOff+0x68>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f009 f9bc 	bl	8010528 <TimerGetElapsedTime>
 80071b0:	4603      	mov	r3, r0
 80071b2:	613b      	str	r3, [r7, #16]
    calcBackOff.TxTimeOnAir = TxTimeOnAir;
 80071b4:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <CalculateBackOff+0x6c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	617b      	str	r3, [r7, #20]
    calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 80071ba:	4b10      	ldr	r3, [pc, #64]	; (80071fc <CalculateBackOff+0x70>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	737b      	strb	r3, [r7, #13]

    // Update regional back-off
    RegionCalcBackOff( LoRaMacRegion, &calcBackOff );
 80071c0:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <CalculateBackOff+0x74>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f107 020c 	add.w	r2, r7, #12
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 fe6a 	bl	8009ea4 <RegionCalcBackOff>

    // Update aggregated time-off
    AggregatedTimeOff = TxTimeOnAir * AggregatedDCycle - TxTimeOnAir;
 80071d0:	4b0c      	ldr	r3, [pc, #48]	; (8007204 <CalculateBackOff+0x78>)
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	4a08      	ldr	r2, [pc, #32]	; (80071f8 <CalculateBackOff+0x6c>)
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	4a0a      	ldr	r2, [pc, #40]	; (8007208 <CalculateBackOff+0x7c>)
 80071e0:	6013      	str	r3, [r2, #0]
}
 80071e2:	bf00      	nop
 80071e4:	3718      	adds	r7, #24
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000359 	.word	0x20000359
 80071f0:	20000474 	.word	0x20000474
 80071f4:	20000478 	.word	0x20000478
 80071f8:	200004bc 	.word	0x200004bc
 80071fc:	20000477 	.word	0x20000477
 8007200:	20000110 	.word	0x20000110
 8007204:	2000046a 	.word	0x2000046a
 8007208:	20000470 	.word	0x20000470

0800720c <ResetMacParameters>:

static void ResetMacParameters( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
    IsLoRaMacNetworkJoined = false;
 8007212:	4b3b      	ldr	r3, [pc, #236]	; (8007300 <ResetMacParameters+0xf4>)
 8007214:	2200      	movs	r2, #0
 8007216:	701a      	strb	r2, [r3, #0]

    // Counters
    UpLinkCounter = 0;
 8007218:	4b3a      	ldr	r3, [pc, #232]	; (8007304 <ResetMacParameters+0xf8>)
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
    DownLinkCounter = -1;
 800721e:	4b3a      	ldr	r3, [pc, #232]	; (8007308 <ResetMacParameters+0xfc>)
 8007220:	f04f 32ff 	mov.w	r2, #4294967295
 8007224:	601a      	str	r2, [r3, #0]
    AdrAckCounter = 0;
 8007226:	4b39      	ldr	r3, [pc, #228]	; (800730c <ResetMacParameters+0x100>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]

    ChannelsNbRepCounter = 0;
 800722c:	4b38      	ldr	r3, [pc, #224]	; (8007310 <ResetMacParameters+0x104>)
 800722e:	2200      	movs	r2, #0
 8007230:	701a      	strb	r2, [r3, #0]

    AckTimeoutRetries = 1;
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <ResetMacParameters+0x108>)
 8007234:	2201      	movs	r2, #1
 8007236:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetriesCounter = 1;
 8007238:	4b37      	ldr	r3, [pc, #220]	; (8007318 <ResetMacParameters+0x10c>)
 800723a:	2201      	movs	r2, #1
 800723c:	701a      	strb	r2, [r3, #0]
    AckTimeoutRetry = false;
 800723e:	4b37      	ldr	r3, [pc, #220]	; (800731c <ResetMacParameters+0x110>)
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]

    MaxDCycle = 0;
 8007244:	4b36      	ldr	r3, [pc, #216]	; (8007320 <ResetMacParameters+0x114>)
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
    AggregatedDCycle = 1;
 800724a:	4b36      	ldr	r3, [pc, #216]	; (8007324 <ResetMacParameters+0x118>)
 800724c:	2201      	movs	r2, #1
 800724e:	801a      	strh	r2, [r3, #0]

    MacCommandsBufferIndex = 0;
 8007250:	4b35      	ldr	r3, [pc, #212]	; (8007328 <ResetMacParameters+0x11c>)
 8007252:	2200      	movs	r2, #0
 8007254:	701a      	strb	r2, [r3, #0]
    MacCommandsBufferToRepeatIndex = 0;
 8007256:	4b35      	ldr	r3, [pc, #212]	; (800732c <ResetMacParameters+0x120>)
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]

    IsRxWindowsEnabled = true;
 800725c:	4b34      	ldr	r3, [pc, #208]	; (8007330 <ResetMacParameters+0x124>)
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]

    LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <ResetMacParameters+0x128>)
 8007264:	f993 2000 	ldrsb.w	r2, [r3]
 8007268:	4b33      	ldr	r3, [pc, #204]	; (8007338 <ResetMacParameters+0x12c>)
 800726a:	701a      	strb	r2, [r3, #0]
    LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800726c:	4b31      	ldr	r3, [pc, #196]	; (8007334 <ResetMacParameters+0x128>)
 800726e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8007272:	4b31      	ldr	r3, [pc, #196]	; (8007338 <ResetMacParameters+0x12c>)
 8007274:	705a      	strb	r2, [r3, #1]
    LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 8007276:	4b2f      	ldr	r3, [pc, #188]	; (8007334 <ResetMacParameters+0x128>)
 8007278:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800727c:	4b2e      	ldr	r3, [pc, #184]	; (8007338 <ResetMacParameters+0x12c>)
 800727e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    memcpy(&LoRaMacParams.Rx2Channel, &LoRaMacParamsDefaults.Rx2Channel, sizeof(LoRaMacParams.Rx2Channel));
 8007282:	4b2d      	ldr	r3, [pc, #180]	; (8007338 <ResetMacParameters+0x12c>)
 8007284:	4a2b      	ldr	r2, [pc, #172]	; (8007334 <ResetMacParameters+0x128>)
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	3224      	adds	r2, #36	; 0x24
 800728a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800728e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacParams.UplinkDwellTime = LoRaMacParamsDefaults.UplinkDwellTime;
 8007292:	4b28      	ldr	r3, [pc, #160]	; (8007334 <ResetMacParameters+0x128>)
 8007294:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007298:	4b27      	ldr	r3, [pc, #156]	; (8007338 <ResetMacParameters+0x12c>)
 800729a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    LoRaMacParams.DownlinkDwellTime = LoRaMacParamsDefaults.DownlinkDwellTime;
 800729e:	4b25      	ldr	r3, [pc, #148]	; (8007334 <ResetMacParameters+0x128>)
 80072a0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80072a4:	4b24      	ldr	r3, [pc, #144]	; (8007338 <ResetMacParameters+0x12c>)
 80072a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 80072aa:	4b22      	ldr	r3, [pc, #136]	; (8007334 <ResetMacParameters+0x128>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	4a22      	ldr	r2, [pc, #136]	; (8007338 <ResetMacParameters+0x12c>)
 80072b0:	6313      	str	r3, [r2, #48]	; 0x30
    LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 80072b2:	4b20      	ldr	r3, [pc, #128]	; (8007334 <ResetMacParameters+0x128>)
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	4a20      	ldr	r2, [pc, #128]	; (8007338 <ResetMacParameters+0x12c>)
 80072b8:	6353      	str	r3, [r2, #52]	; 0x34

    NodeAckRequested = false;
 80072ba:	4b20      	ldr	r3, [pc, #128]	; (800733c <ResetMacParameters+0x130>)
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
    SrvAckRequested = false;
 80072c0:	4b1f      	ldr	r3, [pc, #124]	; (8007340 <ResetMacParameters+0x134>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
    MacCommandsInNextTx = false;
 80072c6:	4b1f      	ldr	r3, [pc, #124]	; (8007344 <ResetMacParameters+0x138>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]

    // Reset Multicast downlink counters
    MulticastParams_t *cur = MulticastChannels;
 80072cc:	4b1e      	ldr	r3, [pc, #120]	; (8007348 <ResetMacParameters+0x13c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	607b      	str	r3, [r7, #4]
    while ( cur != NULL ) {
 80072d2:	e005      	b.n	80072e0 <ResetMacParameters+0xd4>
        cur->DownLinkCounter = 0;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24
        cur = cur->Next;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	607b      	str	r3, [r7, #4]
    while ( cur != NULL ) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f6      	bne.n	80072d4 <ResetMacParameters+0xc8>
    }

    // Initialize channel index.
    Channel = 0;
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <ResetMacParameters+0x140>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
    LastTxChannel = Channel;
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <ResetMacParameters+0x140>)
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	4b17      	ldr	r3, [pc, #92]	; (8007350 <ResetMacParameters+0x144>)
 80072f2:	701a      	strb	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	20000359 	.word	0x20000359
 8007304:	20000350 	.word	0x20000350
 8007308:	20000354 	.word	0x20000354
 800730c:	2000035c 	.word	0x2000035c
 8007310:	20000468 	.word	0x20000468
 8007314:	20000009 	.word	0x20000009
 8007318:	2000000a 	.word	0x2000000a
 800731c:	200004b8 	.word	0x200004b8
 8007320:	20000469 	.word	0x20000469
 8007324:	2000046a 	.word	0x2000046a
 8007328:	20000363 	.word	0x20000363
 800732c:	20000364 	.word	0x20000364
 8007330:	20000008 	.word	0x20000008
 8007334:	20000a0c 	.word	0x20000a0c
 8007338:	20000a68 	.word	0x20000a68
 800733c:	20000360 	.word	0x20000360
 8007340:	20000361 	.word	0x20000361
 8007344:	20000362 	.word	0x20000362
 8007348:	20000144 	.word	0x20000144
 800734c:	20000475 	.word	0x20000475
 8007350:	20000476 	.word	0x20000476

08007354 <IsFPortAllowed>:

static bool IsFPortAllowed( uint8_t fPort )
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]
    if( fPort > 224 )
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	2be0      	cmp	r3, #224	; 0xe0
 8007362:	d901      	bls.n	8007368 <IsFPortAllowed+0x14>
    {
        return false;
 8007364:	2300      	movs	r3, #0
 8007366:	e000      	b.n	800736a <IsFPortAllowed+0x16>
    }
    return true;
 8007368:	2301      	movs	r3, #1
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <OpenContinuousRx2Window>:

static void OpenContinuousRx2Window( void )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
    OnRxWindow2TimerEvent( );
 8007378:	f7fe ff6a 	bl	8006250 <OnRxWindow2TimerEvent>
    RxSlot = RX_SLOT_WIN_CLASS_C;
 800737c:	4b02      	ldr	r3, [pc, #8]	; (8007388 <OpenContinuousRx2Window+0x14>)
 800737e:	2202      	movs	r2, #2
 8007380:	701a      	strb	r2, [r3, #0]
}
 8007382:	bf00      	nop
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000a64 	.word	0x20000a64

0800738c <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t *macHdr, LoRaMacFrameCtrl_t *fCtrl, uint8_t fPort, void *fBuffer,
                              uint16_t fBufferSize )
{
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b091      	sub	sp, #68	; 0x44
 8007390:	af04      	add	r7, sp, #16
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	71fb      	strb	r3, [r7, #7]
    AdrNextParams_t adrNext;
    uint16_t i;
    uint8_t pktHeaderLen = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t mic = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
    const void *payload = fBuffer;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t framePort = fPort;
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    LoRaMacBufferPktLen = 0;
 80073b0:	4b62      	ldr	r3, [pc, #392]	; (800753c <PrepareFrame+0x1b0>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	801a      	strh	r2, [r3, #0]

    NodeAckRequested = false;
 80073b6:	4b62      	ldr	r3, [pc, #392]	; (8007540 <PrepareFrame+0x1b4>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]

    if ( fBuffer == NULL ) {
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <PrepareFrame+0x3c>
        fBufferSize = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    }
    LoRaMacTxPayloadLen = fBufferSize;
 80073c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	4b5d      	ldr	r3, [pc, #372]	; (8007544 <PrepareFrame+0x1b8>)
 80073d0:	701a      	strb	r2, [r3, #0]

    LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 80073d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80073dc:	461a      	mov	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	7819      	ldrb	r1, [r3, #0]
 80073e2:	4b59      	ldr	r3, [pc, #356]	; (8007548 <PrepareFrame+0x1bc>)
 80073e4:	5499      	strb	r1, [r3, r2]

    switch ( macHdr->Bits.MType ) {
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b07      	cmp	r3, #7
 80073f2:	f200 8293 	bhi.w	800791c <PrepareFrame+0x590>
 80073f6:	a201      	add	r2, pc, #4	; (adr r2, 80073fc <PrepareFrame+0x70>)
 80073f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	0800791d 	.word	0x0800791d
 8007404:	08007529 	.word	0x08007529
 8007408:	0800791d 	.word	0x0800791d
 800740c:	08007523 	.word	0x08007523
 8007410:	0800791d 	.word	0x0800791d
 8007414:	0800791d 	.word	0x0800791d
 8007418:	080078e3 	.word	0x080078e3
    case FRAME_TYPE_JOIN_REQ:
                LoRaMacBufferPktLen = pktHeaderLen;
 800741c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007420:	b29a      	uxth	r2, r3
 8007422:	4b46      	ldr	r3, [pc, #280]	; (800753c <PrepareFrame+0x1b0>)
 8007424:	801a      	strh	r2, [r3, #0]

                memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8 );
 8007426:	4b45      	ldr	r3, [pc, #276]	; (800753c <PrepareFrame+0x1b0>)
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	4b46      	ldr	r3, [pc, #280]	; (8007548 <PrepareFrame+0x1bc>)
 800742e:	4413      	add	r3, r2
 8007430:	4a46      	ldr	r2, [pc, #280]	; (800754c <PrepareFrame+0x1c0>)
 8007432:	6811      	ldr	r1, [r2, #0]
 8007434:	2208      	movs	r2, #8
 8007436:	4618      	mov	r0, r3
 8007438:	f009 f99e 	bl	8010778 <memcpyr>
                LoRaMacBufferPktLen += 8;
 800743c:	4b3f      	ldr	r3, [pc, #252]	; (800753c <PrepareFrame+0x1b0>)
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	b29a      	uxth	r2, r3
 8007444:	4b3d      	ldr	r3, [pc, #244]	; (800753c <PrepareFrame+0x1b0>)
 8007446:	801a      	strh	r2, [r3, #0]
                memcpyr( LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8 );
 8007448:	4b3c      	ldr	r3, [pc, #240]	; (800753c <PrepareFrame+0x1b0>)
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	4b3e      	ldr	r3, [pc, #248]	; (8007548 <PrepareFrame+0x1bc>)
 8007450:	4413      	add	r3, r2
 8007452:	4a3f      	ldr	r2, [pc, #252]	; (8007550 <PrepareFrame+0x1c4>)
 8007454:	6811      	ldr	r1, [r2, #0]
 8007456:	2208      	movs	r2, #8
 8007458:	4618      	mov	r0, r3
 800745a:	f009 f98d 	bl	8010778 <memcpyr>
                LoRaMacBufferPktLen += 8;
 800745e:	4b37      	ldr	r3, [pc, #220]	; (800753c <PrepareFrame+0x1b0>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	3308      	adds	r3, #8
 8007464:	b29a      	uxth	r2, r3
 8007466:	4b35      	ldr	r3, [pc, #212]	; (800753c <PrepareFrame+0x1b0>)
 8007468:	801a      	strh	r2, [r3, #0]

                LoRaMacDevNonce = Radio.Random( );
 800746a:	4b3a      	ldr	r3, [pc, #232]	; (8007554 <PrepareFrame+0x1c8>)
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4798      	blx	r3
 8007470:	4603      	mov	r3, r0
 8007472:	b29a      	uxth	r2, r3
 8007474:	4b38      	ldr	r3, [pc, #224]	; (8007558 <PrepareFrame+0x1cc>)
 8007476:	801a      	strh	r2, [r3, #0]

                LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 8007478:	4b37      	ldr	r3, [pc, #220]	; (8007558 <PrepareFrame+0x1cc>)
 800747a:	8819      	ldrh	r1, [r3, #0]
 800747c:	4b2f      	ldr	r3, [pc, #188]	; (800753c <PrepareFrame+0x1b0>)
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	b290      	uxth	r0, r2
 8007484:	4a2d      	ldr	r2, [pc, #180]	; (800753c <PrepareFrame+0x1b0>)
 8007486:	8010      	strh	r0, [r2, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	b2c9      	uxtb	r1, r1
 800748c:	4b2e      	ldr	r3, [pc, #184]	; (8007548 <PrepareFrame+0x1bc>)
 800748e:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( LoRaMacDevNonce >> 8 ) & 0xFF;
 8007490:	4b31      	ldr	r3, [pc, #196]	; (8007558 <PrepareFrame+0x1cc>)
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	0a1b      	lsrs	r3, r3, #8
 8007496:	b299      	uxth	r1, r3
 8007498:	4b28      	ldr	r3, [pc, #160]	; (800753c <PrepareFrame+0x1b0>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	b290      	uxth	r0, r2
 80074a0:	4a26      	ldr	r2, [pc, #152]	; (800753c <PrepareFrame+0x1b0>)
 80074a2:	8010      	strh	r0, [r2, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	b2c9      	uxtb	r1, r1
 80074a8:	4b27      	ldr	r3, [pc, #156]	; (8007548 <PrepareFrame+0x1bc>)
 80074aa:	5499      	strb	r1, [r3, r2]

                LoRaMacJoinComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic );
 80074ac:	4b23      	ldr	r3, [pc, #140]	; (800753c <PrepareFrame+0x1b0>)
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	b299      	uxth	r1, r3
 80074b4:	4b29      	ldr	r3, [pc, #164]	; (800755c <PrepareFrame+0x1d0>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	f107 0314 	add.w	r3, r7, #20
 80074bc:	4822      	ldr	r0, [pc, #136]	; (8007548 <PrepareFrame+0x1bc>)
 80074be:	f001 ff23 	bl	8009308 <LoRaMacJoinComputeMic>

                LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 80074c2:	6979      	ldr	r1, [r7, #20]
 80074c4:	4b1d      	ldr	r3, [pc, #116]	; (800753c <PrepareFrame+0x1b0>)
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	b290      	uxth	r0, r2
 80074cc:	4a1b      	ldr	r2, [pc, #108]	; (800753c <PrepareFrame+0x1b0>)
 80074ce:	8010      	strh	r0, [r2, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	b2c9      	uxtb	r1, r1
 80074d4:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <PrepareFrame+0x1bc>)
 80074d6:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 8 ) & 0xFF;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	0a19      	lsrs	r1, r3, #8
 80074dc:	4b17      	ldr	r3, [pc, #92]	; (800753c <PrepareFrame+0x1b0>)
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	b290      	uxth	r0, r2
 80074e4:	4a15      	ldr	r2, [pc, #84]	; (800753c <PrepareFrame+0x1b0>)
 80074e6:	8010      	strh	r0, [r2, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	b2c9      	uxtb	r1, r1
 80074ec:	4b16      	ldr	r3, [pc, #88]	; (8007548 <PrepareFrame+0x1bc>)
 80074ee:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 16 ) & 0xFF;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	0c19      	lsrs	r1, r3, #16
 80074f4:	4b11      	ldr	r3, [pc, #68]	; (800753c <PrepareFrame+0x1b0>)
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	b290      	uxth	r0, r2
 80074fc:	4a0f      	ldr	r2, [pc, #60]	; (800753c <PrepareFrame+0x1b0>)
 80074fe:	8010      	strh	r0, [r2, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	b2c9      	uxtb	r1, r1
 8007504:	4b10      	ldr	r3, [pc, #64]	; (8007548 <PrepareFrame+0x1bc>)
 8007506:	5499      	strb	r1, [r3, r2]
                LoRaMacBuffer[LoRaMacBufferPktLen++] = ( mic >> 24 ) & 0xFF;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	0e19      	lsrs	r1, r3, #24
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <PrepareFrame+0x1b0>)
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	b290      	uxth	r0, r2
 8007514:	4a09      	ldr	r2, [pc, #36]	; (800753c <PrepareFrame+0x1b0>)
 8007516:	8010      	strh	r0, [r2, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	b2c9      	uxtb	r1, r1
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <PrepareFrame+0x1bc>)
 800751e:	5499      	strb	r1, [r3, r2]

                break;
 8007520:	e1ff      	b.n	8007922 <PrepareFrame+0x596>
            case FRAME_TYPE_DATA_CONFIRMED_UP:
            NodeAckRequested = true;
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <PrepareFrame+0x1b4>)
 8007524:	2201      	movs	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
        //Intentional fallthrough
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            if ( IsLoRaMacNetworkJoined == false ) {
 8007528:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <PrepareFrame+0x1d4>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f083 0301 	eor.w	r3, r3, #1
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d016      	beq.n	8007564 <PrepareFrame+0x1d8>
                return LORAMAC_STATUS_NO_NETWORK_JOINED; // No network has been joined yet
 8007536:	2307      	movs	r3, #7
 8007538:	e1f4      	b.n	8007924 <PrepareFrame+0x598>
 800753a:	bf00      	nop
 800753c:	2000024c 	.word	0x2000024c
 8007540:	20000360 	.word	0x20000360
 8007544:	2000024e 	.word	0x2000024e
 8007548:	2000014c 	.word	0x2000014c
 800754c:	20000118 	.word	0x20000118
 8007550:	20000114 	.word	0x20000114
 8007554:	080127d0 	.word	0x080127d0
 8007558:	20000a48 	.word	0x20000a48
 800755c:	20000abc 	.word	0x20000abc
 8007560:	20000359 	.word	0x20000359
            }

            // Adr next request
            adrNext.UpdateChanMask = true;
 8007564:	2301      	movs	r3, #1
 8007566:	763b      	strb	r3, [r7, #24]
            adrNext.AdrEnabled = fCtrl->Bits.Adr;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	767b      	strb	r3, [r7, #25]
            adrNext.AdrAckCounter = AdrAckCounter;
 800757e:	4b9f      	ldr	r3, [pc, #636]	; (80077fc <PrepareFrame+0x470>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	61fb      	str	r3, [r7, #28]
            adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8007584:	4b9e      	ldr	r3, [pc, #632]	; (8007800 <PrepareFrame+0x474>)
 8007586:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800758a:	f887 3020 	strb.w	r3, [r7, #32]
            adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 800758e:	4b9c      	ldr	r3, [pc, #624]	; (8007800 <PrepareFrame+0x474>)
 8007590:	f993 3000 	ldrsb.w	r3, [r3]
 8007594:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007598:	4b99      	ldr	r3, [pc, #612]	; (8007800 <PrepareFrame+0x474>)
 800759a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800759e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            fCtrl->Bits.AdrAckReq = RegionAdrNext( LoRaMacRegion, &adrNext,
 80075a2:	4b98      	ldr	r3, [pc, #608]	; (8007804 <PrepareFrame+0x478>)
 80075a4:	7818      	ldrb	r0, [r3, #0]
 80075a6:	f107 0118 	add.w	r1, r7, #24
 80075aa:	4b94      	ldr	r3, [pc, #592]	; (80077fc <PrepareFrame+0x470>)
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	4b94      	ldr	r3, [pc, #592]	; (8007800 <PrepareFrame+0x474>)
 80075b0:	4a95      	ldr	r2, [pc, #596]	; (8007808 <PrepareFrame+0x47c>)
 80075b2:	f002 fba0 	bl	8009cf6 <RegionAdrNext>
 80075b6:	4603      	mov	r3, r0
 80075b8:	4619      	mov	r1, r3
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	7813      	ldrb	r3, [r2, #0]
 80075be:	f361 1386 	bfi	r3, r1, #6, #1
 80075c2:	7013      	strb	r3, [r2, #0]
                                                   &LoRaMacParams.ChannelsDatarate, &LoRaMacParams.ChannelsTxPower, &AdrAckCounter );
            if ( SrvAckRequested == true ) {
 80075c4:	4b91      	ldr	r3, [pc, #580]	; (800780c <PrepareFrame+0x480>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d007      	beq.n	80075dc <PrepareFrame+0x250>
                SrvAckRequested = false;
 80075cc:	4b8f      	ldr	r3, [pc, #572]	; (800780c <PrepareFrame+0x480>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
                fCtrl->Bits.Ack = 1;
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	7813      	ldrb	r3, [r2, #0]
 80075d6:	f043 0320 	orr.w	r3, r3, #32
 80075da:	7013      	strb	r3, [r2, #0]
            }

            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr ) & 0xFF;
 80075dc:	4b8c      	ldr	r3, [pc, #560]	; (8007810 <PrepareFrame+0x484>)
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80075ea:	461a      	mov	r2, r3
 80075ec:	b2c9      	uxtb	r1, r1
 80075ee:	4b89      	ldr	r3, [pc, #548]	; (8007814 <PrepareFrame+0x488>)
 80075f0:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 8 ) & 0xFF;
 80075f2:	4b87      	ldr	r3, [pc, #540]	; (8007810 <PrepareFrame+0x484>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	0a19      	lsrs	r1, r3, #8
 80075f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007602:	461a      	mov	r2, r3
 8007604:	b2c9      	uxtb	r1, r1
 8007606:	4b83      	ldr	r3, [pc, #524]	; (8007814 <PrepareFrame+0x488>)
 8007608:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 16 ) & 0xFF;
 800760a:	4b81      	ldr	r3, [pc, #516]	; (8007810 <PrepareFrame+0x484>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	0c19      	lsrs	r1, r3, #16
 8007610:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800761a:	461a      	mov	r2, r3
 800761c:	b2c9      	uxtb	r1, r1
 800761e:	4b7d      	ldr	r3, [pc, #500]	; (8007814 <PrepareFrame+0x488>)
 8007620:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( LoRaMacDevAddr >> 24 ) & 0xFF;
 8007622:	4b7b      	ldr	r3, [pc, #492]	; (8007810 <PrepareFrame+0x484>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	0e19      	lsrs	r1, r3, #24
 8007628:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007632:	461a      	mov	r2, r3
 8007634:	b2c9      	uxtb	r1, r1
 8007636:	4b77      	ldr	r3, [pc, #476]	; (8007814 <PrepareFrame+0x488>)
 8007638:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 800763a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007644:	461a      	mov	r2, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	7819      	ldrb	r1, [r3, #0]
 800764a:	4b72      	ldr	r3, [pc, #456]	; (8007814 <PrepareFrame+0x488>)
 800764c:	5499      	strb	r1, [r3, r2]

            LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 800764e:	4b72      	ldr	r3, [pc, #456]	; (8007818 <PrepareFrame+0x48c>)
 8007650:	6819      	ldr	r1, [r3, #0]
 8007652:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800765c:	461a      	mov	r2, r3
 800765e:	b2c9      	uxtb	r1, r1
 8007660:	4b6c      	ldr	r3, [pc, #432]	; (8007814 <PrepareFrame+0x488>)
 8007662:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[pktHeaderLen++] = ( UpLinkCounter >> 8 ) & 0xFF;
 8007664:	4b6c      	ldr	r3, [pc, #432]	; (8007818 <PrepareFrame+0x48c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	0a19      	lsrs	r1, r3, #8
 800766a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007674:	461a      	mov	r2, r3
 8007676:	b2c9      	uxtb	r1, r1
 8007678:	4b66      	ldr	r3, [pc, #408]	; (8007814 <PrepareFrame+0x488>)
 800767a:	5499      	strb	r1, [r3, r2]

            // Copy the MAC commands which must be re-send into the MAC command buffer
            memcpy1( &MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex );
 800767c:	4b67      	ldr	r3, [pc, #412]	; (800781c <PrepareFrame+0x490>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	4b67      	ldr	r3, [pc, #412]	; (8007820 <PrepareFrame+0x494>)
 8007684:	4413      	add	r3, r2
 8007686:	4a67      	ldr	r2, [pc, #412]	; (8007824 <PrepareFrame+0x498>)
 8007688:	7812      	ldrb	r2, [r2, #0]
 800768a:	b292      	uxth	r2, r2
 800768c:	4966      	ldr	r1, [pc, #408]	; (8007828 <PrepareFrame+0x49c>)
 800768e:	4618      	mov	r0, r3
 8007690:	f009 f857 	bl	8010742 <memcpy1>
            MacCommandsBufferIndex += MacCommandsBufferToRepeatIndex;
 8007694:	4b61      	ldr	r3, [pc, #388]	; (800781c <PrepareFrame+0x490>)
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	4b62      	ldr	r3, [pc, #392]	; (8007824 <PrepareFrame+0x498>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	4413      	add	r3, r2
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	4b5e      	ldr	r3, [pc, #376]	; (800781c <PrepareFrame+0x490>)
 80076a2:	701a      	strb	r2, [r3, #0]

            if ( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d043      	beq.n	8007732 <PrepareFrame+0x3a6>
 80076aa:	4b60      	ldr	r3, [pc, #384]	; (800782c <PrepareFrame+0x4a0>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d03f      	beq.n	8007732 <PrepareFrame+0x3a6>
                if ( MacCommandsInNextTx == true ) {
 80076b2:	4b5f      	ldr	r3, [pc, #380]	; (8007830 <PrepareFrame+0x4a4>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d04c      	beq.n	8007754 <PrepareFrame+0x3c8>
                    if ( MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) {
 80076ba:	4b58      	ldr	r3, [pc, #352]	; (800781c <PrepareFrame+0x490>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	d82d      	bhi.n	800771e <PrepareFrame+0x392>
                        fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	4b53      	ldr	r3, [pc, #332]	; (800781c <PrepareFrame+0x490>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4413      	add	r3, r2
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	f003 030f 	and.w	r3, r3, #15
 80076da:	b2d9      	uxtb	r1, r3
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	7813      	ldrb	r3, [r2, #0]
 80076e0:	f361 0303 	bfi	r3, r1, #0, #4
 80076e4:	7013      	strb	r3, [r2, #0]

                        // Update FCtrl field with new value of OptionsLength
                        LoRaMacBuffer[0x05] = fCtrl->Value;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	4b4a      	ldr	r3, [pc, #296]	; (8007814 <PrepareFrame+0x488>)
 80076ec:	715a      	strb	r2, [r3, #5]
                        for ( i = 0; i < MacCommandsBufferIndex; i++ ) {
 80076ee:	2300      	movs	r3, #0
 80076f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80076f2:	e00d      	b.n	8007710 <PrepareFrame+0x384>
                            LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 80076f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	f887 102d 	strb.w	r1, [r7, #45]	; 0x2d
 8007700:	4619      	mov	r1, r3
 8007702:	4b47      	ldr	r3, [pc, #284]	; (8007820 <PrepareFrame+0x494>)
 8007704:	5c9a      	ldrb	r2, [r3, r2]
 8007706:	4b43      	ldr	r3, [pc, #268]	; (8007814 <PrepareFrame+0x488>)
 8007708:	545a      	strb	r2, [r3, r1]
                        for ( i = 0; i < MacCommandsBufferIndex; i++ ) {
 800770a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800770c:	3301      	adds	r3, #1
 800770e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007710:	4b42      	ldr	r3, [pc, #264]	; (800781c <PrepareFrame+0x490>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007718:	429a      	cmp	r2, r3
 800771a:	d3eb      	bcc.n	80076f4 <PrepareFrame+0x368>
                if ( MacCommandsInNextTx == true ) {
 800771c:	e01a      	b.n	8007754 <PrepareFrame+0x3c8>
                        }
                    } else {
                        LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 800771e:	4b3f      	ldr	r3, [pc, #252]	; (800781c <PrepareFrame+0x490>)
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	4b42      	ldr	r3, [pc, #264]	; (800782c <PrepareFrame+0x4a0>)
 8007724:	701a      	strb	r2, [r3, #0]
                        payload = MacCommandsBuffer;
 8007726:	4b3e      	ldr	r3, [pc, #248]	; (8007820 <PrepareFrame+0x494>)
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
                        framePort = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if ( MacCommandsInNextTx == true ) {
 8007730:	e010      	b.n	8007754 <PrepareFrame+0x3c8>
                    }
                }
            } else {
                if ( ( MacCommandsBufferIndex > 0 ) && ( MacCommandsInNextTx == true ) ) {
 8007732:	4b3a      	ldr	r3, [pc, #232]	; (800781c <PrepareFrame+0x490>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00c      	beq.n	8007754 <PrepareFrame+0x3c8>
 800773a:	4b3d      	ldr	r3, [pc, #244]	; (8007830 <PrepareFrame+0x4a4>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d008      	beq.n	8007754 <PrepareFrame+0x3c8>
                    LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 8007742:	4b36      	ldr	r3, [pc, #216]	; (800781c <PrepareFrame+0x490>)
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	4b39      	ldr	r3, [pc, #228]	; (800782c <PrepareFrame+0x4a0>)
 8007748:	701a      	strb	r2, [r3, #0]
                    payload = MacCommandsBuffer;
 800774a:	4b35      	ldr	r3, [pc, #212]	; (8007820 <PrepareFrame+0x494>)
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
                    framePort = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            MacCommandsInNextTx = false;
 8007754:	4b36      	ldr	r3, [pc, #216]	; (8007830 <PrepareFrame+0x4a4>)
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]
            // Store MAC commands which must be re-send in case the device does not receive a downlink anymore
            MacCommandsBufferToRepeatIndex = ParseMacCommandsToRepeat( MacCommandsBuffer, MacCommandsBufferIndex,
 800775a:	4b30      	ldr	r3, [pc, #192]	; (800781c <PrepareFrame+0x490>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	4a32      	ldr	r2, [pc, #200]	; (8007828 <PrepareFrame+0x49c>)
 8007760:	4619      	mov	r1, r3
 8007762:	482f      	ldr	r0, [pc, #188]	; (8007820 <PrepareFrame+0x494>)
 8007764:	f7ff f8e2 	bl	800692c <ParseMacCommandsToRepeat>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	4b2d      	ldr	r3, [pc, #180]	; (8007824 <PrepareFrame+0x498>)
 800776e:	701a      	strb	r2, [r3, #0]
                                                                       MacCommandsBufferToRepeat );
            if ( MacCommandsBufferToRepeatIndex > 0 ) {
 8007770:	4b2c      	ldr	r3, [pc, #176]	; (8007824 <PrepareFrame+0x498>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <PrepareFrame+0x3f2>
                MacCommandsInNextTx = true;
 8007778:	4b2d      	ldr	r3, [pc, #180]	; (8007830 <PrepareFrame+0x4a4>)
 800777a:	2201      	movs	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
            }

            if ( ( payload != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d06d      	beq.n	8007860 <PrepareFrame+0x4d4>
 8007784:	4b29      	ldr	r3, [pc, #164]	; (800782c <PrepareFrame+0x4a0>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d069      	beq.n	8007860 <PrepareFrame+0x4d4>
                LoRaMacBuffer[pktHeaderLen++] = framePort;
 800778c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007796:	4619      	mov	r1, r3
 8007798:	4a1e      	ldr	r2, [pc, #120]	; (8007814 <PrepareFrame+0x488>)
 800779a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800779e:	5453      	strb	r3, [r2, r1]
                if ((pktHeaderLen + LoRaMacTxPayloadLen) > (LORAMAC_PHY_MAXPAYLOAD - 4))  {
 80077a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80077a4:	4a21      	ldr	r2, [pc, #132]	; (800782c <PrepareFrame+0x4a0>)
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	2bfb      	cmp	r3, #251	; 0xfb
 80077ac:	dd09      	ble.n	80077c2 <PrepareFrame+0x436>
                    LoRaMacTxPayloadLen = LORAMAC_PHY_MAXPAYLOAD - 4 - pktHeaderLen;
 80077ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80077b2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80077b6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80077ba:	33fb      	adds	r3, #251	; 0xfb
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	4b1b      	ldr	r3, [pc, #108]	; (800782c <PrepareFrame+0x4a0>)
 80077c0:	701a      	strb	r2, [r3, #0]
                }

                if ( framePort == 0 ) {
 80077c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d136      	bne.n	8007838 <PrepareFrame+0x4ac>
                    // Reset buffer index as the mac commands are being sent on port 0
                    MacCommandsBufferIndex = 0;
 80077ca:	4b14      	ldr	r3, [pc, #80]	; (800781c <PrepareFrame+0x490>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK,
 80077d0:	4b16      	ldr	r3, [pc, #88]	; (800782c <PrepareFrame+0x4a0>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	b299      	uxth	r1, r3
 80077d6:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <PrepareFrame+0x484>)
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <PrepareFrame+0x48c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
                                           UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 80077de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK,
 80077e2:	4c0c      	ldr	r4, [pc, #48]	; (8007814 <PrepareFrame+0x488>)
 80077e4:	4422      	add	r2, r4
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	2300      	movs	r3, #0
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4603      	mov	r3, r0
 80077f0:	4a10      	ldr	r2, [pc, #64]	; (8007834 <PrepareFrame+0x4a8>)
 80077f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f4:	f001 fcca 	bl	800918c <LoRaMacPayloadEncrypt>
 80077f8:	e032      	b.n	8007860 <PrepareFrame+0x4d4>
 80077fa:	bf00      	nop
 80077fc:	2000035c 	.word	0x2000035c
 8007800:	20000a68 	.word	0x20000a68
 8007804:	20000110 	.word	0x20000110
 8007808:	20000a69 	.word	0x20000a69
 800780c:	20000361 	.word	0x20000361
 8007810:	20000140 	.word	0x20000140
 8007814:	2000014c 	.word	0x2000014c
 8007818:	20000350 	.word	0x20000350
 800781c:	20000363 	.word	0x20000363
 8007820:	20000368 	.word	0x20000368
 8007824:	20000364 	.word	0x20000364
 8007828:	200003e8 	.word	0x200003e8
 800782c:	2000024e 	.word	0x2000024e
 8007830:	20000362 	.word	0x20000362
 8007834:	2000011c 	.word	0x2000011c
                } else {
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK,
 8007838:	4b3c      	ldr	r3, [pc, #240]	; (800792c <PrepareFrame+0x5a0>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b299      	uxth	r1, r3
 800783e:	4b3c      	ldr	r3, [pc, #240]	; (8007930 <PrepareFrame+0x5a4>)
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	4b3c      	ldr	r3, [pc, #240]	; (8007934 <PrepareFrame+0x5a8>)
 8007844:	681b      	ldr	r3, [r3, #0]
                                           UpLinkCounter, &LoRaMacBuffer[pktHeaderLen] );
 8007846:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
                    LoRaMacPayloadEncrypt( (uint8_t * ) payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK,
 800784a:	4c3b      	ldr	r4, [pc, #236]	; (8007938 <PrepareFrame+0x5ac>)
 800784c:	4422      	add	r2, r4
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	2300      	movs	r3, #0
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	4a38      	ldr	r2, [pc, #224]	; (800793c <PrepareFrame+0x5b0>)
 800785a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785c:	f001 fc96 	bl	800918c <LoRaMacPayloadEncrypt>
                }
            }
            LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8007860:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007864:	b29a      	uxth	r2, r3
 8007866:	4b31      	ldr	r3, [pc, #196]	; (800792c <PrepareFrame+0x5a0>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	4413      	add	r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	4b33      	ldr	r3, [pc, #204]	; (8007940 <PrepareFrame+0x5b4>)
 8007872:	801a      	strh	r2, [r3, #0]

            LoRaMacComputeMic( LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic );
 8007874:	4b32      	ldr	r3, [pc, #200]	; (8007940 <PrepareFrame+0x5b4>)
 8007876:	8819      	ldrh	r1, [r3, #0]
 8007878:	4b2d      	ldr	r3, [pc, #180]	; (8007930 <PrepareFrame+0x5a4>)
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <PrepareFrame+0x5a8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f107 0214 	add.w	r2, r7, #20
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	2300      	movs	r3, #0
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <PrepareFrame+0x5b8>)
 8007890:	4829      	ldr	r0, [pc, #164]	; (8007938 <PrepareFrame+0x5ac>)
 8007892:	f001 fc15 	bl	80090c0 <LoRaMacComputeMic>

            LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 8007896:	6979      	ldr	r1, [r7, #20]
 8007898:	4b29      	ldr	r3, [pc, #164]	; (8007940 <PrepareFrame+0x5b4>)
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	b2c9      	uxtb	r1, r1
 80078a0:	4b25      	ldr	r3, [pc, #148]	; (8007938 <PrepareFrame+0x5ac>)
 80078a2:	5499      	strb	r1, [r3, r2]
            LoRaMacBuffer[LoRaMacBufferPktLen + 1] = ( mic >> 8 ) & 0xFF;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	0a1a      	lsrs	r2, r3, #8
 80078a8:	4b25      	ldr	r3, [pc, #148]	; (8007940 <PrepareFrame+0x5b4>)
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	b2d1      	uxtb	r1, r2
 80078b0:	4a21      	ldr	r2, [pc, #132]	; (8007938 <PrepareFrame+0x5ac>)
 80078b2:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 2] = ( mic >> 16 ) & 0xFF;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	0c1a      	lsrs	r2, r3, #16
 80078b8:	4b21      	ldr	r3, [pc, #132]	; (8007940 <PrepareFrame+0x5b4>)
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	3302      	adds	r3, #2
 80078be:	b2d1      	uxtb	r1, r2
 80078c0:	4a1d      	ldr	r2, [pc, #116]	; (8007938 <PrepareFrame+0x5ac>)
 80078c2:	54d1      	strb	r1, [r2, r3]
            LoRaMacBuffer[LoRaMacBufferPktLen + 3] = ( mic >> 24 ) & 0xFF;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	0e1a      	lsrs	r2, r3, #24
 80078c8:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <PrepareFrame+0x5b4>)
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	3303      	adds	r3, #3
 80078ce:	b2d1      	uxtb	r1, r2
 80078d0:	4a19      	ldr	r2, [pc, #100]	; (8007938 <PrepareFrame+0x5ac>)
 80078d2:	54d1      	strb	r1, [r2, r3]

            LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 80078d4:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <PrepareFrame+0x5b4>)
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	3304      	adds	r3, #4
 80078da:	b29a      	uxth	r2, r3
 80078dc:	4b18      	ldr	r3, [pc, #96]	; (8007940 <PrepareFrame+0x5b4>)
 80078de:	801a      	strh	r2, [r3, #0]

            break;
 80078e0:	e01f      	b.n	8007922 <PrepareFrame+0x596>
        case FRAME_TYPE_PROPRIETARY:
            if ( ( fBuffer != NULL ) && ( LoRaMacTxPayloadLen > 0 ) ) {
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01b      	beq.n	8007920 <PrepareFrame+0x594>
 80078e8:	4b10      	ldr	r3, [pc, #64]	; (800792c <PrepareFrame+0x5a0>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <PrepareFrame+0x594>
                memcpy1( LoRaMacBuffer + pktHeaderLen, ( uint8_t * ) fBuffer, LoRaMacTxPayloadLen );
 80078f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078f4:	4a10      	ldr	r2, [pc, #64]	; (8007938 <PrepareFrame+0x5ac>)
 80078f6:	4413      	add	r3, r2
 80078f8:	4a0c      	ldr	r2, [pc, #48]	; (800792c <PrepareFrame+0x5a0>)
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	b292      	uxth	r2, r2
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f008 ff1e 	bl	8010742 <memcpy1>
                LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 8007906:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800790a:	b29a      	uxth	r2, r3
 800790c:	4b07      	ldr	r3, [pc, #28]	; (800792c <PrepareFrame+0x5a0>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	4413      	add	r3, r2
 8007914:	b29a      	uxth	r2, r3
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <PrepareFrame+0x5b4>)
 8007918:	801a      	strh	r2, [r3, #0]
            }
            break;
 800791a:	e001      	b.n	8007920 <PrepareFrame+0x594>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800791c:	2302      	movs	r3, #2
 800791e:	e001      	b.n	8007924 <PrepareFrame+0x598>
            break;
 8007920:	bf00      	nop
    }
    return LORAMAC_STATUS_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3734      	adds	r7, #52	; 0x34
 8007928:	46bd      	mov	sp, r7
 800792a:	bd90      	pop	{r4, r7, pc}
 800792c:	2000024e 	.word	0x2000024e
 8007930:	20000140 	.word	0x20000140
 8007934:	20000350 	.word	0x20000350
 8007938:	2000014c 	.word	0x2000014c
 800793c:	2000012c 	.word	0x2000012c
 8007940:	2000024c 	.word	0x2000024c
 8007944:	2000011c 	.word	0x2000011c

08007948 <SendFrameOnChannel>:



extern void calRTC();
LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]

    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <SendFrameOnChannel+0xcc>)
 800795c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007960:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 8007962:	4b2c      	ldr	r3, [pc, #176]	; (8007a14 <SendFrameOnChannel+0xcc>)
 8007964:	f993 3000 	ldrsb.w	r3, [r3]
 8007968:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 800796a:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <SendFrameOnChannel+0xcc>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 8007970:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <SendFrameOnChannel+0xcc>)
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = LoRaMacBufferPktLen;
 8007976:	4b28      	ldr	r3, [pc, #160]	; (8007a18 <SendFrameOnChannel+0xd0>)
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir );
 800797c:	4b27      	ldr	r3, [pc, #156]	; (8007a1c <SendFrameOnChannel+0xd4>)
 800797e:	7818      	ldrb	r0, [r3, #0]
 8007980:	f107 020f 	add.w	r2, r7, #15
 8007984:	f107 0110 	add.w	r1, r7, #16
 8007988:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <SendFrameOnChannel+0xd8>)
 800798a:	f002 f9fb 	bl	8009d84 <RegionTxConfig>

    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_ERROR );
 800798e:	2001      	movs	r0, #1
 8007990:	f001 fad6 	bl	8008f40 <LoRaMacConfirmQueueSetStatusCmn>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007994:	4b23      	ldr	r3, [pc, #140]	; (8007a24 <SendFrameOnChannel+0xdc>)
 8007996:	2201      	movs	r2, #1
 8007998:	705a      	strb	r2, [r3, #1]
    McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 800799a:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <SendFrameOnChannel+0xcc>)
 800799c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4b20      	ldr	r3, [pc, #128]	; (8007a24 <SendFrameOnChannel+0xdc>)
 80079a4:	709a      	strb	r2, [r3, #2]
    McpsConfirm.TxPower = txPower;
 80079a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80079aa:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <SendFrameOnChannel+0xdc>)
 80079ac:	70da      	strb	r2, [r3, #3]
    McpsConfirm.Channel = channel;
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <SendFrameOnChannel+0xdc>)
 80079b2:	6113      	str	r3, [r2, #16]

    // Store the time on air
    McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 80079b4:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <SendFrameOnChannel+0xd8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1a      	ldr	r2, [pc, #104]	; (8007a24 <SendFrameOnChannel+0xdc>)
 80079ba:	6093      	str	r3, [r2, #8]
    MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 80079bc:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <SendFrameOnChannel+0xd8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <SendFrameOnChannel+0xe0>)
 80079c2:	6053      	str	r3, [r2, #4]
//    calRTC();
    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 80079c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80079c8:	4818      	ldr	r0, [pc, #96]	; (8007a2c <SendFrameOnChannel+0xe4>)
 80079ca:	f008 fd8d 	bl	80104e8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 80079ce:	4817      	ldr	r0, [pc, #92]	; (8007a2c <SendFrameOnChannel+0xe4>)
 80079d0:	f008 fb86 	bl	80100e0 <TimerStart>

    if ( IsLoRaMacNetworkJoined == false ) {
 80079d4:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <SendFrameOnChannel+0xe8>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f083 0301 	eor.w	r3, r3, #1
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <SendFrameOnChannel+0xa6>
        JoinRequestTrials++;
 80079e2:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <SendFrameOnChannel+0xec>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <SendFrameOnChannel+0xec>)
 80079ec:	701a      	strb	r2, [r3, #0]
    }
    // Send now
    Radio.Send( LoRaMacBuffer, LoRaMacBufferPktLen );
 80079ee:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <SendFrameOnChannel+0xf0>)
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <SendFrameOnChannel+0xd0>)
 80079f4:	8812      	ldrh	r2, [r2, #0]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	4611      	mov	r1, r2
 80079fa:	4810      	ldr	r0, [pc, #64]	; (8007a3c <SendFrameOnChannel+0xf4>)
 80079fc:	4798      	blx	r3

    LoRaMacState |= LORAMAC_TX_RUNNING;
 80079fe:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <SendFrameOnChannel+0xf8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	4a0e      	ldr	r2, [pc, #56]	; (8007a40 <SendFrameOnChannel+0xf8>)
 8007a08:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3720      	adds	r7, #32
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000a68 	.word	0x20000a68
 8007a18:	2000024c 	.word	0x2000024c
 8007a1c:	20000110 	.word	0x20000110
 8007a20:	200004bc 	.word	0x200004bc
 8007a24:	200009b0 	.word	0x200009b0
 8007a28:	20000984 	.word	0x20000984
 8007a2c:	20000480 	.word	0x20000480
 8007a30:	20000359 	.word	0x20000359
 8007a34:	20000a04 	.word	0x20000a04
 8007a38:	080127d0 	.word	0x080127d0
 8007a3c:	2000014c 	.word	0x2000014c
 8007a40:	2000047c 	.word	0x2000047c

08007a44 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = Channel;
 8007a4e:	4b17      	ldr	r3, [pc, #92]	; (8007aac <SetTxContinuousWave+0x68>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = LoRaMacParams.ChannelsDatarate;
 8007a54:	4b16      	ldr	r3, [pc, #88]	; (8007ab0 <SetTxContinuousWave+0x6c>)
 8007a56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007a5a:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = LoRaMacParams.ChannelsTxPower;
 8007a5c:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <SetTxContinuousWave+0x6c>)
 8007a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8007a62:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = LoRaMacParams.MaxEirp;
 8007a64:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <SetTxContinuousWave+0x6c>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = LoRaMacParams.AntennaGain;
 8007a6a:	4b11      	ldr	r3, [pc, #68]	; (8007ab0 <SetTxContinuousWave+0x6c>)
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( LoRaMacRegion, &continuousWave );
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <SetTxContinuousWave+0x70>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f107 0208 	add.w	r2, r7, #8
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f002 fa4d 	bl	8009f1e <RegionSetContinuousWave>

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007a84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a88:	480b      	ldr	r0, [pc, #44]	; (8007ab8 <SetTxContinuousWave+0x74>)
 8007a8a:	f008 fd2d 	bl	80104e8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007a8e:	480a      	ldr	r0, [pc, #40]	; (8007ab8 <SetTxContinuousWave+0x74>)
 8007a90:	f008 fb26 	bl	80100e0 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <SetTxContinuousWave+0x78>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	4a07      	ldr	r2, [pc, #28]	; (8007abc <SetTxContinuousWave+0x78>)
 8007a9e:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000475 	.word	0x20000475
 8007ab0:	20000a68 	.word	0x20000a68
 8007ab4:	20000110 	.word	0x20000110
 8007ab8:	20000480 	.word	0x20000480
 8007abc:	2000047c 	.word	0x2000047c

08007ac0 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	6039      	str	r1, [r7, #0]
 8007aca:	80fb      	strh	r3, [r7, #6]
 8007acc:	4613      	mov	r3, r2
 8007ace:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <SetTxContinuousWave1+0x44>)
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8007ad8:	88fa      	ldrh	r2, [r7, #6]
 8007ada:	6838      	ldr	r0, [r7, #0]
 8007adc:	4798      	blx	r3

    // Starts the MAC layer status check timer
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007ade:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ae2:	4809      	ldr	r0, [pc, #36]	; (8007b08 <SetTxContinuousWave1+0x48>)
 8007ae4:	f008 fd00 	bl	80104e8 <TimerSetValue>
    TimerStart( &MacStateCheckTimer );
 8007ae8:	4807      	ldr	r0, [pc, #28]	; (8007b08 <SetTxContinuousWave1+0x48>)
 8007aea:	f008 faf9 	bl	80100e0 <TimerStart>

    LoRaMacState |= LORAMAC_TX_RUNNING;
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <SetTxContinuousWave1+0x4c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	4a05      	ldr	r2, [pc, #20]	; (8007b0c <SetTxContinuousWave1+0x4c>)
 8007af8:	6013      	str	r3, [r2, #0]

    return LORAMAC_STATUS_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3708      	adds	r7, #8
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	080127d0 	.word	0x080127d0
 8007b08:	20000480 	.word	0x20000480
 8007b0c:	2000047c 	.word	0x2000047c

08007b10 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacCallback_t *callbacks,
                                       LoRaMacRegion_t region )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if ( primitives == NULL ) {
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <LoRaMacInitialization+0x18>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e1db      	b.n	8007ee0 <LoRaMacInitialization+0x3d0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <LoRaMacInitialization+0x38>
        ( primitives->MacMcpsIndication == NULL ) ||
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <LoRaMacInitialization+0x38>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d003      	beq.n	8007b48 <LoRaMacInitialization+0x38>
        ( primitives->MacMlmeIndication == NULL ) ) {
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <LoRaMacInitialization+0x3c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e1c9      	b.n	8007ee0 <LoRaMacInitialization+0x3d0>
    }
    // Verify if the region is supported
    if ( RegionIsActive( region ) == false ) {
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 f846 	bl	8009be0 <RegionIsActive>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f083 0301 	eor.w	r3, r3, #1
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <LoRaMacInitialization+0x54>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8007b60:	230a      	movs	r3, #10
 8007b62:	e1bd      	b.n	8007ee0 <LoRaMacInitialization+0x3d0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f001 f903 	bl	8008d70 <LoRaMacConfirmQueueInit>

    LoRaMacPrimitives = primitives;
 8007b6a:	4ab0      	ldr	r2, [pc, #704]	; (8007e2c <LoRaMacInitialization+0x31c>)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks = callbacks;
 8007b70:	4aaf      	ldr	r2, [pc, #700]	; (8007e30 <LoRaMacInitialization+0x320>)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6013      	str	r3, [r2, #0]
    LoRaMacRegion = region;
 8007b76:	4aaf      	ldr	r2, [pc, #700]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	7013      	strb	r3, [r2, #0]

    if(IsLoRaMacNetworkJoined==false){
 8007b7c:	4bae      	ldr	r3, [pc, #696]	; (8007e38 <LoRaMacInitialization+0x328>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f083 0301 	eor.w	r3, r3, #1
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f000 813d 	beq.w	8007e06 <LoRaMacInitialization+0x2f6>
    LoRaMacFlags.Value = 0;
 8007b8c:	4bab      	ldr	r3, [pc, #684]	; (8007e3c <LoRaMacInitialization+0x32c>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]

    LoRaMacDeviceClass = CLASS_A;
 8007b92:	4bab      	ldr	r3, [pc, #684]	; (8007e40 <LoRaMacInitialization+0x330>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
    LoRaMacState = LORAMAC_IDLE;
 8007b98:	4baa      	ldr	r3, [pc, #680]	; (8007e44 <LoRaMacInitialization+0x334>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]

    JoinRequestTrials = 0;
 8007b9e:	4baa      	ldr	r3, [pc, #680]	; (8007e48 <LoRaMacInitialization+0x338>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
    MaxJoinRequestTrials = 1;
 8007ba4:	4ba9      	ldr	r3, [pc, #676]	; (8007e4c <LoRaMacInitialization+0x33c>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]

    // Reset duty cycle times
    AggregatedLastTxDoneTime = 0;
 8007baa:	4ba9      	ldr	r3, [pc, #676]	; (8007e50 <LoRaMacInitialization+0x340>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
    AggregatedTimeOff = 0;
 8007bb0:	4ba8      	ldr	r3, [pc, #672]	; (8007e54 <LoRaMacInitialization+0x344>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007bb6:	230b      	movs	r3, #11
 8007bb8:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007bba:	4b9e      	ldr	r3, [pc, #632]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	f107 0214 	add.w	r2, r7, #20
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f002 f81b 	bl	8009c00 <RegionGetPhyParam>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	613b      	str	r3, [r7, #16]
    DutyCycleOn = ( bool ) phyParam.Value;
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bf14      	ite	ne
 8007bd4:	2301      	movne	r3, #1
 8007bd6:	2300      	moveq	r3, #0
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b9f      	ldr	r3, [pc, #636]	; (8007e58 <LoRaMacInitialization+0x348>)
 8007bdc:	701a      	strb	r2, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8007bde:	2308      	movs	r3, #8
 8007be0:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007be2:	4b94      	ldr	r3, [pc, #592]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f107 0214 	add.w	r2, r7, #20
 8007bea:	4611      	mov	r1, r2
 8007bec:	4618      	mov	r0, r3
 8007bee:	f002 f807 	bl	8009c00 <RegionGetPhyParam>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	b25a      	sxtb	r2, r3
 8007bfa:	4b98      	ldr	r3, [pc, #608]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007bfc:	701a      	strb	r2, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8007bfe:	2305      	movs	r3, #5
 8007c00:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c02:	4b8c      	ldr	r3, [pc, #560]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f107 0214 	add.w	r2, r7, #20
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fff7 	bl	8009c00 <RegionGetPhyParam>
 8007c12:	4603      	mov	r3, r0
 8007c14:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	b25a      	sxtb	r2, r3
 8007c1a:	4b90      	ldr	r3, [pc, #576]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007c1c:	705a      	strb	r2, [r3, #1]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8007c1e:	230c      	movs	r3, #12
 8007c20:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c22:	4b84      	ldr	r3, [pc, #528]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f107 0214 	add.w	r2, r7, #20
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f001 ffe7 	bl	8009c00 <RegionGetPhyParam>
 8007c32:	4603      	mov	r3, r0
 8007c34:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.MaxRxWindow = phyParam.Value;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4a88      	ldr	r2, [pc, #544]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007c3a:	60d3      	str	r3, [r2, #12]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8007c3c:	230d      	movs	r3, #13
 8007c3e:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c40:	4b7c      	ldr	r3, [pc, #496]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f107 0214 	add.w	r2, r7, #20
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 ffd8 	bl	8009c00 <RegionGetPhyParam>
 8007c50:	4603      	mov	r3, r0
 8007c52:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4a81      	ldr	r2, [pc, #516]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007c58:	6113      	str	r3, [r2, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8007c5a:	230e      	movs	r3, #14
 8007c5c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c5e:	4b75      	ldr	r3, [pc, #468]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f107 0214 	add.w	r2, r7, #20
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 ffc9 	bl	8009c00 <RegionGetPhyParam>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	4a79      	ldr	r2, [pc, #484]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007c76:	6153      	str	r3, [r2, #20]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8007c78:	230f      	movs	r3, #15
 8007c7a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c7c:	4b6d      	ldr	r3, [pc, #436]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	f107 0214 	add.w	r2, r7, #20
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f001 ffba 	bl	8009c00 <RegionGetPhyParam>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	4a72      	ldr	r2, [pc, #456]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007c94:	6193      	str	r3, [r2, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8007c96:	2310      	movs	r3, #16
 8007c98:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007c9a:	4b66      	ldr	r3, [pc, #408]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	f107 0214 	add.w	r2, r7, #20
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 ffab 	bl	8009c00 <RegionGetPhyParam>
 8007caa:	4603      	mov	r3, r0
 8007cac:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4a6a      	ldr	r2, [pc, #424]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007cb2:	61d3      	str	r3, [r2, #28]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8007cb4:	2313      	movs	r3, #19
 8007cb6:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007cb8:	4b5e      	ldr	r3, [pc, #376]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	f107 0214 	add.w	r2, r7, #20
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 ff9c 	bl	8009c00 <RegionGetPhyParam>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	4b62      	ldr	r3, [pc, #392]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8007cd6:	2314      	movs	r3, #20
 8007cd8:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007cda:	4b56      	ldr	r3, [pc, #344]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	f107 0214 	add.w	r2, r7, #20
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 ff8b 	bl	8009c00 <RegionGetPhyParam>
 8007cea:	4603      	mov	r3, r0
 8007cec:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4a5a      	ldr	r2, [pc, #360]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007cf2:	6253      	str	r3, [r2, #36]	; 0x24

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8007cf4:	2315      	movs	r3, #21
 8007cf6:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007cf8:	4b4e      	ldr	r3, [pc, #312]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f107 0214 	add.w	r2, r7, #20
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f001 ff7c 	bl	8009c00 <RegionGetPhyParam>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	4b52      	ldr	r3, [pc, #328]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8007d16:	231a      	movs	r3, #26
 8007d18:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007d1a:	4b46      	ldr	r3, [pc, #280]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f107 0214 	add.w	r2, r7, #20
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 ff6b 	bl	8009c00 <RegionGetPhyParam>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007d34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8007d38:	231b      	movs	r3, #27
 8007d3a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007d3c:	4b3d      	ldr	r3, [pc, #244]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f107 0214 	add.w	r2, r7, #20
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 ff5a 	bl	8009c00 <RegionGetPhyParam>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007d56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8007d5a:	231c      	movs	r3, #28
 8007d5c:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007d5e:	4b35      	ldr	r3, [pc, #212]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f107 0214 	add.w	r2, r7, #20
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 ff49 	bl	8009c00 <RegionGetPhyParam>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.MaxEirp = phyParam.fValue;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4a39      	ldr	r2, [pc, #228]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007d76:	6313      	str	r3, [r2, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8007d78:	231d      	movs	r3, #29
 8007d7a:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007d7c:	4b2d      	ldr	r3, [pc, #180]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f107 0214 	add.w	r2, r7, #20
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 ff3a 	bl	8009c00 <RegionGetPhyParam>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	613b      	str	r3, [r7, #16]
    LoRaMacParamsDefaults.AntennaGain = phyParam.fValue;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4a32      	ldr	r2, [pc, #200]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007d94:	6353      	str	r3, [r2, #52]	; 0x34

    RegionInitDefaults( LoRaMacRegion, INIT_TYPE_INIT );
 8007d96:	4b27      	ldr	r3, [pc, #156]	; (8007e34 <LoRaMacInitialization+0x324>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 ff59 	bl	8009c54 <RegionInitDefaults>

    // Init parameters which are not set in function ResetMacParameters
    LoRaMacParams.RepeaterSupport = false;
 8007da2:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacParamsDefaults.ChannelsNbRep = 1;
 8007daa:	4b2c      	ldr	r3, [pc, #176]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2020 	strb.w	r2, [r3, #32]
    LoRaMacParamsDefaults.SystemMaxRxError = 10;
 8007db2:	4b2a      	ldr	r3, [pc, #168]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007db4:	220a      	movs	r2, #10
 8007db6:	605a      	str	r2, [r3, #4]
    LoRaMacParamsDefaults.MinRxSymbols = 6;
 8007db8:	4b28      	ldr	r3, [pc, #160]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007dba:	2206      	movs	r2, #6
 8007dbc:	721a      	strb	r2, [r3, #8]

    LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 8007dbe:	4b27      	ldr	r3, [pc, #156]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4a27      	ldr	r2, [pc, #156]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007dc4:	6053      	str	r3, [r2, #4]
    LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols;
 8007dc6:	4b25      	ldr	r3, [pc, #148]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007dc8:	7a1a      	ldrb	r2, [r3, #8]
 8007dca:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007dcc:	721a      	strb	r2, [r3, #8]
    LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 8007dce:	4b23      	ldr	r3, [pc, #140]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	4a23      	ldr	r2, [pc, #140]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007dd4:	60d3      	str	r3, [r2, #12]
    LoRaMacParams.ReceiveDelay1 = LoRaMacParamsDefaults.ReceiveDelay1;
 8007dd6:	4b21      	ldr	r3, [pc, #132]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	4a21      	ldr	r2, [pc, #132]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007ddc:	6113      	str	r3, [r2, #16]
    LoRaMacParams.ReceiveDelay2 = LoRaMacParamsDefaults.ReceiveDelay2;
 8007dde:	4b1f      	ldr	r3, [pc, #124]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	4a1f      	ldr	r2, [pc, #124]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007de4:	6153      	str	r3, [r2, #20]
    LoRaMacParams.JoinAcceptDelay1 = LoRaMacParamsDefaults.JoinAcceptDelay1;
 8007de6:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007dec:	6193      	str	r3, [r2, #24]
    LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 8007dee:	4b1b      	ldr	r3, [pc, #108]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	4a1b      	ldr	r2, [pc, #108]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007df4:	61d3      	str	r3, [r2, #28]
    LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 8007df6:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <LoRaMacInitialization+0x34c>)
 8007df8:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007dfc:	4b18      	ldr	r3, [pc, #96]	; (8007e60 <LoRaMacInitialization+0x350>)
 8007dfe:	f883 2020 	strb.w	r2, [r3, #32]

      ResetMacParameters( );
 8007e02:	f7ff fa03 	bl	800720c <ResetMacParameters>
    }

    // Initialize timers
    TimerInit( &MacStateCheckTimer, OnMacStateCheckTimerEvent );
 8007e06:	4917      	ldr	r1, [pc, #92]	; (8007e64 <LoRaMacInitialization+0x354>)
 8007e08:	4817      	ldr	r0, [pc, #92]	; (8007e68 <LoRaMacInitialization+0x358>)
 8007e0a:	f008 f94f 	bl	80100ac <TimerInit>
    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
 8007e0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e12:	4815      	ldr	r0, [pc, #84]	; (8007e68 <LoRaMacInitialization+0x358>)
 8007e14:	f008 fb68 	bl	80104e8 <TimerSetValue>

    TimerInit( &TxDelayedTimer, OnTxDelayedTimerEvent );
 8007e18:	4914      	ldr	r1, [pc, #80]	; (8007e6c <LoRaMacInitialization+0x35c>)
 8007e1a:	4815      	ldr	r0, [pc, #84]	; (8007e70 <LoRaMacInitialization+0x360>)
 8007e1c:	f008 f946 	bl	80100ac <TimerInit>
    TimerInit( &RxWindowTimer1, OnRxWindow1TimerEvent );
 8007e20:	4914      	ldr	r1, [pc, #80]	; (8007e74 <LoRaMacInitialization+0x364>)
 8007e22:	4815      	ldr	r0, [pc, #84]	; (8007e78 <LoRaMacInitialization+0x368>)
 8007e24:	f008 f942 	bl	80100ac <TimerInit>
 8007e28:	e028      	b.n	8007e7c <LoRaMacInitialization+0x36c>
 8007e2a:	bf00      	nop
 8007e2c:	20000494 	.word	0x20000494
 8007e30:	20000498 	.word	0x20000498
 8007e34:	20000110 	.word	0x20000110
 8007e38:	20000359 	.word	0x20000359
 8007e3c:	20000a08 	.word	0x20000a08
 8007e40:	20000148 	.word	0x20000148
 8007e44:	2000047c 	.word	0x2000047c
 8007e48:	20000a04 	.word	0x20000a04
 8007e4c:	200009ac 	.word	0x200009ac
 8007e50:	2000046c 	.word	0x2000046c
 8007e54:	20000470 	.word	0x20000470
 8007e58:	20000474 	.word	0x20000474
 8007e5c:	20000a0c 	.word	0x20000a0c
 8007e60:	20000a68 	.word	0x20000a68
 8007e64:	08005c25 	.word	0x08005c25
 8007e68:	20000480 	.word	0x20000480
 8007e6c:	08006105 	.word	0x08006105
 8007e70:	20000a4c 	.word	0x20000a4c
 8007e74:	080061b5 	.word	0x080061b5
 8007e78:	200009f0 	.word	0x200009f0
    TimerInit( &RxWindowTimer2, OnRxWindow2TimerEvent );
 8007e7c:	491a      	ldr	r1, [pc, #104]	; (8007ee8 <LoRaMacInitialization+0x3d8>)
 8007e7e:	481b      	ldr	r0, [pc, #108]	; (8007eec <LoRaMacInitialization+0x3dc>)
 8007e80:	f008 f914 	bl	80100ac <TimerInit>
    TimerInit( &AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8007e84:	491a      	ldr	r1, [pc, #104]	; (8007ef0 <LoRaMacInitialization+0x3e0>)
 8007e86:	481b      	ldr	r0, [pc, #108]	; (8007ef4 <LoRaMacInitialization+0x3e4>)
 8007e88:	f008 f910 	bl	80100ac <TimerInit>

    // Store the current initialization time
    LoRaMacInitializationTime = TimerGetCurrentTime( );
 8007e8c:	f008 fb45 	bl	801051a <TimerGetCurrentTime>
 8007e90:	4603      	mov	r3, r0
 8007e92:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <LoRaMacInitialization+0x3e8>)
 8007e94:	6013      	str	r3, [r2, #0]

    // Initialize Radio driver
    RadioEvents.TxDone = OnRadioTxDone;
 8007e96:	4b19      	ldr	r3, [pc, #100]	; (8007efc <LoRaMacInitialization+0x3ec>)
 8007e98:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <LoRaMacInitialization+0x3f0>)
 8007e9a:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRadioRxDone;
 8007e9c:	4b17      	ldr	r3, [pc, #92]	; (8007efc <LoRaMacInitialization+0x3ec>)
 8007e9e:	4a19      	ldr	r2, [pc, #100]	; (8007f04 <LoRaMacInitialization+0x3f4>)
 8007ea0:	609a      	str	r2, [r3, #8]
    RadioEvents.RxError = OnRadioRxError;
 8007ea2:	4b16      	ldr	r3, [pc, #88]	; (8007efc <LoRaMacInitialization+0x3ec>)
 8007ea4:	4a18      	ldr	r2, [pc, #96]	; (8007f08 <LoRaMacInitialization+0x3f8>)
 8007ea6:	611a      	str	r2, [r3, #16]
    RadioEvents.TxTimeout = OnRadioTxTimeout;
 8007ea8:	4b14      	ldr	r3, [pc, #80]	; (8007efc <LoRaMacInitialization+0x3ec>)
 8007eaa:	4a18      	ldr	r2, [pc, #96]	; (8007f0c <LoRaMacInitialization+0x3fc>)
 8007eac:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRadioRxTimeout;
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <LoRaMacInitialization+0x3ec>)
 8007eb0:	4a17      	ldr	r2, [pc, #92]	; (8007f10 <LoRaMacInitialization+0x400>)
 8007eb2:	60da      	str	r2, [r3, #12]

    Radio.Init( &RadioEvents );
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <LoRaMacInitialization+0x404>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4810      	ldr	r0, [pc, #64]	; (8007efc <LoRaMacInitialization+0x3ec>)
 8007eba:	4798      	blx	r3

    // Random seed initialization
    srand1( Radio.Random( ) );
 8007ebc:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <LoRaMacInitialization+0x404>)
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	4798      	blx	r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f008 fc17 	bl	80106f8 <srand1>

    PublicNetwork = true;
 8007eca:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <LoRaMacInitialization+0x408>)
 8007ecc:	2201      	movs	r2, #1
 8007ece:	701a      	strb	r2, [r3, #0]
    Radio.SetPublicNetwork(true);
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <LoRaMacInitialization+0x404>)
 8007ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	4798      	blx	r3
    Radio.Sleep( );
 8007ed8:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <LoRaMacInitialization+0x404>)
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	08006251 	.word	0x08006251
 8007eec:	20000998 	.word	0x20000998
 8007ef0:	08006349 	.word	0x08006349
 8007ef4:	20000ac0 	.word	0x20000ac0
 8007ef8:	20000478 	.word	0x20000478
 8007efc:	2000049c 	.word	0x2000049c
 8007f00:	08004f2d 	.word	0x08004f2d
 8007f04:	080050f1 	.word	0x080050f1
 8007f08:	08005a8d 	.word	0x08005a8d
 8007f0c:	08005a49 	.word	0x08005a49
 8007f10:	08005b59 	.word	0x08005b59
 8007f14:	080127d0 	.word	0x080127d0
 8007f18:	20000149 	.word	0x20000149

08007f1c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t *txInfo )
{
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b08d      	sub	sp, #52	; 0x34
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
    AdrNextParams_t adrNext;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 8007f28:	4b42      	ldr	r3, [pc, #264]	; (8008034 <LoRaMacQueryTxPossible+0x118>)
 8007f2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007f2e:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8007f30:	4b40      	ldr	r3, [pc, #256]	; (8008034 <LoRaMacQueryTxPossible+0x118>)
 8007f32:	f993 3000 	ldrsb.w	r3, [r3]
 8007f36:	73bb      	strb	r3, [r7, #14]
    uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 8007f38:	4b3f      	ldr	r3, [pc, #252]	; (8008038 <LoRaMacQueryTxPossible+0x11c>)
 8007f3a:	781a      	ldrb	r2, [r3, #0]
 8007f3c:	4b3f      	ldr	r3, [pc, #252]	; (800803c <LoRaMacQueryTxPossible+0x120>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4413      	add	r3, r2
 8007f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ( txInfo == NULL ) {
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <LoRaMacQueryTxPossible+0x34>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e06d      	b.n	800802c <LoRaMacQueryTxPossible+0x110>
    }

    // Setup ADR request
    adrNext.UpdateChanMask = false;
 8007f50:	2300      	movs	r3, #0
 8007f52:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = AdrCtrlOn;
 8007f54:	4b3a      	ldr	r3, [pc, #232]	; (8008040 <LoRaMacQueryTxPossible+0x124>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = AdrAckCounter;
 8007f5a:	4b3a      	ldr	r3, [pc, #232]	; (8008044 <LoRaMacQueryTxPossible+0x128>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	61fb      	str	r3, [r7, #28]
    adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 8007f60:	4b39      	ldr	r3, [pc, #228]	; (8008048 <LoRaMacQueryTxPossible+0x12c>)
 8007f62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8007f66:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 8007f6a:	4b37      	ldr	r3, [pc, #220]	; (8008048 <LoRaMacQueryTxPossible+0x12c>)
 8007f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8007f70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007f74:	4b34      	ldr	r3, [pc, #208]	; (8008048 <LoRaMacQueryTxPossible+0x12c>)
 8007f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    RegionAdrNext( LoRaMacRegion, &adrNext, &datarate, &txPower, &AdrAckCounter );
 8007f7e:	4b33      	ldr	r3, [pc, #204]	; (800804c <LoRaMacQueryTxPossible+0x130>)
 8007f80:	7818      	ldrb	r0, [r3, #0]
 8007f82:	f107 030e 	add.w	r3, r7, #14
 8007f86:	f107 020f 	add.w	r2, r7, #15
 8007f8a:	f107 0118 	add.w	r1, r7, #24
 8007f8e:	4c2d      	ldr	r4, [pc, #180]	; (8008044 <LoRaMacQueryTxPossible+0x128>)
 8007f90:	9400      	str	r4, [sp, #0]
 8007f92:	f001 feb0 	bl	8009cf6 <RegionAdrNext>

    // Setup PHY request
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8007f96:	4b2c      	ldr	r3, [pc, #176]	; (8008048 <LoRaMacQueryTxPossible+0x12c>)
 8007f98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f9c:	75bb      	strb	r3, [r7, #22]
    getPhy.Datarate = datarate;
 8007f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fa2:	757b      	strb	r3, [r7, #21]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007fa4:	2309      	movs	r3, #9
 8007fa6:	753b      	strb	r3, [r7, #20]

    // Change request in case repeater is supported
    if( LoRaMacParams.RepeaterSupport == true ) {
 8007fa8:	4b27      	ldr	r3, [pc, #156]	; (8008048 <LoRaMacQueryTxPossible+0x12c>)
 8007faa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <LoRaMacQueryTxPossible+0x9a>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8007fb2:	230a      	movs	r3, #10
 8007fb4:	753b      	strb	r3, [r7, #20]
    }
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8007fb6:	4b25      	ldr	r3, [pc, #148]	; (800804c <LoRaMacQueryTxPossible+0x130>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f107 0214 	add.w	r2, r7, #20
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fe1d 	bl	8009c00 <RegionGetPhyParam>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	613b      	str	r3, [r7, #16]
    txInfo->CurrentPayloadSize = phyParam.Value;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	705a      	strb	r2, [r3, #1]

    // Verify if the fOpts fit into the maximum payload
    if ( txInfo->CurrentPayloadSize >= fOptLen ) {
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d808      	bhi.n	8007ff0 <LoRaMacQueryTxPossible+0xd4>
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize - fOptLen;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	785a      	ldrb	r2, [r3, #1]
 8007fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e00c      	b.n	800800a <LoRaMacQueryTxPossible+0xee>
    } else {
        txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	785a      	ldrb	r2, [r3, #1]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	701a      	strb	r2, [r3, #0]
        // The fOpts don't fit into the maximum payload. Omit the MAC commands to
        // ensure that another uplink is possible.
        fOptLen = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        MacCommandsBufferIndex = 0;
 8007ffe:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <LoRaMacQueryTxPossible+0x11c>)
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
        MacCommandsBufferToRepeatIndex = 0;
 8008004:	4b0d      	ldr	r3, [pc, #52]	; (800803c <LoRaMacQueryTxPossible+0x120>)
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]
    }

    // Verify if the fOpts and the payload fit into the maximum payload
    if ( ValidatePayloadLength( size, datarate, fOptLen ) == false ) {
 800800a:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800800e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fa2d 	bl	8006474 <ValidatePayloadLength>
 800801a:	4603      	mov	r3, r0
 800801c:	f083 0301 	eor.w	r3, r3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <LoRaMacQueryTxPossible+0x10e>
        return LORAMAC_STATUS_LENGTH_ERROR;
 8008026:	2308      	movs	r3, #8
 8008028:	e000      	b.n	800802c <LoRaMacQueryTxPossible+0x110>
    }
    return LORAMAC_STATUS_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	372c      	adds	r7, #44	; 0x2c
 8008030:	46bd      	mov	sp, r7
 8008032:	bd90      	pop	{r4, r7, pc}
 8008034:	20000a0c 	.word	0x20000a0c
 8008038:	20000363 	.word	0x20000363
 800803c:	20000364 	.word	0x20000364
 8008040:	2000035a 	.word	0x2000035a
 8008044:	2000035c 	.word	0x2000035c
 8008048:	20000a68 	.word	0x20000a68
 800804c:	20000110 	.word	0x20000110

08008050 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if ( mibGet == NULL ) {
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <LoRaMacMibGetRequestConfirm+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008062:	2303      	movs	r3, #3
 8008064:	e10d      	b.n	8008282 <LoRaMacMibGetRequestConfirm+0x232>
    }

    switch ( mibGet->Type ) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b1e      	cmp	r3, #30
 800806c:	f200 8105 	bhi.w	800827a <LoRaMacMibGetRequestConfirm+0x22a>
 8008070:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <LoRaMacMibGetRequestConfirm+0x28>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	080080f5 	.word	0x080080f5
 800807c:	080080ff 	.word	0x080080ff
 8008080:	08008109 	.word	0x08008109
 8008084:	08008113 	.word	0x08008113
 8008088:	0800811d 	.word	0x0800811d
 800808c:	08008127 	.word	0x08008127
 8008090:	0800812f 	.word	0x0800812f
 8008094:	08008137 	.word	0x08008137
 8008098:	08008141 	.word	0x08008141
 800809c:	0800814d 	.word	0x0800814d
 80080a0:	0800816d 	.word	0x0800816d
 80080a4:	0800817f 	.word	0x0800817f
 80080a8:	080081b1 	.word	0x080081b1
 80080ac:	08008191 	.word	0x08008191
 80080b0:	080081d1 	.word	0x080081d1
 80080b4:	080081dd 	.word	0x080081dd
 80080b8:	080081e7 	.word	0x080081e7
 80080bc:	080081f1 	.word	0x080081f1
 80080c0:	080081fb 	.word	0x080081fb
 80080c4:	08008205 	.word	0x08008205
 80080c8:	0800820f 	.word	0x0800820f
 80080cc:	0800821b 	.word	0x0800821b
 80080d0:	08008233 	.word	0x08008233
 80080d4:	08008227 	.word	0x08008227
 80080d8:	0800823f 	.word	0x0800823f
 80080dc:	08008249 	.word	0x08008249
 80080e0:	08008253 	.word	0x08008253
 80080e4:	0800827b 	.word	0x0800827b
 80080e8:	0800825d 	.word	0x0800825d
 80080ec:	08008267 	.word	0x08008267
 80080f0:	08008271 	.word	0x08008271
        case MIB_DEVICE_CLASS: {
            mibGet->Param.Class = LoRaMacDeviceClass;
 80080f4:	4b65      	ldr	r3, [pc, #404]	; (800828c <LoRaMacMibGetRequestConfirm+0x23c>)
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	711a      	strb	r2, [r3, #4]
            break;
 80080fc:	e0c0      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NETWORK_JOINED: {
            mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 80080fe:	4b64      	ldr	r3, [pc, #400]	; (8008290 <LoRaMacMibGetRequestConfirm+0x240>)
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	711a      	strb	r2, [r3, #4]
            break;
 8008106:	e0bb      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_ADR: {
            mibGet->Param.AdrEnable = AdrCtrlOn;
 8008108:	4b62      	ldr	r3, [pc, #392]	; (8008294 <LoRaMacMibGetRequestConfirm+0x244>)
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	711a      	strb	r2, [r3, #4]
            break;
 8008110:	e0b6      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NET_ID: {
            mibGet->Param.NetID = LoRaMacNetID;
 8008112:	4b61      	ldr	r3, [pc, #388]	; (8008298 <LoRaMacMibGetRequestConfirm+0x248>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
            break;
 800811a:	e0b1      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_DEV_ADDR: {
            mibGet->Param.DevAddr = LoRaMacDevAddr;
 800811c:	4b5f      	ldr	r3, [pc, #380]	; (800829c <LoRaMacMibGetRequestConfirm+0x24c>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	605a      	str	r2, [r3, #4]
            break;
 8008124:	e0ac      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_NWK_SKEY: {
            mibGet->Param.NwkSKey = LoRaMacNwkSKey;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a5d      	ldr	r2, [pc, #372]	; (80082a0 <LoRaMacMibGetRequestConfirm+0x250>)
 800812a:	605a      	str	r2, [r3, #4]
            break;
 800812c:	e0a8      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_APP_SKEY: {
            mibGet->Param.AppSKey = LoRaMacAppSKey;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a5c      	ldr	r2, [pc, #368]	; (80082a4 <LoRaMacMibGetRequestConfirm+0x254>)
 8008132:	605a      	str	r2, [r3, #4]
            break;
 8008134:	e0a4      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_PUBLIC_NETWORK: {
            mibGet->Param.EnablePublicNetwork = PublicNetwork;
 8008136:	4b5c      	ldr	r3, [pc, #368]	; (80082a8 <LoRaMacMibGetRequestConfirm+0x258>)
 8008138:	781a      	ldrb	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	711a      	strb	r2, [r3, #4]
            break;
 800813e:	e09f      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_REPEATER_SUPPORT: {
            mibGet->Param.EnableRepeaterSupport = LoRaMacParams.RepeaterSupport;
 8008140:	4b5a      	ldr	r3, [pc, #360]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 8008142:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	711a      	strb	r2, [r3, #4]
            break;
 800814a:	e099      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS: {
            getPhy.Attribute = PHY_CHANNELS;
 800814c:	2319      	movs	r3, #25
 800814e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008150:	4b57      	ldr	r3, [pc, #348]	; (80082b0 <LoRaMacMibGetRequestConfirm+0x260>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	f107 0210 	add.w	r2, r7, #16
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fd50 	bl	8009c00 <RegionGetPhyParam>
 8008160:	4603      	mov	r3, r0
 8008162:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]
            break;
 800816a:	e089      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RX2_CHANNEL: {
            mibGet->Param.Rx2Channel = LoRaMacParams.Rx2Channel;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a4f      	ldr	r2, [pc, #316]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 8008170:	3304      	adds	r3, #4
 8008172:	3224      	adds	r2, #36	; 0x24
 8008174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008178:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800817c:	e080      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RX2_DEFAULT_CHANNEL: {
            mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a4c      	ldr	r2, [pc, #304]	; (80082b4 <LoRaMacMibGetRequestConfirm+0x264>)
 8008182:	3304      	adds	r3, #4
 8008184:	3224      	adds	r2, #36	; 0x24
 8008186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800818a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800818e:	e077      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_MASK: {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8008190:	2317      	movs	r3, #23
 8008192:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008194:	4b46      	ldr	r3, [pc, #280]	; (80082b0 <LoRaMacMibGetRequestConfirm+0x260>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f107 0210 	add.w	r2, r7, #16
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fd2e 	bl	8009c00 <RegionGetPhyParam>
 80081a4:	4603      	mov	r3, r0
 80081a6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	605a      	str	r2, [r3, #4]
            break;
 80081ae:	e067      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_MASK: {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80081b0:	2316      	movs	r3, #22
 80081b2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 80081b4:	4b3e      	ldr	r3, [pc, #248]	; (80082b0 <LoRaMacMibGetRequestConfirm+0x260>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f107 0210 	add.w	r2, r7, #16
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fd1e 	bl	8009c00 <RegionGetPhyParam>
 80081c4:	4603      	mov	r3, r0
 80081c6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	605a      	str	r2, [r3, #4]
            break;
 80081ce:	e057      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_NB_REP: {
            mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 80081d0:	4b36      	ldr	r3, [pc, #216]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 80081d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	711a      	strb	r2, [r3, #4]
            break;
 80081da:	e051      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MAX_RX_WINDOW_DURATION: {
            mibGet->Param.MaxRxWindow = LoRaMacParams.MaxRxWindow;
 80081dc:	4b33      	ldr	r3, [pc, #204]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	605a      	str	r2, [r3, #4]
            break;
 80081e4:	e04c      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RECEIVE_DELAY_1: {
            mibGet->Param.ReceiveDelay1 = LoRaMacParams.ReceiveDelay1;
 80081e6:	4b31      	ldr	r3, [pc, #196]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	605a      	str	r2, [r3, #4]
            break;
 80081ee:	e047      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_RECEIVE_DELAY_2: {
            mibGet->Param.ReceiveDelay2 = LoRaMacParams.ReceiveDelay2;
 80081f0:	4b2e      	ldr	r3, [pc, #184]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	605a      	str	r2, [r3, #4]
            break;
 80081f8:	e042      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_JOIN_ACCEPT_DELAY_1: {
            mibGet->Param.JoinAcceptDelay1 = LoRaMacParams.JoinAcceptDelay1;
 80081fa:	4b2c      	ldr	r3, [pc, #176]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	605a      	str	r2, [r3, #4]
            break;
 8008202:	e03d      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_JOIN_ACCEPT_DELAY_2: {
            mibGet->Param.JoinAcceptDelay2 = LoRaMacParams.JoinAcceptDelay2;
 8008204:	4b29      	ldr	r3, [pc, #164]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	605a      	str	r2, [r3, #4]
            break;
 800820c:	e038      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE: {
            mibGet->Param.ChannelsDefaultDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800820e:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <LoRaMacMibGetRequestConfirm+0x264>)
 8008210:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	711a      	strb	r2, [r3, #4]
            break;
 8008218:	e032      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DATARATE: {
            mibGet->Param.ChannelsDatarate = LoRaMacParams.ChannelsDatarate;
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 800821c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	711a      	strb	r2, [r3, #4]
            break;
 8008224:	e02c      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER: {
            mibGet->Param.ChannelsDefaultTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 8008226:	4b23      	ldr	r3, [pc, #140]	; (80082b4 <LoRaMacMibGetRequestConfirm+0x264>)
 8008228:	f993 2000 	ldrsb.w	r2, [r3]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	711a      	strb	r2, [r3, #4]
            break;
 8008230:	e026      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_CHANNELS_TX_POWER: {
            mibGet->Param.ChannelsTxPower = LoRaMacParams.ChannelsTxPower;
 8008232:	4b1e      	ldr	r3, [pc, #120]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 8008234:	f993 2000 	ldrsb.w	r2, [r3]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	711a      	strb	r2, [r3, #4]
            break;
 800823c:	e020      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_UPLINK_COUNTER: {
            mibGet->Param.UpLinkCounter = UpLinkCounter;
 800823e:	4b1e      	ldr	r3, [pc, #120]	; (80082b8 <LoRaMacMibGetRequestConfirm+0x268>)
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	605a      	str	r2, [r3, #4]
            break;
 8008246:	e01b      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_DOWNLINK_COUNTER: {
            mibGet->Param.DownLinkCounter = DownLinkCounter;
 8008248:	4b1c      	ldr	r3, [pc, #112]	; (80082bc <LoRaMacMibGetRequestConfirm+0x26c>)
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	605a      	str	r2, [r3, #4]
            break;
 8008250:	e016      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MULTICAST_CHANNEL: {
            mibGet->Param.MulticastList = MulticastChannels;
 8008252:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <LoRaMacMibGetRequestConfirm+0x270>)
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	605a      	str	r2, [r3, #4]
            break;
 800825a:	e011      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_SYSTEM_MAX_RX_ERROR: {
            mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 800825c:	4b13      	ldr	r3, [pc, #76]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	605a      	str	r2, [r3, #4]
            break;
 8008264:	e00c      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_MIN_RX_SYMBOLS: {
            mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 8008266:	4b11      	ldr	r3, [pc, #68]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 8008268:	7a1a      	ldrb	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	711a      	strb	r2, [r3, #4]
            break;
 800826e:	e007      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        case MIB_ANTENNA_GAIN: {
            mibGet->Param.AntennaGain = LoRaMacParams.AntennaGain;
 8008270:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <LoRaMacMibGetRequestConfirm+0x25c>)
 8008272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]
            break;
 8008278:	e002      	b.n	8008280 <LoRaMacMibGetRequestConfirm+0x230>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800827a:	2302      	movs	r3, #2
 800827c:	75fb      	strb	r3, [r7, #23]
            break;
 800827e:	bf00      	nop
    }

    return status;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000148 	.word	0x20000148
 8008290:	20000359 	.word	0x20000359
 8008294:	2000035a 	.word	0x2000035a
 8008298:	2000013c 	.word	0x2000013c
 800829c:	20000140 	.word	0x20000140
 80082a0:	2000011c 	.word	0x2000011c
 80082a4:	2000012c 	.word	0x2000012c
 80082a8:	20000149 	.word	0x20000149
 80082ac:	20000a68 	.word	0x20000a68
 80082b0:	20000110 	.word	0x20000110
 80082b4:	20000a0c 	.word	0x20000a0c
 80082b8:	20000350 	.word	0x20000350
 80082bc:	20000354 	.word	0x20000354
 80082c0:	20000144 	.word	0x20000144

080082c4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b089      	sub	sp, #36	; 0x24
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if ( mibSet == NULL ) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <LoRaMacMibSetRequestConfirm+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e235      	b.n	8008746 <LoRaMacMibSetRequestConfirm+0x482>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 80082da:	4bb1      	ldr	r3, [pc, #708]	; (80085a0 <LoRaMacMibSetRequestConfirm+0x2dc>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <LoRaMacMibSetRequestConfirm+0x26>
        return LORAMAC_STATUS_BUSY;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e22d      	b.n	8008746 <LoRaMacMibSetRequestConfirm+0x482>
    }

    switch ( mibSet->Type ) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b1e      	cmp	r3, #30
 80082f0:	f200 8220 	bhi.w	8008734 <LoRaMacMibSetRequestConfirm+0x470>
 80082f4:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <LoRaMacMibSetRequestConfirm+0x38>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	08008379 	.word	0x08008379
 8008300:	08008389 	.word	0x08008389
 8008304:	08008393 	.word	0x08008393
 8008308:	0800839d 	.word	0x0800839d
 800830c:	080083a7 	.word	0x080083a7
 8008310:	080083b1 	.word	0x080083b1
 8008314:	080083cf 	.word	0x080083cf
 8008318:	080083ed 	.word	0x080083ed
 800831c:	08008403 	.word	0x08008403
 8008320:	08008735 	.word	0x08008735
 8008324:	0800840f 	.word	0x0800840f
 8008328:	080084e3 	.word	0x080084e3
 800832c:	0800854f 	.word	0x0800854f
 8008330:	08008521 	.word	0x08008521
 8008334:	0800857d 	.word	0x0800857d
 8008338:	080085e9 	.word	0x080085e9
 800833c:	080085f3 	.word	0x080085f3
 8008340:	080085fd 	.word	0x080085fd
 8008344:	08008607 	.word	0x08008607
 8008348:	08008611 	.word	0x08008611
 800834c:	0800861b 	.word	0x0800861b
 8008350:	08008649 	.word	0x08008649
 8008354:	080086a5 	.word	0x080086a5
 8008358:	08008677 	.word	0x08008677
 800835c:	080086d3 	.word	0x080086d3
 8008360:	080086dd 	.word	0x080086dd
 8008364:	08008715 	.word	0x08008715
 8008368:	08008725 	.word	0x08008725
 800836c:	080086e7 	.word	0x080086e7
 8008370:	080086f9 	.word	0x080086f9
 8008374:	0800870b 	.word	0x0800870b
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	791b      	ldrb	r3, [r3, #4]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe f829 	bl	80063d4 <SwitchClass>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]
            break;
 8008386:	e1dd      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NETWORK_JOINED:
        {
            IsLoRaMacNetworkJoined = mibSet->Param.IsNetworkJoined;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	791a      	ldrb	r2, [r3, #4]
 800838c:	4b85      	ldr	r3, [pc, #532]	; (80085a4 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800838e:	701a      	strb	r2, [r3, #0]
            break;
 8008390:	e1d8      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_ADR: {
            AdrCtrlOn = mibSet->Param.AdrEnable;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	791a      	ldrb	r2, [r3, #4]
 8008396:	4b84      	ldr	r3, [pc, #528]	; (80085a8 <LoRaMacMibSetRequestConfirm+0x2e4>)
 8008398:	701a      	strb	r2, [r3, #0]
            break;
 800839a:	e1d3      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NET_ID: {
            LoRaMacNetID = mibSet->Param.NetID;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4a82      	ldr	r2, [pc, #520]	; (80085ac <LoRaMacMibSetRequestConfirm+0x2e8>)
 80083a2:	6013      	str	r3, [r2, #0]
            break;
 80083a4:	e1ce      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_DEV_ADDR: {
            LoRaMacDevAddr = mibSet->Param.DevAddr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	4a81      	ldr	r2, [pc, #516]	; (80085b0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 80083ac:	6013      	str	r3, [r2, #0]
            break;
 80083ae:	e1c9      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_NWK_SKEY: {
            if ( mibSet->Param.NwkSKey != NULL ) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <LoRaMacMibSetRequestConfirm+0x104>
                memcpy1( LoRaMacNwkSKey, mibSet->Param.NwkSKey,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2210      	movs	r2, #16
 80083be:	4619      	mov	r1, r3
 80083c0:	487c      	ldr	r0, [pc, #496]	; (80085b4 <LoRaMacMibSetRequestConfirm+0x2f0>)
 80083c2:	f008 f9be 	bl	8010742 <memcpy1>
                         sizeof( LoRaMacNwkSKey ) );
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80083c6:	e1bd      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80083c8:	2303      	movs	r3, #3
 80083ca:	75fb      	strb	r3, [r7, #23]
            break;
 80083cc:	e1ba      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_APP_SKEY: {
            if ( mibSet->Param.AppSKey != NULL ) {
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <LoRaMacMibSetRequestConfirm+0x122>
                memcpy1( LoRaMacAppSKey, mibSet->Param.AppSKey,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2210      	movs	r2, #16
 80083dc:	4619      	mov	r1, r3
 80083de:	4876      	ldr	r0, [pc, #472]	; (80085b8 <LoRaMacMibSetRequestConfirm+0x2f4>)
 80083e0:	f008 f9af 	bl	8010742 <memcpy1>
                         sizeof( LoRaMacAppSKey ) );
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80083e4:	e1ae      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80083e6:	2303      	movs	r3, #3
 80083e8:	75fb      	strb	r3, [r7, #23]
            break;
 80083ea:	e1ab      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_PUBLIC_NETWORK: {
            PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	791a      	ldrb	r2, [r3, #4]
 80083f0:	4b72      	ldr	r3, [pc, #456]	; (80085bc <LoRaMacMibSetRequestConfirm+0x2f8>)
 80083f2:	701a      	strb	r2, [r3, #0]
            Radio.SetPublicNetwork(mibSet->Param.EnablePublicNetwork);
 80083f4:	4b72      	ldr	r3, [pc, #456]	; (80085c0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80083f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7912      	ldrb	r2, [r2, #4]
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
            break;
 8008400:	e1a0      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_REPEATER_SUPPORT: {
             LoRaMacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	791a      	ldrb	r2, [r3, #4]
 8008406:	4b6f      	ldr	r3, [pc, #444]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 8008408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            break;
 800840c:	e19a      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RX2_CHANNEL: {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7a1b      	ldrb	r3, [r3, #8]
 8008412:	b25b      	sxtb	r3, r3
 8008414:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8008416:	4b6b      	ldr	r3, [pc, #428]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 8008418:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800841c:	727b      	strb	r3, [r7, #9]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true ) {
 800841e:	4b6a      	ldr	r3, [pc, #424]	; (80085c8 <LoRaMacMibSetRequestConfirm+0x304>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f107 0108 	add.w	r1, r7, #8
 8008426:	2206      	movs	r2, #6
 8008428:	4618      	mov	r0, r3
 800842a:	f001 fc28 	bl	8009c7e <RegionVerify>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d053      	beq.n	80084dc <LoRaMacMibSetRequestConfirm+0x218>
                memcpy(&LoRaMacParams.Rx2Channel, &mibSet->Param.Rx2Channel, sizeof(LoRaMacParams.Rx2Channel));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	2208      	movs	r2, #8
 800843a:	4619      	mov	r1, r3
 800843c:	4863      	ldr	r0, [pc, #396]	; (80085cc <LoRaMacMibSetRequestConfirm+0x308>)
 800843e:	f009 fd9f 	bl	8011f80 <memcpy>
                if ( ( LoRaMacDeviceClass == CLASS_C ) && ( IsLoRaMacNetworkJoined == true ) ) {
 8008442:	4b63      	ldr	r3, [pc, #396]	; (80085d0 <LoRaMacMibSetRequestConfirm+0x30c>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b02      	cmp	r3, #2
 8008448:	f040 8177 	bne.w	800873a <LoRaMacMibSetRequestConfirm+0x476>
 800844c:	4b55      	ldr	r3, [pc, #340]	; (80085a4 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8172 	beq.w	800873a <LoRaMacMibSetRequestConfirm+0x476>
                    // Compute Rx2 windows parameters
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 8008456:	4b5c      	ldr	r3, [pc, #368]	; (80085c8 <LoRaMacMibSetRequestConfirm+0x304>)
 8008458:	7818      	ldrb	r0, [r3, #0]
                                                     LoRaMacParams.Rx2Channel.Datarate,
 800845a:	4b5a      	ldr	r3, [pc, #360]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 800845c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                    RegionComputeRxWindowParameters( LoRaMacRegion,
 8008460:	b259      	sxtb	r1, r3
 8008462:	4b58      	ldr	r3, [pc, #352]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 8008464:	7a1a      	ldrb	r2, [r3, #8]
 8008466:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	4c5a      	ldr	r4, [pc, #360]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 800846c:	9400      	str	r4, [sp, #0]
 800846e:	f001 fc5a 	bl	8009d26 <RegionComputeRxWindowParameters>
                                                     LoRaMacParams.MinRxSymbols,
                                                     LoRaMacParams.SystemMaxRxError,
                                                     &RxWindow2Config );

                    RxWindow2Config.Channel = Channel;
 8008472:	4b59      	ldr	r3, [pc, #356]	; (80085d8 <LoRaMacMibSetRequestConfirm+0x314>)
 8008474:	781a      	ldrb	r2, [r3, #0]
 8008476:	4b57      	ldr	r3, [pc, #348]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 8008478:	701a      	strb	r2, [r3, #0]
                    RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 800847a:	4b52      	ldr	r3, [pc, #328]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	4a55      	ldr	r2, [pc, #340]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 8008480:	6053      	str	r3, [r2, #4]
                    RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 8008482:	4b50      	ldr	r3, [pc, #320]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 8008484:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008488:	4b52      	ldr	r3, [pc, #328]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 800848a:	741a      	strb	r2, [r3, #16]
                    RxWindow2Config.RepeaterSupport = LoRaMacParams.RepeaterSupport;
 800848c:	4b4d      	ldr	r3, [pc, #308]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 800848e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008492:	4b50      	ldr	r3, [pc, #320]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 8008494:	745a      	strb	r2, [r3, #17]
                    RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8008496:	4b4f      	ldr	r3, [pc, #316]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 8008498:	2201      	movs	r2, #1
 800849a:	74da      	strb	r2, [r3, #19]
                    RxWindow2Config.RxContinuous = true;
 800849c:	4b4d      	ldr	r3, [pc, #308]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 800849e:	2201      	movs	r2, #1
 80084a0:	749a      	strb	r2, [r3, #18]

                    Radio.Sleep();
 80084a2:	4b47      	ldr	r3, [pc, #284]	; (80085c0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a6:	4798      	blx	r3
                    if ( RegionRxConfig( LoRaMacRegion, &RxWindow2Config, ( int8_t * )&McpsIndication.RxDatarate ) == true ) {
 80084a8:	4b47      	ldr	r3, [pc, #284]	; (80085c8 <LoRaMacMibSetRequestConfirm+0x304>)
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	4a4b      	ldr	r2, [pc, #300]	; (80085dc <LoRaMacMibSetRequestConfirm+0x318>)
 80084ae:	4949      	ldr	r1, [pc, #292]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fc52 	bl	8009d5a <RegionRxConfig>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <LoRaMacMibSetRequestConfirm+0x212>
                        RxWindowSetup( RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow );
 80084bc:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 80084be:	7c9b      	ldrb	r3, [r3, #18]
 80084c0:	4a40      	ldr	r2, [pc, #256]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 80084c2:	68d2      	ldr	r2, [r2, #12]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd ff68 	bl	800639c <RxWindowSetup>
                        RxSlot = RxWindow2Config.RxSlot;
 80084cc:	4b41      	ldr	r3, [pc, #260]	; (80085d4 <LoRaMacMibSetRequestConfirm+0x310>)
 80084ce:	7cda      	ldrb	r2, [r3, #19]
 80084d0:	4b43      	ldr	r3, [pc, #268]	; (80085e0 <LoRaMacMibSetRequestConfirm+0x31c>)
 80084d2:	701a      	strb	r2, [r3, #0]
                    }
                }
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80084d4:	e131      	b.n	800873a <LoRaMacMibSetRequestConfirm+0x476>
                        status = LORAMAC_STATUS_PARAMETER_INVALID;
 80084d6:	2303      	movs	r3, #3
 80084d8:	75fb      	strb	r3, [r7, #23]
            break;
 80084da:	e12e      	b.n	800873a <LoRaMacMibSetRequestConfirm+0x476>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80084dc:	2303      	movs	r3, #3
 80084de:	75fb      	strb	r3, [r7, #23]
            break;
 80084e0:	e12b      	b.n	800873a <LoRaMacMibSetRequestConfirm+0x476>
        }
        case MIB_RX2_DEFAULT_CHANNEL: {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7a1b      	ldrb	r3, [r3, #8]
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 80084ea:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 80084ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084f0:	727b      	strb	r3, [r7, #9]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_RX_DR ) == true ) {
 80084f2:	4b35      	ldr	r3, [pc, #212]	; (80085c8 <LoRaMacMibSetRequestConfirm+0x304>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f107 0108 	add.w	r1, r7, #8
 80084fa:	2206      	movs	r2, #6
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 fbbe 	bl	8009c7e <RegionVerify>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d008      	beq.n	800851a <LoRaMacMibSetRequestConfirm+0x256>
                LoRaMacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8008508:	4b36      	ldr	r3, [pc, #216]	; (80085e4 <LoRaMacMibSetRequestConfirm+0x320>)
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	3324      	adds	r3, #36	; 0x24
 800850e:	3204      	adds	r2, #4
 8008510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008514:	e883 0003 	stmia.w	r3, {r0, r1}
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008518:	e114      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800851a:	2303      	movs	r3, #3
 800851c:	75fb      	strb	r3, [r7, #23]
            break;
 800851e:	e111      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_MASK: {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8008526:	2301      	movs	r3, #1
 8008528:	743b      	strb	r3, [r7, #16]

            if ( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false ) {
 800852a:	4b27      	ldr	r3, [pc, #156]	; (80085c8 <LoRaMacMibSetRequestConfirm+0x304>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f107 020c 	add.w	r2, r7, #12
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f001 fbcb 	bl	8009cd0 <RegionChanMaskSet>
 800853a:	4603      	mov	r3, r0
 800853c:	f083 0301 	eor.w	r3, r3, #1
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80fb 	beq.w	800873e <LoRaMacMibSetRequestConfirm+0x47a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008548:	2303      	movs	r3, #3
 800854a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800854c:	e0f7      	b.n	800873e <LoRaMacMibSetRequestConfirm+0x47a>
        }
        case MIB_CHANNELS_MASK: {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8008554:	2300      	movs	r3, #0
 8008556:	743b      	strb	r3, [r7, #16]

            if ( RegionChanMaskSet( LoRaMacRegion, &chanMaskSet ) == false ) {
 8008558:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <LoRaMacMibSetRequestConfirm+0x304>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	f107 020c 	add.w	r2, r7, #12
 8008560:	4611      	mov	r1, r2
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fbb4 	bl	8009cd0 <RegionChanMaskSet>
 8008568:	4603      	mov	r3, r0
 800856a:	f083 0301 	eor.w	r3, r3, #1
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80e6 	beq.w	8008742 <LoRaMacMibSetRequestConfirm+0x47e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008576:	2303      	movs	r3, #3
 8008578:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800857a:	e0e2      	b.n	8008742 <LoRaMacMibSetRequestConfirm+0x47e>
        }
        case MIB_CHANNELS_NB_REP: {
            if ( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	791b      	ldrb	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <LoRaMacMibSetRequestConfirm+0x2d4>
                 ( mibSet->Param.ChannelNbRep <= 15 ) ) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	791b      	ldrb	r3, [r3, #4]
            if ( ( mibSet->Param.ChannelNbRep >= 1 ) &&
 8008588:	2b0f      	cmp	r3, #15
 800858a:	d805      	bhi.n	8008598 <LoRaMacMibSetRequestConfirm+0x2d4>
                LoRaMacParams.ChannelsNbRep = mibSet->Param.ChannelNbRep;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	791a      	ldrb	r2, [r3, #4]
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <LoRaMacMibSetRequestConfirm+0x300>)
 8008592:	f883 2020 	strb.w	r2, [r3, #32]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008596:	e0d5      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008598:	2303      	movs	r3, #3
 800859a:	75fb      	strb	r3, [r7, #23]
            break;
 800859c:	e0d2      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
 800859e:	bf00      	nop
 80085a0:	2000047c 	.word	0x2000047c
 80085a4:	20000359 	.word	0x20000359
 80085a8:	2000035a 	.word	0x2000035a
 80085ac:	2000013c 	.word	0x2000013c
 80085b0:	20000140 	.word	0x20000140
 80085b4:	2000011c 	.word	0x2000011c
 80085b8:	2000012c 	.word	0x2000012c
 80085bc:	20000149 	.word	0x20000149
 80085c0:	080127d0 	.word	0x080127d0
 80085c4:	20000a68 	.word	0x20000a68
 80085c8:	20000110 	.word	0x20000110
 80085cc:	20000a8c 	.word	0x20000a8c
 80085d0:	20000148 	.word	0x20000148
 80085d4:	20000ad4 	.word	0x20000ad4
 80085d8:	20000475 	.word	0x20000475
 80085dc:	200009dc 	.word	0x200009dc
 80085e0:	20000a64 	.word	0x20000a64
 80085e4:	20000a0c 	.word	0x20000a0c
        }
        case MIB_MAX_RX_WINDOW_DURATION: {
            LoRaMacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	4a58      	ldr	r2, [pc, #352]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 80085ee:	60d3      	str	r3, [r2, #12]
            break;
 80085f0:	e0a8      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RECEIVE_DELAY_1: {
            LoRaMacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	4a56      	ldr	r2, [pc, #344]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 80085f8:	6113      	str	r3, [r2, #16]
            break;
 80085fa:	e0a3      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_RECEIVE_DELAY_2: {
            LoRaMacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	4a53      	ldr	r2, [pc, #332]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008602:	6153      	str	r3, [r2, #20]
            break;
 8008604:	e09e      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_JOIN_ACCEPT_DELAY_1: {
            LoRaMacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	4a51      	ldr	r2, [pc, #324]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 800860c:	6193      	str	r3, [r2, #24]
            break;
 800860e:	e099      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_JOIN_ACCEPT_DELAY_2: {
            LoRaMacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a4e      	ldr	r2, [pc, #312]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008616:	61d3      	str	r3, [r2, #28]
            break;
 8008618:	e094      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE: {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008620:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_DR ) == true ) {
 8008622:	4b4c      	ldr	r3, [pc, #304]	; (8008754 <LoRaMacMibSetRequestConfirm+0x490>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f107 0108 	add.w	r1, r7, #8
 800862a:	2205      	movs	r2, #5
 800862c:	4618      	mov	r0, r3
 800862e:	f001 fb26 	bl	8009c7e <RegionVerify>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d004      	beq.n	8008642 <LoRaMacMibSetRequestConfirm+0x37e>
                LoRaMacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008638:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800863c:	4b46      	ldr	r3, [pc, #280]	; (8008758 <LoRaMacMibSetRequestConfirm+0x494>)
 800863e:	705a      	strb	r2, [r3, #1]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8008640:	e080      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008642:	2303      	movs	r3, #3
 8008644:	75fb      	strb	r3, [r7, #23]
            break;
 8008646:	e07d      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DATARATE: {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800864e:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true ) {
 8008650:	4b40      	ldr	r3, [pc, #256]	; (8008754 <LoRaMacMibSetRequestConfirm+0x490>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	f107 0108 	add.w	r1, r7, #8
 8008658:	2204      	movs	r2, #4
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fb0f 	bl	8009c7e <RegionVerify>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <LoRaMacMibSetRequestConfirm+0x3ac>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008666:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800866a:	4b39      	ldr	r3, [pc, #228]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 800866c:	705a      	strb	r2, [r3, #1]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800866e:	e069      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008670:	2303      	movs	r3, #3
 8008672:	75fb      	strb	r3, [r7, #23]
            break;
 8008674:	e066      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER: {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800867c:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_DEF_TX_POWER ) == true ) {
 800867e:	4b35      	ldr	r3, [pc, #212]	; (8008754 <LoRaMacMibSetRequestConfirm+0x490>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	f107 0108 	add.w	r1, r7, #8
 8008686:	2208      	movs	r2, #8
 8008688:	4618      	mov	r0, r3
 800868a:	f001 faf8 	bl	8009c7e <RegionVerify>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <LoRaMacMibSetRequestConfirm+0x3da>
                LoRaMacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8008694:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8008698:	4b2f      	ldr	r3, [pc, #188]	; (8008758 <LoRaMacMibSetRequestConfirm+0x494>)
 800869a:	701a      	strb	r2, [r3, #0]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800869c:	e052      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800869e:	2303      	movs	r3, #3
 80086a0:	75fb      	strb	r3, [r7, #23]
            break;
 80086a2:	e04f      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_CHANNELS_TX_POWER: {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80086aa:	723b      	strb	r3, [r7, #8]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_POWER ) == true ) {
 80086ac:	4b29      	ldr	r3, [pc, #164]	; (8008754 <LoRaMacMibSetRequestConfirm+0x490>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f107 0108 	add.w	r1, r7, #8
 80086b4:	2207      	movs	r2, #7
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fae1 	bl	8009c7e <RegionVerify>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <LoRaMacMibSetRequestConfirm+0x408>
                LoRaMacParams.ChannelsTxPower = verify.TxPower;
 80086c2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80086c6:	4b22      	ldr	r3, [pc, #136]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 80086c8:	701a      	strb	r2, [r3, #0]
            } else {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80086ca:	e03b      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80086cc:	2303      	movs	r3, #3
 80086ce:	75fb      	strb	r3, [r7, #23]
            break;
 80086d0:	e038      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_UPLINK_COUNTER: {
            UpLinkCounter = mibSet->Param.UpLinkCounter;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4a21      	ldr	r2, [pc, #132]	; (800875c <LoRaMacMibSetRequestConfirm+0x498>)
 80086d8:	6013      	str	r3, [r2, #0]
            break;
 80086da:	e033      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_DOWNLINK_COUNTER: {
            DownLinkCounter = mibSet->Param.DownLinkCounter;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <LoRaMacMibSetRequestConfirm+0x49c>)
 80086e2:	6013      	str	r3, [r2, #0]
            break;
 80086e4:	e02e      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_SYSTEM_MAX_RX_ERROR: {
            LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4a1b      	ldr	r2, [pc, #108]	; (8008758 <LoRaMacMibSetRequestConfirm+0x494>)
 80086ec:	6053      	str	r3, [r2, #4]
 80086ee:	4b1a      	ldr	r3, [pc, #104]	; (8008758 <LoRaMacMibSetRequestConfirm+0x494>)
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	4a17      	ldr	r2, [pc, #92]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 80086f4:	6053      	str	r3, [r2, #4]
            break;
 80086f6:	e025      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MIN_RX_SYMBOLS: {
            LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	791a      	ldrb	r2, [r3, #4]
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <LoRaMacMibSetRequestConfirm+0x494>)
 80086fe:	721a      	strb	r2, [r3, #8]
 8008700:	4b15      	ldr	r3, [pc, #84]	; (8008758 <LoRaMacMibSetRequestConfirm+0x494>)
 8008702:	7a1a      	ldrb	r2, [r3, #8]
 8008704:	4b12      	ldr	r3, [pc, #72]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008706:	721a      	strb	r2, [r3, #8]
            break;
 8008708:	e01c      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_ANTENNA_GAIN: {
            LoRaMacParams.AntennaGain = mibSet->Param.AntennaGain;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	4a10      	ldr	r2, [pc, #64]	; (8008750 <LoRaMacMibSetRequestConfirm+0x48c>)
 8008710:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8008712:	e017      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MULTICAST_CHANNEL: {
            status = LoRaMacMulticastChannelLink(mibSet->Param.MulticastList);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 f84f 	bl	80087bc <LoRaMacMulticastChannelLink>
 800871e:	4603      	mov	r3, r0
 8008720:	75fb      	strb	r3, [r7, #23]
            break;
 8008722:	e00f      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        case MIB_MULTICAST_CHANNEL_DEL: {
            status = LoRaMacMulticastChannelUnlink(mibSet->Param.MulticastList);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 f87f 	bl	800882c <LoRaMacMulticastChannelUnlink>
 800872e:	4603      	mov	r3, r0
 8008730:	75fb      	strb	r3, [r7, #23]
            break;
 8008732:	e007      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008734:	2302      	movs	r3, #2
 8008736:	75fb      	strb	r3, [r7, #23]
            break;
 8008738:	e004      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <LoRaMacMibSetRequestConfirm+0x480>
            break;
 8008742:	bf00      	nop
        }
    }

    return status;
 8008744:	7dfb      	ldrb	r3, [r7, #23]
}
 8008746:	4618      	mov	r0, r3
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd90      	pop	{r4, r7, pc}
 800874e:	bf00      	nop
 8008750:	20000a68 	.word	0x20000a68
 8008754:	20000110 	.word	0x20000110
 8008758:	20000a0c 	.word	0x20000a0c
 800875c:	20000350 	.word	0x20000350
 8008760:	20000354 	.word	0x20000354

08008764 <LoRaMacChannelAdd>:

LoRaMacStatus_t LoRaMacChannelAdd( uint8_t id, ChannelParams_t params )
{
 8008764:	b590      	push	{r4, r7, lr}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	4604      	mov	r4, r0
 800876c:	4638      	mov	r0, r7
 800876e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8008772:	4623      	mov	r3, r4
 8008774:	73fb      	strb	r3, [r7, #15]
    ChannelAddParams_t channelAdd;

    // Validate if the MAC is in a correct state
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <LoRaMacChannelAdd+0x50>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <LoRaMacChannelAdd+0x2e>
        if ( ( LoRaMacState & LORAMAC_TX_CONFIG ) != LORAMAC_TX_CONFIG ) {
 8008782:	4b0c      	ldr	r3, [pc, #48]	; (80087b4 <LoRaMacChannelAdd+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0320 	and.w	r3, r3, #32
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <LoRaMacChannelAdd+0x2e>
            return LORAMAC_STATUS_BUSY;
 800878e:	2301      	movs	r3, #1
 8008790:	e00c      	b.n	80087ac <LoRaMacChannelAdd+0x48>
        }
    }

    channelAdd.NewChannel = &params;
 8008792:	463b      	mov	r3, r7
 8008794:	613b      	str	r3, [r7, #16]
    channelAdd.ChannelId = id;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	753b      	strb	r3, [r7, #20]

    return RegionChannelAdd( LoRaMacRegion, &channelAdd );
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <LoRaMacChannelAdd+0x54>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f107 0210 	add.w	r2, r7, #16
 80087a2:	4611      	mov	r1, r2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fba7 	bl	8009ef8 <RegionChannelAdd>
 80087aa:	4603      	mov	r3, r0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	371c      	adds	r7, #28
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd90      	pop	{r4, r7, pc}
 80087b4:	2000047c 	.word	0x2000047c
 80087b8:	20000110 	.word	0x20000110

080087bc <LoRaMacMulticastChannelLink>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMulticastChannelLink( MulticastParams_t *channelParam )
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
    if ( channelParam == NULL ) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <LoRaMacMulticastChannelLink+0x12>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e024      	b.n	8008818 <LoRaMacMulticastChannelLink+0x5c>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 80087ce:	4b15      	ldr	r3, [pc, #84]	; (8008824 <LoRaMacMulticastChannelLink+0x68>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <LoRaMacMulticastChannelLink+0x22>
        return LORAMAC_STATUS_BUSY;
 80087da:	2301      	movs	r3, #1
 80087dc:	e01c      	b.n	8008818 <LoRaMacMulticastChannelLink+0x5c>
    }


    // Reset downlink counter
    channelParam->DownLinkCounter = 0;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	625a      	str	r2, [r3, #36]	; 0x24
    channelParam->Next = NULL;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38

    if ( MulticastChannels == NULL ) {
 80087ea:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <LoRaMacMulticastChannelLink+0x6c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d103      	bne.n	80087fa <LoRaMacMulticastChannelLink+0x3e>
        // New node is the fist element
        MulticastChannels = channelParam;
 80087f2:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <LoRaMacMulticastChannelLink+0x6c>)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	e00d      	b.n	8008816 <LoRaMacMulticastChannelLink+0x5a>
    } else {
        MulticastParams_t *cur = MulticastChannels;
 80087fa:	4b0b      	ldr	r3, [pc, #44]	; (8008828 <LoRaMacMulticastChannelLink+0x6c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	60fb      	str	r3, [r7, #12]

        // Search the last node in the list
        while ( cur->Next != NULL ) {
 8008800:	e002      	b.n	8008808 <LoRaMacMulticastChannelLink+0x4c>
            cur = cur->Next;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	60fb      	str	r3, [r7, #12]
        while ( cur->Next != NULL ) {
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f8      	bne.n	8008802 <LoRaMacMulticastChannelLink+0x46>
        }
        // This function always finds the last node
        cur->Next = channelParam;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	639a      	str	r2, [r3, #56]	; 0x38
    }

    return LORAMAC_STATUS_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	2000047c 	.word	0x2000047c
 8008828:	20000144 	.word	0x20000144

0800882c <LoRaMacMulticastChannelUnlink>:

LoRaMacStatus_t LoRaMacMulticastChannelUnlink( MulticastParams_t *channelParam )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
    if ( channelParam == NULL ) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <LoRaMacMulticastChannelUnlink+0x12>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800883a:	2303      	movs	r3, #3
 800883c:	e031      	b.n	80088a2 <LoRaMacMulticastChannelUnlink+0x76>
    }
    if ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) {
 800883e:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <LoRaMacMulticastChannelUnlink+0x80>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <LoRaMacMulticastChannelUnlink+0x22>
        return LORAMAC_STATUS_BUSY;
 800884a:	2301      	movs	r3, #1
 800884c:	e029      	b.n	80088a2 <LoRaMacMulticastChannelUnlink+0x76>
    }

    if ( MulticastChannels != NULL ) {
 800884e:	4b18      	ldr	r3, [pc, #96]	; (80088b0 <LoRaMacMulticastChannelUnlink+0x84>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d024      	beq.n	80088a0 <LoRaMacMulticastChannelUnlink+0x74>
        if ( MulticastChannels == channelParam ) {
 8008856:	4b16      	ldr	r3, [pc, #88]	; (80088b0 <LoRaMacMulticastChannelUnlink+0x84>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d104      	bne.n	800886a <LoRaMacMulticastChannelUnlink+0x3e>
            // First element
            MulticastChannels = channelParam->Next;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	4a12      	ldr	r2, [pc, #72]	; (80088b0 <LoRaMacMulticastChannelUnlink+0x84>)
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e017      	b.n	800889a <LoRaMacMulticastChannelUnlink+0x6e>
        } else {
            MulticastParams_t *cur = MulticastChannels;
 800886a:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <LoRaMacMulticastChannelUnlink+0x84>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]

            // Search the node in the list
            while ( cur->Next && cur->Next != channelParam ) {
 8008870:	e002      	b.n	8008878 <LoRaMacMulticastChannelUnlink+0x4c>
                cur = cur->Next;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	60fb      	str	r3, [r7, #12]
            while ( cur->Next && cur->Next != channelParam ) {
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <LoRaMacMulticastChannelUnlink+0x5e>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d1f3      	bne.n	8008872 <LoRaMacMulticastChannelUnlink+0x46>
            }
            // If we found the node, remove it
            if ( cur->Next ) {
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <LoRaMacMulticastChannelUnlink+0x6e>
                cur->Next = channelParam->Next;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	639a      	str	r2, [r3, #56]	; 0x38
            }
        }
        channelParam->Next = NULL;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    return LORAMAC_STATUS_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr
 80088ac:	2000047c 	.word	0x2000047c
 80088b0:	20000144 	.word	0x20000144

080088b4 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80088bc:	2302      	movs	r3, #2
 80088be:	77fb      	strb	r3, [r7, #31]
    MlmeConfirmQueue_t queueElement;
    AlternateDrParams_t altDr;
    VerifyParams_t verify;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    if ( mlmeRequest == NULL ) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <LoRaMacMlmeRequest+0x16>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e0f6      	b.n	8008ab8 <LoRaMacMlmeRequest+0x204>
    }
    if( LoRaMacState != LORAMAC_IDLE )
 80088ca:	4b7d      	ldr	r3, [pc, #500]	; (8008ac0 <LoRaMacMlmeRequest+0x20c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e0f0      	b.n	8008ab8 <LoRaMacMlmeRequest+0x204>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80088d6:	f000 fbe3 	bl	80090a0 <LoRaMacConfirmQueueIsFull>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0e9      	b.n	8008ab8 <LoRaMacMlmeRequest+0x204>
    }

    switch ( mlmeRequest->Type ) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	f200 80d1 	bhi.w	8008a90 <LoRaMacMlmeRequest+0x1dc>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <LoRaMacMlmeRequest+0x40>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008905 	.word	0x08008905
 80088f8:	080089f3 	.word	0x080089f3
 80088fc:	08008a25 	.word	0x08008a25
 8008900:	08008a57 	.word	0x08008a57
        case MLME_JOIN: {
            if ( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <LoRaMacMlmeRequest+0x68>
                 ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
            if ( ( mlmeRequest->Req.Join.DevEui == NULL ) ||
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <LoRaMacMlmeRequest+0x68>
                 ( mlmeRequest->Req.Join.AppKey == NULL ) )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68db      	ldr	r3, [r3, #12]
                 ( mlmeRequest->Req.Join.AppEui == NULL ) ||
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <LoRaMacMlmeRequest+0x6c>
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800891c:	2303      	movs	r3, #3
 800891e:	e0cb      	b.n	8008ab8 <LoRaMacMlmeRequest+0x204>
            }
            // Verify the parameter NbTrials for the join procedure
            verify.NbJoinTrials = mlmeRequest->Req.Join.NbTrials;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	7c1b      	ldrb	r3, [r3, #16]
 8008924:	743b      	strb	r3, [r7, #16]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_NB_JOIN_TRIALS ) == false ) {
 8008926:	4b67      	ldr	r3, [pc, #412]	; (8008ac4 <LoRaMacMlmeRequest+0x210>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	f107 0110 	add.w	r1, r7, #16
 800892e:	2231      	movs	r2, #49	; 0x31
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f9a4 	bl	8009c7e <RegionVerify>
 8008936:	4603      	mov	r3, r0
 8008938:	f083 0301 	eor.w	r3, r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00f      	beq.n	8008962 <LoRaMacMlmeRequest+0xae>
                // Value not supported, get default
                getPhy.Attribute = PHY_DEF_NB_JOIN_TRIALS;
 8008942:	2332      	movs	r3, #50	; 0x32
 8008944:	733b      	strb	r3, [r7, #12]
                phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008946:	4b5f      	ldr	r3, [pc, #380]	; (8008ac4 <LoRaMacMlmeRequest+0x210>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	f107 020c 	add.w	r2, r7, #12
 800894e:	4611      	mov	r1, r2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 f955 	bl	8009c00 <RegionGetPhyParam>
 8008956:	4603      	mov	r3, r0
 8008958:	60bb      	str	r3, [r7, #8]
                mlmeRequest->Req.Join.NbTrials = ( uint8_t ) phyParam.Value;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	b2da      	uxtb	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	741a      	strb	r2, [r3, #16]
            }

            LoRaMacFlags.Bits.MlmeReq = 1;
 8008962:	4a59      	ldr	r2, [pc, #356]	; (8008ac8 <LoRaMacMlmeRequest+0x214>)
 8008964:	7813      	ldrb	r3, [r2, #0]
 8008966:	f043 0308 	orr.w	r3, r3, #8
 800896a:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	763b      	strb	r3, [r7, #24]

            LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	4a55      	ldr	r2, [pc, #340]	; (8008acc <LoRaMacMlmeRequest+0x218>)
 8008978:	6013      	str	r3, [r2, #0]
            LoRaMacAppEui = mlmeRequest->Req.Join.AppEui;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	4a54      	ldr	r2, [pc, #336]	; (8008ad0 <LoRaMacMlmeRequest+0x21c>)
 8008980:	6013      	str	r3, [r2, #0]
            LoRaMacAppKey = mlmeRequest->Req.Join.AppKey;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	4a53      	ldr	r2, [pc, #332]	; (8008ad4 <LoRaMacMlmeRequest+0x220>)
 8008988:	6013      	str	r3, [r2, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800898a:	2307      	movs	r3, #7
 800898c:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 800898e:	2300      	movs	r3, #0
 8008990:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008992:	f107 0318 	add.w	r3, r7, #24
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fa12 	bl	8008dc0 <LoRaMacConfirmQueueAdd>
            MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7c1a      	ldrb	r2, [r3, #16]
 80089a0:	4b4d      	ldr	r3, [pc, #308]	; (8008ad8 <LoRaMacMlmeRequest+0x224>)
 80089a2:	701a      	strb	r2, [r3, #0]

            // Reset variable JoinRequestTrials
            JoinRequestTrials = 0;
 80089a4:	4b4d      	ldr	r3, [pc, #308]	; (8008adc <LoRaMacMlmeRequest+0x228>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]

            // Setup header information
            macHdr.Value = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	773b      	strb	r3, [r7, #28]
            macHdr.Bits.MType  = FRAME_TYPE_JOIN_REQ;
 80089ae:	7f3b      	ldrb	r3, [r7, #28]
 80089b0:	f36f 1347 	bfc	r3, #5, #3
 80089b4:	773b      	strb	r3, [r7, #28]
            ResetMacParameters( );
 80089b6:	f7fe fc29 	bl	800720c <ResetMacParameters>
            altDr.NbTrials = JoinRequestTrials + 1;
 80089ba:	4b48      	ldr	r3, [pc, #288]	; (8008adc <LoRaMacMlmeRequest+0x228>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	3301      	adds	r3, #1
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	82bb      	strh	r3, [r7, #20]
            LoRaMacParams.ChannelsDatarate = RegionAlternateDr( LoRaMacRegion, &altDr );
 80089c6:	4b3f      	ldr	r3, [pc, #252]	; (8008ac4 <LoRaMacMlmeRequest+0x210>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f107 0214 	add.w	r2, r7, #20
 80089ce:	4611      	mov	r1, r2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fa54 	bl	8009e7e <RegionAlternateDr>
 80089d6:	4603      	mov	r3, r0
 80089d8:	461a      	mov	r2, r3
 80089da:	4b41      	ldr	r3, [pc, #260]	; (8008ae0 <LoRaMacMlmeRequest+0x22c>)
 80089dc:	705a      	strb	r2, [r3, #1]
            status = Send( &macHdr, 0, NULL, 0 );
 80089de:	f107 001c 	add.w	r0, r7, #28
 80089e2:	2300      	movs	r3, #0
 80089e4:	2200      	movs	r2, #0
 80089e6:	2100      	movs	r1, #0
 80089e8:	f7fe fa96 	bl	8006f18 <Send>
 80089ec:	4603      	mov	r3, r0
 80089ee:	77fb      	strb	r3, [r7, #31]
            break;
 80089f0:	e04f      	b.n	8008a92 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_LINK_CHECK: {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 80089f2:	4a35      	ldr	r2, [pc, #212]	; (8008ac8 <LoRaMacMlmeRequest+0x214>)
 80089f4:	7813      	ldrb	r3, [r2, #0]
 80089f6:	f043 0308 	orr.w	r3, r3, #8
 80089fa:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008a06:	2300      	movs	r3, #0
 8008a08:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008a0a:	f107 0318 	add.w	r3, r7, #24
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f9d6 	bl	8008dc0 <LoRaMacConfirmQueueAdd>

            // LoRaMac will send this command piggy-pack
            status = AddMacCommand( MOTE_MAC_LINK_CHECK_REQ, 0, 0 );
 8008a14:	2200      	movs	r2, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	2002      	movs	r0, #2
 8008a1a:	f7fd fd99 	bl	8006550 <AddMacCommand>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	77fb      	strb	r3, [r7, #31]
            break;
 8008a22:	e036      	b.n	8008a92 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_TXCW: {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 8008a24:	4a28      	ldr	r2, [pc, #160]	; (8008ac8 <LoRaMacMlmeRequest+0x214>)
 8008a26:	7813      	ldrb	r3, [r2, #0]
 8008a28:	f043 0308 	orr.w	r3, r3, #8
 8008a2c:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008a3c:	f107 0318 	add.w	r3, r7, #24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 f9bd 	bl	8008dc0 <LoRaMacConfirmQueueAdd>

            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	889b      	ldrh	r3, [r3, #4]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fffa 	bl	8007a44 <SetTxContinuousWave>
 8008a50:	4603      	mov	r3, r0
 8008a52:	77fb      	strb	r3, [r7, #31]
            break;
 8008a54:	e01d      	b.n	8008a92 <LoRaMacMlmeRequest+0x1de>
        }
        case MLME_TXCW_1:
        {
            // Apply the request
            LoRaMacFlags.Bits.MlmeReq = 1;
 8008a56:	4a1c      	ldr	r2, [pc, #112]	; (8008ac8 <LoRaMacMlmeRequest+0x214>)
 8008a58:	7813      	ldrb	r3, [r2, #0]
 8008a5a:	f043 0308 	orr.w	r3, r3, #8
 8008a5e:	7013      	strb	r3, [r2, #0]
            queueElement.Request = mlmeRequest->Type;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	763b      	strb	r3, [r7, #24]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	767b      	strb	r3, [r7, #25]
            queueElement.RestrictCommonReadyToHandle = false;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	76fb      	strb	r3, [r7, #27]
            LoRaMacConfirmQueueAdd( &queueElement );
 8008a6e:	f107 0318 	add.w	r3, r7, #24
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f9a4 	bl	8008dc0 <LoRaMacConfirmQueueAdd>

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	8898      	ldrh	r0, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6899      	ldr	r1, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7b1b      	ldrb	r3, [r3, #12]
 8008a84:	461a      	mov	r2, r3
 8008a86:	f7ff f81b 	bl	8007ac0 <SetTxContinuousWave1>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	77fb      	strb	r3, [r7, #31]
            break;
 8008a8e:	e000      	b.n	8008a92 <LoRaMacMlmeRequest+0x1de>
        }
        default:
            break;
 8008a90:	bf00      	nop
    }
    if ( status != LORAMAC_STATUS_OK ) {
 8008a92:	7ffb      	ldrb	r3, [r7, #31]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00e      	beq.n	8008ab6 <LoRaMacMlmeRequest+0x202>
        NodeAckRequested = false;
 8008a98:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <LoRaMacMlmeRequest+0x230>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
        LoRaMacConfirmQueueRemoveLast( );
 8008a9e:	f000 f9c3 	bl	8008e28 <LoRaMacConfirmQueueRemoveLast>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8008aa2:	f000 faf3 	bl	800908c <LoRaMacConfirmQueueGetCnt>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d104      	bne.n	8008ab6 <LoRaMacMlmeRequest+0x202>
        {
            LoRaMacFlags.Bits.MlmeReq = 0;
 8008aac:	4a06      	ldr	r2, [pc, #24]	; (8008ac8 <LoRaMacMlmeRequest+0x214>)
 8008aae:	7813      	ldrb	r3, [r2, #0]
 8008ab0:	f36f 03c3 	bfc	r3, #3, #1
 8008ab4:	7013      	strb	r3, [r2, #0]
        }
    }
    return status;
 8008ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3720      	adds	r7, #32
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	2000047c 	.word	0x2000047c
 8008ac4:	20000110 	.word	0x20000110
 8008ac8:	20000a08 	.word	0x20000a08
 8008acc:	20000114 	.word	0x20000114
 8008ad0:	20000118 	.word	0x20000118
 8008ad4:	20000abc 	.word	0x20000abc
 8008ad8:	200009ac 	.word	0x200009ac
 8008adc:	20000a04 	.word	0x20000a04
 8008ae0:	20000a68 	.word	0x20000a68
 8008ae4:	20000360 	.word	0x20000360

08008ae8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8008af0:	2302      	movs	r3, #2
 8008af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void *fBuffer;
    uint16_t fBufferSize;
    int8_t datarate;
    bool readyToSend = false;
 8008afc:	2300      	movs	r3, #0
 8008afe:	773b      	strb	r3, [r7, #28]

    if ( mcpsRequest == NULL ) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e0ce      	b.n	8008ca8 <LoRaMacMcpsRequest+0x1c0>
    }
    if ( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 8008b0a:	4b69      	ldr	r3, [pc, #420]	; (8008cb0 <LoRaMacMcpsRequest+0x1c8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <LoRaMacMcpsRequest+0x3a>
         ( ( LoRaMacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED ) ) {
 8008b16:	4b66      	ldr	r3, [pc, #408]	; (8008cb0 <LoRaMacMcpsRequest+0x1c8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0310 	and.w	r3, r3, #16
    if ( ( ( LoRaMacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING ) ||
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <LoRaMacMcpsRequest+0x3e>
        return LORAMAC_STATUS_BUSY;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e0c0      	b.n	8008ca8 <LoRaMacMcpsRequest+0x1c0>
    }

    macHdr.Value = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	743b      	strb	r3, [r7, #16]
    memset1 ( ( uint8_t * ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
 8008b2a:	2214      	movs	r2, #20
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4861      	ldr	r0, [pc, #388]	; (8008cb4 <LoRaMacMcpsRequest+0x1cc>)
 8008b30:	f007 fe42 	bl	80107b8 <memset1>
    McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b34:	4b5f      	ldr	r3, [pc, #380]	; (8008cb4 <LoRaMacMcpsRequest+0x1cc>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	705a      	strb	r2, [r3, #1]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    AckTimeoutRetriesCounter = 1;
 8008b3a:	4b5f      	ldr	r3, [pc, #380]	; (8008cb8 <LoRaMacMcpsRequest+0x1d0>)
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	701a      	strb	r2, [r3, #0]

    switch ( mcpsRequest->Type ) {
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d037      	beq.n	8008bb8 <LoRaMacMcpsRequest+0xd0>
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	dc48      	bgt.n	8008bde <LoRaMacMcpsRequest+0xf6>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <LoRaMacMcpsRequest+0x6e>
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d018      	beq.n	8008b86 <LoRaMacMcpsRequest+0x9e>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8008b54:	e043      	b.n	8008bde <LoRaMacMcpsRequest+0xf6>
            readyToSend = true;
 8008b56:	2301      	movs	r3, #1
 8008b58:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = 1;
 8008b5a:	4b58      	ldr	r3, [pc, #352]	; (8008cbc <LoRaMacMcpsRequest+0x1d4>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8008b60:	7c3b      	ldrb	r3, [r7, #16]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f362 1347 	bfi	r3, r2, #5, #3
 8008b68:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	791b      	ldrb	r3, [r3, #4]
 8008b6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	899b      	ldrh	r3, [r3, #12]
 8008b7c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7b9b      	ldrb	r3, [r3, #14]
 8008b82:	777b      	strb	r3, [r7, #29]
            break;
 8008b84:	e02c      	b.n	8008be0 <LoRaMacMcpsRequest+0xf8>
            readyToSend = true;
 8008b86:	2301      	movs	r3, #1
 8008b88:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	7bda      	ldrb	r2, [r3, #15]
 8008b8e:	4b4b      	ldr	r3, [pc, #300]	; (8008cbc <LoRaMacMcpsRequest+0x1d4>)
 8008b90:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8008b92:	7c3b      	ldrb	r3, [r7, #16]
 8008b94:	2204      	movs	r2, #4
 8008b96:	f362 1347 	bfi	r3, r2, #5, #3
 8008b9a:	743b      	strb	r3, [r7, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	791b      	ldrb	r3, [r3, #4]
 8008ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	899b      	ldrh	r3, [r3, #12]
 8008bae:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7b9b      	ldrb	r3, [r3, #14]
 8008bb4:	777b      	strb	r3, [r7, #29]
            break;
 8008bb6:	e013      	b.n	8008be0 <LoRaMacMcpsRequest+0xf8>
            readyToSend = true;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	773b      	strb	r3, [r7, #28]
            AckTimeoutRetries = 1;
 8008bbc:	4b3f      	ldr	r3, [pc, #252]	; (8008cbc <LoRaMacMcpsRequest+0x1d4>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	701a      	strb	r2, [r3, #0]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8008bc2:	7c3b      	ldrb	r3, [r7, #16]
 8008bc4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8008bc8:	743b      	strb	r3, [r7, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	891b      	ldrh	r3, [r3, #8]
 8008bd4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	7a9b      	ldrb	r3, [r3, #10]
 8008bda:	777b      	strb	r3, [r7, #29]
            break;
 8008bdc:	e000      	b.n	8008be0 <LoRaMacMcpsRequest+0xf8>
            break;
 8008bde:	bf00      	nop
    }

    // Filter fPorts
    if( IsFPortAllowed( fPort ) == false )
 8008be0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fbb5 	bl	8007354 <IsFPortAllowed>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f083 0301 	eor.w	r3, r3, #1
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <LoRaMacMcpsRequest+0x112>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e056      	b.n	8008ca8 <LoRaMacMcpsRequest+0x1c0>
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	763b      	strb	r3, [r7, #24]
    getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008bfe:	4b30      	ldr	r3, [pc, #192]	; (8008cc0 <LoRaMacMcpsRequest+0x1d8>)
 8008c00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c04:	76bb      	strb	r3, [r7, #26]
    phyParam = RegionGetPhyParam( LoRaMacRegion, &getPhy );
 8008c06:	4b2f      	ldr	r3, [pc, #188]	; (8008cc4 <LoRaMacMcpsRequest+0x1dc>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f107 0218 	add.w	r2, r7, #24
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 fff5 	bl	8009c00 <RegionGetPhyParam>
 8008c16:	4603      	mov	r3, r0
 8008c18:	617b      	str	r3, [r7, #20]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, phyParam.Value );
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf38      	it	cc
 8008c24:	4613      	movcc	r3, r2
 8008c26:	777b      	strb	r3, [r7, #29]

    if ( readyToSend == true ) {
 8008c28:	7f3b      	ldrb	r3, [r7, #28]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d03a      	beq.n	8008ca4 <LoRaMacMcpsRequest+0x1bc>
        if ( AdrCtrlOn == false ) {
 8008c2e:	4b26      	ldr	r3, [pc, #152]	; (8008cc8 <LoRaMacMcpsRequest+0x1e0>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f083 0301 	eor.w	r3, r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <LoRaMacMcpsRequest+0x184>
            verify.DatarateParams.Datarate = datarate;
 8008c3c:	7f7b      	ldrb	r3, [r7, #29]
 8008c3e:	733b      	strb	r3, [r7, #12]
            verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 8008c40:	4b1f      	ldr	r3, [pc, #124]	; (8008cc0 <LoRaMacMcpsRequest+0x1d8>)
 8008c42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c46:	73bb      	strb	r3, [r7, #14]

            if ( RegionVerify( LoRaMacRegion, &verify, PHY_TX_DR ) == true ) {
 8008c48:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <LoRaMacMcpsRequest+0x1dc>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f107 010c 	add.w	r1, r7, #12
 8008c50:	2204      	movs	r2, #4
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 f813 	bl	8009c7e <RegionVerify>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <LoRaMacMcpsRequest+0x180>
                LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8008c5e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8008c62:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <LoRaMacMcpsRequest+0x1d8>)
 8008c64:	705a      	strb	r2, [r3, #1]
 8008c66:	e001      	b.n	8008c6c <LoRaMacMcpsRequest+0x184>
            } else {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e01d      	b.n	8008ca8 <LoRaMacMcpsRequest+0x1c0>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8008c6c:	8bfb      	ldrh	r3, [r7, #30]
 8008c6e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8008c72:	f107 0010 	add.w	r0, r7, #16
 8008c76:	6a3a      	ldr	r2, [r7, #32]
 8008c78:	f7fe f94e 	bl	8006f18 <Send>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ( status == LORAMAC_STATUS_OK ) {
 8008c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d109      	bne.n	8008c9e <LoRaMacMcpsRequest+0x1b6>
            McpsConfirm.McpsRequest = mcpsRequest->Type;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <LoRaMacMcpsRequest+0x1cc>)
 8008c90:	701a      	strb	r2, [r3, #0]
            LoRaMacFlags.Bits.McpsReq = 1;
 8008c92:	4a0e      	ldr	r2, [pc, #56]	; (8008ccc <LoRaMacMcpsRequest+0x1e4>)
 8008c94:	7813      	ldrb	r3, [r2, #0]
 8008c96:	f043 0301 	orr.w	r3, r3, #1
 8008c9a:	7013      	strb	r3, [r2, #0]
 8008c9c:	e002      	b.n	8008ca4 <LoRaMacMcpsRequest+0x1bc>
        } else {
            NodeAckRequested = false;
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <LoRaMacMcpsRequest+0x1e8>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	701a      	strb	r2, [r3, #0]
        }
    }

    return status;
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3728      	adds	r7, #40	; 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	2000047c 	.word	0x2000047c
 8008cb4:	200009b0 	.word	0x200009b0
 8008cb8:	2000000a 	.word	0x2000000a
 8008cbc:	20000009 	.word	0x20000009
 8008cc0:	20000a68 	.word	0x20000a68
 8008cc4:	20000110 	.word	0x20000110
 8008cc8:	2000035a 	.word	0x2000035a
 8008ccc:	20000a08 	.word	0x20000a08
 8008cd0:	20000360 	.word	0x20000360

08008cd4 <IncreaseBufferPointer>:
 */
LoRaMacEventInfoStatus_t CommonStatus;


static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a07      	ldr	r2, [pc, #28]	; (8008cfc <IncreaseBufferPointer+0x28>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d102      	bne.n	8008cea <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = MlmeConfirmQueue;
 8008ce4:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <IncreaseBufferPointer+0x2c>)
 8008ce6:	607b      	str	r3, [r7, #4]
 8008ce8:	e002      	b.n	8008cf0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8008cf0:	687b      	ldr	r3, [r7, #4]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr
 8008cfc:	200004d4 	.word	0x200004d4
 8008d00:	200004c4 	.word	0x200004c4

08008d04 <DecreaseBufferPointer>:

static MlmeConfirmQueue_t* DecreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == MlmeConfirmQueue )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a07      	ldr	r2, [pc, #28]	; (8008d2c <DecreaseBufferPointer+0x28>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d102      	bne.n	8008d1a <DecreaseBufferPointer+0x16>
    {
        // Reset to the last element
        bufferPointer = &MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1];
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <DecreaseBufferPointer+0x2c>)
 8008d16:	607b      	str	r3, [r7, #4]
 8008d18:	e002      	b.n	8008d20 <DecreaseBufferPointer+0x1c>
    }
    else
    {
        bufferPointer--;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8008d20:	687b      	ldr	r3, [r7, #4]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	200004c4 	.word	0x200004c4
 8008d30:	200004d4 	.word	0x200004d4

08008d34 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	617b      	str	r3, [r7, #20]

    do
    {
        if( element->Request == request )
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	7bfa      	ldrb	r2, [r7, #15]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d101      	bne.n	8008d54 <GetElement+0x20>
        {
            // We have found the element
            return element;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	e008      	b.n	8008d66 <GetElement+0x32>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	f7ff ffbd 	bl	8008cd4 <IncreaseBufferPointer>
 8008d5a:	6178      	str	r0, [r7, #20]
        }
    }while( element != bufferEnd );
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d1f0      	bne.n	8008d46 <GetElement+0x12>

    return NULL;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <LoRaMacConfirmQueueInit>:


void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
    Primitives = primitives;
 8008d78:	4a0b      	ldr	r2, [pc, #44]	; (8008da8 <LoRaMacConfirmQueueInit+0x38>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]

    // Init counter
    MlmeConfirmQueueCnt = 0;
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <LoRaMacConfirmQueueInit+0x3c>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]

    // Init buffer
    BufferStart = MlmeConfirmQueue;
 8008d84:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <LoRaMacConfirmQueueInit+0x40>)
 8008d86:	4a0b      	ldr	r2, [pc, #44]	; (8008db4 <LoRaMacConfirmQueueInit+0x44>)
 8008d88:	601a      	str	r2, [r3, #0]
    BufferEnd = MlmeConfirmQueue;
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <LoRaMacConfirmQueueInit+0x48>)
 8008d8c:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <LoRaMacConfirmQueueInit+0x44>)
 8008d8e:	601a      	str	r2, [r3, #0]

    memset1( (uint8_t*) MlmeConfirmQueue, 0xFF, sizeof( MlmeConfirmQueue ) );
 8008d90:	2214      	movs	r2, #20
 8008d92:	21ff      	movs	r1, #255	; 0xff
 8008d94:	4807      	ldr	r0, [pc, #28]	; (8008db4 <LoRaMacConfirmQueueInit+0x44>)
 8008d96:	f007 fd0f 	bl	80107b8 <memset1>

    // Common status
    CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <LoRaMacConfirmQueueInit+0x4c>)
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200004c0 	.word	0x200004c0
 8008dac:	200004d8 	.word	0x200004d8
 8008db0:	20000af0 	.word	0x20000af0
 8008db4:	200004c4 	.word	0x200004c4
 8008db8:	20000af4 	.word	0x20000af4
 8008dbc:	20000aec 	.word	0x20000aec

08008dc0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
    if( MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8008dc8:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <LoRaMacConfirmQueueAdd+0x60>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d901      	bls.n	8008dd4 <LoRaMacConfirmQueueAdd+0x14>
    {
        // Protect the buffer against overwrites
        return false;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e021      	b.n	8008e18 <LoRaMacConfirmQueueAdd+0x58>
    }

    // Add the element to the ring buffer
    BufferEnd->Request = mlmeConfirm->Request;
 8008dd4:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <LoRaMacConfirmQueueAdd+0x64>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	7812      	ldrb	r2, [r2, #0]
 8008ddc:	701a      	strb	r2, [r3, #0]
    BufferEnd->Status = mlmeConfirm->Status;
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <LoRaMacConfirmQueueAdd+0x64>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	7852      	ldrb	r2, [r2, #1]
 8008de6:	705a      	strb	r2, [r3, #1]
    BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8008de8:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <LoRaMacConfirmQueueAdd+0x64>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	78d2      	ldrb	r2, [r2, #3]
 8008df0:	70da      	strb	r2, [r3, #3]
    BufferEnd->ReadyToHandle = false;
 8008df2:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <LoRaMacConfirmQueueAdd+0x64>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	709a      	strb	r2, [r3, #2]
    // Increase counter
    MlmeConfirmQueueCnt++;
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <LoRaMacConfirmQueueAdd+0x60>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <LoRaMacConfirmQueueAdd+0x60>)
 8008e04:	701a      	strb	r2, [r3, #0]
    // Update end pointer
    BufferEnd = IncreaseBufferPointer( BufferEnd );
 8008e06:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <LoRaMacConfirmQueueAdd+0x64>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff ff62 	bl	8008cd4 <IncreaseBufferPointer>
 8008e10:	4603      	mov	r3, r0
 8008e12:	4a04      	ldr	r2, [pc, #16]	; (8008e24 <LoRaMacConfirmQueueAdd+0x64>)
 8008e14:	6013      	str	r3, [r2, #0]

    return true;
 8008e16:	2301      	movs	r3, #1
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	200004d8 	.word	0x200004d8
 8008e24:	20000af4 	.word	0x20000af4

08008e28 <LoRaMacConfirmQueueRemoveLast>:

bool LoRaMacConfirmQueueRemoveLast( void )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt == 0 )
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <LoRaMacConfirmQueueRemoveLast+0x34>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <LoRaMacConfirmQueueRemoveLast+0x10>
    {
        return false;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e00e      	b.n	8008e56 <LoRaMacConfirmQueueRemoveLast+0x2e>
    }

    // Increase counter
    MlmeConfirmQueueCnt--;
 8008e38:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <LoRaMacConfirmQueueRemoveLast+0x34>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <LoRaMacConfirmQueueRemoveLast+0x34>)
 8008e42:	701a      	strb	r2, [r3, #0]
    // Update start pointer
    BufferEnd = DecreaseBufferPointer( BufferEnd );
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <LoRaMacConfirmQueueRemoveLast+0x38>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ff5b 	bl	8008d04 <DecreaseBufferPointer>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <LoRaMacConfirmQueueRemoveLast+0x38>)
 8008e52:	6013      	str	r3, [r2, #0]

    return true;
 8008e54:	2301      	movs	r3, #1
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200004d8 	.word	0x200004d8
 8008e60:	20000af4 	.word	0x20000af4

08008e64 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt == 0 )
 8008e68:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d101      	bne.n	8008e74 <LoRaMacConfirmQueueRemoveFirst+0x10>
    {
        return false;
 8008e70:	2300      	movs	r3, #0
 8008e72:	e00e      	b.n	8008e92 <LoRaMacConfirmQueueRemoveFirst+0x2e>
    }

    // Increase counter
    MlmeConfirmQueueCnt--;
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <LoRaMacConfirmQueueRemoveFirst+0x34>)
 8008e7e:	701a      	strb	r2, [r3, #0]
    // Update start pointer
    BufferStart = IncreaseBufferPointer( BufferStart );
 8008e80:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff ff25 	bl	8008cd4 <IncreaseBufferPointer>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4a03      	ldr	r2, [pc, #12]	; (8008e9c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8008e8e:	6013      	str	r3, [r2, #0]

    return true;
 8008e90:	2301      	movs	r3, #1
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200004d8 	.word	0x200004d8
 8008e9c:	20000af0 	.word	0x20000af0

08008ea0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	460a      	mov	r2, r1
 8008eaa:	71fb      	strb	r3, [r7, #7]
 8008eac:	4613      	mov	r3, r2
 8008eae:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]

    if( MlmeConfirmQueueCnt > 0 )
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <LoRaMacConfirmQueueSetStatus+0x48>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d011      	beq.n	8008ee0 <LoRaMacConfirmQueueSetStatus+0x40>
    {
        element = GetElement( request, BufferStart, BufferEnd );
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <LoRaMacConfirmQueueSetStatus+0x4c>)
 8008ebe:	6819      	ldr	r1, [r3, #0]
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <LoRaMacConfirmQueueSetStatus+0x50>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	79bb      	ldrb	r3, [r7, #6]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff ff34 	bl	8008d34 <GetElement>
 8008ecc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <LoRaMacConfirmQueueSetStatus+0x40>
        {
            element->Status = status;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	79fa      	ldrb	r2, [r7, #7]
 8008ed8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	200004d8 	.word	0x200004d8
 8008eec:	20000af0 	.word	0x20000af0
 8008ef0:	20000af4 	.word	0x20000af4

08008ef4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]

    if( MlmeConfirmQueueCnt > 0 )
 8008f02:	4b0c      	ldr	r3, [pc, #48]	; (8008f34 <LoRaMacConfirmQueueGetStatus+0x40>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <LoRaMacConfirmQueueGetStatus+0x34>
    {
        element = GetElement( request, BufferStart, BufferEnd );
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <LoRaMacConfirmQueueGetStatus+0x44>)
 8008f0c:	6819      	ldr	r1, [r3, #0]
 8008f0e:	4b0b      	ldr	r3, [pc, #44]	; (8008f3c <LoRaMacConfirmQueueGetStatus+0x48>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff ff0d 	bl	8008d34 <GetElement>
 8008f1a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <LoRaMacConfirmQueueGetStatus+0x34>
        {
            return element->Status;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	e000      	b.n	8008f2a <LoRaMacConfirmQueueGetStatus+0x36>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f28:	2301      	movs	r3, #1
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200004d8 	.word	0x200004d8
 8008f38:	20000af0 	.word	0x20000af0
 8008f3c:	20000af4 	.word	0x20000af4

08008f40 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = BufferStart;
 8008f4a:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <LoRaMacConfirmQueueSetStatusCmn+0x54>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

    CommonStatus = status;
 8008f50:	4a11      	ldr	r2, [pc, #68]	; (8008f98 <LoRaMacConfirmQueueSetStatusCmn+0x58>)
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	7013      	strb	r3, [r2, #0]

    if( MlmeConfirmQueueCnt > 0 )
 8008f56:	4b11      	ldr	r3, [pc, #68]	; (8008f9c <LoRaMacConfirmQueueSetStatusCmn+0x5c>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d015      	beq.n	8008f8a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
    {
        do
        {
            element->Status = status;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	79fa      	ldrb	r2, [r7, #7]
 8008f62:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	78db      	ldrb	r3, [r3, #3]
 8008f68:	f083 0301 	eor.w	r3, r3, #1
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <LoRaMacConfirmQueueSetStatusCmn+0x38>
            {
                element->ReadyToHandle = true;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7ff feab 	bl	8008cd4 <IncreaseBufferPointer>
 8008f7e:	60f8      	str	r0, [r7, #12]
        }while( element != BufferEnd );
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d1e9      	bne.n	8008f5e <LoRaMacConfirmQueueSetStatusCmn+0x1e>
    }
}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000af0 	.word	0x20000af0
 8008f98:	20000aec 	.word	0x20000aec
 8008f9c:	200004d8 	.word	0x200004d8
 8008fa0:	20000af4 	.word	0x20000af4

08008fa4 <LoRaMacConfirmQueueGetStatusCmn>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatusCmn( void )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
    return CommonStatus;
 8008fa8:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <LoRaMacConfirmQueueGetStatusCmn+0x10>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bc80      	pop	{r7}
 8008fb2:	4770      	bx	lr
 8008fb4:	20000aec 	.word	0x20000aec

08008fb8 <LoRaMacConfirmQueueIsCmdActive>:

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, BufferStart, BufferEnd ) != NULL )
 8008fc2:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8008fc4:	6819      	ldr	r1, [r3, #0]
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <LoRaMacConfirmQueueIsCmdActive+0x34>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff feb1 	bl	8008d34 <GetElement>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000af0 	.word	0x20000af0
 8008fec:	20000af4 	.word	0x20000af4

08008ff0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = MlmeConfirmQueueCnt;
 8008ff8:	4b21      	ldr	r3, [pc, #132]	; (8009080 <LoRaMacConfirmQueueHandleCb+0x90>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8008ffe:	2300      	movs	r3, #0
 8009000:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
 8009006:	e032      	b.n	800906e <LoRaMacConfirmQueueHandleCb+0x7e>
    {
        mlmeConfirm->MlmeRequest = BufferStart->Request;
 8009008:	4b1e      	ldr	r3, [pc, #120]	; (8009084 <LoRaMacConfirmQueueHandleCb+0x94>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = BufferStart->Status;
 8009012:	4b1c      	ldr	r3, [pc, #112]	; (8009084 <LoRaMacConfirmQueueHandleCb+0x94>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	785a      	ldrb	r2, [r3, #1]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	705a      	strb	r2, [r3, #1]
        readyToHandle = BufferStart->ReadyToHandle;
 800901c:	4b19      	ldr	r3, [pc, #100]	; (8009084 <LoRaMacConfirmQueueHandleCb+0x94>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	789b      	ldrb	r3, [r3, #2]
 8009022:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8009024:	7b7b      	ldrb	r3, [r7, #13]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d005      	beq.n	8009036 <LoRaMacConfirmQueueHandleCb+0x46>
        {
            Primitives->MacMlmeConfirm( mlmeConfirm );
 800902a:	4b17      	ldr	r3, [pc, #92]	; (8009088 <LoRaMacConfirmQueueHandleCb+0x98>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	4798      	blx	r3
 8009034:	e00b      	b.n	800904e <LoRaMacConfirmQueueHandleCb+0x5e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = BufferStart->Request;
 8009036:	4b13      	ldr	r3, [pc, #76]	; (8009084 <LoRaMacConfirmQueueHandleCb+0x94>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = BufferStart->Status;
 800903e:	4b11      	ldr	r3, [pc, #68]	; (8009084 <LoRaMacConfirmQueueHandleCb+0x94>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = BufferStart->RestrictCommonReadyToHandle;
 8009046:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <LoRaMacConfirmQueueHandleCb+0x94>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	78db      	ldrb	r3, [r3, #3]
 800904c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800904e:	f7ff ff09 	bl	8008e64 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8009052:	7b7b      	ldrb	r3, [r7, #13]
 8009054:	f083 0301 	eor.w	r3, r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <LoRaMacConfirmQueueHandleCb+0x78>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800905e:	f107 0308 	add.w	r3, r7, #8
 8009062:	4618      	mov	r0, r3
 8009064:	f7ff feac 	bl	8008dc0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	3301      	adds	r3, #1
 800906c:	73fb      	strb	r3, [r7, #15]
 800906e:	7bfa      	ldrb	r2, [r7, #15]
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	429a      	cmp	r2, r3
 8009074:	d3c8      	bcc.n	8009008 <LoRaMacConfirmQueueHandleCb+0x18>
        }
    }
}
 8009076:	bf00      	nop
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200004d8 	.word	0x200004d8
 8009084:	20000af0 	.word	0x20000af0
 8009088:	200004c0 	.word	0x200004c0

0800908c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
    return MlmeConfirmQueueCnt;
 8009090:	4b02      	ldr	r3, [pc, #8]	; (800909c <LoRaMacConfirmQueueGetCnt+0x10>)
 8009092:	781b      	ldrb	r3, [r3, #0]
}
 8009094:	4618      	mov	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	200004d8 	.word	0x200004d8

080090a0 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
    if( MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <LoRaMacConfirmQueueIsFull+0x1c>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b04      	cmp	r3, #4
 80090aa:	d901      	bls.n	80090b0 <LoRaMacConfirmQueueIsFull+0x10>
    {
        return true;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <LoRaMacConfirmQueueIsFull+0x12>
    }
    else
    {
        return false;
 80090b0:	2300      	movs	r3, #0
    }
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	200004d8 	.word	0x200004d8

080090c0 <LoRaMacComputeMic>:
 * \param [IN]  dir             Frame direction [0: uplink, 1: downlink]
 * \param [IN]  sequenceCounter Frame sequence counter
 * \param [OUT] mic Computed MIC field
 */
void LoRaMacComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	460b      	mov	r3, r1
 80090ce:	817b      	strh	r3, [r7, #10]
    MicBlockB0[5] = dir;
 80090d0:	4a2b      	ldr	r2, [pc, #172]	; (8009180 <LoRaMacComputeMic+0xc0>)
 80090d2:	7e3b      	ldrb	r3, [r7, #24]
 80090d4:	7153      	strb	r3, [r2, #5]
    
    MicBlockB0[6] = ( address ) & 0xFF;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b29      	ldr	r3, [pc, #164]	; (8009180 <LoRaMacComputeMic+0xc0>)
 80090dc:	719a      	strb	r2, [r3, #6]
    MicBlockB0[7] = ( address >> 8 ) & 0xFF;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	0a1b      	lsrs	r3, r3, #8
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	4b26      	ldr	r3, [pc, #152]	; (8009180 <LoRaMacComputeMic+0xc0>)
 80090e6:	71da      	strb	r2, [r3, #7]
    MicBlockB0[8] = ( address >> 16 ) & 0xFF;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	0c1b      	lsrs	r3, r3, #16
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	4b24      	ldr	r3, [pc, #144]	; (8009180 <LoRaMacComputeMic+0xc0>)
 80090f0:	721a      	strb	r2, [r3, #8]
    MicBlockB0[9] = ( address >> 24 ) & 0xFF;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	0e1b      	lsrs	r3, r3, #24
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	4b21      	ldr	r3, [pc, #132]	; (8009180 <LoRaMacComputeMic+0xc0>)
 80090fa:	725a      	strb	r2, [r3, #9]

    MicBlockB0[10] = ( sequenceCounter ) & 0xFF;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	4b1f      	ldr	r3, [pc, #124]	; (8009180 <LoRaMacComputeMic+0xc0>)
 8009102:	729a      	strb	r2, [r3, #10]
    MicBlockB0[11] = ( sequenceCounter >> 8 ) & 0xFF;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	0a1b      	lsrs	r3, r3, #8
 8009108:	b2da      	uxtb	r2, r3
 800910a:	4b1d      	ldr	r3, [pc, #116]	; (8009180 <LoRaMacComputeMic+0xc0>)
 800910c:	72da      	strb	r2, [r3, #11]
    MicBlockB0[12] = ( sequenceCounter >> 16 ) & 0xFF;
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	b2da      	uxtb	r2, r3
 8009114:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <LoRaMacComputeMic+0xc0>)
 8009116:	731a      	strb	r2, [r3, #12]
    MicBlockB0[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	0e1b      	lsrs	r3, r3, #24
 800911c:	b2da      	uxtb	r2, r3
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <LoRaMacComputeMic+0xc0>)
 8009120:	735a      	strb	r2, [r3, #13]

    MicBlockB0[15] = size & 0xFF;
 8009122:	897b      	ldrh	r3, [r7, #10]
 8009124:	b2da      	uxtb	r2, r3
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <LoRaMacComputeMic+0xc0>)
 8009128:	73da      	strb	r2, [r3, #15]

    AES_CMAC_Init( AesCmacCtx );
 800912a:	4816      	ldr	r0, [pc, #88]	; (8009184 <LoRaMacComputeMic+0xc4>)
 800912c:	f002 fb13 	bl	800b756 <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4814      	ldr	r0, [pc, #80]	; (8009184 <LoRaMacComputeMic+0xc4>)
 8009134:	f002 fb28 	bl	800b788 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE );
 8009138:	2210      	movs	r2, #16
 800913a:	4911      	ldr	r1, [pc, #68]	; (8009180 <LoRaMacComputeMic+0xc0>)
 800913c:	4811      	ldr	r0, [pc, #68]	; (8009184 <LoRaMacComputeMic+0xc4>)
 800913e:	f002 fb32 	bl	800b7a6 <AES_CMAC_Update>
    
    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 8009142:	897b      	ldrh	r3, [r7, #10]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	68f9      	ldr	r1, [r7, #12]
 800914a:	480e      	ldr	r0, [pc, #56]	; (8009184 <LoRaMacComputeMic+0xc4>)
 800914c:	f002 fb2b 	bl	800b7a6 <AES_CMAC_Update>
    
    AES_CMAC_Final( Mic, AesCmacCtx );
 8009150:	490c      	ldr	r1, [pc, #48]	; (8009184 <LoRaMacComputeMic+0xc4>)
 8009152:	480d      	ldr	r0, [pc, #52]	; (8009188 <LoRaMacComputeMic+0xc8>)
 8009154:	f002 fbd7 	bl	800b906 <AES_CMAC_Final>
    
    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <LoRaMacComputeMic+0xc8>)
 800915a:	78db      	ldrb	r3, [r3, #3]
 800915c:	061a      	lsls	r2, r3, #24
 800915e:	4b0a      	ldr	r3, [pc, #40]	; (8009188 <LoRaMacComputeMic+0xc8>)
 8009160:	789b      	ldrb	r3, [r3, #2]
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	431a      	orrs	r2, r3
 8009166:	4b08      	ldr	r3, [pc, #32]	; (8009188 <LoRaMacComputeMic+0xc8>)
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	4313      	orrs	r3, r2
 800916e:	4a06      	ldr	r2, [pc, #24]	; (8009188 <LoRaMacComputeMic+0xc8>)
 8009170:	7812      	ldrb	r2, [r2, #0]
 8009172:	431a      	orrs	r2, r3
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	601a      	str	r2, [r3, #0]
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	2000000c 	.word	0x2000000c
 8009184:	200005f0 	.word	0x200005f0
 8009188:	200004dc 	.word	0x200004dc

0800918c <LoRaMacPayloadEncrypt>:

void LoRaMacPayloadEncrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	607a      	str	r2, [r7, #4]
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	460b      	mov	r3, r1
 800919a:	817b      	strh	r3, [r7, #10]
    uint16_t i;
    uint8_t bufferIndex = 0;
 800919c:	2300      	movs	r3, #0
 800919e:	757b      	strb	r3, [r7, #21]
    uint16_t ctr = 1;
 80091a0:	2301      	movs	r3, #1
 80091a2:	827b      	strh	r3, [r7, #18]

    memset1( AesContext.ksch, '\0', 240 );
 80091a4:	22f0      	movs	r2, #240	; 0xf0
 80091a6:	2100      	movs	r1, #0
 80091a8:	4848      	ldr	r0, [pc, #288]	; (80092cc <LoRaMacPayloadEncrypt+0x140>)
 80091aa:	f007 fb05 	bl	80107b8 <memset1>
    aes_set_key( key, 16, &AesContext );
 80091ae:	4a47      	ldr	r2, [pc, #284]	; (80092cc <LoRaMacPayloadEncrypt+0x140>)
 80091b0:	2110      	movs	r1, #16
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f001 feae 	bl	800af14 <aes_set_key>

    aBlock[5] = dir;
 80091b8:	4a45      	ldr	r2, [pc, #276]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091be:	7153      	strb	r3, [r2, #5]

    aBlock[6] = ( address ) & 0xFF;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	4b42      	ldr	r3, [pc, #264]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091c6:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	4b40      	ldr	r3, [pc, #256]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091d0:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	0c1b      	lsrs	r3, r3, #16
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	4b3d      	ldr	r3, [pc, #244]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091da:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	0e1b      	lsrs	r3, r3, #24
 80091e0:	b2da      	uxtb	r2, r3
 80091e2:	4b3b      	ldr	r3, [pc, #236]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091e4:	725a      	strb	r2, [r3, #9]

    aBlock[10] = ( sequenceCounter ) & 0xFF;
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	4b39      	ldr	r3, [pc, #228]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091ec:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( sequenceCounter >> 8 ) & 0xFF;
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	0a1b      	lsrs	r3, r3, #8
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	4b36      	ldr	r3, [pc, #216]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 80091f6:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( sequenceCounter >> 16 ) & 0xFF;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	0c1b      	lsrs	r3, r3, #16
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	4b34      	ldr	r3, [pc, #208]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 8009200:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( sequenceCounter >> 24 ) & 0xFF;
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	0e1b      	lsrs	r3, r3, #24
 8009206:	b2da      	uxtb	r2, r3
 8009208:	4b31      	ldr	r3, [pc, #196]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 800920a:	735a      	strb	r2, [r3, #13]

    while( size >= 16 )
 800920c:	e02d      	b.n	800926a <LoRaMacPayloadEncrypt+0xde>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 800920e:	8a7b      	ldrh	r3, [r7, #18]
 8009210:	b2da      	uxtb	r2, r3
 8009212:	4b2f      	ldr	r3, [pc, #188]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 8009214:	73da      	strb	r2, [r3, #15]
        ctr++;
 8009216:	8a7b      	ldrh	r3, [r7, #18]
 8009218:	3301      	adds	r3, #1
 800921a:	827b      	strh	r3, [r7, #18]
        aes_encrypt( aBlock, sBlock, &AesContext );
 800921c:	4a2b      	ldr	r2, [pc, #172]	; (80092cc <LoRaMacPayloadEncrypt+0x140>)
 800921e:	492d      	ldr	r1, [pc, #180]	; (80092d4 <LoRaMacPayloadEncrypt+0x148>)
 8009220:	482b      	ldr	r0, [pc, #172]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 8009222:	f001 ff55 	bl	800b0d0 <aes_encrypt>
        for( i = 0; i < 16; i++ )
 8009226:	2300      	movs	r3, #0
 8009228:	82fb      	strh	r3, [r7, #22]
 800922a:	e015      	b.n	8009258 <LoRaMacPayloadEncrypt+0xcc>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800922c:	7d7a      	ldrb	r2, [r7, #21]
 800922e:	8afb      	ldrh	r3, [r7, #22]
 8009230:	4413      	add	r3, r2
 8009232:	461a      	mov	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	7819      	ldrb	r1, [r3, #0]
 800923a:	8afb      	ldrh	r3, [r7, #22]
 800923c:	4a25      	ldr	r2, [pc, #148]	; (80092d4 <LoRaMacPayloadEncrypt+0x148>)
 800923e:	5cd2      	ldrb	r2, [r2, r3]
 8009240:	7d78      	ldrb	r0, [r7, #21]
 8009242:	8afb      	ldrh	r3, [r7, #22]
 8009244:	4403      	add	r3, r0
 8009246:	4618      	mov	r0, r3
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	4403      	add	r3, r0
 800924c:	404a      	eors	r2, r1
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8009252:	8afb      	ldrh	r3, [r7, #22]
 8009254:	3301      	adds	r3, #1
 8009256:	82fb      	strh	r3, [r7, #22]
 8009258:	8afb      	ldrh	r3, [r7, #22]
 800925a:	2b0f      	cmp	r3, #15
 800925c:	d9e6      	bls.n	800922c <LoRaMacPayloadEncrypt+0xa0>
        }
        size -= 16;
 800925e:	897b      	ldrh	r3, [r7, #10]
 8009260:	3b10      	subs	r3, #16
 8009262:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8009264:	7d7b      	ldrb	r3, [r7, #21]
 8009266:	3310      	adds	r3, #16
 8009268:	757b      	strb	r3, [r7, #21]
    while( size >= 16 )
 800926a:	897b      	ldrh	r3, [r7, #10]
 800926c:	2b0f      	cmp	r3, #15
 800926e:	d8ce      	bhi.n	800920e <LoRaMacPayloadEncrypt+0x82>
    }

    if( size > 0 )
 8009270:	897b      	ldrh	r3, [r7, #10]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d025      	beq.n	80092c2 <LoRaMacPayloadEncrypt+0x136>
    {
        aBlock[15] = ( ( ctr ) & 0xFF );
 8009276:	8a7b      	ldrh	r3, [r7, #18]
 8009278:	b2da      	uxtb	r2, r3
 800927a:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 800927c:	73da      	strb	r2, [r3, #15]
        aes_encrypt( aBlock, sBlock, &AesContext );
 800927e:	4a13      	ldr	r2, [pc, #76]	; (80092cc <LoRaMacPayloadEncrypt+0x140>)
 8009280:	4914      	ldr	r1, [pc, #80]	; (80092d4 <LoRaMacPayloadEncrypt+0x148>)
 8009282:	4813      	ldr	r0, [pc, #76]	; (80092d0 <LoRaMacPayloadEncrypt+0x144>)
 8009284:	f001 ff24 	bl	800b0d0 <aes_encrypt>
        for( i = 0; i < size; i++ )
 8009288:	2300      	movs	r3, #0
 800928a:	82fb      	strh	r3, [r7, #22]
 800928c:	e015      	b.n	80092ba <LoRaMacPayloadEncrypt+0x12e>
        {
            encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800928e:	7d7a      	ldrb	r2, [r7, #21]
 8009290:	8afb      	ldrh	r3, [r7, #22]
 8009292:	4413      	add	r3, r2
 8009294:	461a      	mov	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	7819      	ldrb	r1, [r3, #0]
 800929c:	8afb      	ldrh	r3, [r7, #22]
 800929e:	4a0d      	ldr	r2, [pc, #52]	; (80092d4 <LoRaMacPayloadEncrypt+0x148>)
 80092a0:	5cd2      	ldrb	r2, [r2, r3]
 80092a2:	7d78      	ldrb	r0, [r7, #21]
 80092a4:	8afb      	ldrh	r3, [r7, #22]
 80092a6:	4403      	add	r3, r0
 80092a8:	4618      	mov	r0, r3
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	4403      	add	r3, r0
 80092ae:	404a      	eors	r2, r1
 80092b0:	b2d2      	uxtb	r2, r2
 80092b2:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < size; i++ )
 80092b4:	8afb      	ldrh	r3, [r7, #22]
 80092b6:	3301      	adds	r3, #1
 80092b8:	82fb      	strh	r3, [r7, #22]
 80092ba:	8afa      	ldrh	r2, [r7, #22]
 80092bc:	897b      	ldrh	r3, [r7, #10]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d3e5      	bcc.n	800928e <LoRaMacPayloadEncrypt+0x102>
        }
    }
}
 80092c2:	bf00      	nop
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	200004fc 	.word	0x200004fc
 80092d0:	2000001c 	.word	0x2000001c
 80092d4:	200004ec 	.word	0x200004ec

080092d8 <LoRaMacPayloadDecrypt>:

void LoRaMacPayloadDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af04      	add	r7, sp, #16
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	607a      	str	r2, [r7, #4]
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	460b      	mov	r3, r1
 80092e6:	817b      	strh	r3, [r7, #10]
    LoRaMacPayloadEncrypt( buffer, size, key, address, dir, sequenceCounter, decBuffer );
 80092e8:	8979      	ldrh	r1, [r7, #10]
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	9302      	str	r3, [sp, #8]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	7e3b      	ldrb	r3, [r7, #24]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff ff46 	bl	800918c <LoRaMacPayloadEncrypt>
}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <LoRaMacJoinComputeMic>:

void LoRaMacJoinComputeMic( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	607a      	str	r2, [r7, #4]
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	460b      	mov	r3, r1
 8009316:	817b      	strh	r3, [r7, #10]
    AES_CMAC_Init( AesCmacCtx );
 8009318:	4812      	ldr	r0, [pc, #72]	; (8009364 <LoRaMacJoinComputeMic+0x5c>)
 800931a:	f002 fa1c 	bl	800b756 <AES_CMAC_Init>

    AES_CMAC_SetKey( AesCmacCtx, key );
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4810      	ldr	r0, [pc, #64]	; (8009364 <LoRaMacJoinComputeMic+0x5c>)
 8009322:	f002 fa31 	bl	800b788 <AES_CMAC_SetKey>

    AES_CMAC_Update( AesCmacCtx, buffer, size & 0xFF );
 8009326:	897b      	ldrh	r3, [r7, #10]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	461a      	mov	r2, r3
 800932c:	68f9      	ldr	r1, [r7, #12]
 800932e:	480d      	ldr	r0, [pc, #52]	; (8009364 <LoRaMacJoinComputeMic+0x5c>)
 8009330:	f002 fa39 	bl	800b7a6 <AES_CMAC_Update>

    AES_CMAC_Final( Mic, AesCmacCtx );
 8009334:	490b      	ldr	r1, [pc, #44]	; (8009364 <LoRaMacJoinComputeMic+0x5c>)
 8009336:	480c      	ldr	r0, [pc, #48]	; (8009368 <LoRaMacJoinComputeMic+0x60>)
 8009338:	f002 fae5 	bl	800b906 <AES_CMAC_Final>

    *mic = ( uint32_t )( ( uint32_t )Mic[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );
 800933c:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <LoRaMacJoinComputeMic+0x60>)
 800933e:	78db      	ldrb	r3, [r3, #3]
 8009340:	061a      	lsls	r2, r3, #24
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <LoRaMacJoinComputeMic+0x60>)
 8009344:	789b      	ldrb	r3, [r3, #2]
 8009346:	041b      	lsls	r3, r3, #16
 8009348:	431a      	orrs	r2, r3
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <LoRaMacJoinComputeMic+0x60>)
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	4313      	orrs	r3, r2
 8009352:	4a05      	ldr	r2, [pc, #20]	; (8009368 <LoRaMacJoinComputeMic+0x60>)
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	431a      	orrs	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	601a      	str	r2, [r3, #0]
}
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	200005f0 	.word	0x200005f0
 8009368:	200004dc 	.word	0x200004dc

0800936c <LoRaMacJoinDecrypt>:

void LoRaMacJoinDecrypt( const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	603b      	str	r3, [r7, #0]
 8009378:	460b      	mov	r3, r1
 800937a:	817b      	strh	r3, [r7, #10]
    memset1( AesContext.ksch, '\0', 240 );
 800937c:	22f0      	movs	r2, #240	; 0xf0
 800937e:	2100      	movs	r1, #0
 8009380:	480e      	ldr	r0, [pc, #56]	; (80093bc <LoRaMacJoinDecrypt+0x50>)
 8009382:	f007 fa19 	bl	80107b8 <memset1>
    aes_set_key( key, 16, &AesContext );
 8009386:	4a0d      	ldr	r2, [pc, #52]	; (80093bc <LoRaMacJoinDecrypt+0x50>)
 8009388:	2110      	movs	r1, #16
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 fdc2 	bl	800af14 <aes_set_key>
    aes_encrypt( buffer, decBuffer, &AesContext );
 8009390:	4a0a      	ldr	r2, [pc, #40]	; (80093bc <LoRaMacJoinDecrypt+0x50>)
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f001 fe9b 	bl	800b0d0 <aes_encrypt>
    // Check if optional CFList is included
    if( size >= 16 )
 800939a:	897b      	ldrh	r3, [r7, #10]
 800939c:	2b0f      	cmp	r3, #15
 800939e:	d908      	bls.n	80093b2 <LoRaMacJoinDecrypt+0x46>
    {
        aes_encrypt( buffer + 16, decBuffer + 16, &AesContext );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f103 0010 	add.w	r0, r3, #16
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	3310      	adds	r3, #16
 80093aa:	4a04      	ldr	r2, [pc, #16]	; (80093bc <LoRaMacJoinDecrypt+0x50>)
 80093ac:	4619      	mov	r1, r3
 80093ae:	f001 fe8f 	bl	800b0d0 <aes_encrypt>
    }
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	200004fc 	.word	0x200004fc

080093c0 <LoRaMacJoinComputeSKeys>:

void LoRaMacJoinComputeSKeys( const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08a      	sub	sp, #40	; 0x28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	4613      	mov	r3, r2
 80093ce:	80fb      	strh	r3, [r7, #6]
    uint8_t nonce[16];
    uint8_t *pDevNonce = ( uint8_t * )&devNonce;
 80093d0:	1dbb      	adds	r3, r7, #6
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
    
    memset1( AesContext.ksch, '\0', 240 );
 80093d4:	22f0      	movs	r2, #240	; 0xf0
 80093d6:	2100      	movs	r1, #0
 80093d8:	4825      	ldr	r0, [pc, #148]	; (8009470 <LoRaMacJoinComputeSKeys+0xb0>)
 80093da:	f007 f9ed 	bl	80107b8 <memset1>
    aes_set_key( key, 16, &AesContext );
 80093de:	4a24      	ldr	r2, [pc, #144]	; (8009470 <LoRaMacJoinComputeSKeys+0xb0>)
 80093e0:	2110      	movs	r1, #16
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f001 fd96 	bl	800af14 <aes_set_key>

    memset1( nonce, 0, sizeof( nonce ) );
 80093e8:	f107 0314 	add.w	r3, r7, #20
 80093ec:	2210      	movs	r2, #16
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f007 f9e1 	bl	80107b8 <memset1>
    nonce[0] = 0x01;
 80093f6:	2301      	movs	r3, #1
 80093f8:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 80093fa:	f107 0314 	add.w	r3, r7, #20
 80093fe:	3301      	adds	r3, #1
 8009400:	2206      	movs	r2, #6
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f007 f99c 	bl	8010742 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	3307      	adds	r3, #7
 8009410:	2202      	movs	r2, #2
 8009412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009414:	4618      	mov	r0, r3
 8009416:	f007 f994 	bl	8010742 <memcpy1>
    aes_encrypt( nonce, nwkSKey, &AesContext );
 800941a:	f107 0314 	add.w	r3, r7, #20
 800941e:	4a14      	ldr	r2, [pc, #80]	; (8009470 <LoRaMacJoinComputeSKeys+0xb0>)
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f001 fe54 	bl	800b0d0 <aes_encrypt>

    memset1( nonce, 0, sizeof( nonce ) );
 8009428:	f107 0314 	add.w	r3, r7, #20
 800942c:	2210      	movs	r2, #16
 800942e:	2100      	movs	r1, #0
 8009430:	4618      	mov	r0, r3
 8009432:	f007 f9c1 	bl	80107b8 <memset1>
    nonce[0] = 0x02;
 8009436:	2302      	movs	r3, #2
 8009438:	753b      	strb	r3, [r7, #20]
    memcpy1( nonce + 1, appNonce, 6 );
 800943a:	f107 0314 	add.w	r3, r7, #20
 800943e:	3301      	adds	r3, #1
 8009440:	2206      	movs	r2, #6
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	4618      	mov	r0, r3
 8009446:	f007 f97c 	bl	8010742 <memcpy1>
    memcpy1( nonce + 7, pDevNonce, 2 );
 800944a:	f107 0314 	add.w	r3, r7, #20
 800944e:	3307      	adds	r3, #7
 8009450:	2202      	movs	r2, #2
 8009452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009454:	4618      	mov	r0, r3
 8009456:	f007 f974 	bl	8010742 <memcpy1>
    aes_encrypt( nonce, appSKey, &AesContext );
 800945a:	f107 0314 	add.w	r3, r7, #20
 800945e:	4a04      	ldr	r2, [pc, #16]	; (8009470 <LoRaMacJoinComputeSKeys+0xb0>)
 8009460:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fe34 	bl	800b0d0 <aes_encrypt>
}
 8009468:	bf00      	nop
 800946a:	3728      	adds	r7, #40	; 0x28
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	200004fc 	.word	0x200004fc

08009474 <SendFrame>:
 * \brief   Prepares the payload of the frame
 *
 * \retval  [0: frame could be send, 1: error]
 */
bool SendFrame( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
	lwan_dev_params_update();
 800947a:	f000 f9b9 	bl	80097f0 <lwan_dev_params_update>
	
	McpsReq_t mcpsReq;
	LoRaMacTxInfo_t txInfo;

	if( LoRaMacQueryTxPossible( appDataSize, &txInfo ) != LORAMAC_STATUS_OK )
 800947e:	4b2b      	ldr	r3, [pc, #172]	; (800952c <SendFrame+0xb8>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	1d3a      	adds	r2, r7, #4
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fd48 	bl	8007f1c <LoRaMacQueryTxPossible>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00d      	beq.n	80094ae <SendFrame+0x3a>
	{
		// Send empty frame in order to flush MAC commands
		DebugPrintf("payload length error ...\r\n");
 8009492:	4827      	ldr	r0, [pc, #156]	; (8009530 <SendFrame+0xbc>)
 8009494:	f007 f904 	bl	80106a0 <DebugPrintf>
		mcpsReq.Type = MCPS_UNCONFIRMED;
 8009498:	2300      	movs	r3, #0
 800949a:	723b      	strb	r3, [r7, #8]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800949c:	2300      	movs	r3, #0
 800949e:	613b      	str	r3, [r7, #16]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	82bb      	strh	r3, [r7, #20]
		mcpsReq.Req.Unconfirmed.Datarate = currentDrForNoAdr;
 80094a4:	4b23      	ldr	r3, [pc, #140]	; (8009534 <SendFrame+0xc0>)
 80094a6:	f993 3000 	ldrsb.w	r3, [r3]
 80094aa:	75bb      	strb	r3, [r7, #22]
 80094ac:	e02e      	b.n	800950c <SendFrame+0x98>
	}
	else
	{
		if( isTxConfirmed == false )
 80094ae:	4b22      	ldr	r3, [pc, #136]	; (8009538 <SendFrame+0xc4>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	f083 0301 	eor.w	r3, r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <SendFrame+0x6e>
		{
			DebugPrintf("unconfirmed uplink sending ...\r\n");
 80094bc:	481f      	ldr	r0, [pc, #124]	; (800953c <SendFrame+0xc8>)
 80094be:	f007 f8ef 	bl	80106a0 <DebugPrintf>
			mcpsReq.Type = MCPS_UNCONFIRMED;
 80094c2:	2300      	movs	r3, #0
 80094c4:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Unconfirmed.fPort = appPort;
 80094c6:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <SendFrame+0xcc>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Unconfirmed.fBuffer = appData;
 80094cc:	4b1d      	ldr	r3, [pc, #116]	; (8009544 <SendFrame+0xd0>)
 80094ce:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Unconfirmed.fBufferSize = appDataSize;
 80094d0:	4b16      	ldr	r3, [pc, #88]	; (800952c <SendFrame+0xb8>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Unconfirmed.Datarate = currentDrForNoAdr;
 80094d8:	4b16      	ldr	r3, [pc, #88]	; (8009534 <SendFrame+0xc0>)
 80094da:	f993 3000 	ldrsb.w	r3, [r3]
 80094de:	75bb      	strb	r3, [r7, #22]
 80094e0:	e014      	b.n	800950c <SendFrame+0x98>
		}
		else
		{
			DebugPrintf("confirmed uplink sending ...\r\n");
 80094e2:	4819      	ldr	r0, [pc, #100]	; (8009548 <SendFrame+0xd4>)
 80094e4:	f007 f8dc 	bl	80106a0 <DebugPrintf>
			mcpsReq.Type = MCPS_CONFIRMED;
 80094e8:	2301      	movs	r3, #1
 80094ea:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Confirmed.fPort = appPort;
 80094ec:	4b14      	ldr	r3, [pc, #80]	; (8009540 <SendFrame+0xcc>)
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Confirmed.fBuffer = appData;
 80094f2:	4b14      	ldr	r3, [pc, #80]	; (8009544 <SendFrame+0xd0>)
 80094f4:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Confirmed.fBufferSize = appDataSize;
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <SendFrame+0xb8>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Confirmed.NbTrials = confirmedNbTrials;
 80094fe:	4b13      	ldr	r3, [pc, #76]	; (800954c <SendFrame+0xd8>)
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	75fb      	strb	r3, [r7, #23]
			mcpsReq.Req.Confirmed.Datarate = currentDrForNoAdr;
 8009504:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <SendFrame+0xc0>)
 8009506:	f993 3000 	ldrsb.w	r3, [r3]
 800950a:	75bb      	strb	r3, [r7, #22]
		}
	}
	if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fae9 	bl	8008ae8 <LoRaMacMcpsRequest>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <SendFrame+0xac>
	{
		return false;
 800951c:	2300      	movs	r3, #0
 800951e:	e000      	b.n	8009522 <SendFrame+0xae>
	}
	return true;
 8009520:	2301      	movs	r3, #1
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	2000002c 	.word	0x2000002c
 8009530:	08012258 	.word	0x08012258
 8009534:	20000bac 	.word	0x20000bac
 8009538:	2000076d 	.word	0x2000076d
 800953c:	08012274 	.word	0x08012274
 8009540:	20000082 	.word	0x20000082
 8009544:	20000b2c 	.word	0x20000b2c
 8009548:	08012298 	.word	0x08012298
 800954c:	20000083 	.word	0x20000083

08009550 <OnTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnTxNextPacketTimerEvent( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	; 0x28
 8009554:	af00      	add	r7, sp, #0
	MibRequestConfirm_t mibReq;
	LoRaMacStatus_t status;

	TimerStop( &TxNextPacketTimer );
 8009556:	481b      	ldr	r0, [pc, #108]	; (80095c4 <OnTxNextPacketTimerEvent+0x74>)
 8009558:	f006 ff0a 	bl	8010370 <TimerStop>

	mibReq.Type = MIB_NETWORK_JOINED;
 800955c:	2301      	movs	r3, #1
 800955e:	763b      	strb	r3, [r7, #24]
	status = LoRaMacMibGetRequestConfirm( &mibReq );
 8009560:	f107 0318 	add.w	r3, r7, #24
 8009564:	4618      	mov	r0, r3
 8009566:	f7fe fd73 	bl	8008050 <LoRaMacMibGetRequestConfirm>
 800956a:	4603      	mov	r3, r0
 800956c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if( status == LORAMAC_STATUS_OK )
 8009570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009574:	2b00      	cmp	r3, #0
 8009576:	d121      	bne.n	80095bc <OnTxNextPacketTimerEvent+0x6c>
	{
		if( mibReq.Param.IsNetworkJoined == true )
 8009578:	7f3b      	ldrb	r3, [r7, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d006      	beq.n	800958c <OnTxNextPacketTimerEvent+0x3c>
		{
			deviceState = DEVICE_STATE_SEND;
 800957e:	4b12      	ldr	r3, [pc, #72]	; (80095c8 <OnTxNextPacketTimerEvent+0x78>)
 8009580:	2202      	movs	r2, #2
 8009582:	701a      	strb	r2, [r3, #0]
			nextTx = true;
 8009584:	4b11      	ldr	r3, [pc, #68]	; (80095cc <OnTxNextPacketTimerEvent+0x7c>)
 8009586:	2201      	movs	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]
			{
				deviceState = DEVICE_STATE_CYCLE;
			}
		}
	}
}
 800958a:	e017      	b.n	80095bc <OnTxNextPacketTimerEvent+0x6c>
			mlmeReq.Type = MLME_JOIN;
 800958c:	2300      	movs	r3, #0
 800958e:	713b      	strb	r3, [r7, #4]
			mlmeReq.Req.Join.DevEui = devEui;
 8009590:	4b0f      	ldr	r3, [pc, #60]	; (80095d0 <OnTxNextPacketTimerEvent+0x80>)
 8009592:	60bb      	str	r3, [r7, #8]
			mlmeReq.Req.Join.AppEui = appEui;
 8009594:	4b0f      	ldr	r3, [pc, #60]	; (80095d4 <OnTxNextPacketTimerEvent+0x84>)
 8009596:	60fb      	str	r3, [r7, #12]
			mlmeReq.Req.Join.AppKey = appKey;
 8009598:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <OnTxNextPacketTimerEvent+0x88>)
 800959a:	613b      	str	r3, [r7, #16]
			mlmeReq.Req.Join.NbTrials = 1;
 800959c:	2301      	movs	r3, #1
 800959e:	753b      	strb	r3, [r7, #20]
			if( LoRaMacMlmeRequest( &mlmeReq ) == LORAMAC_STATUS_OK )
 80095a0:	1d3b      	adds	r3, r7, #4
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff f986 	bl	80088b4 <LoRaMacMlmeRequest>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d103      	bne.n	80095b6 <OnTxNextPacketTimerEvent+0x66>
				deviceState = DEVICE_STATE_SLEEP;
 80095ae:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <OnTxNextPacketTimerEvent+0x78>)
 80095b0:	2204      	movs	r2, #4
 80095b2:	701a      	strb	r2, [r3, #0]
}
 80095b4:	e002      	b.n	80095bc <OnTxNextPacketTimerEvent+0x6c>
				deviceState = DEVICE_STATE_CYCLE;
 80095b6:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <OnTxNextPacketTimerEvent+0x78>)
 80095b8:	2203      	movs	r2, #3
 80095ba:	701a      	strb	r2, [r3, #0]
}
 80095bc:	bf00      	nop
 80095be:	3728      	adds	r7, #40	; 0x28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000afc 	.word	0x20000afc
 80095c8:	20000af8 	.word	0x20000af8
 80095cc:	2000002d 	.word	0x2000002d
 80095d0:	20000030 	.word	0x20000030
 80095d4:	20000764 	.word	0x20000764
 80095d8:	20000038 	.word	0x20000038

080095dc <McpsConfirm>:
 *
 * \param   [IN] mcpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
	if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10e      	bne.n	800960a <McpsConfirm+0x2e>
	{
		switch( mcpsConfirm->McpsRequest )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d00c      	beq.n	800960e <McpsConfirm+0x32>
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	dc0c      	bgt.n	8009612 <McpsConfirm+0x36>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00c      	beq.n	8009616 <McpsConfirm+0x3a>
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d000      	beq.n	8009602 <McpsConfirm+0x26>
			case MCPS_PROPRIETARY:
			{
				break;
			}
			default:
				break;
 8009600:	e007      	b.n	8009612 <McpsConfirm+0x36>
				PruefeConfirm(mcpsConfirm);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7fb fc52 	bl	8004eac <PruefeConfirm>
				break;
 8009608:	e006      	b.n	8009618 <McpsConfirm+0x3c>
		}
	}
 800960a:	bf00      	nop
 800960c:	e004      	b.n	8009618 <McpsConfirm+0x3c>
				break;
 800960e:	bf00      	nop
 8009610:	e002      	b.n	8009618 <McpsConfirm+0x3c>
				break;
 8009612:	bf00      	nop
 8009614:	e000      	b.n	8009618 <McpsConfirm+0x3c>
				break;
 8009616:	bf00      	nop
	nextTx = true;
 8009618:	4b03      	ldr	r3, [pc, #12]	; (8009628 <McpsConfirm+0x4c>)
 800961a:	2201      	movs	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	2000002d 	.word	0x2000002d

0800962c <downLinkDataHandle>:
	return 0;
}


void __attribute__((weak)) downLinkDataHandle(McpsIndication_t *mcpsIndication)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	DebugPrintf("+REV DATA:%s,RXSIZE %d,PORT %d\r\n",mcpsIndication->RxSlot?"RXWIN2":"RXWIN1",mcpsIndication->BufferSize,mcpsIndication->Port);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7c5b      	ldrb	r3, [r3, #17]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <downLinkDataHandle+0x14>
 800963c:	4914      	ldr	r1, [pc, #80]	; (8009690 <downLinkDataHandle+0x64>)
 800963e:	e000      	b.n	8009642 <downLinkDataHandle+0x16>
 8009640:	4914      	ldr	r1, [pc, #80]	; (8009694 <downLinkDataHandle+0x68>)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7b1b      	ldrb	r3, [r3, #12]
 8009646:	461a      	mov	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	78db      	ldrb	r3, [r3, #3]
 800964c:	4812      	ldr	r0, [pc, #72]	; (8009698 <downLinkDataHandle+0x6c>)
 800964e:	f007 f827 	bl	80106a0 <DebugPrintf>
	DebugPrintf("+REV DATA:");
 8009652:	4812      	ldr	r0, [pc, #72]	; (800969c <downLinkDataHandle+0x70>)
 8009654:	f007 f824 	bl	80106a0 <DebugPrintf>
	for(uint8_t i=0;i<mcpsIndication->BufferSize;i++)
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
 800965c:	e00b      	b.n	8009676 <downLinkDataHandle+0x4a>
	{
		DebugPrintf("%02X",mcpsIndication->Buffer[i]);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689a      	ldr	r2, [r3, #8]
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4413      	add	r3, r2
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	4619      	mov	r1, r3
 800966a:	480d      	ldr	r0, [pc, #52]	; (80096a0 <downLinkDataHandle+0x74>)
 800966c:	f007 f818 	bl	80106a0 <DebugPrintf>
	for(uint8_t i=0;i<mcpsIndication->BufferSize;i++)
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	3301      	adds	r3, #1
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7b1b      	ldrb	r3, [r3, #12]
 800967a:	7bfa      	ldrb	r2, [r7, #15]
 800967c:	429a      	cmp	r2, r3
 800967e:	d3ee      	bcc.n	800965e <downLinkDataHandle+0x32>
	}
	DebugPrintf("\r\n");
 8009680:	4808      	ldr	r0, [pc, #32]	; (80096a4 <downLinkDataHandle+0x78>)
 8009682:	f007 f80d 	bl	80106a0 <DebugPrintf>
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	080122b8 	.word	0x080122b8
 8009694:	080122c0 	.word	0x080122c0
 8009698:	080122c8 	.word	0x080122c8
 800969c:	080122ec 	.word	0x080122ec
 80096a0:	080122f8 	.word	0x080122f8
 80096a4:	08012300 	.word	0x08012300

080096a8 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
	if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d12a      	bne.n	800970e <McpsIndication+0x66>
	{
		return;
	}
	DebugPrintf( "receive data: rssi = %d, snr = %d, datarate = %d\r\n", mcpsIndication->Rssi, (int)mcpsIndication->Snr,(int)mcpsIndication->RxDatarate);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80096be:	4619      	mov	r1, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	791b      	ldrb	r3, [r3, #4]
 80096cc:	4812      	ldr	r0, [pc, #72]	; (8009718 <McpsIndication+0x70>)
 80096ce:	f006 ffe7 	bl	80106a0 <DebugPrintf>
	switch( mcpsIndication->McpsIndication )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d80a      	bhi.n	80096f0 <McpsIndication+0x48>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <McpsIndication+0x38>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	080096f1 	.word	0x080096f1
 80096e4:	080096f1 	.word	0x080096f1
 80096e8:	080096f1 	.word	0x080096f1
 80096ec:	080096f1 	.word	0x080096f1
		case MCPS_MULTICAST:
		{
			break;
		}
		default:
			break;
 80096f0:	bf00      	nop

	// Check Multicast
	// Check Port
	// Check Datarate
	// Check FramePending
	if( mcpsIndication->FramePending == true )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	795b      	ldrb	r3, [r3, #5]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <McpsIndication+0x56>
	{
		// The server signals that it has pending data to be sent.
		// We schedule an uplink as soon as possible to flush the server.
		OnTxNextPacketTimerEvent( );
 80096fa:	f7ff ff29 	bl	8009550 <OnTxNextPacketTimerEvent>
	// Check Buffer
	// Check BufferSize
	// Check Rssi
	// Check Snr
	// Check RxSlot
	if( mcpsIndication->RxData == true )
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	7b5b      	ldrb	r3, [r3, #13]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <McpsIndication+0x68>
	{
		downLinkDataHandle(mcpsIndication);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff ff90 	bl	800962c <downLinkDataHandle>
 800970c:	e000      	b.n	8009710 <McpsIndication+0x68>
		return;
 800970e:	bf00      	nop
	}
}
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	08012304 	.word	0x08012304

0800971c <dev_time_updated>:


void __attribute__((weak)) dev_time_updated()
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
	DebugPrintf("device time updated\r\n");
 8009720:	4802      	ldr	r0, [pc, #8]	; (800972c <dev_time_updated+0x10>)
 8009722:	f006 ffbd 	bl	80106a0 <DebugPrintf>
}
 8009726:	bf00      	nop
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	08012338 	.word	0x08012338

08009730 <MlmeConfirm>:
 *
 * \param   [IN] mlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	switch( mlmeConfirm->MlmeRequest )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b05      	cmp	r3, #5
 800973e:	d026      	beq.n	800978e <MlmeConfirm+0x5e>
 8009740:	2b05      	cmp	r3, #5
 8009742:	dc2b      	bgt.n	800979c <MlmeConfirm+0x6c>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <MlmeConfirm+0x1e>
 8009748:	2b01      	cmp	r3, #1
 800974a:	d029      	beq.n	80097a0 <MlmeConfirm+0x70>
				dev_time_updated();
			}
			break;
		}
		default:
			break;
 800974c:	e026      	b.n	800979c <MlmeConfirm+0x6c>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <MlmeConfirm+0x42>
				DebugPrintf("joined\r\n");
 8009756:	4818      	ldr	r0, [pc, #96]	; (80097b8 <MlmeConfirm+0x88>)
 8009758:	f006 ffa2 	bl	80106a0 <DebugPrintf>
				if(passthroughMode == false)
 800975c:	4b17      	ldr	r3, [pc, #92]	; (80097bc <MlmeConfirm+0x8c>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f083 0301 	eor.w	r3, r3, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01c      	beq.n	80097a4 <MlmeConfirm+0x74>
					deviceState = DEVICE_STATE_SEND;
 800976a:	4b15      	ldr	r3, [pc, #84]	; (80097c0 <MlmeConfirm+0x90>)
 800976c:	2202      	movs	r2, #2
 800976e:	701a      	strb	r2, [r3, #0]
			break;
 8009770:	e018      	b.n	80097a4 <MlmeConfirm+0x74>
				uint32_t rejoin_delay = 30000;
 8009772:	f247 5330 	movw	r3, #30000	; 0x7530
 8009776:	60fb      	str	r3, [r7, #12]
				DebugPrintf("join failed, join again at 30s later\r\n");
 8009778:	4812      	ldr	r0, [pc, #72]	; (80097c4 <MlmeConfirm+0x94>)
 800977a:	f006 ff91 	bl	80106a0 <DebugPrintf>
				TimerSetValue( &TxNextPacketTimer, rejoin_delay );
 800977e:	68f9      	ldr	r1, [r7, #12]
 8009780:	4811      	ldr	r0, [pc, #68]	; (80097c8 <MlmeConfirm+0x98>)
 8009782:	f006 feb1 	bl	80104e8 <TimerSetValue>
				TimerStart( &TxNextPacketTimer );
 8009786:	4810      	ldr	r0, [pc, #64]	; (80097c8 <MlmeConfirm+0x98>)
 8009788:	f006 fcaa 	bl	80100e0 <TimerStart>
			break;
 800978c:	e00a      	b.n	80097a4 <MlmeConfirm+0x74>
			if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d108      	bne.n	80097a8 <MlmeConfirm+0x78>
				dev_time_updated();
 8009796:	f7ff ffc1 	bl	800971c <dev_time_updated>
			break;
 800979a:	e005      	b.n	80097a8 <MlmeConfirm+0x78>
			break;
 800979c:	bf00      	nop
 800979e:	e004      	b.n	80097aa <MlmeConfirm+0x7a>
			break;
 80097a0:	bf00      	nop
 80097a2:	e002      	b.n	80097aa <MlmeConfirm+0x7a>
			break;
 80097a4:	bf00      	nop
 80097a6:	e000      	b.n	80097aa <MlmeConfirm+0x7a>
			break;
 80097a8:	bf00      	nop
	}
	nextTx = true;
 80097aa:	4b08      	ldr	r3, [pc, #32]	; (80097cc <MlmeConfirm+0x9c>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	08012350 	.word	0x08012350
 80097bc:	20000708 	.word	0x20000708
 80097c0:	20000af8 	.word	0x20000af8
 80097c4:	0801235c 	.word	0x0801235c
 80097c8:	20000afc 	.word	0x20000afc
 80097cc:	2000002d 	.word	0x2000002d

080097d0 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] mlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *mlmeIndication )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	switch( mlmeIndication->MlmeIndication )
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d102      	bne.n	80097e6 <MlmeIndication+0x16>
	{
		case MLME_SCHEDULE_UPLINK:
		{// The MAC signals that we shall provide an uplink as soon as possible
			OnTxNextPacketTimerEvent( );
 80097e0:	f7ff feb6 	bl	8009550 <OnTxNextPacketTimerEvent>
			break;
 80097e4:	e000      	b.n	80097e8 <MlmeIndication+0x18>
		}
		default:
			break;
 80097e6:	bf00      	nop
	}
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <lwan_dev_params_update>:


void lwan_dev_params_update( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b092      	sub	sp, #72	; 0x48
 80097f4:	af00      	add	r7, sp, #0
#if defined( REGION_EU868 )
	LoRaMacChannelAdd( 3, ( ChannelParams_t )EU868_LC4 );
 80097f6:	4a28      	ldr	r2, [pc, #160]	; (8009898 <lwan_dev_params_update+0xa8>)
 80097f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80097fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80097fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009808:	2003      	movs	r0, #3
 800980a:	f7fe ffab 	bl	8008764 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 4, ( ChannelParams_t )EU868_LC5 );
 800980e:	4a23      	ldr	r2, [pc, #140]	; (800989c <lwan_dev_params_update+0xac>)
 8009810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009814:	ca07      	ldmia	r2, {r0, r1, r2}
 8009816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800981a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800981e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009820:	2004      	movs	r0, #4
 8009822:	f7fe ff9f 	bl	8008764 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 5, ( ChannelParams_t )EU868_LC6 );
 8009826:	4a1e      	ldr	r2, [pc, #120]	; (80098a0 <lwan_dev_params_update+0xb0>)
 8009828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800982c:	ca07      	ldmia	r2, {r0, r1, r2}
 800982e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009838:	2005      	movs	r0, #5
 800983a:	f7fe ff93 	bl	8008764 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 6, ( ChannelParams_t )EU868_LC7 );
 800983e:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <lwan_dev_params_update+0xb4>)
 8009840:	f107 0318 	add.w	r3, r7, #24
 8009844:	ca07      	ldmia	r2, {r0, r1, r2}
 8009846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800984a:	f107 0318 	add.w	r3, r7, #24
 800984e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009850:	2006      	movs	r0, #6
 8009852:	f7fe ff87 	bl	8008764 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 7, ( ChannelParams_t )EU868_LC8 );
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <lwan_dev_params_update+0xb8>)
 8009858:	f107 030c 	add.w	r3, r7, #12
 800985c:	ca07      	ldmia	r2, {r0, r1, r2}
 800985e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009862:	f107 030c 	add.w	r3, r7, #12
 8009866:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009868:	2007      	movs	r0, #7
 800986a:	f7fe ff7b 	bl	8008764 <LoRaMacChannelAdd>
	LoRaMacChannelAdd( 7, ( ChannelParams_t )AS923_LC8 );
#endif

	MibRequestConfirm_t mibReq;

	mibReq.Type = MIB_CHANNELS_DEFAULT_MASK;
 800986e:	230d      	movs	r3, #13
 8009870:	703b      	strb	r3, [r7, #0]
	mibReq.Param.ChannelsMask = userChannelsMask;
 8009872:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <lwan_dev_params_update+0xbc>)
 8009874:	607b      	str	r3, [r7, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 8009876:	463b      	mov	r3, r7
 8009878:	4618      	mov	r0, r3
 800987a:	f7fe fd23 	bl	80082c4 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_CHANNELS_MASK;
 800987e:	230c      	movs	r3, #12
 8009880:	703b      	strb	r3, [r7, #0]
	mibReq.Param.ChannelsMask = userChannelsMask;
 8009882:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <lwan_dev_params_update+0xbc>)
 8009884:	607b      	str	r3, [r7, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 8009886:	463b      	mov	r3, r7
 8009888:	4618      	mov	r0, r3
 800988a:	f7fe fd1b 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
}
 800988e:	bf00      	nop
 8009890:	3748      	adds	r7, #72	; 0x48
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	08012384 	.word	0x08012384
 800989c:	08012390 	.word	0x08012390
 80098a0:	0801239c 	.word	0x0801239c
 80098a4:	080123a8 	.word	0x080123a8
 80098a8:	080123b4 	.word	0x080123b4
 80098ac:	2000006c 	.word	0x2000006c

080098b0 <LoraWanInit>:
LoRaMacPrimitives_t LoRaMacPrimitive;
LoRaMacCallback_t LoRaMacCallback;


void LoraWanInit(DeviceClass_t lorawanClass,LoRaMacRegion_t region)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	460a      	mov	r2, r1
 80098ba:	71fb      	strb	r3, [r7, #7]
 80098bc:	4613      	mov	r3, r2
 80098be:	71bb      	strb	r3, [r7, #6]
	DebugPrintf("\r\nLoRaWAN ");
 80098c0:	4855      	ldr	r0, [pc, #340]	; (8009a18 <LoraWanInit+0x168>)
 80098c2:	f006 feed 	bl	80106a0 <DebugPrintf>
	switch(region)
 80098c6:	79bb      	ldrb	r3, [r7, #6]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	2b0b      	cmp	r3, #11
 80098cc:	d846      	bhi.n	800995c <LoraWanInit+0xac>
 80098ce:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <LoraWanInit+0x24>)
 80098d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d4:	08009915 	.word	0x08009915
 80098d8:	0800991d 	.word	0x0800991d
 80098dc:	08009925 	.word	0x08009925
 80098e0:	0800992d 	.word	0x0800992d
 80098e4:	08009935 	.word	0x08009935
 80098e8:	0800993d 	.word	0x0800993d
 80098ec:	08009945 	.word	0x08009945
 80098f0:	0800994d 	.word	0x0800994d
 80098f4:	08009955 	.word	0x08009955
 80098f8:	0800995d 	.word	0x0800995d
 80098fc:	08009905 	.word	0x08009905
 8009900:	0800990d 	.word	0x0800990d
	{
		case LORAMAC_REGION_AS923_AS1:
			DebugPrintf("AS923(AS1:922.0-923.4MHz)");
 8009904:	4845      	ldr	r0, [pc, #276]	; (8009a1c <LoraWanInit+0x16c>)
 8009906:	f006 fecb 	bl	80106a0 <DebugPrintf>
			break;
 800990a:	e027      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_AS923_AS2:
			DebugPrintf("AS923(AS2:923.2-924.6MHz)");
 800990c:	4844      	ldr	r0, [pc, #272]	; (8009a20 <LoraWanInit+0x170>)
 800990e:	f006 fec7 	bl	80106a0 <DebugPrintf>
			break;
 8009912:	e023      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_AU915:
			DebugPrintf("AU915");
 8009914:	4843      	ldr	r0, [pc, #268]	; (8009a24 <LoraWanInit+0x174>)
 8009916:	f006 fec3 	bl	80106a0 <DebugPrintf>
			break;
 800991a:	e01f      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_CN470:
			DebugPrintf("CN470");
 800991c:	4842      	ldr	r0, [pc, #264]	; (8009a28 <LoraWanInit+0x178>)
 800991e:	f006 febf 	bl	80106a0 <DebugPrintf>
			break;
 8009922:	e01b      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_CN779:
			DebugPrintf("CN779");
 8009924:	4841      	ldr	r0, [pc, #260]	; (8009a2c <LoraWanInit+0x17c>)
 8009926:	f006 febb 	bl	80106a0 <DebugPrintf>
			break;
 800992a:	e017      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_EU433:
			DebugPrintf("EU433");
 800992c:	4840      	ldr	r0, [pc, #256]	; (8009a30 <LoraWanInit+0x180>)
 800992e:	f006 feb7 	bl	80106a0 <DebugPrintf>
			break;
 8009932:	e013      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_EU868:
			DebugPrintf("EU868");
 8009934:	483f      	ldr	r0, [pc, #252]	; (8009a34 <LoraWanInit+0x184>)
 8009936:	f006 feb3 	bl	80106a0 <DebugPrintf>
			break;
 800993a:	e00f      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_KR920:
			DebugPrintf("KR920");
 800993c:	483e      	ldr	r0, [pc, #248]	; (8009a38 <LoraWanInit+0x188>)
 800993e:	f006 feaf 	bl	80106a0 <DebugPrintf>
			break;
 8009942:	e00b      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_IN865:
			DebugPrintf("IN865");
 8009944:	483d      	ldr	r0, [pc, #244]	; (8009a3c <LoraWanInit+0x18c>)
 8009946:	f006 feab 	bl	80106a0 <DebugPrintf>
			break;
 800994a:	e007      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_US915:
			DebugPrintf("US915");
 800994c:	483c      	ldr	r0, [pc, #240]	; (8009a40 <LoraWanInit+0x190>)
 800994e:	f006 fea7 	bl	80106a0 <DebugPrintf>
			break;
 8009952:	e003      	b.n	800995c <LoraWanInit+0xac>
		case LORAMAC_REGION_US915_HYBRID:
			DebugPrintf("US915_HYBRID ");
 8009954:	483b      	ldr	r0, [pc, #236]	; (8009a44 <LoraWanInit+0x194>)
 8009956:	f006 fea3 	bl	80106a0 <DebugPrintf>
			break;
 800995a:	bf00      	nop
	}
	DebugPrintf(" Class %X start!\r\n\r\n",loraWanClass+10);
 800995c:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <LoraWanInit+0x198>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	330a      	adds	r3, #10
 8009962:	4619      	mov	r1, r3
 8009964:	4839      	ldr	r0, [pc, #228]	; (8009a4c <LoraWanInit+0x19c>)
 8009966:	f006 fe9b 	bl	80106a0 <DebugPrintf>

	if(region == LORAMAC_REGION_AS923_AS1 || region == LORAMAC_REGION_AS923_AS2)
 800996a:	79bb      	ldrb	r3, [r7, #6]
 800996c:	2b0b      	cmp	r3, #11
 800996e:	d002      	beq.n	8009976 <LoraWanInit+0xc6>
 8009970:	79bb      	ldrb	r3, [r7, #6]
 8009972:	2b0c      	cmp	r3, #12
 8009974:	d101      	bne.n	800997a <LoraWanInit+0xca>
		region = LORAMAC_REGION_AS923;
 8009976:	2300      	movs	r3, #0
 8009978:	71bb      	strb	r3, [r7, #6]
	MibRequestConfirm_t mibReq;

	LoRaMacPrimitive.MacMcpsConfirm = McpsConfirm;
 800997a:	4b35      	ldr	r3, [pc, #212]	; (8009a50 <LoraWanInit+0x1a0>)
 800997c:	4a35      	ldr	r2, [pc, #212]	; (8009a54 <LoraWanInit+0x1a4>)
 800997e:	601a      	str	r2, [r3, #0]
	LoRaMacPrimitive.MacMcpsIndication = McpsIndication;
 8009980:	4b33      	ldr	r3, [pc, #204]	; (8009a50 <LoraWanInit+0x1a0>)
 8009982:	4a35      	ldr	r2, [pc, #212]	; (8009a58 <LoraWanInit+0x1a8>)
 8009984:	605a      	str	r2, [r3, #4]
	LoRaMacPrimitive.MacMlmeConfirm = MlmeConfirm;
 8009986:	4b32      	ldr	r3, [pc, #200]	; (8009a50 <LoraWanInit+0x1a0>)
 8009988:	4a34      	ldr	r2, [pc, #208]	; (8009a5c <LoraWanInit+0x1ac>)
 800998a:	609a      	str	r2, [r3, #8]
	LoRaMacPrimitive.MacMlmeIndication = MlmeIndication;
 800998c:	4b30      	ldr	r3, [pc, #192]	; (8009a50 <LoraWanInit+0x1a0>)
 800998e:	4a34      	ldr	r2, [pc, #208]	; (8009a60 <LoraWanInit+0x1b0>)
 8009990:	60da      	str	r2, [r3, #12]
	LoRaMacCallback.GetBatteryLevel = BoardGetBatteryLevel;
 8009992:	4b34      	ldr	r3, [pc, #208]	; (8009a64 <LoraWanInit+0x1b4>)
 8009994:	4a34      	ldr	r2, [pc, #208]	; (8009a68 <LoraWanInit+0x1b8>)
 8009996:	601a      	str	r2, [r3, #0]
	LoRaMacCallback.GetTemperatureLevel = NULL;
 8009998:	4b32      	ldr	r3, [pc, #200]	; (8009a64 <LoraWanInit+0x1b4>)
 800999a:	2200      	movs	r2, #0
 800999c:	605a      	str	r2, [r3, #4]
	LoRaMacInitialization( &LoRaMacPrimitive, &LoRaMacCallback,region);
 800999e:	79bb      	ldrb	r3, [r7, #6]
 80099a0:	461a      	mov	r2, r3
 80099a2:	4930      	ldr	r1, [pc, #192]	; (8009a64 <LoraWanInit+0x1b4>)
 80099a4:	482a      	ldr	r0, [pc, #168]	; (8009a50 <LoraWanInit+0x1a0>)
 80099a6:	f7fe f8b3 	bl	8007b10 <LoRaMacInitialization>

	TimerStop( &TxNextPacketTimer );
 80099aa:	4830      	ldr	r0, [pc, #192]	; (8009a6c <LoraWanInit+0x1bc>)
 80099ac:	f006 fce0 	bl	8010370 <TimerStop>
	TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
 80099b0:	492f      	ldr	r1, [pc, #188]	; (8009a70 <LoraWanInit+0x1c0>)
 80099b2:	482e      	ldr	r0, [pc, #184]	; (8009a6c <LoraWanInit+0x1bc>)
 80099b4:	f006 fb7a 	bl	80100ac <TimerInit>

	mibReq.Type = MIB_ADR;
 80099b8:	2302      	movs	r3, #2
 80099ba:	733b      	strb	r3, [r7, #12]
	mibReq.Param.AdrEnable = loraWanAdr;
 80099bc:	4b2d      	ldr	r3, [pc, #180]	; (8009a74 <LoraWanInit+0x1c4>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	743b      	strb	r3, [r7, #16]
	LoRaMacMibSetRequestConfirm( &mibReq );
 80099c2:	f107 030c 	add.w	r3, r7, #12
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fc7c 	bl	80082c4 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_PUBLIC_NETWORK;
 80099cc:	2307      	movs	r3, #7
 80099ce:	733b      	strb	r3, [r7, #12]
	mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80099d0:	2301      	movs	r3, #1
 80099d2:	743b      	strb	r3, [r7, #16]
	LoRaMacMibSetRequestConfirm( &mibReq );
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe fc73 	bl	80082c4 <LoRaMacMibSetRequestConfirm>

	lwan_dev_params_update();
 80099de:	f7ff ff07 	bl	80097f0 <lwan_dev_params_update>

	mibReq.Type = MIB_DEVICE_CLASS;
 80099e2:	2300      	movs	r3, #0
 80099e4:	733b      	strb	r3, [r7, #12]
	LoRaMacMibGetRequestConfirm( &mibReq );
 80099e6:	f107 030c 	add.w	r3, r7, #12
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe fb30 	bl	8008050 <LoRaMacMibGetRequestConfirm>
	
	if(loraWanClass != mibReq.Param.Class)
 80099f0:	7c3a      	ldrb	r2, [r7, #16]
 80099f2:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <LoraWanInit+0x198>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d007      	beq.n	8009a0a <LoraWanInit+0x15a>
	{
		mibReq.Param.Class = loraWanClass;
 80099fa:	4b13      	ldr	r3, [pc, #76]	; (8009a48 <LoraWanInit+0x198>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	743b      	strb	r3, [r7, #16]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009a00:	f107 030c 	add.w	r3, r7, #12
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe fc5d 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
	}

	deviceState = DEVICE_STATE_JOIN;
 8009a0a:	4b1b      	ldr	r3, [pc, #108]	; (8009a78 <LoraWanInit+0x1c8>)
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	701a      	strb	r2, [r3, #0]
}
 8009a10:	bf00      	nop
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	080123c0 	.word	0x080123c0
 8009a1c:	080123cc 	.word	0x080123cc
 8009a20:	080123e8 	.word	0x080123e8
 8009a24:	08012404 	.word	0x08012404
 8009a28:	0801240c 	.word	0x0801240c
 8009a2c:	08012414 	.word	0x08012414
 8009a30:	0801241c 	.word	0x0801241c
 8009a34:	08012424 	.word	0x08012424
 8009a38:	0801242c 	.word	0x0801242c
 8009a3c:	08012434 	.word	0x08012434
 8009a40:	0801243c 	.word	0x0801243c
 8009a44:	08012444 	.word	0x08012444
 8009a48:	2000076c 	.word	0x2000076c
 8009a4c:	08012454 	.word	0x08012454
 8009a50:	20000b14 	.word	0x20000b14
 8009a54:	080095dd 	.word	0x080095dd
 8009a58:	080096a9 	.word	0x080096a9
 8009a5c:	08009731 	.word	0x08009731
 8009a60:	080097d1 	.word	0x080097d1
 8009a64:	20000b24 	.word	0x20000b24
 8009a68:	0800b2e1 	.word	0x0800b2e1
 8009a6c:	20000afc 	.word	0x20000afc
 8009a70:	08009551 	.word	0x08009551
 8009a74:	20000081 	.word	0x20000081
 8009a78:	20000af8 	.word	0x20000af8

08009a7c <LoraWanJoin>:

void LoraWanJoin()
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af00      	add	r7, sp, #0
	if( overTheAirActivation )
 8009a82:	4b30      	ldr	r3, [pc, #192]	; (8009b44 <LoraWanJoin+0xc8>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d019      	beq.n	8009abe <LoraWanJoin+0x42>
	{
		//DebugPrintf("joining...");
		MlmeReq_t mlmeReq;
		
		mlmeReq.Type = MLME_JOIN;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	733b      	strb	r3, [r7, #12]
		mlmeReq.Req.Join.DevEui = devEui;
 8009a8e:	4b2e      	ldr	r3, [pc, #184]	; (8009b48 <LoraWanJoin+0xcc>)
 8009a90:	613b      	str	r3, [r7, #16]
		mlmeReq.Req.Join.AppEui = appEui;
 8009a92:	4b2e      	ldr	r3, [pc, #184]	; (8009b4c <LoraWanJoin+0xd0>)
 8009a94:	617b      	str	r3, [r7, #20]
		mlmeReq.Req.Join.AppKey = appKey;
 8009a96:	4b2e      	ldr	r3, [pc, #184]	; (8009b50 <LoraWanJoin+0xd4>)
 8009a98:	61bb      	str	r3, [r7, #24]
		mlmeReq.Req.Join.NbTrials = 3;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	773b      	strb	r3, [r7, #28]

        if( nextTx == true )
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <LoraWanJoin+0xd8>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <LoraWanJoin+0x3a>
        {
        	DebugPrintf("+JOIN:STARTING...\r\n");
 8009aa6:	482c      	ldr	r0, [pc, #176]	; (8009b58 <LoraWanJoin+0xdc>)
 8009aa8:	f006 fdfa 	bl	80106a0 <DebugPrintf>
        	LoRaMacMlmeRequest( &mlmeReq );
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe feff 	bl	80088b4 <LoRaMacMlmeRequest>
        }
        deviceState = DEVICE_STATE_SLEEP;
 8009ab6:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <LoraWanJoin+0xe0>)
 8009ab8:	2204      	movs	r2, #4
 8009aba:	701a      	strb	r2, [r3, #0]
		mibReq.Param.IsNetworkJoined = true;
		LoRaMacMibSetRequestConfirm( &mibReq );
		
		deviceState = DEVICE_STATE_SEND;
	}
}
 8009abc:	e03e      	b.n	8009b3c <LoraWanJoin+0xc0>
        if( devAddr == 0 )
 8009abe:	4b28      	ldr	r3, [pc, #160]	; (8009b60 <LoraWanJoin+0xe4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10e      	bne.n	8009ae4 <LoraWanJoin+0x68>
            srand1( BoardGetRandomSeed( ) );
 8009ac6:	f001 fbeb 	bl	800b2a0 <BoardGetRandomSeed>
 8009aca:	4603      	mov	r3, r0
 8009acc:	4618      	mov	r0, r3
 8009ace:	f006 fe13 	bl	80106f8 <srand1>
            devAddr = randr( 0, 0x01FFFFFF );
 8009ad2:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8009ad6:	2000      	movs	r0, #0
 8009ad8:	f006 fe1c 	bl	8010714 <randr>
 8009adc:	4603      	mov	r3, r0
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4b1f      	ldr	r3, [pc, #124]	; (8009b60 <LoraWanJoin+0xe4>)
 8009ae2:	601a      	str	r2, [r3, #0]
		mibReq.Type = MIB_NET_ID;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	703b      	strb	r3, [r7, #0]
		mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009aec:	463b      	mov	r3, r7
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe fbe8 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_DEV_ADDR;
 8009af4:	2304      	movs	r3, #4
 8009af6:	703b      	strb	r3, [r7, #0]
		mibReq.Param.DevAddr = devAddr;
 8009af8:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <LoraWanJoin+0xe4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009afe:	463b      	mov	r3, r7
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fe fbdf 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NWK_SKEY;
 8009b06:	2305      	movs	r3, #5
 8009b08:	703b      	strb	r3, [r7, #0]
		mibReq.Param.NwkSKey = nwkSKey;
 8009b0a:	4b16      	ldr	r3, [pc, #88]	; (8009b64 <LoraWanJoin+0xe8>)
 8009b0c:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009b0e:	463b      	mov	r3, r7
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fe fbd7 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_APP_SKEY;
 8009b16:	2306      	movs	r3, #6
 8009b18:	703b      	strb	r3, [r7, #0]
		mibReq.Param.AppSKey = appSKey;
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <LoraWanJoin+0xec>)
 8009b1c:	607b      	str	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009b1e:	463b      	mov	r3, r7
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe fbcf 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NETWORK_JOINED;
 8009b26:	2301      	movs	r3, #1
 8009b28:	703b      	strb	r3, [r7, #0]
		mibReq.Param.IsNetworkJoined = true;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	713b      	strb	r3, [r7, #4]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fe fbc7 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
		deviceState = DEVICE_STATE_SEND;
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <LoraWanJoin+0xe0>)
 8009b38:	2202      	movs	r2, #2
 8009b3a:	701a      	strb	r2, [r3, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	3720      	adds	r7, #32
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	20000080 	.word	0x20000080
 8009b48:	20000030 	.word	0x20000030
 8009b4c:	20000764 	.word	0x20000764
 8009b50:	20000038 	.word	0x20000038
 8009b54:	2000002d 	.word	0x2000002d
 8009b58:	0801246c 	.word	0x0801246c
 8009b5c:	20000af8 	.word	0x20000af8
 8009b60:	20000068 	.word	0x20000068
 8009b64:	20000048 	.word	0x20000048
 8009b68:	20000058 	.word	0x20000058

08009b6c <LoraWanSend>:

void LoraWanSend()
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
	if( nextTx == true )
 8009b72:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <LoraWanSend+0x48>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d017      	beq.n	8009baa <LoraWanSend+0x3e>
	{
		MibRequestConfirm_t mibReq;
		mibReq.Type = MIB_DEVICE_CLASS;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	713b      	strb	r3, [r7, #4]
		LoRaMacMibGetRequestConfirm( &mibReq );
 8009b7e:	1d3b      	adds	r3, r7, #4
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fa65 	bl	8008050 <LoRaMacMibGetRequestConfirm>

		if(loraWanClass != mibReq.Param.Class)
 8009b86:	7a3a      	ldrb	r2, [r7, #8]
 8009b88:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <LoraWanSend+0x4c>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d006      	beq.n	8009b9e <LoraWanSend+0x32>
		{
			mibReq.Param.Class = loraWanClass;
 8009b90:	4b09      	ldr	r3, [pc, #36]	; (8009bb8 <LoraWanSend+0x4c>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	723b      	strb	r3, [r7, #8]
			LoRaMacMibSetRequestConfirm( &mibReq );
 8009b96:	1d3b      	adds	r3, r7, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fb93 	bl	80082c4 <LoRaMacMibSetRequestConfirm>
		}

		nextTx = SendFrame( );
 8009b9e:	f7ff fc69 	bl	8009474 <SendFrame>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4b03      	ldr	r3, [pc, #12]	; (8009bb4 <LoraWanSend+0x48>)
 8009ba8:	701a      	strb	r2, [r3, #0]
	}
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	2000002d 	.word	0x2000002d
 8009bb8:	2000076c 	.word	0x2000076c

08009bbc <LoraWanCycle>:

void LoraWanCycle(uint32_t dutyCycle)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	TimerSetValue( &TxNextPacketTimer, dutyCycle );
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	4805      	ldr	r0, [pc, #20]	; (8009bdc <LoraWanCycle+0x20>)
 8009bc8:	f006 fc8e 	bl	80104e8 <TimerSetValue>
	TimerStart( &TxNextPacketTimer );
 8009bcc:	4803      	ldr	r0, [pc, #12]	; (8009bdc <LoraWanCycle+0x20>)
 8009bce:	f006 fa87 	bl	80100e0 <TimerStart>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000afc 	.word	0x20000afc

08009be0 <RegionIsActive>:
#define US915_HYBRID_APPLY_DR_OFFSET( )
#define US915_HYBRID_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	2b05      	cmp	r3, #5
 8009bee:	d101      	bne.n	8009bf4 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        US915_HYBRID_IS_ACTIVE( );
        default:
        {
            return false;
 8009bf4:	2300      	movs	r3, #0
        }
    }
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bc80      	pop	{r7}
 8009bfe:	4770      	bx	lr

08009c00 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	6039      	str	r1, [r7, #0]
 8009c0a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	d105      	bne.n	8009c22 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8009c16:	6838      	ldr	r0, [r7, #0]
 8009c18:	f007 f81a 	bl	8010c50 <RegionEU868GetPhyParam>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e001      	b.n	8009c26 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        US915_HYBRID_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	2300      	movs	r3, #0
 8009c28:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	4603      	mov	r3, r0
 8009c3a:	6039      	str	r1, [r7, #0]
 8009c3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	2b05      	cmp	r3, #5
 8009c42:	d103      	bne.n	8009c4c <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8009c44:	6838      	ldr	r0, [r7, #0]
 8009c46:	f007 f90d 	bl	8010e64 <RegionEU868SetBandTxDone>
 8009c4a:	e000      	b.n	8009c4e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        US915_HYBRID_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8009c4c:	bf00      	nop
        }
    }
}
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitType_t type )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	460a      	mov	r2, r1
 8009c5e:	71fb      	strb	r3, [r7, #7]
 8009c60:	4613      	mov	r3, r2
 8009c62:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	d104      	bne.n	8009c74 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8009c6a:	79bb      	ldrb	r3, [r7, #6]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f007 f91b 	bl	8010ea8 <RegionEU868InitDefaults>
 8009c72:	e000      	b.n	8009c76 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        US915_HYBRID_INIT_DEFAULTS( );
        default:
        {
            break;
 8009c74:	bf00      	nop
        }
    }
}
 8009c76:	bf00      	nop
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	4603      	mov	r3, r0
 8009c86:	6039      	str	r1, [r7, #0]
 8009c88:	71fb      	strb	r3, [r7, #7]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	2b05      	cmp	r3, #5
 8009c92:	d106      	bne.n	8009ca2 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8009c94:	79bb      	ldrb	r3, [r7, #6]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6838      	ldr	r0, [r7, #0]
 8009c9a:	f007 f943 	bl	8010f24 <RegionEU868Verify>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	e000      	b.n	8009ca4 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        US915_HYBRID_VERIFY( );
        default:
        {
            return false;
 8009ca2:	2300      	movs	r3, #0
        }
    }
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	d103      	bne.n	8009cc6 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8009cbe:	6838      	ldr	r0, [r7, #0]
 8009cc0:	f007 f9e6 	bl	8011090 <RegionEU868ApplyCFList>
 8009cc4:	e000      	b.n	8009cc8 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        US915_HYBRID_APPLY_CF_LIST( );
        default:
        {
            break;
 8009cc6:	bf00      	nop
        }
    }
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d104      	bne.n	8009cec <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8009ce2:	6838      	ldr	r0, [r7, #0]
 8009ce4:	f007 fa40 	bl	8011168 <RegionEU868ChanMaskSet>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	e000      	b.n	8009cee <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        US915_HYBRID_CHAN_MASK_SET( );
        default:
        {
            return false;
 8009cec:	2300      	movs	r3, #0
        }
    }
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <RegionAdrNext>:

bool RegionAdrNext( LoRaMacRegion_t region, AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	2b05      	cmp	r3, #5
 8009d0a:	d107      	bne.n	8009d1c <RegionAdrNext+0x26>
        AS923_ADR_NEXT( );
        AU915_ADR_NEXT( );
        CN470_ADR_NEXT( );
        CN779_ADR_NEXT( );
        EU433_ADR_NEXT( );
        EU868_ADR_NEXT( );
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	68b8      	ldr	r0, [r7, #8]
 8009d14:	f007 fa4e 	bl	80111b4 <RegionEU868AdrNext>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	e000      	b.n	8009d1e <RegionAdrNext+0x28>
        IN865_ADR_NEXT( );
        US915_ADR_NEXT( );
        US915_HYBRID_ADR_NEXT( );
        default:
        {
            return false;
 8009d1c:	2300      	movs	r3, #0
        }
    }
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b082      	sub	sp, #8
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	603b      	str	r3, [r7, #0]
 8009d2e:	4603      	mov	r3, r0
 8009d30:	71fb      	strb	r3, [r7, #7]
 8009d32:	460b      	mov	r3, r1
 8009d34:	71bb      	strb	r3, [r7, #6]
 8009d36:	4613      	mov	r3, r2
 8009d38:	717b      	strb	r3, [r7, #5]
    switch( region )
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b05      	cmp	r3, #5
 8009d3e:	d107      	bne.n	8009d50 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8009d40:	7979      	ldrb	r1, [r7, #5]
 8009d42:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	f007 fa97 	bl	801127c <RegionEU868ComputeRxWindowParameters>
 8009d4e:	e000      	b.n	8009d52 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_HYBRID_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8009d50:	bf00      	nop
        }
    }
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	4603      	mov	r3, r0
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b05      	cmp	r3, #5
 8009d6c:	d105      	bne.n	8009d7a <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	68b8      	ldr	r0, [r7, #8]
 8009d72:	f007 fad9 	bl	8011328 <RegionEU868RxConfig>
 8009d76:	4603      	mov	r3, r0
 8009d78:	e000      	b.n	8009d7c <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        US915_HYBRID_RX_CONFIG( );
        default:
        {
            return false;
 8009d7a:	2300      	movs	r3, #0
        }
    }
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	603b      	str	r3, [r7, #0]
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	d106      	bne.n	8009da8 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	68b8      	ldr	r0, [r7, #8]
 8009da0:	f007 fb88 	bl	80114b4 <RegionEU868TxConfig>
 8009da4:	4603      	mov	r3, r0
 8009da6:	e000      	b.n	8009daa <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        US915_HYBRID_TX_CONFIG( );
        default:
        {
            return false;
 8009da8:	2300      	movs	r3, #0
        }
    }
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b086      	sub	sp, #24
 8009db6:	af02      	add	r7, sp, #8
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	d109      	bne.n	8009ddc <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	68b8      	ldr	r0, [r7, #8]
 8009dd4:	f007 fc26 	bl	8011624 <RegionEU868LinkAdrReq>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	e000      	b.n	8009dde <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        US915_HYBRID_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8009ddc:	2300      	movs	r3, #0
        }
    }
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	4603      	mov	r3, r0
 8009dee:	6039      	str	r1, [r7, #0]
 8009df0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	2b05      	cmp	r3, #5
 8009df6:	d104      	bne.n	8009e02 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8009df8:	6838      	ldr	r0, [r7, #0]
 8009dfa:	f007 fce3 	bl	80117c4 <RegionEU868RxParamSetupReq>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	e000      	b.n	8009e04 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        US915_HYBRID_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8009e02:	2300      	movs	r3, #0
        }
    }
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	2b05      	cmp	r3, #5
 8009e1c:	d104      	bne.n	8009e28 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8009e1e:	6838      	ldr	r0, [r7, #0]
 8009e20:	f007 fd0c 	bl	801183c <RegionEU868NewChannelReq>
 8009e24:	4603      	mov	r3, r0
 8009e26:	e000      	b.n	8009e2a <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        US915_HYBRID_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8009e28:	2300      	movs	r3, #0
        }
    }
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	4603      	mov	r3, r0
 8009e3a:	6039      	str	r1, [r7, #0]
 8009e3c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	2b05      	cmp	r3, #5
 8009e42:	d104      	bne.n	8009e4e <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8009e44:	6838      	ldr	r0, [r7, #0]
 8009e46:	f007 fd55 	bl	80118f4 <RegionEU868TxParamSetupReq>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	e000      	b.n	8009e50 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        US915_HYBRID_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8009e4e:	2300      	movs	r3, #0
        }
    }
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d104      	bne.n	8009e74 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8009e6a:	6838      	ldr	r0, [r7, #0]
 8009e6c:	f007 fd4e 	bl	801190c <RegionEU868DlChannelReq>
 8009e70:	4603      	mov	r3, r0
 8009e72:	e000      	b.n	8009e76 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        US915_HYBRID_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8009e74:	2300      	movs	r3, #0
        }
    }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, AlternateDrParams_t* alternateDr )
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	4603      	mov	r3, r0
 8009e86:	6039      	str	r1, [r7, #0]
 8009e88:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009e8a:	79fb      	ldrb	r3, [r7, #7]
 8009e8c:	2b05      	cmp	r3, #5
 8009e8e:	d104      	bne.n	8009e9a <RegionAlternateDr+0x1c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8009e90:	6838      	ldr	r0, [r7, #0]
 8009e92:	f007 fd7d 	bl	8011990 <RegionEU868AlternateDr>
 8009e96:	4603      	mov	r3, r0
 8009e98:	e000      	b.n	8009e9c <RegionAlternateDr+0x1e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        US915_HYBRID_ALTERNATE_DR( );
        default:
        {
            return 0;
 8009e9a:	2300      	movs	r3, #0
        }
    }
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	d103      	bne.n	8009ebe <RegionCalcBackOff+0x1a>
        AS923_CALC_BACKOFF( );
        AU915_CALC_BACKOFF( );
        CN470_CALC_BACKOFF( );
        CN779_CALC_BACKOFF( );
        EU433_CALC_BACKOFF( );
        EU868_CALC_BACKOFF( );
 8009eb6:	6838      	ldr	r0, [r7, #0]
 8009eb8:	f007 fdbc 	bl	8011a34 <RegionEU868CalcBackOff>
 8009ebc:	e000      	b.n	8009ec0 <RegionCalcBackOff+0x1c>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        US915_HYBRID_CALC_BACKOFF( );
        default:
        {
            break;
 8009ebe:	bf00      	nop
        }
    }
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <RegionNextChannel>:

bool RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d107      	bne.n	8009eee <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f007 fe15 	bl	8011b14 <RegionEU868NextChannel>
 8009eea:	4603      	mov	r3, r0
 8009eec:	e000      	b.n	8009ef0 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        US915_HYBRID_NEXT_CHANNEL( );
        default:
        {
            return false;
 8009eee:	2300      	movs	r3, #0
        }
    }
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <RegionChannelAdd>:

LoRaMacStatus_t RegionChannelAdd( LoRaMacRegion_t region, ChannelAddParams_t* channelAdd )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d104      	bne.n	8009f14 <RegionChannelAdd+0x1c>
        AS923_CHANNEL_ADD( );
        AU915_CHANNEL_ADD( );
        CN470_CHANNEL_ADD( );
        CN779_CHANNEL_ADD( );
        EU433_CHANNEL_ADD( );
        EU868_CHANNEL_ADD( );
 8009f0a:	6838      	ldr	r0, [r7, #0]
 8009f0c:	f007 fe9a 	bl	8011c44 <RegionEU868ChannelAdd>
 8009f10:	4603      	mov	r3, r0
 8009f12:	e000      	b.n	8009f16 <RegionChannelAdd+0x1e>
        IN865_CHANNEL_ADD( );
        US915_CHANNEL_ADD( );
        US915_HYBRID_CHANNEL_ADD( );
        default:
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009f14:	2303      	movs	r3, #3
        }
    }
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	4603      	mov	r3, r0
 8009f26:	6039      	str	r1, [r7, #0]
 8009f28:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8009f2a:	79fb      	ldrb	r3, [r7, #7]
 8009f2c:	2b05      	cmp	r3, #5
 8009f2e:	d103      	bne.n	8009f38 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8009f30:	6838      	ldr	r0, [r7, #0]
 8009f32:	f007 ff75 	bl	8011e20 <RegionEU868SetContinuousWave>
 8009f36:	e000      	b.n	8009f3a <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        US915_HYBRID_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8009f38:	bf00      	nop
        }
    }
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8009f42:	b590      	push	{r4, r7, lr}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	4604      	mov	r4, r0
 8009f4a:	4608      	mov	r0, r1
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4623      	mov	r3, r4
 8009f52:	71fb      	strb	r3, [r7, #7]
 8009f54:	4603      	mov	r3, r0
 8009f56:	71bb      	strb	r3, [r7, #6]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	717b      	strb	r3, [r7, #5]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d109      	bne.n	8009f7a <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8009f66:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8009f6a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8009f6e:	79bb      	ldrb	r3, [r7, #6]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f007 ffa1 	bl	8011eb8 <RegionEU868ApplyDrOffset>
 8009f76:	4603      	mov	r3, r0
 8009f78:	e000      	b.n	8009f7c <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        US915_HYBRID_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8009f7a:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}

08009f84 <CountChannels>:
#define BACKOFF_DC_24_HOURS     3



static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	460a      	mov	r2, r1
 8009f8e:	80fb      	strh	r3, [r7, #6]
 8009f90:	4613      	mov	r3, r2
 8009f92:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73bb      	strb	r3, [r7, #14]
 8009f9c:	e011      	b.n	8009fc2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8009f9e:	88fa      	ldrh	r2, [r7, #6]
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa8:	401a      	ands	r2, r3
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2101      	movs	r1, #1
 8009fae:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d102      	bne.n	8009fbc <CountChannels+0x38>
        {
            nbActiveBits++;
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	73bb      	strb	r3, [r7, #14]
 8009fc2:	7bba      	ldrb	r2, [r7, #14]
 8009fc4:	797b      	ldrb	r3, [r7, #5]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d3e9      	bcc.n	8009f9e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8009fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bc80      	pop	{r7}
 8009fd4:	4770      	bx	lr
	...

08009fd8 <RegionCommonGetJoinDc>:



uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	81fb      	strh	r3, [r7, #14]

    if( elapsedTime < 3600000 )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a0a      	ldr	r2, [pc, #40]	; (800a010 <RegionCommonGetJoinDc+0x38>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d202      	bcs.n	8009ff2 <RegionCommonGetJoinDc+0x1a>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	81fb      	strh	r3, [r7, #14]
 8009ff0:	e008      	b.n	800a004 <RegionCommonGetJoinDc+0x2c>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a07      	ldr	r2, [pc, #28]	; (800a014 <RegionCommonGetJoinDc+0x3c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d202      	bcs.n	800a000 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	81fb      	strh	r3, [r7, #14]
 8009ffe:	e001      	b.n	800a004 <RegionCommonGetJoinDc+0x2c>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800a000:	2303      	movs	r3, #3
 800a002:	81fb      	strh	r3, [r7, #14]
    }
    return dutyCycle;
 800a004:	89fb      	ldrh	r3, [r7, #14]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bc80      	pop	{r7}
 800a00e:	4770      	bx	lr
 800a010:	0036ee80 	.word	0x0036ee80
 800a014:	025c3f80 	.word	0x025c3f80

0800a018 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6039      	str	r1, [r7, #0]
 800a020:	4611      	mov	r1, r2
 800a022:	461a      	mov	r2, r3
 800a024:	4603      	mov	r3, r0
 800a026:	71fb      	strb	r3, [r7, #7]
 800a028:	460b      	mov	r3, r1
 800a02a:	71bb      	strb	r3, [r7, #6]
 800a02c:	4613      	mov	r3, r2
 800a02e:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800a030:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800a034:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800a038:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 f866 	bl	800a10e <RegionCommonValueInRange>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 800a048:	2300      	movs	r3, #0
 800a04a:	e05c      	b.n	800a106 <RegionCommonChanVerifyDr+0xee>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
 800a050:	2300      	movs	r3, #0
 800a052:	73bb      	strb	r3, [r7, #14]
 800a054:	e052      	b.n	800a0fc <RegionCommonChanVerifyDr+0xe4>
    {
        //4.29 workaround for when disable all channles not return server 0306 but return 0304
        if (channelsMask[k] == 0)
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	683a      	ldr	r2, [r7, #0]
 800a05c:	4413      	add	r3, r2
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <RegionCommonChanVerifyDr+0x50>
            return true;
 800a064:	2301      	movs	r3, #1
 800a066:	e04e      	b.n	800a106 <RegionCommonChanVerifyDr+0xee>
        for( uint8_t j = 0; j < 16; j++ )
 800a068:	2300      	movs	r3, #0
 800a06a:	737b      	strb	r3, [r7, #13]
 800a06c:	e03d      	b.n	800a0ea <RegionCommonChanVerifyDr+0xd2>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	7b7b      	ldrb	r3, [r7, #13]
 800a07c:	fa42 f303 	asr.w	r3, r2, r3
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02d      	beq.n	800a0e4 <RegionCommonChanVerifyDr+0xcc>
            {// Check datarate validity for enabled channels
#ifdef CONFIG_LINKWAN 
                if( RegionCommonValueInRange( dr, ( channels[(i + j) % 8].DrRange.Fields.Min & 0x0F ),
                                                  ( channels[(i + j) % 8].DrRange.Fields.Max & 0x0F ) ) == 1 )
#else
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a088:	7bfa      	ldrb	r2, [r7, #15]
 800a08a:	7b7b      	ldrb	r3, [r7, #13]
 800a08c:	4413      	add	r3, r2
 800a08e:	461a      	mov	r2, r3
 800a090:	4613      	mov	r3, r2
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	461a      	mov	r2, r3
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	4413      	add	r3, r2
 800a09e:	7a1b      	ldrb	r3, [r3, #8]
 800a0a0:	f343 0303 	sbfx	r3, r3, #0, #4
 800a0a4:	b25b      	sxtb	r3, r3
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800a0ac:	7bfa      	ldrb	r2, [r7, #15]
 800a0ae:	7b7b      	ldrb	r3, [r7, #13]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	7a1b      	ldrb	r3, [r3, #8]
 800a0c4:	f343 1303 	sbfx	r3, r3, #4, #4
 800a0c8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800a0ca:	f003 030f 	and.w	r3, r3, #15
 800a0ce:	b25a      	sxtb	r2, r3
 800a0d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 f81a 	bl	800a10e <RegionCommonValueInRange>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d101      	bne.n	800a0e4 <RegionCommonChanVerifyDr+0xcc>
#endif
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e010      	b.n	800a106 <RegionCommonChanVerifyDr+0xee>
        for( uint8_t j = 0; j < 16; j++ )
 800a0e4:	7b7b      	ldrb	r3, [r7, #13]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	737b      	strb	r3, [r7, #13]
 800a0ea:	7b7b      	ldrb	r3, [r7, #13]
 800a0ec:	2b0f      	cmp	r3, #15
 800a0ee:	d9be      	bls.n	800a06e <RegionCommonChanVerifyDr+0x56>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800a0f0:	7bfb      	ldrb	r3, [r7, #15]
 800a0f2:	3310      	adds	r3, #16
 800a0f4:	73fb      	strb	r3, [r7, #15]
 800a0f6:	7bbb      	ldrb	r3, [r7, #14]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	73bb      	strb	r3, [r7, #14]
 800a0fc:	7bfa      	ldrb	r2, [r7, #15]
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	429a      	cmp	r2, r3
 800a102:	d3a8      	bcc.n	800a056 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 800a10e:	b480      	push	{r7}
 800a110:	b083      	sub	sp, #12
 800a112:	af00      	add	r7, sp, #0
 800a114:	4603      	mov	r3, r0
 800a116:	71fb      	strb	r3, [r7, #7]
 800a118:	460b      	mov	r3, r1
 800a11a:	71bb      	strb	r3, [r7, #6]
 800a11c:	4613      	mov	r3, r2
 800a11e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 800a120:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a124:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a128:	429a      	cmp	r2, r3
 800a12a:	db07      	blt.n	800a13c <RegionCommonValueInRange+0x2e>
 800a12c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a130:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800a134:	429a      	cmp	r2, r3
 800a136:	dc01      	bgt.n	800a13c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <RegionCommonValueInRange+0x30>
    }
    return 0;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	bc80      	pop	{r7}
 800a146:	4770      	bx	lr

0800a148 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
 800a154:	4613      	mov	r3, r2
 800a156:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 800a158:	78fb      	ldrb	r3, [r7, #3]
 800a15a:	091b      	lsrs	r3, r3, #4
 800a15c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800a15e:	78bb      	ldrb	r3, [r7, #2]
 800a160:	091b      	lsrs	r3, r3, #4
 800a162:	b2db      	uxtb	r3, r3
 800a164:	7bfa      	ldrb	r2, [r7, #15]
 800a166:	429a      	cmp	r2, r3
 800a168:	d803      	bhi.n	800a172 <RegionCommonChanDisable+0x2a>
 800a16a:	78fa      	ldrb	r2, [r7, #3]
 800a16c:	78bb      	ldrb	r3, [r7, #2]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d301      	bcc.n	800a176 <RegionCommonChanDisable+0x2e>
    {
        return false;
 800a172:	2300      	movs	r3, #0
 800a174:	e017      	b.n	800a1a6 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	005b      	lsls	r3, r3, #1
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b21a      	sxth	r2, r3
 800a182:	78fb      	ldrb	r3, [r7, #3]
 800a184:	f003 030f 	and.w	r3, r3, #15
 800a188:	2101      	movs	r1, #1
 800a18a:	fa01 f303 	lsl.w	r3, r1, r3
 800a18e:	b21b      	sxth	r3, r3
 800a190:	43db      	mvns	r3, r3
 800a192:	b21b      	sxth	r3, r3
 800a194:	4013      	ands	r3, r2
 800a196:	b219      	sxth	r1, r3
 800a198:	7bfb      	ldrb	r3, [r7, #15]
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	4413      	add	r3, r2
 800a1a0:	b28a      	uxth	r2, r1
 800a1a2:	801a      	strh	r2, [r3, #0]

    return true;
 800a1a4:	2301      	movs	r3, #1
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bc80      	pop	{r7}
 800a1ae:	4770      	bx	lr

0800a1b0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <RegionCommonCountChannels+0x1e>
    {
        return 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	e018      	b.n	800a200 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	73bb      	strb	r3, [r7, #14]
 800a1d2:	e010      	b.n	800a1f6 <RegionCommonCountChannels+0x46>
        else
        {
            nbChannels += CountChannels( channelsMask[i], 8 );
        }
#else
        nbChannels += CountChannels( channelsMask[i], 16 );
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	4413      	add	r3, r2
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	2110      	movs	r1, #16
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff fecf 	bl	8009f84 <CountChannels>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	73bb      	strb	r3, [r7, #14]
 800a1f6:	7bba      	ldrb	r2, [r7, #14]
 800a1f8:	78bb      	ldrb	r3, [r7, #2]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3ea      	bcc.n	800a1d4 <RegionCommonCountChannels+0x24>
#endif
    }

    return nbChannels;
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d016      	beq.n	800a24a <RegionCommonChanMaskCopy+0x42>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d013      	beq.n	800a24a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 800a222:	2300      	movs	r3, #0
 800a224:	75fb      	strb	r3, [r7, #23]
 800a226:	e00c      	b.n	800a242 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	441a      	add	r2, r3
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	68f9      	ldr	r1, [r7, #12]
 800a236:	440b      	add	r3, r1
 800a238:	8812      	ldrh	r2, [r2, #0]
 800a23a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	3301      	adds	r3, #1
 800a240:	75fb      	strb	r3, [r7, #23]
 800a242:	7dfa      	ldrb	r2, [r7, #23]
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	429a      	cmp	r2, r3
 800a248:	d3ee      	bcc.n	800a228 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 800a24a:	bf00      	nop
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	bc80      	pop	{r7}
 800a252:	4770      	bx	lr

0800a254 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	73fb      	strb	r3, [r7, #15]
    if (joined == true) {
 800a262:	7bfb      	ldrb	r3, [r7, #15]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <RegionCommonSetBandTxDone+0x1c>
        band->LastTxDoneTime = lastTxDone;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	609a      	str	r2, [r3, #8]
    } else {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800a26e:	e005      	b.n	800a27c <RegionCommonSetBandTxDone+0x28>
        band->LastTxDoneTime = lastTxDone;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	605a      	str	r2, [r3, #4]
}
 800a27c:	bf00      	nop
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	bc80      	pop	{r7}
 800a284:	4770      	bx	lr

0800a286 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800a286:	b590      	push	{r4, r7, lr}
 800a288:	b087      	sub	sp, #28
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	603a      	str	r2, [r7, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	4603      	mov	r3, r0
 800a292:	71fb      	strb	r3, [r7, #7]
 800a294:	460b      	mov	r3, r1
 800a296:	71bb      	strb	r3, [r7, #6]
 800a298:	4613      	mov	r3, r2
 800a29a:	717b      	strb	r3, [r7, #5]
    TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	617b      	str	r3, [r7, #20]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	74fb      	strb	r3, [r7, #19]
 800a2a6:	e0a9      	b.n	800a3fc <RegionCommonUpdateBandTimeOff+0x176>
    {
        if( joined == false )
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	f083 0301 	eor.w	r3, r3, #1
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d053      	beq.n	800a35c <RegionCommonUpdateBandTimeOff+0xd6>
        {
            uint32_t txDoneTime =  MAX( TimerGetElapsedTime( bands[i].LastJoinTxDoneTime ),
 800a2b4:	7cfb      	ldrb	r3, [r7, #19]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f006 f932 	bl	8010528 <TimerGetElapsedTime>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	79bb      	ldrb	r3, [r7, #6]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <RegionCommonUpdateBandTimeOff+0x5a>
 800a2cc:	7cfb      	ldrb	r3, [r7, #19]
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f006 f926 	bl	8010528 <TimerGetElapsedTime>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	e000      	b.n	800a2e2 <RegionCommonUpdateBandTimeOff+0x5c>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	d209      	bcs.n	800a2fa <RegionCommonUpdateBandTimeOff+0x74>
 800a2e6:	7cfb      	ldrb	r3, [r7, #19]
 800a2e8:	011b      	lsls	r3, r3, #4
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f006 f919 	bl	8010528 <TimerGetElapsedTime>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	e00d      	b.n	800a316 <RegionCommonUpdateBandTimeOff+0x90>
 800a2fa:	79bb      	ldrb	r3, [r7, #6]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d009      	beq.n	800a314 <RegionCommonUpdateBandTimeOff+0x8e>
 800a300:	7cfb      	ldrb	r3, [r7, #19]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	4413      	add	r3, r2
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f006 f90c 	bl	8010528 <TimerGetElapsedTime>
 800a310:	4603      	mov	r3, r0
 800a312:	e000      	b.n	800a316 <RegionCommonUpdateBandTimeOff+0x90>
 800a314:	2300      	movs	r3, #0
 800a316:	60fb      	str	r3, [r7, #12]
                                        ( dutyCycle == true ) ? TimerGetElapsedTime( bands[i].LastTxDoneTime ) : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 800a318:	7cfb      	ldrb	r3, [r7, #19]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	683a      	ldr	r2, [r7, #0]
 800a31e:	4413      	add	r3, r2
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	429a      	cmp	r2, r3
 800a326:	d305      	bcc.n	800a334 <RegionCommonUpdateBandTimeOff+0xae>
            {
                bands[i].TimeOff = 0;
 800a328:	7cfb      	ldrb	r3, [r7, #19]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	4413      	add	r3, r2
 800a330:	2200      	movs	r2, #0
 800a332:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 800a334:	7cfb      	ldrb	r3, [r7, #19]
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	4413      	add	r3, r2
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d059      	beq.n	800a3f6 <RegionCommonUpdateBandTimeOff+0x170>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 800a342:	7cfb      	ldrb	r3, [r7, #19]
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	4413      	add	r3, r2
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	4293      	cmp	r3, r2
 800a354:	bf28      	it	cs
 800a356:	4613      	movcs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]
 800a35a:	e04c      	b.n	800a3f6 <RegionCommonUpdateBandTimeOff+0x170>
            }
        }
        else
        {
            if( dutyCycle == true )
 800a35c:	79bb      	ldrb	r3, [r7, #6]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d041      	beq.n	800a3e6 <RegionCommonUpdateBandTimeOff+0x160>
            {
                if( bands[i].TimeOff <= TimerGetElapsedTime( bands[i].LastTxDoneTime ) )
 800a362:	7cfb      	ldrb	r3, [r7, #19]
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4413      	add	r3, r2
 800a36a:	68dc      	ldr	r4, [r3, #12]
 800a36c:	7cfb      	ldrb	r3, [r7, #19]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	4413      	add	r3, r2
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	4618      	mov	r0, r3
 800a378:	f006 f8d6 	bl	8010528 <TimerGetElapsedTime>
 800a37c:	4603      	mov	r3, r0
 800a37e:	429c      	cmp	r4, r3
 800a380:	d805      	bhi.n	800a38e <RegionCommonUpdateBandTimeOff+0x108>
                {
                    bands[i].TimeOff = 0;
 800a382:	7cfb      	ldrb	r3, [r7, #19]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	4413      	add	r3, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 800a38e:	7cfb      	ldrb	r3, [r7, #19]
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4413      	add	r3, r2
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d02c      	beq.n	800a3f6 <RegionCommonUpdateBandTimeOff+0x170>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - TimerGetElapsedTime( bands[i].LastTxDoneTime ),
 800a39c:	7cfb      	ldrb	r3, [r7, #19]
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	68dc      	ldr	r4, [r3, #12]
 800a3a6:	7cfb      	ldrb	r3, [r7, #19]
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f006 f8b9 	bl	8010528 <TimerGetElapsedTime>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	1ae3      	subs	r3, r4, r3
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d90f      	bls.n	800a3e0 <RegionCommonUpdateBandTimeOff+0x15a>
 800a3c0:	7cfb      	ldrb	r3, [r7, #19]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	68dc      	ldr	r4, [r3, #12]
 800a3ca:	7cfb      	ldrb	r3, [r7, #19]
 800a3cc:	011b      	lsls	r3, r3, #4
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f006 f8a7 	bl	8010528 <TimerGetElapsedTime>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	1ae3      	subs	r3, r4, r3
 800a3de:	e000      	b.n	800a3e2 <RegionCommonUpdateBandTimeOff+0x15c>
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	617b      	str	r3, [r7, #20]
 800a3e4:	e007      	b.n	800a3f6 <RegionCommonUpdateBandTimeOff+0x170>
                                       nextTxDelay );
                }
            }
            else
            {
                nextTxDelay = 0;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
                bands[i].TimeOff = 0;
 800a3ea:	7cfb      	ldrb	r3, [r7, #19]
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800a3f6:	7cfb      	ldrb	r3, [r7, #19]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	74fb      	strb	r3, [r7, #19]
 800a3fc:	7cfa      	ldrb	r2, [r7, #19]
 800a3fe:	797b      	ldrb	r3, [r7, #5]
 800a400:	429a      	cmp	r2, r3
 800a402:	f4ff af51 	bcc.w	800a2a8 <RegionCommonUpdateBandTimeOff+0x22>
            }
        }
    }
    return nextTxDelay;
 800a406:	697b      	ldr	r3, [r7, #20]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd90      	pop	{r4, r7, pc}

0800a410 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, LinkAdrParams_t* linkAdrParams )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b03      	cmp	r3, #3
 800a424:	d13f      	bne.n	800a4a6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3301      	adds	r3, #1
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	b25a      	sxtb	r2, r3
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a438:	f003 030f 	and.w	r3, r3, #15
 800a43c:	b25a      	sxtb	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	b25a      	sxtb	r2, r3
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3302      	adds	r3, #2
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	889b      	ldrh	r3, [r3, #4]
 800a464:	b21a      	sxth	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3303      	adds	r3, #3
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	b21b      	sxth	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b21b      	sxth	r3, r3
 800a474:	b29a      	uxth	r2, r3
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	791a      	ldrb	r2, [r3, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	091b      	lsrs	r3, r3, #4
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800a4a2:	2305      	movs	r3, #5
 800a4a4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800a4b4:	b5b0      	push	{r4, r5, r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	71fb      	strb	r3, [r7, #7]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f5 ffab 	bl	8000424 <__aeabi_i2d>
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	6838      	ldr	r0, [r7, #0]
 800a4d4:	f7f5 ff96 	bl	8000404 <__aeabi_ui2d>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f6 f934 	bl	800074c <__aeabi_ddiv>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <RegionCommonComputeSymbolTimeLoRa+0x50>)
 800a4f2:	f7f6 f801 	bl	80004f8 <__aeabi_dmul>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
}
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bdb0      	pop	{r4, r5, r7, pc}
 800a504:	408f4000 	.word	0x408f4000

0800a508 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	71fb      	strb	r3, [r7, #7]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	4618      	mov	r0, r3
 800a516:	f7f5 ff75 	bl	8000404 <__aeabi_ui2d>
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	f04f 0000 	mov.w	r0, #0
 800a522:	4905      	ldr	r1, [pc, #20]	; (800a538 <RegionCommonComputeSymbolTimeFsk+0x30>)
 800a524:	f7f6 f912 	bl	800074c <__aeabi_ddiv>
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
}
 800a52c:	4610      	mov	r0, r2
 800a52e:	4619      	mov	r1, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	40200000 	.word	0x40200000

0800a53c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800a53c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a540:	b084      	sub	sp, #16
 800a542:	af00      	add	r7, sp, #0
 800a544:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	4613      	mov	r3, r2
 800a54c:	71fb      	strb	r3, [r7, #7]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800a54e:	79fc      	ldrb	r4, [r7, #7]
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	3b04      	subs	r3, #4
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	4618      	mov	r0, r3
 800a558:	f7f5 ff64 	bl	8000424 <__aeabi_i2d>
 800a55c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a560:	f7f5 ffca 	bl	80004f8 <__aeabi_dmul>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4690      	mov	r8, r2
 800a56a:	4699      	mov	r9, r3
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	4618      	mov	r0, r3
 800a572:	f7f5 ff47 	bl	8000404 <__aeabi_ui2d>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4640      	mov	r0, r8
 800a57c:	4649      	mov	r1, r9
 800a57e:	f7f5 fe05 	bl	800018c <__adddf3>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4610      	mov	r0, r2
 800a588:	4619      	mov	r1, r3
 800a58a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a58e:	f7f6 f8dd 	bl	800074c <__aeabi_ddiv>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4610      	mov	r0, r2
 800a598:	4619      	mov	r1, r3
 800a59a:	f007 fd09 	bl	8011fb0 <ceil>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	f7f6 fa69 	bl	8000a7c <__aeabi_d2uiz>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	bf38      	it	cc
 800a5b2:	461a      	movcc	r2, r3
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	601a      	str	r2, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800a5b8:	f04f 0200 	mov.w	r2, #0
 800a5bc:	4b21      	ldr	r3, [pc, #132]	; (800a644 <RegionCommonComputeRxWindowParameters+0x108>)
 800a5be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5c2:	f7f5 ff99 	bl	80004f8 <__aeabi_dmul>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4614      	mov	r4, r2
 800a5cc:	461d      	mov	r5, r3
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7f5 ff16 	bl	8000404 <__aeabi_ui2d>
 800a5d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5dc:	f7f5 ff8c 	bl	80004f8 <__aeabi_dmul>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5f0:	f7f6 f8ac 	bl	800074c <__aeabi_ddiv>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f7f5 fdc4 	bl	8000188 <__aeabi_dsub>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4614      	mov	r4, r2
 800a606:	461d      	mov	r5, r3
 800a608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a60a:	f7f5 fefb 	bl	8000404 <__aeabi_ui2d>
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	4620      	mov	r0, r4
 800a614:	4629      	mov	r1, r5
 800a616:	f7f5 fdb7 	bl	8000188 <__aeabi_dsub>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4610      	mov	r0, r2
 800a620:	4619      	mov	r1, r3
 800a622:	f007 fcc5 	bl	8011fb0 <ceil>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4610      	mov	r0, r2
 800a62c:	4619      	mov	r1, r3
 800a62e:	f7f6 f9fd 	bl	8000a2c <__aeabi_d2iz>
 800a632:	4602      	mov	r2, r0
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	601a      	str	r2, [r3, #0]
}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a642:	bf00      	nop
 800a644:	40100000 	.word	0x40100000

0800a648 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	4603      	mov	r3, r0
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800a65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	4618      	mov	r0, r3
 800a662:	f7f6 fae1 	bl	8000c28 <__aeabi_ui2f>
 800a666:	4603      	mov	r3, r0
 800a668:	4619      	mov	r1, r3
 800a66a:	68b8      	ldr	r0, [r7, #8]
 800a66c:	f7f6 fa2a 	bl	8000ac4 <__aeabi_fsub>
 800a670:	4603      	mov	r3, r0
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	4618      	mov	r0, r3
 800a676:	f7f6 fa25 	bl	8000ac4 <__aeabi_fsub>
 800a67a:	4603      	mov	r3, r0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f5 fee3 	bl	8000448 <__aeabi_f2d>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4610      	mov	r0, r2
 800a688:	4619      	mov	r1, r3
 800a68a:	f007 fd11 	bl	80120b0 <floor>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4610      	mov	r0, r2
 800a694:	4619      	mov	r1, r3
 800a696:	f7f6 f9c9 	bl	8000a2c <__aeabi_d2iz>
 800a69a:	4603      	mov	r3, r0
 800a69c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 800a69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	781a      	ldrb	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	7852      	ldrb	r2, [r2, #1]
 800a6c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3302      	adds	r3, #2
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	7892      	ldrb	r2, [r2, #2]
 800a6ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	3303      	adds	r3, #3
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	78d2      	ldrb	r2, [r2, #3]
 800a6d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	7912      	ldrb	r2, [r2, #4]
 800a6e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3305      	adds	r3, #5
 800a6e8:	683a      	ldr	r2, [r7, #0]
 800a6ea:	7952      	ldrb	r2, [r2, #5]
 800a6ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3306      	adds	r3, #6
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	7992      	ldrb	r2, [r2, #6]
 800a6f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3307      	adds	r3, #7
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	79d2      	ldrb	r2, [r2, #7]
 800a700:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3308      	adds	r3, #8
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	7a12      	ldrb	r2, [r2, #8]
 800a70a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3309      	adds	r3, #9
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	7a52      	ldrb	r2, [r2, #9]
 800a714:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	330a      	adds	r3, #10
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	7a92      	ldrb	r2, [r2, #10]
 800a71e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	330b      	adds	r3, #11
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	7ad2      	ldrb	r2, [r2, #11]
 800a728:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	330c      	adds	r3, #12
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	7b12      	ldrb	r2, [r2, #12]
 800a732:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	330d      	adds	r3, #13
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	7b52      	ldrb	r2, [r2, #13]
 800a73c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	330e      	adds	r3, #14
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	7b92      	ldrb	r2, [r2, #14]
 800a746:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	330f      	adds	r3, #15
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	7bd2      	ldrb	r2, [r2, #15]
 800a750:	701a      	strb	r2, [r3, #0]
#endif
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	bc80      	pop	{r7}
 800a75a:	4770      	bx	lr

0800a75c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a76a:	e007      	b.n	800a77c <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	1c53      	adds	r3, r2, #1
 800a770:	60bb      	str	r3, [r7, #8]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1c59      	adds	r1, r3, #1
 800a776:	60f9      	str	r1, [r7, #12]
 800a778:	7812      	ldrb	r2, [r2, #0]
 800a77a:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	1e5a      	subs	r2, r3, #1
 800a780:	71fa      	strb	r2, [r7, #7]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1f2      	bne.n	800a76c <copy_block_nn+0x10>
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr

0800a792 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	4053      	eors	r3, r2
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	7819      	ldrb	r1, [r3, #0]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	781a      	ldrb	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	404a      	eors	r2, r1
 800a7be:	b2d2      	uxtb	r2, r2
 800a7c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	7819      	ldrb	r1, [r3, #0]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	3302      	adds	r3, #2
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	3302      	adds	r3, #2
 800a7d2:	404a      	eors	r2, r1
 800a7d4:	b2d2      	uxtb	r2, r2
 800a7d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3303      	adds	r3, #3
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	3303      	adds	r3, #3
 800a7e2:	781a      	ldrb	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3303      	adds	r3, #3
 800a7e8:	404a      	eors	r2, r1
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	7819      	ldrb	r1, [r3, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	781a      	ldrb	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	404a      	eors	r2, r1
 800a800:	b2d2      	uxtb	r2, r2
 800a802:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3305      	adds	r3, #5
 800a808:	7819      	ldrb	r1, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	3305      	adds	r3, #5
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3305      	adds	r3, #5
 800a814:	404a      	eors	r2, r1
 800a816:	b2d2      	uxtb	r2, r2
 800a818:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3306      	adds	r3, #6
 800a81e:	7819      	ldrb	r1, [r3, #0]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	3306      	adds	r3, #6
 800a824:	781a      	ldrb	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3306      	adds	r3, #6
 800a82a:	404a      	eors	r2, r1
 800a82c:	b2d2      	uxtb	r2, r2
 800a82e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3307      	adds	r3, #7
 800a834:	7819      	ldrb	r1, [r3, #0]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	3307      	adds	r3, #7
 800a83a:	781a      	ldrb	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3307      	adds	r3, #7
 800a840:	404a      	eors	r2, r1
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3308      	adds	r3, #8
 800a84a:	7819      	ldrb	r1, [r3, #0]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	781a      	ldrb	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	3308      	adds	r3, #8
 800a856:	404a      	eors	r2, r1
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3309      	adds	r3, #9
 800a860:	7819      	ldrb	r1, [r3, #0]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	3309      	adds	r3, #9
 800a866:	781a      	ldrb	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3309      	adds	r3, #9
 800a86c:	404a      	eors	r2, r1
 800a86e:	b2d2      	uxtb	r2, r2
 800a870:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	330a      	adds	r3, #10
 800a876:	7819      	ldrb	r1, [r3, #0]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	330a      	adds	r3, #10
 800a87c:	781a      	ldrb	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	330a      	adds	r3, #10
 800a882:	404a      	eors	r2, r1
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	330b      	adds	r3, #11
 800a88c:	7819      	ldrb	r1, [r3, #0]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	330b      	adds	r3, #11
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	330b      	adds	r3, #11
 800a898:	404a      	eors	r2, r1
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	330c      	adds	r3, #12
 800a8a2:	7819      	ldrb	r1, [r3, #0]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	330c      	adds	r3, #12
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	330c      	adds	r3, #12
 800a8ae:	404a      	eors	r2, r1
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	330d      	adds	r3, #13
 800a8b8:	7819      	ldrb	r1, [r3, #0]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	330d      	adds	r3, #13
 800a8be:	781a      	ldrb	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	330d      	adds	r3, #13
 800a8c4:	404a      	eors	r2, r1
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	330e      	adds	r3, #14
 800a8ce:	7819      	ldrb	r1, [r3, #0]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	330e      	adds	r3, #14
 800a8d4:	781a      	ldrb	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	330e      	adds	r3, #14
 800a8da:	404a      	eors	r2, r1
 800a8dc:	b2d2      	uxtb	r2, r2
 800a8de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	330f      	adds	r3, #15
 800a8e4:	7819      	ldrb	r1, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	330f      	adds	r3, #15
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	330f      	adds	r3, #15
 800a8f0:	404a      	eors	r2, r1
 800a8f2:	b2d2      	uxtb	r2, r2
 800a8f4:	701a      	strb	r2, [r3, #0]
#endif
}
 800a8f6:	bf00      	nop
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	4053      	eors	r3, r2
 800a916:	b2da      	uxtb	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	3301      	adds	r3, #1
 800a920:	7819      	ldrb	r1, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3301      	adds	r3, #1
 800a926:	781a      	ldrb	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3301      	adds	r3, #1
 800a92c:	404a      	eors	r2, r1
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	3302      	adds	r3, #2
 800a936:	7819      	ldrb	r1, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3302      	adds	r3, #2
 800a93c:	781a      	ldrb	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3302      	adds	r3, #2
 800a942:	404a      	eors	r2, r1
 800a944:	b2d2      	uxtb	r2, r2
 800a946:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	3303      	adds	r3, #3
 800a94c:	7819      	ldrb	r1, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3303      	adds	r3, #3
 800a952:	781a      	ldrb	r2, [r3, #0]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3303      	adds	r3, #3
 800a958:	404a      	eors	r2, r1
 800a95a:	b2d2      	uxtb	r2, r2
 800a95c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3304      	adds	r3, #4
 800a962:	7819      	ldrb	r1, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3304      	adds	r3, #4
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3304      	adds	r3, #4
 800a96e:	404a      	eors	r2, r1
 800a970:	b2d2      	uxtb	r2, r2
 800a972:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	3305      	adds	r3, #5
 800a978:	7819      	ldrb	r1, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3305      	adds	r3, #5
 800a97e:	781a      	ldrb	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3305      	adds	r3, #5
 800a984:	404a      	eors	r2, r1
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	3306      	adds	r3, #6
 800a98e:	7819      	ldrb	r1, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3306      	adds	r3, #6
 800a994:	781a      	ldrb	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3306      	adds	r3, #6
 800a99a:	404a      	eors	r2, r1
 800a99c:	b2d2      	uxtb	r2, r2
 800a99e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	3307      	adds	r3, #7
 800a9a4:	7819      	ldrb	r1, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	3307      	adds	r3, #7
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3307      	adds	r3, #7
 800a9b0:	404a      	eors	r2, r1
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	7819      	ldrb	r1, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	781a      	ldrb	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	404a      	eors	r2, r1
 800a9c8:	b2d2      	uxtb	r2, r2
 800a9ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	3309      	adds	r3, #9
 800a9d0:	7819      	ldrb	r1, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3309      	adds	r3, #9
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3309      	adds	r3, #9
 800a9dc:	404a      	eors	r2, r1
 800a9de:	b2d2      	uxtb	r2, r2
 800a9e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	330a      	adds	r3, #10
 800a9e6:	7819      	ldrb	r1, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	330a      	adds	r3, #10
 800a9ec:	781a      	ldrb	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	330a      	adds	r3, #10
 800a9f2:	404a      	eors	r2, r1
 800a9f4:	b2d2      	uxtb	r2, r2
 800a9f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	330b      	adds	r3, #11
 800a9fc:	7819      	ldrb	r1, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	330b      	adds	r3, #11
 800aa02:	781a      	ldrb	r2, [r3, #0]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	330b      	adds	r3, #11
 800aa08:	404a      	eors	r2, r1
 800aa0a:	b2d2      	uxtb	r2, r2
 800aa0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	330c      	adds	r3, #12
 800aa12:	7819      	ldrb	r1, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	330c      	adds	r3, #12
 800aa18:	781a      	ldrb	r2, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	404a      	eors	r2, r1
 800aa20:	b2d2      	uxtb	r2, r2
 800aa22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	330d      	adds	r3, #13
 800aa28:	7819      	ldrb	r1, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	330d      	adds	r3, #13
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	330d      	adds	r3, #13
 800aa34:	404a      	eors	r2, r1
 800aa36:	b2d2      	uxtb	r2, r2
 800aa38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	330e      	adds	r3, #14
 800aa3e:	7819      	ldrb	r1, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	330e      	adds	r3, #14
 800aa44:	781a      	ldrb	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	330e      	adds	r3, #14
 800aa4a:	404a      	eors	r2, r1
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	330f      	adds	r3, #15
 800aa54:	7819      	ldrb	r1, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	330f      	adds	r3, #15
 800aa5a:	781a      	ldrb	r2, [r3, #0]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	330f      	adds	r3, #15
 800aa60:	404a      	eors	r2, r1
 800aa62:	b2d2      	uxtb	r2, r2
 800aa64:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800aa66:	bf00      	nop
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bc80      	pop	{r7}
 800aa6e:	4770      	bx	lr

0800aa70 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff fe88 	bl	800a792 <xor_block>
}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4b48      	ldr	r3, [pc, #288]	; (800abbc <shift_sub_rows+0x130>)
 800aa9c:	5c9a      	ldrb	r2, [r3, r2]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	701a      	strb	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	3304      	adds	r3, #4
 800aaae:	4a43      	ldr	r2, [pc, #268]	; (800abbc <shift_sub_rows+0x130>)
 800aab0:	5c52      	ldrb	r2, [r2, r1]
 800aab2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3308      	adds	r3, #8
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	4619      	mov	r1, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3308      	adds	r3, #8
 800aac0:	4a3e      	ldr	r2, [pc, #248]	; (800abbc <shift_sub_rows+0x130>)
 800aac2:	5c52      	ldrb	r2, [r2, r1]
 800aac4:	701a      	strb	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	330c      	adds	r3, #12
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	4619      	mov	r1, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	330c      	adds	r3, #12
 800aad2:	4a3a      	ldr	r2, [pc, #232]	; (800abbc <shift_sub_rows+0x130>)
 800aad4:	5c52      	ldrb	r2, [r2, r1]
 800aad6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	785b      	ldrb	r3, [r3, #1]
 800aadc:	73fb      	strb	r3, [r7, #15]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3305      	adds	r3, #5
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	4619      	mov	r1, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3301      	adds	r3, #1
 800aaea:	4a34      	ldr	r2, [pc, #208]	; (800abbc <shift_sub_rows+0x130>)
 800aaec:	5c52      	ldrb	r2, [r2, r1]
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	3309      	adds	r3, #9
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3305      	adds	r3, #5
 800aafc:	4a2f      	ldr	r2, [pc, #188]	; (800abbc <shift_sub_rows+0x130>)
 800aafe:	5c52      	ldrb	r2, [r2, r1]
 800ab00:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	330d      	adds	r3, #13
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	4619      	mov	r1, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3309      	adds	r3, #9
 800ab0e:	4a2b      	ldr	r2, [pc, #172]	; (800abbc <shift_sub_rows+0x130>)
 800ab10:	5c52      	ldrb	r2, [r2, r1]
 800ab12:	701a      	strb	r2, [r3, #0]
 800ab14:	7bfa      	ldrb	r2, [r7, #15]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	330d      	adds	r3, #13
 800ab1a:	4928      	ldr	r1, [pc, #160]	; (800abbc <shift_sub_rows+0x130>)
 800ab1c:	5c8a      	ldrb	r2, [r1, r2]
 800ab1e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	789b      	ldrb	r3, [r3, #2]
 800ab24:	73fb      	strb	r3, [r7, #15]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	330a      	adds	r3, #10
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3302      	adds	r3, #2
 800ab32:	4a22      	ldr	r2, [pc, #136]	; (800abbc <shift_sub_rows+0x130>)
 800ab34:	5c52      	ldrb	r2, [r2, r1]
 800ab36:	701a      	strb	r2, [r3, #0]
 800ab38:	7bfa      	ldrb	r2, [r7, #15]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	330a      	adds	r3, #10
 800ab3e:	491f      	ldr	r1, [pc, #124]	; (800abbc <shift_sub_rows+0x130>)
 800ab40:	5c8a      	ldrb	r2, [r1, r2]
 800ab42:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	799b      	ldrb	r3, [r3, #6]
 800ab48:	73fb      	strb	r3, [r7, #15]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	330e      	adds	r3, #14
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	4619      	mov	r1, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3306      	adds	r3, #6
 800ab56:	4a19      	ldr	r2, [pc, #100]	; (800abbc <shift_sub_rows+0x130>)
 800ab58:	5c52      	ldrb	r2, [r2, r1]
 800ab5a:	701a      	strb	r2, [r3, #0]
 800ab5c:	7bfa      	ldrb	r2, [r7, #15]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	330e      	adds	r3, #14
 800ab62:	4916      	ldr	r1, [pc, #88]	; (800abbc <shift_sub_rows+0x130>)
 800ab64:	5c8a      	ldrb	r2, [r1, r2]
 800ab66:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	7bdb      	ldrb	r3, [r3, #15]
 800ab6c:	73fb      	strb	r3, [r7, #15]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	330b      	adds	r3, #11
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	4619      	mov	r1, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	330f      	adds	r3, #15
 800ab7a:	4a10      	ldr	r2, [pc, #64]	; (800abbc <shift_sub_rows+0x130>)
 800ab7c:	5c52      	ldrb	r2, [r2, r1]
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3307      	adds	r3, #7
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	4619      	mov	r1, r3
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	330b      	adds	r3, #11
 800ab8c:	4a0b      	ldr	r2, [pc, #44]	; (800abbc <shift_sub_rows+0x130>)
 800ab8e:	5c52      	ldrb	r2, [r2, r1]
 800ab90:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3303      	adds	r3, #3
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3307      	adds	r3, #7
 800ab9e:	4a07      	ldr	r2, [pc, #28]	; (800abbc <shift_sub_rows+0x130>)
 800aba0:	5c52      	ldrb	r2, [r2, r1]
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	7bfa      	ldrb	r2, [r7, #15]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3303      	adds	r3, #3
 800abaa:	4904      	ldr	r1, [pc, #16]	; (800abbc <shift_sub_rows+0x130>)
 800abac:	5c8a      	ldrb	r2, [r1, r2]
 800abae:	701a      	strb	r2, [r3, #0]
}
 800abb0:	bf00      	nop
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bc80      	pop	{r7}
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	080124b4 	.word	0x080124b4

0800abc0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800abc8:	f107 0308 	add.w	r3, r7, #8
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fd6b 	bl	800a6aa <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800abd4:	7a3b      	ldrb	r3, [r7, #8]
 800abd6:	461a      	mov	r2, r3
 800abd8:	4b9a      	ldr	r3, [pc, #616]	; (800ae44 <mix_sub_columns+0x284>)
 800abda:	5c9a      	ldrb	r2, [r3, r2]
 800abdc:	7b7b      	ldrb	r3, [r7, #13]
 800abde:	4619      	mov	r1, r3
 800abe0:	4b99      	ldr	r3, [pc, #612]	; (800ae48 <mix_sub_columns+0x288>)
 800abe2:	5c5b      	ldrb	r3, [r3, r1]
 800abe4:	4053      	eors	r3, r2
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	7cbb      	ldrb	r3, [r7, #18]
 800abea:	4619      	mov	r1, r3
 800abec:	4b97      	ldr	r3, [pc, #604]	; (800ae4c <mix_sub_columns+0x28c>)
 800abee:	5c5b      	ldrb	r3, [r3, r1]
 800abf0:	4053      	eors	r3, r2
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	4619      	mov	r1, r3
 800abf8:	4b94      	ldr	r3, [pc, #592]	; (800ae4c <mix_sub_columns+0x28c>)
 800abfa:	5c5b      	ldrb	r3, [r3, r1]
 800abfc:	4053      	eors	r3, r2
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ac04:	7a3b      	ldrb	r3, [r7, #8]
 800ac06:	461a      	mov	r2, r3
 800ac08:	4b90      	ldr	r3, [pc, #576]	; (800ae4c <mix_sub_columns+0x28c>)
 800ac0a:	5c9a      	ldrb	r2, [r3, r2]
 800ac0c:	7b7b      	ldrb	r3, [r7, #13]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4b8c      	ldr	r3, [pc, #560]	; (800ae44 <mix_sub_columns+0x284>)
 800ac12:	5c5b      	ldrb	r3, [r3, r1]
 800ac14:	4053      	eors	r3, r2
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	7cbb      	ldrb	r3, [r7, #18]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4b8a      	ldr	r3, [pc, #552]	; (800ae48 <mix_sub_columns+0x288>)
 800ac1e:	5c5b      	ldrb	r3, [r3, r1]
 800ac20:	4053      	eors	r3, r2
 800ac22:	b2d9      	uxtb	r1, r3
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	461a      	mov	r2, r3
 800ac28:	4b88      	ldr	r3, [pc, #544]	; (800ae4c <mix_sub_columns+0x28c>)
 800ac2a:	5c9a      	ldrb	r2, [r3, r2]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	404a      	eors	r2, r1
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ac36:	7a3b      	ldrb	r3, [r7, #8]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4b84      	ldr	r3, [pc, #528]	; (800ae4c <mix_sub_columns+0x28c>)
 800ac3c:	5c9a      	ldrb	r2, [r3, r2]
 800ac3e:	7b7b      	ldrb	r3, [r7, #13]
 800ac40:	4619      	mov	r1, r3
 800ac42:	4b82      	ldr	r3, [pc, #520]	; (800ae4c <mix_sub_columns+0x28c>)
 800ac44:	5c5b      	ldrb	r3, [r3, r1]
 800ac46:	4053      	eors	r3, r2
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	7cbb      	ldrb	r3, [r7, #18]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4b7d      	ldr	r3, [pc, #500]	; (800ae44 <mix_sub_columns+0x284>)
 800ac50:	5c5b      	ldrb	r3, [r3, r1]
 800ac52:	4053      	eors	r3, r2
 800ac54:	b2d9      	uxtb	r1, r3
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b7b      	ldr	r3, [pc, #492]	; (800ae48 <mix_sub_columns+0x288>)
 800ac5c:	5c9a      	ldrb	r2, [r3, r2]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3302      	adds	r3, #2
 800ac62:	404a      	eors	r2, r1
 800ac64:	b2d2      	uxtb	r2, r2
 800ac66:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ac68:	7a3b      	ldrb	r3, [r7, #8]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	4b76      	ldr	r3, [pc, #472]	; (800ae48 <mix_sub_columns+0x288>)
 800ac6e:	5c9a      	ldrb	r2, [r3, r2]
 800ac70:	7b7b      	ldrb	r3, [r7, #13]
 800ac72:	4619      	mov	r1, r3
 800ac74:	4b75      	ldr	r3, [pc, #468]	; (800ae4c <mix_sub_columns+0x28c>)
 800ac76:	5c5b      	ldrb	r3, [r3, r1]
 800ac78:	4053      	eors	r3, r2
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	7cbb      	ldrb	r3, [r7, #18]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4b72      	ldr	r3, [pc, #456]	; (800ae4c <mix_sub_columns+0x28c>)
 800ac82:	5c5b      	ldrb	r3, [r3, r1]
 800ac84:	4053      	eors	r3, r2
 800ac86:	b2d9      	uxtb	r1, r3
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	4b6d      	ldr	r3, [pc, #436]	; (800ae44 <mix_sub_columns+0x284>)
 800ac8e:	5c9a      	ldrb	r2, [r3, r2]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	3303      	adds	r3, #3
 800ac94:	404a      	eors	r2, r1
 800ac96:	b2d2      	uxtb	r2, r2
 800ac98:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ac9a:	7b3b      	ldrb	r3, [r7, #12]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4b69      	ldr	r3, [pc, #420]	; (800ae44 <mix_sub_columns+0x284>)
 800aca0:	5c9a      	ldrb	r2, [r3, r2]
 800aca2:	7c7b      	ldrb	r3, [r7, #17]
 800aca4:	4619      	mov	r1, r3
 800aca6:	4b68      	ldr	r3, [pc, #416]	; (800ae48 <mix_sub_columns+0x288>)
 800aca8:	5c5b      	ldrb	r3, [r3, r1]
 800acaa:	4053      	eors	r3, r2
 800acac:	b2da      	uxtb	r2, r3
 800acae:	7dbb      	ldrb	r3, [r7, #22]
 800acb0:	4619      	mov	r1, r3
 800acb2:	4b66      	ldr	r3, [pc, #408]	; (800ae4c <mix_sub_columns+0x28c>)
 800acb4:	5c5b      	ldrb	r3, [r3, r1]
 800acb6:	4053      	eors	r3, r2
 800acb8:	b2d9      	uxtb	r1, r3
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	461a      	mov	r2, r3
 800acbe:	4b63      	ldr	r3, [pc, #396]	; (800ae4c <mix_sub_columns+0x28c>)
 800acc0:	5c9a      	ldrb	r2, [r3, r2]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3304      	adds	r3, #4
 800acc6:	404a      	eors	r2, r1
 800acc8:	b2d2      	uxtb	r2, r2
 800acca:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800accc:	7b3b      	ldrb	r3, [r7, #12]
 800acce:	461a      	mov	r2, r3
 800acd0:	4b5e      	ldr	r3, [pc, #376]	; (800ae4c <mix_sub_columns+0x28c>)
 800acd2:	5c9a      	ldrb	r2, [r3, r2]
 800acd4:	7c7b      	ldrb	r3, [r7, #17]
 800acd6:	4619      	mov	r1, r3
 800acd8:	4b5a      	ldr	r3, [pc, #360]	; (800ae44 <mix_sub_columns+0x284>)
 800acda:	5c5b      	ldrb	r3, [r3, r1]
 800acdc:	4053      	eors	r3, r2
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	7dbb      	ldrb	r3, [r7, #22]
 800ace2:	4619      	mov	r1, r3
 800ace4:	4b58      	ldr	r3, [pc, #352]	; (800ae48 <mix_sub_columns+0x288>)
 800ace6:	5c5b      	ldrb	r3, [r3, r1]
 800ace8:	4053      	eors	r3, r2
 800acea:	b2d9      	uxtb	r1, r3
 800acec:	7afb      	ldrb	r3, [r7, #11]
 800acee:	461a      	mov	r2, r3
 800acf0:	4b56      	ldr	r3, [pc, #344]	; (800ae4c <mix_sub_columns+0x28c>)
 800acf2:	5c9a      	ldrb	r2, [r3, r2]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3305      	adds	r3, #5
 800acf8:	404a      	eors	r2, r1
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800acfe:	7b3b      	ldrb	r3, [r7, #12]
 800ad00:	461a      	mov	r2, r3
 800ad02:	4b52      	ldr	r3, [pc, #328]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad04:	5c9a      	ldrb	r2, [r3, r2]
 800ad06:	7c7b      	ldrb	r3, [r7, #17]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4b50      	ldr	r3, [pc, #320]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad0c:	5c5b      	ldrb	r3, [r3, r1]
 800ad0e:	4053      	eors	r3, r2
 800ad10:	b2da      	uxtb	r2, r3
 800ad12:	7dbb      	ldrb	r3, [r7, #22]
 800ad14:	4619      	mov	r1, r3
 800ad16:	4b4b      	ldr	r3, [pc, #300]	; (800ae44 <mix_sub_columns+0x284>)
 800ad18:	5c5b      	ldrb	r3, [r3, r1]
 800ad1a:	4053      	eors	r3, r2
 800ad1c:	b2d9      	uxtb	r1, r3
 800ad1e:	7afb      	ldrb	r3, [r7, #11]
 800ad20:	461a      	mov	r2, r3
 800ad22:	4b49      	ldr	r3, [pc, #292]	; (800ae48 <mix_sub_columns+0x288>)
 800ad24:	5c9a      	ldrb	r2, [r3, r2]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3306      	adds	r3, #6
 800ad2a:	404a      	eors	r2, r1
 800ad2c:	b2d2      	uxtb	r2, r2
 800ad2e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ad30:	7b3b      	ldrb	r3, [r7, #12]
 800ad32:	461a      	mov	r2, r3
 800ad34:	4b44      	ldr	r3, [pc, #272]	; (800ae48 <mix_sub_columns+0x288>)
 800ad36:	5c9a      	ldrb	r2, [r3, r2]
 800ad38:	7c7b      	ldrb	r3, [r7, #17]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4b43      	ldr	r3, [pc, #268]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad3e:	5c5b      	ldrb	r3, [r3, r1]
 800ad40:	4053      	eors	r3, r2
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	7dbb      	ldrb	r3, [r7, #22]
 800ad46:	4619      	mov	r1, r3
 800ad48:	4b40      	ldr	r3, [pc, #256]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad4a:	5c5b      	ldrb	r3, [r3, r1]
 800ad4c:	4053      	eors	r3, r2
 800ad4e:	b2d9      	uxtb	r1, r3
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	461a      	mov	r2, r3
 800ad54:	4b3b      	ldr	r3, [pc, #236]	; (800ae44 <mix_sub_columns+0x284>)
 800ad56:	5c9a      	ldrb	r2, [r3, r2]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3307      	adds	r3, #7
 800ad5c:	404a      	eors	r2, r1
 800ad5e:	b2d2      	uxtb	r2, r2
 800ad60:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ad62:	7c3b      	ldrb	r3, [r7, #16]
 800ad64:	461a      	mov	r2, r3
 800ad66:	4b37      	ldr	r3, [pc, #220]	; (800ae44 <mix_sub_columns+0x284>)
 800ad68:	5c9a      	ldrb	r2, [r3, r2]
 800ad6a:	7d7b      	ldrb	r3, [r7, #21]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4b36      	ldr	r3, [pc, #216]	; (800ae48 <mix_sub_columns+0x288>)
 800ad70:	5c5b      	ldrb	r3, [r3, r1]
 800ad72:	4053      	eors	r3, r2
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	7abb      	ldrb	r3, [r7, #10]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4b34      	ldr	r3, [pc, #208]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad7c:	5c5b      	ldrb	r3, [r3, r1]
 800ad7e:	4053      	eors	r3, r2
 800ad80:	b2d9      	uxtb	r1, r3
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	461a      	mov	r2, r3
 800ad86:	4b31      	ldr	r3, [pc, #196]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad88:	5c9a      	ldrb	r2, [r3, r2]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	404a      	eors	r2, r1
 800ad90:	b2d2      	uxtb	r2, r2
 800ad92:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ad94:	7c3b      	ldrb	r3, [r7, #16]
 800ad96:	461a      	mov	r2, r3
 800ad98:	4b2c      	ldr	r3, [pc, #176]	; (800ae4c <mix_sub_columns+0x28c>)
 800ad9a:	5c9a      	ldrb	r2, [r3, r2]
 800ad9c:	7d7b      	ldrb	r3, [r7, #21]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4b28      	ldr	r3, [pc, #160]	; (800ae44 <mix_sub_columns+0x284>)
 800ada2:	5c5b      	ldrb	r3, [r3, r1]
 800ada4:	4053      	eors	r3, r2
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	7abb      	ldrb	r3, [r7, #10]
 800adaa:	4619      	mov	r1, r3
 800adac:	4b26      	ldr	r3, [pc, #152]	; (800ae48 <mix_sub_columns+0x288>)
 800adae:	5c5b      	ldrb	r3, [r3, r1]
 800adb0:	4053      	eors	r3, r2
 800adb2:	b2d9      	uxtb	r1, r3
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	461a      	mov	r2, r3
 800adb8:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <mix_sub_columns+0x28c>)
 800adba:	5c9a      	ldrb	r2, [r3, r2]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3309      	adds	r3, #9
 800adc0:	404a      	eors	r2, r1
 800adc2:	b2d2      	uxtb	r2, r2
 800adc4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800adc6:	7c3b      	ldrb	r3, [r7, #16]
 800adc8:	461a      	mov	r2, r3
 800adca:	4b20      	ldr	r3, [pc, #128]	; (800ae4c <mix_sub_columns+0x28c>)
 800adcc:	5c9a      	ldrb	r2, [r3, r2]
 800adce:	7d7b      	ldrb	r3, [r7, #21]
 800add0:	4619      	mov	r1, r3
 800add2:	4b1e      	ldr	r3, [pc, #120]	; (800ae4c <mix_sub_columns+0x28c>)
 800add4:	5c5b      	ldrb	r3, [r3, r1]
 800add6:	4053      	eors	r3, r2
 800add8:	b2da      	uxtb	r2, r3
 800adda:	7abb      	ldrb	r3, [r7, #10]
 800addc:	4619      	mov	r1, r3
 800adde:	4b19      	ldr	r3, [pc, #100]	; (800ae44 <mix_sub_columns+0x284>)
 800ade0:	5c5b      	ldrb	r3, [r3, r1]
 800ade2:	4053      	eors	r3, r2
 800ade4:	b2d9      	uxtb	r1, r3
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	461a      	mov	r2, r3
 800adea:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <mix_sub_columns+0x288>)
 800adec:	5c9a      	ldrb	r2, [r3, r2]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	330a      	adds	r3, #10
 800adf2:	404a      	eors	r2, r1
 800adf4:	b2d2      	uxtb	r2, r2
 800adf6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800adf8:	7c3b      	ldrb	r3, [r7, #16]
 800adfa:	461a      	mov	r2, r3
 800adfc:	4b12      	ldr	r3, [pc, #72]	; (800ae48 <mix_sub_columns+0x288>)
 800adfe:	5c9a      	ldrb	r2, [r3, r2]
 800ae00:	7d7b      	ldrb	r3, [r7, #21]
 800ae02:	4619      	mov	r1, r3
 800ae04:	4b11      	ldr	r3, [pc, #68]	; (800ae4c <mix_sub_columns+0x28c>)
 800ae06:	5c5b      	ldrb	r3, [r3, r1]
 800ae08:	4053      	eors	r3, r2
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	7abb      	ldrb	r3, [r7, #10]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4b0e      	ldr	r3, [pc, #56]	; (800ae4c <mix_sub_columns+0x28c>)
 800ae12:	5c5b      	ldrb	r3, [r3, r1]
 800ae14:	4053      	eors	r3, r2
 800ae16:	b2d9      	uxtb	r1, r3
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <mix_sub_columns+0x284>)
 800ae1e:	5c9a      	ldrb	r2, [r3, r2]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	330b      	adds	r3, #11
 800ae24:	404a      	eors	r2, r1
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ae2a:	7d3b      	ldrb	r3, [r7, #20]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <mix_sub_columns+0x284>)
 800ae30:	5c9a      	ldrb	r2, [r3, r2]
 800ae32:	7a7b      	ldrb	r3, [r7, #9]
 800ae34:	4619      	mov	r1, r3
 800ae36:	4b04      	ldr	r3, [pc, #16]	; (800ae48 <mix_sub_columns+0x288>)
 800ae38:	5c5b      	ldrb	r3, [r3, r1]
 800ae3a:	4053      	eors	r3, r2
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	4619      	mov	r1, r3
 800ae42:	e005      	b.n	800ae50 <mix_sub_columns+0x290>
 800ae44:	080125b4 	.word	0x080125b4
 800ae48:	080126b4 	.word	0x080126b4
 800ae4c:	080124b4 	.word	0x080124b4
 800ae50:	4b2d      	ldr	r3, [pc, #180]	; (800af08 <mix_sub_columns+0x348>)
 800ae52:	5c5b      	ldrb	r3, [r3, r1]
 800ae54:	4053      	eors	r3, r2
 800ae56:	b2d9      	uxtb	r1, r3
 800ae58:	7cfb      	ldrb	r3, [r7, #19]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <mix_sub_columns+0x348>)
 800ae5e:	5c9a      	ldrb	r2, [r3, r2]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	330c      	adds	r3, #12
 800ae64:	404a      	eors	r2, r1
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ae6a:	7d3b      	ldrb	r3, [r7, #20]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4b26      	ldr	r3, [pc, #152]	; (800af08 <mix_sub_columns+0x348>)
 800ae70:	5c9a      	ldrb	r2, [r3, r2]
 800ae72:	7a7b      	ldrb	r3, [r7, #9]
 800ae74:	4619      	mov	r1, r3
 800ae76:	4b25      	ldr	r3, [pc, #148]	; (800af0c <mix_sub_columns+0x34c>)
 800ae78:	5c5b      	ldrb	r3, [r3, r1]
 800ae7a:	4053      	eors	r3, r2
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	4619      	mov	r1, r3
 800ae82:	4b23      	ldr	r3, [pc, #140]	; (800af10 <mix_sub_columns+0x350>)
 800ae84:	5c5b      	ldrb	r3, [r3, r1]
 800ae86:	4053      	eors	r3, r2
 800ae88:	b2d9      	uxtb	r1, r3
 800ae8a:	7cfb      	ldrb	r3, [r7, #19]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	4b1e      	ldr	r3, [pc, #120]	; (800af08 <mix_sub_columns+0x348>)
 800ae90:	5c9a      	ldrb	r2, [r3, r2]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	330d      	adds	r3, #13
 800ae96:	404a      	eors	r2, r1
 800ae98:	b2d2      	uxtb	r2, r2
 800ae9a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ae9c:	7d3b      	ldrb	r3, [r7, #20]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4b19      	ldr	r3, [pc, #100]	; (800af08 <mix_sub_columns+0x348>)
 800aea2:	5c9a      	ldrb	r2, [r3, r2]
 800aea4:	7a7b      	ldrb	r3, [r7, #9]
 800aea6:	4619      	mov	r1, r3
 800aea8:	4b17      	ldr	r3, [pc, #92]	; (800af08 <mix_sub_columns+0x348>)
 800aeaa:	5c5b      	ldrb	r3, [r3, r1]
 800aeac:	4053      	eors	r3, r2
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4b15      	ldr	r3, [pc, #84]	; (800af0c <mix_sub_columns+0x34c>)
 800aeb6:	5c5b      	ldrb	r3, [r3, r1]
 800aeb8:	4053      	eors	r3, r2
 800aeba:	b2d9      	uxtb	r1, r3
 800aebc:	7cfb      	ldrb	r3, [r7, #19]
 800aebe:	461a      	mov	r2, r3
 800aec0:	4b13      	ldr	r3, [pc, #76]	; (800af10 <mix_sub_columns+0x350>)
 800aec2:	5c9a      	ldrb	r2, [r3, r2]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	330e      	adds	r3, #14
 800aec8:	404a      	eors	r2, r1
 800aeca:	b2d2      	uxtb	r2, r2
 800aecc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800aece:	7d3b      	ldrb	r3, [r7, #20]
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <mix_sub_columns+0x350>)
 800aed4:	5c9a      	ldrb	r2, [r3, r2]
 800aed6:	7a7b      	ldrb	r3, [r7, #9]
 800aed8:	4619      	mov	r1, r3
 800aeda:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <mix_sub_columns+0x348>)
 800aedc:	5c5b      	ldrb	r3, [r3, r1]
 800aede:	4053      	eors	r3, r2
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	4619      	mov	r1, r3
 800aee6:	4b08      	ldr	r3, [pc, #32]	; (800af08 <mix_sub_columns+0x348>)
 800aee8:	5c5b      	ldrb	r3, [r3, r1]
 800aeea:	4053      	eors	r3, r2
 800aeec:	b2d9      	uxtb	r1, r3
 800aeee:	7cfb      	ldrb	r3, [r7, #19]
 800aef0:	461a      	mov	r2, r3
 800aef2:	4b06      	ldr	r3, [pc, #24]	; (800af0c <mix_sub_columns+0x34c>)
 800aef4:	5c9a      	ldrb	r2, [r3, r2]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	330f      	adds	r3, #15
 800aefa:	404a      	eors	r2, r1
 800aefc:	b2d2      	uxtb	r2, r2
 800aefe:	701a      	strb	r2, [r3, #0]
  }
 800af00:	bf00      	nop
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	080124b4 	.word	0x080124b4
 800af0c:	080125b4 	.word	0x080125b4
 800af10:	080126b4 	.word	0x080126b4

0800af14 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	460b      	mov	r3, r1
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800af22:	7afb      	ldrb	r3, [r7, #11]
 800af24:	3b10      	subs	r3, #16
 800af26:	2b10      	cmp	r3, #16
 800af28:	bf8c      	ite	hi
 800af2a:	2201      	movhi	r2, #1
 800af2c:	2200      	movls	r2, #0
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	2a00      	cmp	r2, #0
 800af32:	d10d      	bne.n	800af50 <aes_set_key+0x3c>
 800af34:	2201      	movs	r2, #1
 800af36:	fa02 f303 	lsl.w	r3, r2, r3
 800af3a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800af3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af42:	2b00      	cmp	r3, #0
 800af44:	bf14      	ite	ne
 800af46:	2301      	movne	r3, #1
 800af48:	2300      	moveq	r3, #0
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d105      	bne.n	800af5c <aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800af58:	23ff      	movs	r3, #255	; 0xff
 800af5a:	e0b2      	b.n	800b0c2 <aes_set_key+0x1ae>
        break;
 800af5c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7afa      	ldrb	r2, [r7, #11]
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fbf9 	bl	800a75c <copy_block_nn>
    hi = (keylen + 28) << 2;
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	331c      	adds	r3, #28
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800af74:	7c7b      	ldrb	r3, [r7, #17]
 800af76:	091b      	lsrs	r3, r3, #4
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	3b01      	subs	r3, #1
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	75fb      	strb	r3, [r7, #23]
 800af88:	2301      	movs	r3, #1
 800af8a:	75bb      	strb	r3, [r7, #22]
 800af8c:	e093      	b.n	800b0b6 <aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	3b04      	subs	r3, #4
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	5cd3      	ldrb	r3, [r2, r3]
 800af96:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800af98:	7dfb      	ldrb	r3, [r7, #23]
 800af9a:	3b03      	subs	r3, #3
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	5cd3      	ldrb	r3, [r2, r3]
 800afa0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	3b02      	subs	r3, #2
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	5cd3      	ldrb	r3, [r2, r3]
 800afaa:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	3b01      	subs	r3, #1
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	5cd3      	ldrb	r3, [r2, r3]
 800afb4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	7afa      	ldrb	r2, [r7, #11]
 800afba:	fbb3 f1f2 	udiv	r1, r3, r2
 800afbe:	fb02 f201 	mul.w	r2, r2, r1
 800afc2:	1a9b      	subs	r3, r3, r2
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d127      	bne.n	800b01a <aes_set_key+0x106>
        {
            tt = t0;
 800afca:	7d7b      	ldrb	r3, [r7, #21]
 800afcc:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800afce:	7d3b      	ldrb	r3, [r7, #20]
 800afd0:	4a3e      	ldr	r2, [pc, #248]	; (800b0cc <aes_set_key+0x1b8>)
 800afd2:	5cd2      	ldrb	r2, [r2, r3]
 800afd4:	7dbb      	ldrb	r3, [r7, #22]
 800afd6:	4053      	eors	r3, r2
 800afd8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800afda:	7cfb      	ldrb	r3, [r7, #19]
 800afdc:	4a3b      	ldr	r2, [pc, #236]	; (800b0cc <aes_set_key+0x1b8>)
 800afde:	5cd3      	ldrb	r3, [r2, r3]
 800afe0:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800afe2:	7cbb      	ldrb	r3, [r7, #18]
 800afe4:	4a39      	ldr	r2, [pc, #228]	; (800b0cc <aes_set_key+0x1b8>)
 800afe6:	5cd3      	ldrb	r3, [r2, r3]
 800afe8:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800afea:	7c3b      	ldrb	r3, [r7, #16]
 800afec:	4a37      	ldr	r2, [pc, #220]	; (800b0cc <aes_set_key+0x1b8>)
 800afee:	5cd3      	ldrb	r3, [r2, r3]
 800aff0:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800aff2:	7dbb      	ldrb	r3, [r7, #22]
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	b25a      	sxtb	r2, r3
 800aff8:	7dbb      	ldrb	r3, [r7, #22]
 800affa:	09db      	lsrs	r3, r3, #7
 800affc:	b2db      	uxtb	r3, r3
 800affe:	4619      	mov	r1, r3
 800b000:	0049      	lsls	r1, r1, #1
 800b002:	440b      	add	r3, r1
 800b004:	4619      	mov	r1, r3
 800b006:	00c8      	lsls	r0, r1, #3
 800b008:	4619      	mov	r1, r3
 800b00a:	4603      	mov	r3, r0
 800b00c:	440b      	add	r3, r1
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	b25b      	sxtb	r3, r3
 800b012:	4053      	eors	r3, r2
 800b014:	b25b      	sxtb	r3, r3
 800b016:	75bb      	strb	r3, [r7, #22]
 800b018:	e01c      	b.n	800b054 <aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b01a:	7afb      	ldrb	r3, [r7, #11]
 800b01c:	2b18      	cmp	r3, #24
 800b01e:	d919      	bls.n	800b054 <aes_set_key+0x140>
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	7afa      	ldrb	r2, [r7, #11]
 800b024:	fbb3 f1f2 	udiv	r1, r3, r2
 800b028:	fb02 f201 	mul.w	r2, r2, r1
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b10      	cmp	r3, #16
 800b032:	d10f      	bne.n	800b054 <aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b034:	7d7b      	ldrb	r3, [r7, #21]
 800b036:	4a25      	ldr	r2, [pc, #148]	; (800b0cc <aes_set_key+0x1b8>)
 800b038:	5cd3      	ldrb	r3, [r2, r3]
 800b03a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b03c:	7d3b      	ldrb	r3, [r7, #20]
 800b03e:	4a23      	ldr	r2, [pc, #140]	; (800b0cc <aes_set_key+0x1b8>)
 800b040:	5cd3      	ldrb	r3, [r2, r3]
 800b042:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b044:	7cfb      	ldrb	r3, [r7, #19]
 800b046:	4a21      	ldr	r2, [pc, #132]	; (800b0cc <aes_set_key+0x1b8>)
 800b048:	5cd3      	ldrb	r3, [r2, r3]
 800b04a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b04c:	7cbb      	ldrb	r3, [r7, #18]
 800b04e:	4a1f      	ldr	r2, [pc, #124]	; (800b0cc <aes_set_key+0x1b8>)
 800b050:	5cd3      	ldrb	r3, [r2, r3]
 800b052:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b054:	7dfa      	ldrb	r2, [r7, #23]
 800b056:	7afb      	ldrb	r3, [r7, #11]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b05c:	7c3b      	ldrb	r3, [r7, #16]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	5cd1      	ldrb	r1, [r2, r3]
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	7d7a      	ldrb	r2, [r7, #21]
 800b066:	404a      	eors	r2, r1
 800b068:	b2d1      	uxtb	r1, r2
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b06e:	7c3b      	ldrb	r3, [r7, #16]
 800b070:	3301      	adds	r3, #1
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	5cd1      	ldrb	r1, [r2, r3]
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	3301      	adds	r3, #1
 800b07a:	7d3a      	ldrb	r2, [r7, #20]
 800b07c:	404a      	eors	r2, r1
 800b07e:	b2d1      	uxtb	r1, r2
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b084:	7c3b      	ldrb	r3, [r7, #16]
 800b086:	3302      	adds	r3, #2
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	5cd1      	ldrb	r1, [r2, r3]
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	3302      	adds	r3, #2
 800b090:	7cfa      	ldrb	r2, [r7, #19]
 800b092:	404a      	eors	r2, r1
 800b094:	b2d1      	uxtb	r1, r2
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b09a:	7c3b      	ldrb	r3, [r7, #16]
 800b09c:	3303      	adds	r3, #3
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	5cd1      	ldrb	r1, [r2, r3]
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	3303      	adds	r3, #3
 800b0a6:	7cba      	ldrb	r2, [r7, #18]
 800b0a8:	404a      	eors	r2, r1
 800b0aa:	b2d1      	uxtb	r1, r2
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	75fb      	strb	r3, [r7, #23]
 800b0b6:	7dfa      	ldrb	r2, [r7, #23]
 800b0b8:	7c7b      	ldrb	r3, [r7, #17]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	f4ff af67 	bcc.w	800af8e <aes_set_key+0x7a>
    }
    return 0;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3718      	adds	r7, #24
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	080124b4 	.word	0x080124b4

0800b0d0 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d038      	beq.n	800b158 <aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	f107 0314 	add.w	r3, r7, #20
 800b0ec:	68f9      	ldr	r1, [r7, #12]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fc06 	bl	800a900 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0fa:	e014      	b.n	800b126 <aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff fd5d 	bl	800abc0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b10c:	0112      	lsls	r2, r2, #4
 800b10e:	441a      	add	r2, r3
 800b110:	f107 0314 	add.w	r3, r7, #20
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7ff fcaa 	bl	800aa70 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b11c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b120:	3301      	adds	r3, #1
 800b122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b12c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b130:	429a      	cmp	r2, r3
 800b132:	d3e3      	bcc.n	800b0fc <aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff fca7 	bl	800aa8c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b144:	0112      	lsls	r2, r2, #4
 800b146:	441a      	add	r2, r3
 800b148:	f107 0314 	add.w	r3, r7, #20
 800b14c:	4619      	mov	r1, r3
 800b14e:	68b8      	ldr	r0, [r7, #8]
 800b150:	f7ff fbd6 	bl	800a900 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b154:	2300      	movs	r3, #0
 800b156:	e000      	b.n	800b15a <aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b158:	23ff      	movs	r3, #255	; 0xff
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3728      	adds	r7, #40	; 0x28
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <OnCalibrateSystemWakeupTimeTimerEvent>:

/*!
* Callback indicating the end of the system wake-up time calibration
*/
static void OnCalibrateSystemWakeupTimeTimerEvent( void )
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  TimerStop( &CalibrateSystemWakeupTimeTimer );
 800b168:	4803      	ldr	r0, [pc, #12]	; (800b178 <OnCalibrateSystemWakeupTimeTimerEvent+0x14>)
 800b16a:	f005 f901 	bl	8010370 <TimerStop>
  SystemWakeupTimeCalibrated = true;
 800b16e:	4b03      	ldr	r3, [pc, #12]	; (800b17c <OnCalibrateSystemWakeupTimeTimerEvent+0x18>)
 800b170:	2201      	movs	r2, #1
 800b172:	701a      	strb	r2, [r3, #0]
}
 800b174:	bf00      	nop
 800b176:	bd80      	pop	{r7, pc}
 800b178:	2000070c 	.word	0x2000070c
 800b17c:	20000721 	.word	0x20000721

0800b180 <BoardDisableIrq>:
* \remark Interrupt should only be fully disabled once the value is 0
*/
static uint8_t IrqNestLevel = 0;

void BoardDisableIrq( void )
{
 800b180:	b480      	push	{r7}
 800b182:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b184:	b672      	cpsid	i
}
 800b186:	bf00      	nop
  __disable_irq( );
  IrqNestLevel++;
 800b188:	4b04      	ldr	r3, [pc, #16]	; (800b19c <BoardDisableIrq+0x1c>)
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	4b02      	ldr	r3, [pc, #8]	; (800b19c <BoardDisableIrq+0x1c>)
 800b192:	701a      	strb	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	46bd      	mov	sp, r7
 800b198:	bc80      	pop	{r7}
 800b19a:	4770      	bx	lr
 800b19c:	20000722 	.word	0x20000722

0800b1a0 <BoardEnableIrq>:

void BoardEnableIrq( void )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	af00      	add	r7, sp, #0
  IrqNestLevel--;
 800b1a4:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <BoardEnableIrq+0x24>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	b2da      	uxtb	r2, r3
 800b1ac:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <BoardEnableIrq+0x24>)
 800b1ae:	701a      	strb	r2, [r3, #0]
  if( IrqNestLevel == 0 )
 800b1b0:	4b04      	ldr	r3, [pc, #16]	; (800b1c4 <BoardEnableIrq+0x24>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <BoardEnableIrq+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800b1b8:	b662      	cpsie	i
}
 800b1ba:	bf00      	nop
  {
    __enable_irq( );
  }
}
 800b1bc:	bf00      	nop
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bc80      	pop	{r7}
 800b1c2:	4770      	bx	lr
 800b1c4:	20000722 	.word	0x20000722

0800b1c8 <BoardInitMcu>:
    }
  }
}

void BoardInitMcu( void )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af02      	add	r7, sp, #8
#if defined ADC_measurement
    SystemClock_Config();
#endif
  if( McuInitialized == false )
 800b1ce:	4b17      	ldr	r3, [pc, #92]	; (800b22c <BoardInitMcu+0x64>)
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	f083 0301 	eor.w	r3, r3, #1
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d006      	beq.n	800b1ea <BoardInitMcu+0x22>
    // Set the Vector Table base location at 0x3000
    SCB->VTOR = FLASH_BASE | 0x3000;
#endif
    //HAL_Init( );
    
    SystemClockConfig( );
 800b1dc:	f000 f9a0 	bl	800b520 <SystemClockConfig>
	USB_VCP_init();
	HAL_Delay( 3000 ); //wait for usb init
	DebugPrintf("USB CDC init done!\r\n");
#endif

    RtcInit( );
 800b1e0:	f001 fb5a 	bl	800c898 <RtcInit>
    
    BoardUnusedIoInit( );
 800b1e4:	f000 f8d0 	bl	800b388 <BoardUnusedIoInit>
 800b1e8:	e001      	b.n	800b1ee <BoardInitMcu+0x26>
//#warning "Commented for test!"
  }
  else
  {
    SystemClockReConfig( );
 800b1ea:	f000 fa4f 	bl	800b68c <SystemClockReConfig>
//#warning "Commented for test!"
  }

  SpiInit( &SX1276.Spi, RADIO_MOSI, RADIO_MISO, RADIO_SCLK, NC );
 800b1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	2305      	movs	r3, #5
 800b1f6:	2206      	movs	r2, #6
 800b1f8:	2107      	movs	r1, #7
 800b1fa:	480d      	ldr	r0, [pc, #52]	; (800b230 <BoardInitMcu+0x68>)
 800b1fc:	f002 f882 	bl	800d304 <SpiInit>
  SX1276IoInit( );
 800b200:	f002 fc18 	bl	800da34 <SX1276IoInit>

  if( McuInitialized == false )
 800b204:	4b09      	ldr	r3, [pc, #36]	; (800b22c <BoardInitMcu+0x64>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f083 0301 	eor.w	r3, r3, #1
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d009      	beq.n	800b226 <BoardInitMcu+0x5e>
  {
    McuInitialized = true;
 800b212:	4b06      	ldr	r3, [pc, #24]	; (800b22c <BoardInitMcu+0x64>)
 800b214:	2201      	movs	r2, #1
 800b216:	701a      	strb	r2, [r3, #0]
    if( GetBoardPowerSource( ) == BATTERY_POWER )
 800b218:	f000 fa96 	bl	800b748 <GetBoardPowerSource>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d101      	bne.n	800b226 <BoardInitMcu+0x5e>
    {
      CalibrateSystemWakeupTime( );
 800b222:	f000 fa0b 	bl	800b63c <CalibrateSystemWakeupTime>
    }

  }
}
 800b226:	bf00      	nop
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	20000720 	.word	0x20000720
 800b230:	20001294 	.word	0x20001294

0800b234 <BoardDeInitMcu>:

void BoardDeInitMcu( void )
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af02      	add	r7, sp, #8
  Gpio_t ioPin;
  
  SpiDeInit( &SX1276.Spi );
 800b23a:	4818      	ldr	r0, [pc, #96]	; (800b29c <BoardDeInitMcu+0x68>)
 800b23c:	f002 f962 	bl	800d504 <SpiDeInit>
  SX1276IoDeInit( );
 800b240:	f002 fc3e 	bl	800dac0 <SX1276IoDeInit>
  
  GpioInit( &ioPin, OSC_HSE_IN, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b244:	1d38      	adds	r0, r7, #4
 800b246:	2300      	movs	r3, #0
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	2300      	movs	r3, #0
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	2300      	movs	r3, #0
 800b250:	2203      	movs	r2, #3
 800b252:	2160      	movs	r1, #96	; 0x60
 800b254:	f000 ffe8 	bl	800c228 <GpioInit>
  GpioInit( &ioPin, OSC_HSE_OUT, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b258:	1d38      	adds	r0, r7, #4
 800b25a:	2300      	movs	r3, #0
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	2300      	movs	r3, #0
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	2203      	movs	r2, #3
 800b266:	2161      	movs	r1, #97	; 0x61
 800b268:	f000 ffde 	bl	800c228 <GpioInit>
  
  GpioInit( &ioPin, OSC_LSE_IN, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b26c:	1d38      	adds	r0, r7, #4
 800b26e:	2300      	movs	r3, #0
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	2300      	movs	r3, #0
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	2300      	movs	r3, #0
 800b278:	2200      	movs	r2, #0
 800b27a:	212e      	movs	r1, #46	; 0x2e
 800b27c:	f000 ffd4 	bl	800c228 <GpioInit>
  GpioInit( &ioPin, OSC_LSE_OUT, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b280:	1d38      	adds	r0, r7, #4
 800b282:	2300      	movs	r3, #0
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	2300      	movs	r3, #0
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	2300      	movs	r3, #0
 800b28c:	2200      	movs	r2, #0
 800b28e:	212f      	movs	r1, #47	; 0x2f
 800b290:	f000 ffca 	bl	800c228 <GpioInit>
}
 800b294:	bf00      	nop
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	20001294 	.word	0x20001294

0800b2a0 <BoardGetRandomSeed>:

uint32_t BoardGetRandomSeed( void )
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	af00      	add	r7, sp, #0
  return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
 800b2a4:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <BoardGetRandomSeed+0x1c>)
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <BoardGetRandomSeed+0x20>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	405a      	eors	r2, r3
 800b2ae:	4b05      	ldr	r3, [pc, #20]	; (800b2c4 <BoardGetRandomSeed+0x24>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4053      	eors	r3, r2
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bc80      	pop	{r7}
 800b2ba:	4770      	bx	lr
 800b2bc:	1ff80050 	.word	0x1ff80050
 800b2c0:	1ff80054 	.word	0x1ff80054
 800b2c4:	1ff80064 	.word	0x1ff80064

0800b2c8 <BoardBatteryMeasureVolage>:
#define BATTERY_SHUTDOWN_LEVEL                      3100 // mV

static uint16_t BatteryVoltage = BATTERY_MAX_LEVEL;

uint16_t BoardBatteryMeasureVolage( void )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
  //    uint16_t vdd = 0;
  //    uint16_t vref = VREFINT_CAL;
  //    uint16_t vdiv = 0;
  uint16_t batteryVoltage = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	80fb      	strh	r3, [r7, #6]
  //    batteryVoltage = vdd * ( ( float )vdiv / ( float )ADC_MAX_VALUE );
  //
  //    //                                vDiv
  //    // Divider bridge  VBAT <-> 470k -<--|-->- 470k <-> GND => vBat = 2 * vDiv
  //    batteryVoltage = 2 * batteryVoltage;
  return batteryVoltage;
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <BoardGetBatteryLevel>:
{
  return BatteryVoltage;
}

uint8_t BoardGetBatteryLevel( void )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	71fb      	strb	r3, [r7, #7]
  
  BatteryVoltage = BoardBatteryMeasureVolage( );
 800b2ea:	f7ff ffed 	bl	800b2c8 <BoardBatteryMeasureVolage>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	4b23      	ldr	r3, [pc, #140]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b2f4:	801a      	strh	r2, [r3, #0]
  
  if( GetBoardPowerSource( ) == USB_POWER )
 800b2f6:	f000 fa27 	bl	800b748 <GetBoardPowerSource>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d102      	bne.n	800b306 <BoardGetBatteryLevel+0x26>
  {
    batteryLevel = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	71fb      	strb	r3, [r7, #7]
 800b304:	e036      	b.n	800b374 <BoardGetBatteryLevel+0x94>
  }
  else
  {
    if( BatteryVoltage >= BATTERY_MAX_LEVEL )
 800b306:	4b1e      	ldr	r3, [pc, #120]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	f241 0235 	movw	r2, #4149	; 0x1035
 800b30e:	4293      	cmp	r3, r2
 800b310:	d902      	bls.n	800b318 <BoardGetBatteryLevel+0x38>
    {
      batteryLevel = 254;
 800b312:	23fe      	movs	r3, #254	; 0xfe
 800b314:	71fb      	strb	r3, [r7, #7]
 800b316:	e02d      	b.n	800b374 <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_MIN_LEVEL ) && ( BatteryVoltage < BATTERY_MAX_LEVEL ) )
 800b318:	4b19      	ldr	r3, [pc, #100]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b320:	d918      	bls.n	800b354 <BoardGetBatteryLevel+0x74>
 800b322:	4b17      	ldr	r3, [pc, #92]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	f241 0235 	movw	r2, #4149	; 0x1035
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d812      	bhi.n	800b354 <BoardGetBatteryLevel+0x74>
    {
      batteryLevel = ( ( 253 * ( BatteryVoltage - BATTERY_MIN_LEVEL ) ) / ( BATTERY_MAX_LEVEL - BATTERY_MIN_LEVEL ) ) + 1;
 800b32e:	4b14      	ldr	r3, [pc, #80]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	f5a3 6248 	sub.w	r2, r3, #3200	; 0xc80
 800b336:	4613      	mov	r3, r2
 800b338:	019b      	lsls	r3, r3, #6
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	4413      	add	r3, r2
 800b340:	4a10      	ldr	r2, [pc, #64]	; (800b384 <BoardGetBatteryLevel+0xa4>)
 800b342:	fb82 1203 	smull	r1, r2, r2, r3
 800b346:	1212      	asrs	r2, r2, #8
 800b348:	17db      	asrs	r3, r3, #31
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	3301      	adds	r3, #1
 800b350:	71fb      	strb	r3, [r7, #7]
 800b352:	e00f      	b.n	800b374 <BoardGetBatteryLevel+0x94>
    }
    else if( ( BatteryVoltage > BATTERY_SHUTDOWN_LEVEL ) && ( BatteryVoltage <= BATTERY_MIN_LEVEL ) )
 800b354:	4b0a      	ldr	r3, [pc, #40]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	f640 421c 	movw	r2, #3100	; 0xc1c
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d907      	bls.n	800b370 <BoardGetBatteryLevel+0x90>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <BoardGetBatteryLevel+0xa0>)
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800b368:	d802      	bhi.n	800b370 <BoardGetBatteryLevel+0x90>
    {
      batteryLevel = 1;
 800b36a:	2301      	movs	r3, #1
 800b36c:	71fb      	strb	r3, [r7, #7]
 800b36e:	e001      	b.n	800b374 <BoardGetBatteryLevel+0x94>
    }
    else //if( BatteryVoltage <= BATTERY_SHUTDOWN_LEVEL )
    {
      batteryLevel = 255;
 800b370:	23ff      	movs	r3, #255	; 0xff
 800b372:	71fb      	strb	r3, [r7, #7]
      //GpioInit( &DcDcEnable, DC_DC_EN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
      //GpioInit( &BoardPowerDown, BOARD_POWER_DOWN, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
    }
  }
  return batteryLevel;
 800b374:	79fb      	ldrb	r3, [r7, #7]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	2000002e 	.word	0x2000002e
 800b384:	44fc3a35 	.word	0x44fc3a35

0800b388 <BoardUnusedIoInit>:

static void BoardUnusedIoInit( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af02      	add	r7, sp, #8
  Gpio_t ioPin;

	GpioInit( &ioPin, UNUSEDPINPA0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b38e:	1d38      	adds	r0, r7, #4
 800b390:	2300      	movs	r3, #0
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	2300      	movs	r3, #0
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	2300      	movs	r3, #0
 800b39a:	2203      	movs	r2, #3
 800b39c:	2100      	movs	r1, #0
 800b39e:	f000 ff43 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b3a2:	1d38      	adds	r0, r7, #4
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	f000 ff39 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b3b6:	1d38      	adds	r0, r7, #4
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	2203      	movs	r2, #3
 800b3c4:	2102      	movs	r1, #2
 800b3c6:	f000 ff2f 	bl	800c228 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPA3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPA7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPA8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b3ca:	1d38      	adds	r0, r7, #4
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	2203      	movs	r2, #3
 800b3d8:	2108      	movs	r1, #8
 800b3da:	f000 ff25 	bl	800c228 <GpioInit>
#if !defined( USE_DEBUGGER )
	//GpioInit( &ioPin, UNUSEDPINPA9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );  // TX
	//GpioInit( &ioPin, UNUSEDPINPA10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // RX
	GpioInit( &ioPin, UNUSEDPINPA11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DM
 800b3de:	1d38      	adds	r0, r7, #4
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2203      	movs	r2, #3
 800b3ec:	210b      	movs	r1, #11
 800b3ee:	f000 ff1b 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPA12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // DP
 800b3f2:	1d38      	adds	r0, r7, #4
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	2203      	movs	r2, #3
 800b400:	210c      	movs	r1, #12
 800b402:	f000 ff11 	bl	800c228 <GpioInit>
	//GpioInit( &ioPin, UNUSEDPINPA13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWDIO
	//GpioInit( &ioPin, UNUSEDPINPA14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); // SWCLK
#endif
	GpioInit( &ioPin, UNUSEDPINPA15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b406:	1d38      	adds	r0, r7, #4
 800b408:	2300      	movs	r3, #0
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	2300      	movs	r3, #0
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	2300      	movs	r3, #0
 800b412:	2203      	movs	r2, #3
 800b414:	210f      	movs	r1, #15
 800b416:	f000 ff07 	bl	800c228 <GpioInit>

	GpioInit( &ioPin, UNUSEDPINPB0, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b41a:	1d38      	adds	r0, r7, #4
 800b41c:	2300      	movs	r3, #0
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	2300      	movs	r3, #0
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	2203      	movs	r2, #3
 800b428:	2110      	movs	r1, #16
 800b42a:	f000 fefd 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b42e:	1d38      	adds	r0, r7, #4
 800b430:	2300      	movs	r3, #0
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	2300      	movs	r3, #0
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	2300      	movs	r3, #0
 800b43a:	2203      	movs	r2, #3
 800b43c:	2111      	movs	r1, #17
 800b43e:	f000 fef3 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b442:	1d38      	adds	r0, r7, #4
 800b444:	2300      	movs	r3, #0
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	2300      	movs	r3, #0
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2300      	movs	r3, #0
 800b44e:	2203      	movs	r2, #3
 800b450:	2112      	movs	r1, #18
 800b452:	f000 fee9 	bl	800c228 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB3, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB4, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b456:	1d38      	adds	r0, r7, #4
 800b458:	2300      	movs	r3, #0
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	2300      	movs	r3, #0
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	2300      	movs	r3, #0
 800b462:	2203      	movs	r2, #3
 800b464:	2114      	movs	r1, #20
 800b466:	f000 fedf 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB5, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b46a:	1d38      	adds	r0, r7, #4
 800b46c:	2300      	movs	r3, #0
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	2300      	movs	r3, #0
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	2203      	movs	r2, #3
 800b478:	2115      	movs	r1, #21
 800b47a:	f000 fed5 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB6, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b47e:	1d38      	adds	r0, r7, #4
 800b480:	2300      	movs	r3, #0
 800b482:	9301      	str	r3, [sp, #4]
 800b484:	2300      	movs	r3, #0
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	2300      	movs	r3, #0
 800b48a:	2203      	movs	r2, #3
 800b48c:	2116      	movs	r1, #22
 800b48e:	f000 fecb 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB7, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b492:	1d38      	adds	r0, r7, #4
 800b494:	2300      	movs	r3, #0
 800b496:	9301      	str	r3, [sp, #4]
 800b498:	2300      	movs	r3, #0
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	2300      	movs	r3, #0
 800b49e:	2203      	movs	r2, #3
 800b4a0:	2117      	movs	r1, #23
 800b4a2:	f000 fec1 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB8, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4a6:	1d38      	adds	r0, r7, #4
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	2203      	movs	r2, #3
 800b4b4:	2118      	movs	r1, #24
 800b4b6:	f000 feb7 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB9, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4ba:	1d38      	adds	r0, r7, #4
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2203      	movs	r2, #3
 800b4c8:	2119      	movs	r1, #25
 800b4ca:	f000 fead 	bl	800c228 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB10, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPB11, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
	GpioInit( &ioPin, UNUSEDPINPB12, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4ce:	1d38      	adds	r0, r7, #4
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	2203      	movs	r2, #3
 800b4dc:	211c      	movs	r1, #28
 800b4de:	f000 fea3 	bl	800c228 <GpioInit>
	GpioInit( &ioPin, UNUSEDPINPB13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4e2:	1d38      	adds	r0, r7, #4
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9301      	str	r3, [sp, #4]
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	211d      	movs	r1, #29
 800b4f2:	f000 fe99 	bl	800c228 <GpioInit>
//	GpioInit( &ioPin, UNUSEDPINPB14, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &ioPin, UNUSEDPINPB15, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );

	GpioInit( &ioPin, UNUSEDPINPC13, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800b4f6:	1d38      	adds	r0, r7, #4
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	2300      	movs	r3, #0
 800b502:	2203      	movs	r2, #3
 800b504:	212d      	movs	r1, #45	; 0x2d
 800b506:	f000 fe8f 	bl	800c228 <GpioInit>
#if defined( USE_DEBUGGER )
  HAL_DBGMCU_EnableDBGStopMode( );
  HAL_DBGMCU_EnableDBGSleepMode( );
  HAL_DBGMCU_EnableDBGStandbyMode( );
#else
  HAL_DBGMCU_EnableDBGStopMode( );
 800b50a:	f7f5 fe1b 	bl	8001144 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGSleepMode( );
 800b50e:	f7f5 fe0b 	bl	8001128 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStandbyMode( );
 800b512:	f7f5 fe25 	bl	8001160 <HAL_DBGMCU_EnableDBGStandbyMode>
  */
  //���ã����͹����¹ر�SWD�������޷���STLINK������¼���򣡣���
  //    GpioInit( &ioPin, SWDIO, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //    GpioInit( &ioPin, SWCLK, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <SystemClockConfig>:

void SystemClockConfig( void )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b096      	sub	sp, #88	; 0x58
 800b524:	af00      	add	r7, sp, #0


	/****************************************************************************************************/
	/*                      HSI->SYS                HSE->PLL->USB                                       */
#elif !defined( USE_DEBUGGER )
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52a:	2234      	movs	r2, #52	; 0x34
 800b52c:	2100      	movs	r1, #0
 800b52e:	4618      	mov	r0, r3
 800b530:	f006 fd34 	bl	8011f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b534:	f107 0310 	add.w	r3, r7, #16
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
 800b53c:	605a      	str	r2, [r3, #4]
 800b53e:	609a      	str	r2, [r3, #8]
 800b540:	60da      	str	r2, [r3, #12]
 800b542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b544:	f107 0308 	add.w	r3, r7, #8
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
 800b54c:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b54e:	4b38      	ldr	r3, [pc, #224]	; (800b630 <SystemClockConfig+0x110>)
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	4a37      	ldr	r2, [pc, #220]	; (800b630 <SystemClockConfig+0x110>)
 800b554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b558:	6253      	str	r3, [r2, #36]	; 0x24
 800b55a:	4b35      	ldr	r3, [pc, #212]	; (800b630 <SystemClockConfig+0x110>)
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b562:	607b      	str	r3, [r7, #4]
 800b564:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b566:	4b33      	ldr	r3, [pc, #204]	; (800b634 <SystemClockConfig+0x114>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b56e:	4a31      	ldr	r2, [pc, #196]	; (800b634 <SystemClockConfig+0x114>)
 800b570:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b574:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800b576:	2307      	movs	r3, #7
 800b578:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b57a:	2301      	movs	r3, #1
 800b57c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b57e:	2301      	movs	r3, #1
 800b580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b582:	2301      	movs	r3, #1
 800b584:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b586:	2310      	movs	r3, #16
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b58a:	2302      	movs	r3, #2
 800b58c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b58e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b592:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800b594:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800b59a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b59e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7f6 fef1 	bl	800238c <HAL_RCC_OscConfig>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <SystemClockConfig+0x94>
  {
    Error_Handler();
 800b5b0:	f001 f96c 	bl	800c88c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b5b4:	230f      	movs	r3, #15
 800b5b6:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800b5c8:	f107 0310 	add.w	r3, r7, #16
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7f7 fa0c 	bl	80029ec <HAL_RCC_ClockConfig>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <SystemClockConfig+0xbe>
  {
    Error_Handler();
 800b5da:	f001 f957 	bl	800c88c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b5e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b5e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b5e8:	f107 0308 	add.w	r3, r7, #8
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f7 fc91 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <SystemClockConfig+0xdc>
  {
    Error_Handler();
 800b5f8:	f001 f948 	bl	800c88c <Error_Handler>
  }
#endif
  /**************************************************END***********************************************/


  HAL_SYSTICK_Config( HAL_RCC_GetHCLKFreq( ) / 1000 );
 800b5fc:	f7f7 fbf8 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 800b600:	4603      	mov	r3, r0
 800b602:	4a0d      	ldr	r2, [pc, #52]	; (800b638 <SystemClockConfig+0x118>)
 800b604:	fba2 2303 	umull	r2, r3, r2, r3
 800b608:	099b      	lsrs	r3, r3, #6
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f6 f94d 	bl	80018aa <HAL_SYSTICK_Config>
  
  HAL_SYSTICK_CLKSourceConfig( SYSTICK_CLKSOURCE_HCLK );
 800b610:	2004      	movs	r0, #4
 800b612:	f7f6 f957 	bl	80018c4 <HAL_SYSTICK_CLKSourceConfig>
  
  // HAL_NVIC_GetPriorityGrouping
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 800b616:	2003      	movs	r0, #3
 800b618:	f7f6 f912 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>
  
  // SysTick_IRQn interrupt configuration
  HAL_NVIC_SetPriority( SysTick_IRQn, 0, 0 );
 800b61c:	2200      	movs	r2, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	f7f6 f917 	bl	8001856 <HAL_NVIC_SetPriority>
}
 800b628:	bf00      	nop
 800b62a:	3758      	adds	r7, #88	; 0x58
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	40023800 	.word	0x40023800
 800b634:	40007000 	.word	0x40007000
 800b638:	10624dd3 	.word	0x10624dd3

0800b63c <CalibrateSystemWakeupTime>:

void CalibrateSystemWakeupTime( void )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	af00      	add	r7, sp, #0
  if( SystemWakeupTimeCalibrated == false )
 800b640:	4b0f      	ldr	r3, [pc, #60]	; (800b680 <CalibrateSystemWakeupTime+0x44>)
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	f083 0301 	eor.w	r3, r3, #1
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d015      	beq.n	800b67a <CalibrateSystemWakeupTime+0x3e>
  {
    TimerInit( &CalibrateSystemWakeupTimeTimer, OnCalibrateSystemWakeupTimeTimerEvent );
 800b64e:	490d      	ldr	r1, [pc, #52]	; (800b684 <CalibrateSystemWakeupTime+0x48>)
 800b650:	480d      	ldr	r0, [pc, #52]	; (800b688 <CalibrateSystemWakeupTime+0x4c>)
 800b652:	f004 fd2b 	bl	80100ac <TimerInit>
    TimerSetValue( &CalibrateSystemWakeupTimeTimer, 1000 );
 800b656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b65a:	480b      	ldr	r0, [pc, #44]	; (800b688 <CalibrateSystemWakeupTime+0x4c>)
 800b65c:	f004 ff44 	bl	80104e8 <TimerSetValue>
    TimerStart( &CalibrateSystemWakeupTimeTimer );
 800b660:	4809      	ldr	r0, [pc, #36]	; (800b688 <CalibrateSystemWakeupTime+0x4c>)
 800b662:	f004 fd3d 	bl	80100e0 <TimerStart>
    while( SystemWakeupTimeCalibrated == false )
 800b666:	e001      	b.n	800b66c <CalibrateSystemWakeupTime+0x30>
    {
    	//HAL_Delay(2);
    	TimerLowPowerHandler( ); //开启低功耗模式时注释这里将导致收发窗口对不上
 800b668:	f004 ff84 	bl	8010574 <TimerLowPowerHandler>
    while( SystemWakeupTimeCalibrated == false )
 800b66c:	4b04      	ldr	r3, [pc, #16]	; (800b680 <CalibrateSystemWakeupTime+0x44>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f083 0301 	eor.w	r3, r3, #1
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1f6      	bne.n	800b668 <CalibrateSystemWakeupTime+0x2c>
    }
  }
}
 800b67a:	bf00      	nop
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20000721 	.word	0x20000721
 800b684:	0800b165 	.word	0x0800b165
 800b688:	2000070c 	.word	0x2000070c

0800b68c <SystemClockReConfig>:

void SystemClockReConfig( void )
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE( );
 800b692:	4b29      	ldr	r3, [pc, #164]	; (800b738 <SystemClockReConfig+0xac>)
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	4a28      	ldr	r2, [pc, #160]	; (800b738 <SystemClockReConfig+0xac>)
 800b698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b69c:	6253      	str	r3, [r2, #36]	; 0x24
 800b69e:	4b26      	ldr	r3, [pc, #152]	; (800b738 <SystemClockReConfig+0xac>)
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE1 );
 800b6aa:	4b24      	ldr	r3, [pc, #144]	; (800b73c <SystemClockReConfig+0xb0>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800b6b2:	4a22      	ldr	r2, [pc, #136]	; (800b73c <SystemClockReConfig+0xb0>)
 800b6b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b6b8:	6013      	str	r3, [r2, #0]
  
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800b6ba:	4b21      	ldr	r3, [pc, #132]	; (800b740 <SystemClockReConfig+0xb4>)
 800b6bc:	2201      	movs	r2, #1
 800b6be:	601a      	str	r2, [r3, #0]
  __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 800b6c0:	4b1d      	ldr	r3, [pc, #116]	; (800b738 <SystemClockReConfig+0xac>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800b6c8:	4a1b      	ldr	r2, [pc, #108]	; (800b738 <SystemClockReConfig+0xac>)
 800b6ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b6ce:	6053      	str	r3, [r2, #4]
  //__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST((uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> POSITION_VAL(RCC_ICSCR_HSITRIM)));

    
  /* Wait till HSI is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSIRDY ) == RESET )
 800b6d0:	bf00      	nop
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <SystemClockReConfig+0xac>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0302 	and.w	r3, r3, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0f9      	beq.n	800b6d2 <SystemClockReConfig+0x46>
	{
	}
#if !defined( USE_DEBUGGER ) || defined( USB_VCP )
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
 800b6de:	4b16      	ldr	r3, [pc, #88]	; (800b738 <SystemClockReConfig+0xac>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a15      	ldr	r2, [pc, #84]	; (800b738 <SystemClockReConfig+0xac>)
 800b6e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6e8:	6013      	str	r3, [r2, #0]
  /* Enable PLL */
	__HAL_RCC_PLL_ENABLE( );
 800b6ea:	4b16      	ldr	r3, [pc, #88]	; (800b744 <SystemClockReConfig+0xb8>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_HSERDY ) == RESET )
 800b6f0:	bf00      	nop
 800b6f2:	4b11      	ldr	r3, [pc, #68]	; (800b738 <SystemClockReConfig+0xac>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0f9      	beq.n	800b6f2 <SystemClockReConfig+0x66>
	{
	}

  /* Wait till PLL is ready */
	while( __HAL_RCC_GET_FLAG( RCC_FLAG_PLLRDY ) == RESET )
 800b6fe:	bf00      	nop
 800b700:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <SystemClockReConfig+0xac>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0f9      	beq.n	800b700 <SystemClockReConfig+0x74>
	{
	}


	/* Select PLL as system clock source */
	__HAL_RCC_SYSCLK_CONFIG ( RCC_SYSCLKSOURCE_HSI );
 800b70c:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <SystemClockReConfig+0xac>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f023 0303 	bic.w	r3, r3, #3
 800b714:	4a08      	ldr	r2, [pc, #32]	; (800b738 <SystemClockReConfig+0xac>)
 800b716:	f043 0301 	orr.w	r3, r3, #1
 800b71a:	6093      	str	r3, [r2, #8]

	/* Wait till PLL is used as system clock source */
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_HSI )
 800b71c:	bf00      	nop
 800b71e:	4b06      	ldr	r3, [pc, #24]	; (800b738 <SystemClockReConfig+0xac>)
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f003 030c 	and.w	r3, r3, #12
 800b726:	2b04      	cmp	r3, #4
 800b728:	d1f9      	bne.n	800b71e <SystemClockReConfig+0x92>
	while( __HAL_RCC_GET_SYSCLK_SOURCE( ) != RCC_SYSCLKSOURCE_STATUS_PLLCLK )
	{
	}
	/*PLL->SYS*/
#endif
}
 800b72a:	bf00      	nop
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	bc80      	pop	{r7}
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	40023800 	.word	0x40023800
 800b73c:	40007000 	.word	0x40007000
 800b740:	42470000 	.word	0x42470000
 800b744:	42470060 	.word	0x42470060

0800b748 <GetBoardPowerSource>:
  HAL_SYSTICK_IRQHandler( );
}
*/

uint8_t GetBoardPowerSource( void )
{
 800b748:	b480      	push	{r7}
 800b74a:	af00      	add	r7, sp, #0
  else
  {
    return USB_POWER;
  }
#else
  return BATTERY_POWER;
 800b74c:	2301      	movs	r3, #1
#endif
}
 800b74e:	4618      	mov	r0, r3
 800b750:	46bd      	mov	sp, r7
 800b752:	bc80      	pop	{r7}
 800b754:	4770      	bx	lr

0800b756 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	33f1      	adds	r3, #241	; 0xf1
 800b762:	2210      	movs	r2, #16
 800b764:	2100      	movs	r1, #0
 800b766:	4618      	mov	r0, r3
 800b768:	f005 f826 	bl	80107b8 <memset1>
            ctx->M_n = 0;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        memset1(ctx->rijndael.ksch, '\0', 240);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	22f0      	movs	r2, #240	; 0xf0
 800b778:	2100      	movs	r1, #0
 800b77a:	4618      	mov	r0, r3
 800b77c:	f005 f81c 	bl	80107b8 <memset1>
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	461a      	mov	r2, r3
 800b796:	2110      	movs	r1, #16
 800b798:	6838      	ldr	r0, [r7, #0]
 800b79a:	f7ff fbbb 	bl	800af14 <aes_set_key>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b08c      	sub	sp, #48	; 0x30
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	60f8      	str	r0, [r7, #12]
 800b7ae:	60b9      	str	r1, [r7, #8]
 800b7b0:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 808f 	beq.w	800b8dc <AES_CMAC_Update+0x136>
                  mlen = MIN(16 - ctx->M_n, len);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b7c4:	f1c3 0310 	rsb	r3, r3, #16
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	bf28      	it	cs
 800b7ce:	4613      	movcs	r3, r2
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f203 1201 	addw	r2, r3, #257	; 0x101
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b7de:	4413      	add	r3, r2
 800b7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e2:	b292      	uxth	r2, r2
 800b7e4:	68b9      	ldr	r1, [r7, #8]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f004 ffab 	bl	8010742 <memcpy1>
                    ctx->M_n += mlen;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	441a      	add	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                    if (ctx->M_n < 16 || len == mlen)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b802:	2b0f      	cmp	r3, #15
 800b804:	d97b      	bls.n	800b8fe <AES_CMAC_Update+0x158>
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d077      	beq.n	800b8fe <AES_CMAC_Update+0x158>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800b80e:	2300      	movs	r3, #0
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b812:	e015      	b.n	800b840 <AES_CMAC_Update+0x9a>
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	4413      	add	r3, r2
 800b81a:	33f1      	adds	r3, #241	; 0xf1
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	68f9      	ldr	r1, [r7, #12]
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	440b      	add	r3, r1
 800b824:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	4053      	eors	r3, r2
 800b82c:	b2d9      	uxtb	r1, r3
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b832:	4413      	add	r3, r2
 800b834:	33f1      	adds	r3, #241	; 0xf1
 800b836:	460a      	mov	r2, r1
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83c:	3301      	adds	r3, #1
 800b83e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b842:	2b0f      	cmp	r3, #15
 800b844:	dde6      	ble.n	800b814 <AES_CMAC_Update+0x6e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f103 00f1 	add.w	r0, r3, #241	; 0xf1
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	33f1      	adds	r3, #241	; 0xf1
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	4619      	mov	r1, r3
 800b854:	f7ff fc3c 	bl	800b0d0 <aes_encrypt>
                    data += mlen;
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	4413      	add	r3, r2
 800b85e:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800b868:	e038      	b.n	800b8dc <AES_CMAC_Update+0x136>

                    XOR(data, ctx->X);
 800b86a:	2300      	movs	r3, #0
 800b86c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b86e:	e013      	b.n	800b898 <AES_CMAC_Update+0xf2>
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	4413      	add	r3, r2
 800b876:	33f1      	adds	r3, #241	; 0xf1
 800b878:	781a      	ldrb	r2, [r3, #0]
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	68b9      	ldr	r1, [r7, #8]
 800b87e:	440b      	add	r3, r1
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	4053      	eors	r3, r2
 800b884:	b2d9      	uxtb	r1, r3
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	4413      	add	r3, r2
 800b88c:	33f1      	adds	r3, #241	; 0xf1
 800b88e:	460a      	mov	r2, r1
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	3301      	adds	r3, #1
 800b896:	62bb      	str	r3, [r7, #40]	; 0x28
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	2b0f      	cmp	r3, #15
 800b89c:	dde8      	ble.n	800b870 <AES_CMAC_Update+0xca>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b8a4:	f107 0314 	add.w	r3, r7, #20
 800b8a8:	2210      	movs	r2, #16
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f004 ff49 	bl	8010742 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	f107 0114 	add.w	r1, r7, #20
 800b8b6:	f107 0314 	add.w	r3, r7, #20
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff fc08 	bl	800b0d0 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	33f1      	adds	r3, #241	; 0xf1
 800b8c4:	f107 0114 	add.w	r1, r7, #20
 800b8c8:	2210      	movs	r2, #16
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f004 ff39 	bl	8010742 <memcpy1>

                    data += 16;
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	3310      	adds	r3, #16
 800b8d4:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	3b10      	subs	r3, #16
 800b8da:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b10      	cmp	r3, #16
 800b8e0:	d8c3      	bhi.n	800b86a <AES_CMAC_Update+0xc4>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	b292      	uxth	r2, r2
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f004 ff27 	bl	8010742 <memcpy1>
            ctx->M_n = len;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b8fc:	e000      	b.n	800b900 <AES_CMAC_Update+0x15a>
                            return;
 800b8fe:	bf00      	nop
}
 800b900:	3730      	adds	r7, #48	; 0x30
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b092      	sub	sp, #72	; 0x48
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800b910:	f107 031c 	add.w	r3, r7, #28
 800b914:	2210      	movs	r2, #16
 800b916:	2100      	movs	r1, #0
 800b918:	4618      	mov	r0, r3
 800b91a:	f004 ff4d 	bl	80107b8 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	f107 011c 	add.w	r1, r7, #28
 800b924:	f107 031c 	add.w	r3, r7, #28
 800b928:	4618      	mov	r0, r3
 800b92a:	f7ff fbd1 	bl	800b0d0 <aes_encrypt>

            if (K[0] & 0x80) {
 800b92e:	7f3b      	ldrb	r3, [r7, #28]
 800b930:	b25b      	sxtb	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	da31      	bge.n	800b99a <AES_CMAC_Final+0x94>
                    LSHIFT(K, K);
 800b936:	2300      	movs	r3, #0
 800b938:	647b      	str	r3, [r7, #68]	; 0x44
 800b93a:	e01c      	b.n	800b976 <AES_CMAC_Final+0x70>
 800b93c:	f107 021c 	add.w	r2, r7, #28
 800b940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b942:	4413      	add	r3, r2
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	b25a      	sxtb	r2, r3
 800b94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b94c:	3301      	adds	r3, #1
 800b94e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b952:	440b      	add	r3, r1
 800b954:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b958:	09db      	lsrs	r3, r3, #7
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	b25b      	sxtb	r3, r3
 800b95e:	4313      	orrs	r3, r2
 800b960:	b25b      	sxtb	r3, r3
 800b962:	b2d9      	uxtb	r1, r3
 800b964:	f107 021c 	add.w	r2, r7, #28
 800b968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b96a:	4413      	add	r3, r2
 800b96c:	460a      	mov	r2, r1
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b972:	3301      	adds	r3, #1
 800b974:	647b      	str	r3, [r7, #68]	; 0x44
 800b976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b978:	2b0e      	cmp	r3, #14
 800b97a:	dddf      	ble.n	800b93c <AES_CMAC_Final+0x36>
 800b97c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                   K[15] ^= 0x87;
 800b988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b98c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b990:	43db      	mvns	r3, r3
 800b992:	b2db      	uxtb	r3, r3
 800b994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b998:	e028      	b.n	800b9ec <AES_CMAC_Final+0xe6>
            } else
                    LSHIFT(K, K);
 800b99a:	2300      	movs	r3, #0
 800b99c:	643b      	str	r3, [r7, #64]	; 0x40
 800b99e:	e01c      	b.n	800b9da <AES_CMAC_Final+0xd4>
 800b9a0:	f107 021c 	add.w	r2, r7, #28
 800b9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a6:	4413      	add	r3, r2
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	005b      	lsls	r3, r3, #1
 800b9ac:	b25a      	sxtb	r2, r3
 800b9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b9b6:	440b      	add	r3, r1
 800b9b8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b9bc:	09db      	lsrs	r3, r3, #7
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	b25b      	sxtb	r3, r3
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	b2d9      	uxtb	r1, r3
 800b9c8:	f107 021c 	add.w	r2, r7, #28
 800b9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ce:	4413      	add	r3, r2
 800b9d0:	460a      	mov	r2, r1
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	643b      	str	r3, [r7, #64]	; 0x40
 800b9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9dc:	2b0e      	cmp	r3, #14
 800b9de:	dddf      	ble.n	800b9a0 <AES_CMAC_Final+0x9a>
 800b9e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


            if (ctx->M_n == 16) {
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b9f2:	2b10      	cmp	r3, #16
 800b9f4:	d11d      	bne.n	800ba32 <AES_CMAC_Final+0x12c>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9fa:	e016      	b.n	800ba2a <AES_CMAC_Final+0x124>
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba00:	4413      	add	r3, r2
 800ba02:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ba06:	781a      	ldrb	r2, [r3, #0]
 800ba08:	f107 011c 	add.w	r1, r7, #28
 800ba0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0e:	440b      	add	r3, r1
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	4053      	eors	r3, r2
 800ba14:	b2d9      	uxtb	r1, r3
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ba20:	460a      	mov	r2, r1
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	3301      	adds	r3, #1
 800ba28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2c:	2b0f      	cmp	r3, #15
 800ba2e:	dde5      	ble.n	800b9fc <AES_CMAC_Final+0xf6>
 800ba30:	e098      	b.n	800bb64 <AES_CMAC_Final+0x25e>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800ba32:	7f3b      	ldrb	r3, [r7, #28]
 800ba34:	b25b      	sxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	da31      	bge.n	800ba9e <AES_CMAC_Final+0x198>
                          LSHIFT(K, K);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba3e:	e01c      	b.n	800ba7a <AES_CMAC_Final+0x174>
 800ba40:	f107 021c 	add.w	r2, r7, #28
 800ba44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba46:	4413      	add	r3, r2
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	b25a      	sxtb	r2, r3
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	3301      	adds	r3, #1
 800ba52:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ba56:	440b      	add	r3, r1
 800ba58:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ba5c:	09db      	lsrs	r3, r3, #7
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	b25b      	sxtb	r3, r3
 800ba62:	4313      	orrs	r3, r2
 800ba64:	b25b      	sxtb	r3, r3
 800ba66:	b2d9      	uxtb	r1, r3
 800ba68:	f107 021c 	add.w	r2, r7, #28
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6e:	4413      	add	r3, r2
 800ba70:	460a      	mov	r2, r1
 800ba72:	701a      	strb	r2, [r3, #0]
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	3301      	adds	r3, #1
 800ba78:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	2b0e      	cmp	r3, #14
 800ba7e:	dddf      	ble.n	800ba40 <AES_CMAC_Final+0x13a>
 800ba80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                          K[15] ^= 0x87;
 800ba8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba90:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ba94:	43db      	mvns	r3, r3
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ba9c:	e028      	b.n	800baf0 <AES_CMAC_Final+0x1ea>
                  } else
                           LSHIFT(K, K);
 800ba9e:	2300      	movs	r3, #0
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
 800baa2:	e01c      	b.n	800bade <AES_CMAC_Final+0x1d8>
 800baa4:	f107 021c 	add.w	r2, r7, #28
 800baa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baaa:	4413      	add	r3, r2
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	b25a      	sxtb	r2, r3
 800bab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab4:	3301      	adds	r3, #1
 800bab6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800baba:	440b      	add	r3, r1
 800babc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bac0:	09db      	lsrs	r3, r3, #7
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	b25b      	sxtb	r3, r3
 800bac6:	4313      	orrs	r3, r2
 800bac8:	b25b      	sxtb	r3, r3
 800baca:	b2d9      	uxtb	r1, r3
 800bacc:	f107 021c 	add.w	r2, r7, #28
 800bad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad2:	4413      	add	r3, r2
 800bad4:	460a      	mov	r2, r1
 800bad6:	701a      	strb	r2, [r3, #0]
 800bad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bada:	3301      	adds	r3, #1
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
 800bade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae0:	2b0e      	cmp	r3, #14
 800bae2:	dddf      	ble.n	800baa4 <AES_CMAC_Final+0x19e>
 800bae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	b2db      	uxtb	r3, r3
 800baec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	4413      	add	r3, r2
 800bafa:	2280      	movs	r2, #128	; 0x80
 800bafc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800bb00:	e007      	b.n	800bb12 <AES_CMAC_Final+0x20c>
                         ctx->M_last[ctx->M_n] = 0;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
                   while (++ctx->M_n < 16)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb26:	2b0f      	cmp	r3, #15
 800bb28:	d9eb      	bls.n	800bb02 <AES_CMAC_Final+0x1fc>
   
                  XOR(K, ctx->M_last);
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	633b      	str	r3, [r7, #48]	; 0x30
 800bb2e:	e016      	b.n	800bb5e <AES_CMAC_Final+0x258>
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	4413      	add	r3, r2
 800bb36:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bb3a:	781a      	ldrb	r2, [r3, #0]
 800bb3c:	f107 011c 	add.w	r1, r7, #28
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	440b      	add	r3, r1
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	4053      	eors	r3, r2
 800bb48:	b2d9      	uxtb	r1, r3
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	4413      	add	r3, r2
 800bb50:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bb54:	460a      	mov	r2, r1
 800bb56:	701a      	strb	r2, [r3, #0]
 800bb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	633b      	str	r3, [r7, #48]	; 0x30
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	2b0f      	cmp	r3, #15
 800bb62:	dde5      	ble.n	800bb30 <AES_CMAC_Final+0x22a>


           }
           XOR(ctx->M_last, ctx->X);
 800bb64:	2300      	movs	r3, #0
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb68:	e015      	b.n	800bb96 <AES_CMAC_Final+0x290>
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6e:	4413      	add	r3, r2
 800bb70:	33f1      	adds	r3, #241	; 0xf1
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	440b      	add	r3, r1
 800bb7a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	4053      	eors	r3, r2
 800bb82:	b2d9      	uxtb	r1, r3
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	4413      	add	r3, r2
 800bb8a:	33f1      	adds	r3, #241	; 0xf1
 800bb8c:	460a      	mov	r2, r1
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	3301      	adds	r3, #1
 800bb94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	2b0f      	cmp	r3, #15
 800bb9a:	dde6      	ble.n	800bb6a <AES_CMAC_Final+0x264>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bba2:	f107 030c 	add.w	r3, r7, #12
 800bba6:	2210      	movs	r2, #16
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f004 fdca 	bl	8010742 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff fa8a 	bl	800b0d0 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800bbbc:	f107 031c 	add.w	r3, r7, #28
 800bbc0:	2210      	movs	r2, #16
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f004 fdf7 	bl	80107b8 <memset1>

}
 800bbca:	bf00      	nop
 800bbcc:	3748      	adds	r7, #72	; 0x48
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7f5 fa66 	bl	80010ac <HAL_Delay>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <FifoNext>:
Maintainer: Miguel Luis and Gregory Cristian
*/
#include "fifo.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	807b      	strh	r3, [r7, #2]
    return ( index + 1 ) % fifo->Size;
 800bbf4:	887b      	ldrh	r3, [r7, #2]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	8912      	ldrh	r2, [r2, #8]
 800bbfc:	fb93 f1f2 	sdiv	r1, r3, r2
 800bc00:	fb02 f201 	mul.w	r2, r2, r1
 800bc04:	1a9b      	subs	r3, r3, r2
 800bc06:	b29b      	uxth	r3, r3
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bc80      	pop	{r7}
 800bc10:	4770      	bx	lr

0800bc12 <FifoPush>:
    fifo->Data = buffer;
    fifo->Size = size;
}

void FifoPush( Fifo_t *fifo, uint8_t data )
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	70fb      	strb	r3, [r7, #3]
    fifo->End = FifoNext( fifo, fifo->End );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	885b      	ldrh	r3, [r3, #2]
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff ffdf 	bl	800bbe8 <FifoNext>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	805a      	strh	r2, [r3, #2]
    fifo->Data[fifo->End] = data;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	8852      	ldrh	r2, [r2, #2]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	78fa      	ldrb	r2, [r7, #3]
 800bc3e:	701a      	strb	r2, [r3, #0]
}
 800bc40:	bf00      	nop
 800bc42:	3708      	adds	r7, #8
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <FifoPop>:

uint8_t FifoPop( Fifo_t *fifo )
{
 800bc48:	b590      	push	{r4, r7, lr}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
    uint8_t data = fifo->Data[FifoNext( fifo, fifo->Begin )];
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685c      	ldr	r4, [r3, #4]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff ffc4 	bl	800bbe8 <FifoNext>
 800bc60:	4603      	mov	r3, r0
 800bc62:	4423      	add	r3, r4
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	73fb      	strb	r3, [r7, #15]

    fifo->Begin = FifoNext( fifo, fifo->Begin );
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7ff ffba 	bl	800bbe8 <FifoNext>
 800bc74:	4603      	mov	r3, r0
 800bc76:	461a      	mov	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	801a      	strh	r2, [r3, #0]
    return data;
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3714      	adds	r7, #20
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd90      	pop	{r4, r7, pc}

0800bc86 <IsFifoEmpty>:
    fifo->Begin = 0;
    fifo->End = 0;
}

bool IsFifoEmpty( Fifo_t *fifo )
{
 800bc86:	b480      	push	{r7}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
    return ( fifo->Begin == fifo->End );
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	881a      	ldrh	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	bf0c      	ite	eq
 800bc9a:	2301      	moveq	r3, #1
 800bc9c:	2300      	movne	r3, #0
 800bc9e:	b2db      	uxtb	r3, r3
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bc80      	pop	{r7}
 800bca8:	4770      	bx	lr

0800bcaa <IsFifoFull>:

bool IsFifoFull( Fifo_t *fifo )
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
    return ( FifoNext( fifo, fifo->End ) == fifo->Begin );
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	885b      	ldrh	r3, [r3, #2]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff ff95 	bl	800bbe8 <FifoNext>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	bf0c      	ite	eq
 800bcca:	2301      	moveq	r3, #1
 800bccc:	2300      	movne	r3, #0
 800bcce:	b2db      	uxtb	r3, r3
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <GpioMcuInit>:
extern bool BewegungInterruptAusgeloest;

static GpioIrqHandler *GpioIrq[16];

void GpioMcuInit( Gpio_t *obj, PinNames pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08c      	sub	sp, #48	; 0x30
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	4608      	mov	r0, r1
 800bce2:	4611      	mov	r1, r2
 800bce4:	461a      	mov	r2, r3
 800bce6:	4603      	mov	r3, r0
 800bce8:	70fb      	strb	r3, [r7, #3]
 800bcea:	460b      	mov	r3, r1
 800bcec:	70bb      	strb	r3, [r7, #2]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	707b      	strb	r3, [r7, #1]
    GPIO_InitTypeDef GPIO_InitStructure;

    obj->pin = pin;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	78fa      	ldrb	r2, [r7, #3]
 800bcf6:	701a      	strb	r2, [r3, #0]

    if( pin == NC )
 800bcf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd00:	f000 80b5 	beq.w	800be6e <GpioMcuInit+0x196>
    {
        return;
    }

    obj->pinIndex = ( 0x01 << ( obj->pin & 0x0F ) );
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f993 3000 	ldrsb.w	r3, [r3]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	2201      	movs	r2, #1
 800bd12:	fa02 f303 	lsl.w	r3, r2, r3
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	805a      	strh	r2, [r3, #2]

    if( ( obj->pin & 0xF0 ) == 0x00 )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f993 3000 	ldrsb.w	r3, [r3]
 800bd22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10f      	bne.n	800bd4a <GpioMcuInit+0x72>
    {
        obj->port = GPIOA;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a52      	ldr	r2, [pc, #328]	; (800be78 <GpioMcuInit+0x1a0>)
 800bd2e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE( );
 800bd30:	4b52      	ldr	r3, [pc, #328]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd32:	69db      	ldr	r3, [r3, #28]
 800bd34:	4a51      	ldr	r2, [pc, #324]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd36:	f043 0301 	orr.w	r3, r3, #1
 800bd3a:	61d3      	str	r3, [r2, #28]
 800bd3c:	4b4f      	ldr	r3, [pc, #316]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	61bb      	str	r3, [r7, #24]
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	e053      	b.n	800bdf2 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x10 )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f993 3000 	ldrsb.w	r3, [r3]
 800bd50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d10f      	bne.n	800bd78 <GpioMcuInit+0xa0>
    {
        obj->port = GPIOB;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a49      	ldr	r2, [pc, #292]	; (800be80 <GpioMcuInit+0x1a8>)
 800bd5c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOB_CLK_ENABLE( );
 800bd5e:	4b47      	ldr	r3, [pc, #284]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	4a46      	ldr	r2, [pc, #280]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd64:	f043 0302 	orr.w	r3, r3, #2
 800bd68:	61d3      	str	r3, [r2, #28]
 800bd6a:	4b44      	ldr	r3, [pc, #272]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd6c:	69db      	ldr	r3, [r3, #28]
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	e03c      	b.n	800bdf2 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x20 )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f993 3000 	ldrsb.w	r3, [r3]
 800bd7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	d10f      	bne.n	800bda6 <GpioMcuInit+0xce>
    {
        obj->port = GPIOC;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a3e      	ldr	r2, [pc, #248]	; (800be84 <GpioMcuInit+0x1ac>)
 800bd8a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE( );
 800bd8c:	4b3b      	ldr	r3, [pc, #236]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd8e:	69db      	ldr	r3, [r3, #28]
 800bd90:	4a3a      	ldr	r2, [pc, #232]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd92:	f043 0304 	orr.w	r3, r3, #4
 800bd96:	61d3      	str	r3, [r2, #28]
 800bd98:	4b38      	ldr	r3, [pc, #224]	; (800be7c <GpioMcuInit+0x1a4>)
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	613b      	str	r3, [r7, #16]
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	e025      	b.n	800bdf2 <GpioMcuInit+0x11a>
    }
    else if( ( obj->pin & 0xF0 ) == 0x30 )
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f993 3000 	ldrsb.w	r3, [r3]
 800bdac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdb0:	2b30      	cmp	r3, #48	; 0x30
 800bdb2:	d10f      	bne.n	800bdd4 <GpioMcuInit+0xfc>
    {
        obj->port = GPIOD;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a34      	ldr	r2, [pc, #208]	; (800be88 <GpioMcuInit+0x1b0>)
 800bdb8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOD_CLK_ENABLE( );
 800bdba:	4b30      	ldr	r3, [pc, #192]	; (800be7c <GpioMcuInit+0x1a4>)
 800bdbc:	69db      	ldr	r3, [r3, #28]
 800bdbe:	4a2f      	ldr	r2, [pc, #188]	; (800be7c <GpioMcuInit+0x1a4>)
 800bdc0:	f043 0308 	orr.w	r3, r3, #8
 800bdc4:	61d3      	str	r3, [r2, #28]
 800bdc6:	4b2d      	ldr	r3, [pc, #180]	; (800be7c <GpioMcuInit+0x1a4>)
 800bdc8:	69db      	ldr	r3, [r3, #28]
 800bdca:	f003 0308 	and.w	r3, r3, #8
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	e00e      	b.n	800bdf2 <GpioMcuInit+0x11a>
    }
    else
    {
        obj->port = GPIOH;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a2d      	ldr	r2, [pc, #180]	; (800be8c <GpioMcuInit+0x1b4>)
 800bdd8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_GPIOH_CLK_ENABLE( );
 800bdda:	4b28      	ldr	r3, [pc, #160]	; (800be7c <GpioMcuInit+0x1a4>)
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	4a27      	ldr	r2, [pc, #156]	; (800be7c <GpioMcuInit+0x1a4>)
 800bde0:	f043 0320 	orr.w	r3, r3, #32
 800bde4:	61d3      	str	r3, [r2, #28]
 800bde6:	4b25      	ldr	r3, [pc, #148]	; (800be7c <GpioMcuInit+0x1a4>)
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	f003 0320 	and.w	r3, r3, #32
 800bdee:	60bb      	str	r3, [r7, #8]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
    }

    GPIO_InitStructure.Pin =  obj->pinIndex ;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	885b      	ldrh	r3, [r3, #2]
 800bdf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Pull = obj->pull = type;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdfe:	729a      	strb	r2, [r3, #10]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	7a9b      	ldrb	r3, [r3, #10]
 800be04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800be06:	2302      	movs	r3, #2
 800be08:	62bb      	str	r3, [r7, #40]	; 0x28

    if( mode == PIN_INPUT )
 800be0a:	78bb      	ldrb	r3, [r7, #2]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <GpioMcuInit+0x13e>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800be10:	2300      	movs	r3, #0
 800be12:	623b      	str	r3, [r7, #32]
 800be14:	e01b      	b.n	800be4e <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ANALOGIC )
 800be16:	78bb      	ldrb	r3, [r7, #2]
 800be18:	2b03      	cmp	r3, #3
 800be1a:	d102      	bne.n	800be22 <GpioMcuInit+0x14a>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 800be1c:	2303      	movs	r3, #3
 800be1e:	623b      	str	r3, [r7, #32]
 800be20:	e015      	b.n	800be4e <GpioMcuInit+0x176>
    }
    else if( mode == PIN_ALTERNATE_FCT )
 800be22:	78bb      	ldrb	r3, [r7, #2]
 800be24:	2b02      	cmp	r3, #2
 800be26:	d10a      	bne.n	800be3e <GpioMcuInit+0x166>
    {
        if( config == PIN_OPEN_DRAIN )
 800be28:	787b      	ldrb	r3, [r7, #1]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d102      	bne.n	800be34 <GpioMcuInit+0x15c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800be2e:	2312      	movs	r3, #18
 800be30:	623b      	str	r3, [r7, #32]
 800be32:	e001      	b.n	800be38 <GpioMcuInit+0x160>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800be34:	2302      	movs	r3, #2
 800be36:	623b      	str	r3, [r7, #32]
        }
        GPIO_InitStructure.Alternate = value;
 800be38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be3c:	e007      	b.n	800be4e <GpioMcuInit+0x176>
    }
    else // mode output
    {
        if( config == PIN_OPEN_DRAIN )
 800be3e:	787b      	ldrb	r3, [r7, #1]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d102      	bne.n	800be4a <GpioMcuInit+0x172>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800be44:	2311      	movs	r3, #17
 800be46:	623b      	str	r3, [r7, #32]
 800be48:	e001      	b.n	800be4e <GpioMcuInit+0x176>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800be4a:	2301      	movs	r3, #1
 800be4c:	623b      	str	r3, [r7, #32]
        }
    }

    // Sets initial output value
    if( mode == PIN_OUTPUT )
 800be4e:	78bb      	ldrb	r3, [r7, #2]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d103      	bne.n	800be5c <GpioMcuInit+0x184>
    {
        GpioMcuWrite( obj, value );
 800be54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f92c 	bl	800c0b4 <GpioMcuWrite>
    }

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	f107 021c 	add.w	r2, r7, #28
 800be64:	4611      	mov	r1, r2
 800be66:	4618      	mov	r0, r3
 800be68:	f7f5 ff84 	bl	8001d74 <HAL_GPIO_Init>
 800be6c:	e000      	b.n	800be70 <GpioMcuInit+0x198>
        return;
 800be6e:	bf00      	nop
}
 800be70:	3730      	adds	r7, #48	; 0x30
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	40020000 	.word	0x40020000
 800be7c:	40023800 	.word	0x40023800
 800be80:	40020400 	.word	0x40020400
 800be84:	40020800 	.word	0x40020800
 800be88:	40020c00 	.word	0x40020c00
 800be8c:	40021400 	.word	0x40021400

0800be90 <GpioMcuSetInterrupt>:

void GpioMcuSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08c      	sub	sp, #48	; 0x30
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	607b      	str	r3, [r7, #4]
 800be9a:	460b      	mov	r3, r1
 800be9c:	72fb      	strb	r3, [r7, #11]
 800be9e:	4613      	mov	r3, r2
 800bea0:	72bb      	strb	r3, [r7, #10]
    uint32_t priority = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c

    IRQn_Type IRQnb = EXTI0_IRQn;
 800bea6:	2306      	movs	r3, #6
 800bea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    GPIO_InitTypeDef   GPIO_InitStructure;

    if( irqHandler == NULL )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 80f9 	beq.w	800c0a6 <GpioMcuSetInterrupt+0x216>
    {
        return;
    }

    GPIO_InitStructure.Pin =  obj->pinIndex;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	885b      	ldrh	r3, [r3, #2]
 800beb8:	617b      	str	r3, [r7, #20]

    if( irqMode == IRQ_RISING_EDGE )
 800beba:	7afb      	ldrb	r3, [r7, #11]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d103      	bne.n	800bec8 <GpioMcuSetInterrupt+0x38>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800bec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800bec4:	61bb      	str	r3, [r7, #24]
 800bec6:	e009      	b.n	800bedc <GpioMcuSetInterrupt+0x4c>
    }
    else if( irqMode == IRQ_FALLING_EDGE )
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	2b02      	cmp	r3, #2
 800becc:	d103      	bne.n	800bed6 <GpioMcuSetInterrupt+0x46>
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 800bece:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	e002      	b.n	800bedc <GpioMcuSetInterrupt+0x4c>
    }
    else
    {
        GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bed6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800beda:	61bb      	str	r3, [r7, #24]
    }

    GPIO_InitStructure.Pull = obj->pull;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	7a9b      	ldrb	r3, [r3, #10]
 800bee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800bee2:	2302      	movs	r3, #2
 800bee4:	623b      	str	r3, [r7, #32]

    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	f107 0214 	add.w	r2, r7, #20
 800beee:	4611      	mov	r1, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7f5 ff3f 	bl	8001d74 <HAL_GPIO_Init>

    switch( irqPriority )
 800bef6:	7abb      	ldrb	r3, [r7, #10]
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d00f      	beq.n	800bf1c <GpioMcuSetInterrupt+0x8c>
 800befc:	2b03      	cmp	r3, #3
 800befe:	dc10      	bgt.n	800bf22 <GpioMcuSetInterrupt+0x92>
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	dc02      	bgt.n	800bf0a <GpioMcuSetInterrupt+0x7a>
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	da03      	bge.n	800bf10 <GpioMcuSetInterrupt+0x80>
 800bf08:	e00b      	b.n	800bf22 <GpioMcuSetInterrupt+0x92>
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d003      	beq.n	800bf16 <GpioMcuSetInterrupt+0x86>
 800bf0e:	e008      	b.n	800bf22 <GpioMcuSetInterrupt+0x92>
    {
    case IRQ_VERY_LOW_PRIORITY:
    case IRQ_LOW_PRIORITY:
        priority = 3;
 800bf10:	2303      	movs	r3, #3
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf14:	e008      	b.n	800bf28 <GpioMcuSetInterrupt+0x98>
    case IRQ_MEDIUM_PRIORITY:
        priority = 2;
 800bf16:	2302      	movs	r3, #2
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf1a:	e005      	b.n	800bf28 <GpioMcuSetInterrupt+0x98>
    case IRQ_HIGH_PRIORITY:
        priority = 1;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf20:	e002      	b.n	800bf28 <GpioMcuSetInterrupt+0x98>
    case IRQ_VERY_HIGH_PRIORITY:
    default:
        priority = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf26:	bf00      	nop
    }

    switch( obj->pinIndex )
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	885b      	ldrh	r3, [r3, #2]
 800bf2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf30:	f000 809d 	beq.w	800c06e <GpioMcuSetInterrupt+0x1de>
 800bf34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf38:	f300 809d 	bgt.w	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf40:	f000 8095 	beq.w	800c06e <GpioMcuSetInterrupt+0x1de>
 800bf44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf48:	f300 8095 	bgt.w	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf50:	f000 808d 	beq.w	800c06e <GpioMcuSetInterrupt+0x1de>
 800bf54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf58:	f300 808d 	bgt.w	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf60:	f000 8085 	beq.w	800c06e <GpioMcuSetInterrupt+0x1de>
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	f300 8085 	bgt.w	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf70:	d07d      	beq.n	800c06e <GpioMcuSetInterrupt+0x1de>
 800bf72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf76:	dc7e      	bgt.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf7c:	d077      	beq.n	800c06e <GpioMcuSetInterrupt+0x1de>
 800bf7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf82:	dc78      	bgt.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf88:	d06d      	beq.n	800c066 <GpioMcuSetInterrupt+0x1d6>
 800bf8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf8e:	dc72      	bgt.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf94:	d067      	beq.n	800c066 <GpioMcuSetInterrupt+0x1d6>
 800bf96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf9a:	dc6c      	bgt.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bf9c:	2b80      	cmp	r3, #128	; 0x80
 800bf9e:	d062      	beq.n	800c066 <GpioMcuSetInterrupt+0x1d6>
 800bfa0:	2b80      	cmp	r3, #128	; 0x80
 800bfa2:	dc68      	bgt.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	dc47      	bgt.n	800c038 <GpioMcuSetInterrupt+0x1a8>
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dd64      	ble.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bfac:	3b01      	subs	r3, #1
 800bfae:	2b1f      	cmp	r3, #31
 800bfb0:	d861      	bhi.n	800c076 <GpioMcuSetInterrupt+0x1e6>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <GpioMcuSetInterrupt+0x128>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c03f 	.word	0x0800c03f
 800bfbc:	0800c047 	.word	0x0800c047
 800bfc0:	0800c077 	.word	0x0800c077
 800bfc4:	0800c04f 	.word	0x0800c04f
 800bfc8:	0800c077 	.word	0x0800c077
 800bfcc:	0800c077 	.word	0x0800c077
 800bfd0:	0800c077 	.word	0x0800c077
 800bfd4:	0800c057 	.word	0x0800c057
 800bfd8:	0800c077 	.word	0x0800c077
 800bfdc:	0800c077 	.word	0x0800c077
 800bfe0:	0800c077 	.word	0x0800c077
 800bfe4:	0800c077 	.word	0x0800c077
 800bfe8:	0800c077 	.word	0x0800c077
 800bfec:	0800c077 	.word	0x0800c077
 800bff0:	0800c077 	.word	0x0800c077
 800bff4:	0800c05f 	.word	0x0800c05f
 800bff8:	0800c077 	.word	0x0800c077
 800bffc:	0800c077 	.word	0x0800c077
 800c000:	0800c077 	.word	0x0800c077
 800c004:	0800c077 	.word	0x0800c077
 800c008:	0800c077 	.word	0x0800c077
 800c00c:	0800c077 	.word	0x0800c077
 800c010:	0800c077 	.word	0x0800c077
 800c014:	0800c077 	.word	0x0800c077
 800c018:	0800c077 	.word	0x0800c077
 800c01c:	0800c077 	.word	0x0800c077
 800c020:	0800c077 	.word	0x0800c077
 800c024:	0800c077 	.word	0x0800c077
 800c028:	0800c077 	.word	0x0800c077
 800c02c:	0800c077 	.word	0x0800c077
 800c030:	0800c077 	.word	0x0800c077
 800c034:	0800c067 	.word	0x0800c067
 800c038:	2b40      	cmp	r3, #64	; 0x40
 800c03a:	d014      	beq.n	800c066 <GpioMcuSetInterrupt+0x1d6>
    case GPIO_PIN_14:
    case GPIO_PIN_15:
        IRQnb = EXTI15_10_IRQn;
        break;
    default:
        break;
 800c03c:	e01b      	b.n	800c076 <GpioMcuSetInterrupt+0x1e6>
        IRQnb = EXTI0_IRQn;
 800c03e:	2306      	movs	r3, #6
 800c040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c044:	e018      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI1_IRQn;
 800c046:	2307      	movs	r3, #7
 800c048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c04c:	e014      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI2_IRQn;
 800c04e:	2308      	movs	r3, #8
 800c050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c054:	e010      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI3_IRQn;
 800c056:	2309      	movs	r3, #9
 800c058:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c05c:	e00c      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI4_IRQn;
 800c05e:	230a      	movs	r3, #10
 800c060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c064:	e008      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI9_5_IRQn;
 800c066:	2317      	movs	r3, #23
 800c068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c06c:	e004      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        IRQnb = EXTI15_10_IRQn;
 800c06e:	2328      	movs	r3, #40	; 0x28
 800c070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 800c074:	e000      	b.n	800c078 <GpioMcuSetInterrupt+0x1e8>
        break;
 800c076:	bf00      	nop
    }

    GpioIrq[( obj->pin ) & 0x0F] = irqHandler;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f993 3000 	ldrsb.w	r3, [r3]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	f003 030f 	and.w	r3, r3, #15
 800c084:	490a      	ldr	r1, [pc, #40]	; (800c0b0 <GpioMcuSetInterrupt+0x220>)
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 800c08c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c090:	2200      	movs	r2, #0
 800c092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c094:	4618      	mov	r0, r3
 800c096:	f7f5 fbde 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 800c09a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7f5 fbf5 	bl	800188e <HAL_NVIC_EnableIRQ>
 800c0a4:	e000      	b.n	800c0a8 <GpioMcuSetInterrupt+0x218>
        return;
 800c0a6:	bf00      	nop
}
 800c0a8:	3730      	adds	r7, #48	; 0x30
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000724 	.word	0x20000724

0800c0b4 <GpioMcuWrite>:
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
}

void GpioMcuWrite( Gpio_t *obj, uint32_t value )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
    if( ( obj == NULL ) || ( obj->port == NULL ) )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }
    // Check if pin is not connected
    if( obj->pin == NC )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f993 3000 	ldrsb.w	r3, [r3]
 800c0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0cc:	d009      	beq.n	800c0e2 <GpioMcuWrite+0x2e>
    {
        return;
    }
    HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6858      	ldr	r0, [r3, #4]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	885b      	ldrh	r3, [r3, #2]
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	b2d2      	uxtb	r2, r2
 800c0da:	4619      	mov	r1, r3
 800c0dc:	f7f6 f8aa 	bl	8002234 <HAL_GPIO_WritePin>
 800c0e0:	e000      	b.n	800c0e4 <GpioMcuWrite+0x30>
        return;
 800c0e2:	bf00      	nop
}
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <EXTI0_IRQHandler>:
    }
    return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
}

void EXTI0_IRQHandler( void )
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c0ee:	f000 fcfd 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 800c0f2:	2001      	movs	r0, #1
 800c0f4:	f7f6 f8b6 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c0f8:	bf00      	nop
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c100:	f000 fcf4 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 800c104:	2002      	movs	r0, #2
 800c106:	f7f6 f8ad 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c10a:	bf00      	nop
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c112:	f000 fceb 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 800c116:	2004      	movs	r0, #4
 800c118:	f7f6 f8a4 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c11c:	bf00      	nop
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c124:	f000 fce2 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 800c128:	2008      	movs	r0, #8
 800c12a:	f7f6 f89b 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c12e:	bf00      	nop
 800c130:	bd80      	pop	{r7, pc}

0800c132 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 800c132:	b580      	push	{r7, lr}
 800c134:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c136:	f000 fcd9 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 800c13a:	2010      	movs	r0, #16
 800c13c:	f7f6 f892 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c140:	bf00      	nop
 800c142:	bd80      	pop	{r7, pc}

0800c144 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler( void )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c148:	f000 fcd0 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 800c14c:	2020      	movs	r0, #32
 800c14e:	f7f6 f889 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 800c152:	2040      	movs	r0, #64	; 0x40
 800c154:	f7f6 f886 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 800c158:	2080      	movs	r0, #128	; 0x80
 800c15a:	f7f6 f883 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 800c15e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c162:	f7f6 f87f 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 800c166:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c16a:	f7f6 f87b 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c16e:	bf00      	nop
 800c170:	bd80      	pop	{r7, pc}

0800c172 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler( void )
{
 800c172:	b580      	push	{r7, lr}
 800c174:	af00      	add	r7, sp, #0
#if !defined( USE_NO_TIMER )
    RtcRecoverMcuStatus( );
 800c176:	f000 fcb9 	bl	800caec <RtcRecoverMcuStatus>
#endif
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 800c17a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c17e:	f7f6 f871 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 800c182:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c186:	f7f6 f86d 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 800c18a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c18e:	f7f6 f869 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 800c192:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c196:	f7f6 f865 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 800c19a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c19e:	f7f6 f861 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 800c1a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c1a6:	f7f6 f85d 	bl	8002264 <HAL_GPIO_EXTI_IRQHandler>
}
 800c1aa:	bf00      	nop
 800c1ac:	bd80      	pop	{r7, pc}
	...

0800c1b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback( uint16_t gpioPin )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	80fb      	strh	r3, [r7, #6]
	if(gpioPin == GPIO_PIN_15) // If The INT Source Is EXTI Line15-10 (B15 Pin)
 800c1ba:	88fb      	ldrh	r3, [r7, #6]
 800c1bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1c0:	d10b      	bne.n	800c1da <HAL_GPIO_EXTI_Callback+0x2a>
    {
		TimerStop(&TxNextPacketTimer);
 800c1c2:	4815      	ldr	r0, [pc, #84]	; (800c218 <HAL_GPIO_EXTI_Callback+0x68>)
 800c1c4:	f004 f8d4 	bl	8010370 <TimerStop>
    	BewegungInterruptAusgeloest = true;
 800c1c8:	4b14      	ldr	r3, [pc, #80]	; (800c21c <HAL_GPIO_EXTI_Callback+0x6c>)
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	701a      	strb	r2, [r3, #0]
    	__HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 800c1ce:	4a14      	ldr	r2, [pc, #80]	; (800c220 <HAL_GPIO_EXTI_Callback+0x70>)
 800c1d0:	88fb      	ldrh	r3, [r7, #6]
 800c1d2:	6153      	str	r3, [r2, #20]
    	TimerStart(&TxNextPacketTimer);
 800c1d4:	4810      	ldr	r0, [pc, #64]	; (800c218 <HAL_GPIO_EXTI_Callback+0x68>)
 800c1d6:	f003 ff83 	bl	80100e0 <TimerStart>
    }

    uint8_t callbackIndex = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	73fb      	strb	r3, [r7, #15]

    if( gpioPin > 0 )
 800c1de:	88fb      	ldrh	r3, [r7, #6]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d009      	beq.n	800c1f8 <HAL_GPIO_EXTI_Callback+0x48>
    {
        while( gpioPin != 0x01 )
 800c1e4:	e005      	b.n	800c1f2 <HAL_GPIO_EXTI_Callback+0x42>
        {
            gpioPin = gpioPin >> 1;
 800c1e6:	88fb      	ldrh	r3, [r7, #6]
 800c1e8:	085b      	lsrs	r3, r3, #1
 800c1ea:	80fb      	strh	r3, [r7, #6]
            callbackIndex++;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	73fb      	strb	r3, [r7, #15]
        while( gpioPin != 0x01 )
 800c1f2:	88fb      	ldrh	r3, [r7, #6]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d1f6      	bne.n	800c1e6 <HAL_GPIO_EXTI_Callback+0x36>
        }
    }

    if( GpioIrq[callbackIndex] != NULL )
 800c1f8:	7bfb      	ldrb	r3, [r7, #15]
 800c1fa:	4a0a      	ldr	r2, [pc, #40]	; (800c224 <HAL_GPIO_EXTI_Callback+0x74>)
 800c1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <HAL_GPIO_EXTI_Callback+0x5e>
    {
        GpioIrq[callbackIndex]( );
 800c204:	7bfb      	ldrb	r3, [r7, #15]
 800c206:	4a07      	ldr	r2, [pc, #28]	; (800c224 <HAL_GPIO_EXTI_Callback+0x74>)
 800c208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c20c:	4798      	blx	r3
    }
}
 800c20e:	bf00      	nop
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20000afc 	.word	0x20000afc
 800c21c:	20000981 	.word	0x20000981
 800c220:	40010400 	.word	0x40010400
 800c224:	20000724 	.word	0x20000724

0800c228 <GpioInit>:
#if defined( BOARD_IOE_EXT )
#include "gpio-ioe.h"
#endif

void GpioInit( Gpio_t *obj, PinNames pin, PinModes mode,  PinConfigs config, PinTypes type, uint32_t value )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af02      	add	r7, sp, #8
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	4608      	mov	r0, r1
 800c232:	4611      	mov	r1, r2
 800c234:	461a      	mov	r2, r3
 800c236:	4603      	mov	r3, r0
 800c238:	70fb      	strb	r3, [r7, #3]
 800c23a:	460b      	mov	r3, r1
 800c23c:	70bb      	strb	r3, [r7, #2]
 800c23e:	4613      	mov	r3, r2
 800c240:	707b      	strb	r3, [r7, #1]
    if( ( uint32_t )( pin >> 4 ) <= 6 )
 800c242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c246:	111b      	asrs	r3, r3, #4
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b06      	cmp	r3, #6
 800c24e:	d80b      	bhi.n	800c268 <GpioInit+0x40>
    {
        GpioMcuInit( obj, pin, mode, config, type, value );
 800c250:	7878      	ldrb	r0, [r7, #1]
 800c252:	78ba      	ldrb	r2, [r7, #2]
 800c254:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	7c3b      	ldrb	r3, [r7, #16]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	4603      	mov	r3, r0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff fd38 	bl	800bcd8 <GpioMcuInit>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeInit( obj, pin, mode, config, type, value );
#endif
    }
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <GpioSetInterrupt>:

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	607b      	str	r3, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	72fb      	strb	r3, [r7, #11]
 800c27e:	4613      	mov	r3, r2
 800c280:	72bb      	strb	r3, [r7, #10]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f993 3000 	ldrsb.w	r3, [r3]
 800c288:	111b      	asrs	r3, r3, #4
 800c28a:	b25b      	sxtb	r3, r3
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2b06      	cmp	r3, #6
 800c290:	d805      	bhi.n	800c29e <GpioSetInterrupt+0x2e>
    {
        GpioMcuSetInterrupt( obj, irqMode, irqPriority, irqHandler );
 800c292:	7aba      	ldrb	r2, [r7, #10]
 800c294:	7af9      	ldrb	r1, [r7, #11]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff fdf9 	bl	800be90 <GpioMcuSetInterrupt>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
#endif
    }
}
 800c29e:	bf00      	nop
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <GpioWrite>:
#endif
    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b082      	sub	sp, #8
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
 800c2ae:	6039      	str	r1, [r7, #0]
    if( ( uint32_t )( obj->pin >> 4 ) <= 6 )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f993 3000 	ldrsb.w	r3, [r3]
 800c2b6:	111b      	asrs	r3, r3, #4
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	2b06      	cmp	r3, #6
 800c2be:	d803      	bhi.n	800c2c8 <GpioWrite+0x22>
    {
        GpioMcuWrite( obj, value );
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f7ff fef6 	bl	800c0b4 <GpioMcuWrite>
#if defined( BOARD_IOE_EXT )
        // IOExt Pin
        GpioIoeWrite( obj, value );
#endif
    }
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <prepareTxFrame>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void prepareTxFrame( uint8_t port )
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
					}
		}
	}
	*/

    appDataSize = 9;
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <prepareTxFrame+0x38>)
 800c2dc:	2209      	movs	r2, #9
 800c2de:	701a      	strb	r2, [r3, #0]
 800c2e0:	4b0a      	ldr	r3, [pc, #40]	; (800c30c <prepareTxFrame+0x3c>)
 800c2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    memcpy(&appData[0], &GNSS_Handle.fLat,4);
 800c2e6:	4a0a      	ldr	r2, [pc, #40]	; (800c310 <prepareTxFrame+0x40>)
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	4b08      	ldr	r3, [pc, #32]	; (800c30c <prepareTxFrame+0x3c>)
 800c2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    memcpy(&appData[4], &GNSS_Handle.fLon,4);
 800c2f0:	4a07      	ldr	r2, [pc, #28]	; (800c310 <prepareTxFrame+0x40>)
 800c2f2:	6053      	str	r3, [r2, #4]
 800c2f4:	4b05      	ldr	r3, [pc, #20]	; (800c30c <prepareTxFrame+0x3c>)
 800c2f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
    memcpy(&appData[8], &GNSS_Handle.flags,4);
 800c2f8:	4a05      	ldr	r2, [pc, #20]	; (800c310 <prepareTxFrame+0x40>)
 800c2fa:	6093      	str	r3, [r2, #8]
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	bc80      	pop	{r7}
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	2000002c 	.word	0x2000002c
 800c30c:	2000109c 	.word	0x2000109c
 800c310:	20000b2c 	.word	0x20000b2c

0800c314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c318:	f7f4 fe5a 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c31c:	f000 f87c 	bl	800c418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c320:	f000 fa38 	bl	800c794 <MX_GPIO_Init>
  MX_DMA_Init();
 800c324:	f000 fa18 	bl	800c758 <MX_DMA_Init>
  MX_RTC_Init();
 800c328:	f000 f92a 	bl	800c580 <MX_RTC_Init>
  MX_SPI1_Init();
 800c32c:	f000 f9b4 	bl	800c698 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800c330:	f000 f9e8 	bl	800c704 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800c334:	f000 f8cc 	bl	800c4d0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  BoardInitMcu();
 800c338:	f7fe ff46 	bl	800b1c8 <BoardInitMcu>
  BewegungssensorInit();
 800c33c:	f7f8 fd90 	bl	8004e60 <BewegungssensorInit>

  GNSS_Init(&GNSS_Handle, &huart1);
 800c340:	492c      	ldr	r1, [pc, #176]	; (800c3f4 <main+0xe0>)
 800c342:	482d      	ldr	r0, [pc, #180]	; (800c3f8 <main+0xe4>)
 800c344:	f004 fa51 	bl	80107ea <GNSS_Init>
  GNSS_LoadConfig(&GNSS_Handle);
 800c348:	482b      	ldr	r0, [pc, #172]	; (800c3f8 <main+0xe4>)
 800c34a:	f004 fa9b 	bl	8010884 <GNSS_LoadConfig>

  deviceState = DEVICE_STATE_INIT;
 800c34e:	4b2b      	ldr	r3, [pc, #172]	; (800c3fc <main+0xe8>)
 800c350:	2200      	movs	r2, #0
 800c352:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	switch( deviceState )
 800c354:	4b29      	ldr	r3, [pc, #164]	; (800c3fc <main+0xe8>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d845      	bhi.n	800c3e8 <main+0xd4>
 800c35c:	a201      	add	r2, pc, #4	; (adr r2, 800c364 <main+0x50>)
 800c35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c362:	bf00      	nop
 800c364:	0800c379 	.word	0x0800c379
 800c368:	0800c391 	.word	0x0800c391
 800c36c:	0800c397 	.word	0x0800c397
 800c370:	0800c3b9 	.word	0x0800c3b9
 800c374:	0800c3e3 	.word	0x0800c3e3
		{
			case DEVICE_STATE_INIT:
			{
				//printDevParam();
				LoraWanInit(loraWanClass,loraWanRegion);
 800c378:	4b21      	ldr	r3, [pc, #132]	; (800c400 <main+0xec>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	4a21      	ldr	r2, [pc, #132]	; (800c404 <main+0xf0>)
 800c37e:	7812      	ldrb	r2, [r2, #0]
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7fd fa94 	bl	80098b0 <LoraWanInit>
				deviceState = DEVICE_STATE_JOIN;
 800c388:	4b1c      	ldr	r3, [pc, #112]	; (800c3fc <main+0xe8>)
 800c38a:	2201      	movs	r2, #1
 800c38c:	701a      	strb	r2, [r3, #0]
				break;
 800c38e:	e02f      	b.n	800c3f0 <main+0xdc>
			}
			case DEVICE_STATE_JOIN:
			{
				LoraWanJoin();
 800c390:	f7fd fb74 	bl	8009a7c <LoraWanJoin>
				break;
 800c394:	e02c      	b.n	800c3f0 <main+0xdc>
			}
			case DEVICE_STATE_SEND:
			{
				if(WurdeBewegt)
 800c396:	4b1c      	ldr	r3, [pc, #112]	; (800c408 <main+0xf4>)
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d008      	beq.n	800c3b0 <main+0x9c>
				{
					prepareTxFrame( appPort );
 800c39e:	4b1b      	ldr	r3, [pc, #108]	; (800c40c <main+0xf8>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7ff ff94 	bl	800c2d0 <prepareTxFrame>
					LoraWanSend();
 800c3a8:	f7fd fbe0 	bl	8009b6c <LoraWanSend>
					SensorAktivieren();
 800c3ac:	f7f8 fd9a 	bl	8004ee4 <SensorAktivieren>
				}

				deviceState = DEVICE_STATE_CYCLE;
 800c3b0:	4b12      	ldr	r3, [pc, #72]	; (800c3fc <main+0xe8>)
 800c3b2:	2203      	movs	r2, #3
 800c3b4:	701a      	strb	r2, [r3, #0]
				break;
 800c3b6:	e01b      	b.n	800c3f0 <main+0xdc>
			}
			case DEVICE_STATE_CYCLE:
			{
				// Schedule next packet transmission
				txDutyCycleTime = appTxDutyCycle + randr( 0, APP_TX_DUTYCYCLE_RND );
 800c3b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f004 f9a9 	bl	8010714 <randr>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4b12      	ldr	r3, [pc, #72]	; (800c410 <main+0xfc>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	4a11      	ldr	r2, [pc, #68]	; (800c414 <main+0x100>)
 800c3ce:	6013      	str	r3, [r2, #0]
				LoraWanCycle(txDutyCycleTime);
 800c3d0:	4b10      	ldr	r3, [pc, #64]	; (800c414 <main+0x100>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fd fbf1 	bl	8009bbc <LoraWanCycle>
				deviceState = DEVICE_STATE_SLEEP;
 800c3da:	4b08      	ldr	r3, [pc, #32]	; (800c3fc <main+0xe8>)
 800c3dc:	2204      	movs	r2, #4
 800c3de:	701a      	strb	r2, [r3, #0]
				break;
 800c3e0:	e006      	b.n	800c3f0 <main+0xdc>
			}
			case DEVICE_STATE_SLEEP:
			{
				TimerLowPowerHandler( );
 800c3e2:	f004 f8c7 	bl	8010574 <TimerLowPowerHandler>
				break;
 800c3e6:	e003      	b.n	800c3f0 <main+0xdc>
			}
			default:
			{
				deviceState = DEVICE_STATE_INIT;
 800c3e8:	4b04      	ldr	r3, [pc, #16]	; (800c3fc <main+0xe8>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	701a      	strb	r2, [r3, #0]
				break;
 800c3ee:	bf00      	nop
  	switch( deviceState )
 800c3f0:	e7b0      	b.n	800c354 <main+0x40>
 800c3f2:	bf00      	nop
 800c3f4:	20001038 	.word	0x20001038
 800c3f8:	2000109c 	.word	0x2000109c
 800c3fc:	20000af8 	.word	0x20000af8
 800c400:	2000076c 	.word	0x2000076c
 800c404:	20000078 	.word	0x20000078
 800c408:	20000980 	.word	0x20000980
 800c40c:	20000082 	.word	0x20000082
 800c410:	2000007c 	.word	0x2000007c
 800c414:	20000b10 	.word	0x20000b10

0800c418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b094      	sub	sp, #80	; 0x50
 800c41c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c41e:	f107 031c 	add.w	r3, r7, #28
 800c422:	2234      	movs	r2, #52	; 0x34
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f005 fdb8 	bl	8011f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c42c:	f107 0308 	add.w	r3, r7, #8
 800c430:	2200      	movs	r2, #0
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	605a      	str	r2, [r3, #4]
 800c436:	609a      	str	r2, [r3, #8]
 800c438:	60da      	str	r2, [r3, #12]
 800c43a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c43c:	463b      	mov	r3, r7
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	605a      	str	r2, [r3, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c444:	4b21      	ldr	r3, [pc, #132]	; (800c4cc <SystemClock_Config+0xb4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800c44c:	4a1f      	ldr	r2, [pc, #124]	; (800c4cc <SystemClock_Config+0xb4>)
 800c44e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c452:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800c454:	2306      	movs	r3, #6
 800c456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c458:	2301      	movs	r3, #1
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c45c:	2301      	movs	r3, #1
 800c45e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c460:	2310      	movs	r3, #16
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c464:	2300      	movs	r3, #0
 800c466:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c468:	f107 031c 	add.w	r3, r7, #28
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f5 ff8d 	bl	800238c <HAL_RCC_OscConfig>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <SystemClock_Config+0x64>
  {
    Error_Handler();
 800c478:	f000 fa08 	bl	800c88c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c47c:	230f      	movs	r3, #15
 800c47e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c480:	2301      	movs	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c484:	2300      	movs	r3, #0
 800c486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c488:	2300      	movs	r3, #0
 800c48a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c48c:	2300      	movs	r3, #0
 800c48e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f7f6 faa8 	bl	80029ec <HAL_RCC_ClockConfig>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800c4a2:	f000 f9f3 	bl	800c88c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c4aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c4ae:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c4b0:	463b      	mov	r3, r7
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7f6 fd2e 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800c4be:	f000 f9e5 	bl	800c88c <Error_Handler>
  }
}
 800c4c2:	bf00      	nop
 800c4c4:	3750      	adds	r7, #80	; 0x50
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	40007000 	.word	0x40007000

0800c4d0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c4d6:	1d3b      	adds	r3, r7, #4
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
 800c4dc:	605a      	str	r2, [r3, #4]
 800c4de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800c4e0:	4b25      	ldr	r3, [pc, #148]	; (800c578 <MX_ADC_Init+0xa8>)
 800c4e2:	4a26      	ldr	r2, [pc, #152]	; (800c57c <MX_ADC_Init+0xac>)
 800c4e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800c4e6:	4b24      	ldr	r3, [pc, #144]	; (800c578 <MX_ADC_Init+0xa8>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c4ec:	4b22      	ldr	r3, [pc, #136]	; (800c578 <MX_ADC_Init+0xa8>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <MX_ADC_Init+0xa8>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800c4f8:	4b1f      	ldr	r3, [pc, #124]	; (800c578 <MX_ADC_Init+0xa8>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c4fe:	4b1e      	ldr	r3, [pc, #120]	; (800c578 <MX_ADC_Init+0xa8>)
 800c500:	2200      	movs	r2, #0
 800c502:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800c504:	4b1c      	ldr	r3, [pc, #112]	; (800c578 <MX_ADC_Init+0xa8>)
 800c506:	2200      	movs	r2, #0
 800c508:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800c50a:	4b1b      	ldr	r3, [pc, #108]	; (800c578 <MX_ADC_Init+0xa8>)
 800c50c:	2200      	movs	r2, #0
 800c50e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800c510:	4b19      	ldr	r3, [pc, #100]	; (800c578 <MX_ADC_Init+0xa8>)
 800c512:	2200      	movs	r2, #0
 800c514:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800c516:	4b18      	ldr	r3, [pc, #96]	; (800c578 <MX_ADC_Init+0xa8>)
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800c51e:	4b16      	ldr	r3, [pc, #88]	; (800c578 <MX_ADC_Init+0xa8>)
 800c520:	2201      	movs	r2, #1
 800c522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800c524:	4b14      	ldr	r3, [pc, #80]	; (800c578 <MX_ADC_Init+0xa8>)
 800c526:	2200      	movs	r2, #0
 800c528:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c52c:	4b12      	ldr	r3, [pc, #72]	; (800c578 <MX_ADC_Init+0xa8>)
 800c52e:	2210      	movs	r2, #16
 800c530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <MX_ADC_Init+0xa8>)
 800c534:	2200      	movs	r2, #0
 800c536:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <MX_ADC_Init+0xa8>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800c540:	480d      	ldr	r0, [pc, #52]	; (800c578 <MX_ADC_Init+0xa8>)
 800c542:	f7f4 fe1b 	bl	800117c <HAL_ADC_Init>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d001      	beq.n	800c550 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800c54c:	f000 f99e 	bl	800c88c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c550:	2302      	movs	r3, #2
 800c552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800c554:	2301      	movs	r3, #1
 800c556:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800c558:	2300      	movs	r3, #0
 800c55a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800c55c:	1d3b      	adds	r3, r7, #4
 800c55e:	4619      	mov	r1, r3
 800c560:	4805      	ldr	r0, [pc, #20]	; (800c578 <MX_ADC_Init+0xa8>)
 800c562:	f7f4 ff51 	bl	8001408 <HAL_ADC_ConfigChannel>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800c56c:	f000 f98e 	bl	800c88c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800c570:	bf00      	nop
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	200011a8 	.word	0x200011a8
 800c57c:	40012400 	.word	0x40012400

0800c580 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b090      	sub	sp, #64	; 0x40
 800c584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
 800c58e:	605a      	str	r2, [r3, #4]
 800c590:	609a      	str	r2, [r3, #8]
 800c592:	60da      	str	r2, [r3, #12]
 800c594:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c596:	2300      	movs	r3, #0
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800c59a:	463b      	mov	r3, r7
 800c59c:	2228      	movs	r2, #40	; 0x28
 800c59e:	2100      	movs	r1, #0
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f005 fcfb 	bl	8011f9c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c5a6:	4b3a      	ldr	r3, [pc, #232]	; (800c690 <MX_RTC_Init+0x110>)
 800c5a8:	4a3a      	ldr	r2, [pc, #232]	; (800c694 <MX_RTC_Init+0x114>)
 800c5aa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c5ac:	4b38      	ldr	r3, [pc, #224]	; (800c690 <MX_RTC_Init+0x110>)
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c5b2:	4b37      	ldr	r3, [pc, #220]	; (800c690 <MX_RTC_Init+0x110>)
 800c5b4:	227f      	movs	r2, #127	; 0x7f
 800c5b6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c5b8:	4b35      	ldr	r3, [pc, #212]	; (800c690 <MX_RTC_Init+0x110>)
 800c5ba:	22ff      	movs	r2, #255	; 0xff
 800c5bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c5be:	4b34      	ldr	r3, [pc, #208]	; (800c690 <MX_RTC_Init+0x110>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c5c4:	4b32      	ldr	r3, [pc, #200]	; (800c690 <MX_RTC_Init+0x110>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c5ca:	4b31      	ldr	r3, [pc, #196]	; (800c690 <MX_RTC_Init+0x110>)
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c5d0:	482f      	ldr	r0, [pc, #188]	; (800c690 <MX_RTC_Init+0x110>)
 800c5d2:	f7f6 fd6d 	bl	80030b0 <HAL_RTC_Init>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800c5dc:	f000 f956 	bl	800c88c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800c5fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5fe:	2201      	movs	r2, #1
 800c600:	4619      	mov	r1, r3
 800c602:	4823      	ldr	r0, [pc, #140]	; (800c690 <MX_RTC_Init+0x110>)
 800c604:	f7f6 fde5 	bl	80031d2 <HAL_RTC_SetTime>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800c60e:	f000 f93d 	bl	800c88c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c612:	2301      	movs	r3, #1
 800c614:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800c618:	2301      	movs	r3, #1
 800c61a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800c61e:	2301      	movs	r3, #1
 800c620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800c624:	2300      	movs	r3, #0
 800c626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800c62a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c62e:	2201      	movs	r2, #1
 800c630:	4619      	mov	r1, r3
 800c632:	4817      	ldr	r0, [pc, #92]	; (800c690 <MX_RTC_Init+0x110>)
 800c634:	f7f6 fede 	bl	80033f4 <HAL_RTC_SetDate>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800c63e:	f000 f925 	bl	800c88c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800c642:	2300      	movs	r3, #0
 800c644:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800c646:	2300      	movs	r3, #0
 800c648:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800c64e:	2300      	movs	r3, #0
 800c650:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c652:	2300      	movs	r3, #0
 800c654:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800c65e:	2300      	movs	r3, #0
 800c660:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800c662:	2300      	movs	r3, #0
 800c664:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800c666:	2301      	movs	r3, #1
 800c668:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800c66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800c672:	463b      	mov	r3, r7
 800c674:	2201      	movs	r2, #1
 800c676:	4619      	mov	r1, r3
 800c678:	4805      	ldr	r0, [pc, #20]	; (800c690 <MX_RTC_Init+0x110>)
 800c67a:	f7f6 ffa6 	bl	80035ca <HAL_RTC_SetAlarm>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800c684:	f000 f902 	bl	800c88c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c688:	bf00      	nop
 800c68a:	3740      	adds	r7, #64	; 0x40
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	2000107c 	.word	0x2000107c
 800c694:	40002800 	.word	0x40002800

0800c698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800c69c:	4b17      	ldr	r3, [pc, #92]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c69e:	4a18      	ldr	r2, [pc, #96]	; (800c700 <MX_SPI1_Init+0x68>)
 800c6a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c6a2:	4b16      	ldr	r3, [pc, #88]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800c6a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c6aa:	4b14      	ldr	r3, [pc, #80]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c6b0:	4b12      	ldr	r3, [pc, #72]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c6b6:	4b11      	ldr	r3, [pc, #68]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c6c2:	4b0e      	ldr	r3, [pc, #56]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c6ca:	4b0c      	ldr	r3, [pc, #48]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c6d0:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c6d6:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6d8:	2200      	movs	r2, #0
 800c6da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6dc:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c6e2:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6e4:	220a      	movs	r2, #10
 800c6e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c6e8:	4804      	ldr	r0, [pc, #16]	; (800c6fc <MX_SPI1_Init+0x64>)
 800c6ea:	f7f7 fc10 	bl	8003f0e <HAL_SPI_Init>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d001      	beq.n	800c6f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800c6f4:	f000 f8ca 	bl	800c88c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800c6f8:	bf00      	nop
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20001150 	.word	0x20001150
 800c700:	40013000 	.word	0x40013000

0800c704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c708:	4b11      	ldr	r3, [pc, #68]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c70a:	4a12      	ldr	r2, [pc, #72]	; (800c754 <MX_USART1_UART_Init+0x50>)
 800c70c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800c70e:	4b10      	ldr	r3, [pc, #64]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c716:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c718:	2200      	movs	r2, #0
 800c71a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c71c:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c71e:	2200      	movs	r2, #0
 800c720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c722:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c724:	2200      	movs	r2, #0
 800c726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c728:	4b09      	ldr	r3, [pc, #36]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c72a:	220c      	movs	r2, #12
 800c72c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c72e:	4b08      	ldr	r3, [pc, #32]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c730:	2200      	movs	r2, #0
 800c732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c734:	4b06      	ldr	r3, [pc, #24]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c736:	2200      	movs	r2, #0
 800c738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c73a:	4805      	ldr	r0, [pc, #20]	; (800c750 <MX_USART1_UART_Init+0x4c>)
 800c73c:	f7f7 fc98 	bl	8004070 <HAL_UART_Init>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c746:	f000 f8a1 	bl	800c88c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c74a:	bf00      	nop
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20001038 	.word	0x20001038
 800c754:	40013800 	.word	0x40013800

0800c758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c75e:	4b0c      	ldr	r3, [pc, #48]	; (800c790 <MX_DMA_Init+0x38>)
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	4a0b      	ldr	r2, [pc, #44]	; (800c790 <MX_DMA_Init+0x38>)
 800c764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c768:	61d3      	str	r3, [r2, #28]
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <MX_DMA_Init+0x38>)
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c772:	607b      	str	r3, [r7, #4]
 800c774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800c776:	2200      	movs	r2, #0
 800c778:	2100      	movs	r1, #0
 800c77a:	200e      	movs	r0, #14
 800c77c:	f7f5 f86b 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800c780:	200e      	movs	r0, #14
 800c782:	f7f5 f884 	bl	800188e <HAL_NVIC_EnableIRQ>

}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	40023800 	.word	0x40023800

0800c794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b08a      	sub	sp, #40	; 0x28
 800c798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c79a:	f107 0314 	add.w	r3, r7, #20
 800c79e:	2200      	movs	r2, #0
 800c7a0:	601a      	str	r2, [r3, #0]
 800c7a2:	605a      	str	r2, [r3, #4]
 800c7a4:	609a      	str	r2, [r3, #8]
 800c7a6:	60da      	str	r2, [r3, #12]
 800c7a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c7aa:	4b2f      	ldr	r3, [pc, #188]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	4a2e      	ldr	r2, [pc, #184]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7b0:	f043 0304 	orr.w	r3, r3, #4
 800c7b4:	61d3      	str	r3, [r2, #28]
 800c7b6:	4b2c      	ldr	r3, [pc, #176]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	f003 0304 	and.w	r3, r3, #4
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c7c2:	4b29      	ldr	r3, [pc, #164]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	4a28      	ldr	r2, [pc, #160]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7c8:	f043 0320 	orr.w	r3, r3, #32
 800c7cc:	61d3      	str	r3, [r2, #28]
 800c7ce:	4b26      	ldr	r3, [pc, #152]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7d0:	69db      	ldr	r3, [r3, #28]
 800c7d2:	f003 0320 	and.w	r3, r3, #32
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7da:	4b23      	ldr	r3, [pc, #140]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	4a22      	ldr	r2, [pc, #136]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7e0:	f043 0301 	orr.w	r3, r3, #1
 800c7e4:	61d3      	str	r3, [r2, #28]
 800c7e6:	4b20      	ldr	r3, [pc, #128]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7e8:	69db      	ldr	r3, [r3, #28]
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	60bb      	str	r3, [r7, #8]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	4a1c      	ldr	r2, [pc, #112]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c7f8:	f043 0302 	orr.w	r3, r3, #2
 800c7fc:	61d3      	str	r3, [r2, #28]
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <MX_GPIO_Init+0xd4>)
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	f003 0302 	and.w	r3, r3, #2
 800c806:	607b      	str	r3, [r7, #4]
 800c808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3, GPIO_PIN_RESET);
 800c80a:	2200      	movs	r2, #0
 800c80c:	f244 0108 	movw	r1, #16392	; 0x4008
 800c810:	4816      	ldr	r0, [pc, #88]	; (800c86c <MX_GPIO_Init+0xd8>)
 800c812:	f7f5 fd0f 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3;
 800c816:	f244 0308 	movw	r3, #16392	; 0x4008
 800c81a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c81c:	2301      	movs	r3, #1
 800c81e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c820:	2300      	movs	r3, #0
 800c822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c824:	2300      	movs	r3, #0
 800c826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c828:	f107 0314 	add.w	r3, r7, #20
 800c82c:	4619      	mov	r1, r3
 800c82e:	480f      	ldr	r0, [pc, #60]	; (800c86c <MX_GPIO_Init+0xd8>)
 800c830:	f7f5 faa0 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800c834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c83a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800c83e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c844:	f107 0314 	add.w	r3, r7, #20
 800c848:	4619      	mov	r1, r3
 800c84a:	4808      	ldr	r0, [pc, #32]	; (800c86c <MX_GPIO_Init+0xd8>)
 800c84c:	f7f5 fa92 	bl	8001d74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	2028      	movs	r0, #40	; 0x28
 800c856:	f7f4 fffe 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800c85a:	2028      	movs	r0, #40	; 0x28
 800c85c:	f7f5 f817 	bl	800188e <HAL_NVIC_EnableIRQ>
}
 800c860:	bf00      	nop
 800c862:	3728      	adds	r7, #40	; 0x28
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	40023800 	.word	0x40023800
 800c86c:	40020400 	.word	0x40020400

0800c870 <SetappTxDutyCycleInit>:

/* USER CODE BEGIN 4 */
void SetappTxDutyCycleInit(uint32_t newDutyCycle)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
	appTxDutyCycle = newDutyCycle;
 800c878:	4a03      	ldr	r2, [pc, #12]	; (800c888 <SetappTxDutyCycleInit+0x18>)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6013      	str	r3, [r2, #0]
}
 800c87e:	bf00      	nop
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	bc80      	pop	{r7}
 800c886:	4770      	bx	lr
 800c888:	2000007c 	.word	0x2000007c

0800c88c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c88c:	b480      	push	{r7}
 800c88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c890:	bf00      	nop
 800c892:	46bd      	mov	sp, r7
 800c894:	bc80      	pop	{r7}
 800c896:	4770      	bx	lr

0800c898 <RtcInit>:
 * \param[IN] year Calendar current year
 */
static void RtcCheckCalendarRollOver( uint8_t year );

void RtcInit( void )
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af00      	add	r7, sp, #0
    RtcCalendar_t rtcInit;

    if( RtcInitialized == false )
 800c89e:	4b29      	ldr	r3, [pc, #164]	; (800c944 <RtcInit+0xac>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	f083 0301 	eor.w	r3, r3, #1
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d047      	beq.n	800c93c <RtcInit+0xa4>
    {
        __HAL_RCC_RTC_ENABLE( );
 800c8ac:	4b26      	ldr	r3, [pc, #152]	; (800c948 <RtcInit+0xb0>)
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance = RTC;
 800c8b2:	4b26      	ldr	r3, [pc, #152]	; (800c94c <RtcInit+0xb4>)
 800c8b4:	4a26      	ldr	r2, [pc, #152]	; (800c950 <RtcInit+0xb8>)
 800c8b6:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800c8b8:	4b24      	ldr	r3, [pc, #144]	; (800c94c <RtcInit+0xb4>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]

        RtcHandle.Init.AsynchPrediv = 3;
 800c8be:	4b23      	ldr	r3, [pc, #140]	; (800c94c <RtcInit+0xb4>)
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv = 3;
 800c8c4:	4b21      	ldr	r3, [pc, #132]	; (800c94c <RtcInit+0xb4>)
 800c8c6:	2203      	movs	r2, #3
 800c8c8:	60da      	str	r2, [r3, #12]

        RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c8ca:	4b20      	ldr	r3, [pc, #128]	; (800c94c <RtcInit+0xb4>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c8d0:	4b1e      	ldr	r3, [pc, #120]	; (800c94c <RtcInit+0xb4>)
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c8d6:	4b1d      	ldr	r3, [pc, #116]	; (800c94c <RtcInit+0xb4>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 800c8dc:	481b      	ldr	r0, [pc, #108]	; (800c94c <RtcInit+0xb4>)
 800c8de:	f7f6 fbe7 	bl	80030b0 <HAL_RTC_Init>

        // Set Date: Friday 1st of January 2000
        rtcInit.CalendarDate.Year = 0;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	727b      	strb	r3, [r7, #9]
        rtcInit.CalendarDate.Month = 1;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	71fb      	strb	r3, [r7, #7]
        rtcInit.CalendarDate.Date = 1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	723b      	strb	r3, [r7, #8]
        rtcInit.CalendarDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800c8ee:	2306      	movs	r3, #6
 800c8f0:	71bb      	strb	r3, [r7, #6]
        HAL_RTC_SetDate( &RtcHandle, &rtcInit.CalendarDate, RTC_FORMAT_BIN );
 800c8f2:	1d3b      	adds	r3, r7, #4
 800c8f4:	3302      	adds	r3, #2
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4814      	ldr	r0, [pc, #80]	; (800c94c <RtcInit+0xb4>)
 800c8fc:	f7f6 fd7a 	bl	80033f4 <HAL_RTC_SetDate>

        // Set Time: 00:00:00
        rtcInit.CalendarTime.Hours = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	733b      	strb	r3, [r7, #12]
        rtcInit.CalendarTime.Minutes = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	737b      	strb	r3, [r7, #13]
        rtcInit.CalendarTime.Seconds = 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	73bb      	strb	r3, [r7, #14]
        rtcInit.CalendarTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
        rtcInit.CalendarTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c910:	2300      	movs	r3, #0
 800c912:	61bb      	str	r3, [r7, #24]
        rtcInit.CalendarTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c914:	2300      	movs	r3, #0
 800c916:	61fb      	str	r3, [r7, #28]
        HAL_RTC_SetTime( &RtcHandle, &rtcInit.CalendarTime, RTC_FORMAT_BIN );
 800c918:	1d3b      	adds	r3, r7, #4
 800c91a:	3308      	adds	r3, #8
 800c91c:	2200      	movs	r2, #0
 800c91e:	4619      	mov	r1, r3
 800c920:	480a      	ldr	r0, [pc, #40]	; (800c94c <RtcInit+0xb4>)
 800c922:	f7f6 fc56 	bl	80031d2 <HAL_RTC_SetTime>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 4, 0 );
 800c926:	2200      	movs	r2, #0
 800c928:	2104      	movs	r1, #4
 800c92a:	2029      	movs	r0, #41	; 0x29
 800c92c:	f7f4 ff93 	bl	8001856 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 800c930:	2029      	movs	r0, #41	; 0x29
 800c932:	f7f4 ffac 	bl	800188e <HAL_NVIC_EnableIRQ>
        RtcInitialized = true;
 800c936:	4b03      	ldr	r3, [pc, #12]	; (800c944 <RtcInit+0xac>)
 800c938:	2201      	movs	r2, #1
 800c93a:	701a      	strb	r2, [r3, #0]
    }
}
 800c93c:	bf00      	nop
 800c93e:	3720      	adds	r7, #32
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20000794 	.word	0x20000794
 800c948:	424706d8 	.word	0x424706d8
 800c94c:	20000774 	.word	0x20000774
 800c950:	40002800 	.word	0x40002800

0800c954 <RtcSetTimeout>:

void RtcSetTimeout( uint32_t timeout )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
    RtcStartWakeUpAlarm( timeout );
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f94f 	bl	800cc00 <RtcStartWakeUpAlarm>
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
	...

0800c96c <RtcGetAdjustedTimeoutValue>:

TimerTime_t RtcGetAdjustedTimeoutValue( uint32_t timeout )
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
    if( timeout > McuWakeUpTime )
 800c974:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <RtcGetAdjustedTimeoutValue+0x60>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d90c      	bls.n	800c998 <RtcGetAdjustedTimeoutValue+0x2c>
    {   // we have waken up from a GPIO and we have lost "McuWakeUpTime" that we need to compensate on next event
        if( NonScheduledWakeUp == true )
 800c97e:	4b14      	ldr	r3, [pc, #80]	; (800c9d0 <RtcGetAdjustedTimeoutValue+0x64>)
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d007      	beq.n	800c998 <RtcGetAdjustedTimeoutValue+0x2c>
        {
            NonScheduledWakeUp = false;
 800c988:	4b11      	ldr	r3, [pc, #68]	; (800c9d0 <RtcGetAdjustedTimeoutValue+0x64>)
 800c98a:	2200      	movs	r2, #0
 800c98c:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800c98e:	4b0f      	ldr	r3, [pc, #60]	; (800c9cc <RtcGetAdjustedTimeoutValue+0x60>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	607b      	str	r3, [r7, #4]
        }
    }

    if( timeout > McuWakeUpTime )
 800c998:	4b0c      	ldr	r3, [pc, #48]	; (800c9cc <RtcGetAdjustedTimeoutValue+0x60>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d90e      	bls.n	800c9c0 <RtcGetAdjustedTimeoutValue+0x54>
    {   // we don't go in Low Power mode for delay below 50ms (needed for LEDs)
        if( timeout < 50 ) // 50 ms
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b31      	cmp	r3, #49	; 0x31
 800c9a6:	d803      	bhi.n	800c9b0 <RtcGetAdjustedTimeoutValue+0x44>
        {
            RtcTimerEventAllowsLowPower = false;
 800c9a8:	4b0a      	ldr	r3, [pc, #40]	; (800c9d4 <RtcGetAdjustedTimeoutValue+0x68>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	701a      	strb	r2, [r3, #0]
 800c9ae:	e007      	b.n	800c9c0 <RtcGetAdjustedTimeoutValue+0x54>
        }
        else
        {
            RtcTimerEventAllowsLowPower = true;
 800c9b0:	4b08      	ldr	r3, [pc, #32]	; (800c9d4 <RtcGetAdjustedTimeoutValue+0x68>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	701a      	strb	r2, [r3, #0]
            timeout -= McuWakeUpTime;
 800c9b6:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <RtcGetAdjustedTimeoutValue+0x60>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	607b      	str	r3, [r7, #4]
        }
    }
    return  timeout;
 800c9c0:	687b      	ldr	r3, [r7, #4]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bc80      	pop	{r7}
 800c9ca:	4770      	bx	lr
 800c9cc:	20000798 	.word	0x20000798
 800c9d0:	20000771 	.word	0x20000771
 800c9d4:	20000772 	.word	0x20000772

0800c9d8 <RtcGetTimerValue>:

TimerTime_t RtcGetTimerValue( void )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	af00      	add	r7, sp, #0
    return( RtcConvertCalendarTickToTimerTime( NULL ) );
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f000 fb33 	bl	800d048 <RtcConvertCalendarTickToTimerTime>
 800c9e2:	4603      	mov	r3, r0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <RtcGetElapsedAlarmTime>:

TimerTime_t RtcGetElapsedAlarmTime( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
    TimerTime_t currentTime = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	607b      	str	r3, [r7, #4]
    TimerTime_t contextTime = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	603b      	str	r3, [r7, #0]

    currentTime = RtcConvertCalendarTickToTimerTime( NULL );
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f000 fb26 	bl	800d048 <RtcConvertCalendarTickToTimerTime>
 800c9fc:	6078      	str	r0, [r7, #4]
    contextTime = RtcConvertCalendarTickToTimerTime( &RtcCalendarContext );
 800c9fe:	480a      	ldr	r0, [pc, #40]	; (800ca28 <RtcGetElapsedAlarmTime+0x40>)
 800ca00:	f000 fb22 	bl	800d048 <RtcConvertCalendarTickToTimerTime>
 800ca04:	6038      	str	r0, [r7, #0]

    if( currentTime < contextTime )
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d204      	bcs.n	800ca18 <RtcGetElapsedAlarmTime+0x30>
    {
        return( currentTime + ( 0xFFFFFFFF - contextTime ) );
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	3b01      	subs	r3, #1
 800ca16:	e002      	b.n	800ca1e <RtcGetElapsedAlarmTime+0x36>
    }
    else
    {
        return( currentTime - contextTime );
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	1ad3      	subs	r3, r2, r3
    }
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	200011fc 	.word	0x200011fc

0800ca2c <RtcComputeElapsedTime>:
{
    return( RtcGetTimerValue( ) + futureEventInTime );
}

TimerTime_t RtcComputeElapsedTime( TimerTime_t eventInTime )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
    TimerTime_t elapsedTime = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	60fb      	str	r3, [r7, #12]

    // Needed at boot, cannot compute with 0 or elapsed time will be equal to current time
    if( eventInTime == 0 )
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <RtcComputeElapsedTime+0x16>
    {
        return 0;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	e00f      	b.n	800ca62 <RtcComputeElapsedTime+0x36>
    }

    elapsedTime = RtcConvertCalendarTickToTimerTime( NULL );
 800ca42:	2000      	movs	r0, #0
 800ca44:	f000 fb00 	bl	800d048 <RtcConvertCalendarTickToTimerTime>
 800ca48:	60f8      	str	r0, [r7, #12]

    if( elapsedTime < eventInTime )
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d204      	bcs.n	800ca5c <RtcComputeElapsedTime+0x30>
    { // roll over of the counter
        return( elapsedTime + ( 0xFFFFFFFF - eventInTime ) );
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	e002      	b.n	800ca62 <RtcComputeElapsedTime+0x36>
    }
    else
    {
        return( elapsedTime - eventInTime );
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	1ad3      	subs	r3, r2, r3
    }
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
	...

0800ca6c <BlockLowPowerDuringTask>:

void BlockLowPowerDuringTask ( bool status )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
    if( status == true )
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <BlockLowPowerDuringTask+0x14>
    {
        RtcRecoverMcuStatus( );
 800ca7c:	f000 f836 	bl	800caec <RtcRecoverMcuStatus>
    }
    LowPowerDisableDuringTask = status;
 800ca80:	4a03      	ldr	r2, [pc, #12]	; (800ca90 <BlockLowPowerDuringTask+0x24>)
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	7013      	strb	r3, [r2, #0]
}
 800ca86:	bf00      	nop
 800ca88:	3708      	adds	r7, #8
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20000773 	.word	0x20000773

0800ca94 <RtcEnterLowPowerStopMode>:

void RtcEnterLowPowerStopMode( void )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0
    if( ( LowPowerDisableDuringTask == false ) && ( RtcTimerEventAllowsLowPower == true ) )
 800ca98:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <RtcEnterLowPowerStopMode+0x4c>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f083 0301 	eor.w	r3, r3, #1
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d019      	beq.n	800cada <RtcEnterLowPowerStopMode+0x46>
 800caa6:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <RtcEnterLowPowerStopMode+0x50>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d015      	beq.n	800cada <RtcEnterLowPowerStopMode+0x46>
    {
        BoardDeInitMcu( );
 800caae:	f7fe fbc1 	bl	800b234 <BoardDeInitMcu>

        // Disable the Power Voltage Detector
        HAL_PWR_DisablePVD( );
 800cab2:	f7f5 fbef 	bl	8002294 <HAL_PWR_DisablePVD>
//#warning "Commented for debug!"

        SET_BIT( PWR->CR, PWR_CR_CWUF );
 800cab6:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <RtcEnterLowPowerStopMode+0x54>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a0b      	ldr	r2, [pc, #44]	; (800cae8 <RtcEnterLowPowerStopMode+0x54>)
 800cabc:	f043 0304 	orr.w	r3, r3, #4
 800cac0:	6013      	str	r3, [r2, #0]

        // Enable Ultra low power mode
        HAL_PWREx_EnableUltraLowPower( );
 800cac2:	f7f5 fc48 	bl	8002356 <HAL_PWREx_EnableUltraLowPower>

        // Enable the fast wake up from Ultra low power mode
        HAL_PWREx_EnableFastWakeUp( );
 800cac6:	f7f5 fc2b 	bl	8002320 <HAL_PWREx_EnableFastWakeUp>

        // Enter Stop Mode
        HAL_SuspendTick();
 800caca:	f7f4 fb11 	bl	80010f0 <HAL_SuspendTick>

        HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 800cace:	2101      	movs	r1, #1
 800cad0:	2001      	movs	r0, #1
 800cad2:	f7f5 fbf9 	bl	80022c8 <HAL_PWR_EnterSTOPMode>

        HAL_ResumeTick();
 800cad6:	f7f4 fb19 	bl	800110c <HAL_ResumeTick>

    }
}
 800cada:	bf00      	nop
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20000773 	.word	0x20000773
 800cae4:	20000772 	.word	0x20000772
 800cae8:	40007000 	.word	0x40007000

0800caec <RtcRecoverMcuStatus>:

void RtcRecoverMcuStatus( void )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	af00      	add	r7, sp, #0
    // PWR_FLAG_WU indicates the Alarm has waken-up the MCU
    if( __HAL_PWR_GET_FLAG( PWR_FLAG_WU ) != RESET )
 800caf0:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <RtcRecoverMcuStatus+0x44>)
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d106      	bne.n	800cb0a <RtcRecoverMcuStatus+0x1e>
    {
        __HAL_PWR_CLEAR_FLAG( PWR_FLAG_WU );
 800cafc:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <RtcRecoverMcuStatus+0x44>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a0b      	ldr	r2, [pc, #44]	; (800cb30 <RtcRecoverMcuStatus+0x44>)
 800cb02:	f043 0304 	orr.w	r3, r3, #4
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	e002      	b.n	800cb10 <RtcRecoverMcuStatus+0x24>
    }
    else
    {
        NonScheduledWakeUp = true;
 800cb0a:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <RtcRecoverMcuStatus+0x48>)
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]
    }
    // check the clk source and set to full speed if we are coming from sleep mode
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800cb10:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <RtcRecoverMcuStatus+0x4c>)
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	f003 030c 	and.w	r3, r3, #12
 800cb18:	2b04      	cmp	r3, #4
 800cb1a:	d005      	beq.n	800cb28 <RtcRecoverMcuStatus+0x3c>
        ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_MSI ) )
 800cb1c:	4b06      	ldr	r3, [pc, #24]	; (800cb38 <RtcRecoverMcuStatus+0x4c>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f003 030c 	and.w	r3, r3, #12
    if( ( __HAL_RCC_GET_SYSCLK_SOURCE( ) == RCC_SYSCLKSOURCE_STATUS_HSI ) ||
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d101      	bne.n	800cb2c <RtcRecoverMcuStatus+0x40>
    {
        BoardInitMcu( );
 800cb28:	f7fe fb4e 	bl	800b1c8 <BoardInitMcu>
    }
}
 800cb2c:	bf00      	nop
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	40007000 	.word	0x40007000
 800cb34:	20000771 	.word	0x20000771
 800cb38:	40023800 	.word	0x40023800

0800cb3c <RtcComputeWakeUpTime>:

static void RtcComputeWakeUpTime( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b094      	sub	sp, #80	; 0x50
 800cb40:	af00      	add	r7, sp, #0
    uint32_t start = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t stop = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	64bb      	str	r3, [r7, #72]	; 0x48
    RTC_AlarmTypeDef  alarmRtc;
    RtcCalendar_t now;

    if( WakeUpTimeInitialized == false )
 800cb4a:	4b29      	ldr	r3, [pc, #164]	; (800cbf0 <RtcComputeWakeUpTime+0xb4>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	f083 0301 	eor.w	r3, r3, #1
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d047      	beq.n	800cbe8 <RtcComputeWakeUpTime+0xac>
    {
        now = RtcGetCalendar( );
 800cb58:	1d3b      	adds	r3, r7, #4
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 fb8c 	bl	800d278 <RtcGetCalendar>
        HAL_RTC_GetAlarm( &RtcHandle, &alarmRtc, RTC_ALARM_A, RTC_FORMAT_BIN );
 800cb60:	f107 0120 	add.w	r1, r7, #32
 800cb64:	2300      	movs	r3, #0
 800cb66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb6a:	4822      	ldr	r0, [pc, #136]	; (800cbf4 <RtcComputeWakeUpTime+0xb8>)
 800cb6c:	f7f7 f805 	bl	8003b7a <HAL_RTC_GetAlarm>

        start = alarmRtc.AlarmTime.Seconds + ( SecondsInMinute * alarmRtc.AlarmTime.Minutes ) + ( SecondsInHour * alarmRtc.AlarmTime.Hours );
 800cb70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb74:	461a      	mov	r2, r3
 800cb76:	233c      	movs	r3, #60	; 0x3c
 800cb78:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800cb7c:	fb01 f303 	mul.w	r3, r1, r3
 800cb80:	441a      	add	r2, r3
 800cb82:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cb86:	f897 1020 	ldrb.w	r1, [r7, #32]
 800cb8a:	fb01 f303 	mul.w	r3, r1, r3
 800cb8e:	4413      	add	r3, r2
 800cb90:	64fb      	str	r3, [r7, #76]	; 0x4c
        stop = now.CalendarTime.Seconds + ( SecondsInMinute * now.CalendarTime.Minutes ) + ( SecondsInHour * now.CalendarTime.Hours );
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	461a      	mov	r2, r3
 800cb96:	233c      	movs	r3, #60	; 0x3c
 800cb98:	7b79      	ldrb	r1, [r7, #13]
 800cb9a:	fb01 f303 	mul.w	r3, r1, r3
 800cb9e:	441a      	add	r2, r3
 800cba0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800cba4:	7b39      	ldrb	r1, [r7, #12]
 800cba6:	fb01 f303 	mul.w	r3, r1, r3
 800cbaa:	4413      	add	r3, r2
 800cbac:	64bb      	str	r3, [r7, #72]	; 0x48

        McuWakeUpTime = ceil ( ( stop - start ) * RTC_ALARM_TICK_DURATION );
 800cbae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7f3 fc25 	bl	8000404 <__aeabi_ui2d>
 800cbba:	f04f 0200 	mov.w	r2, #0
 800cbbe:	4b0e      	ldr	r3, [pc, #56]	; (800cbf8 <RtcComputeWakeUpTime+0xbc>)
 800cbc0:	f7f3 fc9a 	bl	80004f8 <__aeabi_dmul>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4610      	mov	r0, r2
 800cbca:	4619      	mov	r1, r3
 800cbcc:	f005 f9f0 	bl	8011fb0 <ceil>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	f7f3 ff50 	bl	8000a7c <__aeabi_d2uiz>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	4a07      	ldr	r2, [pc, #28]	; (800cbfc <RtcComputeWakeUpTime+0xc0>)
 800cbe0:	6013      	str	r3, [r2, #0]

        WakeUpTimeInitialized = true;
 800cbe2:	4b03      	ldr	r3, [pc, #12]	; (800cbf0 <RtcComputeWakeUpTime+0xb4>)
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	701a      	strb	r2, [r3, #0]
    }
}
 800cbe8:	bf00      	nop
 800cbea:	3750      	adds	r7, #80	; 0x50
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20000795 	.word	0x20000795
 800cbf4:	20000774 	.word	0x20000774
 800cbf8:	3fdf4000 	.word	0x3fdf4000
 800cbfc:	20000798 	.word	0x20000798

0800cc00 <RtcStartWakeUpAlarm>:

static void RtcStartWakeUpAlarm( uint32_t timeoutValue )
{
 800cc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc02:	b0a1      	sub	sp, #132	; 0x84
 800cc04:	af06      	add	r7, sp, #24
 800cc06:	6078      	str	r0, [r7, #4]
    RtcCalendar_t now;
    RtcCalendar_t alarmTimer;
    RTC_AlarmTypeDef alarmStructure;

    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800cc08:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cc0c:	4826      	ldr	r0, [pc, #152]	; (800cca8 <RtcStartWakeUpAlarm+0xa8>)
 800cc0e:	f7f6 ff29 	bl	8003a64 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_DeactivateWakeUpTimer( &RtcHandle );
 800cc12:	4825      	ldr	r0, [pc, #148]	; (800cca8 <RtcStartWakeUpAlarm+0xa8>)
 800cc14:	f7f7 f91c 	bl	8003e50 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Load the RTC calendar
    now = RtcGetCalendar( );
 800cc18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 fb2b 	bl	800d278 <RtcGetCalendar>

    // Save the calendar into RtcCalendarContext to be able to calculate the elapsed time
    RtcCalendarContext = now;
 800cc22:	4b22      	ldr	r3, [pc, #136]	; (800ccac <RtcStartWakeUpAlarm+0xac>)
 800cc24:	461d      	mov	r5, r3
 800cc26:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cc2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc2e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cc32:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    // timeoutValue is in ms
    alarmTimer = RtcComputeTimerTimeToAlarmTick( timeoutValue, now );
 800cc36:	f107 0630 	add.w	r6, r7, #48	; 0x30
 800cc3a:	466d      	mov	r5, sp
 800cc3c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800cc40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	602b      	str	r3, [r5, #0]
 800cc48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc4c:	cb0c      	ldmia	r3, {r2, r3}
 800cc4e:	6879      	ldr	r1, [r7, #4]
 800cc50:	4630      	mov	r0, r6
 800cc52:	f000 f82d 	bl	800ccb0 <RtcComputeTimerTimeToAlarmTick>

    alarmStructure.Alarm = RTC_ALARM_A;
 800cc56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    alarmStructure.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	627b      	str	r3, [r7, #36]	; 0x24
    alarmStructure.AlarmMask = RTC_ALARMMASK_NONE;
 800cc60:	2300      	movs	r3, #0
 800cc62:	61fb      	str	r3, [r7, #28]
    alarmStructure.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800cc64:	2300      	movs	r3, #0
 800cc66:	72fb      	strb	r3, [r7, #11]

    alarmStructure.AlarmTime.Seconds = alarmTimer.CalendarTime.Seconds;
 800cc68:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800cc6c:	72bb      	strb	r3, [r7, #10]
    alarmStructure.AlarmTime.Minutes = alarmTimer.CalendarTime.Minutes;
 800cc6e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800cc72:	727b      	strb	r3, [r7, #9]
    alarmStructure.AlarmTime.Hours = alarmTimer.CalendarTime.Hours;
 800cc74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800cc78:	723b      	strb	r3, [r7, #8]
    alarmStructure.AlarmDateWeekDay = alarmTimer.CalendarDate.Date;
 800cc7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800cc7e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    //SubSeconds must be added manual, this part can't config by CubeMX
	alarmStructure.AlarmTime.SubSeconds = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]
	alarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cc86:	2300      	movs	r3, #0
 800cc88:	617b      	str	r3, [r7, #20]
    alarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	61bb      	str	r3, [r7, #24]
    alarmStructure.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	623b      	str	r3, [r7, #32]

    if( HAL_RTC_SetAlarm_IT( &RtcHandle, &alarmStructure, RTC_FORMAT_BIN ) != HAL_OK )
 800cc92:	f107 0308 	add.w	r3, r7, #8
 800cc96:	2200      	movs	r2, #0
 800cc98:	4619      	mov	r1, r3
 800cc9a:	4803      	ldr	r0, [pc, #12]	; (800cca8 <RtcStartWakeUpAlarm+0xa8>)
 800cc9c:	f7f6 fdaa 	bl	80037f4 <HAL_RTC_SetAlarm_IT>
    {
        assert_param( FAIL );
    }
}
 800cca0:	bf00      	nop
 800cca2:	376c      	adds	r7, #108	; 0x6c
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca8:	20000774 	.word	0x20000774
 800ccac:	200011fc 	.word	0x200011fc

0800ccb0 <RtcComputeTimerTimeToAlarmTick>:

static RtcCalendar_t RtcComputeTimerTimeToAlarmTick( TimerTime_t timeCounter, RtcCalendar_t now )
{
 800ccb0:	b082      	sub	sp, #8
 800ccb2:	b5b0      	push	{r4, r5, r7, lr}
 800ccb4:	b092      	sub	sp, #72	; 0x48
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	6039      	str	r1, [r7, #0]
 800ccbc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ccc0:	e881 000c 	stmia.w	r1, {r2, r3}
    RtcCalendar_t calendar = now;
 800ccc4:	f107 040c 	add.w	r4, r7, #12
 800ccc8:	f107 0558 	add.w	r5, r7, #88	; 0x58
 800cccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ccd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    uint16_t seconds = now.CalendarTime.Seconds;
 800ccd8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800ccdc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint16_t minutes = now.CalendarTime.Minutes;
 800cce0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800cce4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    uint16_t hours = now.CalendarTime.Hours;
 800cce8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800ccec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    uint16_t days = now.CalendarDate.Date;
 800ccf0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800ccf4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    double timeoutValueTemp = 0.0;
 800ccf8:	f04f 0200 	mov.w	r2, #0
 800ccfc:	f04f 0300 	mov.w	r3, #0
 800cd00:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double timeoutValue = 0.0;
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double error = 0.0;
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    timeCounter = MIN( timeCounter, ( TimerTime_t )( RTC_ALARM_MAX_NUMBER_OF_DAYS * SecondsInDay * RTC_ALARM_TICK_DURATION ) );
 800cd1c:	4ac2      	ldr	r2, [pc, #776]	; (800d028 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800cd1e:	4613      	mov	r3, r2
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7f3 fb6c 	bl	8000404 <__aeabi_ui2d>
 800cd2c:	f04f 0200 	mov.w	r2, #0
 800cd30:	4bbe      	ldr	r3, [pc, #760]	; (800d02c <RtcComputeTimerTimeToAlarmTick+0x37c>)
 800cd32:	f7f3 fbe1 	bl	80004f8 <__aeabi_dmul>
 800cd36:	4602      	mov	r2, r0
 800cd38:	460b      	mov	r3, r1
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	f7f3 fe9d 	bl	8000a7c <__aeabi_d2uiz>
 800cd42:	4602      	mov	r2, r0
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	4293      	cmp	r3, r2
 800cd48:	bf28      	it	cs
 800cd4a:	4613      	movcs	r3, r2
 800cd4c:	603b      	str	r3, [r7, #0]

    if( timeCounter < 1 )
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <RtcComputeTimerTimeToAlarmTick+0xa8>
    {
        timeCounter = 1;
 800cd54:	2301      	movs	r3, #1
 800cd56:	603b      	str	r3, [r7, #0]
    }

    // timeoutValue is used for complete computation
    timeoutValue = round( timeCounter * RTC_ALARM_TICK_PER_MS );
 800cd58:	6838      	ldr	r0, [r7, #0]
 800cd5a:	f7f3 fb53 	bl	8000404 <__aeabi_ui2d>
 800cd5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d020 <RtcComputeTimerTimeToAlarmTick+0x370>)
 800cd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd64:	f7f3 fbc8 	bl	80004f8 <__aeabi_dmul>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4619      	mov	r1, r3
 800cd70:	f005 fa1e 	bl	80121b0 <round>
 800cd74:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38

    // timeoutValueTemp is used to compensate the cumulating errors in timing far in the future
    timeoutValueTemp =  ( double )timeCounter * RTC_ALARM_TICK_PER_MS;
 800cd78:	6838      	ldr	r0, [r7, #0]
 800cd7a:	f7f3 fb43 	bl	8000404 <__aeabi_ui2d>
 800cd7e:	a3a8      	add	r3, pc, #672	; (adr r3, 800d020 <RtcComputeTimerTimeToAlarmTick+0x370>)
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	f7f3 fbb8 	bl	80004f8 <__aeabi_dmul>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Compute timeoutValue error
    error = timeoutValue - timeoutValueTemp;
 800cd90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cd94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cd98:	f7f3 f9f6 	bl	8000188 <__aeabi_dsub>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Add new error value to the cumulated value in uS
    TimeoutValueError += ( error  * 1000 );
 800cda4:	4ba2      	ldr	r3, [pc, #648]	; (800d030 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7f3 fb3b 	bl	8000424 <__aeabi_i2d>
 800cdae:	4604      	mov	r4, r0
 800cdb0:	460d      	mov	r5, r1
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	4b9f      	ldr	r3, [pc, #636]	; (800d034 <RtcComputeTimerTimeToAlarmTick+0x384>)
 800cdb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cdbc:	f7f3 fb9c 	bl	80004f8 <__aeabi_dmul>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	f7f3 f9e0 	bl	800018c <__adddf3>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	f7f3 fe2a 	bl	8000a2c <__aeabi_d2iz>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	4a95      	ldr	r2, [pc, #596]	; (800d030 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cddc:	6013      	str	r3, [r2, #0]

    // Correct cumulated error if greater than ( RTC_ALARM_TICK_DURATION * 1000 )
    if( TimeoutValueError >= ( int32_t )( RTC_ALARM_TICK_DURATION * 1000 ) )
 800cdde:	4b94      	ldr	r3, [pc, #592]	; (800d030 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800cde6:	db25      	blt.n	800ce34 <RtcComputeTimerTimeToAlarmTick+0x184>
    {
        TimeoutValueError = TimeoutValueError - ( uint32_t )( RTC_ALARM_TICK_DURATION * 1000 );
 800cde8:	4b91      	ldr	r3, [pc, #580]	; (800d030 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	4b8f      	ldr	r3, [pc, #572]	; (800d030 <RtcComputeTimerTimeToAlarmTick+0x380>)
 800cdf4:	601a      	str	r2, [r3, #0]
        timeoutValue = timeoutValue + 1;
 800cdf6:	f04f 0200 	mov.w	r2, #0
 800cdfa:	4b8f      	ldr	r3, [pc, #572]	; (800d038 <RtcComputeTimerTimeToAlarmTick+0x388>)
 800cdfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ce00:	f7f3 f9c4 	bl	800018c <__adddf3>
 800ce04:	4602      	mov	r2, r0
 800ce06:	460b      	mov	r3, r1
 800ce08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }

    // Convert milliseconds to RTC format and add to now
    while( timeoutValue >= SecondsInDay )
 800ce0c:	e012      	b.n	800ce34 <RtcComputeTimerTimeToAlarmTick+0x184>
    {
        timeoutValue -= SecondsInDay;
 800ce0e:	4b86      	ldr	r3, [pc, #536]	; (800d028 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f3 faf7 	bl	8000404 <__aeabi_ui2d>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ce1e:	f7f3 f9b3 	bl	8000188 <__aeabi_dsub>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        days++;
 800ce2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ce2e:	3301      	adds	r3, #1
 800ce30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( timeoutValue >= SecondsInDay )
 800ce34:	4b7c      	ldr	r3, [pc, #496]	; (800d028 <RtcComputeTimerTimeToAlarmTick+0x378>)
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7f3 fae4 	bl	8000404 <__aeabi_ui2d>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ce44:	f7f3 fdde 	bl	8000a04 <__aeabi_dcmpge>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1df      	bne.n	800ce0e <RtcComputeTimerTimeToAlarmTick+0x15e>
    }

    // Calculate hours
    while( timeoutValue >= SecondsInHour )
 800ce4e:	e013      	b.n	800ce78 <RtcComputeTimerTimeToAlarmTick+0x1c8>
    {
        timeoutValue -= SecondsInHour;
 800ce50:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f3 fae5 	bl	8000424 <__aeabi_i2d>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ce62:	f7f3 f991 	bl	8000188 <__aeabi_dsub>
 800ce66:	4602      	mov	r2, r0
 800ce68:	460b      	mov	r3, r1
 800ce6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        hours++;
 800ce6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ce72:	3301      	adds	r3, #1
 800ce74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( timeoutValue >= SecondsInHour )
 800ce78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7f3 fad1 	bl	8000424 <__aeabi_i2d>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ce8a:	f7f3 fdbb 	bl	8000a04 <__aeabi_dcmpge>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1dd      	bne.n	800ce50 <RtcComputeTimerTimeToAlarmTick+0x1a0>
    }

    // Calculate minutes
    while( timeoutValue >= SecondsInMinute )
 800ce94:	e012      	b.n	800cebc <RtcComputeTimerTimeToAlarmTick+0x20c>
    {
        timeoutValue -= SecondsInMinute;
 800ce96:	233c      	movs	r3, #60	; 0x3c
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7f3 fac3 	bl	8000424 <__aeabi_i2d>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cea6:	f7f3 f96f 	bl	8000188 <__aeabi_dsub>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        minutes++;
 800ceb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( timeoutValue >= SecondsInMinute )
 800cebc:	233c      	movs	r3, #60	; 0x3c
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7f3 fab0 	bl	8000424 <__aeabi_i2d>
 800cec4:	4602      	mov	r2, r0
 800cec6:	460b      	mov	r3, r1
 800cec8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800cecc:	f7f3 fd9a 	bl	8000a04 <__aeabi_dcmpge>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1df      	bne.n	800ce96 <RtcComputeTimerTimeToAlarmTick+0x1e6>
    }

    // Calculate seconds
    seconds += timeoutValue;
 800ced6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7f3 faa2 	bl	8000424 <__aeabi_i2d>
 800cee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cee4:	f7f3 f952 	bl	800018c <__adddf3>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4610      	mov	r0, r2
 800ceee:	4619      	mov	r1, r3
 800cef0:	f7f3 fdc4 	bl	8000a7c <__aeabi_d2uiz>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

    // Correct for modulo
    while( seconds >= 60 )
 800cefa:	e009      	b.n	800cf10 <RtcComputeTimerTimeToAlarmTick+0x260>
    {
        seconds -= 60;
 800cefc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf00:	3b3c      	subs	r3, #60	; 0x3c
 800cf02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        minutes++;
 800cf06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while( seconds >= 60 )
 800cf10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cf14:	2b3b      	cmp	r3, #59	; 0x3b
 800cf16:	d8f1      	bhi.n	800cefc <RtcComputeTimerTimeToAlarmTick+0x24c>
    }

    while( minutes >= 60 )
 800cf18:	e009      	b.n	800cf2e <RtcComputeTimerTimeToAlarmTick+0x27e>
    {
        minutes -= 60;
 800cf1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf1e:	3b3c      	subs	r3, #60	; 0x3c
 800cf20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        hours++;
 800cf24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cf28:	3301      	adds	r3, #1
 800cf2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    while( minutes >= 60 )
 800cf2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cf32:	2b3b      	cmp	r3, #59	; 0x3b
 800cf34:	d8f1      	bhi.n	800cf1a <RtcComputeTimerTimeToAlarmTick+0x26a>
    }

    while( hours >= HoursInDay )
 800cf36:	e00b      	b.n	800cf50 <RtcComputeTimerTimeToAlarmTick+0x2a0>
    {
        hours -= HoursInDay;
 800cf38:	2318      	movs	r3, #24
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        days++;
 800cf46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    while( hours >= HoursInDay )
 800cf50:	2318      	movs	r3, #24
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d2ed      	bcs.n	800cf38 <RtcComputeTimerTimeToAlarmTick+0x288>
    }

    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + Century ) % 4 ) == 0 )
 800cf5c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d009      	beq.n	800cf78 <RtcComputeTimerTimeToAlarmTick+0x2c8>
 800cf64:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800cf68:	461a      	mov	r2, r3
 800cf6a:	4b34      	ldr	r3, [pc, #208]	; (800d03c <RtcComputeTimerTimeToAlarmTick+0x38c>)
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	4413      	add	r3, r2
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d118      	bne.n	800cfaa <RtcComputeTimerTimeToAlarmTick+0x2fa>
    {
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800cf78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cf7c:	3b01      	subs	r3, #1
 800cf7e:	4a30      	ldr	r2, [pc, #192]	; (800d040 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800cf80:	5cd3      	ldrb	r3, [r2, r3]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d926      	bls.n	800cfda <RtcComputeTimerTimeToAlarmTick+0x32a>
        {
            days = days % DaysInMonthLeapYear[now.CalendarDate.Month - 1];
 800cf8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cf90:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800cf94:	3a01      	subs	r2, #1
 800cf96:	492a      	ldr	r1, [pc, #168]	; (800d040 <RtcComputeTimerTimeToAlarmTick+0x390>)
 800cf98:	5c8a      	ldrb	r2, [r1, r2]
 800cf9a:	fb93 f1f2 	sdiv	r1, r3, r2
 800cf9e:	fb02 f201 	mul.w	r2, r2, r1
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        if( days > DaysInMonthLeapYear[now.CalendarDate.Month - 1] )
 800cfa8:	e017      	b.n	800cfda <RtcComputeTimerTimeToAlarmTick+0x32a>
        }
    }
    else
    {
        if( days > DaysInMonth[now.CalendarDate.Month - 1] )
 800cfaa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4a24      	ldr	r2, [pc, #144]	; (800d044 <RtcComputeTimerTimeToAlarmTick+0x394>)
 800cfb2:	5cd3      	ldrb	r3, [r2, r3]
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d90d      	bls.n	800cfda <RtcComputeTimerTimeToAlarmTick+0x32a>
        {
            days = days % DaysInMonth[now.CalendarDate.Month - 1];
 800cfbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cfc2:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800cfc6:	3a01      	subs	r2, #1
 800cfc8:	491e      	ldr	r1, [pc, #120]	; (800d044 <RtcComputeTimerTimeToAlarmTick+0x394>)
 800cfca:	5c8a      	ldrb	r2, [r1, r2]
 800cfcc:	fb93 f1f2 	sdiv	r1, r3, r2
 800cfd0:	fb02 f201 	mul.w	r2, r2, r1
 800cfd4:	1a9b      	subs	r3, r3, r2
 800cfd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        }
    }

    calendar.CalendarTime.Seconds = seconds;
 800cfda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	75bb      	strb	r3, [r7, #22]
    calendar.CalendarTime.Minutes = minutes;
 800cfe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	757b      	strb	r3, [r7, #21]
    calendar.CalendarTime.Hours = hours;
 800cfea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	753b      	strb	r3, [r7, #20]
    calendar.CalendarDate.Date = days;
 800cff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	743b      	strb	r3, [r7, #16]

    return calendar;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	461d      	mov	r5, r3
 800cffe:	f107 040c 	add.w	r4, r7, #12
 800d002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d006:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d00a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	3748      	adds	r7, #72	; 0x48
 800d012:	46bd      	mov	sp, r7
 800d014:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d018:	b002      	add	sp, #8
 800d01a:	4770      	bx	lr
 800d01c:	f3af 8000 	nop.w
 800d020:	d2f1a9fc 	.word	0xd2f1a9fc
 800d024:	4000624d 	.word	0x4000624d
 800d028:	00015180 	.word	0x00015180
 800d02c:	3fdf4000 	.word	0x3fdf4000
 800d030:	2000079c 	.word	0x2000079c
 800d034:	408f4000 	.word	0x408f4000
 800d038:	3ff00000 	.word	0x3ff00000
 800d03c:	2000076e 	.word	0x2000076e
 800d040:	080127c4 	.word	0x080127c4
 800d044:	080127b8 	.word	0x080127b8

0800d048 <RtcConvertCalendarTickToTimerTime>:

    return calendar;
}

static TimerTime_t RtcConvertCalendarTickToTimerTime( RtcCalendar_t *calendar )
{
 800d048:	b5b0      	push	{r4, r5, r7, lr}
 800d04a:	b08e      	sub	sp, #56	; 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
    TimerTime_t timeCounter = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	62bb      	str	r3, [r7, #40]	; 0x28
    RtcCalendar_t now;
    double timeCounterTemp = 0.0;
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	f04f 0300 	mov.w	r3, #0
 800d05c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Passing a NULL pointer will compute from "now" else,
    // compute from the given calendar value
    if( calendar == NULL )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d105      	bne.n	800d072 <RtcConvertCalendarTickToTimerTime+0x2a>
    {
        now = RtcGetCalendar( );
 800d066:	f107 030c 	add.w	r3, r7, #12
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f904 	bl	800d278 <RtcGetCalendar>
 800d070:	e009      	b.n	800d086 <RtcConvertCalendarTickToTimerTime+0x3e>
    }
    else
    {
        now = *calendar;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f107 040c 	add.w	r4, r7, #12
 800d078:	461d      	mov	r5, r3
 800d07a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d07c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d07e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }

    // Years (calculation valid up to year 2099)
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800d086:	2300      	movs	r3, #0
 800d088:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d08a:	e02c      	b.n	800d0e6 <RtcConvertCalendarTickToTimerTime+0x9e>
    {
        if( ( i == 0 ) || ( i % 4 ) == 0 )
 800d08c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d090:	2b00      	cmp	r3, #0
 800d092:	d005      	beq.n	800d0a0 <RtcConvertCalendarTickToTimerTime+0x58>
 800d094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d096:	f003 0303 	and.w	r3, r3, #3
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10e      	bne.n	800d0be <RtcConvertCalendarTickToTimerTime+0x76>
        {
            timeCounterTemp += ( double )SecondsInLeapYear;
 800d0a0:	4b5d      	ldr	r3, [pc, #372]	; (800d218 <RtcConvertCalendarTickToTimerTime+0x1d0>)
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f3 f9ae 	bl	8000404 <__aeabi_ui2d>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d0b0:	f7f3 f86c 	bl	800018c <__adddf3>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800d0bc:	e00d      	b.n	800d0da <RtcConvertCalendarTickToTimerTime+0x92>
        }
        else
        {
            timeCounterTemp += ( double )SecondsInYear;
 800d0be:	4b57      	ldr	r3, [pc, #348]	; (800d21c <RtcConvertCalendarTickToTimerTime+0x1d4>)
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7f3 f99f 	bl	8000404 <__aeabi_ui2d>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d0ce:	f7f3 f85d 	bl	800018c <__adddf3>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for( int16_t i = 0; i < ( now.CalendarDate.Year + now.CalendarCentury ); i++ )
 800d0da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d0e6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800d0ea:	7c7b      	ldrb	r3, [r7, #17]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	89bb      	ldrh	r3, [r7, #12]
 800d0f0:	440b      	add	r3, r1
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	dbca      	blt.n	800d08c <RtcConvertCalendarTickToTimerTime+0x44>
        }
    }

    // Months (calculation valid up to year 2099)*/
    if( ( now.CalendarDate.Year == 0 ) || ( ( now.CalendarDate.Year + now.CalendarCentury ) % 4 ) == 0 )
 800d0f6:	7c7b      	ldrb	r3, [r7, #17]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d007      	beq.n	800d10c <RtcConvertCalendarTickToTimerTime+0xc4>
 800d0fc:	7c7b      	ldrb	r3, [r7, #17]
 800d0fe:	461a      	mov	r2, r3
 800d100:	89bb      	ldrh	r3, [r7, #12]
 800d102:	4413      	add	r3, r2
 800d104:	f003 0303 	and.w	r3, r3, #3
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d124      	bne.n	800d156 <RtcConvertCalendarTickToTimerTime+0x10e>
    {
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800d10c:	2300      	movs	r3, #0
 800d10e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800d112:	e019      	b.n	800d148 <RtcConvertCalendarTickToTimerTime+0x100>
        {
            timeCounterTemp += ( double )( DaysInMonthLeapYear[i] * SecondsInDay );
 800d114:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d118:	4a41      	ldr	r2, [pc, #260]	; (800d220 <RtcConvertCalendarTickToTimerTime+0x1d8>)
 800d11a:	5cd3      	ldrb	r3, [r2, r3]
 800d11c:	461a      	mov	r2, r3
 800d11e:	4b41      	ldr	r3, [pc, #260]	; (800d224 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d120:	fb03 f302 	mul.w	r3, r3, r2
 800d124:	4618      	mov	r0, r3
 800d126:	f7f3 f96d 	bl	8000404 <__aeabi_ui2d>
 800d12a:	4602      	mov	r2, r0
 800d12c:	460b      	mov	r3, r1
 800d12e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d132:	f7f3 f82b 	bl	800018c <__adddf3>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0; i < ( now.CalendarDate.Month - 1 ); i++ )
 800d13e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d142:	3301      	adds	r3, #1
 800d144:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800d148:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	3b01      	subs	r3, #1
 800d150:	429a      	cmp	r2, r3
 800d152:	dbdf      	blt.n	800d114 <RtcConvertCalendarTickToTimerTime+0xcc>
 800d154:	e023      	b.n	800d19e <RtcConvertCalendarTickToTimerTime+0x156>
        }
    }
    else
    {
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800d156:	2300      	movs	r3, #0
 800d158:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800d15c:	e019      	b.n	800d192 <RtcConvertCalendarTickToTimerTime+0x14a>
        {
            timeCounterTemp += ( double )( DaysInMonth[i] * SecondsInDay );
 800d15e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d162:	4a31      	ldr	r2, [pc, #196]	; (800d228 <RtcConvertCalendarTickToTimerTime+0x1e0>)
 800d164:	5cd3      	ldrb	r3, [r2, r3]
 800d166:	461a      	mov	r2, r3
 800d168:	4b2e      	ldr	r3, [pc, #184]	; (800d224 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d16a:	fb03 f302 	mul.w	r3, r3, r2
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f948 	bl	8000404 <__aeabi_ui2d>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d17c:	f7f3 f806 	bl	800018c <__adddf3>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        for( uint8_t i = 0;  i < ( now.CalendarDate.Month - 1 ); i++ )
 800d188:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d18c:	3301      	adds	r3, #1
 800d18e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800d192:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	3b01      	subs	r3, #1
 800d19a:	429a      	cmp	r2, r3
 800d19c:	dbdf      	blt.n	800d15e <RtcConvertCalendarTickToTimerTime+0x116>
        }
    }

    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800d19e:	7dbb      	ldrb	r3, [r7, #22]
 800d1a0:	4619      	mov	r1, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800d1a2:	7d3b      	ldrb	r3, [r7, #20]
 800d1a4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800d1a8:	fb02 f203 	mul.w	r2, r2, r3
                     ( ( uint32_t )now.CalendarTime.Minutes * SecondsInMinute ) +
 800d1ac:	7d7b      	ldrb	r3, [r7, #21]
 800d1ae:	203c      	movs	r0, #60	; 0x3c
 800d1b0:	fb00 f303 	mul.w	r3, r0, r3
 800d1b4:	4413      	add	r3, r2
 800d1b6:	18ca      	adds	r2, r1, r3
                     ( ( uint32_t )( now.CalendarDate.Date * SecondsInDay ) ) );
 800d1b8:	7c3b      	ldrb	r3, [r7, #16]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	4b19      	ldr	r3, [pc, #100]	; (800d224 <RtcConvertCalendarTickToTimerTime+0x1dc>)
 800d1be:	fb03 f301 	mul.w	r3, r3, r1
                     ( ( uint32_t )now.CalendarTime.Hours * SecondsInHour ) +
 800d1c2:	4413      	add	r3, r2
    timeCounterTemp += ( double )( ( uint32_t )now.CalendarTime.Seconds +
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7f3 f91d 	bl	8000404 <__aeabi_ui2d>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d1d2:	f7f2 ffdb 	bl	800018c <__adddf3>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounterTemp = ( double )timeCounterTemp * RTC_ALARM_TICK_DURATION;
 800d1de:	f04f 0200 	mov.w	r2, #0
 800d1e2:	4b12      	ldr	r3, [pc, #72]	; (800d22c <RtcConvertCalendarTickToTimerTime+0x1e4>)
 800d1e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d1e8:	f7f3 f986 	bl	80004f8 <__aeabi_dmul>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    timeCounter = round( timeCounterTemp );
 800d1f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d1f8:	f004 ffda 	bl	80121b0 <round>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	4610      	mov	r0, r2
 800d202:	4619      	mov	r1, r3
 800d204:	f7f3 fc3a 	bl	8000a7c <__aeabi_d2uiz>
 800d208:	4603      	mov	r3, r0
 800d20a:	62bb      	str	r3, [r7, #40]	; 0x28
    return ( timeCounter );
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3738      	adds	r7, #56	; 0x38
 800d212:	46bd      	mov	sp, r7
 800d214:	bdb0      	pop	{r4, r5, r7, pc}
 800d216:	bf00      	nop
 800d218:	01e28500 	.word	0x01e28500
 800d21c:	01e13380 	.word	0x01e13380
 800d220:	080127c4 	.word	0x080127c4
 800d224:	00015180 	.word	0x00015180
 800d228:	080127b8 	.word	0x080127b8
 800d22c:	3fdf4000 	.word	0x3fdf4000

0800d230 <RtcCheckCalendarRollOver>:

static void RtcCheckCalendarRollOver( uint8_t year )
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	4603      	mov	r3, r0
 800d238:	71fb      	strb	r3, [r7, #7]
    if( year == 99 )
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	2b63      	cmp	r3, #99	; 0x63
 800d23e:	d102      	bne.n	800d246 <RtcCheckCalendarRollOver+0x16>
    {
        CalendarRollOverReady = true;
 800d240:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <RtcCheckCalendarRollOver+0x40>)
 800d242:	2201      	movs	r2, #1
 800d244:	701a      	strb	r2, [r3, #0]
    }

    if( ( CalendarRollOverReady == true ) && ( ( year + Century ) == Century ) )
 800d246:	4b0a      	ldr	r3, [pc, #40]	; (800d270 <RtcCheckCalendarRollOver+0x40>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00b      	beq.n	800d266 <RtcCheckCalendarRollOver+0x36>
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d108      	bne.n	800d266 <RtcCheckCalendarRollOver+0x36>
    {   // Indicate a roll-over of the calendar
        CalendarRollOverReady = false;
 800d254:	4b06      	ldr	r3, [pc, #24]	; (800d270 <RtcCheckCalendarRollOver+0x40>)
 800d256:	2200      	movs	r2, #0
 800d258:	701a      	strb	r2, [r3, #0]
        Century = Century + 100;
 800d25a:	4b06      	ldr	r3, [pc, #24]	; (800d274 <RtcCheckCalendarRollOver+0x44>)
 800d25c:	881b      	ldrh	r3, [r3, #0]
 800d25e:	3364      	adds	r3, #100	; 0x64
 800d260:	b29a      	uxth	r2, r3
 800d262:	4b04      	ldr	r3, [pc, #16]	; (800d274 <RtcCheckCalendarRollOver+0x44>)
 800d264:	801a      	strh	r2, [r3, #0]
    }
}
 800d266:	bf00      	nop
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bc80      	pop	{r7}
 800d26e:	4770      	bx	lr
 800d270:	20000770 	.word	0x20000770
 800d274:	2000076e 	.word	0x2000076e

0800d278 <RtcGetCalendar>:

static RtcCalendar_t RtcGetCalendar( void )
{
 800d278:	b5b0      	push	{r4, r5, r7, lr}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
    RtcCalendar_t calendar;
    HAL_RTC_GetTime( &RtcHandle, &calendar.CalendarTime, RTC_FORMAT_BIN );
 800d280:	f107 030c 	add.w	r3, r7, #12
 800d284:	3308      	adds	r3, #8
 800d286:	2200      	movs	r2, #0
 800d288:	4619      	mov	r1, r3
 800d28a:	4810      	ldr	r0, [pc, #64]	; (800d2cc <RtcGetCalendar+0x54>)
 800d28c:	f7f6 f855 	bl	800333a <HAL_RTC_GetTime>
    HAL_RTC_GetDate( &RtcHandle, &calendar.CalendarDate, RTC_FORMAT_BIN );
 800d290:	f107 030c 	add.w	r3, r7, #12
 800d294:	3302      	adds	r3, #2
 800d296:	2200      	movs	r2, #0
 800d298:	4619      	mov	r1, r3
 800d29a:	480c      	ldr	r0, [pc, #48]	; (800d2cc <RtcGetCalendar+0x54>)
 800d29c:	f7f6 f948 	bl	8003530 <HAL_RTC_GetDate>
    calendar.CalendarCentury = Century;
 800d2a0:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <RtcGetCalendar+0x58>)
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	81bb      	strh	r3, [r7, #12]
    RtcCheckCalendarRollOver( calendar.CalendarDate.Year );
 800d2a6:	7c7b      	ldrb	r3, [r7, #17]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff ffc1 	bl	800d230 <RtcCheckCalendarRollOver>
    return calendar;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	461d      	mov	r5, r3
 800d2b2:	f107 040c 	add.w	r4, r7, #12
 800d2b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d2ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d2be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	3728      	adds	r7, #40	; 0x28
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20000774 	.word	0x20000774
 800d2d0:	2000076e 	.word	0x2000076e

0800d2d4 <RTC_Alarm_IRQHandler>:

/*!
 * \brief RTC IRQ Handler of the RTC Alarm
 */
void RTC_Alarm_IRQHandler( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
    HAL_RTC_AlarmIRQHandler( &RtcHandle );
 800d2d8:	4809      	ldr	r0, [pc, #36]	; (800d300 <RTC_Alarm_IRQHandler+0x2c>)
 800d2da:	f7f6 fcd9 	bl	8003c90 <HAL_RTC_AlarmIRQHandler>
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800d2de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d2e2:	4807      	ldr	r0, [pc, #28]	; (800d300 <RTC_Alarm_IRQHandler+0x2c>)
 800d2e4:	f7f6 fbbe 	bl	8003a64 <HAL_RTC_DeactivateAlarm>
    RtcRecoverMcuStatus( );
 800d2e8:	f7ff fc00 	bl	800caec <RtcRecoverMcuStatus>
    RtcComputeWakeUpTime( );
 800d2ec:	f7ff fc26 	bl	800cb3c <RtcComputeWakeUpTime>
    BlockLowPowerDuringTask( false );
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	f7ff fbbb 	bl	800ca6c <BlockLowPowerDuringTask>
    TimerIrqHandler( );
 800d2f6:	f002 ffe3 	bl	80102c0 <TimerIrqHandler>
}
 800d2fa:	bf00      	nop
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000774 	.word	0x20000774

0800d304 <SpiInit>:
    SPI_1 = ( uint32_t )SPI1_BASE,
    SPI_2 = ( uint32_t )SPI2_BASE,
}SPIName;

void SpiInit( Spi_t *obj, PinNames mosi, PinNames miso, PinNames sclk, PinNames nss )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af02      	add	r7, sp, #8
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	4608      	mov	r0, r1
 800d30e:	4611      	mov	r1, r2
 800d310:	461a      	mov	r2, r3
 800d312:	4603      	mov	r3, r0
 800d314:	70fb      	strb	r3, [r7, #3]
 800d316:	460b      	mov	r3, r1
 800d318:	70bb      	strb	r3, [r7, #2]
 800d31a:	4613      	mov	r3, r2
 800d31c:	707b      	strb	r3, [r7, #1]
    BoardDisableIrq( );
 800d31e:	f7fd ff2f 	bl	800b180 <BoardDisableIrq>

    // Choose SPI interface according to the given pins
    if( mosi == PA_7 )
 800d322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d326:	2b07      	cmp	r3, #7
 800d328:	d169      	bne.n	800d3fe <SpiInit+0xfa>
    {
        __HAL_RCC_SPI1_FORCE_RESET( );
 800d32a:	4b72      	ldr	r3, [pc, #456]	; (800d4f4 <SpiInit+0x1f0>)
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	4a71      	ldr	r2, [pc, #452]	; (800d4f4 <SpiInit+0x1f0>)
 800d330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d334:	6153      	str	r3, [r2, #20]
        __HAL_RCC_SPI1_RELEASE_RESET( );
 800d336:	4b6f      	ldr	r3, [pc, #444]	; (800d4f4 <SpiInit+0x1f0>)
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	4a6e      	ldr	r2, [pc, #440]	; (800d4f4 <SpiInit+0x1f0>)
 800d33c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d340:	6153      	str	r3, [r2, #20]

        __HAL_RCC_SPI1_CLK_ENABLE( );
 800d342:	4b6c      	ldr	r3, [pc, #432]	; (800d4f4 <SpiInit+0x1f0>)
 800d344:	6a1b      	ldr	r3, [r3, #32]
 800d346:	4a6b      	ldr	r2, [pc, #428]	; (800d4f4 <SpiInit+0x1f0>)
 800d348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d34c:	6213      	str	r3, [r2, #32]
 800d34e:	4b69      	ldr	r3, [pc, #420]	; (800d4f4 <SpiInit+0x1f0>)
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	68fb      	ldr	r3, [r7, #12]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI1_BASE;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a66      	ldr	r2, [pc, #408]	; (800d4f8 <SpiInit+0x1f4>)
 800d35e:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d366:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d36a:	2305      	movs	r3, #5
 800d36c:	9301      	str	r3, [sp, #4]
 800d36e:	2302      	movs	r3, #2
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	2300      	movs	r3, #0
 800d374:	2202      	movs	r2, #2
 800d376:	f7fe ff57 	bl	800c228 <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d380:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d384:	2305      	movs	r3, #5
 800d386:	9301      	str	r3, [sp, #4]
 800d388:	2302      	movs	r3, #2
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	2300      	movs	r3, #0
 800d38e:	2202      	movs	r2, #2
 800d390:	f7fe ff4a 	bl	800c228 <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d39a:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d39e:	2305      	movs	r3, #5
 800d3a0:	9301      	str	r3, [sp, #4]
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	2202      	movs	r2, #2
 800d3aa:	f7fe ff3d 	bl	800c228 <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d3b4:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d3b8:	2305      	movs	r3, #5
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	2301      	movs	r3, #1
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	2202      	movs	r2, #2
 800d3c4:	f7fe ff30 	bl	800c228 <GpioInit>

        if( nss == NC )
 800d3c8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d0:	d10c      	bne.n	800d3ec <SpiInit+0xe8>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3d8:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f8d1 	bl	800d58c <SpiFormat>
 800d3ea:	e075      	b.n	800d4d8 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f8c8 	bl	800d58c <SpiFormat>
 800d3fc:	e06c      	b.n	800d4d8 <SpiInit+0x1d4>
        }
    }
    else if( mosi == PB_15 )
 800d3fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d402:	2b1f      	cmp	r3, #31
 800d404:	d168      	bne.n	800d4d8 <SpiInit+0x1d4>
    {
        __HAL_RCC_SPI2_FORCE_RESET( );
 800d406:	4b3b      	ldr	r3, [pc, #236]	; (800d4f4 <SpiInit+0x1f0>)
 800d408:	699b      	ldr	r3, [r3, #24]
 800d40a:	4a3a      	ldr	r2, [pc, #232]	; (800d4f4 <SpiInit+0x1f0>)
 800d40c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d410:	6193      	str	r3, [r2, #24]
        __HAL_RCC_SPI2_RELEASE_RESET( );
 800d412:	4b38      	ldr	r3, [pc, #224]	; (800d4f4 <SpiInit+0x1f0>)
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	4a37      	ldr	r2, [pc, #220]	; (800d4f4 <SpiInit+0x1f0>)
 800d418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d41c:	6193      	str	r3, [r2, #24]

        __HAL_RCC_SPI2_CLK_ENABLE( );
 800d41e:	4b35      	ldr	r3, [pc, #212]	; (800d4f4 <SpiInit+0x1f0>)
 800d420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d422:	4a34      	ldr	r2, [pc, #208]	; (800d4f4 <SpiInit+0x1f0>)
 800d424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d428:	6253      	str	r3, [r2, #36]	; 0x24
 800d42a:	4b32      	ldr	r3, [pc, #200]	; (800d4f4 <SpiInit+0x1f0>)
 800d42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d432:	60bb      	str	r3, [r7, #8]
 800d434:	68bb      	ldr	r3, [r7, #8]

        obj->Spi.Instance = ( SPI_TypeDef* )SPI2_BASE;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a30      	ldr	r2, [pc, #192]	; (800d4fc <SpiInit+0x1f8>)
 800d43a:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosi, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d442:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800d446:	2305      	movs	r3, #5
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	2302      	movs	r3, #2
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	2300      	movs	r3, #0
 800d450:	2202      	movs	r2, #2
 800d452:	f7fe fee9 	bl	800c228 <GpioInit>
        GpioInit( &obj->Miso, miso, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d45c:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800d460:	2305      	movs	r3, #5
 800d462:	9301      	str	r3, [sp, #4]
 800d464:	2302      	movs	r3, #2
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	2300      	movs	r3, #0
 800d46a:	2202      	movs	r2, #2
 800d46c:	f7fe fedc 	bl	800c228 <GpioInit>
        GpioInit( &obj->Sclk, sclk, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d476:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800d47a:	2305      	movs	r3, #5
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	2302      	movs	r3, #2
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	2300      	movs	r3, #0
 800d484:	2202      	movs	r2, #2
 800d486:	f7fe fecf 	bl	800c228 <GpioInit>
        GpioInit( &obj->Nss, nss, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d490:	f997 1018 	ldrsb.w	r1, [r7, #24]
 800d494:	2305      	movs	r3, #5
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	2301      	movs	r3, #1
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	2300      	movs	r3, #0
 800d49e:	2202      	movs	r2, #2
 800d4a0:	f7fe fec2 	bl	800c228 <GpioInit>

        if( nss == NC )
 800d4a4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ac:	d10c      	bne.n	800d4c8 <SpiInit+0x1c4>
        {
            obj->Spi.Init.NSS = SPI_NSS_SOFT;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4b4:	619a      	str	r2, [r3, #24]
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2100      	movs	r1, #0
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f863 	bl	800d58c <SpiFormat>
 800d4c6:	e007      	b.n	800d4d8 <SpiInit+0x1d4>
        }
        else
        {
            SpiFormat( obj, SPI_DATASIZE_8BIT, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f85a 	bl	800d58c <SpiFormat>
        }
    }
    SpiFrequency( obj, 10000000 );
 800d4d8:	4909      	ldr	r1, [pc, #36]	; (800d500 <SpiInit+0x1fc>)
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f898 	bl	800d610 <SpiFrequency>

    HAL_SPI_Init( &obj->Spi );
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7f6 fd13 	bl	8003f0e <HAL_SPI_Init>
		//DebugPrintf("abc");

    BoardEnableIrq( );
 800d4e8:	f7fd fe5a 	bl	800b1a0 <BoardEnableIrq>
}
 800d4ec:	bf00      	nop
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	40023800 	.word	0x40023800
 800d4f8:	40013000 	.word	0x40013000
 800d4fc:	40003800 	.word	0x40003800
 800d500:	00989680 	.word	0x00989680

0800d504 <SpiDeInit>:

void SpiDeInit( Spi_t *obj )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af02      	add	r7, sp, #8
 800d50a:	6078      	str	r0, [r7, #4]
    HAL_SPI_DeInit( &obj->Spi );
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f6 fd86 	bl	8004020 <HAL_SPI_DeInit>

    GpioInit( &obj->Mosi, obj->Mosi.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f993 1058 	ldrsb.w	r1, [r3, #88]	; 0x58
 800d520:	2300      	movs	r3, #0
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	2300      	movs	r3, #0
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	2300      	movs	r3, #0
 800d52a:	2201      	movs	r2, #1
 800d52c:	f7fe fe7c 	bl	800c228 <GpioInit>
    GpioInit( &obj->Miso, obj->Miso.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_DOWN, 0 );
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f993 1064 	ldrsb.w	r1, [r3, #100]	; 0x64
 800d53c:	2300      	movs	r3, #0
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	2302      	movs	r3, #2
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	2300      	movs	r3, #0
 800d546:	2201      	movs	r2, #1
 800d548:	f7fe fe6e 	bl	800c228 <GpioInit>
    GpioInit( &obj->Sclk, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f993 1070 	ldrsb.w	r1, [r3, #112]	; 0x70
 800d558:	2300      	movs	r3, #0
 800d55a:	9301      	str	r3, [sp, #4]
 800d55c:	2300      	movs	r3, #0
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	2300      	movs	r3, #0
 800d562:	2201      	movs	r2, #1
 800d564:	f7fe fe60 	bl	800c228 <GpioInit>
    GpioInit( &obj->Nss, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f993 107c 	ldrsb.w	r1, [r3, #124]	; 0x7c
 800d574:	2301      	movs	r3, #1
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	2301      	movs	r3, #1
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	2300      	movs	r3, #0
 800d57e:	2201      	movs	r2, #1
 800d580:	f7fe fe52 	bl	800c228 <GpioInit>
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <SpiFormat>:

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	4608      	mov	r0, r1
 800d596:	4611      	mov	r1, r2
 800d598:	461a      	mov	r2, r3
 800d59a:	4603      	mov	r3, r0
 800d59c:	70fb      	strb	r3, [r7, #3]
 800d59e:	460b      	mov	r3, r1
 800d5a0:	70bb      	strb	r3, [r7, #2]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	707b      	strb	r3, [r7, #1]
    obj->Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	609a      	str	r2, [r3, #8]
    if( bits == SPI_DATASIZE_8BIT )
 800d5ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d103      	bne.n	800d5bc <SpiFormat+0x30>
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	60da      	str	r2, [r3, #12]
 800d5ba:	e003      	b.n	800d5c4 <SpiFormat+0x38>
    }
    else
    {
        obj->Spi.Init.DataSize = SPI_DATASIZE_16BIT;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5c2:	60da      	str	r2, [r3, #12]
    }
    obj->Spi.Init.CLKPolarity = cpol;
 800d5c4:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	611a      	str	r2, [r3, #16]
    obj->Spi.Init.CLKPhase = cpha;
 800d5cc:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	615a      	str	r2, [r3, #20]
    obj->Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	621a      	str	r2, [r3, #32]
    obj->Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	625a      	str	r2, [r3, #36]	; 0x24
    obj->Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	629a      	str	r2, [r3, #40]	; 0x28
    obj->Spi.Init.CRCPolynomial = 7;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2207      	movs	r2, #7
 800d5ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if( slave == 0 )
 800d5ec:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <SpiFormat+0x72>
    {
        obj->Spi.Init.Mode = SPI_MODE_MASTER;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d5fa:	605a      	str	r2, [r3, #4]
    }
    else
    {
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
    }
}
 800d5fc:	e002      	b.n	800d604 <SpiFormat+0x78>
        obj->Spi.Init.Mode = SPI_MODE_SLAVE;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	605a      	str	r2, [r3, #4]
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	bc80      	pop	{r7}
 800d60c:	4770      	bx	lr
	...

0800d610 <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 800d610:	b480      	push	{r7}
 800d612:	b087      	sub	sp, #28
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
    uint32_t divisor = 0;
 800d61a:	2300      	movs	r3, #0
 800d61c:	617b      	str	r3, [r7, #20]
    uint32_t sysClkTmp = SystemCoreClock;
 800d61e:	4b1b      	ldr	r3, [pc, #108]	; (800d68c <SpiFrequency+0x7c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	613b      	str	r3, [r7, #16]
    uint32_t baudRate;

    while( sysClkTmp > hz )
 800d624:	e008      	b.n	800d638 <SpiFrequency+0x28>
    {
        divisor++;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	3301      	adds	r3, #1
 800d62a:	617b      	str	r3, [r7, #20]
        sysClkTmp = ( sysClkTmp >> 1 );
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	085b      	lsrs	r3, r3, #1
 800d630:	613b      	str	r3, [r7, #16]

        if( divisor >= 7 )
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b06      	cmp	r3, #6
 800d636:	d804      	bhi.n	800d642 <SpiFrequency+0x32>
    while( sysClkTmp > hz )
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d8f2      	bhi.n	800d626 <SpiFrequency+0x16>
 800d640:	e000      	b.n	800d644 <SpiFrequency+0x34>
        {
            break;
 800d642:	bf00      	nop
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f003 0304 	and.w	r3, r3, #4
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d101      	bne.n	800d652 <SpiFrequency+0x42>
 800d64e:	2200      	movs	r2, #0
 800d650:	e000      	b.n	800d654 <SpiFrequency+0x44>
 800d652:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	f003 0302 	and.w	r3, r3, #2
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <SpiFrequency+0x52>
 800d65e:	2300      	movs	r3, #0
 800d660:	e000      	b.n	800d664 <SpiFrequency+0x54>
 800d662:	2310      	movs	r3, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d664:	4313      	orrs	r3, r2
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	f002 0201 	and.w	r2, r2, #1
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	d101      	bne.n	800d674 <SpiFrequency+0x64>
 800d670:	2200      	movs	r2, #0
 800d672:	e000      	b.n	800d676 <SpiFrequency+0x66>
 800d674:	2208      	movs	r2, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 800d676:	4313      	orrs	r3, r2
 800d678:	60fb      	str	r3, [r7, #12]

    obj->Spi.Init.BaudRatePrescaler = baudRate;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	61da      	str	r2, [r3, #28]
}
 800d680:	bf00      	nop
 800d682:	371c      	adds	r7, #28
 800d684:	46bd      	mov	sp, r7
 800d686:	bc80      	pop	{r7}
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	2000009c 	.word	0x2000009c

0800d690 <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( obj->Spi.Instance ) == NULL )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &obj->Spi );
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d6b2:	601a      	str	r2, [r3, #0]

    BoardDisableIrq( );
 800d6b4:	f7fd fd64 	bl	800b180 <BoardDisableIrq>

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_TXE ) == RESET );
 800d6b8:	bf00      	nop
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f003 0302 	and.w	r3, r3, #2
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d1f8      	bne.n	800d6ba <SpiInOut+0x2a>
    obj->Spi.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 800d6c8:	887a      	ldrh	r2, [r7, #2]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &obj->Spi, SPI_FLAG_RXNE ) == RESET );
 800d6d2:	bf00      	nop
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	689b      	ldr	r3, [r3, #8]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d1f8      	bne.n	800d6d4 <SpiInOut+0x44>
    rxData = ( uint16_t ) obj->Spi.Instance->DR;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	73fb      	strb	r3, [r7, #15]

    BoardEnableIrq( );
 800d6ea:	f7fd fd59 	bl	800b1a0 <BoardEnableIrq>

    return( rxData );
 800d6ee:	7bfb      	ldrb	r3, [r7, #15]
 800d6f0:	b29b      	uxth	r3, r3
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800d702:	4b14      	ldr	r3, [pc, #80]	; (800d754 <HAL_MspInit+0x58>)
 800d704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d706:	4a13      	ldr	r2, [pc, #76]	; (800d754 <HAL_MspInit+0x58>)
 800d708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d70c:	6253      	str	r3, [r2, #36]	; 0x24
 800d70e:	4b11      	ldr	r3, [pc, #68]	; (800d754 <HAL_MspInit+0x58>)
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d71a:	4b0e      	ldr	r3, [pc, #56]	; (800d754 <HAL_MspInit+0x58>)
 800d71c:	6a1b      	ldr	r3, [r3, #32]
 800d71e:	4a0d      	ldr	r2, [pc, #52]	; (800d754 <HAL_MspInit+0x58>)
 800d720:	f043 0301 	orr.w	r3, r3, #1
 800d724:	6213      	str	r3, [r2, #32]
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <HAL_MspInit+0x58>)
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	60bb      	str	r3, [r7, #8]
 800d730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d732:	4b08      	ldr	r3, [pc, #32]	; (800d754 <HAL_MspInit+0x58>)
 800d734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d736:	4a07      	ldr	r2, [pc, #28]	; (800d754 <HAL_MspInit+0x58>)
 800d738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d73c:	6253      	str	r3, [r2, #36]	; 0x24
 800d73e:	4b05      	ldr	r3, [pc, #20]	; (800d754 <HAL_MspInit+0x58>)
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d746:	607b      	str	r3, [r7, #4]
 800d748:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d74a:	bf00      	nop
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	bc80      	pop	{r7}
 800d752:	4770      	bx	lr
 800d754:	40023800 	.word	0x40023800

0800d758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08a      	sub	sp, #40	; 0x28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d760:	f107 0314 	add.w	r3, r7, #20
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]
 800d768:	605a      	str	r2, [r3, #4]
 800d76a:	609a      	str	r2, [r3, #8]
 800d76c:	60da      	str	r2, [r3, #12]
 800d76e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a15      	ldr	r2, [pc, #84]	; (800d7cc <HAL_ADC_MspInit+0x74>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d123      	bne.n	800d7c2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800d77a:	4b15      	ldr	r3, [pc, #84]	; (800d7d0 <HAL_ADC_MspInit+0x78>)
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	4a14      	ldr	r2, [pc, #80]	; (800d7d0 <HAL_ADC_MspInit+0x78>)
 800d780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d784:	6213      	str	r3, [r2, #32]
 800d786:	4b12      	ldr	r3, [pc, #72]	; (800d7d0 <HAL_ADC_MspInit+0x78>)
 800d788:	6a1b      	ldr	r3, [r3, #32]
 800d78a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d78e:	613b      	str	r3, [r7, #16]
 800d790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d792:	4b0f      	ldr	r3, [pc, #60]	; (800d7d0 <HAL_ADC_MspInit+0x78>)
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	4a0e      	ldr	r2, [pc, #56]	; (800d7d0 <HAL_ADC_MspInit+0x78>)
 800d798:	f043 0301 	orr.w	r3, r3, #1
 800d79c:	61d3      	str	r3, [r2, #28]
 800d79e:	4b0c      	ldr	r3, [pc, #48]	; (800d7d0 <HAL_ADC_MspInit+0x78>)
 800d7a0:	69db      	ldr	r3, [r3, #28]
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d7aa:	2304      	movs	r3, #4
 800d7ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7b6:	f107 0314 	add.w	r3, r7, #20
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4805      	ldr	r0, [pc, #20]	; (800d7d4 <HAL_ADC_MspInit+0x7c>)
 800d7be:	f7f4 fad9 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800d7c2:	bf00      	nop
 800d7c4:	3728      	adds	r7, #40	; 0x28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	40012400 	.word	0x40012400
 800d7d0:	40023800 	.word	0x40023800
 800d7d4:	40020000 	.word	0x40020000

0800d7d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a05      	ldr	r2, [pc, #20]	; (800d7fc <HAL_RTC_MspInit+0x24>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d102      	bne.n	800d7f0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d7ea:	4b05      	ldr	r3, [pc, #20]	; (800d800 <HAL_RTC_MspInit+0x28>)
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bc80      	pop	{r7}
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	40002800 	.word	0x40002800
 800d800:	424706d8 	.word	0x424706d8

0800d804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08a      	sub	sp, #40	; 0x28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d80c:	f107 0314 	add.w	r3, r7, #20
 800d810:	2200      	movs	r2, #0
 800d812:	601a      	str	r2, [r3, #0]
 800d814:	605a      	str	r2, [r3, #4]
 800d816:	609a      	str	r2, [r3, #8]
 800d818:	60da      	str	r2, [r3, #12]
 800d81a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a17      	ldr	r2, [pc, #92]	; (800d880 <HAL_SPI_MspInit+0x7c>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d127      	bne.n	800d876 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800d826:	4b17      	ldr	r3, [pc, #92]	; (800d884 <HAL_SPI_MspInit+0x80>)
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	4a16      	ldr	r2, [pc, #88]	; (800d884 <HAL_SPI_MspInit+0x80>)
 800d82c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d830:	6213      	str	r3, [r2, #32]
 800d832:	4b14      	ldr	r3, [pc, #80]	; (800d884 <HAL_SPI_MspInit+0x80>)
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d83a:	613b      	str	r3, [r7, #16]
 800d83c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d83e:	4b11      	ldr	r3, [pc, #68]	; (800d884 <HAL_SPI_MspInit+0x80>)
 800d840:	69db      	ldr	r3, [r3, #28]
 800d842:	4a10      	ldr	r2, [pc, #64]	; (800d884 <HAL_SPI_MspInit+0x80>)
 800d844:	f043 0301 	orr.w	r3, r3, #1
 800d848:	61d3      	str	r3, [r2, #28]
 800d84a:	4b0e      	ldr	r3, [pc, #56]	; (800d884 <HAL_SPI_MspInit+0x80>)
 800d84c:	69db      	ldr	r3, [r3, #28]
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800d856:	23e0      	movs	r3, #224	; 0xe0
 800d858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d85a:	2302      	movs	r3, #2
 800d85c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d862:	2303      	movs	r3, #3
 800d864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800d866:	2305      	movs	r3, #5
 800d868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d86a:	f107 0314 	add.w	r3, r7, #20
 800d86e:	4619      	mov	r1, r3
 800d870:	4805      	ldr	r0, [pc, #20]	; (800d888 <HAL_SPI_MspInit+0x84>)
 800d872:	f7f4 fa7f 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800d876:	bf00      	nop
 800d878:	3728      	adds	r7, #40	; 0x28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	40013000 	.word	0x40013000
 800d884:	40023800 	.word	0x40023800
 800d888:	40020000 	.word	0x40020000

0800d88c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a08      	ldr	r2, [pc, #32]	; (800d8bc <HAL_SPI_MspDeInit+0x30>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d109      	bne.n	800d8b2 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800d89e:	4b08      	ldr	r3, [pc, #32]	; (800d8c0 <HAL_SPI_MspDeInit+0x34>)
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	4a07      	ldr	r2, [pc, #28]	; (800d8c0 <HAL_SPI_MspDeInit+0x34>)
 800d8a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8a8:	6213      	str	r3, [r2, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800d8aa:	21e0      	movs	r1, #224	; 0xe0
 800d8ac:	4805      	ldr	r0, [pc, #20]	; (800d8c4 <HAL_SPI_MspDeInit+0x38>)
 800d8ae:	f7f4 fbe1 	bl	8002074 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	40013000 	.word	0x40013000
 800d8c0:	40023800 	.word	0x40023800
 800d8c4:	40020000 	.word	0x40020000

0800d8c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08a      	sub	sp, #40	; 0x28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8d0:	f107 0314 	add.w	r3, r7, #20
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	601a      	str	r2, [r3, #0]
 800d8d8:	605a      	str	r2, [r3, #4]
 800d8da:	609a      	str	r2, [r3, #8]
 800d8dc:	60da      	str	r2, [r3, #12]
 800d8de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a2e      	ldr	r2, [pc, #184]	; (800d9a0 <HAL_UART_MspInit+0xd8>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d156      	bne.n	800d998 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d8ea:	4b2e      	ldr	r3, [pc, #184]	; (800d9a4 <HAL_UART_MspInit+0xdc>)
 800d8ec:	6a1b      	ldr	r3, [r3, #32]
 800d8ee:	4a2d      	ldr	r2, [pc, #180]	; (800d9a4 <HAL_UART_MspInit+0xdc>)
 800d8f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d8f4:	6213      	str	r3, [r2, #32]
 800d8f6:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <HAL_UART_MspInit+0xdc>)
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8fe:	613b      	str	r3, [r7, #16]
 800d900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d902:	4b28      	ldr	r3, [pc, #160]	; (800d9a4 <HAL_UART_MspInit+0xdc>)
 800d904:	69db      	ldr	r3, [r3, #28]
 800d906:	4a27      	ldr	r2, [pc, #156]	; (800d9a4 <HAL_UART_MspInit+0xdc>)
 800d908:	f043 0301 	orr.w	r3, r3, #1
 800d90c:	61d3      	str	r3, [r2, #28]
 800d90e:	4b25      	ldr	r3, [pc, #148]	; (800d9a4 <HAL_UART_MspInit+0xdc>)
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	f003 0301 	and.w	r3, r3, #1
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d91a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800d91e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d920:	2302      	movs	r3, #2
 800d922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d924:	2300      	movs	r3, #0
 800d926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d928:	2303      	movs	r3, #3
 800d92a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d92c:	2307      	movs	r3, #7
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d930:	f107 0314 	add.w	r3, r7, #20
 800d934:	4619      	mov	r1, r3
 800d936:	481c      	ldr	r0, [pc, #112]	; (800d9a8 <HAL_UART_MspInit+0xe0>)
 800d938:	f7f4 fa1c 	bl	8001d74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800d93c:	4b1b      	ldr	r3, [pc, #108]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d93e:	4a1c      	ldr	r2, [pc, #112]	; (800d9b0 <HAL_UART_MspInit+0xe8>)
 800d940:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d942:	4b1a      	ldr	r3, [pc, #104]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d944:	2210      	movs	r2, #16
 800d946:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d948:	4b18      	ldr	r3, [pc, #96]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d94e:	4b17      	ldr	r3, [pc, #92]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d950:	2280      	movs	r2, #128	; 0x80
 800d952:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d954:	4b15      	ldr	r3, [pc, #84]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d956:	2200      	movs	r2, #0
 800d958:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d95a:	4b14      	ldr	r3, [pc, #80]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800d960:	4b12      	ldr	r3, [pc, #72]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d962:	2200      	movs	r2, #0
 800d964:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d966:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d968:	2200      	movs	r2, #0
 800d96a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800d96c:	480f      	ldr	r0, [pc, #60]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d96e:	f7f3 ffd1 	bl	8001914 <HAL_DMA_Init>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800d978:	f7fe ff88 	bl	800c88c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a0b      	ldr	r2, [pc, #44]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d980:	635a      	str	r2, [r3, #52]	; 0x34
 800d982:	4a0a      	ldr	r2, [pc, #40]	; (800d9ac <HAL_UART_MspInit+0xe4>)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d988:	2200      	movs	r2, #0
 800d98a:	2100      	movs	r1, #0
 800d98c:	2025      	movs	r0, #37	; 0x25
 800d98e:	f7f3 ff62 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d992:	2025      	movs	r0, #37	; 0x25
 800d994:	f7f3 ff7b 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800d998:	bf00      	nop
 800d99a:	3728      	adds	r7, #40	; 0x28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	40013800 	.word	0x40013800
 800d9a4:	40023800 	.word	0x40023800
 800d9a8:	40020000 	.word	0x40020000
 800d9ac:	20000ff4 	.word	0x20000ff4
 800d9b0:	40026044 	.word	0x40026044

0800d9b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d9b8:	bf00      	nop
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bc80      	pop	{r7}
 800d9be:	4770      	bx	lr

0800d9c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d9c4:	e7fe      	b.n	800d9c4 <HardFault_Handler+0x4>

0800d9c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d9c6:	b480      	push	{r7}
 800d9c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d9ca:	e7fe      	b.n	800d9ca <MemManage_Handler+0x4>

0800d9cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d9d0:	e7fe      	b.n	800d9d0 <BusFault_Handler+0x4>

0800d9d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d9d6:	e7fe      	b.n	800d9d6 <UsageFault_Handler+0x4>

0800d9d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d9dc:	bf00      	nop
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bc80      	pop	{r7}
 800d9e2:	4770      	bx	lr

0800d9e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d9e8:	bf00      	nop
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bc80      	pop	{r7}
 800d9ee:	4770      	bx	lr

0800d9f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d9f4:	bf00      	nop
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bc80      	pop	{r7}
 800d9fa:	4770      	bx	lr

0800d9fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
//
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800da00:	f7f3 fb38 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler( );
 800da04:	f7f3 ff7a 	bl	80018fc <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800da08:	bf00      	nop
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800da10:	4802      	ldr	r0, [pc, #8]	; (800da1c <DMA1_Channel4_IRQHandler+0x10>)
 800da12:	f7f4 f8d1 	bl	8001bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800da16:	bf00      	nop
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20000ff4 	.word	0x20000ff4

0800da20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800da24:	4802      	ldr	r0, [pc, #8]	; (800da30 <USART1_IRQHandler+0x10>)
 800da26:	f7f6 fcf3 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800da2a:	bf00      	nop
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20001038 	.word	0x20001038

0800da34 <SX1276IoInit>:
  SX1276SetPublicNetwork,
  SX1276GetWakeupTime
};

void SX1276IoInit( void )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af02      	add	r7, sp, #8
//	GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
//	GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
  
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
 800da3a:	2301      	movs	r3, #1
 800da3c:	9301      	str	r3, [sp, #4]
 800da3e:	2301      	movs	r3, #1
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	2300      	movs	r3, #0
 800da44:	2201      	movs	r2, #1
 800da46:	2104      	movs	r1, #4
 800da48:	480c      	ldr	r0, [pc, #48]	; (800da7c <SX1276IoInit+0x48>)
 800da4a:	f7fe fbed 	bl	800c228 <GpioInit>

	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800da4e:	2300      	movs	r3, #0
 800da50:	9301      	str	r3, [sp, #4]
 800da52:	2301      	movs	r3, #1
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	2300      	movs	r3, #0
 800da58:	2200      	movs	r2, #0
 800da5a:	211b      	movs	r1, #27
 800da5c:	4808      	ldr	r0, [pc, #32]	; (800da80 <SX1276IoInit+0x4c>)
 800da5e:	f7fe fbe3 	bl	800c228 <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
 800da62:	2300      	movs	r3, #0
 800da64:	9301      	str	r3, [sp, #4]
 800da66:	2301      	movs	r3, #1
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	2300      	movs	r3, #0
 800da6c:	2200      	movs	r2, #0
 800da6e:	211a      	movs	r1, #26
 800da70:	4804      	ldr	r0, [pc, #16]	; (800da84 <SX1276IoInit+0x50>)
 800da72:	f7fe fbd9 	bl	800c228 <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800da76:	bf00      	nop
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	20001310 	.word	0x20001310
 800da80:	2000124c 	.word	0x2000124c
 800da84:	20001258 	.word	0x20001258

0800da88 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
	GpioSetInterrupt( &SX1276.DIO0, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2203      	movs	r2, #3
 800da96:	2101      	movs	r1, #1
 800da98:	4807      	ldr	r0, [pc, #28]	; (800dab8 <SX1276IoIrqInit+0x30>)
 800da9a:	f7fe fbe9 	bl	800c270 <GpioSetInterrupt>
	GpioSetInterrupt( &SX1276.DIO1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3304      	adds	r3, #4
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2203      	movs	r2, #3
 800daa6:	2101      	movs	r1, #1
 800daa8:	4804      	ldr	r0, [pc, #16]	; (800dabc <SX1276IoIrqInit+0x34>)
 800daaa:	f7fe fbe1 	bl	800c270 <GpioSetInterrupt>
//	GpioSetInterrupt( &SX1276.DIO2, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[2] );
//	GpioSetInterrupt( &SX1276.DIO3, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[3] );
//	GpioSetInterrupt( &SX1276.DIO4, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[4] );
//	GpioSetInterrupt( &SX1276.DIO5, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, irqHandlers[5] );
}
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	2000124c 	.word	0x2000124c
 800dabc:	20001258 	.word	0x20001258

0800dac0 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af02      	add	r7, sp, #8
	GpioInit( &SX1276.Spi.Nss, RADIO_NSS, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800dac6:	2301      	movs	r3, #1
 800dac8:	9301      	str	r3, [sp, #4]
 800daca:	2300      	movs	r3, #0
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	2300      	movs	r3, #0
 800dad0:	2201      	movs	r2, #1
 800dad2:	2104      	movs	r1, #4
 800dad4:	480c      	ldr	r0, [pc, #48]	; (800db08 <SX1276IoDeInit+0x48>)
 800dad6:	f7fe fba7 	bl	800c228 <GpioInit>
	GpioInit( &SX1276.DIO0, RADIO_DIO_0, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800dada:	2300      	movs	r3, #0
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	2300      	movs	r3, #0
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	2300      	movs	r3, #0
 800dae4:	2200      	movs	r2, #0
 800dae6:	211b      	movs	r1, #27
 800dae8:	4808      	ldr	r0, [pc, #32]	; (800db0c <SX1276IoDeInit+0x4c>)
 800daea:	f7fe fb9d 	bl	800c228 <GpioInit>
	GpioInit( &SX1276.DIO1, RADIO_DIO_1, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800daee:	2300      	movs	r3, #0
 800daf0:	9301      	str	r3, [sp, #4]
 800daf2:	2300      	movs	r3, #0
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	2300      	movs	r3, #0
 800daf8:	2200      	movs	r2, #0
 800dafa:	211a      	movs	r1, #26
 800dafc:	4804      	ldr	r0, [pc, #16]	; (800db10 <SX1276IoDeInit+0x50>)
 800dafe:	f7fe fb93 	bl	800c228 <GpioInit>
//	GpioInit( &SX1276.DIO2, RADIO_DIO_2, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO3, RADIO_DIO_3, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO4, RADIO_DIO_4, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
//	GpioInit( &SX1276.DIO5, RADIO_DIO_5, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 800db02:	bf00      	nop
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	20001310 	.word	0x20001310
 800db0c:	2000124c 	.word	0x2000124c
 800db10:	20001258 	.word	0x20001258

0800db14 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 800db14:	b590      	push	{r4, r7, lr}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	4603      	mov	r3, r0
 800db1c:	71fb      	strb	r3, [r7, #7]
  uint8_t paConfig = 0;
 800db1e:	2300      	movs	r3, #0
 800db20:	73fb      	strb	r3, [r7, #15]
  uint8_t paDac = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	73bb      	strb	r3, [r7, #14]
  
  paConfig = SX1276Read( REG_PACONFIG );
 800db26:	2009      	movs	r0, #9
 800db28:	f001 fcbc 	bl	800f4a4 <SX1276Read>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73fb      	strb	r3, [r7, #15]
  paDac = SX1276Read( REG_PADAC );
 800db30:	204d      	movs	r0, #77	; 0x4d
 800db32:	f001 fcb7 	bl	800f4a4 <SX1276Read>
 800db36:	4603      	mov	r3, r0
 800db38:	73bb      	strb	r3, [r7, #14]
  
  paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800db3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db42:	b25c      	sxtb	r4, r3
 800db44:	4b45      	ldr	r3, [pc, #276]	; (800dc5c <SX1276SetRfTxPower+0x148>)
 800db46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f000 f888 	bl	800dc60 <SX1276GetPaSelect>
 800db50:	4603      	mov	r3, r0
 800db52:	b25b      	sxtb	r3, r3
 800db54:	4323      	orrs	r3, r4
 800db56:	b25b      	sxtb	r3, r3
 800db58:	73fb      	strb	r3, [r7, #15]
  paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
 800db5c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800db60:	73fb      	strb	r3, [r7, #15]
  
  if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800db62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db66:	2b00      	cmp	r3, #0
 800db68:	da4e      	bge.n	800dc08 <SX1276SetRfTxPower+0xf4>
  {
    if( power > 17 )
 800db6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db6e:	2b11      	cmp	r3, #17
 800db70:	dd04      	ble.n	800db7c <SX1276SetRfTxPower+0x68>
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800db72:	7bbb      	ldrb	r3, [r7, #14]
 800db74:	f043 0307 	orr.w	r3, r3, #7
 800db78:	73bb      	strb	r3, [r7, #14]
 800db7a:	e008      	b.n	800db8e <SX1276SetRfTxPower+0x7a>
    }
    else
    {
      paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800db7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db80:	f023 0307 	bic.w	r3, r3, #7
 800db84:	b25b      	sxtb	r3, r3
 800db86:	f043 0304 	orr.w	r3, r3, #4
 800db8a:	b25b      	sxtb	r3, r3
 800db8c:	73bb      	strb	r3, [r7, #14]
    }
    if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	f003 0307 	and.w	r3, r3, #7
 800db94:	2b07      	cmp	r3, #7
 800db96:	d11b      	bne.n	800dbd0 <SX1276SetRfTxPower+0xbc>
    {
      if( power < 5 )
 800db98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db9c:	2b04      	cmp	r3, #4
 800db9e:	dc01      	bgt.n	800dba4 <SX1276SetRfTxPower+0x90>
      {
        power = 5;
 800dba0:	2305      	movs	r3, #5
 800dba2:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 20 )
 800dba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dba8:	2b14      	cmp	r3, #20
 800dbaa:	dd01      	ble.n	800dbb0 <SX1276SetRfTxPower+0x9c>
      {
        power = 20;
 800dbac:	2314      	movs	r3, #20
 800dbae:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800dbb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbb4:	f023 030f 	bic.w	r3, r3, #15
 800dbb8:	b25a      	sxtb	r2, r3
 800dbba:	79fb      	ldrb	r3, [r7, #7]
 800dbbc:	3b05      	subs	r3, #5
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	b25b      	sxtb	r3, r3
 800dbc2:	f003 030f 	and.w	r3, r3, #15
 800dbc6:	b25b      	sxtb	r3, r3
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	b25b      	sxtb	r3, r3
 800dbcc:	73fb      	strb	r3, [r7, #15]
 800dbce:	e037      	b.n	800dc40 <SX1276SetRfTxPower+0x12c>
    }
    else
    {
      if( power < 2 )
 800dbd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	dc01      	bgt.n	800dbdc <SX1276SetRfTxPower+0xc8>
      {
        power = 2;
 800dbd8:	2302      	movs	r3, #2
 800dbda:	71fb      	strb	r3, [r7, #7]
      }
      if( power > 17 )
 800dbdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbe0:	2b11      	cmp	r3, #17
 800dbe2:	dd01      	ble.n	800dbe8 <SX1276SetRfTxPower+0xd4>
      {
        power = 17;
 800dbe4:	2311      	movs	r3, #17
 800dbe6:	71fb      	strb	r3, [r7, #7]
      }
      paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800dbe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbec:	f023 030f 	bic.w	r3, r3, #15
 800dbf0:	b25a      	sxtb	r2, r3
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	3b02      	subs	r3, #2
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	b25b      	sxtb	r3, r3
 800dbfa:	f003 030f 	and.w	r3, r3, #15
 800dbfe:	b25b      	sxtb	r3, r3
 800dc00:	4313      	orrs	r3, r2
 800dc02:	b25b      	sxtb	r3, r3
 800dc04:	73fb      	strb	r3, [r7, #15]
 800dc06:	e01b      	b.n	800dc40 <SX1276SetRfTxPower+0x12c>
    }
  }
  else
  {
    if( power < -1 )
 800dc08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc10:	da01      	bge.n	800dc16 <SX1276SetRfTxPower+0x102>
    {
      power = -1;
 800dc12:	23ff      	movs	r3, #255	; 0xff
 800dc14:	71fb      	strb	r3, [r7, #7]
    }
    if( power > 14 )
 800dc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc1a:	2b0e      	cmp	r3, #14
 800dc1c:	dd01      	ble.n	800dc22 <SX1276SetRfTxPower+0x10e>
    {
      power = 14;
 800dc1e:	230e      	movs	r3, #14
 800dc20:	71fb      	strb	r3, [r7, #7]
    }
    paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800dc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc26:	f023 030f 	bic.w	r3, r3, #15
 800dc2a:	b25a      	sxtb	r2, r3
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	b2db      	uxtb	r3, r3
 800dc32:	b25b      	sxtb	r3, r3
 800dc34:	f003 030f 	and.w	r3, r3, #15
 800dc38:	b25b      	sxtb	r3, r3
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	b25b      	sxtb	r3, r3
 800dc3e:	73fb      	strb	r3, [r7, #15]
  }
  SX1276Write( REG_PACONFIG, paConfig );
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	4619      	mov	r1, r3
 800dc44:	2009      	movs	r0, #9
 800dc46:	f001 fc1b 	bl	800f480 <SX1276Write>
  SX1276Write( REG_PADAC, paDac );
 800dc4a:	7bbb      	ldrb	r3, [r7, #14]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	204d      	movs	r0, #77	; 0x4d
 800dc50:	f001 fc16 	bl	800f480 <SX1276Write>
}
 800dc54:	bf00      	nop
 800dc56:	3714      	adds	r7, #20
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd90      	pop	{r4, r7, pc}
 800dc5c:	20001240 	.word	0x20001240

0800dc60 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800dc60:	b480      	push	{r7}
 800dc62:	b083      	sub	sp, #12
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]

    return RF_PACONFIG_PASELECT_PABOOST;
 800dc68:	2380      	movs	r3, #128	; 0x80

}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bc80      	pop	{r7}
 800dc72:	4770      	bx	lr

0800dc74 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	71fb      	strb	r3, [r7, #7]
  if( RadioIsActive != status )
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <SX1276SetAntSwLowPower+0x38>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	79fa      	ldrb	r2, [r7, #7]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d00d      	beq.n	800dca4 <SX1276SetAntSwLowPower+0x30>
  {
    RadioIsActive = status;
 800dc88:	4a08      	ldr	r2, [pc, #32]	; (800dcac <SX1276SetAntSwLowPower+0x38>)
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	7013      	strb	r3, [r2, #0]
    
    if( status == false )
 800dc8e:	79fb      	ldrb	r3, [r7, #7]
 800dc90:	f083 0301 	eor.w	r3, r3, #1
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d002      	beq.n	800dca0 <SX1276SetAntSwLowPower+0x2c>
    {
      SX1276AntSwInit( );
 800dc9a:	f000 f809 	bl	800dcb0 <SX1276AntSwInit>
    else
    {
      SX1276AntSwDeInit( );
    }
  }
}
 800dc9e:	e001      	b.n	800dca4 <SX1276SetAntSwLowPower+0x30>
      SX1276AntSwDeInit( );
 800dca0:	f000 f80c 	bl	800dcbc <SX1276AntSwDeInit>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	200007a0 	.word	0x200007a0

0800dcb0 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 800dcb4:	bf00      	nop
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bc80      	pop	{r7}
 800dcba:	4770      	bx	lr

0800dcbc <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	af00      	add	r7, sp, #0
  //GpioInit( &rftrx1, RF_RXTX1, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
  //GpioInit( &rftrx2, RF_RXTX2, PIN_ANALOGIC, PIN_PUSH_PULL, PIN_NO_PULL, 0 ); 
}
 800dcc0:	bf00      	nop
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bc80      	pop	{r7}
 800dcc6:	4770      	bx	lr

0800dcc8 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b083      	sub	sp, #12
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	71fb      	strb	r3, [r7, #7]
  switch( opMode )
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	2b03      	cmp	r3, #3
  case RFLR_OPMODE_RECEIVER_SINGLE:
  case RFLR_OPMODE_CAD:
  default:
//    GpioWrite( &rftrx1, 0 );
//    GpioWrite( &rftrx2, 1 );
    break;
 800dcd6:	bf00      	nop
  }
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bc80      	pop	{r7}
 800dce0:	4770      	bx	lr

0800dce2 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800dce2:	b480      	push	{r7}
 800dce4:	b083      	sub	sp, #12
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 800dcea:	2301      	movs	r3, #1
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bc80      	pop	{r7}
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 800dd00:	4a24      	ldr	r2, [pc, #144]	; (800dd94 <SX1276Init+0x9c>)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800dd06:	4924      	ldr	r1, [pc, #144]	; (800dd98 <SX1276Init+0xa0>)
 800dd08:	4824      	ldr	r0, [pc, #144]	; (800dd9c <SX1276Init+0xa4>)
 800dd0a:	f002 f9cf 	bl	80100ac <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800dd0e:	4922      	ldr	r1, [pc, #136]	; (800dd98 <SX1276Init+0xa0>)
 800dd10:	4823      	ldr	r0, [pc, #140]	; (800dda0 <SX1276Init+0xa8>)
 800dd12:	f002 f9cb 	bl	80100ac <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800dd16:	4920      	ldr	r1, [pc, #128]	; (800dd98 <SX1276Init+0xa0>)
 800dd18:	4822      	ldr	r0, [pc, #136]	; (800dda4 <SX1276Init+0xac>)
 800dd1a:	f002 f9c7 	bl	80100ac <TimerInit>

    SX1276Reset( );
 800dd1e:	f001 fb0f 	bl	800f340 <SX1276Reset>

    RxChainCalibration( );
 800dd22:	f000 f8e5 	bl	800def0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800dd26:	2000      	movs	r0, #0
 800dd28:	f001 fb2c 	bl	800f384 <SX1276SetOpMode>

    SX1276IoIrqInit( DioIrq );
 800dd2c:	481e      	ldr	r0, [pc, #120]	; (800dda8 <SX1276Init+0xb0>)
 800dd2e:	f7ff feab 	bl	800da88 <SX1276IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800dd32:	2300      	movs	r3, #0
 800dd34:	73fb      	strb	r3, [r7, #15]
 800dd36:	e01f      	b.n	800dd78 <SX1276Init+0x80>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 800dd38:	7bfa      	ldrb	r2, [r7, #15]
 800dd3a:	491c      	ldr	r1, [pc, #112]	; (800ddac <SX1276Init+0xb4>)
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	005b      	lsls	r3, r3, #1
 800dd40:	4413      	add	r3, r2
 800dd42:	440b      	add	r3, r1
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f001 fb44 	bl	800f3d4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800dd4c:	7bfa      	ldrb	r2, [r7, #15]
 800dd4e:	4917      	ldr	r1, [pc, #92]	; (800ddac <SX1276Init+0xb4>)
 800dd50:	4613      	mov	r3, r2
 800dd52:	005b      	lsls	r3, r3, #1
 800dd54:	4413      	add	r3, r2
 800dd56:	440b      	add	r3, r1
 800dd58:	3301      	adds	r3, #1
 800dd5a:	7818      	ldrb	r0, [r3, #0]
 800dd5c:	7bfa      	ldrb	r2, [r7, #15]
 800dd5e:	4913      	ldr	r1, [pc, #76]	; (800ddac <SX1276Init+0xb4>)
 800dd60:	4613      	mov	r3, r2
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	4413      	add	r3, r2
 800dd66:	440b      	add	r3, r1
 800dd68:	3302      	adds	r3, #2
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	f001 fb87 	bl	800f480 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
 800dd74:	3301      	adds	r3, #1
 800dd76:	73fb      	strb	r3, [r7, #15]
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
 800dd7a:	2b0f      	cmp	r3, #15
 800dd7c:	d9dc      	bls.n	800dd38 <SX1276Init+0x40>
    }

    SX1276SetModem( MODEM_FSK );
 800dd7e:	2000      	movs	r0, #0
 800dd80:	f001 fb28 	bl	800f3d4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800dd84:	4b0a      	ldr	r3, [pc, #40]	; (800ddb0 <SX1276Init+0xb8>)
 800dd86:	2200      	movs	r2, #0
 800dd88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800dd8c:	bf00      	nop
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	200007a4 	.word	0x200007a4
 800dd98:	0800f685 	.word	0x0800f685
 800dd9c:	20001218 	.word	0x20001218
 800dda0:	20001380 	.word	0x20001380
 800dda4:	2000122c 	.word	0x2000122c
 800dda8:	20000084 	.word	0x20000084
 800ddac:	08012830 	.word	0x08012830
 800ddb0:	20001240 	.word	0x20001240

0800ddb4 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800ddb8:	4b03      	ldr	r3, [pc, #12]	; (800ddc8 <SX1276GetStatus+0x14>)
 800ddba:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bc80      	pop	{r7}
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	20001240 	.word	0x20001240
 800ddcc:	00000000 	.word	0x00000000

0800ddd0 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b082      	sub	sp, #8
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
    SX1276.Settings.Channel = freq;
 800ddd8:	4a17      	ldr	r2, [pc, #92]	; (800de38 <SX1276SetChannel+0x68>)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7f2 fb0f 	bl	8000404 <__aeabi_ui2d>
 800dde6:	a312      	add	r3, pc, #72	; (adr r3, 800de30 <SX1276SetChannel+0x60>)
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	f7f2 fcae 	bl	800074c <__aeabi_ddiv>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	f7f2 fe40 	bl	8000a7c <__aeabi_d2uiz>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	607b      	str	r3, [r7, #4]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	0c1b      	lsrs	r3, r3, #16
 800de04:	b2db      	uxtb	r3, r3
 800de06:	4619      	mov	r1, r3
 800de08:	2006      	movs	r0, #6
 800de0a:	f001 fb39 	bl	800f480 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	0a1b      	lsrs	r3, r3, #8
 800de12:	b2db      	uxtb	r3, r3
 800de14:	4619      	mov	r1, r3
 800de16:	2007      	movs	r0, #7
 800de18:	f001 fb32 	bl	800f480 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	4619      	mov	r1, r3
 800de22:	2008      	movs	r0, #8
 800de24:	f001 fb2c 	bl	800f480 <SX1276Write>
}
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	00000000 	.word	0x00000000
 800de34:	404e8480 	.word	0x404e8480
 800de38:	20001240 	.word	0x20001240

0800de3c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	4603      	mov	r3, r0
 800de44:	6039      	str	r1, [r7, #0]
 800de46:	71fb      	strb	r3, [r7, #7]
 800de48:	4613      	mov	r3, r2
 800de4a:	80bb      	strh	r3, [r7, #4]
    int16_t rssi = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	81fb      	strh	r3, [r7, #14]

    SX1276SetModem( modem );
 800de50:	79fb      	ldrb	r3, [r7, #7]
 800de52:	4618      	mov	r0, r3
 800de54:	f001 fabe 	bl	800f3d4 <SX1276SetModem>

    SX1276SetChannel( freq );
 800de58:	6838      	ldr	r0, [r7, #0]
 800de5a:	f7ff ffb9 	bl	800ddd0 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800de5e:	2005      	movs	r0, #5
 800de60:	f001 fa90 	bl	800f384 <SX1276SetOpMode>

    DelayMs( 1 );
 800de64:	2001      	movs	r0, #1
 800de66:	f7fd feb4 	bl	800bbd2 <DelayMs>

    rssi = SX1276ReadRssi( modem );
 800de6a:	79fb      	ldrb	r3, [r7, #7]
 800de6c:	4618      	mov	r0, r3
 800de6e:	f001 fa29 	bl	800f2c4 <SX1276ReadRssi>
 800de72:	4603      	mov	r3, r0
 800de74:	81fb      	strh	r3, [r7, #14]

    SX1276SetSleep( );
 800de76:	f000 ff07 	bl	800ec88 <SX1276SetSleep>

    if( rssi > rssiThresh )
 800de7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800de7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	dd01      	ble.n	800de8a <SX1276IsChannelFree+0x4e>
    {
        return false;
 800de86:	2300      	movs	r3, #0
 800de88:	e000      	b.n	800de8c <SX1276IsChannelFree+0x50>
    }
    return true;
 800de8a:	2301      	movs	r3, #1
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3710      	adds	r7, #16
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <SX1276Random>:

uint32_t SX1276Random( void )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800de9a:	2300      	movs	r3, #0
 800de9c:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 800de9e:	2001      	movs	r0, #1
 800dea0:	f001 fa98 	bl	800f3d4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800dea4:	21ff      	movs	r1, #255	; 0xff
 800dea6:	2011      	movs	r0, #17
 800dea8:	f001 faea 	bl	800f480 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800deac:	2005      	movs	r0, #5
 800deae:	f001 fa69 	bl	800f384 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 800deb2:	2300      	movs	r3, #0
 800deb4:	71fb      	strb	r3, [r7, #7]
 800deb6:	e011      	b.n	800dedc <SX1276Random+0x48>
    {
        DelayMs( 1 );
 800deb8:	2001      	movs	r0, #1
 800deba:	f7fd fe8a 	bl	800bbd2 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800debe:	202c      	movs	r0, #44	; 0x2c
 800dec0:	f001 faf0 	bl	800f4a4 <SX1276Read>
 800dec4:	4603      	mov	r3, r0
 800dec6:	f003 0201 	and.w	r2, r3, #1
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	fa02 f303 	lsl.w	r3, r2, r3
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	3301      	adds	r3, #1
 800deda:	71fb      	strb	r3, [r7, #7]
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	2b1f      	cmp	r3, #31
 800dee0:	d9ea      	bls.n	800deb8 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 800dee2:	f000 fed1 	bl	800ec88 <SX1276SetSleep>

    return rnd;
 800dee6:	683b      	ldr	r3, [r7, #0]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 800def0:	b590      	push	{r4, r7, lr}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800def6:	2009      	movs	r0, #9
 800def8:	f001 fad4 	bl	800f4a4 <SX1276Read>
 800defc:	4603      	mov	r3, r0
 800defe:	71fb      	strb	r3, [r7, #7]
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800df00:	2006      	movs	r0, #6
 800df02:	f001 facf 	bl	800f4a4 <SX1276Read>
 800df06:	4603      	mov	r3, r0
 800df08:	041c      	lsls	r4, r3, #16
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800df0a:	2007      	movs	r0, #7
 800df0c:	f001 faca 	bl	800f4a4 <SX1276Read>
 800df10:	4603      	mov	r3, r0
 800df12:	021b      	lsls	r3, r3, #8
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800df14:	431c      	orrs	r4, r3
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800df16:	2008      	movs	r0, #8
 800df18:	f001 fac4 	bl	800f4a4 <SX1276Read>
 800df1c:	4603      	mov	r3, r0
                              ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800df1e:	4323      	orrs	r3, r4
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800df20:	4618      	mov	r0, r3
 800df22:	f7f2 fa6f 	bl	8000404 <__aeabi_ui2d>
                              ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) * ( double )FREQ_STEP;
 800df26:	a324      	add	r3, pc, #144	; (adr r3, 800dfb8 <RxChainCalibration+0xc8>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 fae4 	bl	80004f8 <__aeabi_dmul>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
    initialFreq = ( double )( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800df34:	4610      	mov	r0, r2
 800df36:	4619      	mov	r1, r3
 800df38:	f7f2 fda0 	bl	8000a7c <__aeabi_d2uiz>
 800df3c:	4603      	mov	r3, r0
 800df3e:	603b      	str	r3, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800df40:	2100      	movs	r1, #0
 800df42:	2009      	movs	r0, #9
 800df44:	f001 fa9c 	bl	800f480 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800df48:	203b      	movs	r0, #59	; 0x3b
 800df4a:	f001 faab 	bl	800f4a4 <SX1276Read>
 800df4e:	4603      	mov	r3, r0
 800df50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df54:	b2db      	uxtb	r3, r3
 800df56:	4619      	mov	r1, r3
 800df58:	203b      	movs	r0, #59	; 0x3b
 800df5a:	f001 fa91 	bl	800f480 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800df5e:	bf00      	nop
 800df60:	203b      	movs	r0, #59	; 0x3b
 800df62:	f001 fa9f 	bl	800f4a4 <SX1276Read>
 800df66:	4603      	mov	r3, r0
 800df68:	f003 0320 	and.w	r3, r3, #32
 800df6c:	2b20      	cmp	r3, #32
 800df6e:	d0f7      	beq.n	800df60 <RxChainCalibration+0x70>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 800df70:	4813      	ldr	r0, [pc, #76]	; (800dfc0 <RxChainCalibration+0xd0>)
 800df72:	f7ff ff2d 	bl	800ddd0 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800df76:	203b      	movs	r0, #59	; 0x3b
 800df78:	f001 fa94 	bl	800f4a4 <SX1276Read>
 800df7c:	4603      	mov	r3, r0
 800df7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df82:	b2db      	uxtb	r3, r3
 800df84:	4619      	mov	r1, r3
 800df86:	203b      	movs	r0, #59	; 0x3b
 800df88:	f001 fa7a 	bl	800f480 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800df8c:	bf00      	nop
 800df8e:	203b      	movs	r0, #59	; 0x3b
 800df90:	f001 fa88 	bl	800f4a4 <SX1276Read>
 800df94:	4603      	mov	r3, r0
 800df96:	f003 0320 	and.w	r3, r3, #32
 800df9a:	2b20      	cmp	r3, #32
 800df9c:	d0f7      	beq.n	800df8e <RxChainCalibration+0x9e>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	2009      	movs	r0, #9
 800dfa4:	f001 fa6c 	bl	800f480 <SX1276Write>
    SX1276SetChannel( initialFreq );
 800dfa8:	6838      	ldr	r0, [r7, #0]
 800dfaa:	f7ff ff11 	bl	800ddd0 <SX1276SetChannel>
}
 800dfae:	bf00      	nop
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd90      	pop	{r4, r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	00000000 	.word	0x00000000
 800dfbc:	404e8480 	.word	0x404e8480
 800dfc0:	33bca100 	.word	0x33bca100

0800dfc4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73fb      	strb	r3, [r7, #15]
 800dfd0:	e017      	b.n	800e002 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	4a0f      	ldr	r2, [pc, #60]	; (800e014 <GetFskBandwidthRegValue+0x50>)
 800dfd6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d30d      	bcc.n	800dffc <GetFskBandwidthRegValue+0x38>
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	4a0b      	ldr	r2, [pc, #44]	; (800e014 <GetFskBandwidthRegValue+0x50>)
 800dfe6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d205      	bcs.n	800dffc <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
 800dff2:	4a08      	ldr	r2, [pc, #32]	; (800e014 <GetFskBandwidthRegValue+0x50>)
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	4413      	add	r3, r2
 800dff8:	791b      	ldrb	r3, [r3, #4]
 800dffa:	e006      	b.n	800e00a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	3301      	adds	r3, #1
 800e000:	73fb      	strb	r3, [r7, #15]
 800e002:	7bfb      	ldrb	r3, [r7, #15]
 800e004:	2b14      	cmp	r3, #20
 800e006:	d9e4      	bls.n	800dfd2 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800e008:	e7fe      	b.n	800e008 <GetFskBandwidthRegValue+0x44>
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	bc80      	pop	{r7}
 800e012:	4770      	bx	lr
 800e014:	08012860 	.word	0x08012860

0800e018 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800e018:	b5b0      	push	{r4, r5, r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60b9      	str	r1, [r7, #8]
 800e020:	607a      	str	r2, [r7, #4]
 800e022:	461a      	mov	r2, r3
 800e024:	4603      	mov	r3, r0
 800e026:	73fb      	strb	r3, [r7, #15]
 800e028:	4613      	mov	r3, r2
 800e02a:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	4618      	mov	r0, r3
 800e030:	f001 f9d0 	bl	800f3d4 <SX1276SetModem>

    switch( modem )
 800e034:	7bfb      	ldrb	r3, [r7, #15]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <SX1276SetRxConfig+0x2a>
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	f000 80d2 	beq.w	800e1e4 <SX1276SetRxConfig+0x1cc>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e040:	e206      	b.n	800e450 <SX1276SetRxConfig+0x438>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e042:	4a97      	ldr	r2, [pc, #604]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800e04a:	4a95      	ldr	r2, [pc, #596]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800e052:	4a93      	ldr	r2, [pc, #588]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e05a:	4a91      	ldr	r2, [pc, #580]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e05c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e060:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800e064:	4a8e      	ldr	r2, [pc, #568]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e066:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e06a:	f882 30fb 	strb.w	r3, [r2, #251]	; 0xfb
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e06e:	4a8c      	ldr	r2, [pc, #560]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e070:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e074:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e078:	4a89      	ldr	r2, [pc, #548]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e07a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e07e:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800e082:	4a87      	ldr	r2, [pc, #540]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e084:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e088:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e08c:	4a84      	ldr	r2, [pc, #528]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e08e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e090:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.RxSingleTimeout = symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1e3;
 800e094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e096:	4618      	mov	r0, r3
 800e098:	f7f2 f9c4 	bl	8000424 <__aeabi_i2d>
 800e09c:	4604      	mov	r4, r0
 800e09e:	460d      	mov	r5, r1
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7f2 f9af 	bl	8000404 <__aeabi_ui2d>
 800e0a6:	4602      	mov	r2, r0
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	f04f 0000 	mov.w	r0, #0
 800e0ae:	497d      	ldr	r1, [pc, #500]	; (800e2a4 <SX1276SetRxConfig+0x28c>)
 800e0b0:	f7f2 fb4c 	bl	800074c <__aeabi_ddiv>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	f04f 0200 	mov.w	r2, #0
 800e0c0:	4b79      	ldr	r3, [pc, #484]	; (800e2a8 <SX1276SetRxConfig+0x290>)
 800e0c2:	f7f2 fa19 	bl	80004f8 <__aeabi_dmul>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	f7f2 fa13 	bl	80004f8 <__aeabi_dmul>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f04f 0200 	mov.w	r2, #0
 800e0de:	4b73      	ldr	r3, [pc, #460]	; (800e2ac <SX1276SetRxConfig+0x294>)
 800e0e0:	f7f2 fa0a 	bl	80004f8 <__aeabi_dmul>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	f7f2 fcc6 	bl	8000a7c <__aeabi_d2uiz>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4a6b      	ldr	r2, [pc, #428]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e0f4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7f2 f983 	bl	8000404 <__aeabi_ui2d>
 800e0fe:	4602      	mov	r2, r0
 800e100:	460b      	mov	r3, r1
 800e102:	a165      	add	r1, pc, #404	; (adr r1, 800e298 <SX1276SetRxConfig+0x280>)
 800e104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e108:	f7f2 fb20 	bl	800074c <__aeabi_ddiv>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4610      	mov	r0, r2
 800e112:	4619      	mov	r1, r3
 800e114:	f7f2 fcb2 	bl	8000a7c <__aeabi_d2uiz>
 800e118:	4603      	mov	r3, r0
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	0a1b      	lsrs	r3, r3, #8
 800e122:	b2db      	uxtb	r3, r3
 800e124:	4619      	mov	r1, r3
 800e126:	2002      	movs	r0, #2
 800e128:	f001 f9aa 	bl	800f480 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	4619      	mov	r1, r3
 800e132:	2003      	movs	r0, #3
 800e134:	f001 f9a4 	bl	800f480 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800e138:	68b8      	ldr	r0, [r7, #8]
 800e13a:	f7ff ff43 	bl	800dfc4 <GetFskBandwidthRegValue>
 800e13e:	4603      	mov	r3, r0
 800e140:	4619      	mov	r1, r3
 800e142:	2012      	movs	r0, #18
 800e144:	f001 f99c 	bl	800f480 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800e148:	6a38      	ldr	r0, [r7, #32]
 800e14a:	f7ff ff3b 	bl	800dfc4 <GetFskBandwidthRegValue>
 800e14e:	4603      	mov	r3, r0
 800e150:	4619      	mov	r1, r3
 800e152:	2013      	movs	r0, #19
 800e154:	f001 f994 	bl	800f480 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e15a:	0a1b      	lsrs	r3, r3, #8
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	4619      	mov	r1, r3
 800e162:	2025      	movs	r0, #37	; 0x25
 800e164:	f001 f98c 	bl	800f480 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	4619      	mov	r1, r3
 800e16e:	2026      	movs	r0, #38	; 0x26
 800e170:	f001 f986 	bl	800f480 <SX1276Write>
            if( fixLen == 1 )
 800e174:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d006      	beq.n	800e18a <SX1276SetRxConfig+0x172>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800e17c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e180:	4619      	mov	r1, r3
 800e182:	2032      	movs	r0, #50	; 0x32
 800e184:	f001 f97c 	bl	800f480 <SX1276Write>
 800e188:	e003      	b.n	800e192 <SX1276SetRxConfig+0x17a>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800e18a:	21ff      	movs	r1, #255	; 0xff
 800e18c:	2032      	movs	r0, #50	; 0x32
 800e18e:	f001 f977 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e192:	2030      	movs	r0, #48	; 0x30
 800e194:	f001 f986 	bl	800f4a4 <SX1276Read>
 800e198:	4603      	mov	r3, r0
 800e19a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e19c:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800e1a0:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e1a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	d001      	beq.n	800e1ae <SX1276SetRxConfig+0x196>
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	e001      	b.n	800e1b2 <SX1276SetRxConfig+0x19a>
 800e1ae:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800e1b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e1ba:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e1bc:	b25b      	sxtb	r3, r3
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	2030      	movs	r0, #48	; 0x30
 800e1c8:	f001 f95a 	bl	800f480 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e1cc:	2031      	movs	r0, #49	; 0x31
 800e1ce:	f001 f969 	bl	800f4a4 <SX1276Read>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d8:	b2db      	uxtb	r3, r3
 800e1da:	4619      	mov	r1, r3
 800e1dc:	2031      	movs	r0, #49	; 0x31
 800e1de:	f001 f94f 	bl	800f480 <SX1276Write>
        break;
 800e1e2:	e135      	b.n	800e450 <SX1276SetRxConfig+0x438>
            if( bandwidth > 2 )
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d900      	bls.n	800e1ec <SX1276SetRxConfig+0x1d4>
                while( 1 );
 800e1ea:	e7fe      	b.n	800e1ea <SX1276SetRxConfig+0x1d2>
            bandwidth += 7;
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	3307      	adds	r3, #7
 800e1f0:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e1f2:	4a2b      	ldr	r2, [pc, #172]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800e1fa:	4a29      	ldr	r2, [pc, #164]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800e202:	4a27      	ldr	r2, [pc, #156]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e204:	7bbb      	ldrb	r3, [r7, #14]
 800e206:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e20a:	4a25      	ldr	r2, [pc, #148]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e20c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e20e:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e212:	4a23      	ldr	r2, [pc, #140]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e218:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800e21c:	4a20      	ldr	r2, [pc, #128]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e21e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e222:	f882 3129 	strb.w	r3, [r2, #297]	; 0x129
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e226:	4a1e      	ldr	r2, [pc, #120]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e228:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e22c:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e230:	4a1b      	ldr	r2, [pc, #108]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e232:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e236:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e23a:	4a19      	ldr	r2, [pc, #100]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e23c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e240:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e244:	4a16      	ldr	r2, [pc, #88]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e246:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e24a:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800e24e:	4a14      	ldr	r2, [pc, #80]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e250:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800e254:	f882 312e 	strb.w	r3, [r2, #302]	; 0x12e
            if( datarate > 12 )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b0c      	cmp	r3, #12
 800e25c:	d902      	bls.n	800e264 <SX1276SetRxConfig+0x24c>
                datarate = 12;
 800e25e:	230c      	movs	r3, #12
 800e260:	607b      	str	r3, [r7, #4]
 800e262:	e004      	b.n	800e26e <SX1276SetRxConfig+0x256>
            else if( datarate < 6 )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b05      	cmp	r3, #5
 800e268:	d801      	bhi.n	800e26e <SX1276SetRxConfig+0x256>
                datarate = 6;
 800e26a:	2306      	movs	r3, #6
 800e26c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	2b07      	cmp	r3, #7
 800e272:	d105      	bne.n	800e280 <SX1276SetRxConfig+0x268>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b0b      	cmp	r3, #11
 800e278:	d008      	beq.n	800e28c <SX1276SetRxConfig+0x274>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2b0c      	cmp	r3, #12
 800e27e:	d005      	beq.n	800e28c <SX1276SetRxConfig+0x274>
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	2b08      	cmp	r3, #8
 800e284:	d114      	bne.n	800e2b0 <SX1276SetRxConfig+0x298>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b0c      	cmp	r3, #12
 800e28a:	d111      	bne.n	800e2b0 <SX1276SetRxConfig+0x298>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e28c:	4b04      	ldr	r3, [pc, #16]	; (800e2a0 <SX1276SetRxConfig+0x288>)
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800e294:	e010      	b.n	800e2b8 <SX1276SetRxConfig+0x2a0>
 800e296:	bf00      	nop
 800e298:	00000000 	.word	0x00000000
 800e29c:	417e8480 	.word	0x417e8480
 800e2a0:	20001240 	.word	0x20001240
 800e2a4:	3ff00000 	.word	0x3ff00000
 800e2a8:	40200000 	.word	0x40200000
 800e2ac:	408f4000 	.word	0x408f4000
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e2b0:	4b69      	ldr	r3, [pc, #420]	; (800e458 <SX1276SetRxConfig+0x440>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e2b8:	201d      	movs	r0, #29
 800e2ba:	f001 f8f3 	bl	800f4a4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	011b      	lsls	r3, r3, #4
 800e2c4:	b2da      	uxtb	r2, r3
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	4313      	orrs	r3, r2
 800e2ce:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e2d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e2d8:	4619      	mov	r1, r3
 800e2da:	201d      	movs	r0, #29
 800e2dc:	f001 f8d0 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e2e0:	201e      	movs	r0, #30
 800e2e2:	f001 f8df 	bl	800f4a4 <SX1276Read>
 800e2e6:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800e2e8:	f003 0308 	and.w	r3, r3, #8
 800e2ec:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	011b      	lsls	r3, r3, #4
 800e2f4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800e2fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	b2db      	uxtb	r3, r3
 800e302:	4313      	orrs	r3, r2
 800e304:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800e306:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e308:	0a1b      	lsrs	r3, r3, #8
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	f003 0303 	and.w	r3, r3, #3
 800e312:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e314:	4313      	orrs	r3, r2
 800e316:	b2db      	uxtb	r3, r3
 800e318:	4619      	mov	r1, r3
 800e31a:	201e      	movs	r0, #30
 800e31c:	f001 f8b0 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e320:	2026      	movs	r0, #38	; 0x26
 800e322:	f001 f8bf 	bl	800f4a4 <SX1276Read>
 800e326:	4603      	mov	r3, r0
 800e328:	b25b      	sxtb	r3, r3
 800e32a:	f023 0308 	bic.w	r3, r3, #8
 800e32e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e330:	4b49      	ldr	r3, [pc, #292]	; (800e458 <SX1276SetRxConfig+0x440>)
 800e332:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e336:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e338:	b25b      	sxtb	r3, r3
 800e33a:	4313      	orrs	r3, r2
 800e33c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	4619      	mov	r1, r3
 800e342:	2026      	movs	r0, #38	; 0x26
 800e344:	f001 f89c 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800e348:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	4619      	mov	r1, r3
 800e34e:	201f      	movs	r0, #31
 800e350:	f001 f896 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800e354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e356:	0a1b      	lsrs	r3, r3, #8
 800e358:	b29b      	uxth	r3, r3
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	4619      	mov	r1, r3
 800e35e:	2020      	movs	r0, #32
 800e360:	f001 f88e 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800e364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e366:	b2db      	uxtb	r3, r3
 800e368:	4619      	mov	r1, r3
 800e36a:	2021      	movs	r0, #33	; 0x21
 800e36c:	f001 f888 	bl	800f480 <SX1276Write>
            if( fixLen == 1 )
 800e370:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e374:	2b00      	cmp	r3, #0
 800e376:	d005      	beq.n	800e384 <SX1276SetRxConfig+0x36c>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800e378:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e37c:	4619      	mov	r1, r3
 800e37e:	2022      	movs	r0, #34	; 0x22
 800e380:	f001 f87e 	bl	800f480 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e384:	4b34      	ldr	r3, [pc, #208]	; (800e458 <SX1276SetRxConfig+0x440>)
 800e386:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d011      	beq.n	800e3b2 <SX1276SetRxConfig+0x39a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e38e:	2044      	movs	r0, #68	; 0x44
 800e390:	f001 f888 	bl	800f4a4 <SX1276Read>
 800e394:	4603      	mov	r3, r0
 800e396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	4619      	mov	r1, r3
 800e39e:	2044      	movs	r0, #68	; 0x44
 800e3a0:	f001 f86e 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e3a4:	4b2c      	ldr	r3, [pc, #176]	; (800e458 <SX1276SetRxConfig+0x440>)
 800e3a6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	2024      	movs	r0, #36	; 0x24
 800e3ae:	f001 f867 	bl	800f480 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	2b09      	cmp	r3, #9
 800e3b6:	d10e      	bne.n	800e3d6 <SX1276SetRxConfig+0x3be>
 800e3b8:	4b27      	ldr	r3, [pc, #156]	; (800e458 <SX1276SetRxConfig+0x440>)
 800e3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e3be:	4a27      	ldr	r2, [pc, #156]	; (800e45c <SX1276SetRxConfig+0x444>)
 800e3c0:	4293      	cmp	r3, r2
 800e3c2:	d908      	bls.n	800e3d6 <SX1276SetRxConfig+0x3be>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800e3c4:	2102      	movs	r1, #2
 800e3c6:	2036      	movs	r0, #54	; 0x36
 800e3c8:	f001 f85a 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 800e3cc:	2164      	movs	r1, #100	; 0x64
 800e3ce:	203a      	movs	r0, #58	; 0x3a
 800e3d0:	f001 f856 	bl	800f480 <SX1276Write>
 800e3d4:	e00f      	b.n	800e3f6 <SX1276SetRxConfig+0x3de>
            else if( bandwidth == 9 )
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b09      	cmp	r3, #9
 800e3da:	d108      	bne.n	800e3ee <SX1276SetRxConfig+0x3d6>
                SX1276Write( REG_LR_TEST36, 0x02 );
 800e3dc:	2102      	movs	r1, #2
 800e3de:	2036      	movs	r0, #54	; 0x36
 800e3e0:	f001 f84e 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 800e3e4:	217f      	movs	r1, #127	; 0x7f
 800e3e6:	203a      	movs	r0, #58	; 0x3a
 800e3e8:	f001 f84a 	bl	800f480 <SX1276Write>
 800e3ec:	e003      	b.n	800e3f6 <SX1276SetRxConfig+0x3de>
                SX1276Write( REG_LR_TEST36, 0x03 );
 800e3ee:	2103      	movs	r1, #3
 800e3f0:	2036      	movs	r0, #54	; 0x36
 800e3f2:	f001 f845 	bl	800f480 <SX1276Write>
            if( datarate == 6 )
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2b06      	cmp	r3, #6
 800e3fa:	d114      	bne.n	800e426 <SX1276SetRxConfig+0x40e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e3fc:	2031      	movs	r0, #49	; 0x31
 800e3fe:	f001 f851 	bl	800f4a4 <SX1276Read>
 800e402:	4603      	mov	r3, r0
 800e404:	b25b      	sxtb	r3, r3
 800e406:	f023 0307 	bic.w	r3, r3, #7
 800e40a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e40c:	f043 0305 	orr.w	r3, r3, #5
 800e410:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e412:	b2db      	uxtb	r3, r3
 800e414:	4619      	mov	r1, r3
 800e416:	2031      	movs	r0, #49	; 0x31
 800e418:	f001 f832 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e41c:	210c      	movs	r1, #12
 800e41e:	2037      	movs	r0, #55	; 0x37
 800e420:	f001 f82e 	bl	800f480 <SX1276Write>
        break;
 800e424:	e013      	b.n	800e44e <SX1276SetRxConfig+0x436>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e426:	2031      	movs	r0, #49	; 0x31
 800e428:	f001 f83c 	bl	800f4a4 <SX1276Read>
 800e42c:	4603      	mov	r3, r0
 800e42e:	b25b      	sxtb	r3, r3
 800e430:	f023 0307 	bic.w	r3, r3, #7
 800e434:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e436:	f043 0303 	orr.w	r3, r3, #3
 800e43a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	4619      	mov	r1, r3
 800e440:	2031      	movs	r0, #49	; 0x31
 800e442:	f001 f81d 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e446:	210a      	movs	r1, #10
 800e448:	2037      	movs	r0, #55	; 0x37
 800e44a:	f001 f819 	bl	800f480 <SX1276Write>
        break;
 800e44e:	bf00      	nop
}
 800e450:	bf00      	nop
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bdb0      	pop	{r4, r5, r7, pc}
 800e458:	20001240 	.word	0x20001240
 800e45c:	1f4add40 	.word	0x1f4add40

0800e460 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	60ba      	str	r2, [r7, #8]
 800e468:	607b      	str	r3, [r7, #4]
 800e46a:	4603      	mov	r3, r0
 800e46c:	73fb      	strb	r3, [r7, #15]
 800e46e:	460b      	mov	r3, r1
 800e470:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 800e472:	7bfb      	ldrb	r3, [r7, #15]
 800e474:	4618      	mov	r0, r3
 800e476:	f000 ffad 	bl	800f3d4 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 800e47a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff fb48 	bl	800db14 <SX1276SetRfTxPower>

    switch( modem )
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d003      	beq.n	800e492 <SX1276SetTxConfig+0x32>
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	f000 809d 	beq.w	800e5ca <SX1276SetTxConfig+0x16a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 800e490:	e191      	b.n	800e7b6 <SX1276SetTxConfig+0x356>
            SX1276.Settings.Fsk.Power = power;
 800e492:	4abd      	ldr	r2, [pc, #756]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	f882 30e4 	strb.w	r3, [r2, #228]	; 0xe4
            SX1276.Settings.Fsk.Fdev = fdev;
 800e49a:	4abb      	ldr	r2, [pc, #748]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800e4a2:	4ab9      	ldr	r2, [pc, #740]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
 800e4aa:	4ab7      	ldr	r2, [pc, #732]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800e4b2:	4ab5      	ldr	r2, [pc, #724]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4b4:	8c3b      	ldrh	r3, [r7, #32]
 800e4b6:	f8a2 30f8 	strh.w	r3, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.FixLen = fixLen;
 800e4ba:	4ab3      	ldr	r2, [pc, #716]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4c0:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800e4c4:	4ab0      	ldr	r2, [pc, #704]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e4ca:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800e4ce:	4aae      	ldr	r2, [pc, #696]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e4d4:	f882 30fd 	strb.w	r3, [r2, #253]	; 0xfd
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800e4d8:	4aab      	ldr	r2, [pc, #684]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 800e4e0:	68b8      	ldr	r0, [r7, #8]
 800e4e2:	f7f1 ff8f 	bl	8000404 <__aeabi_ui2d>
 800e4e6:	a3a4      	add	r3, pc, #656	; (adr r3, 800e778 <SX1276SetTxConfig+0x318>)
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	f7f2 f92e 	bl	800074c <__aeabi_ddiv>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4610      	mov	r0, r2
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	f7f2 fac0 	bl	8000a7c <__aeabi_d2uiz>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	0a1b      	lsrs	r3, r3, #8
 800e506:	b2db      	uxtb	r3, r3
 800e508:	4619      	mov	r1, r3
 800e50a:	2004      	movs	r0, #4
 800e50c:	f000 ffb8 	bl	800f480 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	4619      	mov	r1, r3
 800e516:	2005      	movs	r0, #5
 800e518:	f000 ffb2 	bl	800f480 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800e51c:	69b8      	ldr	r0, [r7, #24]
 800e51e:	f7f1 ff71 	bl	8000404 <__aeabi_ui2d>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	a196      	add	r1, pc, #600	; (adr r1, 800e780 <SX1276SetTxConfig+0x320>)
 800e528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e52c:	f7f2 f90e 	bl	800074c <__aeabi_ddiv>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4610      	mov	r0, r2
 800e536:	4619      	mov	r1, r3
 800e538:	f7f2 faa0 	bl	8000a7c <__aeabi_d2uiz>
 800e53c:	4603      	mov	r3, r0
 800e53e:	b29b      	uxth	r3, r3
 800e540:	61bb      	str	r3, [r7, #24]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	0a1b      	lsrs	r3, r3, #8
 800e546:	b2db      	uxtb	r3, r3
 800e548:	4619      	mov	r1, r3
 800e54a:	2002      	movs	r0, #2
 800e54c:	f000 ff98 	bl	800f480 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	4619      	mov	r1, r3
 800e556:	2003      	movs	r0, #3
 800e558:	f000 ff92 	bl	800f480 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e55c:	8c3b      	ldrh	r3, [r7, #32]
 800e55e:	0a1b      	lsrs	r3, r3, #8
 800e560:	b29b      	uxth	r3, r3
 800e562:	b2db      	uxtb	r3, r3
 800e564:	4619      	mov	r1, r3
 800e566:	2025      	movs	r0, #37	; 0x25
 800e568:	f000 ff8a 	bl	800f480 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800e56c:	8c3b      	ldrh	r3, [r7, #32]
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	4619      	mov	r1, r3
 800e572:	2026      	movs	r0, #38	; 0x26
 800e574:	f000 ff84 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800e578:	2030      	movs	r0, #48	; 0x30
 800e57a:	f000 ff93 	bl	800f4a4 <SX1276Read>
 800e57e:	4603      	mov	r3, r0
 800e580:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800e582:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800e586:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800e588:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e58c:	2a00      	cmp	r2, #0
 800e58e:	d001      	beq.n	800e594 <SX1276SetTxConfig+0x134>
 800e590:	2200      	movs	r2, #0
 800e592:	e001      	b.n	800e598 <SX1276SetTxConfig+0x138>
 800e594:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800e598:	4313      	orrs	r3, r2
 800e59a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800e59c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e5a0:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800e5a2:	b25b      	sxtb	r3, r3
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	2030      	movs	r0, #48	; 0x30
 800e5ae:	f000 ff67 	bl	800f480 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800e5b2:	2031      	movs	r0, #49	; 0x31
 800e5b4:	f000 ff76 	bl	800f4a4 <SX1276Read>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	2031      	movs	r0, #49	; 0x31
 800e5c4:	f000 ff5c 	bl	800f480 <SX1276Write>
        break;
 800e5c8:	e0f5      	b.n	800e7b6 <SX1276SetTxConfig+0x356>
            SX1276.Settings.LoRa.Power = power;
 800e5ca:	4a6f      	ldr	r2, [pc, #444]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            if( bandwidth > 2 )
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b02      	cmp	r3, #2
 800e5d6:	d900      	bls.n	800e5da <SX1276SetTxConfig+0x17a>
                while( 1 );
 800e5d8:	e7fe      	b.n	800e5d8 <SX1276SetTxConfig+0x178>
            bandwidth += 7;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3307      	adds	r3, #7
 800e5de:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800e5e0:	4a69      	ldr	r2, [pc, #420]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
            SX1276.Settings.LoRa.Datarate = datarate;
 800e5e8:	4a67      	ldr	r2, [pc, #412]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
            SX1276.Settings.LoRa.Coderate = coderate;
 800e5f0:	4a65      	ldr	r2, [pc, #404]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e5f2:	7f3b      	ldrb	r3, [r7, #28]
 800e5f4:	f882 3125 	strb.w	r3, [r2, #293]	; 0x125
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800e5f8:	4a63      	ldr	r2, [pc, #396]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e5fa:	8c3b      	ldrh	r3, [r7, #32]
 800e5fc:	f8a2 3126 	strh.w	r3, [r2, #294]	; 0x126
            SX1276.Settings.LoRa.FixLen = fixLen;
 800e600:	4a61      	ldr	r2, [pc, #388]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e602:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e606:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800e60a:	4a5f      	ldr	r2, [pc, #380]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e60c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e610:	f882 312b 	strb.w	r3, [r2, #299]	; 0x12b
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800e614:	4a5c      	ldr	r2, [pc, #368]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e616:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800e61a:	f882 312c 	strb.w	r3, [r2, #300]	; 0x12c
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800e61e:	4a5a      	ldr	r2, [pc, #360]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e624:	f882 312a 	strb.w	r3, [r2, #298]	; 0x12a
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800e628:	4a57      	ldr	r2, [pc, #348]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e62a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e62e:	f882 312d 	strb.w	r3, [r2, #301]	; 0x12d
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800e632:	4a55      	ldr	r2, [pc, #340]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e636:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
            if( datarate > 12 )
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	2b0c      	cmp	r3, #12
 800e63e:	d902      	bls.n	800e646 <SX1276SetTxConfig+0x1e6>
                datarate = 12;
 800e640:	230c      	movs	r3, #12
 800e642:	61bb      	str	r3, [r7, #24]
 800e644:	e004      	b.n	800e650 <SX1276SetTxConfig+0x1f0>
            else if( datarate < 6 )
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2b05      	cmp	r3, #5
 800e64a:	d801      	bhi.n	800e650 <SX1276SetTxConfig+0x1f0>
                datarate = 6;
 800e64c:	2306      	movs	r3, #6
 800e64e:	61bb      	str	r3, [r7, #24]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b07      	cmp	r3, #7
 800e654:	d105      	bne.n	800e662 <SX1276SetTxConfig+0x202>
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	2b0b      	cmp	r3, #11
 800e65a:	d008      	beq.n	800e66e <SX1276SetTxConfig+0x20e>
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	2b0c      	cmp	r3, #12
 800e660:	d005      	beq.n	800e66e <SX1276SetTxConfig+0x20e>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b08      	cmp	r3, #8
 800e666:	d107      	bne.n	800e678 <SX1276SetTxConfig+0x218>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2b0c      	cmp	r3, #12
 800e66c:	d104      	bne.n	800e678 <SX1276SetTxConfig+0x218>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800e66e:	4b46      	ldr	r3, [pc, #280]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e670:	2201      	movs	r2, #1
 800e672:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 800e676:	e003      	b.n	800e680 <SX1276SetTxConfig+0x220>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800e678:	4b43      	ldr	r3, [pc, #268]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800e680:	4b41      	ldr	r3, [pc, #260]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e682:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800e686:	2b00      	cmp	r3, #0
 800e688:	d011      	beq.n	800e6ae <SX1276SetTxConfig+0x24e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800e68a:	2044      	movs	r0, #68	; 0x44
 800e68c:	f000 ff0a 	bl	800f4a4 <SX1276Read>
 800e690:	4603      	mov	r3, r0
 800e692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e696:	b2db      	uxtb	r3, r3
 800e698:	4619      	mov	r1, r3
 800e69a:	2044      	movs	r0, #68	; 0x44
 800e69c:	f000 fef0 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800e6a0:	4b39      	ldr	r3, [pc, #228]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e6a2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	2024      	movs	r0, #36	; 0x24
 800e6aa:	f000 fee9 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800e6ae:	201d      	movs	r0, #29
 800e6b0:	f000 fef8 	bl	800f4a4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	011b      	lsls	r3, r3, #4
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	7f3b      	ldrb	r3, [r7, #28]
 800e6be:	005b      	lsls	r3, r3, #1
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e6c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	201d      	movs	r0, #29
 800e6d2:	f000 fed5 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800e6d6:	201e      	movs	r0, #30
 800e6d8:	f000 fee4 	bl	800f4a4 <SX1276Read>
 800e6dc:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800e6de:	f003 030b 	and.w	r3, r3, #11
 800e6e2:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 800e6ec:	4313      	orrs	r3, r2
 800e6ee:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800e6f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	201e      	movs	r0, #30
 800e700:	f000 febe 	bl	800f480 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800e704:	2026      	movs	r0, #38	; 0x26
 800e706:	f000 fecd 	bl	800f4a4 <SX1276Read>
 800e70a:	4603      	mov	r3, r0
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	f023 0308 	bic.w	r3, r3, #8
 800e712:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800e714:	4b1c      	ldr	r3, [pc, #112]	; (800e788 <SX1276SetTxConfig+0x328>)
 800e716:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e71a:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800e71c:	b25b      	sxtb	r3, r3
 800e71e:	4313      	orrs	r3, r2
 800e720:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800e722:	b2db      	uxtb	r3, r3
 800e724:	4619      	mov	r1, r3
 800e726:	2026      	movs	r0, #38	; 0x26
 800e728:	f000 feaa 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800e72c:	8c3b      	ldrh	r3, [r7, #32]
 800e72e:	0a1b      	lsrs	r3, r3, #8
 800e730:	b29b      	uxth	r3, r3
 800e732:	b2db      	uxtb	r3, r3
 800e734:	4619      	mov	r1, r3
 800e736:	2020      	movs	r0, #32
 800e738:	f000 fea2 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800e73c:	8c3b      	ldrh	r3, [r7, #32]
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	4619      	mov	r1, r3
 800e742:	2021      	movs	r0, #33	; 0x21
 800e744:	f000 fe9c 	bl	800f480 <SX1276Write>
            if( datarate == 6 )
 800e748:	69bb      	ldr	r3, [r7, #24]
 800e74a:	2b06      	cmp	r3, #6
 800e74c:	d11e      	bne.n	800e78c <SX1276SetTxConfig+0x32c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e74e:	2031      	movs	r0, #49	; 0x31
 800e750:	f000 fea8 	bl	800f4a4 <SX1276Read>
 800e754:	4603      	mov	r3, r0
 800e756:	b25b      	sxtb	r3, r3
 800e758:	f023 0307 	bic.w	r3, r3, #7
 800e75c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e75e:	f043 0305 	orr.w	r3, r3, #5
 800e762:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e764:	b2db      	uxtb	r3, r3
 800e766:	4619      	mov	r1, r3
 800e768:	2031      	movs	r0, #49	; 0x31
 800e76a:	f000 fe89 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e76e:	210c      	movs	r1, #12
 800e770:	2037      	movs	r0, #55	; 0x37
 800e772:	f000 fe85 	bl	800f480 <SX1276Write>
        break;
 800e776:	e01d      	b.n	800e7b4 <SX1276SetTxConfig+0x354>
 800e778:	00000000 	.word	0x00000000
 800e77c:	404e8480 	.word	0x404e8480
 800e780:	00000000 	.word	0x00000000
 800e784:	417e8480 	.word	0x417e8480
 800e788:	20001240 	.word	0x20001240
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800e78c:	2031      	movs	r0, #49	; 0x31
 800e78e:	f000 fe89 	bl	800f4a4 <SX1276Read>
 800e792:	4603      	mov	r3, r0
 800e794:	b25b      	sxtb	r3, r3
 800e796:	f023 0307 	bic.w	r3, r3, #7
 800e79a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800e79c:	f043 0303 	orr.w	r3, r3, #3
 800e7a0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	4619      	mov	r1, r3
 800e7a6:	2031      	movs	r0, #49	; 0x31
 800e7a8:	f000 fe6a 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800e7ac:	210a      	movs	r1, #10
 800e7ae:	2037      	movs	r0, #55	; 0x37
 800e7b0:	f000 fe66 	bl	800f480 <SX1276Write>
        break;
 800e7b4:	bf00      	nop
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop

0800e7c0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 800e7c0:	b5b0      	push	{r4, r5, r7, lr}
 800e7c2:	b094      	sub	sp, #80	; 0x50
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	460a      	mov	r2, r1
 800e7ca:	71fb      	strb	r3, [r7, #7]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 800e7d4:	79fb      	ldrb	r3, [r7, #7]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <SX1276GetTimeOnAir+0x22>
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	f000 808e 	beq.w	800e8fc <SX1276GetTimeOnAir+0x13c>
 800e7e0:	e17c      	b.n	800eadc <SX1276GetTimeOnAir+0x31c>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e7e2:	4bc9      	ldr	r3, [pc, #804]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e7e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800e7e8:	461c      	mov	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800e7ea:	2027      	movs	r0, #39	; 0x27
 800e7ec:	f000 fe5a 	bl	800f4a4 <SX1276Read>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e7f6:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e7f8:	4423      	add	r3, r4
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7f1 fe12 	bl	8000424 <__aeabi_i2d>
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800e804:	49c0      	ldr	r1, [pc, #768]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e806:	f891 10fa 	ldrb.w	r1, [r1, #250]	; 0xfa
 800e80a:	2900      	cmp	r1, #0
 800e80c:	d004      	beq.n	800e818 <SX1276GetTimeOnAir+0x58>
 800e80e:	f04f 0000 	mov.w	r0, #0
 800e812:	f04f 0100 	mov.w	r1, #0
 800e816:	e002      	b.n	800e81e <SX1276GetTimeOnAir+0x5e>
 800e818:	f04f 0000 	mov.w	r0, #0
 800e81c:	49bb      	ldr	r1, [pc, #748]	; (800eb0c <SX1276GetTimeOnAir+0x34c>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800e81e:	f7f1 fcb5 	bl	800018c <__adddf3>
 800e822:	4602      	mov	r2, r0
 800e824:	460b      	mov	r3, r1
 800e826:	4614      	mov	r4, r2
 800e828:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800e82a:	2030      	movs	r0, #48	; 0x30
 800e82c:	f000 fe3a 	bl	800f4a4 <SX1276Read>
 800e830:	4603      	mov	r3, r0
 800e832:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 800e836:	2b00      	cmp	r3, #0
 800e838:	d003      	beq.n	800e842 <SX1276GetTimeOnAir+0x82>
 800e83a:	f04f 0000 	mov.w	r0, #0
 800e83e:	49b3      	ldr	r1, [pc, #716]	; (800eb0c <SX1276GetTimeOnAir+0x34c>)
 800e840:	e003      	b.n	800e84a <SX1276GetTimeOnAir+0x8a>
 800e842:	f04f 0000 	mov.w	r0, #0
 800e846:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800e84a:	4622      	mov	r2, r4
 800e84c:	462b      	mov	r3, r5
 800e84e:	f7f1 fc9d 	bl	800018c <__adddf3>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	4614      	mov	r4, r2
 800e858:	461d      	mov	r5, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800e85a:	79bb      	ldrb	r3, [r7, #6]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7f1 fde1 	bl	8000424 <__aeabi_i2d>
 800e862:	4602      	mov	r2, r0
 800e864:	460b      	mov	r3, r1
 800e866:	4620      	mov	r0, r4
 800e868:	4629      	mov	r1, r5
 800e86a:	f7f1 fc8f 	bl	800018c <__adddf3>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	4614      	mov	r4, r2
 800e874:	461d      	mov	r5, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800e876:	4ba4      	ldr	r3, [pc, #656]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e878:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d004      	beq.n	800e88a <SX1276GetTimeOnAir+0xca>
 800e880:	f04f 0000 	mov.w	r0, #0
 800e884:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e888:	e003      	b.n	800e892 <SX1276GetTimeOnAir+0xd2>
 800e88a:	f04f 0000 	mov.w	r0, #0
 800e88e:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 800e892:	4622      	mov	r2, r4
 800e894:	462b      	mov	r3, r5
 800e896:	f7f1 fc79 	bl	800018c <__adddf3>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4610      	mov	r0, r2
 800e8a0:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e8a2:	f04f 0200 	mov.w	r2, #0
 800e8a6:	4b9a      	ldr	r3, [pc, #616]	; (800eb10 <SX1276GetTimeOnAir+0x350>)
 800e8a8:	f7f1 fe26 	bl	80004f8 <__aeabi_dmul>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	4614      	mov	r4, r2
 800e8b2:	461d      	mov	r5, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1e3 );
 800e8b4:	4b94      	ldr	r3, [pc, #592]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e8b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f1 fda2 	bl	8000404 <__aeabi_ui2d>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	f7f1 ff40 	bl	800074c <__aeabi_ddiv>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	4610      	mov	r0, r2
 800e8d2:	4619      	mov	r1, r3
            airTime = round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800e8d4:	f04f 0200 	mov.w	r2, #0
 800e8d8:	4b8e      	ldr	r3, [pc, #568]	; (800eb14 <SX1276GetTimeOnAir+0x354>)
 800e8da:	f7f1 fe0d 	bl	80004f8 <__aeabi_dmul>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	4610      	mov	r0, r2
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	f003 fc63 	bl	80121b0 <round>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	4610      	mov	r0, r2
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	f7f2 f8c3 	bl	8000a7c <__aeabi_d2uiz>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800e8fa:	e0ef      	b.n	800eadc <SX1276GetTimeOnAir+0x31c>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800e8fc:	f04f 0200 	mov.w	r2, #0
 800e900:	f04f 0300 	mov.w	r3, #0
 800e904:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 800e908:	4b7f      	ldr	r3, [pc, #508]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e90a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e90e:	2b09      	cmp	r3, #9
 800e910:	d012      	beq.n	800e938 <SX1276GetTimeOnAir+0x178>
 800e912:	2b09      	cmp	r3, #9
 800e914:	d816      	bhi.n	800e944 <SX1276GetTimeOnAir+0x184>
 800e916:	2b07      	cmp	r3, #7
 800e918:	d002      	beq.n	800e920 <SX1276GetTimeOnAir+0x160>
 800e91a:	2b08      	cmp	r3, #8
 800e91c:	d006      	beq.n	800e92c <SX1276GetTimeOnAir+0x16c>
 800e91e:	e011      	b.n	800e944 <SX1276GetTimeOnAir+0x184>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 625e2;
            //    break;
            case 7: // 125 kHz
                bw = 125e3;
 800e920:	a371      	add	r3, pc, #452	; (adr r3, 800eae8 <SX1276GetTimeOnAir+0x328>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800e92a:	e00b      	b.n	800e944 <SX1276GetTimeOnAir+0x184>
            case 8: // 250 kHz
                bw = 250e3;
 800e92c:	a370      	add	r3, pc, #448	; (adr r3, 800eaf0 <SX1276GetTimeOnAir+0x330>)
 800e92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e932:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800e936:	e005      	b.n	800e944 <SX1276GetTimeOnAir+0x184>
            case 9: // 500 kHz
                bw = 500e3;
 800e938:	a36f      	add	r3, pc, #444	; (adr r3, 800eaf8 <SX1276GetTimeOnAir+0x338>)
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                break;
 800e942:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800e944:	4b70      	ldr	r3, [pc, #448]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e946:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e94a:	2201      	movs	r2, #1
 800e94c:	fa02 f303 	lsl.w	r3, r2, r3
 800e950:	4618      	mov	r0, r3
 800e952:	f7f1 fd67 	bl	8000424 <__aeabi_i2d>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800e95e:	f7f1 fef5 	bl	800074c <__aeabi_ddiv>
 800e962:	4602      	mov	r2, r0
 800e964:	460b      	mov	r3, r1
 800e966:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            double ts = 1 / rs;
 800e96a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e96e:	f04f 0000 	mov.w	r0, #0
 800e972:	4966      	ldr	r1, [pc, #408]	; (800eb0c <SX1276GetTimeOnAir+0x34c>)
 800e974:	f7f1 feea 	bl	800074c <__aeabi_ddiv>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800e980:	4b61      	ldr	r3, [pc, #388]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e982:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 800e986:	4618      	mov	r0, r3
 800e988:	f7f1 fd4c 	bl	8000424 <__aeabi_i2d>
 800e98c:	f04f 0200 	mov.w	r2, #0
 800e990:	4b61      	ldr	r3, [pc, #388]	; (800eb18 <SX1276GetTimeOnAir+0x358>)
 800e992:	f7f1 fbfb 	bl	800018c <__adddf3>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e99e:	f7f1 fdab 	bl	80004f8 <__aeabi_dmul>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800e9aa:	79bb      	ldrb	r3, [r7, #6]
 800e9ac:	00db      	lsls	r3, r3, #3
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	4b55      	ldr	r3, [pc, #340]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e9b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800e9ba:	4a53      	ldr	r2, [pc, #332]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e9bc:	f892 212a 	ldrb.w	r2, [r2, #298]	; 0x12a
 800e9c0:	0112      	lsls	r2, r2, #4
 800e9c2:	441a      	add	r2, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800e9c4:	4b50      	ldr	r3, [pc, #320]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e9c6:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <SX1276GetTimeOnAir+0x212>
 800e9ce:	2314      	movs	r3, #20
 800e9d0:	e000      	b.n	800e9d4 <SX1276GetTimeOnAir+0x214>
 800e9d2:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7f1 fd13 	bl	8000404 <__aeabi_ui2d>
 800e9de:	4604      	mov	r4, r0
 800e9e0:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800e9e2:	4b49      	ldr	r3, [pc, #292]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e9e4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800e9e8:	4b47      	ldr	r3, [pc, #284]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800e9ea:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <SX1276GetTimeOnAir+0x236>
 800e9f2:	2302      	movs	r3, #2
 800e9f4:	e000      	b.n	800e9f8 <SX1276GetTimeOnAir+0x238>
 800e9f6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7f1 fd01 	bl	8000404 <__aeabi_ui2d>
 800ea02:	4602      	mov	r2, r0
 800ea04:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ea06:	4620      	mov	r0, r4
 800ea08:	4629      	mov	r1, r5
 800ea0a:	f7f1 fe9f 	bl	800074c <__aeabi_ddiv>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	460b      	mov	r3, r1
 800ea12:	4610      	mov	r0, r2
 800ea14:	4619      	mov	r1, r3
 800ea16:	f003 facb 	bl	8011fb0 <ceil>
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	460d      	mov	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800ea1e:	4b3a      	ldr	r3, [pc, #232]	; (800eb08 <SX1276GetTimeOnAir+0x348>)
 800ea20:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 800ea24:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f1 fcfc 	bl	8000424 <__aeabi_i2d>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800ea30:	4620      	mov	r0, r4
 800ea32:	4629      	mov	r1, r5
 800ea34:	f7f1 fd60 	bl	80004f8 <__aeabi_dmul>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800ea40:	f04f 0200 	mov.w	r2, #0
 800ea44:	f04f 0300 	mov.w	r3, #0
 800ea48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ea4c:	f7f1 ffe4 	bl	8000a18 <__aeabi_dcmpgt>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <SX1276GetTimeOnAir+0x29c>
 800ea56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ea5a:	e003      	b.n	800ea64 <SX1276GetTimeOnAir+0x2a4>
 800ea5c:	f04f 0000 	mov.w	r0, #0
 800ea60:	f04f 0100 	mov.w	r1, #0
 800ea64:	f04f 0200 	mov.w	r2, #0
 800ea68:	4b29      	ldr	r3, [pc, #164]	; (800eb10 <SX1276GetTimeOnAir+0x350>)
 800ea6a:	f7f1 fb8f 	bl	800018c <__adddf3>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	460b      	mov	r3, r1
 800ea72:	e9c7 2306 	strd	r2, r3, [r7, #24]
            double tPayload = nPayload * ts;
 800ea76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ea7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ea7e:	f7f1 fd3b 	bl	80004f8 <__aeabi_dmul>
 800ea82:	4602      	mov	r2, r0
 800ea84:	460b      	mov	r3, r1
 800ea86:	e9c7 2304 	strd	r2, r3, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800ea8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ea8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ea92:	f7f1 fb7b 	bl	800018c <__adddf3>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            // return ms secs
            airTime = floor( tOnAir * 1e3 + 0.999 );
 800ea9e:	f04f 0200 	mov.w	r2, #0
 800eaa2:	4b1c      	ldr	r3, [pc, #112]	; (800eb14 <SX1276GetTimeOnAir+0x354>)
 800eaa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eaa8:	f7f1 fd26 	bl	80004f8 <__aeabi_dmul>
 800eaac:	4602      	mov	r2, r0
 800eaae:	460b      	mov	r3, r1
 800eab0:	4610      	mov	r0, r2
 800eab2:	4619      	mov	r1, r3
 800eab4:	a312      	add	r3, pc, #72	; (adr r3, 800eb00 <SX1276GetTimeOnAir+0x340>)
 800eab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaba:	f7f1 fb67 	bl	800018c <__adddf3>
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	4610      	mov	r0, r2
 800eac4:	4619      	mov	r1, r3
 800eac6:	f003 faf3 	bl	80120b0 <floor>
 800eaca:	4602      	mov	r2, r0
 800eacc:	460b      	mov	r3, r1
 800eace:	4610      	mov	r0, r2
 800ead0:	4619      	mov	r1, r3
 800ead2:	f7f1 ffd3 	bl	8000a7c <__aeabi_d2uiz>
 800ead6:	4603      	mov	r3, r0
 800ead8:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800eada:	bf00      	nop
    }
    return airTime;
 800eadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3750      	adds	r7, #80	; 0x50
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bdb0      	pop	{r4, r5, r7, pc}
 800eae6:	bf00      	nop
 800eae8:	00000000 	.word	0x00000000
 800eaec:	40fe8480 	.word	0x40fe8480
 800eaf0:	00000000 	.word	0x00000000
 800eaf4:	410e8480 	.word	0x410e8480
 800eaf8:	00000000 	.word	0x00000000
 800eafc:	411e8480 	.word	0x411e8480
 800eb00:	d916872b 	.word	0xd916872b
 800eb04:	3feff7ce 	.word	0x3feff7ce
 800eb08:	20001240 	.word	0x20001240
 800eb0c:	3ff00000 	.word	0x3ff00000
 800eb10:	40200000 	.word	0x40200000
 800eb14:	408f4000 	.word	0x408f4000
 800eb18:	40110000 	.word	0x40110000

0800eb1c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800eb2c:	4b54      	ldr	r3, [pc, #336]	; (800ec80 <SX1276Send+0x164>)
 800eb2e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d002      	beq.n	800eb3c <SX1276Send+0x20>
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d04a      	beq.n	800ebd0 <SX1276Send+0xb4>
 800eb3a:	e09a      	b.n	800ec72 <SX1276Send+0x156>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800eb3c:	4b50      	ldr	r3, [pc, #320]	; (800ec80 <SX1276Send+0x164>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = size;
 800eb44:	78fb      	ldrb	r3, [r7, #3]
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	4b4d      	ldr	r3, [pc, #308]	; (800ec80 <SX1276Send+0x164>)
 800eb4a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

            if( SX1276.Settings.Fsk.FixLen == false )
 800eb4e:	4b4c      	ldr	r3, [pc, #304]	; (800ec80 <SX1276Send+0x164>)
 800eb50:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800eb54:	f083 0301 	eor.w	r3, r3, #1
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d005      	beq.n	800eb6a <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800eb5e:	1cfb      	adds	r3, r7, #3
 800eb60:	2101      	movs	r1, #1
 800eb62:	4618      	mov	r0, r3
 800eb64:	f000 fd1a 	bl	800f59c <SX1276WriteFifo>
 800eb68:	e004      	b.n	800eb74 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800eb6a:	78fb      	ldrb	r3, [r7, #3]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	2032      	movs	r0, #50	; 0x32
 800eb70:	f000 fc86 	bl	800f480 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 800eb74:	78fb      	ldrb	r3, [r7, #3]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d007      	beq.n	800eb8a <SX1276Send+0x6e>
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	2b40      	cmp	r3, #64	; 0x40
 800eb7e:	d804      	bhi.n	800eb8a <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800eb80:	78fa      	ldrb	r2, [r7, #3]
 800eb82:	4b3f      	ldr	r3, [pc, #252]	; (800ec80 <SX1276Send+0x164>)
 800eb84:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 800eb88:	e00a      	b.n	800eba0 <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800eb8a:	78fb      	ldrb	r3, [r7, #3]
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	461a      	mov	r2, r3
 800eb90:	6879      	ldr	r1, [r7, #4]
 800eb92:	483c      	ldr	r0, [pc, #240]	; (800ec84 <SX1276Send+0x168>)
 800eb94:	f001 fdd5 	bl	8010742 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800eb98:	4b39      	ldr	r3, [pc, #228]	; (800ec80 <SX1276Send+0x164>)
 800eb9a:	2220      	movs	r2, #32
 800eb9c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800eba0:	4b37      	ldr	r3, [pc, #220]	; (800ec80 <SX1276Send+0x164>)
 800eba2:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fcf7 	bl	800f59c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800ebae:	4b34      	ldr	r3, [pc, #208]	; (800ec80 <SX1276Send+0x164>)
 800ebb0:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800ebb4:	4b32      	ldr	r3, [pc, #200]	; (800ec80 <SX1276Send+0x164>)
 800ebb6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	4413      	add	r3, r2
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	4b2f      	ldr	r3, [pc, #188]	; (800ec80 <SX1276Send+0x164>)
 800ebc2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800ebc6:	4b2e      	ldr	r3, [pc, #184]	; (800ec80 <SX1276Send+0x164>)
 800ebc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ebcc:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ebce:	e050      	b.n	800ec72 <SX1276Send+0x156>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800ebd0:	4b2b      	ldr	r3, [pc, #172]	; (800ec80 <SX1276Send+0x164>)
 800ebd2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00f      	beq.n	800ebfa <SX1276Send+0xde>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800ebda:	2033      	movs	r0, #51	; 0x33
 800ebdc:	f000 fc62 	bl	800f4a4 <SX1276Read>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	4619      	mov	r1, r3
 800ebea:	2033      	movs	r0, #51	; 0x33
 800ebec:	f000 fc48 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800ebf0:	2119      	movs	r1, #25
 800ebf2:	203b      	movs	r0, #59	; 0x3b
 800ebf4:	f000 fc44 	bl	800f480 <SX1276Write>
 800ebf8:	e013      	b.n	800ec22 <SX1276Send+0x106>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800ebfa:	2033      	movs	r0, #51	; 0x33
 800ebfc:	f000 fc52 	bl	800f4a4 <SX1276Read>
 800ec00:	4603      	mov	r3, r0
 800ec02:	b25b      	sxtb	r3, r3
 800ec04:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800ec08:	b25b      	sxtb	r3, r3
 800ec0a:	f043 0301 	orr.w	r3, r3, #1
 800ec0e:	b25b      	sxtb	r3, r3
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	4619      	mov	r1, r3
 800ec14:	2033      	movs	r0, #51	; 0x33
 800ec16:	f000 fc33 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800ec1a:	211d      	movs	r1, #29
 800ec1c:	203b      	movs	r0, #59	; 0x3b
 800ec1e:	f000 fc2f 	bl	800f480 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800ec22:	78fa      	ldrb	r2, [r7, #3]
 800ec24:	4b16      	ldr	r3, [pc, #88]	; (800ec80 <SX1276Send+0x164>)
 800ec26:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800ec2a:	78fb      	ldrb	r3, [r7, #3]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	2022      	movs	r0, #34	; 0x22
 800ec30:	f000 fc26 	bl	800f480 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800ec34:	2100      	movs	r1, #0
 800ec36:	200e      	movs	r0, #14
 800ec38:	f000 fc22 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	200d      	movs	r0, #13
 800ec40:	f000 fc1e 	bl	800f480 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800ec44:	2001      	movs	r0, #1
 800ec46:	f000 fc2d 	bl	800f4a4 <SX1276Read>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d104      	bne.n	800ec5e <SX1276Send+0x142>
            {
                SX1276SetStby( );
 800ec54:	f000 f830 	bl	800ecb8 <SX1276SetStby>
                DelayMs( 1 );
 800ec58:	2001      	movs	r0, #1
 800ec5a:	f7fc ffba 	bl	800bbd2 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800ec5e:	78fb      	ldrb	r3, [r7, #3]
 800ec60:	4619      	mov	r1, r3
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fc9a 	bl	800f59c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800ec68:	4b05      	ldr	r3, [pc, #20]	; (800ec80 <SX1276Send+0x164>)
 800ec6a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800ec6e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800ec70:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 fa26 	bl	800f0c4 <SX1276SetTx>
}
 800ec78:	bf00      	nop
 800ec7a:	3710      	adds	r7, #16
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	20001240 	.word	0x20001240
 800ec84:	200007a8 	.word	0x200007a8

0800ec88 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800ec8c:	4807      	ldr	r0, [pc, #28]	; (800ecac <SX1276SetSleep+0x24>)
 800ec8e:	f001 fb6f 	bl	8010370 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800ec92:	4807      	ldr	r0, [pc, #28]	; (800ecb0 <SX1276SetSleep+0x28>)
 800ec94:	f001 fb6c 	bl	8010370 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800ec98:	2000      	movs	r0, #0
 800ec9a:	f000 fb73 	bl	800f384 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800ec9e:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <SX1276SetSleep+0x2c>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800eca6:	bf00      	nop
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	20001380 	.word	0x20001380
 800ecb0:	20001218 	.word	0x20001218
 800ecb4:	20001240 	.word	0x20001240

0800ecb8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800ecbc:	4807      	ldr	r0, [pc, #28]	; (800ecdc <SX1276SetStby+0x24>)
 800ecbe:	f001 fb57 	bl	8010370 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800ecc2:	4807      	ldr	r0, [pc, #28]	; (800ece0 <SX1276SetStby+0x28>)
 800ecc4:	f001 fb54 	bl	8010370 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800ecc8:	2001      	movs	r0, #1
 800ecca:	f000 fb5b 	bl	800f384 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 800ecce:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <SX1276SetStby+0x2c>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
}
 800ecd6:	bf00      	nop
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	20001380 	.word	0x20001380
 800ece0:	20001218 	.word	0x20001218
 800ece4:	20001240 	.word	0x20001240

0800ece8 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	73fb      	strb	r3, [r7, #15]

    switch( SX1276.Settings.Modem )
 800ecf4:	4bc4      	ldr	r3, [pc, #784]	; (800f008 <SX1276SetRx+0x320>)
 800ecf6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <SX1276SetRx+0x1c>
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d03e      	beq.n	800ed80 <SX1276SetRx+0x98>
 800ed02:	e19b      	b.n	800f03c <SX1276SetRx+0x354>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800ed04:	4bc0      	ldr	r3, [pc, #768]	; (800f008 <SX1276SetRx+0x320>)
 800ed06:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800ed0a:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800ed0c:	2040      	movs	r0, #64	; 0x40
 800ed0e:	f000 fbc9 	bl	800f4a4 <SX1276Read>
 800ed12:	4603      	mov	r3, r0
 800ed14:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800ed16:	f003 0303 	and.w	r3, r3, #3
 800ed1a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800ed1c:	f043 030c 	orr.w	r3, r3, #12
 800ed20:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	4619      	mov	r1, r3
 800ed26:	2040      	movs	r0, #64	; 0x40
 800ed28:	f000 fbaa 	bl	800f480 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800ed2c:	2041      	movs	r0, #65	; 0x41
 800ed2e:	f000 fbb9 	bl	800f4a4 <SX1276Read>
 800ed32:	4603      	mov	r3, r0
 800ed34:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	2041      	movs	r0, #65	; 0x41
 800ed3e:	f000 fb9f 	bl	800f480 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800ed42:	2035      	movs	r0, #53	; 0x35
 800ed44:	f000 fbae 	bl	800f4a4 <SX1276Read>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed4e:	b2da      	uxtb	r2, r3
 800ed50:	4bad      	ldr	r3, [pc, #692]	; (800f008 <SX1276SetRx+0x320>)
 800ed52:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800ed56:	211e      	movs	r1, #30
 800ed58:	200d      	movs	r0, #13
 800ed5a:	f000 fb91 	bl	800f480 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800ed5e:	4baa      	ldr	r3, [pc, #680]	; (800f008 <SX1276SetRx+0x320>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800ed66:	4ba8      	ldr	r3, [pc, #672]	; (800f008 <SX1276SetRx+0x320>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800ed6e:	4ba6      	ldr	r3, [pc, #664]	; (800f008 <SX1276SetRx+0x320>)
 800ed70:	2200      	movs	r2, #0
 800ed72:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800ed76:	4ba4      	ldr	r3, [pc, #656]	; (800f008 <SX1276SetRx+0x320>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
        }
        break;
 800ed7e:	e15d      	b.n	800f03c <SX1276SetRx+0x354>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800ed80:	4ba1      	ldr	r3, [pc, #644]	; (800f008 <SX1276SetRx+0x320>)
 800ed82:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00f      	beq.n	800edaa <SX1276SetRx+0xc2>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800ed8a:	2033      	movs	r0, #51	; 0x33
 800ed8c:	f000 fb8a 	bl	800f4a4 <SX1276Read>
 800ed90:	4603      	mov	r3, r0
 800ed92:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	4619      	mov	r1, r3
 800ed9a:	2033      	movs	r0, #51	; 0x33
 800ed9c:	f000 fb70 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800eda0:	2119      	movs	r1, #25
 800eda2:	203b      	movs	r0, #59	; 0x3b
 800eda4:	f000 fb6c 	bl	800f480 <SX1276Write>
 800eda8:	e013      	b.n	800edd2 <SX1276SetRx+0xea>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800edaa:	2033      	movs	r0, #51	; 0x33
 800edac:	f000 fb7a 	bl	800f4a4 <SX1276Read>
 800edb0:	4603      	mov	r3, r0
 800edb2:	b25b      	sxtb	r3, r3
 800edb4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800edb8:	b25b      	sxtb	r3, r3
 800edba:	f043 0301 	orr.w	r3, r3, #1
 800edbe:	b25b      	sxtb	r3, r3
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	4619      	mov	r1, r3
 800edc4:	2033      	movs	r0, #51	; 0x33
 800edc6:	f000 fb5b 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800edca:	211d      	movs	r1, #29
 800edcc:	203b      	movs	r0, #59	; 0x3b
 800edce:	f000 fb57 	bl	800f480 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800edd2:	4b8d      	ldr	r3, [pc, #564]	; (800f008 <SX1276SetRx+0x320>)
 800edd4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800edd8:	2b08      	cmp	r3, #8
 800edda:	f200 80d6 	bhi.w	800ef8a <SX1276SetRx+0x2a2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800edde:	2031      	movs	r0, #49	; 0x31
 800ede0:	f000 fb60 	bl	800f4a4 <SX1276Read>
 800ede4:	4603      	mov	r3, r0
 800ede6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edea:	b2db      	uxtb	r3, r3
 800edec:	4619      	mov	r1, r3
 800edee:	2031      	movs	r0, #49	; 0x31
 800edf0:	f000 fb46 	bl	800f480 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 800edf4:	2100      	movs	r1, #0
 800edf6:	2030      	movs	r0, #48	; 0x30
 800edf8:	f000 fb42 	bl	800f480 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800edfc:	4b82      	ldr	r3, [pc, #520]	; (800f008 <SX1276SetRx+0x320>)
 800edfe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ee02:	2b08      	cmp	r3, #8
 800ee04:	f200 80cc 	bhi.w	800efa0 <SX1276SetRx+0x2b8>
 800ee08:	a201      	add	r2, pc, #4	; (adr r2, 800ee10 <SX1276SetRx+0x128>)
 800ee0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0e:	bf00      	nop
 800ee10:	0800ee35 	.word	0x0800ee35
 800ee14:	0800ee69 	.word	0x0800ee69
 800ee18:	0800ee9d 	.word	0x0800ee9d
 800ee1c:	0800eed1 	.word	0x0800eed1
 800ee20:	0800ef05 	.word	0x0800ef05
 800ee24:	0800ef39 	.word	0x0800ef39
 800ee28:	0800ef6d 	.word	0x0800ef6d
 800ee2c:	0800ef77 	.word	0x0800ef77
 800ee30:	0800ef81 	.word	0x0800ef81
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 800ee34:	2148      	movs	r1, #72	; 0x48
 800ee36:	202f      	movs	r0, #47	; 0x2f
 800ee38:	f000 fb22 	bl	800f480 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7.81e3 );
 800ee3c:	4b72      	ldr	r3, [pc, #456]	; (800f008 <SX1276SetRx+0x320>)
 800ee3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7f1 fade 	bl	8000404 <__aeabi_ui2d>
 800ee48:	a363      	add	r3, pc, #396	; (adr r3, 800efd8 <SX1276SetRx+0x2f0>)
 800ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4e:	f7f1 f99d 	bl	800018c <__adddf3>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4610      	mov	r0, r2
 800ee58:	4619      	mov	r1, r3
 800ee5a:	f7f1 fe0f 	bl	8000a7c <__aeabi_d2uiz>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe ffb5 	bl	800ddd0 <SX1276SetChannel>
                    break;
 800ee66:	e09b      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ee68:	2144      	movs	r1, #68	; 0x44
 800ee6a:	202f      	movs	r0, #47	; 0x2f
 800ee6c:	f000 fb08 	bl	800f480 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10.42e3 );
 800ee70:	4b65      	ldr	r3, [pc, #404]	; (800f008 <SX1276SetRx+0x320>)
 800ee72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7f1 fac4 	bl	8000404 <__aeabi_ui2d>
 800ee7c:	a358      	add	r3, pc, #352	; (adr r3, 800efe0 <SX1276SetRx+0x2f8>)
 800ee7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee82:	f7f1 f983 	bl	800018c <__adddf3>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4610      	mov	r0, r2
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f7f1 fdf5 	bl	8000a7c <__aeabi_d2uiz>
 800ee92:	4603      	mov	r3, r0
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fe ff9b 	bl	800ddd0 <SX1276SetChannel>
                    break;
 800ee9a:	e081      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ee9c:	2144      	movs	r1, #68	; 0x44
 800ee9e:	202f      	movs	r0, #47	; 0x2f
 800eea0:	f000 faee 	bl	800f480 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15.62e3 );
 800eea4:	4b58      	ldr	r3, [pc, #352]	; (800f008 <SX1276SetRx+0x320>)
 800eea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7f1 faaa 	bl	8000404 <__aeabi_ui2d>
 800eeb0:	a34d      	add	r3, pc, #308	; (adr r3, 800efe8 <SX1276SetRx+0x300>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	f7f1 f969 	bl	800018c <__adddf3>
 800eeba:	4602      	mov	r2, r0
 800eebc:	460b      	mov	r3, r1
 800eebe:	4610      	mov	r0, r2
 800eec0:	4619      	mov	r1, r3
 800eec2:	f7f1 fddb 	bl	8000a7c <__aeabi_d2uiz>
 800eec6:	4603      	mov	r3, r0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7fe ff81 	bl	800ddd0 <SX1276SetChannel>
                    break;
 800eece:	e067      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800eed0:	2144      	movs	r1, #68	; 0x44
 800eed2:	202f      	movs	r0, #47	; 0x2f
 800eed4:	f000 fad4 	bl	800f480 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20.83e3 );
 800eed8:	4b4b      	ldr	r3, [pc, #300]	; (800f008 <SX1276SetRx+0x320>)
 800eeda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f1 fa90 	bl	8000404 <__aeabi_ui2d>
 800eee4:	a342      	add	r3, pc, #264	; (adr r3, 800eff0 <SX1276SetRx+0x308>)
 800eee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeea:	f7f1 f94f 	bl	800018c <__adddf3>
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	4610      	mov	r0, r2
 800eef4:	4619      	mov	r1, r3
 800eef6:	f7f1 fdc1 	bl	8000a7c <__aeabi_d2uiz>
 800eefa:	4603      	mov	r3, r0
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe ff67 	bl	800ddd0 <SX1276SetChannel>
                    break;
 800ef02:	e04d      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ef04:	2144      	movs	r1, #68	; 0x44
 800ef06:	202f      	movs	r0, #47	; 0x2f
 800ef08:	f000 faba 	bl	800f480 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31.25e3 );
 800ef0c:	4b3e      	ldr	r3, [pc, #248]	; (800f008 <SX1276SetRx+0x320>)
 800ef0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7f1 fa76 	bl	8000404 <__aeabi_ui2d>
 800ef18:	a337      	add	r3, pc, #220	; (adr r3, 800eff8 <SX1276SetRx+0x310>)
 800ef1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1e:	f7f1 f935 	bl	800018c <__adddf3>
 800ef22:	4602      	mov	r2, r0
 800ef24:	460b      	mov	r3, r1
 800ef26:	4610      	mov	r0, r2
 800ef28:	4619      	mov	r1, r3
 800ef2a:	f7f1 fda7 	bl	8000a7c <__aeabi_d2uiz>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fe ff4d 	bl	800ddd0 <SX1276SetChannel>
                    break;
 800ef36:	e033      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 800ef38:	2144      	movs	r1, #68	; 0x44
 800ef3a:	202f      	movs	r0, #47	; 0x2f
 800ef3c:	f000 faa0 	bl	800f480 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41.67e3 );
 800ef40:	4b31      	ldr	r3, [pc, #196]	; (800f008 <SX1276SetRx+0x320>)
 800ef42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7f1 fa5c 	bl	8000404 <__aeabi_ui2d>
 800ef4c:	a32c      	add	r3, pc, #176	; (adr r3, 800f000 <SX1276SetRx+0x318>)
 800ef4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef52:	f7f1 f91b 	bl	800018c <__adddf3>
 800ef56:	4602      	mov	r2, r0
 800ef58:	460b      	mov	r3, r1
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	f7f1 fd8d 	bl	8000a7c <__aeabi_d2uiz>
 800ef62:	4603      	mov	r3, r0
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fe ff33 	bl	800ddd0 <SX1276SetChannel>
                    break;
 800ef6a:	e019      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800ef6c:	2140      	movs	r1, #64	; 0x40
 800ef6e:	202f      	movs	r0, #47	; 0x2f
 800ef70:	f000 fa86 	bl	800f480 <SX1276Write>
                    break;
 800ef74:	e014      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800ef76:	2140      	movs	r1, #64	; 0x40
 800ef78:	202f      	movs	r0, #47	; 0x2f
 800ef7a:	f000 fa81 	bl	800f480 <SX1276Write>
                    break;
 800ef7e:	e00f      	b.n	800efa0 <SX1276SetRx+0x2b8>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 800ef80:	2140      	movs	r1, #64	; 0x40
 800ef82:	202f      	movs	r0, #47	; 0x2f
 800ef84:	f000 fa7c 	bl	800f480 <SX1276Write>
                    break;
 800ef88:	e00a      	b.n	800efa0 <SX1276SetRx+0x2b8>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800ef8a:	2031      	movs	r0, #49	; 0x31
 800ef8c:	f000 fa8a 	bl	800f4a4 <SX1276Read>
 800ef90:	4603      	mov	r3, r0
 800ef92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	4619      	mov	r1, r3
 800ef9a:	2031      	movs	r0, #49	; 0x31
 800ef9c:	f000 fa70 	bl	800f480 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800efa0:	4b19      	ldr	r3, [pc, #100]	; (800f008 <SX1276SetRx+0x320>)
 800efa2:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800efa6:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800efa8:	4b17      	ldr	r3, [pc, #92]	; (800f008 <SX1276SetRx+0x320>)
 800efaa:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d02c      	beq.n	800f00c <SX1276SetRx+0x324>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800efb2:	211d      	movs	r1, #29
 800efb4:	2011      	movs	r0, #17
 800efb6:	f000 fa63 	bl	800f480 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800efba:	2040      	movs	r0, #64	; 0x40
 800efbc:	f000 fa72 	bl	800f4a4 <SX1276Read>
 800efc0:	4603      	mov	r3, r0
 800efc2:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	4619      	mov	r1, r3
 800efca:	2040      	movs	r0, #64	; 0x40
 800efcc:	f000 fa58 	bl	800f480 <SX1276Write>
 800efd0:	e02b      	b.n	800f02a <SX1276SetRx+0x342>
 800efd2:	bf00      	nop
 800efd4:	f3af 8000 	nop.w
 800efd8:	00000000 	.word	0x00000000
 800efdc:	40be8200 	.word	0x40be8200
 800efe0:	00000000 	.word	0x00000000
 800efe4:	40c45a00 	.word	0x40c45a00
 800efe8:	00000000 	.word	0x00000000
 800efec:	40ce8200 	.word	0x40ce8200
 800eff0:	00000000 	.word	0x00000000
 800eff4:	40d45780 	.word	0x40d45780
 800eff8:	00000000 	.word	0x00000000
 800effc:	40de8480 	.word	0x40de8480
 800f000:	00000000 	.word	0x00000000
 800f004:	40e458c0 	.word	0x40e458c0
 800f008:	20001240 	.word	0x20001240
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800f00c:	211f      	movs	r1, #31
 800f00e:	2011      	movs	r0, #17
 800f010:	f000 fa36 	bl	800f480 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800f014:	2040      	movs	r0, #64	; 0x40
 800f016:	f000 fa45 	bl	800f4a4 <SX1276Read>
 800f01a:	4603      	mov	r3, r0
 800f01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f020:	b2db      	uxtb	r3, r3
 800f022:	4619      	mov	r1, r3
 800f024:	2040      	movs	r0, #64	; 0x40
 800f026:	f000 fa2b 	bl	800f480 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800f02a:	2100      	movs	r1, #0
 800f02c:	200f      	movs	r0, #15
 800f02e:	f000 fa27 	bl	800f480 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800f032:	2100      	movs	r1, #0
 800f034:	200d      	movs	r0, #13
 800f036:	f000 fa23 	bl	800f480 <SX1276Write>
        }
        break;
 800f03a:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 800f03c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f040:	2100      	movs	r1, #0
 800f042:	481c      	ldr	r0, [pc, #112]	; (800f0b4 <SX1276SetRx+0x3cc>)
 800f044:	f002 ffaa 	bl	8011f9c <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800f048:	4b1b      	ldr	r3, [pc, #108]	; (800f0b8 <SX1276SetRx+0x3d0>)
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    if( timeout != 0 )
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d006      	beq.n	800f064 <SX1276SetRx+0x37c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	4818      	ldr	r0, [pc, #96]	; (800f0bc <SX1276SetRx+0x3d4>)
 800f05a:	f001 fa45 	bl	80104e8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 800f05e:	4817      	ldr	r0, [pc, #92]	; (800f0bc <SX1276SetRx+0x3d4>)
 800f060:	f001 f83e 	bl	80100e0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800f064:	4b14      	ldr	r3, [pc, #80]	; (800f0b8 <SX1276SetRx+0x3d0>)
 800f066:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d113      	bne.n	800f096 <SX1276SetRx+0x3ae>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800f06e:	2005      	movs	r0, #5
 800f070:	f000 f988 	bl	800f384 <SX1276SetOpMode>

        if( rxContinuous == false )
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	f083 0301 	eor.w	r3, r3, #1
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d014      	beq.n	800f0aa <SX1276SetRx+0x3c2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800f080:	4b0d      	ldr	r3, [pc, #52]	; (800f0b8 <SX1276SetRx+0x3d0>)
 800f082:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800f086:	4619      	mov	r1, r3
 800f088:	480d      	ldr	r0, [pc, #52]	; (800f0c0 <SX1276SetRx+0x3d8>)
 800f08a:	f001 fa2d 	bl	80104e8 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800f08e:	480c      	ldr	r0, [pc, #48]	; (800f0c0 <SX1276SetRx+0x3d8>)
 800f090:	f001 f826 	bl	80100e0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 800f094:	e009      	b.n	800f0aa <SX1276SetRx+0x3c2>
        if( rxContinuous == true )
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d003      	beq.n	800f0a4 <SX1276SetRx+0x3bc>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 800f09c:	2005      	movs	r0, #5
 800f09e:	f000 f971 	bl	800f384 <SX1276SetOpMode>
}
 800f0a2:	e002      	b.n	800f0aa <SX1276SetRx+0x3c2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 800f0a4:	2006      	movs	r0, #6
 800f0a6:	f000 f96d 	bl	800f384 <SX1276SetOpMode>
}
 800f0aa:	bf00      	nop
 800f0ac:	3710      	adds	r7, #16
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	200007a8 	.word	0x200007a8
 800f0b8:	20001240 	.word	0x20001240
 800f0bc:	20001380 	.word	0x20001380
 800f0c0:	2000122c 	.word	0x2000122c

0800f0c4 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	4837      	ldr	r0, [pc, #220]	; (800f1ac <SX1276SetTx+0xe8>)
 800f0d0:	f001 fa0a 	bl	80104e8 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800f0d4:	4b36      	ldr	r3, [pc, #216]	; (800f1b0 <SX1276SetTx+0xec>)
 800f0d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <SX1276SetTx+0x20>
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d026      	beq.n	800f130 <SX1276SetTx+0x6c>
 800f0e2:	e054      	b.n	800f18e <SX1276SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f0e4:	2040      	movs	r0, #64	; 0x40
 800f0e6:	f000 f9dd 	bl	800f4a4 <SX1276Read>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800f0ee:	f003 0303 	and.w	r3, r3, #3
 800f0f2:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 800f0f4:	f043 0310 	orr.w	r3, r3, #16
 800f0f8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	4619      	mov	r1, r3
 800f0fe:	2040      	movs	r0, #64	; 0x40
 800f100:	f000 f9be 	bl	800f480 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800f104:	2041      	movs	r0, #65	; 0x41
 800f106:	f000 f9cd 	bl	800f4a4 <SX1276Read>
 800f10a:	4603      	mov	r3, r0
 800f10c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f110:	b2db      	uxtb	r3, r3
 800f112:	4619      	mov	r1, r3
 800f114:	2041      	movs	r0, #65	; 0x41
 800f116:	f000 f9b3 	bl	800f480 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800f11a:	2035      	movs	r0, #53	; 0x35
 800f11c:	f000 f9c2 	bl	800f4a4 <SX1276Read>
 800f120:	4603      	mov	r3, r0
 800f122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f126:	b2da      	uxtb	r2, r3
 800f128:	4b21      	ldr	r3, [pc, #132]	; (800f1b0 <SX1276SetTx+0xec>)
 800f12a:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
        }
        break;
 800f12e:	e02e      	b.n	800f18e <SX1276SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800f130:	4b1f      	ldr	r3, [pc, #124]	; (800f1b0 <SX1276SetTx+0xec>)
 800f132:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800f136:	2b00      	cmp	r3, #0
 800f138:	d014      	beq.n	800f164 <SX1276SetTx+0xa0>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f13a:	21f5      	movs	r1, #245	; 0xf5
 800f13c:	2011      	movs	r0, #17
 800f13e:	f000 f99f 	bl	800f480 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800f142:	2040      	movs	r0, #64	; 0x40
 800f144:	f000 f9ae 	bl	800f4a4 <SX1276Read>
 800f148:	4603      	mov	r3, r0
 800f14a:	b25b      	sxtb	r3, r3
 800f14c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800f150:	b25b      	sxtb	r3, r3
 800f152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f156:	b25b      	sxtb	r3, r3
 800f158:	b2db      	uxtb	r3, r3
 800f15a:	4619      	mov	r1, r3
 800f15c:	2040      	movs	r0, #64	; 0x40
 800f15e:	f000 f98f 	bl	800f480 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800f162:	e013      	b.n	800f18c <SX1276SetTx+0xc8>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f164:	21f7      	movs	r1, #247	; 0xf7
 800f166:	2011      	movs	r0, #17
 800f168:	f000 f98a 	bl	800f480 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800f16c:	2040      	movs	r0, #64	; 0x40
 800f16e:	f000 f999 	bl	800f4a4 <SX1276Read>
 800f172:	4603      	mov	r3, r0
 800f174:	b25b      	sxtb	r3, r3
 800f176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f17a:	b25b      	sxtb	r3, r3
 800f17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f180:	b25b      	sxtb	r3, r3
 800f182:	b2db      	uxtb	r3, r3
 800f184:	4619      	mov	r1, r3
 800f186:	2040      	movs	r0, #64	; 0x40
 800f188:	f000 f97a 	bl	800f480 <SX1276Write>
        break;
 800f18c:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800f18e:	4b08      	ldr	r3, [pc, #32]	; (800f1b0 <SX1276SetTx+0xec>)
 800f190:	2202      	movs	r2, #2
 800f192:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800f196:	4805      	ldr	r0, [pc, #20]	; (800f1ac <SX1276SetTx+0xe8>)
 800f198:	f000 ffa2 	bl	80100e0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800f19c:	2003      	movs	r0, #3
 800f19e:	f000 f8f1 	bl	800f384 <SX1276SetOpMode>
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20001218 	.word	0x20001218
 800f1b0:	20001240 	.word	0x20001240

0800f1b4 <SX1276StartCad>:

void SX1276StartCad( void )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800f1b8:	4b10      	ldr	r3, [pc, #64]	; (800f1fc <SX1276StartCad+0x48>)
 800f1ba:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d019      	beq.n	800f1f6 <SX1276StartCad+0x42>
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d000      	beq.n	800f1c8 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 800f1c6:	e017      	b.n	800f1f8 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800f1c8:	21fa      	movs	r1, #250	; 0xfa
 800f1ca:	2011      	movs	r0, #17
 800f1cc:	f000 f958 	bl	800f480 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800f1d0:	2040      	movs	r0, #64	; 0x40
 800f1d2:	f000 f967 	bl	800f4a4 <SX1276Read>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	f023 0303 	bic.w	r3, r3, #3
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	4619      	mov	r1, r3
 800f1e0:	2040      	movs	r0, #64	; 0x40
 800f1e2:	f000 f94d 	bl	800f480 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800f1e6:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <SX1276StartCad+0x48>)
 800f1e8:	2203      	movs	r2, #3
 800f1ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800f1ee:	2007      	movs	r0, #7
 800f1f0:	f000 f8c8 	bl	800f384 <SX1276SetOpMode>
        break;
 800f1f4:	e000      	b.n	800f1f8 <SX1276StartCad+0x44>
        break;
 800f1f6:	bf00      	nop
    }
}
 800f1f8:	bf00      	nop
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20001240 	.word	0x20001240

0800f200 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b08e      	sub	sp, #56	; 0x38
 800f204:	af0a      	add	r7, sp, #40	; 0x28
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	460b      	mov	r3, r1
 800f20a:	70fb      	strb	r3, [r7, #3]
 800f20c:	4613      	mov	r3, r2
 800f20e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1e3 );
 800f210:	883b      	ldrh	r3, [r7, #0]
 800f212:	4618      	mov	r0, r3
 800f214:	f7f1 f906 	bl	8000424 <__aeabi_i2d>
 800f218:	f04f 0200 	mov.w	r2, #0
 800f21c:	4b26      	ldr	r3, [pc, #152]	; (800f2b8 <SX1276SetTxContinuousWave+0xb8>)
 800f21e:	f7f1 f96b 	bl	80004f8 <__aeabi_dmul>
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	4610      	mov	r0, r2
 800f228:	4619      	mov	r1, r3
 800f22a:	f7f1 fc27 	bl	8000a7c <__aeabi_d2uiz>
 800f22e:	4603      	mov	r3, r0
 800f230:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7fe fdcc 	bl	800ddd0 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800f238:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	9308      	str	r3, [sp, #32]
 800f240:	2300      	movs	r3, #0
 800f242:	9307      	str	r3, [sp, #28]
 800f244:	2300      	movs	r3, #0
 800f246:	9306      	str	r3, [sp, #24]
 800f248:	2300      	movs	r3, #0
 800f24a:	9305      	str	r3, [sp, #20]
 800f24c:	2300      	movs	r3, #0
 800f24e:	9304      	str	r3, [sp, #16]
 800f250:	2300      	movs	r3, #0
 800f252:	9303      	str	r3, [sp, #12]
 800f254:	2305      	movs	r3, #5
 800f256:	9302      	str	r3, [sp, #8]
 800f258:	2300      	movs	r3, #0
 800f25a:	9301      	str	r3, [sp, #4]
 800f25c:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	2300      	movs	r3, #0
 800f264:	2200      	movs	r2, #0
 800f266:	2000      	movs	r0, #0
 800f268:	f7ff f8fa 	bl	800e460 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800f26c:	2031      	movs	r0, #49	; 0x31
 800f26e:	f000 f919 	bl	800f4a4 <SX1276Read>
 800f272:	4603      	mov	r3, r0
 800f274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	4619      	mov	r1, r3
 800f27c:	2031      	movs	r0, #49	; 0x31
 800f27e:	f000 f8ff 	bl	800f480 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800f282:	21f0      	movs	r1, #240	; 0xf0
 800f284:	2040      	movs	r0, #64	; 0x40
 800f286:	f000 f8fb 	bl	800f480 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800f28a:	21a0      	movs	r1, #160	; 0xa0
 800f28c:	2041      	movs	r0, #65	; 0x41
 800f28e:	f000 f8f7 	bl	800f480 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800f292:	68f9      	ldr	r1, [r7, #12]
 800f294:	4809      	ldr	r0, [pc, #36]	; (800f2bc <SX1276SetTxContinuousWave+0xbc>)
 800f296:	f001 f927 	bl	80104e8 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 800f29a:	4b09      	ldr	r3, [pc, #36]	; (800f2c0 <SX1276SetTxContinuousWave+0xc0>)
 800f29c:	2202      	movs	r2, #2
 800f29e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    TimerStart( &TxTimeoutTimer );
 800f2a2:	4806      	ldr	r0, [pc, #24]	; (800f2bc <SX1276SetTxContinuousWave+0xbc>)
 800f2a4:	f000 ff1c 	bl	80100e0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800f2a8:	2003      	movs	r0, #3
 800f2aa:	f000 f86b 	bl	800f384 <SX1276SetOpMode>
}
 800f2ae:	bf00      	nop
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	408f4000 	.word	0x408f4000
 800f2bc:	20001218 	.word	0x20001218
 800f2c0:	20001240 	.word	0x20001240

0800f2c4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <SX1276ReadRssi+0x1a>
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d00b      	beq.n	800f2f4 <SX1276ReadRssi+0x30>
 800f2dc:	e022      	b.n	800f324 <SX1276ReadRssi+0x60>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800f2de:	2011      	movs	r0, #17
 800f2e0:	f000 f8e0 	bl	800f4a4 <SX1276Read>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	085b      	lsrs	r3, r3, #1
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	425b      	negs	r3, r3
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	81fb      	strh	r3, [r7, #14]
        break;
 800f2f2:	e01b      	b.n	800f32c <SX1276ReadRssi+0x68>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800f2f4:	4b10      	ldr	r3, [pc, #64]	; (800f338 <SX1276ReadRssi+0x74>)
 800f2f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2fa:	4a10      	ldr	r2, [pc, #64]	; (800f33c <SX1276ReadRssi+0x78>)
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d908      	bls.n	800f312 <SX1276ReadRssi+0x4e>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800f300:	201b      	movs	r0, #27
 800f302:	f000 f8cf 	bl	800f4a4 <SX1276Read>
 800f306:	4603      	mov	r3, r0
 800f308:	b29b      	uxth	r3, r3
 800f30a:	3b9d      	subs	r3, #157	; 0x9d
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 800f310:	e00c      	b.n	800f32c <SX1276ReadRssi+0x68>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800f312:	201b      	movs	r0, #27
 800f314:	f000 f8c6 	bl	800f4a4 <SX1276Read>
 800f318:	4603      	mov	r3, r0
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	3ba4      	subs	r3, #164	; 0xa4
 800f31e:	b29b      	uxth	r3, r3
 800f320:	81fb      	strh	r3, [r7, #14]
        break;
 800f322:	e003      	b.n	800f32c <SX1276ReadRssi+0x68>
    default:
        rssi = -1;
 800f324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f328:	81fb      	strh	r3, [r7, #14]
        break;
 800f32a:	bf00      	nop
    }
    return rssi;
 800f32c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	20001240 	.word	0x20001240
 800f33c:	1f4add40 	.word	0x1f4add40

0800f340 <SX1276Reset>:

void SX1276Reset( void )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af02      	add	r7, sp, #8
    // Set RESET pin to 0
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 800f346:	2300      	movs	r3, #0
 800f348:	9301      	str	r3, [sp, #4]
 800f34a:	2300      	movs	r3, #0
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	2300      	movs	r3, #0
 800f350:	2201      	movs	r2, #1
 800f352:	2103      	movs	r1, #3
 800f354:	480a      	ldr	r0, [pc, #40]	; (800f380 <SX1276Reset+0x40>)
 800f356:	f7fc ff67 	bl	800c228 <GpioInit>

    // Wait 1 ms
    DelayMs( 1 );
 800f35a:	2001      	movs	r0, #1
 800f35c:	f7fc fc39 	bl	800bbd2 <DelayMs>

    // Configure RESET as input
    GpioInit( &SX1276.Reset, RADIO_RESET, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 800f360:	2301      	movs	r3, #1
 800f362:	9301      	str	r3, [sp, #4]
 800f364:	2300      	movs	r3, #0
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	2300      	movs	r3, #0
 800f36a:	2200      	movs	r2, #0
 800f36c:	2103      	movs	r1, #3
 800f36e:	4804      	ldr	r0, [pc, #16]	; (800f380 <SX1276Reset+0x40>)
 800f370:	f7fc ff5a 	bl	800c228 <GpioInit>

    // Wait 6 ms
    DelayMs( 6 );
 800f374:	2006      	movs	r0, #6
 800f376:	f7fc fc2c 	bl	800bbd2 <DelayMs>
}
 800f37a:	bf00      	nop
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	20001240 	.word	0x20001240

0800f384 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	4603      	mov	r3, r0
 800f38c:	71fb      	strb	r3, [r7, #7]
    if( opMode == RF_OPMODE_SLEEP )
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d103      	bne.n	800f39c <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 800f394:	2001      	movs	r0, #1
 800f396:	f7fe fc6d 	bl	800dc74 <SX1276SetAntSwLowPower>
 800f39a:	e006      	b.n	800f3aa <SX1276SetOpMode+0x26>
    }
    else
    {
        SX1276SetAntSwLowPower( false );
 800f39c:	2000      	movs	r0, #0
 800f39e:	f7fe fc69 	bl	800dc74 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 800f3a2:	79fb      	ldrb	r3, [r7, #7]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe fc8f 	bl	800dcc8 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800f3aa:	2001      	movs	r0, #1
 800f3ac:	f000 f87a 	bl	800f4a4 <SX1276Read>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	b25b      	sxtb	r3, r3
 800f3b4:	f023 0307 	bic.w	r3, r3, #7
 800f3b8:	b25a      	sxtb	r2, r3
 800f3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	b25b      	sxtb	r3, r3
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	2001      	movs	r0, #1
 800f3c8:	f000 f85a 	bl	800f480 <SX1276Write>
}
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	71fb      	strb	r3, [r7, #7]
    assert_param( ( SX1276.Spi.Spi.Instance != NULL ) );

    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800f3de:	2001      	movs	r0, #1
 800f3e0:	f000 f860 	bl	800f4a4 <SX1276Read>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	b25b      	sxtb	r3, r3
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	da04      	bge.n	800f3f6 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 800f3ec:	4b23      	ldr	r3, [pc, #140]	; (800f47c <SX1276SetModem+0xa8>)
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800f3f4:	e003      	b.n	800f3fe <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 800f3f6:	4b21      	ldr	r3, [pc, #132]	; (800f47c <SX1276SetModem+0xa8>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    }

    if( SX1276.Settings.Modem == modem )
 800f3fe:	4b1f      	ldr	r3, [pc, #124]	; (800f47c <SX1276SetModem+0xa8>)
 800f400:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f404:	79fa      	ldrb	r2, [r7, #7]
 800f406:	429a      	cmp	r2, r3
 800f408:	d034      	beq.n	800f474 <SX1276SetModem+0xa0>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 800f40a:	4a1c      	ldr	r2, [pc, #112]	; (800f47c <SX1276SetModem+0xa8>)
 800f40c:	79fb      	ldrb	r3, [r7, #7]
 800f40e:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
    switch( SX1276.Settings.Modem )
 800f412:	4b1a      	ldr	r3, [pc, #104]	; (800f47c <SX1276SetModem+0xa8>)
 800f414:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d015      	beq.n	800f448 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetSleep( );
 800f41c:	f7ff fc34 	bl	800ec88 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800f420:	2001      	movs	r0, #1
 800f422:	f000 f83f 	bl	800f4a4 <SX1276Read>
 800f426:	4603      	mov	r3, r0
 800f428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	4619      	mov	r1, r3
 800f430:	2001      	movs	r0, #1
 800f432:	f000 f825 	bl	800f480 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f436:	2100      	movs	r1, #0
 800f438:	2040      	movs	r0, #64	; 0x40
 800f43a:	f000 f821 	bl	800f480 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800f43e:	2130      	movs	r1, #48	; 0x30
 800f440:	2041      	movs	r0, #65	; 0x41
 800f442:	f000 f81d 	bl	800f480 <SX1276Write>
        break;
 800f446:	e016      	b.n	800f476 <SX1276SetModem+0xa2>
    case MODEM_LORA:
        SX1276SetSleep( );
 800f448:	f7ff fc1e 	bl	800ec88 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800f44c:	2001      	movs	r0, #1
 800f44e:	f000 f829 	bl	800f4a4 <SX1276Read>
 800f452:	4603      	mov	r3, r0
 800f454:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	4619      	mov	r1, r3
 800f45c:	2001      	movs	r0, #1
 800f45e:	f000 f80f 	bl	800f480 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800f462:	2100      	movs	r1, #0
 800f464:	2040      	movs	r0, #64	; 0x40
 800f466:	f000 f80b 	bl	800f480 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800f46a:	2100      	movs	r1, #0
 800f46c:	2041      	movs	r0, #65	; 0x41
 800f46e:	f000 f807 	bl	800f480 <SX1276Write>
        break;
 800f472:	e000      	b.n	800f476 <SX1276SetModem+0xa2>
        return;
 800f474:	bf00      	nop
    }
}
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	20001240 	.word	0x20001240

0800f480 <SX1276Write>:

void SX1276Write( uint8_t addr, uint8_t data )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	460a      	mov	r2, r1
 800f48a:	71fb      	strb	r3, [r7, #7]
 800f48c:	4613      	mov	r3, r2
 800f48e:	71bb      	strb	r3, [r7, #6]
    SX1276WriteBuffer( addr, &data, 1 );
 800f490:	1db9      	adds	r1, r7, #6
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	2201      	movs	r2, #1
 800f496:	4618      	mov	r0, r3
 800f498:	f000 f816 	bl	800f4c8 <SX1276WriteBuffer>
}
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <SX1276Read>:

uint8_t SX1276Read( uint8_t addr )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 800f4ae:	f107 010f 	add.w	r1, r7, #15
 800f4b2:	79fb      	ldrb	r3, [r7, #7]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 f83a 	bl	800f530 <SX1276ReadBuffer>
    return data;
 800f4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
	...

0800f4c8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	6039      	str	r1, [r7, #0]
 800f4d2:	71fb      	strb	r3, [r7, #7]
 800f4d4:	4613      	mov	r3, r2
 800f4d6:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f4d8:	2100      	movs	r1, #0
 800f4da:	4813      	ldr	r0, [pc, #76]	; (800f528 <SX1276WriteBuffer+0x60>)
 800f4dc:	f7fc fee3 	bl	800c2a6 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 800f4e0:	79fb      	ldrb	r3, [r7, #7]
 800f4e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	480f      	ldr	r0, [pc, #60]	; (800f52c <SX1276WriteBuffer+0x64>)
 800f4ee:	f7fe f8cf 	bl	800d690 <SpiInOut>
    for( i = 0; i < size; i++ )
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	73fb      	strb	r3, [r7, #15]
 800f4f6:	e00b      	b.n	800f510 <SX1276WriteBuffer+0x48>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	b29b      	uxth	r3, r3
 800f502:	4619      	mov	r1, r3
 800f504:	4809      	ldr	r0, [pc, #36]	; (800f52c <SX1276WriteBuffer+0x64>)
 800f506:	f7fe f8c3 	bl	800d690 <SpiInOut>
    for( i = 0; i < size; i++ )
 800f50a:	7bfb      	ldrb	r3, [r7, #15]
 800f50c:	3301      	adds	r3, #1
 800f50e:	73fb      	strb	r3, [r7, #15]
 800f510:	7bfa      	ldrb	r2, [r7, #15]
 800f512:	79bb      	ldrb	r3, [r7, #6]
 800f514:	429a      	cmp	r2, r3
 800f516:	d3ef      	bcc.n	800f4f8 <SX1276WriteBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f518:	2101      	movs	r1, #1
 800f51a:	4803      	ldr	r0, [pc, #12]	; (800f528 <SX1276WriteBuffer+0x60>)
 800f51c:	f7fc fec3 	bl	800c2a6 <GpioWrite>
}
 800f520:	bf00      	nop
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20001310 	.word	0x20001310
 800f52c:	20001294 	.word	0x20001294

0800f530 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	4603      	mov	r3, r0
 800f538:	6039      	str	r1, [r7, #0]
 800f53a:	71fb      	strb	r3, [r7, #7]
 800f53c:	4613      	mov	r3, r2
 800f53e:	71bb      	strb	r3, [r7, #6]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 800f540:	2100      	movs	r1, #0
 800f542:	4814      	ldr	r0, [pc, #80]	; (800f594 <SX1276ReadBuffer+0x64>)
 800f544:	f7fc feaf 	bl	800c2a6 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 800f548:	79fb      	ldrb	r3, [r7, #7]
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f550:	b29b      	uxth	r3, r3
 800f552:	4619      	mov	r1, r3
 800f554:	4810      	ldr	r0, [pc, #64]	; (800f598 <SX1276ReadBuffer+0x68>)
 800f556:	f7fe f89b 	bl	800d690 <SpiInOut>

    for( i = 0; i < size; i++ )
 800f55a:	2300      	movs	r3, #0
 800f55c:	73fb      	strb	r3, [r7, #15]
 800f55e:	e00d      	b.n	800f57c <SX1276ReadBuffer+0x4c>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 800f560:	2100      	movs	r1, #0
 800f562:	480d      	ldr	r0, [pc, #52]	; (800f598 <SX1276ReadBuffer+0x68>)
 800f564:	f7fe f894 	bl	800d690 <SpiInOut>
 800f568:	4603      	mov	r3, r0
 800f56a:	4619      	mov	r1, r3
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
 800f56e:	683a      	ldr	r2, [r7, #0]
 800f570:	4413      	add	r3, r2
 800f572:	b2ca      	uxtb	r2, r1
 800f574:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	3301      	adds	r3, #1
 800f57a:	73fb      	strb	r3, [r7, #15]
 800f57c:	7bfa      	ldrb	r2, [r7, #15]
 800f57e:	79bb      	ldrb	r3, [r7, #6]
 800f580:	429a      	cmp	r2, r3
 800f582:	d3ed      	bcc.n	800f560 <SX1276ReadBuffer+0x30>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 800f584:	2101      	movs	r1, #1
 800f586:	4803      	ldr	r0, [pc, #12]	; (800f594 <SX1276ReadBuffer+0x64>)
 800f588:	f7fc fe8d 	bl	800c2a6 <GpioWrite>
}
 800f58c:	bf00      	nop
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	20001310 	.word	0x20001310
 800f598:	20001294 	.word	0x20001294

0800f59c <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 800f5a8:	78fb      	ldrb	r3, [r7, #3]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	6879      	ldr	r1, [r7, #4]
 800f5ae:	2000      	movs	r0, #0
 800f5b0:	f7ff ff8a 	bl	800f4c8 <SX1276WriteBuffer>
}
 800f5b4:	bf00      	nop
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 800f5c8:	78fb      	ldrb	r3, [r7, #3]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6879      	ldr	r1, [r7, #4]
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	f7ff ffae 	bl	800f530 <SX1276ReadBuffer>
}
 800f5d4:	bf00      	nop
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b082      	sub	sp, #8
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	460a      	mov	r2, r1
 800f5e6:	71fb      	strb	r3, [r7, #7]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 800f5ec:	79fb      	ldrb	r3, [r7, #7]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff fef0 	bl	800f3d4 <SX1276SetModem>

    switch( modem )
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d002      	beq.n	800f600 <SX1276SetMaxPayloadLength+0x24>
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d00e      	beq.n	800f61c <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800f5fe:	e014      	b.n	800f62a <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 800f600:	4b0c      	ldr	r3, [pc, #48]	; (800f634 <SX1276SetMaxPayloadLength+0x58>)
 800f602:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f606:	f083 0301 	eor.w	r3, r3, #1
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00b      	beq.n	800f628 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800f610:	79bb      	ldrb	r3, [r7, #6]
 800f612:	4619      	mov	r1, r3
 800f614:	2032      	movs	r0, #50	; 0x32
 800f616:	f7ff ff33 	bl	800f480 <SX1276Write>
        break;
 800f61a:	e005      	b.n	800f628 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800f61c:	79bb      	ldrb	r3, [r7, #6]
 800f61e:	4619      	mov	r1, r3
 800f620:	2023      	movs	r0, #35	; 0x23
 800f622:	f7ff ff2d 	bl	800f480 <SX1276Write>
        break;
 800f626:	e000      	b.n	800f62a <SX1276SetMaxPayloadLength+0x4e>
        break;
 800f628:	bf00      	nop
}
 800f62a:	bf00      	nop
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	20001240 	.word	0x20001240

0800f638 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	4603      	mov	r3, r0
 800f640:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 800f642:	2001      	movs	r0, #1
 800f644:	f7ff fec6 	bl	800f3d4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800f648:	4a09      	ldr	r2, [pc, #36]	; (800f670 <SX1276SetPublicNetwork+0x38>)
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	f882 3134 	strb.w	r3, [r2, #308]	; 0x134
    if( enable == true )
 800f650:	79fb      	ldrb	r3, [r7, #7]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d004      	beq.n	800f660 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800f656:	2134      	movs	r1, #52	; 0x34
 800f658:	2039      	movs	r0, #57	; 0x39
 800f65a:	f7ff ff11 	bl	800f480 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 800f65e:	e003      	b.n	800f668 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800f660:	2112      	movs	r1, #18
 800f662:	2039      	movs	r0, #57	; 0x39
 800f664:	f7ff ff0c 	bl	800f480 <SX1276Write>
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	20001240 	.word	0x20001240

0800f674 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0
    return  RADIO_WAKEUP_TIME;
 800f678:	2301      	movs	r3, #1
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bc80      	pop	{r7}
 800f680:	4770      	bx	lr
	...

0800f684 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void )
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800f68a:	4b4e      	ldr	r3, [pc, #312]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f68c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f690:	2b01      	cmp	r3, #1
 800f692:	d002      	beq.n	800f69a <SX1276OnTimeoutIrq+0x16>
 800f694:	2b02      	cmp	r3, #2
 800f696:	d046      	beq.n	800f726 <SX1276OnTimeoutIrq+0xa2>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800f698:	e090      	b.n	800f7bc <SX1276OnTimeoutIrq+0x138>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800f69a:	4b4a      	ldr	r3, [pc, #296]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f69c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d132      	bne.n	800f70a <SX1276OnTimeoutIrq+0x86>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f6a4:	4b47      	ldr	r3, [pc, #284]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f6ac:	4b45      	ldr	r3, [pc, #276]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f6b4:	4b43      	ldr	r3, [pc, #268]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
            SX1276.Settings.FskPacketHandler.Size = 0;
 800f6bc:	4b41      	ldr	r3, [pc, #260]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f6be:	2200      	movs	r2, #0
 800f6c0:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800f6c4:	210b      	movs	r1, #11
 800f6c6:	203e      	movs	r0, #62	; 0x3e
 800f6c8:	f7ff feda 	bl	800f480 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800f6cc:	2110      	movs	r1, #16
 800f6ce:	203f      	movs	r0, #63	; 0x3f
 800f6d0:	f7ff fed6 	bl	800f480 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800f6d4:	4b3b      	ldr	r3, [pc, #236]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f6d6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00e      	beq.n	800f6fc <SX1276OnTimeoutIrq+0x78>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f6de:	200d      	movs	r0, #13
 800f6e0:	f7ff fee0 	bl	800f4a4 <SX1276Read>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	200d      	movs	r0, #13
 800f6f0:	f7ff fec6 	bl	800f480 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800f6f4:	4834      	ldr	r0, [pc, #208]	; (800f7c8 <SX1276OnTimeoutIrq+0x144>)
 800f6f6:	f000 fcf3 	bl	80100e0 <TimerStart>
 800f6fa:	e006      	b.n	800f70a <SX1276OnTimeoutIrq+0x86>
                SX1276.Settings.State = RF_IDLE;
 800f6fc:	4b31      	ldr	r3, [pc, #196]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                TimerStop( &RxTimeoutSyncWord );
 800f704:	4830      	ldr	r0, [pc, #192]	; (800f7c8 <SX1276OnTimeoutIrq+0x144>)
 800f706:	f000 fe33 	bl	8010370 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800f70a:	4b30      	ldr	r3, [pc, #192]	; (800f7cc <SX1276OnTimeoutIrq+0x148>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d051      	beq.n	800f7b6 <SX1276OnTimeoutIrq+0x132>
 800f712:	4b2e      	ldr	r3, [pc, #184]	; (800f7cc <SX1276OnTimeoutIrq+0x148>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d04c      	beq.n	800f7b6 <SX1276OnTimeoutIrq+0x132>
            RadioEvents->RxTimeout( );
 800f71c:	4b2b      	ldr	r3, [pc, #172]	; (800f7cc <SX1276OnTimeoutIrq+0x148>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	4798      	blx	r3
        break;
 800f724:	e047      	b.n	800f7b6 <SX1276OnTimeoutIrq+0x132>
        SX1276Reset( );
 800f726:	f7ff fe0b 	bl	800f340 <SX1276Reset>
        RxChainCalibration( );
 800f72a:	f7fe fbe1 	bl	800def0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800f72e:	2000      	movs	r0, #0
 800f730:	f7ff fe28 	bl	800f384 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800f734:	2300      	movs	r3, #0
 800f736:	71fb      	strb	r3, [r7, #7]
 800f738:	e01f      	b.n	800f77a <SX1276OnTimeoutIrq+0xf6>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800f73a:	79fa      	ldrb	r2, [r7, #7]
 800f73c:	4924      	ldr	r1, [pc, #144]	; (800f7d0 <SX1276OnTimeoutIrq+0x14c>)
 800f73e:	4613      	mov	r3, r2
 800f740:	005b      	lsls	r3, r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	440b      	add	r3, r1
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	4618      	mov	r0, r3
 800f74a:	f7ff fe43 	bl	800f3d4 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800f74e:	79fa      	ldrb	r2, [r7, #7]
 800f750:	491f      	ldr	r1, [pc, #124]	; (800f7d0 <SX1276OnTimeoutIrq+0x14c>)
 800f752:	4613      	mov	r3, r2
 800f754:	005b      	lsls	r3, r3, #1
 800f756:	4413      	add	r3, r2
 800f758:	440b      	add	r3, r1
 800f75a:	3301      	adds	r3, #1
 800f75c:	7818      	ldrb	r0, [r3, #0]
 800f75e:	79fa      	ldrb	r2, [r7, #7]
 800f760:	491b      	ldr	r1, [pc, #108]	; (800f7d0 <SX1276OnTimeoutIrq+0x14c>)
 800f762:	4613      	mov	r3, r2
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	4413      	add	r3, r2
 800f768:	440b      	add	r3, r1
 800f76a:	3302      	adds	r3, #2
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	4619      	mov	r1, r3
 800f770:	f7ff fe86 	bl	800f480 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800f774:	79fb      	ldrb	r3, [r7, #7]
 800f776:	3301      	adds	r3, #1
 800f778:	71fb      	strb	r3, [r7, #7]
 800f77a:	79fb      	ldrb	r3, [r7, #7]
 800f77c:	2b0f      	cmp	r3, #15
 800f77e:	d9dc      	bls.n	800f73a <SX1276OnTimeoutIrq+0xb6>
        SX1276SetModem( MODEM_FSK );
 800f780:	2000      	movs	r0, #0
 800f782:	f7ff fe27 	bl	800f3d4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800f786:	4b0f      	ldr	r3, [pc, #60]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f788:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7ff ff53 	bl	800f638 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800f792:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <SX1276OnTimeoutIrq+0x140>)
 800f794:	2200      	movs	r2, #0
 800f796:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800f79a:	4b0c      	ldr	r3, [pc, #48]	; (800f7cc <SX1276OnTimeoutIrq+0x148>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00b      	beq.n	800f7ba <SX1276OnTimeoutIrq+0x136>
 800f7a2:	4b0a      	ldr	r3, [pc, #40]	; (800f7cc <SX1276OnTimeoutIrq+0x148>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d006      	beq.n	800f7ba <SX1276OnTimeoutIrq+0x136>
            RadioEvents->TxTimeout( );
 800f7ac:	4b07      	ldr	r3, [pc, #28]	; (800f7cc <SX1276OnTimeoutIrq+0x148>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	4798      	blx	r3
        break;
 800f7b4:	e001      	b.n	800f7ba <SX1276OnTimeoutIrq+0x136>
        break;
 800f7b6:	bf00      	nop
 800f7b8:	e000      	b.n	800f7bc <SX1276OnTimeoutIrq+0x138>
        break;
 800f7ba:	bf00      	nop
    }
}
 800f7bc:	bf00      	nop
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	20001240 	.word	0x20001240
 800f7c8:	2000122c 	.word	0x2000122c
 800f7cc:	200007a4 	.word	0x200007a4
 800f7d0:	08012830 	.word	0x08012830

0800f7d4 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void )
{
 800f7d4:	b590      	push	{r4, r7, lr}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	70fb      	strb	r3, [r7, #3]
	//DebugPrintf("0");
    switch( SX1276.Settings.State )
 800f7de:	4ba9      	ldr	r3, [pc, #676]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f7e0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d003      	beq.n	800f7f0 <SX1276OnDio0Irq+0x1c>
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	f000 81f4 	beq.w	800fbd6 <SX1276OnDio0Irq+0x402>
                }
                break;
            }
            break;
        default:
            break;
 800f7ee:	e211      	b.n	800fc14 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 800f7f0:	4ba4      	ldr	r3, [pc, #656]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f7f2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d003      	beq.n	800f802 <SX1276OnDio0Irq+0x2e>
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	f000 80f2 	beq.w	800f9e4 <SX1276OnDio0Irq+0x210>
                break;
 800f800:	e1e8      	b.n	800fbd4 <SX1276OnDio0Irq+0x400>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800f802:	4ba0      	ldr	r3, [pc, #640]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f804:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d051      	beq.n	800f8b0 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800f80c:	203f      	movs	r0, #63	; 0x3f
 800f80e:	f7ff fe49 	bl	800f4a4 <SX1276Read>
 800f812:	4603      	mov	r3, r0
 800f814:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800f816:	78fb      	ldrb	r3, [r7, #3]
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	2b02      	cmp	r3, #2
 800f820:	d046      	beq.n	800f8b0 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800f822:	210b      	movs	r1, #11
 800f824:	203e      	movs	r0, #62	; 0x3e
 800f826:	f7ff fe2b 	bl	800f480 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800f82a:	2110      	movs	r1, #16
 800f82c:	203f      	movs	r0, #63	; 0x3f
 800f82e:	f7ff fe27 	bl	800f480 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800f832:	4895      	ldr	r0, [pc, #596]	; (800fa88 <SX1276OnDio0Irq+0x2b4>)
 800f834:	f000 fd9c 	bl	8010370 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800f838:	4b92      	ldr	r3, [pc, #584]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f83a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f83e:	f083 0301 	eor.w	r3, r3, #1
 800f842:	b2db      	uxtb	r3, r3
 800f844:	2b00      	cmp	r3, #0
 800f846:	d007      	beq.n	800f858 <SX1276OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 800f848:	4890      	ldr	r0, [pc, #576]	; (800fa8c <SX1276OnDio0Irq+0x2b8>)
 800f84a:	f000 fd91 	bl	8010370 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800f84e:	4b8d      	ldr	r3, [pc, #564]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f850:	2200      	movs	r2, #0
 800f852:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800f856:	e00d      	b.n	800f874 <SX1276OnDio0Irq+0xa0>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f858:	200d      	movs	r0, #13
 800f85a:	f7ff fe23 	bl	800f4a4 <SX1276Read>
 800f85e:	4603      	mov	r3, r0
 800f860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f864:	b2db      	uxtb	r3, r3
 800f866:	4619      	mov	r1, r3
 800f868:	200d      	movs	r0, #13
 800f86a:	f7ff fe09 	bl	800f480 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800f86e:	4887      	ldr	r0, [pc, #540]	; (800fa8c <SX1276OnDio0Irq+0x2b8>)
 800f870:	f000 fc36 	bl	80100e0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800f874:	4b86      	ldr	r3, [pc, #536]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d008      	beq.n	800f88e <SX1276OnDio0Irq+0xba>
 800f87c:	4b84      	ldr	r3, [pc, #528]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	691b      	ldr	r3, [r3, #16]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <SX1276OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 800f886:	4b82      	ldr	r3, [pc, #520]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	691b      	ldr	r3, [r3, #16]
 800f88c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f88e:	4b7d      	ldr	r3, [pc, #500]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f896:	4b7b      	ldr	r3, [pc, #492]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f89e:	4b79      	ldr	r3, [pc, #484]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800f8a6:	4b77      	ldr	r3, [pc, #476]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                        break;
 800f8ae:	e191      	b.n	800fbd4 <SX1276OnDio0Irq+0x400>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800f8b0:	4b74      	ldr	r3, [pc, #464]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8b2:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d133      	bne.n	800f922 <SX1276OnDio0Irq+0x14e>
 800f8ba:	4b72      	ldr	r3, [pc, #456]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8bc:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d12e      	bne.n	800f922 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800f8c4:	4b6f      	ldr	r3, [pc, #444]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8c6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800f8ca:	f083 0301 	eor.w	r3, r3, #1
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d004      	beq.n	800f8de <SX1276OnDio0Irq+0x10a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	486f      	ldr	r0, [pc, #444]	; (800fa94 <SX1276OnDio0Irq+0x2c0>)
 800f8d8:	f7ff fe70 	bl	800f5bc <SX1276ReadFifo>
 800f8dc:	e007      	b.n	800f8ee <SX1276OnDio0Irq+0x11a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800f8de:	2032      	movs	r0, #50	; 0x32
 800f8e0:	f7ff fde0 	bl	800f4a4 <SX1276Read>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	4b66      	ldr	r3, [pc, #408]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8ea:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f8ee:	4b65      	ldr	r3, [pc, #404]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8f0:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4b68      	ldr	r3, [pc, #416]	; (800fa98 <SX1276OnDio0Irq+0x2c4>)
 800f8f8:	18d0      	adds	r0, r2, r3
 800f8fa:	4b62      	ldr	r3, [pc, #392]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f8fc:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f900:	b2da      	uxtb	r2, r3
 800f902:	4b60      	ldr	r3, [pc, #384]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f904:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	4619      	mov	r1, r3
 800f910:	f7ff fe54 	bl	800f5bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f914:	4b5b      	ldr	r3, [pc, #364]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f916:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800f91a:	4b5a      	ldr	r3, [pc, #360]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f91c:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
 800f920:	e018      	b.n	800f954 <SX1276OnDio0Irq+0x180>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f922:	4b58      	ldr	r3, [pc, #352]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f924:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f928:	461a      	mov	r2, r3
 800f92a:	4b5b      	ldr	r3, [pc, #364]	; (800fa98 <SX1276OnDio0Irq+0x2c4>)
 800f92c:	18d0      	adds	r0, r2, r3
 800f92e:	4b55      	ldr	r3, [pc, #340]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f930:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800f934:	b2da      	uxtb	r2, r3
 800f936:	4b53      	ldr	r3, [pc, #332]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f938:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	b2db      	uxtb	r3, r3
 800f942:	4619      	mov	r1, r3
 800f944:	f7ff fe3a 	bl	800f5bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800f948:	4b4e      	ldr	r3, [pc, #312]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f94a:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800f94e:	4b4d      	ldr	r3, [pc, #308]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f950:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                TimerStop( &RxTimeoutTimer );
 800f954:	484c      	ldr	r0, [pc, #304]	; (800fa88 <SX1276OnDio0Irq+0x2b4>)
 800f956:	f000 fd0b 	bl	8010370 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800f95a:	4b4a      	ldr	r3, [pc, #296]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f95c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800f960:	f083 0301 	eor.w	r3, r3, #1
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d007      	beq.n	800f97a <SX1276OnDio0Irq+0x1a6>
                    SX1276.Settings.State = RF_IDLE;
 800f96a:	4b46      	ldr	r3, [pc, #280]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutSyncWord );
 800f972:	4846      	ldr	r0, [pc, #280]	; (800fa8c <SX1276OnDio0Irq+0x2b8>)
 800f974:	f000 fcfc 	bl	8010370 <TimerStop>
 800f978:	e00d      	b.n	800f996 <SX1276OnDio0Irq+0x1c2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800f97a:	200d      	movs	r0, #13
 800f97c:	f7ff fd92 	bl	800f4a4 <SX1276Read>
 800f980:	4603      	mov	r3, r0
 800f982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f986:	b2db      	uxtb	r3, r3
 800f988:	4619      	mov	r1, r3
 800f98a:	200d      	movs	r0, #13
 800f98c:	f7ff fd78 	bl	800f480 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800f990:	483e      	ldr	r0, [pc, #248]	; (800fa8c <SX1276OnDio0Irq+0x2b8>)
 800f992:	f000 fba5 	bl	80100e0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800f996:	4b3e      	ldr	r3, [pc, #248]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d011      	beq.n	800f9c2 <SX1276OnDio0Irq+0x1ee>
 800f99e:	4b3c      	ldr	r3, [pc, #240]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	689b      	ldr	r3, [r3, #8]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00c      	beq.n	800f9c2 <SX1276OnDio0Irq+0x1ee>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800f9a8:	4b39      	ldr	r3, [pc, #228]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	689c      	ldr	r4, [r3, #8]
 800f9ae:	4b35      	ldr	r3, [pc, #212]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f9b0:	f8b3 1112 	ldrh.w	r1, [r3, #274]	; 0x112
 800f9b4:	4b33      	ldr	r3, [pc, #204]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f9b6:	f993 310a 	ldrsb.w	r3, [r3, #266]	; 0x10a
 800f9ba:	b21a      	sxth	r2, r3
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4836      	ldr	r0, [pc, #216]	; (800fa98 <SX1276OnDio0Irq+0x2c4>)
 800f9c0:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800f9c2:	4b30      	ldr	r3, [pc, #192]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800f9ca:	4b2e      	ldr	r3, [pc, #184]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800f9d2:	4b2c      	ldr	r3, [pc, #176]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                SX1276.Settings.FskPacketHandler.Size = 0;
 800f9da:	4b2a      	ldr	r3, [pc, #168]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                break;
 800f9e2:	e0f7      	b.n	800fbd4 <SX1276OnDio0Irq+0x400>
                    int8_t snr = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	71fb      	strb	r3, [r7, #7]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800f9e8:	2140      	movs	r1, #64	; 0x40
 800f9ea:	2012      	movs	r0, #18
 800f9ec:	f7ff fd48 	bl	800f480 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800f9f0:	2012      	movs	r0, #18
 800f9f2:	f7ff fd57 	bl	800f4a4 <SX1276Read>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800f9fa:	78fb      	ldrb	r3, [r7, #3]
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	f003 0320 	and.w	r3, r3, #32
 800fa02:	2b20      	cmp	r3, #32
 800fa04:	d122      	bne.n	800fa4c <SX1276OnDio0Irq+0x278>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800fa06:	2120      	movs	r1, #32
 800fa08:	2012      	movs	r0, #18
 800fa0a:	f7ff fd39 	bl	800f480 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800fa0e:	4b1d      	ldr	r3, [pc, #116]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800fa10:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800fa14:	f083 0301 	eor.w	r3, r3, #1
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d003      	beq.n	800fa26 <SX1276OnDio0Irq+0x252>
                            SX1276.Settings.State = RF_IDLE;
 800fa1e:	4b19      	ldr	r3, [pc, #100]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                        TimerStop( &RxTimeoutTimer );
 800fa26:	4818      	ldr	r0, [pc, #96]	; (800fa88 <SX1276OnDio0Irq+0x2b4>)
 800fa28:	f000 fca2 	bl	8010370 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800fa2c:	4b18      	ldr	r3, [pc, #96]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 80cc 	beq.w	800fbce <SX1276OnDio0Irq+0x3fa>
 800fa36:	4b16      	ldr	r3, [pc, #88]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	f000 80c6 	beq.w	800fbce <SX1276OnDio0Irq+0x3fa>
                            RadioEvents->RxError( );
 800fa42:	4b13      	ldr	r3, [pc, #76]	; (800fa90 <SX1276OnDio0Irq+0x2bc>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	691b      	ldr	r3, [r3, #16]
 800fa48:	4798      	blx	r3
                        break;
 800fa4a:	e0c0      	b.n	800fbce <SX1276OnDio0Irq+0x3fa>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800fa4c:	2019      	movs	r0, #25
 800fa4e:	f7ff fd29 	bl	800f4a4 <SX1276Read>
 800fa52:	4603      	mov	r3, r0
 800fa54:	b25a      	sxtb	r2, r3
 800fa56:	4b0b      	ldr	r3, [pc, #44]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800fa58:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800fa5c:	4b09      	ldr	r3, [pc, #36]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800fa5e:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	da1a      	bge.n	800fa9c <SX1276OnDio0Irq+0x2c8>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800fa66:	4b07      	ldr	r3, [pc, #28]	; (800fa84 <SX1276OnDio0Irq+0x2b0>)
 800fa68:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800fa6c:	425b      	negs	r3, r3
 800fa6e:	109b      	asrs	r3, r3, #2
 800fa70:	b25b      	sxtb	r3, r3
 800fa72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa76:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 800fa78:	79fb      	ldrb	r3, [r7, #7]
 800fa7a:	425b      	negs	r3, r3
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	71fb      	strb	r3, [r7, #7]
 800fa80:	e014      	b.n	800faac <SX1276OnDio0Irq+0x2d8>
 800fa82:	bf00      	nop
 800fa84:	20001240 	.word	0x20001240
 800fa88:	20001380 	.word	0x20001380
 800fa8c:	2000122c 	.word	0x2000122c
 800fa90:	200007a4 	.word	0x200007a4
 800fa94:	20001352 	.word	0x20001352
 800fa98:	200007a8 	.word	0x200007a8
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 800fa9c:	4b5f      	ldr	r3, [pc, #380]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fa9e:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800faa2:	109b      	asrs	r3, r3, #2
 800faa4:	b25b      	sxtb	r3, r3
 800faa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faaa:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800faac:	201a      	movs	r0, #26
 800faae:	f7ff fcf9 	bl	800f4a4 <SX1276Read>
 800fab2:	4603      	mov	r3, r0
 800fab4:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 800fab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	da2d      	bge.n	800fb1a <SX1276OnDio0Irq+0x346>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fabe:	4b57      	ldr	r3, [pc, #348]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fac4:	4a56      	ldr	r2, [pc, #344]	; (800fc20 <SX1276OnDio0Irq+0x44c>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d913      	bls.n	800faf2 <SX1276OnDio0Irq+0x31e>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800faca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800face:	111b      	asrs	r3, r3, #4
 800fad0:	b21b      	sxth	r3, r3
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	88bb      	ldrh	r3, [r7, #4]
 800fad6:	4413      	add	r3, r2
 800fad8:	b29a      	uxth	r2, r3
 800fada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fade:	b29b      	uxth	r3, r3
 800fae0:	4413      	add	r3, r2
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	3b9d      	subs	r3, #157	; 0x9d
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	b21a      	sxth	r2, r3
 800faea:	4b4c      	ldr	r3, [pc, #304]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800faec:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800faf0:	e036      	b.n	800fb60 <SX1276OnDio0Irq+0x38c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800faf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800faf6:	111b      	asrs	r3, r3, #4
 800faf8:	b21b      	sxth	r3, r3
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	88bb      	ldrh	r3, [r7, #4]
 800fafe:	4413      	add	r3, r2
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	4413      	add	r3, r2
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	3ba4      	subs	r3, #164	; 0xa4
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	b21a      	sxth	r2, r3
 800fb12:	4b42      	ldr	r3, [pc, #264]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb14:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800fb18:	e022      	b.n	800fb60 <SX1276OnDio0Irq+0x38c>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800fb1a:	4b40      	ldr	r3, [pc, #256]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb20:	4a3f      	ldr	r2, [pc, #252]	; (800fc20 <SX1276OnDio0Irq+0x44c>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d90e      	bls.n	800fb44 <SX1276OnDio0Irq+0x370>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800fb26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fb2a:	111b      	asrs	r3, r3, #4
 800fb2c:	b21b      	sxth	r3, r3
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	88bb      	ldrh	r3, [r7, #4]
 800fb32:	4413      	add	r3, r2
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	3b9d      	subs	r3, #157	; 0x9d
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	b21a      	sxth	r2, r3
 800fb3c:	4b37      	ldr	r3, [pc, #220]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb3e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
 800fb42:	e00d      	b.n	800fb60 <SX1276OnDio0Irq+0x38c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800fb44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800fb48:	111b      	asrs	r3, r3, #4
 800fb4a:	b21b      	sxth	r3, r3
 800fb4c:	b29a      	uxth	r2, r3
 800fb4e:	88bb      	ldrh	r3, [r7, #4]
 800fb50:	4413      	add	r3, r2
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	3ba4      	subs	r3, #164	; 0xa4
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	b21a      	sxth	r2, r3
 800fb5a:	4b30      	ldr	r3, [pc, #192]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb5c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800fb60:	2013      	movs	r0, #19
 800fb62:	f7ff fc9f 	bl	800f4a4 <SX1276Read>
 800fb66:	4603      	mov	r3, r0
 800fb68:	461a      	mov	r2, r3
 800fb6a:	4b2c      	ldr	r3, [pc, #176]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb6c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800fb70:	4b2a      	ldr	r3, [pc, #168]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb72:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800fb76:	4619      	mov	r1, r3
 800fb78:	482a      	ldr	r0, [pc, #168]	; (800fc24 <SX1276OnDio0Irq+0x450>)
 800fb7a:	f7ff fd1f 	bl	800f5bc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800fb7e:	4b27      	ldr	r3, [pc, #156]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb80:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800fb84:	f083 0301 	eor.w	r3, r3, #1
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <SX1276OnDio0Irq+0x3c2>
                        SX1276.Settings.State = RF_IDLE;
 800fb8e:	4b23      	ldr	r3, [pc, #140]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                    TimerStop( &RxTimeoutTimer );
 800fb96:	4824      	ldr	r0, [pc, #144]	; (800fc28 <SX1276OnDio0Irq+0x454>)
 800fb98:	f000 fbea 	bl	8010370 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800fb9c:	4b23      	ldr	r3, [pc, #140]	; (800fc2c <SX1276OnDio0Irq+0x458>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d016      	beq.n	800fbd2 <SX1276OnDio0Irq+0x3fe>
 800fba4:	4b21      	ldr	r3, [pc, #132]	; (800fc2c <SX1276OnDio0Irq+0x458>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	689b      	ldr	r3, [r3, #8]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d011      	beq.n	800fbd2 <SX1276OnDio0Irq+0x3fe>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800fbae:	4b1f      	ldr	r3, [pc, #124]	; (800fc2c <SX1276OnDio0Irq+0x458>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	689c      	ldr	r4, [r3, #8]
 800fbb4:	4b19      	ldr	r3, [pc, #100]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fbb6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800fbba:	b299      	uxth	r1, r3
 800fbbc:	4b17      	ldr	r3, [pc, #92]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fbbe:	f9b3 213a 	ldrsh.w	r2, [r3, #314]	; 0x13a
 800fbc2:	4b16      	ldr	r3, [pc, #88]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fbc4:	f993 3138 	ldrsb.w	r3, [r3, #312]	; 0x138
 800fbc8:	4816      	ldr	r0, [pc, #88]	; (800fc24 <SX1276OnDio0Irq+0x450>)
 800fbca:	47a0      	blx	r4
                break;
 800fbcc:	e001      	b.n	800fbd2 <SX1276OnDio0Irq+0x3fe>
                        break;
 800fbce:	bf00      	nop
 800fbd0:	e020      	b.n	800fc14 <SX1276OnDio0Irq+0x440>
                break;
 800fbd2:	bf00      	nop
            break;
 800fbd4:	e01e      	b.n	800fc14 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 800fbd6:	4816      	ldr	r0, [pc, #88]	; (800fc30 <SX1276OnDio0Irq+0x45c>)
 800fbd8:	f000 fbca 	bl	8010370 <TimerStop>
            switch( SX1276.Settings.Modem )
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fbde:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d103      	bne.n	800fbee <SX1276OnDio0Irq+0x41a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800fbe6:	2108      	movs	r1, #8
 800fbe8:	2012      	movs	r0, #18
 800fbea:	f7ff fc49 	bl	800f480 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800fbee:	4b0b      	ldr	r3, [pc, #44]	; (800fc1c <SX1276OnDio0Irq+0x448>)
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800fbf6:	4b0d      	ldr	r3, [pc, #52]	; (800fc2c <SX1276OnDio0Irq+0x458>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d008      	beq.n	800fc10 <SX1276OnDio0Irq+0x43c>
 800fbfe:	4b0b      	ldr	r3, [pc, #44]	; (800fc2c <SX1276OnDio0Irq+0x458>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d003      	beq.n	800fc10 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 800fc08:	4b08      	ldr	r3, [pc, #32]	; (800fc2c <SX1276OnDio0Irq+0x458>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4798      	blx	r3
                break;
 800fc10:	bf00      	nop
            break;
 800fc12:	bf00      	nop
    }
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd90      	pop	{r4, r7, pc}
 800fc1c:	20001240 	.word	0x20001240
 800fc20:	1f4add40 	.word	0x1f4add40
 800fc24:	200007a8 	.word	0x200007a8
 800fc28:	20001380 	.word	0x20001380
 800fc2c:	200007a4 	.word	0x200007a4
 800fc30:	20001218 	.word	0x20001218

0800fc34 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	af00      	add	r7, sp, #0
	//DebugPrintf("1");
    switch( SX1276.Settings.State )
 800fc38:	4b6a      	ldr	r3, [pc, #424]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc3a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800fc3e:	2b01      	cmp	r3, #1
 800fc40:	d003      	beq.n	800fc4a <SX1276OnDio1Irq+0x16>
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	f000 8083 	beq.w	800fd4e <SX1276OnDio1Irq+0x11a>
            default:
                break;
            }
            break;
        default:
            break;
 800fc48:	e0ca      	b.n	800fde0 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800fc4a:	4b66      	ldr	r3, [pc, #408]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc4c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d002      	beq.n	800fc5a <SX1276OnDio1Irq+0x26>
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d060      	beq.n	800fd1a <SX1276OnDio1Irq+0xe6>
                break;
 800fc58:	e078      	b.n	800fd4c <SX1276OnDio1Irq+0x118>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800fc5a:	4b62      	ldr	r3, [pc, #392]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc5c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d119      	bne.n	800fc98 <SX1276OnDio1Irq+0x64>
 800fc64:	4b5f      	ldr	r3, [pc, #380]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc66:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d114      	bne.n	800fc98 <SX1276OnDio1Irq+0x64>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800fc6e:	4b5d      	ldr	r3, [pc, #372]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc70:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800fc74:	f083 0301 	eor.w	r3, r3, #1
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d004      	beq.n	800fc88 <SX1276OnDio1Irq+0x54>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800fc7e:	2101      	movs	r1, #1
 800fc80:	4859      	ldr	r0, [pc, #356]	; (800fde8 <SX1276OnDio1Irq+0x1b4>)
 800fc82:	f7ff fc9b 	bl	800f5bc <SX1276ReadFifo>
 800fc86:	e007      	b.n	800fc98 <SX1276OnDio1Irq+0x64>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800fc88:	2032      	movs	r0, #50	; 0x32
 800fc8a:	f7ff fc0b 	bl	800f4a4 <SX1276Read>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	b29a      	uxth	r2, r3
 800fc92:	4b54      	ldr	r3, [pc, #336]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc94:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 800fc98:	4b52      	ldr	r3, [pc, #328]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fc9a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fc9e:	461a      	mov	r2, r3
 800fca0:	4b50      	ldr	r3, [pc, #320]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fca2:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	4a4e      	ldr	r2, [pc, #312]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcaa:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	dd19      	ble.n	800fce6 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 800fcb2:	4b4c      	ldr	r3, [pc, #304]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcb4:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4b4c      	ldr	r3, [pc, #304]	; (800fdec <SX1276OnDio1Irq+0x1b8>)
 800fcbc:	4413      	add	r3, r2
 800fcbe:	4a49      	ldr	r2, [pc, #292]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcc0:	f892 2116 	ldrb.w	r2, [r2, #278]	; 0x116
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff fc78 	bl	800f5bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh;
 800fccc:	4b45      	ldr	r3, [pc, #276]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcce:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800fcd2:	4b44      	ldr	r3, [pc, #272]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcd4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	4413      	add	r3, r2
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	4b41      	ldr	r3, [pc, #260]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fce0:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800fce4:	e032      	b.n	800fd4c <SX1276OnDio1Irq+0x118>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fce6:	4b3f      	ldr	r3, [pc, #252]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fce8:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fcec:	461a      	mov	r2, r3
 800fcee:	4b3f      	ldr	r3, [pc, #252]	; (800fdec <SX1276OnDio1Irq+0x1b8>)
 800fcf0:	18d0      	adds	r0, r2, r3
 800fcf2:	4b3c      	ldr	r3, [pc, #240]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcf4:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fcf8:	b2da      	uxtb	r2, r3
 800fcfa:	4b3a      	ldr	r3, [pc, #232]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fcfc:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	4619      	mov	r1, r3
 800fd08:	f7ff fc58 	bl	800f5bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fd0c:	4b35      	ldr	r3, [pc, #212]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd0e:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800fd12:	4b34      	ldr	r3, [pc, #208]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd14:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800fd18:	e018      	b.n	800fd4c <SX1276OnDio1Irq+0x118>
                TimerStop( &RxTimeoutTimer );
 800fd1a:	4835      	ldr	r0, [pc, #212]	; (800fdf0 <SX1276OnDio1Irq+0x1bc>)
 800fd1c:	f000 fb28 	bl	8010370 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800fd20:	2180      	movs	r1, #128	; 0x80
 800fd22:	2012      	movs	r0, #18
 800fd24:	f7ff fbac 	bl	800f480 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800fd28:	4b2e      	ldr	r3, [pc, #184]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800fd30:	4b30      	ldr	r3, [pc, #192]	; (800fdf4 <SX1276OnDio1Irq+0x1c0>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d008      	beq.n	800fd4a <SX1276OnDio1Irq+0x116>
 800fd38:	4b2e      	ldr	r3, [pc, #184]	; (800fdf4 <SX1276OnDio1Irq+0x1c0>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d003      	beq.n	800fd4a <SX1276OnDio1Irq+0x116>
                    RadioEvents->RxTimeout( );
 800fd42:	4b2c      	ldr	r3, [pc, #176]	; (800fdf4 <SX1276OnDio1Irq+0x1c0>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	4798      	blx	r3
                break;
 800fd4a:	bf00      	nop
            break;
 800fd4c:	e048      	b.n	800fde0 <SX1276OnDio1Irq+0x1ac>
            switch( SX1276.Settings.Modem )
 800fd4e:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd50:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <SX1276OnDio1Irq+0x128>
 800fd58:	2b01      	cmp	r3, #1
                break;
 800fd5a:	e040      	b.n	800fdde <SX1276OnDio1Irq+0x1aa>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800fd5c:	4b21      	ldr	r3, [pc, #132]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd5e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fd62:	461a      	mov	r2, r3
 800fd64:	4b1f      	ldr	r3, [pc, #124]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd66:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fd6a:	1ad3      	subs	r3, r2, r3
 800fd6c:	4a1d      	ldr	r2, [pc, #116]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd6e:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 800fd72:	4293      	cmp	r3, r2
 800fd74:	dd19      	ble.n	800fdaa <SX1276OnDio1Irq+0x176>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800fd76:	4b1b      	ldr	r3, [pc, #108]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd78:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4b1b      	ldr	r3, [pc, #108]	; (800fdec <SX1276OnDio1Irq+0x1b8>)
 800fd80:	4413      	add	r3, r2
 800fd82:	4a18      	ldr	r2, [pc, #96]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd84:	f892 2117 	ldrb.w	r2, [r2, #279]	; 0x117
 800fd88:	4611      	mov	r1, r2
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff fc06 	bl	800f59c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800fd90:	4b14      	ldr	r3, [pc, #80]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd92:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800fd96:	4b13      	ldr	r3, [pc, #76]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fd98:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	4413      	add	r3, r2
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fda4:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800fda8:	e018      	b.n	800fddc <SX1276OnDio1Irq+0x1a8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800fdaa:	4b0e      	ldr	r3, [pc, #56]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fdac:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	4b0e      	ldr	r3, [pc, #56]	; (800fdec <SX1276OnDio1Irq+0x1b8>)
 800fdb4:	18d0      	adds	r0, r2, r3
 800fdb6:	4b0b      	ldr	r3, [pc, #44]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fdb8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fdc0:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	1ad3      	subs	r3, r2, r3
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	4619      	mov	r1, r3
 800fdcc:	f7ff fbe6 	bl	800f59c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800fdd0:	4b04      	ldr	r3, [pc, #16]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fdd2:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 800fdd6:	4b03      	ldr	r3, [pc, #12]	; (800fde4 <SX1276OnDio1Irq+0x1b0>)
 800fdd8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
                break;
 800fddc:	bf00      	nop
            break;
 800fdde:	bf00      	nop
    }
}
 800fde0:	bf00      	nop
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	20001240 	.word	0x20001240
 800fde8:	20001352 	.word	0x20001352
 800fdec:	200007a8 	.word	0x200007a8
 800fdf0:	20001380 	.word	0x20001380
 800fdf4:	200007a4 	.word	0x200007a4

0800fdf8 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void )
{
 800fdf8:	b598      	push	{r3, r4, r7, lr}
 800fdfa:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 800fdfc:	4b5e      	ldr	r3, [pc, #376]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fdfe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d003      	beq.n	800fe0e <SX1276OnDio2Irq+0x16>
 800fe06:	2b02      	cmp	r3, #2
 800fe08:	f000 8084 	beq.w	800ff14 <SX1276OnDio2Irq+0x11c>
            default:
                break;
            }
            break;
        default:
            break;
 800fe0c:	e0ae      	b.n	800ff6c <SX1276OnDio2Irq+0x174>
            switch( SX1276.Settings.Modem )
 800fe0e:	4b5a      	ldr	r3, [pc, #360]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe10:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d002      	beq.n	800fe1e <SX1276OnDio2Irq+0x26>
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d058      	beq.n	800fece <SX1276OnDio2Irq+0xd6>
                break;
 800fe1c:	e079      	b.n	800ff12 <SX1276OnDio2Irq+0x11a>
                if( SX1276.DIO4.port == NULL )
 800fe1e:	4b56      	ldr	r3, [pc, #344]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d103      	bne.n	800fe2e <SX1276OnDio2Irq+0x36>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800fe26:	4b54      	ldr	r3, [pc, #336]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe28:	2201      	movs	r2, #1
 800fe2a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800fe2e:	4b52      	ldr	r3, [pc, #328]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe30:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d169      	bne.n	800ff0c <SX1276OnDio2Irq+0x114>
 800fe38:	4b4f      	ldr	r3, [pc, #316]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe3a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d164      	bne.n	800ff0c <SX1276OnDio2Irq+0x114>
                    TimerStop( &RxTimeoutSyncWord );
 800fe42:	484e      	ldr	r0, [pc, #312]	; (800ff7c <SX1276OnDio2Irq+0x184>)
 800fe44:	f000 fa94 	bl	8010370 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800fe48:	4b4b      	ldr	r3, [pc, #300]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800fe50:	2011      	movs	r0, #17
 800fe52:	f7ff fb27 	bl	800f4a4 <SX1276Read>
 800fe56:	4603      	mov	r3, r0
 800fe58:	085b      	lsrs	r3, r3, #1
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	425b      	negs	r3, r3
 800fe5e:	b2db      	uxtb	r3, r3
 800fe60:	b25a      	sxtb	r2, r3
 800fe62:	4b45      	ldr	r3, [pc, #276]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fe64:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800fe68:	201b      	movs	r0, #27
 800fe6a:	f7ff fb1b 	bl	800f4a4 <SX1276Read>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800fe72:	201c      	movs	r0, #28
 800fe74:	f7ff fb16 	bl	800f4a4 <SX1276Read>
 800fe78:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800fe7a:	4323      	orrs	r3, r4
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7f0 fad1 	bl	8000424 <__aeabi_i2d>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	4610      	mov	r0, r2
 800fe88:	4619      	mov	r1, r3
 800fe8a:	f7f0 fdcf 	bl	8000a2c <__aeabi_d2iz>
 800fe8e:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) ) *
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7f0 fac7 	bl	8000424 <__aeabi_i2d>
 800fe96:	a336      	add	r3, pc, #216	; (adr r3, 800ff70 <SX1276OnDio2Irq+0x178>)
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	f7f0 fb2c 	bl	80004f8 <__aeabi_dmul>
 800fea0:	4602      	mov	r2, r0
 800fea2:	460b      	mov	r3, r1
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800fea4:	4610      	mov	r0, r2
 800fea6:	4619      	mov	r1, r3
 800fea8:	f7f0 fdc0 	bl	8000a2c <__aeabi_d2iz>
 800feac:	4603      	mov	r3, r0
 800feae:	4a32      	ldr	r2, [pc, #200]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800feb0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800feb4:	200c      	movs	r0, #12
 800feb6:	f7ff faf5 	bl	800f4a4 <SX1276Read>
 800feba:	4603      	mov	r3, r0
 800febc:	095b      	lsrs	r3, r3, #5
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	f003 0307 	and.w	r3, r3, #7
 800fec4:	b2da      	uxtb	r2, r3
 800fec6:	4b2c      	ldr	r3, [pc, #176]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fec8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
                break;
 800fecc:	e01e      	b.n	800ff0c <SX1276OnDio2Irq+0x114>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800fece:	4b2a      	ldr	r3, [pc, #168]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800fed0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d01b      	beq.n	800ff10 <SX1276OnDio2Irq+0x118>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800fed8:	2102      	movs	r1, #2
 800feda:	2012      	movs	r0, #18
 800fedc:	f7ff fad0 	bl	800f480 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800fee0:	4b27      	ldr	r3, [pc, #156]	; (800ff80 <SX1276OnDio2Irq+0x188>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d013      	beq.n	800ff10 <SX1276OnDio2Irq+0x118>
 800fee8:	4b25      	ldr	r3, [pc, #148]	; (800ff80 <SX1276OnDio2Irq+0x188>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00e      	beq.n	800ff10 <SX1276OnDio2Irq+0x118>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800fef2:	4b23      	ldr	r3, [pc, #140]	; (800ff80 <SX1276OnDio2Irq+0x188>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	695c      	ldr	r4, [r3, #20]
 800fef8:	201c      	movs	r0, #28
 800fefa:	f7ff fad3 	bl	800f4a4 <SX1276Read>
 800fefe:	4603      	mov	r3, r0
 800ff00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	4618      	mov	r0, r3
 800ff08:	47a0      	blx	r4
                break;
 800ff0a:	e001      	b.n	800ff10 <SX1276OnDio2Irq+0x118>
                break;
 800ff0c:	bf00      	nop
 800ff0e:	e02d      	b.n	800ff6c <SX1276OnDio2Irq+0x174>
                break;
 800ff10:	bf00      	nop
            break;
 800ff12:	e02b      	b.n	800ff6c <SX1276OnDio2Irq+0x174>
            switch( SX1276.Settings.Modem )
 800ff14:	4b18      	ldr	r3, [pc, #96]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800ff16:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d020      	beq.n	800ff60 <SX1276OnDio2Irq+0x168>
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	d120      	bne.n	800ff64 <SX1276OnDio2Irq+0x16c>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ff22:	4b15      	ldr	r3, [pc, #84]	; (800ff78 <SX1276OnDio2Irq+0x180>)
 800ff24:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d01d      	beq.n	800ff68 <SX1276OnDio2Irq+0x170>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800ff2c:	2102      	movs	r1, #2
 800ff2e:	2012      	movs	r0, #18
 800ff30:	f7ff faa6 	bl	800f480 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800ff34:	4b12      	ldr	r3, [pc, #72]	; (800ff80 <SX1276OnDio2Irq+0x188>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d015      	beq.n	800ff68 <SX1276OnDio2Irq+0x170>
 800ff3c:	4b10      	ldr	r3, [pc, #64]	; (800ff80 <SX1276OnDio2Irq+0x188>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	695b      	ldr	r3, [r3, #20]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d010      	beq.n	800ff68 <SX1276OnDio2Irq+0x170>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800ff46:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <SX1276OnDio2Irq+0x188>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	695c      	ldr	r4, [r3, #20]
 800ff4c:	201c      	movs	r0, #28
 800ff4e:	f7ff faa9 	bl	800f4a4 <SX1276Read>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	47a0      	blx	r4
                break;
 800ff5e:	e003      	b.n	800ff68 <SX1276OnDio2Irq+0x170>
                break;
 800ff60:	bf00      	nop
 800ff62:	e002      	b.n	800ff6a <SX1276OnDio2Irq+0x172>
                break;
 800ff64:	bf00      	nop
 800ff66:	e000      	b.n	800ff6a <SX1276OnDio2Irq+0x172>
                break;
 800ff68:	bf00      	nop
            break;
 800ff6a:	bf00      	nop
    }
}
 800ff6c:	bf00      	nop
 800ff6e:	bd98      	pop	{r3, r4, r7, pc}
 800ff70:	00000000 	.word	0x00000000
 800ff74:	404e8480 	.word	0x404e8480
 800ff78:	20001240 	.word	0x20001240
 800ff7c:	2000122c 	.word	0x2000122c
 800ff80:	200007a4 	.word	0x200007a4

0800ff84 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 800ff88:	4b1d      	ldr	r3, [pc, #116]	; (8010000 <SX1276OnDio3Irq+0x7c>)
 800ff8a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d030      	beq.n	800fff4 <SX1276OnDio3Irq+0x70>
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d000      	beq.n	800ff98 <SX1276OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800ff96:	e030      	b.n	800fffa <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800ff98:	2012      	movs	r0, #18
 800ff9a:	f7ff fa83 	bl	800f4a4 <SX1276Read>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f003 0301 	and.w	r3, r3, #1
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d112      	bne.n	800ffce <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800ffa8:	2105      	movs	r1, #5
 800ffaa:	2012      	movs	r0, #18
 800ffac:	f7ff fa68 	bl	800f480 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ffb0:	4b14      	ldr	r3, [pc, #80]	; (8010004 <SX1276OnDio3Irq+0x80>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d01f      	beq.n	800fff8 <SX1276OnDio3Irq+0x74>
 800ffb8:	4b12      	ldr	r3, [pc, #72]	; (8010004 <SX1276OnDio3Irq+0x80>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	699b      	ldr	r3, [r3, #24]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d01a      	beq.n	800fff8 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800ffc2:	4b10      	ldr	r3, [pc, #64]	; (8010004 <SX1276OnDio3Irq+0x80>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	2001      	movs	r0, #1
 800ffca:	4798      	blx	r3
        break;
 800ffcc:	e014      	b.n	800fff8 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800ffce:	2104      	movs	r1, #4
 800ffd0:	2012      	movs	r0, #18
 800ffd2:	f7ff fa55 	bl	800f480 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ffd6:	4b0b      	ldr	r3, [pc, #44]	; (8010004 <SX1276OnDio3Irq+0x80>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00c      	beq.n	800fff8 <SX1276OnDio3Irq+0x74>
 800ffde:	4b09      	ldr	r3, [pc, #36]	; (8010004 <SX1276OnDio3Irq+0x80>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	699b      	ldr	r3, [r3, #24]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d007      	beq.n	800fff8 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 800ffe8:	4b06      	ldr	r3, [pc, #24]	; (8010004 <SX1276OnDio3Irq+0x80>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	699b      	ldr	r3, [r3, #24]
 800ffee:	2000      	movs	r0, #0
 800fff0:	4798      	blx	r3
        break;
 800fff2:	e001      	b.n	800fff8 <SX1276OnDio3Irq+0x74>
        break;
 800fff4:	bf00      	nop
 800fff6:	e000      	b.n	800fffa <SX1276OnDio3Irq+0x76>
        break;
 800fff8:	bf00      	nop
    }
}
 800fffa:	bf00      	nop
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	20001240 	.word	0x20001240
 8010004:	200007a4 	.word	0x200007a4

08010008 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void )
{
 8010008:	b480      	push	{r7}
 801000a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801000c:	4b0c      	ldr	r3, [pc, #48]	; (8010040 <SX1276OnDio4Irq+0x38>)
 801000e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8010012:	2b00      	cmp	r3, #0
 8010014:	d002      	beq.n	801001c <SX1276OnDio4Irq+0x14>
 8010016:	2b01      	cmp	r3, #1
 8010018:	d00a      	beq.n	8010030 <SX1276OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801001a:	e00c      	b.n	8010036 <SX1276OnDio4Irq+0x2e>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801001c:	4b08      	ldr	r3, [pc, #32]	; (8010040 <SX1276OnDio4Irq+0x38>)
 801001e:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <SX1276OnDio4Irq+0x2c>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8010026:	4b06      	ldr	r3, [pc, #24]	; (8010040 <SX1276OnDio4Irq+0x38>)
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        break;
 801002e:	e001      	b.n	8010034 <SX1276OnDio4Irq+0x2c>
        break;
 8010030:	bf00      	nop
 8010032:	e000      	b.n	8010036 <SX1276OnDio4Irq+0x2e>
        break;
 8010034:	bf00      	nop
    }
}
 8010036:	bf00      	nop
 8010038:	46bd      	mov	sp, r7
 801003a:	bc80      	pop	{r7}
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop
 8010040:	20001240 	.word	0x20001240

08010044 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8010044:	b480      	push	{r7}
 8010046:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8010048:	4b15      	ldr	r3, [pc, #84]	; (80100a0 <SystemInit+0x5c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a14      	ldr	r2, [pc, #80]	; (80100a0 <SystemInit+0x5c>)
 801004e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010052:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8010054:	4b12      	ldr	r3, [pc, #72]	; (80100a0 <SystemInit+0x5c>)
 8010056:	689a      	ldr	r2, [r3, #8]
 8010058:	4911      	ldr	r1, [pc, #68]	; (80100a0 <SystemInit+0x5c>)
 801005a:	4b12      	ldr	r3, [pc, #72]	; (80100a4 <SystemInit+0x60>)
 801005c:	4013      	ands	r3, r2
 801005e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8010060:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <SystemInit+0x5c>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a0e      	ldr	r2, [pc, #56]	; (80100a0 <SystemInit+0x5c>)
 8010066:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 801006a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 801006e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010070:	4b0b      	ldr	r3, [pc, #44]	; (80100a0 <SystemInit+0x5c>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4a0a      	ldr	r2, [pc, #40]	; (80100a0 <SystemInit+0x5c>)
 8010076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801007a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 801007c:	4b08      	ldr	r3, [pc, #32]	; (80100a0 <SystemInit+0x5c>)
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	4a07      	ldr	r2, [pc, #28]	; (80100a0 <SystemInit+0x5c>)
 8010082:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8010086:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010088:	4b05      	ldr	r3, [pc, #20]	; (80100a0 <SystemInit+0x5c>)
 801008a:	2200      	movs	r2, #0
 801008c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 801008e:	4b06      	ldr	r3, [pc, #24]	; (80100a8 <SystemInit+0x64>)
 8010090:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010094:	609a      	str	r2, [r3, #8]
#endif
}
 8010096:	bf00      	nop
 8010098:	46bd      	mov	sp, r7
 801009a:	bc80      	pop	{r7}
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	40023800 	.word	0x40023800
 80100a4:	88ffc00c 	.word	0x88ffc00c
 80100a8:	e000ed00 	.word	0xe000ed00

080100ac <TimerInit>:
 * \retval value current timer value
 */
TimerTime_t TimerGetValue( void );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	605a      	str	r2, [r3, #4]
    obj->IsRunning = false;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2200      	movs	r2, #0
 80100c6:	721a      	strb	r2, [r3, #8]
    obj->Callback = callback;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	683a      	ldr	r2, [r7, #0]
 80100cc:	60da      	str	r2, [r3, #12]
    obj->Next = NULL;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	611a      	str	r2, [r3, #16]
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	bc80      	pop	{r7}
 80100dc:	4770      	bx	lr
	...

080100e0 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 80100e8:	2300      	movs	r3, #0
 80100ea:	60fb      	str	r3, [r7, #12]
    uint32_t remainingTime = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	60bb      	str	r3, [r7, #8]

    BoardDisableIrq( );
 80100f0:	f7fb f846 	bl	800b180 <BoardDisableIrq>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d005      	beq.n	8010106 <TimerStart+0x26>
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f9d8 	bl	80104b0 <TimerExists>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d002      	beq.n	801010c <TimerStart+0x2c>
    {
        BoardEnableIrq( );
 8010106:	f7fb f84b 	bl	800b1a0 <BoardEnableIrq>
        return;
 801010a:	e03e      	b.n	801018a <TimerStart+0xaa>
    }

    obj->Timestamp = obj->ReloadValue;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	685a      	ldr	r2, [r3, #4]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	601a      	str	r2, [r3, #0]
    obj->IsRunning = false;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2200      	movs	r2, #0
 8010118:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == NULL )
 801011a:	4b1d      	ldr	r3, [pc, #116]	; (8010190 <TimerStart+0xb0>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <TimerStart+0x50>
    {
        TimerInsertNewHeadTimer( obj, obj->Timestamp );
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4619      	mov	r1, r3
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f8a1 	bl	8010270 <TimerInsertNewHeadTimer>
 801012e:	e02a      	b.n	8010186 <TimerStart+0xa6>
    }
    else
    {
        if( TimerListHead->IsRunning == true )
 8010130:	4b17      	ldr	r3, [pc, #92]	; (8010190 <TimerStart+0xb0>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	7a1b      	ldrb	r3, [r3, #8]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d013      	beq.n	8010162 <TimerStart+0x82>
        {
            elapsedTime = TimerGetValue( );
 801013a:	f000 f9e7 	bl	801050c <TimerGetValue>
 801013e:	60f8      	str	r0, [r7, #12]
            if( elapsedTime > TimerListHead->Timestamp )
 8010140:	4b13      	ldr	r3, [pc, #76]	; (8010190 <TimerStart+0xb0>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	429a      	cmp	r2, r3
 801014a:	d903      	bls.n	8010154 <TimerStart+0x74>
            {
                elapsedTime = TimerListHead->Timestamp; // security but should never occur
 801014c:	4b10      	ldr	r3, [pc, #64]	; (8010190 <TimerStart+0xb0>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	60fb      	str	r3, [r7, #12]
            }
            remainingTime = TimerListHead->Timestamp - elapsedTime;
 8010154:	4b0e      	ldr	r3, [pc, #56]	; (8010190 <TimerStart+0xb0>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681a      	ldr	r2, [r3, #0]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	60bb      	str	r3, [r7, #8]
 8010160:	e003      	b.n	801016a <TimerStart+0x8a>
        }
        else
        {
            remainingTime = TimerListHead->Timestamp;
 8010162:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <TimerStart+0xb0>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60bb      	str	r3, [r7, #8]
        }

        if( obj->Timestamp < remainingTime )
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	429a      	cmp	r2, r3
 8010172:	d904      	bls.n	801017e <TimerStart+0x9e>
        {
            TimerInsertNewHeadTimer( obj, remainingTime );
 8010174:	68b9      	ldr	r1, [r7, #8]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f87a 	bl	8010270 <TimerInsertNewHeadTimer>
 801017c:	e003      	b.n	8010186 <TimerStart+0xa6>
        }
        else
        {
             TimerInsertTimer( obj, remainingTime );
 801017e:	68b9      	ldr	r1, [r7, #8]
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f807 	bl	8010194 <TimerInsertTimer>
        }
    }
    BoardEnableIrq( );
 8010186:	f7fb f80b 	bl	800b1a0 <BoardEnableIrq>
}
 801018a:	3710      	adds	r7, #16
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	200008ac 	.word	0x200008ac

08010194 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8010194:	b480      	push	{r7}
 8010196:	b087      	sub	sp, #28
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
    uint32_t aggregatedTimestamp = 0;      // hold the sum of timestamps
 801019e:	2300      	movs	r3, #0
 80101a0:	617b      	str	r3, [r7, #20]
    uint32_t aggregatedTimestampNext = 0;  // hold the sum of timestamps up to the next event
 80101a2:	2300      	movs	r3, #0
 80101a4:	613b      	str	r3, [r7, #16]

    TimerEvent_t* prev = TimerListHead;
 80101a6:	4b31      	ldr	r3, [pc, #196]	; (801026c <TimerInsertTimer+0xd8>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* cur = TimerListHead->Next;
 80101ac:	4b2f      	ldr	r3, [pc, #188]	; (801026c <TimerInsertTimer+0xd8>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	691b      	ldr	r3, [r3, #16]
 80101b2:	60bb      	str	r3, [r7, #8]

    if( cur == NULL )
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d10c      	bne.n	80101d4 <TimerInsertTimer+0x40>
    { // obj comes just after the head
        obj->Timestamp -= remainingTime;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	1ad2      	subs	r2, r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	601a      	str	r2, [r3, #0]
        prev->Next = obj;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	611a      	str	r2, [r3, #16]
        obj->Next = NULL;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	611a      	str	r2, [r3, #16]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
                }
            }
        }
    }
}
 80101d2:	e045      	b.n	8010260 <TimerInsertTimer+0xcc>
        aggregatedTimestamp = remainingTime;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	617b      	str	r3, [r7, #20]
        aggregatedTimestampNext = remainingTime + cur->Timestamp;
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	683a      	ldr	r2, [r7, #0]
 80101de:	4413      	add	r3, r2
 80101e0:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 80101e2:	e039      	b.n	8010258 <TimerInsertTimer+0xc4>
            if( aggregatedTimestampNext > obj->Timestamp )
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	693a      	ldr	r2, [r7, #16]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d916      	bls.n	801021c <TimerInsertTimer+0x88>
                obj->Timestamp -= aggregatedTimestamp;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	1ad2      	subs	r2, r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	601a      	str	r2, [r3, #0]
                if( cur != NULL )
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d006      	beq.n	801020e <TimerInsertTimer+0x7a>
                    cur->Timestamp -= obj->Timestamp;
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	1ad2      	subs	r2, r2, r3
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	601a      	str	r2, [r3, #0]
                prev->Next = obj;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	611a      	str	r2, [r3, #16]
                obj->Next = cur;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	611a      	str	r2, [r3, #16]
                break;
 801021a:	e021      	b.n	8010260 <TimerInsertTimer+0xcc>
                prev = cur;
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	60fb      	str	r3, [r7, #12]
                cur = cur->Next;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	60bb      	str	r3, [r7, #8]
                if( cur == NULL )
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d10e      	bne.n	801024a <TimerInsertTimer+0xb6>
                    aggregatedTimestamp = aggregatedTimestampNext;
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	617b      	str	r3, [r7, #20]
                    obj->Timestamp -= aggregatedTimestamp;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	1ad2      	subs	r2, r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	601a      	str	r2, [r3, #0]
                    prev->Next = obj;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	611a      	str	r2, [r3, #16]
                    obj->Next = NULL;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	611a      	str	r2, [r3, #16]
                    break;
 8010248:	e00a      	b.n	8010260 <TimerInsertTimer+0xcc>
                    aggregatedTimestamp = aggregatedTimestampNext;
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	617b      	str	r3, [r7, #20]
                    aggregatedTimestampNext = aggregatedTimestampNext + cur->Timestamp;
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	4413      	add	r3, r2
 8010256:	613b      	str	r3, [r7, #16]
        while( prev != NULL )
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1c2      	bne.n	80101e4 <TimerInsertTimer+0x50>
}
 801025e:	e7ff      	b.n	8010260 <TimerInsertTimer+0xcc>
 8010260:	bf00      	nop
 8010262:	371c      	adds	r7, #28
 8010264:	46bd      	mov	sp, r7
 8010266:	bc80      	pop	{r7}
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	200008ac 	.word	0x200008ac

08010270 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj, uint32_t remainingTime )
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
    TimerEvent_t* cur = TimerListHead;
 801027a:	4b10      	ldr	r3, [pc, #64]	; (80102bc <TimerInsertNewHeadTimer+0x4c>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d008      	beq.n	8010298 <TimerInsertNewHeadTimer+0x28>
    {
        cur->Timestamp = remainingTime - obj->Timestamp;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	1ad2      	subs	r2, r2, r3
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	601a      	str	r2, [r3, #0]
        cur->IsRunning = false;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	721a      	strb	r2, [r3, #8]
    }

    obj->Next = cur;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	611a      	str	r2, [r3, #16]
    obj->IsRunning = true;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2201      	movs	r2, #1
 80102a2:	721a      	strb	r2, [r3, #8]
    TimerListHead = obj;
 80102a4:	4a05      	ldr	r2, [pc, #20]	; (80102bc <TimerInsertNewHeadTimer+0x4c>)
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 80102aa:	4b04      	ldr	r3, [pc, #16]	; (80102bc <TimerInsertNewHeadTimer+0x4c>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f000 f946 	bl	8010540 <TimerSetTimeout>
}
 80102b4:	bf00      	nop
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	200008ac 	.word	0x200008ac

080102c0 <TimerIrqHandler>:

void TimerIrqHandler( void )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
    uint32_t elapsedTime = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	607b      	str	r3, [r7, #4]

    // Early out when TimerListHead is null to prevent null pointer
    if ( TimerListHead == NULL )
 80102ca:	4b28      	ldr	r3, [pc, #160]	; (801036c <TimerIrqHandler+0xac>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d048      	beq.n	8010364 <TimerIrqHandler+0xa4>
    {
        return;
    }

    elapsedTime = TimerGetValue( );
 80102d2:	f000 f91b 	bl	801050c <TimerGetValue>
 80102d6:	6078      	str	r0, [r7, #4]

    if( elapsedTime >= TimerListHead->Timestamp )
 80102d8:	4b24      	ldr	r3, [pc, #144]	; (801036c <TimerIrqHandler+0xac>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d304      	bcc.n	80102ee <TimerIrqHandler+0x2e>
    {
        TimerListHead->Timestamp = 0;
 80102e4:	4b21      	ldr	r3, [pc, #132]	; (801036c <TimerIrqHandler+0xac>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2200      	movs	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]
 80102ec:	e007      	b.n	80102fe <TimerIrqHandler+0x3e>
    }
    else
    {
        TimerListHead->Timestamp -= elapsedTime;
 80102ee:	4b1f      	ldr	r3, [pc, #124]	; (801036c <TimerIrqHandler+0xac>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	6819      	ldr	r1, [r3, #0]
 80102f4:	4b1d      	ldr	r3, [pc, #116]	; (801036c <TimerIrqHandler+0xac>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	687a      	ldr	r2, [r7, #4]
 80102fa:	1a8a      	subs	r2, r1, r2
 80102fc:	601a      	str	r2, [r3, #0]
    }

    TimerListHead->IsRunning = false;
 80102fe:	4b1b      	ldr	r3, [pc, #108]	; (801036c <TimerIrqHandler+0xac>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	2200      	movs	r2, #0
 8010304:	721a      	strb	r2, [r3, #8]

    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8010306:	e00e      	b.n	8010326 <TimerIrqHandler+0x66>
    {
        TimerEvent_t* elapsedTimer = TimerListHead;
 8010308:	4b18      	ldr	r3, [pc, #96]	; (801036c <TimerIrqHandler+0xac>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	603b      	str	r3, [r7, #0]
        TimerListHead = TimerListHead->Next;
 801030e:	4b17      	ldr	r3, [pc, #92]	; (801036c <TimerIrqHandler+0xac>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	4a15      	ldr	r2, [pc, #84]	; (801036c <TimerIrqHandler+0xac>)
 8010316:	6013      	str	r3, [r2, #0]

        if( elapsedTimer->Callback != NULL )
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d002      	beq.n	8010326 <TimerIrqHandler+0x66>
        {
            elapsedTimer->Callback( );
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp == 0 ) )
 8010326:	4b11      	ldr	r3, [pc, #68]	; (801036c <TimerIrqHandler+0xac>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d004      	beq.n	8010338 <TimerIrqHandler+0x78>
 801032e:	4b0f      	ldr	r3, [pc, #60]	; (801036c <TimerIrqHandler+0xac>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d0e7      	beq.n	8010308 <TimerIrqHandler+0x48>
        }
    }

    // start the next TimerListHead if it exists
    if( TimerListHead != NULL )
 8010338:	4b0c      	ldr	r3, [pc, #48]	; (801036c <TimerIrqHandler+0xac>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d012      	beq.n	8010366 <TimerIrqHandler+0xa6>
    {
        if( TimerListHead->IsRunning != true )
 8010340:	4b0a      	ldr	r3, [pc, #40]	; (801036c <TimerIrqHandler+0xac>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	7a1b      	ldrb	r3, [r3, #8]
 8010346:	f083 0301 	eor.w	r3, r3, #1
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00a      	beq.n	8010366 <TimerIrqHandler+0xa6>
        {
            TimerListHead->IsRunning = true;
 8010350:	4b06      	ldr	r3, [pc, #24]	; (801036c <TimerIrqHandler+0xac>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	2201      	movs	r2, #1
 8010356:	721a      	strb	r2, [r3, #8]
            TimerSetTimeout( TimerListHead );
 8010358:	4b04      	ldr	r3, [pc, #16]	; (801036c <TimerIrqHandler+0xac>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4618      	mov	r0, r3
 801035e:	f000 f8ef 	bl	8010540 <TimerSetTimeout>
 8010362:	e000      	b.n	8010366 <TimerIrqHandler+0xa6>
        return;
 8010364:	bf00      	nop
        }
    }
}
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	200008ac 	.word	0x200008ac

08010370 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b086      	sub	sp, #24
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
    BoardDisableIrq( );
 8010378:	f7fa ff02 	bl	800b180 <BoardDisableIrq>

    uint32_t elapsedTime = 0;
 801037c:	2300      	movs	r3, #0
 801037e:	617b      	str	r3, [r7, #20]
    uint32_t remainingTime = 0;
 8010380:	2300      	movs	r3, #0
 8010382:	60bb      	str	r3, [r7, #8]

    TimerEvent_t* prev = TimerListHead;
 8010384:	4b49      	ldr	r3, [pc, #292]	; (80104ac <TimerStop+0x13c>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	613b      	str	r3, [r7, #16]
    TimerEvent_t* cur = TimerListHead;
 801038a:	4b48      	ldr	r3, [pc, #288]	; (80104ac <TimerStop+0x13c>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	60fb      	str	r3, [r7, #12]

    // List is empty or the Obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8010390:	4b46      	ldr	r3, [pc, #280]	; (80104ac <TimerStop+0x13c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <TimerStop+0x2e>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d102      	bne.n	80103a4 <TimerStop+0x34>
    {
        BoardEnableIrq( );
 801039e:	f7fa feff 	bl	800b1a0 <BoardEnableIrq>
        return;
 80103a2:	e080      	b.n	80104a6 <TimerStop+0x136>
    }

    if( TimerListHead == obj ) // Stop the Head
 80103a4:	4b41      	ldr	r3, [pc, #260]	; (80104ac <TimerStop+0x13c>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d152      	bne.n	8010454 <TimerStop+0xe4>
    {
        if( TimerListHead->IsRunning == true ) // The head is already running
 80103ae:	4b3f      	ldr	r3, [pc, #252]	; (80104ac <TimerStop+0x13c>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	7a1b      	ldrb	r3, [r3, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d033      	beq.n	8010420 <TimerStop+0xb0>
        {
            elapsedTime = TimerGetValue( );
 80103b8:	f000 f8a8 	bl	801050c <TimerGetValue>
 80103bc:	6178      	str	r0, [r7, #20]
            if( elapsedTime > obj->Timestamp )
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d902      	bls.n	80103ce <TimerStop+0x5e>
            {
                elapsedTime = obj->Timestamp;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	617b      	str	r3, [r7, #20]
            }

            remainingTime = obj->Timestamp - elapsedTime;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	1ad3      	subs	r3, r2, r3
 80103d6:	60bb      	str	r3, [r7, #8]

            if( TimerListHead->Next != NULL )
 80103d8:	4b34      	ldr	r3, [pc, #208]	; (80104ac <TimerStop+0x13c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d01a      	beq.n	8010418 <TimerStop+0xa8>
            {
                TimerListHead->IsRunning = false;
 80103e2:	4b32      	ldr	r3, [pc, #200]	; (80104ac <TimerStop+0x13c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2200      	movs	r2, #0
 80103e8:	721a      	strb	r2, [r3, #8]
                TimerListHead = TimerListHead->Next;
 80103ea:	4b30      	ldr	r3, [pc, #192]	; (80104ac <TimerStop+0x13c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	691b      	ldr	r3, [r3, #16]
 80103f0:	4a2e      	ldr	r2, [pc, #184]	; (80104ac <TimerStop+0x13c>)
 80103f2:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 80103f4:	4b2d      	ldr	r3, [pc, #180]	; (80104ac <TimerStop+0x13c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	6819      	ldr	r1, [r3, #0]
 80103fa:	4b2c      	ldr	r3, [pc, #176]	; (80104ac <TimerStop+0x13c>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	440a      	add	r2, r1
 8010402:	601a      	str	r2, [r3, #0]
                TimerListHead->IsRunning = true;
 8010404:	4b29      	ldr	r3, [pc, #164]	; (80104ac <TimerStop+0x13c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2201      	movs	r2, #1
 801040a:	721a      	strb	r2, [r3, #8]
                TimerSetTimeout( TimerListHead );
 801040c:	4b27      	ldr	r3, [pc, #156]	; (80104ac <TimerStop+0x13c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f000 f895 	bl	8010540 <TimerSetTimeout>
 8010416:	e044      	b.n	80104a2 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 8010418:	4b24      	ldr	r3, [pc, #144]	; (80104ac <TimerStop+0x13c>)
 801041a:	2200      	movs	r2, #0
 801041c:	601a      	str	r2, [r3, #0]
 801041e:	e040      	b.n	80104a2 <TimerStop+0x132>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8010420:	4b22      	ldr	r3, [pc, #136]	; (80104ac <TimerStop+0x13c>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	691b      	ldr	r3, [r3, #16]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d010      	beq.n	801044c <TimerStop+0xdc>
            {
                remainingTime = obj->Timestamp;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	60bb      	str	r3, [r7, #8]
                TimerListHead = TimerListHead->Next;
 8010430:	4b1e      	ldr	r3, [pc, #120]	; (80104ac <TimerStop+0x13c>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	4a1d      	ldr	r2, [pc, #116]	; (80104ac <TimerStop+0x13c>)
 8010438:	6013      	str	r3, [r2, #0]
                TimerListHead->Timestamp += remainingTime;
 801043a:	4b1c      	ldr	r3, [pc, #112]	; (80104ac <TimerStop+0x13c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	6819      	ldr	r1, [r3, #0]
 8010440:	4b1a      	ldr	r3, [pc, #104]	; (80104ac <TimerStop+0x13c>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	440a      	add	r2, r1
 8010448:	601a      	str	r2, [r3, #0]
 801044a:	e02a      	b.n	80104a2 <TimerStop+0x132>
            }
            else
            {
                TimerListHead = NULL;
 801044c:	4b17      	ldr	r3, [pc, #92]	; (80104ac <TimerStop+0x13c>)
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]
 8010452:	e026      	b.n	80104a2 <TimerStop+0x132>
            }
        }
    }
    else // Stop an object within the list
    {
        remainingTime = obj->Timestamp;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	60bb      	str	r3, [r7, #8]

        while( cur != NULL )
 801045a:	e01f      	b.n	801049c <TimerStop+0x12c>
        {
            if( cur == obj )
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	429a      	cmp	r2, r3
 8010462:	d116      	bne.n	8010492 <TimerStop+0x122>
            {
                if( cur->Next != NULL )
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	691b      	ldr	r3, [r3, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00c      	beq.n	8010486 <TimerStop+0x116>
                {
                    cur = cur->Next;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	691b      	ldr	r3, [r3, #16]
 8010470:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	611a      	str	r2, [r3, #16]
                    cur->Timestamp += remainingTime;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	441a      	add	r2, r3
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	601a      	str	r2, [r3, #0]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8010484:	e00d      	b.n	80104a2 <TimerStop+0x132>
                    cur = NULL;
 8010486:	2300      	movs	r3, #0
 8010488:	60fb      	str	r3, [r7, #12]
                    prev->Next = cur;
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	611a      	str	r2, [r3, #16]
                break;
 8010490:	e007      	b.n	80104a2 <TimerStop+0x132>
            }
            else
            {
                prev = cur;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	613b      	str	r3, [r7, #16]
                cur = cur->Next;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	60fb      	str	r3, [r7, #12]
        while( cur != NULL )
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1dc      	bne.n	801045c <TimerStop+0xec>
            }
        }
    }
    BoardEnableIrq( );
 80104a2:	f7fa fe7d 	bl	800b1a0 <BoardEnableIrq>
}
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	200008ac 	.word	0x200008ac

080104b0 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80104b8:	4b0a      	ldr	r3, [pc, #40]	; (80104e4 <TimerExists+0x34>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 80104be:	e008      	b.n	80104d2 <TimerExists+0x22>
    {
        if( cur == obj )
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d101      	bne.n	80104cc <TimerExists+0x1c>
        {
            return true;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e006      	b.n	80104da <TimerExists+0x2a>
        }
        cur = cur->Next;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	691b      	ldr	r3, [r3, #16]
 80104d0:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d1f3      	bne.n	80104c0 <TimerExists+0x10>
    }
    return false;
 80104d8:	2300      	movs	r3, #0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3714      	adds	r7, #20
 80104de:	46bd      	mov	sp, r7
 80104e0:	bc80      	pop	{r7}
 80104e2:	4770      	bx	lr
 80104e4:	200008ac 	.word	0x200008ac

080104e8 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
    TimerStop( obj );
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f7ff ff3c 	bl	8010370 <TimerStop>
    obj->Timestamp = value;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = value;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	683a      	ldr	r2, [r7, #0]
 8010502:	605a      	str	r2, [r3, #4]
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <TimerGetValue>:

TimerTime_t TimerGetValue( void )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	af00      	add	r7, sp, #0
    return RtcGetElapsedAlarmTime( );
 8010510:	f7fc fa6a 	bl	800c9e8 <RtcGetElapsedAlarmTime>
 8010514:	4603      	mov	r3, r0
}
 8010516:	4618      	mov	r0, r3
 8010518:	bd80      	pop	{r7, pc}

0801051a <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 801051a:	b580      	push	{r7, lr}
 801051c:	af00      	add	r7, sp, #0
    return RtcGetTimerValue( );
 801051e:	f7fc fa5b 	bl	800c9d8 <RtcGetTimerValue>
 8010522:	4603      	mov	r3, r0
}
 8010524:	4618      	mov	r0, r3
 8010526:	bd80      	pop	{r7, pc}

08010528 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t savedTime )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
    return RtcComputeElapsedTime( savedTime );
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7fc fa7b 	bl	800ca2c <RtcComputeElapsedTime>
 8010536:	4603      	mov	r3, r0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3708      	adds	r7, #8
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}

08010540 <TimerSetTimeout>:
{
    return RtcComputeFutureEventTime( eventInFuture );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
    HasLoopedThroughMain = 0;
 8010548:	4b09      	ldr	r3, [pc, #36]	; (8010570 <TimerSetTimeout+0x30>)
 801054a:	2200      	movs	r2, #0
 801054c:	701a      	strb	r2, [r3, #0]
    obj->Timestamp = RtcGetAdjustedTimeoutValue( obj->Timestamp );
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	4618      	mov	r0, r3
 8010554:	f7fc fa0a 	bl	800c96c <RtcGetAdjustedTimeoutValue>
 8010558:	4602      	mov	r2, r0
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	601a      	str	r2, [r3, #0]
    RtcSetTimeout( obj->Timestamp );
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4618      	mov	r0, r3
 8010564:	f7fc f9f6 	bl	800c954 <RtcSetTimeout>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	200008a8 	.word	0x200008a8

08010574 <TimerLowPowerHandler>:

void TimerLowPowerHandler( void )
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsRunning == true ) )
 8010578:	4b11      	ldr	r3, [pc, #68]	; (80105c0 <TimerLowPowerHandler+0x4c>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d01d      	beq.n	80105bc <TimerLowPowerHandler+0x48>
 8010580:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <TimerLowPowerHandler+0x4c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	7a1b      	ldrb	r3, [r3, #8]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d018      	beq.n	80105bc <TimerLowPowerHandler+0x48>
    {
        if( HasLoopedThroughMain < 5 )
 801058a:	4b0e      	ldr	r3, [pc, #56]	; (80105c4 <TimerLowPowerHandler+0x50>)
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	b2db      	uxtb	r3, r3
 8010590:	2b04      	cmp	r3, #4
 8010592:	d807      	bhi.n	80105a4 <TimerLowPowerHandler+0x30>
        {
            HasLoopedThroughMain++;
 8010594:	4b0b      	ldr	r3, [pc, #44]	; (80105c4 <TimerLowPowerHandler+0x50>)
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	b2db      	uxtb	r3, r3
 801059a:	3301      	adds	r3, #1
 801059c:	b2da      	uxtb	r2, r3
 801059e:	4b09      	ldr	r3, [pc, #36]	; (80105c4 <TimerLowPowerHandler+0x50>)
 80105a0:	701a      	strb	r2, [r3, #0]
                PruefeInterruptStatus();
#endif
            }
        }
    }
}
 80105a2:	e00b      	b.n	80105bc <TimerLowPowerHandler+0x48>
            HasLoopedThroughMain = 0;
 80105a4:	4b07      	ldr	r3, [pc, #28]	; (80105c4 <TimerLowPowerHandler+0x50>)
 80105a6:	2200      	movs	r2, #0
 80105a8:	701a      	strb	r2, [r3, #0]
            if( GetBoardPowerSource( ) == BATTERY_POWER )
 80105aa:	f7fb f8cd 	bl	800b748 <GetBoardPowerSource>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d103      	bne.n	80105bc <TimerLowPowerHandler+0x48>
                RtcEnterLowPowerStopMode( );
 80105b4:	f7fc fa6e 	bl	800ca94 <RtcEnterLowPowerStopMode>
                PruefeInterruptStatus();
 80105b8:	f7f4 fc62 	bl	8004e80 <PruefeInterruptStatus>
}
 80105bc:	bf00      	nop
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	200008ac 	.word	0x200008ac
 80105c4:	200008a8 	.word	0x200008a8

080105c8 <HAL_UART_TxCpltCallback>:
    BoardEnableIrq( );
    return 1;
}

void HAL_UART_TxCpltCallback( UART_HandleTypeDef *handle )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b082      	sub	sp, #8
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]

    if( IsFifoEmpty( &Uart1.FifoTx ) == false )
 80105d0:	4810      	ldr	r0, [pc, #64]	; (8010614 <HAL_UART_TxCpltCallback+0x4c>)
 80105d2:	f7fb fb58 	bl	800bc86 <IsFifoEmpty>
 80105d6:	4603      	mov	r3, r0
 80105d8:	f083 0301 	eor.w	r3, r3, #1
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d00b      	beq.n	80105fa <HAL_UART_TxCpltCallback+0x32>
    {
        TxData = FifoPop( &Uart1.FifoTx );
 80105e2:	480c      	ldr	r0, [pc, #48]	; (8010614 <HAL_UART_TxCpltCallback+0x4c>)
 80105e4:	f7fb fb30 	bl	800bc48 <FifoPop>
 80105e8:	4603      	mov	r3, r0
 80105ea:	461a      	mov	r2, r3
 80105ec:	4b0a      	ldr	r3, [pc, #40]	; (8010618 <HAL_UART_TxCpltCallback+0x50>)
 80105ee:	701a      	strb	r2, [r3, #0]
        //  Write one byte to the transmit data register
        HAL_UART_Transmit_IT( &UartHandle, &TxData, 1 );
 80105f0:	2201      	movs	r2, #1
 80105f2:	4909      	ldr	r1, [pc, #36]	; (8010618 <HAL_UART_TxCpltCallback+0x50>)
 80105f4:	4809      	ldr	r0, [pc, #36]	; (801061c <HAL_UART_TxCpltCallback+0x54>)
 80105f6:	f7f3 fe2a 	bl	800424e <HAL_UART_Transmit_IT>
    }

    if( Uart1.IrqNotify != NULL )
 80105fa:	4b09      	ldr	r3, [pc, #36]	; (8010620 <HAL_UART_TxCpltCallback+0x58>)
 80105fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d003      	beq.n	801060a <HAL_UART_TxCpltCallback+0x42>
    {
        Uart1.IrqNotify( UART_NOTIFY_TX );
 8010602:	4b07      	ldr	r3, [pc, #28]	; (8010620 <HAL_UART_TxCpltCallback+0x58>)
 8010604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010606:	2000      	movs	r0, #0
 8010608:	4798      	blx	r3
    }
}
 801060a:	bf00      	nop
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	20000bcc 	.word	0x20000bcc
 8010618:	200008b1 	.word	0x200008b1
 801061c:	20001394 	.word	0x20001394
 8010620:	20000bb0 	.word	0x20000bb0

08010624 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback( UART_HandleTypeDef *handle )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
    if( IsFifoFull( &Uart1.FifoRx ) == false )
 801062c:	480f      	ldr	r0, [pc, #60]	; (801066c <HAL_UART_RxCpltCallback+0x48>)
 801062e:	f7fb fb3c 	bl	800bcaa <IsFifoFull>
 8010632:	4603      	mov	r3, r0
 8010634:	f083 0301 	eor.w	r3, r3, #1
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b00      	cmp	r3, #0
 801063c:	d005      	beq.n	801064a <HAL_UART_RxCpltCallback+0x26>
    {
        // Read one byte from the receive data register
        FifoPush( &Uart1.FifoRx, RxData );
 801063e:	4b0c      	ldr	r3, [pc, #48]	; (8010670 <HAL_UART_RxCpltCallback+0x4c>)
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	4619      	mov	r1, r3
 8010644:	4809      	ldr	r0, [pc, #36]	; (801066c <HAL_UART_RxCpltCallback+0x48>)
 8010646:	f7fb fae4 	bl	800bc12 <FifoPush>
    }

    if( Uart1.IrqNotify != NULL )
 801064a:	4b0a      	ldr	r3, [pc, #40]	; (8010674 <HAL_UART_RxCpltCallback+0x50>)
 801064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801064e:	2b00      	cmp	r3, #0
 8010650:	d003      	beq.n	801065a <HAL_UART_RxCpltCallback+0x36>
    {
        Uart1.IrqNotify( UART_NOTIFY_RX );
 8010652:	4b08      	ldr	r3, [pc, #32]	; (8010674 <HAL_UART_RxCpltCallback+0x50>)
 8010654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010656:	2001      	movs	r0, #1
 8010658:	4798      	blx	r3
    }

    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 801065a:	2201      	movs	r2, #1
 801065c:	4904      	ldr	r1, [pc, #16]	; (8010670 <HAL_UART_RxCpltCallback+0x4c>)
 801065e:	4806      	ldr	r0, [pc, #24]	; (8010678 <HAL_UART_RxCpltCallback+0x54>)
 8010660:	f7f3 fe39 	bl	80042d6 <HAL_UART_Receive_IT>
}
 8010664:	bf00      	nop
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	20000bd8 	.word	0x20000bd8
 8010670:	200008b0 	.word	0x200008b0
 8010674:	20000bb0 	.word	0x20000bb0
 8010678:	20001394 	.word	0x20001394

0801067c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback( UART_HandleTypeDef *handle )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT( &UartHandle, &RxData, 1 );
 8010684:	2201      	movs	r2, #1
 8010686:	4904      	ldr	r1, [pc, #16]	; (8010698 <HAL_UART_ErrorCallback+0x1c>)
 8010688:	4804      	ldr	r0, [pc, #16]	; (801069c <HAL_UART_ErrorCallback+0x20>)
 801068a:	f7f3 fe24 	bl	80042d6 <HAL_UART_Receive_IT>
}
 801068e:	bf00      	nop
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	200008b0 	.word	0x200008b0
 801069c:	20001394 	.word	0x20001394

080106a0 <DebugPrintf>:
        return 0; // OK
    }
}

void  DebugPrintf (char  *p_fmt, ...)
{
 80106a0:	b40f      	push	{r0, r1, r2, r3}
 80106a2:	b480      	push	{r7}
 80106a4:	b0b5      	sub	sp, #212	; 0xd4
 80106a6:	af00      	add	r7, sp, #0
        //CDC_Transmit_FS((uint8_t*) str, len);
        UartPutBuffer(&Uart1, (uint8_t *)str, len);
    }


}
 80106a8:	bf00      	nop
 80106aa:	37d4      	adds	r7, #212	; 0xd4
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bc80      	pop	{r7}
 80106b0:	b004      	add	sp, #16
 80106b2:	4770      	bx	lr

080106b4 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 80106b4:	b480      	push	{r7}
 80106b6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80106b8:	4b0d      	ldr	r3, [pc, #52]	; (80106f0 <rand1+0x3c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4a0d      	ldr	r2, [pc, #52]	; (80106f4 <rand1+0x40>)
 80106be:	fb02 f303 	mul.w	r3, r2, r3
 80106c2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80106c6:	3339      	adds	r3, #57	; 0x39
 80106c8:	4a09      	ldr	r2, [pc, #36]	; (80106f0 <rand1+0x3c>)
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	4b08      	ldr	r3, [pc, #32]	; (80106f0 <rand1+0x3c>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	2303      	movs	r3, #3
 80106d2:	fba3 1302 	umull	r1, r3, r3, r2
 80106d6:	1ad1      	subs	r1, r2, r3
 80106d8:	0849      	lsrs	r1, r1, #1
 80106da:	440b      	add	r3, r1
 80106dc:	0f99      	lsrs	r1, r3, #30
 80106de:	460b      	mov	r3, r1
 80106e0:	07db      	lsls	r3, r3, #31
 80106e2:	1a5b      	subs	r3, r3, r1
 80106e4:	1ad1      	subs	r1, r2, r3
 80106e6:	460b      	mov	r3, r1
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bc80      	pop	{r7}
 80106ee:	4770      	bx	lr
 80106f0:	200000a0 	.word	0x200000a0
 80106f4:	41c64e6d 	.word	0x41c64e6d

080106f8 <srand1>:

void srand1( uint32_t seed )
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
    next = seed;
 8010700:	4a03      	ldr	r2, [pc, #12]	; (8010710 <srand1+0x18>)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6013      	str	r3, [r2, #0]
}
 8010706:	bf00      	nop
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	bc80      	pop	{r7}
 801070e:	4770      	bx	lr
 8010710:	200000a0 	.word	0x200000a0

08010714 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b082      	sub	sp, #8
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801071e:	f7ff ffc9 	bl	80106b4 <rand1>
 8010722:	4602      	mov	r2, r0
 8010724:	6839      	ldr	r1, [r7, #0]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	1acb      	subs	r3, r1, r3
 801072a:	3301      	adds	r3, #1
 801072c:	fb92 f1f3 	sdiv	r1, r2, r3
 8010730:	fb03 f301 	mul.w	r3, r3, r1
 8010734:	1ad2      	subs	r2, r2, r3
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4413      	add	r3, r2
}
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010742:	b480      	push	{r7}
 8010744:	b085      	sub	sp, #20
 8010746:	af00      	add	r7, sp, #0
 8010748:	60f8      	str	r0, [r7, #12]
 801074a:	60b9      	str	r1, [r7, #8]
 801074c:	4613      	mov	r3, r2
 801074e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8010750:	e007      	b.n	8010762 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8010752:	68ba      	ldr	r2, [r7, #8]
 8010754:	1c53      	adds	r3, r2, #1
 8010756:	60bb      	str	r3, [r7, #8]
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	1c59      	adds	r1, r3, #1
 801075c:	60f9      	str	r1, [r7, #12]
 801075e:	7812      	ldrb	r2, [r2, #0]
 8010760:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	1e5a      	subs	r2, r3, #1
 8010766:	80fa      	strh	r2, [r7, #6]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1f2      	bne.n	8010752 <memcpy1+0x10>
    }
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	bc80      	pop	{r7}
 8010776:	4770      	bx	lr

08010778 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8010778:	b480      	push	{r7}
 801077a:	b085      	sub	sp, #20
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	4613      	mov	r3, r2
 8010784:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8010786:	88fb      	ldrh	r3, [r7, #6]
 8010788:	3b01      	subs	r3, #1
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	4413      	add	r3, r2
 801078e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8010790:	e007      	b.n	80107a2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8010792:	68ba      	ldr	r2, [r7, #8]
 8010794:	1c53      	adds	r3, r2, #1
 8010796:	60bb      	str	r3, [r7, #8]
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	1e59      	subs	r1, r3, #1
 801079c:	60f9      	str	r1, [r7, #12]
 801079e:	7812      	ldrb	r2, [r2, #0]
 80107a0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80107a2:	88fb      	ldrh	r3, [r7, #6]
 80107a4:	1e5a      	subs	r2, r3, #1
 80107a6:	80fa      	strh	r2, [r7, #6]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1f2      	bne.n	8010792 <memcpyr+0x1a>
    }
}
 80107ac:	bf00      	nop
 80107ae:	bf00      	nop
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bc80      	pop	{r7}
 80107b6:	4770      	bx	lr

080107b8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	460b      	mov	r3, r1
 80107c2:	70fb      	strb	r3, [r7, #3]
 80107c4:	4613      	mov	r3, r2
 80107c6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80107c8:	e004      	b.n	80107d4 <memset1+0x1c>
    {
        *dst++ = value;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	1c5a      	adds	r2, r3, #1
 80107ce:	607a      	str	r2, [r7, #4]
 80107d0:	78fa      	ldrb	r2, [r7, #3]
 80107d2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80107d4:	883b      	ldrh	r3, [r7, #0]
 80107d6:	1e5a      	subs	r2, r3, #1
 80107d8:	803a      	strh	r2, [r7, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1f5      	bne.n	80107ca <memset1+0x12>
    }
}
 80107de:	bf00      	nop
 80107e0:	bf00      	nop
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bc80      	pop	{r7}
 80107e8:	4770      	bx	lr

080107ea <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2200      	movs	r2, #0
 8010816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2200      	movs	r2, #0
 801081e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->flags = 0;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	GNSS->lon = 0;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2200      	movs	r2, #0
 801083e:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->lat = 0;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->height = 0;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hMSL = 0;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	GNSS->hAcc = 0;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->vAcc = 0;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->gSpeed = 0;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	GNSS->headMot = 0;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2200      	movs	r2, #0
 8010874:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8010878:	bf00      	nop
 801087a:	370c      	adds	r7, #12
 801087c:	46bd      	mov	sp, r7
 801087e:	bc80      	pop	{r7}
 8010880:	4770      	bx	lr
	...

08010884 <GNSS_LoadConfig>:
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
}


void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	221c      	movs	r2, #28
 8010892:	4932      	ldr	r1, [pc, #200]	; (801095c <GNSS_LoadConfig+0xd8>)
 8010894:	4618      	mov	r0, r3
 8010896:	f7f3 fd4f 	bl	8004338 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 801089a:	bf00      	nop
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7f3 ff73 	bl	800478c <HAL_UART_GetState>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b20      	cmp	r3, #32
 80108aa:	d1f7      	bne.n	801089c <GNSS_LoadConfig+0x18>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6818      	ldr	r0, [r3, #0]
 80108b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108b4:	2264      	movs	r2, #100	; 0x64
 80108b6:	492a      	ldr	r1, [pc, #168]	; (8010960 <GNSS_LoadConfig+0xdc>)
 80108b8:	f7f3 fc27 	bl	800410a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 80108bc:	bf00      	nop
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7f3 ff62 	bl	800478c <HAL_UART_GetState>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b20      	cmp	r3, #32
 80108cc:	d1f7      	bne.n	80108be <GNSS_LoadConfig+0x3a>
	{

	}


	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	221c      	movs	r2, #28
 80108d4:	4923      	ldr	r1, [pc, #140]	; (8010964 <GNSS_LoadConfig+0xe0>)
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7f3 fd2e 	bl	8004338 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 80108dc:	bf00      	nop
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7f3 ff52 	bl	800478c <HAL_UART_GetState>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b20      	cmp	r3, #32
 80108ec:	d1f7      	bne.n	80108de <GNSS_LoadConfig+0x5a>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6818      	ldr	r0, [r3, #0]
 80108f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108f6:	2264      	movs	r2, #100	; 0x64
 80108f8:	4919      	ldr	r1, [pc, #100]	; (8010960 <GNSS_LoadConfig+0xdc>)
 80108fa:	f7f3 fc06 	bl	800410a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 80108fe:	bf00      	nop
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	f7f3 ff41 	bl	800478c <HAL_UART_GetState>
 801090a:	4603      	mov	r3, r0
 801090c:	2b20      	cmp	r3, #32
 801090e:	d1f7      	bne.n	8010900 <GNSS_LoadConfig+0x7c>
	{

	}


	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	222c      	movs	r2, #44	; 0x2c
 8010916:	4914      	ldr	r1, [pc, #80]	; (8010968 <GNSS_LoadConfig+0xe4>)
 8010918:	4618      	mov	r0, r3
 801091a:	f7f3 fd0d 	bl	8004338 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 801091e:	bf00      	nop
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4618      	mov	r0, r3
 8010926:	f7f3 ff31 	bl	800478c <HAL_UART_GetState>
 801092a:	4603      	mov	r3, r0
 801092c:	2b20      	cmp	r3, #32
 801092e:	d1f7      	bne.n	8010920 <GNSS_LoadConfig+0x9c>
	{

	}

	HAL_UART_Receive(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100, 1000);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6818      	ldr	r0, [r3, #0]
 8010934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010938:	2264      	movs	r2, #100	; 0x64
 801093a:	4909      	ldr	r1, [pc, #36]	; (8010960 <GNSS_LoadConfig+0xdc>)
 801093c:	f7f3 fbe5 	bl	800410a <HAL_UART_Receive>

	while(HAL_UART_GetState(GNSS->huart)!=HAL_UART_STATE_READY)
 8010940:	bf00      	nop
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4618      	mov	r0, r3
 8010948:	f7f3 ff20 	bl	800478c <HAL_UART_GetState>
 801094c:	4603      	mov	r3, r0
 801094e:	2b20      	cmp	r3, #32
 8010950:	d1f7      	bne.n	8010942 <GNSS_LoadConfig+0xbe>
	{

	}
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	08012934 	.word	0x08012934
 8010960:	200010a4 	.word	0x200010a4
 8010964:	08012950 	.word	0x08012950
 8010968:	0801296c 	.word	0x0801296c

0801096c <GetNextLowerTxDr>:
 */
static uint16_t ChannelsDefaultMask[CHANNELS_MASK_SIZE];

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	4603      	mov	r3, r0
 8010974:	460a      	mov	r2, r1
 8010976:	71fb      	strb	r3, [r7, #7]
 8010978:	4613      	mov	r3, r2
 801097a:	71bb      	strb	r3, [r7, #6]
    uint8_t nextLowerDr = 0;
 801097c:	2300      	movs	r3, #0
 801097e:	73fb      	strb	r3, [r7, #15]

    if( dr == minDr )
 8010980:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8010984:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010988:	429a      	cmp	r2, r3
 801098a:	d102      	bne.n	8010992 <GetNextLowerTxDr+0x26>
    {
        nextLowerDr = minDr;
 801098c:	79bb      	ldrb	r3, [r7, #6]
 801098e:	73fb      	strb	r3, [r7, #15]
 8010990:	e002      	b.n	8010998 <GetNextLowerTxDr+0x2c>
    }
    else
    {
        nextLowerDr = dr - 1;
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	3b01      	subs	r3, #1
 8010996:	73fb      	strb	r3, [r7, #15]
    }
    return nextLowerDr;
 8010998:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bc80      	pop	{r7}
 80109a4:	4770      	bx	lr
	...

080109a8 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 80109b0:	4a09      	ldr	r2, [pc, #36]	; (80109d8 <GetBandwidth+0x30>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109b8:	4a08      	ldr	r2, [pc, #32]	; (80109dc <GetBandwidth+0x34>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d004      	beq.n	80109c8 <GetBandwidth+0x20>
 80109be:	4a08      	ldr	r2, [pc, #32]	; (80109e0 <GetBandwidth+0x38>)
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d003      	beq.n	80109cc <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80109c4:	2300      	movs	r3, #0
 80109c6:	e002      	b.n	80109ce <GetBandwidth+0x26>
        case 250000:
            return 1;
 80109c8:	2301      	movs	r3, #1
 80109ca:	e000      	b.n	80109ce <GetBandwidth+0x26>
        case 500000:
            return 2;
 80109cc:	2302      	movs	r3, #2
    }
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bc80      	pop	{r7}
 80109d6:	4770      	bx	lr
 80109d8:	080129a0 	.word	0x080129a0
 80109dc:	0003d090 	.word	0x0003d090
 80109e0:	0007a120 	.word	0x0007a120

080109e4 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	603b      	str	r3, [r7, #0]
 80109ec:	4603      	mov	r3, r0
 80109ee:	71fb      	strb	r3, [r7, #7]
 80109f0:	460b      	mov	r3, r1
 80109f2:	71bb      	strb	r3, [r7, #6]
 80109f4:	4613      	mov	r3, r2
 80109f6:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80109f8:	79fb      	ldrb	r3, [r7, #7]
 80109fa:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80109fc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8010a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a04:	4293      	cmp	r3, r2
 8010a06:	bfb8      	it	lt
 8010a08:	4613      	movlt	r3, r2
 8010a0a:	73fb      	strb	r3, [r7, #15]

    return txPowerResult;
 8010a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3714      	adds	r7, #20
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bc80      	pop	{r7}
 8010a18:	4770      	bx	lr
	...

08010a1c <VerifyTxFreq>:

static bool VerifyTxFreq( uint32_t freq, uint8_t *band )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010a26:	4b2d      	ldr	r3, [pc, #180]	; (8010adc <VerifyTxFreq+0xc0>)
 8010a28:	6a1b      	ldr	r3, [r3, #32]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	4798      	blx	r3
 8010a2e:	4603      	mov	r3, r0
 8010a30:	f083 0301 	eor.w	r3, r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d001      	beq.n	8010a3e <VerifyTxFreq+0x22>
    {
        return false;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	e04a      	b.n	8010ad4 <VerifyTxFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4a27      	ldr	r2, [pc, #156]	; (8010ae0 <VerifyTxFreq+0xc4>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d307      	bcc.n	8010a56 <VerifyTxFreq+0x3a>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4a26      	ldr	r2, [pc, #152]	; (8010ae4 <VerifyTxFreq+0xc8>)
 8010a4a:	4293      	cmp	r3, r2
 8010a4c:	d803      	bhi.n	8010a56 <VerifyTxFreq+0x3a>
    {
        *band = 2;
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	2202      	movs	r2, #2
 8010a52:	701a      	strb	r2, [r3, #0]
 8010a54:	e03d      	b.n	8010ad2 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4a22      	ldr	r2, [pc, #136]	; (8010ae4 <VerifyTxFreq+0xc8>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d907      	bls.n	8010a6e <VerifyTxFreq+0x52>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4a21      	ldr	r2, [pc, #132]	; (8010ae8 <VerifyTxFreq+0xcc>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d803      	bhi.n	8010a6e <VerifyTxFreq+0x52>
    {
        *band = 0;
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	701a      	strb	r2, [r3, #0]
 8010a6c:	e031      	b.n	8010ad2 <VerifyTxFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4a1d      	ldr	r2, [pc, #116]	; (8010ae8 <VerifyTxFreq+0xcc>)
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d907      	bls.n	8010a86 <VerifyTxFreq+0x6a>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	4a1c      	ldr	r2, [pc, #112]	; (8010aec <VerifyTxFreq+0xd0>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d803      	bhi.n	8010a86 <VerifyTxFreq+0x6a>
    {
        *band = 1;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	2201      	movs	r2, #1
 8010a82:	701a      	strb	r2, [r3, #0]
 8010a84:	e025      	b.n	8010ad2 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4a19      	ldr	r2, [pc, #100]	; (8010af0 <VerifyTxFreq+0xd4>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d907      	bls.n	8010a9e <VerifyTxFreq+0x82>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4a18      	ldr	r2, [pc, #96]	; (8010af4 <VerifyTxFreq+0xd8>)
 8010a92:	4293      	cmp	r3, r2
 8010a94:	d803      	bhi.n	8010a9e <VerifyTxFreq+0x82>
    {
        *band = 2;
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	2202      	movs	r2, #2
 8010a9a:	701a      	strb	r2, [r3, #0]
 8010a9c:	e019      	b.n	8010ad2 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a15      	ldr	r2, [pc, #84]	; (8010af8 <VerifyTxFreq+0xdc>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d907      	bls.n	8010ab6 <VerifyTxFreq+0x9a>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4a14      	ldr	r2, [pc, #80]	; (8010afc <VerifyTxFreq+0xe0>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d803      	bhi.n	8010ab6 <VerifyTxFreq+0x9a>
    {
        *band = 3;
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	2203      	movs	r2, #3
 8010ab2:	701a      	strb	r2, [r3, #0]
 8010ab4:	e00d      	b.n	8010ad2 <VerifyTxFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4a11      	ldr	r2, [pc, #68]	; (8010b00 <VerifyTxFreq+0xe4>)
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d307      	bcc.n	8010ace <VerifyTxFreq+0xb2>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4a10      	ldr	r2, [pc, #64]	; (8010b04 <VerifyTxFreq+0xe8>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d803      	bhi.n	8010ace <VerifyTxFreq+0xb2>
    {
        *band = 4;
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	2204      	movs	r2, #4
 8010aca:	701a      	strb	r2, [r3, #0]
 8010acc:	e001      	b.n	8010ad2 <VerifyTxFreq+0xb6>
    }
    else
    {
        return false;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	e000      	b.n	8010ad4 <VerifyTxFreq+0xb8>
    }
    return true;
 8010ad2:	2301      	movs	r3, #1
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}
 8010adc:	080127d0 	.word	0x080127d0
 8010ae0:	337055c0 	.word	0x337055c0
 8010ae4:	338eda3f 	.word	0x338eda3f
 8010ae8:	33bca100 	.word	0x33bca100
 8010aec:	33c5c8c0 	.word	0x33c5c8c0
 8010af0:	33c74f5f 	.word	0x33c74f5f
 8010af4:	33cef080 	.word	0x33cef080
 8010af8:	33d1fdbf 	.word	0x33d1fdbf
 8010afc:	33d5ce50 	.word	0x33d5ce50
 8010b00:	33d691a0 	.word	0x33d691a0
 8010b04:	33db2580 	.word	0x33db2580

08010b08 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b086      	sub	sp, #24
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60ba      	str	r2, [r7, #8]
 8010b10:	607b      	str	r3, [r7, #4]
 8010b12:	4603      	mov	r3, r0
 8010b14:	73fb      	strb	r3, [r7, #15]
 8010b16:	460b      	mov	r3, r1
 8010b18:	73bb      	strb	r3, [r7, #14]
    uint8_t nbEnabledChannels = 0;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	75fb      	strb	r3, [r7, #23]
    uint8_t delayTransmission = 0;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8010b22:	2300      	movs	r3, #0
 8010b24:	757b      	strb	r3, [r7, #21]
 8010b26:	2300      	movs	r3, #0
 8010b28:	753b      	strb	r3, [r7, #20]
 8010b2a:	e085      	b.n	8010c38 <CountNbOfEnabledChannels+0x130>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	74fb      	strb	r3, [r7, #19]
 8010b30:	e079      	b.n	8010c26 <CountNbOfEnabledChannels+0x11e>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 8010b32:	7d3b      	ldrb	r3, [r7, #20]
 8010b34:	005b      	lsls	r3, r3, #1
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	4413      	add	r3, r2
 8010b3a:	881b      	ldrh	r3, [r3, #0]
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	7cfb      	ldrb	r3, [r7, #19]
 8010b40:	fa42 f303 	asr.w	r3, r2, r3
 8010b44:	f003 0301 	and.w	r3, r3, #1
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d069      	beq.n	8010c20 <CountNbOfEnabledChannels+0x118>
            {
                if( channels[i + j].Frequency == 0 )
 8010b4c:	7d7a      	ldrb	r2, [r7, #21]
 8010b4e:	7cfb      	ldrb	r3, [r7, #19]
 8010b50:	4413      	add	r3, r2
 8010b52:	461a      	mov	r2, r3
 8010b54:	4613      	mov	r3, r2
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	009b      	lsls	r3, r3, #2
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d056      	beq.n	8010c16 <CountNbOfEnabledChannels+0x10e>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8010b68:	7bfb      	ldrb	r3, [r7, #15]
 8010b6a:	f083 0301 	eor.w	r3, r3, #1
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d007      	beq.n	8010b84 <CountNbOfEnabledChannels+0x7c>
                {
                    if( ( EU868_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8010b74:	7cfb      	ldrb	r3, [r7, #19]
 8010b76:	2207      	movs	r2, #7
 8010b78:	fa42 f303 	asr.w	r3, r2, r3
 8010b7c:	f003 0301 	and.w	r3, r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d04a      	beq.n	8010c1a <CountNbOfEnabledChannels+0x112>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010b84:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8010b88:	7d7a      	ldrb	r2, [r7, #21]
 8010b8a:	7cfb      	ldrb	r3, [r7, #19]
 8010b8c:	4413      	add	r3, r2
 8010b8e:	461a      	mov	r2, r3
 8010b90:	4613      	mov	r3, r2
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	4413      	add	r3, r2
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	461a      	mov	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	7a1b      	ldrb	r3, [r3, #8]
 8010ba0:	f343 0303 	sbfx	r3, r3, #0, #4
 8010ba4:	b25b      	sxtb	r3, r3
 8010ba6:	4619      	mov	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8010ba8:	7d7a      	ldrb	r2, [r7, #21]
 8010baa:	7cfb      	ldrb	r3, [r7, #19]
 8010bac:	4413      	add	r3, r2
 8010bae:	461a      	mov	r2, r3
 8010bb0:	4613      	mov	r3, r2
 8010bb2:	005b      	lsls	r3, r3, #1
 8010bb4:	4413      	add	r3, r2
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	461a      	mov	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	7a1b      	ldrb	r3, [r3, #8]
 8010bc0:	f343 1303 	sbfx	r3, r3, #4, #4
 8010bc4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	f7f9 faa1 	bl	800a10e <RegionCommonValueInRange>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d025      	beq.n	8010c1e <CountNbOfEnabledChannels+0x116>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8010bd2:	7d7a      	ldrb	r2, [r7, #21]
 8010bd4:	7cfb      	ldrb	r3, [r7, #19]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	461a      	mov	r2, r3
 8010bda:	4613      	mov	r3, r2
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	4413      	add	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	461a      	mov	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	4413      	add	r3, r2
 8010be8:	7a5b      	ldrb	r3, [r3, #9]
 8010bea:	011b      	lsls	r3, r3, #4
 8010bec:	6a3a      	ldr	r2, [r7, #32]
 8010bee:	4413      	add	r3, r2
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d003      	beq.n	8010bfe <CountNbOfEnabledChannels+0xf6>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8010bf6:	7dbb      	ldrb	r3, [r7, #22]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	75bb      	strb	r3, [r7, #22]
                    continue;
 8010bfc:	e010      	b.n	8010c20 <CountNbOfEnabledChannels+0x118>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 8010bfe:	7dfb      	ldrb	r3, [r7, #23]
 8010c00:	1c5a      	adds	r2, r3, #1
 8010c02:	75fa      	strb	r2, [r7, #23]
 8010c04:	461a      	mov	r2, r3
 8010c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c08:	4413      	add	r3, r2
 8010c0a:	7d79      	ldrb	r1, [r7, #21]
 8010c0c:	7cfa      	ldrb	r2, [r7, #19]
 8010c0e:	440a      	add	r2, r1
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	701a      	strb	r2, [r3, #0]
 8010c14:	e004      	b.n	8010c20 <CountNbOfEnabledChannels+0x118>
                    continue;
 8010c16:	bf00      	nop
 8010c18:	e002      	b.n	8010c20 <CountNbOfEnabledChannels+0x118>
                        continue;
 8010c1a:	bf00      	nop
 8010c1c:	e000      	b.n	8010c20 <CountNbOfEnabledChannels+0x118>
                    continue;
 8010c1e:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8010c20:	7cfb      	ldrb	r3, [r7, #19]
 8010c22:	3301      	adds	r3, #1
 8010c24:	74fb      	strb	r3, [r7, #19]
 8010c26:	7cfb      	ldrb	r3, [r7, #19]
 8010c28:	2b0f      	cmp	r3, #15
 8010c2a:	d982      	bls.n	8010b32 <CountNbOfEnabledChannels+0x2a>
    for( uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++ )
 8010c2c:	7d7b      	ldrb	r3, [r7, #21]
 8010c2e:	3310      	adds	r3, #16
 8010c30:	757b      	strb	r3, [r7, #21]
 8010c32:	7d3b      	ldrb	r3, [r7, #20]
 8010c34:	3301      	adds	r3, #1
 8010c36:	753b      	strb	r3, [r7, #20]
 8010c38:	7d7b      	ldrb	r3, [r7, #21]
 8010c3a:	2b0f      	cmp	r3, #15
 8010c3c:	f67f af76 	bls.w	8010b2c <CountNbOfEnabledChannels+0x24>
            }
        }
    }

    *delayTx = delayTransmission;
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	7dba      	ldrb	r2, [r7, #22]
 8010c44:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8010c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3718      	adds	r7, #24
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8010c58:	2300      	movs	r3, #0
 8010c5a:	60bb      	str	r3, [r7, #8]

    switch( getPhy->Attribute )
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	2b32      	cmp	r3, #50	; 0x32
 8010c62:	f200 80e6 	bhi.w	8010e32 <RegionEU868GetPhyParam+0x1e2>
 8010c66:	a201      	add	r2, pc, #4	; (adr r2, 8010c6c <RegionEU868GetPhyParam+0x1c>)
 8010c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c6c:	08010d39 	.word	0x08010d39
 8010c70:	08010d3f 	.word	0x08010d3f
 8010c74:	08010e33 	.word	0x08010e33
 8010c78:	08010d45 	.word	0x08010d45
 8010c7c:	08010e33 	.word	0x08010e33
 8010c80:	08010d4b 	.word	0x08010d4b
 8010c84:	08010e33 	.word	0x08010e33
 8010c88:	08010e33 	.word	0x08010e33
 8010c8c:	08010d65 	.word	0x08010d65
 8010c90:	08010d6b 	.word	0x08010d6b
 8010c94:	08010d7b 	.word	0x08010d7b
 8010c98:	08010d8b 	.word	0x08010d8b
 8010c9c:	08010d91 	.word	0x08010d91
 8010ca0:	08010d99 	.word	0x08010d99
 8010ca4:	08010da1 	.word	0x08010da1
 8010ca8:	08010da9 	.word	0x08010da9
 8010cac:	08010db1 	.word	0x08010db1
 8010cb0:	08010db9 	.word	0x08010db9
 8010cb4:	08010dc1 	.word	0x08010dc1
 8010cb8:	08010dd5 	.word	0x08010dd5
 8010cbc:	08010ddb 	.word	0x08010ddb
 8010cc0:	08010de1 	.word	0x08010de1
 8010cc4:	08010de7 	.word	0x08010de7
 8010cc8:	08010ded 	.word	0x08010ded
 8010ccc:	08010df3 	.word	0x08010df3
 8010cd0:	08010df9 	.word	0x08010df9
 8010cd4:	08010dff 	.word	0x08010dff
 8010cd8:	08010dff 	.word	0x08010dff
 8010cdc:	08010e05 	.word	0x08010e05
 8010ce0:	08010e0d 	.word	0x08010e0d
 8010ce4:	08010d51 	.word	0x08010d51
 8010ce8:	08010e33 	.word	0x08010e33
 8010cec:	08010e33 	.word	0x08010e33
 8010cf0:	08010e33 	.word	0x08010e33
 8010cf4:	08010e33 	.word	0x08010e33
 8010cf8:	08010e33 	.word	0x08010e33
 8010cfc:	08010e33 	.word	0x08010e33
 8010d00:	08010e33 	.word	0x08010e33
 8010d04:	08010e33 	.word	0x08010e33
 8010d08:	08010e33 	.word	0x08010e33
 8010d0c:	08010e33 	.word	0x08010e33
 8010d10:	08010e33 	.word	0x08010e33
 8010d14:	08010e33 	.word	0x08010e33
 8010d18:	08010e33 	.word	0x08010e33
 8010d1c:	08010e19 	.word	0x08010e19
 8010d20:	08010e1f 	.word	0x08010e1f
 8010d24:	08010e2d 	.word	0x08010e2d
 8010d28:	08010e33 	.word	0x08010e33
 8010d2c:	08010e33 	.word	0x08010e33
 8010d30:	08010e13 	.word	0x08010e13
 8010d34:	08010e13 	.word	0x08010e13
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	60bb      	str	r3, [r7, #8]
            break;
 8010d3c:	e07a      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	60bb      	str	r3, [r7, #8]
            break;
 8010d42:	e077      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_TX_DR:
        {
            phyParam.Value = EU868_TX_MAX_DATARATE;
 8010d44:	2307      	movs	r3, #7
 8010d46:	60bb      	str	r3, [r7, #8]
            break;
 8010d48:	e074      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8010d4a:	2305      	movs	r3, #5
 8010d4c:	60bb      	str	r3, [r7, #8]
            break;
 8010d4e:	e071      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010d56:	2100      	movs	r1, #0
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7ff fe07 	bl	801096c <GetNextLowerTxDr>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	60bb      	str	r3, [r7, #8]
            break;
 8010d62:	e067      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8010d64:	2300      	movs	r3, #0
 8010d66:	60bb      	str	r3, [r7, #8]
            break;
 8010d68:	e064      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010d70:	461a      	mov	r2, r3
 8010d72:	4b34      	ldr	r3, [pc, #208]	; (8010e44 <RegionEU868GetPhyParam+0x1f4>)
 8010d74:	5c9b      	ldrb	r3, [r3, r2]
 8010d76:	60bb      	str	r3, [r7, #8]
            break;
 8010d78:	e05c      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010d80:	461a      	mov	r2, r3
 8010d82:	4b31      	ldr	r3, [pc, #196]	; (8010e48 <RegionEU868GetPhyParam+0x1f8>)
 8010d84:	5c9b      	ldrb	r3, [r3, r2]
 8010d86:	60bb      	str	r3, [r7, #8]
            break;
 8010d88:	e054      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	60bb      	str	r3, [r7, #8]
            break;
 8010d8e:	e051      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8010d90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010d94:	60bb      	str	r3, [r7, #8]
            break;
 8010d96:	e04d      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8010d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010d9c:	60bb      	str	r3, [r7, #8]
            break;
 8010d9e:	e049      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8010da0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010da4:	60bb      	str	r3, [r7, #8]
            break;
 8010da6:	e045      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8010da8:	f241 3388 	movw	r3, #5000	; 0x1388
 8010dac:	60bb      	str	r3, [r7, #8]
            break;
 8010dae:	e041      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8010db0:	f241 7370 	movw	r3, #6000	; 0x1770
 8010db4:	60bb      	str	r3, [r7, #8]
            break;
 8010db6:	e03d      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8010db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dbc:	60bb      	str	r3, [r7, #8]
            break;
 8010dbe:	e039      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8010dc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010dc4:	4821      	ldr	r0, [pc, #132]	; (8010e4c <RegionEU868GetPhyParam+0x1fc>)
 8010dc6:	f7ff fca5 	bl	8010714 <randr>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010dd0:	60bb      	str	r3, [r7, #8]
            break;
 8010dd2:	e02f      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	60bb      	str	r3, [r7, #8]
            break;
 8010dd8:	e02c      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8010dda:	4b1d      	ldr	r3, [pc, #116]	; (8010e50 <RegionEU868GetPhyParam+0x200>)
 8010ddc:	60bb      	str	r3, [r7, #8]
            break;
 8010dde:	e029      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8010de0:	2300      	movs	r3, #0
 8010de2:	60bb      	str	r3, [r7, #8]
            break;
 8010de4:	e026      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = ChannelsMask;
 8010de6:	4b1b      	ldr	r3, [pc, #108]	; (8010e54 <RegionEU868GetPhyParam+0x204>)
 8010de8:	60bb      	str	r3, [r7, #8]
            break;
 8010dea:	e023      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = ChannelsDefaultMask;
 8010dec:	4b1a      	ldr	r3, [pc, #104]	; (8010e58 <RegionEU868GetPhyParam+0x208>)
 8010dee:	60bb      	str	r3, [r7, #8]
            break;
 8010df0:	e020      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8010df2:	2310      	movs	r3, #16
 8010df4:	60bb      	str	r3, [r7, #8]
            break;
 8010df6:	e01d      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = Channels;
 8010df8:	4b18      	ldr	r3, [pc, #96]	; (8010e5c <RegionEU868GetPhyParam+0x20c>)
 8010dfa:	60bb      	str	r3, [r7, #8]
            break;
 8010dfc:	e01a      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	60bb      	str	r3, [r7, #8]
            break;
 8010e02:	e017      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8010e04:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8010e08:	60bb      	str	r3, [r7, #8]
            break;
 8010e0a:	e013      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8010e0c:	4b14      	ldr	r3, [pc, #80]	; (8010e60 <RegionEU868GetPhyParam+0x210>)
 8010e0e:	60bb      	str	r3, [r7, #8]
            break;
 8010e10:	e010      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_NB_JOIN_TRIALS:
        case PHY_DEF_NB_JOIN_TRIALS:
        {
            phyParam.Value = EU868_DEFAULT_PHY_NB_JOIN_TRIALS;
 8010e12:	2330      	movs	r3, #48	; 0x30
 8010e14:	60bb      	str	r3, [r7, #8]
            break;
 8010e16:	e00d      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8010e18:	4b0d      	ldr	r3, [pc, #52]	; (8010e50 <RegionEU868GetPhyParam+0x200>)
 8010e1a:	60bb      	str	r3, [r7, #8]
            break;
 8010e1c:	e00a      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8010e1e:	2311      	movs	r3, #17
 8010e20:	723b      	strb	r3, [r7, #8]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8010e22:	2302      	movs	r3, #2
 8010e24:	727b      	strb	r3, [r7, #9]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8010e26:	2300      	movs	r3, #0
 8010e28:	72bb      	strb	r3, [r7, #10]
            break;
 8010e2a:	e003      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	60bb      	str	r3, [r7, #8]
            break;
 8010e30:	e000      	b.n	8010e34 <RegionEU868GetPhyParam+0x1e4>
        }
        default:
        {
            break;
 8010e32:	bf00      	nop
        }
    }

    return phyParam;
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	60fb      	str	r3, [r7, #12]
 8010e38:	2300      	movs	r3, #0
 8010e3a:	68fb      	ldr	r3, [r7, #12]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	080129c0 	.word	0x080129c0
 8010e48:	080129c8 	.word	0x080129c8
 8010e4c:	fffffc18 	.word	0xfffffc18
 8010e50:	33d3e608 	.word	0x33d3e608
 8010e54:	20000974 	.word	0x20000974
 8010e58:	20000978 	.word	0x20000978
 8010e5c:	200008b4 	.word	0x200008b4
 8010e60:	4009999a 	.word	0x4009999a

08010e64 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	7858      	ldrb	r0, [r3, #1]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	4619      	mov	r1, r3
 8010e76:	4a0a      	ldr	r2, [pc, #40]	; (8010ea0 <RegionEU868SetBandTxDone+0x3c>)
 8010e78:	460b      	mov	r3, r1
 8010e7a:	005b      	lsls	r3, r3, #1
 8010e7c:	440b      	add	r3, r1
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	4413      	add	r3, r2
 8010e82:	3309      	adds	r3, #9
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	011b      	lsls	r3, r3, #4
 8010e88:	4a06      	ldr	r2, [pc, #24]	; (8010ea4 <RegionEU868SetBandTxDone+0x40>)
 8010e8a:	1899      	adds	r1, r3, r2
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	461a      	mov	r2, r3
 8010e92:	f7f9 f9df 	bl	800a254 <RegionCommonSetBandTxDone>
}
 8010e96:	bf00      	nop
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	200008b4 	.word	0x200008b4
 8010ea4:	200000a4 	.word	0x200000a4

08010ea8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitType_t type )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08c      	sub	sp, #48	; 0x30
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	4603      	mov	r3, r0
 8010eb0:	71fb      	strb	r3, [r7, #7]
    switch( type )
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d002      	beq.n	8010ebe <RegionEU868InitDefaults+0x16>
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d01a      	beq.n	8010ef2 <RegionEU868InitDefaults+0x4a>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8010ebc:	e022      	b.n	8010f04 <RegionEU868InitDefaults+0x5c>
            Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010ebe:	4b13      	ldr	r3, [pc, #76]	; (8010f0c <RegionEU868InitDefaults+0x64>)
 8010ec0:	4a13      	ldr	r2, [pc, #76]	; (8010f10 <RegionEU868InitDefaults+0x68>)
 8010ec2:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8010ec8:	4b10      	ldr	r3, [pc, #64]	; (8010f0c <RegionEU868InitDefaults+0x64>)
 8010eca:	4a12      	ldr	r2, [pc, #72]	; (8010f14 <RegionEU868InitDefaults+0x6c>)
 8010ecc:	330c      	adds	r3, #12
 8010ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8010ed4:	4b0d      	ldr	r3, [pc, #52]	; (8010f0c <RegionEU868InitDefaults+0x64>)
 8010ed6:	4a10      	ldr	r2, [pc, #64]	; (8010f18 <RegionEU868InitDefaults+0x70>)
 8010ed8:	3318      	adds	r3, #24
 8010eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8010edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <RegionEU868InitDefaults+0x74>)
 8010ee2:	2207      	movs	r2, #7
 8010ee4:	801a      	strh	r2, [r3, #0]
            RegionCommonChanMaskCopy( ChannelsMask, ChannelsDefaultMask, 1 );
 8010ee6:	2201      	movs	r2, #1
 8010ee8:	490c      	ldr	r1, [pc, #48]	; (8010f1c <RegionEU868InitDefaults+0x74>)
 8010eea:	480d      	ldr	r0, [pc, #52]	; (8010f20 <RegionEU868InitDefaults+0x78>)
 8010eec:	f7f9 f98c 	bl	800a208 <RegionCommonChanMaskCopy>
            break;
 8010ef0:	e008      	b.n	8010f04 <RegionEU868InitDefaults+0x5c>
            ChannelsMask[0] |= ChannelsDefaultMask[0];
 8010ef2:	4b0b      	ldr	r3, [pc, #44]	; (8010f20 <RegionEU868InitDefaults+0x78>)
 8010ef4:	881a      	ldrh	r2, [r3, #0]
 8010ef6:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <RegionEU868InitDefaults+0x74>)
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	4313      	orrs	r3, r2
 8010efc:	b29a      	uxth	r2, r3
 8010efe:	4b08      	ldr	r3, [pc, #32]	; (8010f20 <RegionEU868InitDefaults+0x78>)
 8010f00:	801a      	strh	r2, [r3, #0]
            break;
 8010f02:	bf00      	nop
        }
    }
}
 8010f04:	bf00      	nop
 8010f06:	3730      	adds	r7, #48	; 0x30
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	200008b4 	.word	0x200008b4
 8010f10:	08012480 	.word	0x08012480
 8010f14:	0801248c 	.word	0x0801248c
 8010f18:	08012498 	.word	0x08012498
 8010f1c:	20000978 	.word	0x20000978
 8010f20:	20000974 	.word	0x20000974

08010f24 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	70fb      	strb	r3, [r7, #3]
    switch( phyAttribute )
 8010f30:	78fb      	ldrb	r3, [r7, #3]
 8010f32:	3b04      	subs	r3, #4
 8010f34:	2b2d      	cmp	r3, #45	; 0x2d
 8010f36:	f200 80a3 	bhi.w	8011080 <RegionEU868Verify+0x15c>
 8010f3a:	a201      	add	r2, pc, #4	; (adr r2, 8010f40 <RegionEU868Verify+0x1c>)
 8010f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f40:	08010ff9 	.word	0x08010ff9
 8010f44:	08011017 	.word	0x08011017
 8010f48:	08011035 	.word	0x08011035
 8010f4c:	08011053 	.word	0x08011053
 8010f50:	08011053 	.word	0x08011053
 8010f54:	08011081 	.word	0x08011081
 8010f58:	08011081 	.word	0x08011081
 8010f5c:	08011071 	.word	0x08011071
 8010f60:	08011081 	.word	0x08011081
 8010f64:	08011081 	.word	0x08011081
 8010f68:	08011081 	.word	0x08011081
 8010f6c:	08011081 	.word	0x08011081
 8010f70:	08011081 	.word	0x08011081
 8010f74:	08011081 	.word	0x08011081
 8010f78:	08011081 	.word	0x08011081
 8010f7c:	08011081 	.word	0x08011081
 8010f80:	08011081 	.word	0x08011081
 8010f84:	08011081 	.word	0x08011081
 8010f88:	08011081 	.word	0x08011081
 8010f8c:	08011081 	.word	0x08011081
 8010f90:	08011081 	.word	0x08011081
 8010f94:	08011081 	.word	0x08011081
 8010f98:	08011081 	.word	0x08011081
 8010f9c:	08011081 	.word	0x08011081
 8010fa0:	08011081 	.word	0x08011081
 8010fa4:	08011081 	.word	0x08011081
 8010fa8:	08011081 	.word	0x08011081
 8010fac:	08011081 	.word	0x08011081
 8010fb0:	08011081 	.word	0x08011081
 8010fb4:	08011081 	.word	0x08011081
 8010fb8:	08011081 	.word	0x08011081
 8010fbc:	08011081 	.word	0x08011081
 8010fc0:	08011081 	.word	0x08011081
 8010fc4:	08011081 	.word	0x08011081
 8010fc8:	08011081 	.word	0x08011081
 8010fcc:	08011081 	.word	0x08011081
 8010fd0:	08011081 	.word	0x08011081
 8010fd4:	08011081 	.word	0x08011081
 8010fd8:	08011081 	.word	0x08011081
 8010fdc:	08011081 	.word	0x08011081
 8010fe0:	08011081 	.word	0x08011081
 8010fe4:	08011081 	.word	0x08011081
 8010fe8:	08011081 	.word	0x08011081
 8010fec:	08011081 	.word	0x08011081
 8010ff0:	08011081 	.word	0x08011081
 8010ff4:	08011075 	.word	0x08011075
    {
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8010ffe:	2207      	movs	r2, #7
 8011000:	2100      	movs	r1, #0
 8011002:	4618      	mov	r0, r3
 8011004:	f7f9 f883 	bl	800a10e <RegionCommonValueInRange>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	bf14      	ite	ne
 801100e:	2301      	movne	r3, #1
 8011010:	2300      	moveq	r3, #0
 8011012:	b2db      	uxtb	r3, r3
 8011014:	e038      	b.n	8011088 <RegionEU868Verify+0x164>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f993 3000 	ldrsb.w	r3, [r3]
 801101c:	2205      	movs	r2, #5
 801101e:	2100      	movs	r1, #0
 8011020:	4618      	mov	r0, r3
 8011022:	f7f9 f874 	bl	800a10e <RegionCommonValueInRange>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	bf14      	ite	ne
 801102c:	2301      	movne	r3, #1
 801102e:	2300      	moveq	r3, #0
 8011030:	b2db      	uxtb	r3, r3
 8011032:	e029      	b.n	8011088 <RegionEU868Verify+0x164>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f993 3000 	ldrsb.w	r3, [r3]
 801103a:	2207      	movs	r2, #7
 801103c:	2100      	movs	r1, #0
 801103e:	4618      	mov	r0, r3
 8011040:	f7f9 f865 	bl	800a10e <RegionCommonValueInRange>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	bf14      	ite	ne
 801104a:	2301      	movne	r3, #1
 801104c:	2300      	moveq	r3, #0
 801104e:	b2db      	uxtb	r3, r3
 8011050:	e01a      	b.n	8011088 <RegionEU868Verify+0x164>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f993 3000 	ldrsb.w	r3, [r3]
 8011058:	2207      	movs	r2, #7
 801105a:	2100      	movs	r1, #0
 801105c:	4618      	mov	r0, r3
 801105e:	f7f9 f856 	bl	800a10e <RegionCommonValueInRange>
 8011062:	4603      	mov	r3, r0
 8011064:	2b00      	cmp	r3, #0
 8011066:	bf14      	ite	ne
 8011068:	2301      	movne	r3, #1
 801106a:	2300      	moveq	r3, #0
 801106c:	b2db      	uxtb	r3, r3
 801106e:	e00b      	b.n	8011088 <RegionEU868Verify+0x164>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8011070:	2301      	movs	r3, #1
 8011072:	e009      	b.n	8011088 <RegionEU868Verify+0x164>
        }
        case PHY_NB_JOIN_TRIALS:
        {
            if( verify->NbJoinTrials < EU868_DEFAULT_PHY_NB_JOIN_TRIALS )
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b2f      	cmp	r3, #47	; 0x2f
 801107a:	d803      	bhi.n	8011084 <RegionEU868Verify+0x160>
            {
                return false;
 801107c:	2300      	movs	r3, #0
 801107e:	e003      	b.n	8011088 <RegionEU868Verify+0x164>
            }
            break;
        }
        default:
            return false;
 8011080:	2300      	movs	r3, #0
 8011082:	e001      	b.n	8011088 <RegionEU868Verify+0x164>
            break;
 8011084:	bf00      	nop
    }
    return true;
 8011086:	2301      	movs	r3, #1
}
 8011088:	4618      	mov	r0, r3
 801108a:	3708      	adds	r7, #8
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b08a      	sub	sp, #40	; 0x28
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8011098:	2350      	movs	r3, #80	; 0x50
 801109a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	791b      	ldrb	r3, [r3, #4]
 80110a2:	2b10      	cmp	r3, #16
 80110a4:	d15c      	bne.n	8011160 <RegionEU868ApplyCFList+0xd0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80110a6:	2300      	movs	r3, #0
 80110a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80110ac:	2303      	movs	r3, #3
 80110ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80110b2:	e050      	b.n	8011156 <RegionEU868ApplyCFList+0xc6>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80110b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110b8:	2b07      	cmp	r3, #7
 80110ba:	d824      	bhi.n	8011106 <RegionEU868ApplyCFList+0x76>
    {
        // Channel frequency
        newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110c4:	4413      	add	r3, r2
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80110ca:	69ba      	ldr	r2, [r7, #24]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6819      	ldr	r1, [r3, #0]
 80110d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110d4:	3301      	adds	r3, #1
 80110d6:	440b      	add	r3, r1
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	021b      	lsls	r3, r3, #8
 80110dc:	4313      	orrs	r3, r2
 80110de:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80110e0:	69ba      	ldr	r2, [r7, #24]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6819      	ldr	r1, [r3, #0]
 80110e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80110ea:	3302      	adds	r3, #2
 80110ec:	440b      	add	r3, r1
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	041b      	lsls	r3, r3, #16
 80110f2:	4313      	orrs	r3, r2
 80110f4:	61bb      	str	r3, [r7, #24]
        newChannel.Frequency *= 100;
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2264      	movs	r2, #100	; 0x64
 80110fa:	fb02 f303 	mul.w	r3, r2, r3
 80110fe:	61bb      	str	r3, [r7, #24]

        // Initialize alternative frequency to 0
        newChannel.Rx1Frequency = 0;
 8011100:	2300      	movs	r3, #0
 8011102:	61fb      	str	r3, [r7, #28]
 8011104:	e006      	b.n	8011114 <RegionEU868ApplyCFList+0x84>
        }
        else
        {
            newChannel.Frequency = 0;
 8011106:	2300      	movs	r3, #0
 8011108:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801110a:	2300      	movs	r3, #0
 801110c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00b      	beq.n	8011132 <RegionEU868ApplyCFList+0xa2>
        {
            channelAdd.NewChannel = &newChannel;
 801111a:	f107 0318 	add.w	r3, r7, #24
 801111e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8011120:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011124:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8011126:	f107 0310 	add.w	r3, r7, #16
 801112a:	4618      	mov	r0, r3
 801112c:	f000 fd8a 	bl	8011c44 <RegionEU868ChannelAdd>
 8011130:	e007      	b.n	8011142 <RegionEU868ApplyCFList+0xb2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8011132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011136:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8011138:	f107 030c 	add.w	r3, r7, #12
 801113c:	4618      	mov	r0, r3
 801113e:	f000 fe47 	bl	8011dd0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011146:	3303      	adds	r3, #3
 8011148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801114c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011150:	3301      	adds	r3, #1
 8011152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011156:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801115a:	2b0f      	cmp	r3, #15
 801115c:	d9aa      	bls.n	80110b4 <RegionEU868ApplyCFList+0x24>
 801115e:	e000      	b.n	8011162 <RegionEU868ApplyCFList+0xd2>
        return;
 8011160:	bf00      	nop
        }
    }
}
 8011162:	3728      	adds	r7, #40	; 0x28
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	791b      	ldrb	r3, [r3, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d002      	beq.n	801117e <RegionEU868ChanMaskSet+0x16>
 8011178:	2b01      	cmp	r3, #1
 801117a:	d008      	beq.n	801118e <RegionEU868ChanMaskSet+0x26>
 801117c:	e00f      	b.n	801119e <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2201      	movs	r2, #1
 8011184:	4619      	mov	r1, r3
 8011186:	4809      	ldr	r0, [pc, #36]	; (80111ac <RegionEU868ChanMaskSet+0x44>)
 8011188:	f7f9 f83e 	bl	800a208 <RegionCommonChanMaskCopy>
            break;
 801118c:	e009      	b.n	80111a2 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2201      	movs	r2, #1
 8011194:	4619      	mov	r1, r3
 8011196:	4806      	ldr	r0, [pc, #24]	; (80111b0 <RegionEU868ChanMaskSet+0x48>)
 8011198:	f7f9 f836 	bl	800a208 <RegionCommonChanMaskCopy>
            break;
 801119c:	e001      	b.n	80111a2 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 801119e:	2300      	movs	r3, #0
 80111a0:	e000      	b.n	80111a4 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80111a2:	2301      	movs	r3, #1
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	20000974 	.word	0x20000974
 80111b0:	20000978 	.word	0x20000978

080111b4 <RegionEU868AdrNext>:

bool RegionEU868AdrNext( AdrNextParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b088      	sub	sp, #32
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
 80111c0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80111c2:	2300      	movs	r3, #0
 80111c4:	77fb      	strb	r3, [r7, #31]
    int8_t datarate = adrNext->Datarate;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	7a1b      	ldrb	r3, [r3, #8]
 80111ca:	77bb      	strb	r3, [r7, #30]
    int8_t txPower = adrNext->TxPower;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	7a5b      	ldrb	r3, [r3, #9]
 80111d0:	777b      	strb	r3, [r7, #29]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	685a      	ldr	r2, [r3, #4]
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	785b      	ldrb	r3, [r3, #1]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d03f      	beq.n	8011262 <RegionEU868AdrNext+0xae>
    {
        if( datarate == EU868_TX_MIN_DATARATE )
 80111e2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d105      	bne.n	80111f6 <RegionEU868AdrNext+0x42>
        {
            *adrAckCounter = 0;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	2200      	movs	r2, #0
 80111ee:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80111f0:	2300      	movs	r3, #0
 80111f2:	77fb      	strb	r3, [r7, #31]
 80111f4:	e035      	b.n	8011262 <RegionEU868AdrNext+0xae>
        }
        else
        {
            if( adrNext->AdrAckCounter >= EU868_ADR_ACK_LIMIT )
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	2b3f      	cmp	r3, #63	; 0x3f
 80111fc:	d904      	bls.n	8011208 <RegionEU868AdrNext+0x54>
            {
                adrAckReq = true;
 80111fe:	2301      	movs	r3, #1
 8011200:	77fb      	strb	r3, [r7, #31]
                txPower = EU868_MAX_TX_POWER;
 8011202:	2300      	movs	r3, #0
 8011204:	777b      	strb	r3, [r7, #29]
 8011206:	e001      	b.n	801120c <RegionEU868AdrNext+0x58>
            }
            else
            {
                adrAckReq = false;
 8011208:	2300      	movs	r3, #0
 801120a:	77fb      	strb	r3, [r7, #31]
            }
            if( adrNext->AdrAckCounter >= ( EU868_ADR_ACK_LIMIT + EU868_ADR_ACK_DELAY ) )
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	2b5f      	cmp	r3, #95	; 0x5f
 8011212:	d926      	bls.n	8011262 <RegionEU868AdrNext+0xae>
            {
                if( ( adrNext->AdrAckCounter % EU868_ADR_ACK_DELAY ) == 1 )
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	f003 031f 	and.w	r3, r3, #31
 801121c:	2b01      	cmp	r3, #1
 801121e:	d120      	bne.n	8011262 <RegionEU868AdrNext+0xae>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011220:	231e      	movs	r3, #30
 8011222:	763b      	strb	r3, [r7, #24]
                    getPhy.Datarate = datarate;
 8011224:	7fbb      	ldrb	r3, [r7, #30]
 8011226:	767b      	strb	r3, [r7, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	7a9b      	ldrb	r3, [r3, #10]
 801122c:	76bb      	strb	r3, [r7, #26]
                    phyParam = RegionEU868GetPhyParam( &getPhy );
 801122e:	f107 0318 	add.w	r3, r7, #24
 8011232:	4618      	mov	r0, r3
 8011234:	f7ff fd0c 	bl	8010c50 <RegionEU868GetPhyParam>
 8011238:	4603      	mov	r3, r0
 801123a:	617b      	str	r3, [r7, #20]
                    datarate = phyParam.Value;
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	77bb      	strb	r3, [r7, #30]

                    if( datarate == EU868_TX_MIN_DATARATE )
 8011240:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d10c      	bne.n	8011262 <RegionEU868AdrNext+0xae>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011248:	2300      	movs	r3, #0
 801124a:	77fb      	strb	r3, [r7, #31]
                        if( adrNext->UpdateChanMask == true )
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d006      	beq.n	8011262 <RegionEU868AdrNext+0xae>
                        {
                            // Re-enable default channels
                            ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011254:	4b08      	ldr	r3, [pc, #32]	; (8011278 <RegionEU868AdrNext+0xc4>)
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	f043 0307 	orr.w	r3, r3, #7
 801125c:	b29a      	uxth	r2, r3
 801125e:	4b06      	ldr	r3, [pc, #24]	; (8011278 <RegionEU868AdrNext+0xc4>)
 8011260:	801a      	strh	r2, [r3, #0]
                }
            }
        }
    }

    *drOut = datarate;
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	7fba      	ldrb	r2, [r7, #30]
 8011266:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	7f7a      	ldrb	r2, [r7, #29]
 801126c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801126e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011270:	4618      	mov	r0, r3
 8011272:	3720      	adds	r7, #32
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	20000974 	.word	0x20000974

0801127c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b08c      	sub	sp, #48	; 0x30
 8011280:	af04      	add	r7, sp, #16
 8011282:	60ba      	str	r2, [r7, #8]
 8011284:	607b      	str	r3, [r7, #4]
 8011286:	4603      	mov	r3, r0
 8011288:	73fb      	strb	r3, [r7, #15]
 801128a:	460b      	mov	r3, r1
 801128c:	73bb      	strb	r3, [r7, #14]
    double tSymbol = 0.0;
 801128e:	f04f 0200 	mov.w	r2, #0
 8011292:	f04f 0300 	mov.w	r3, #0
 8011296:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t radioWakeUpTime;

    rxConfigParams->Datarate = datarate;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	7bfa      	ldrb	r2, [r7, #15]
 801129e:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( datarate );
 80112a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff fb7f 	bl	80109a8 <GetBandwidth>
 80112aa:	4603      	mov	r3, r0
 80112ac:	b2da      	uxtb	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	709a      	strb	r2, [r3, #2]

    if( datarate == DR_7 )
 80112b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112b6:	2b07      	cmp	r3, #7
 80112b8:	d109      	bne.n	80112ce <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[datarate] );
 80112ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112be:	4a17      	ldr	r2, [pc, #92]	; (801131c <RegionEU868ComputeRxWindowParameters+0xa0>)
 80112c0:	5cd3      	ldrb	r3, [r2, r3]
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7f9 f920 	bl	800a508 <RegionCommonComputeSymbolTimeFsk>
 80112c8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80112cc:	e00e      	b.n	80112ec <RegionEU868ComputeRxWindowParameters+0x70>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[datarate], BandwidthsEU868[datarate] );
 80112ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112d2:	4a12      	ldr	r2, [pc, #72]	; (801131c <RegionEU868ComputeRxWindowParameters+0xa0>)
 80112d4:	5cd2      	ldrb	r2, [r2, r3]
 80112d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112da:	4911      	ldr	r1, [pc, #68]	; (8011320 <RegionEU868ComputeRxWindowParameters+0xa4>)
 80112dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80112e0:	4619      	mov	r1, r3
 80112e2:	4610      	mov	r0, r2
 80112e4:	f7f9 f8e6 	bl	800a4b4 <RegionCommonComputeSymbolTimeLoRa>
 80112e8:	e9c7 0106 	strd	r0, r1, [r7, #24]
    }

    radioWakeUpTime = Radio.GetWakeupTime();
 80112ec:	4b0d      	ldr	r3, [pc, #52]	; (8011324 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80112ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112f0:	4798      	blx	r3
 80112f2:	6178      	str	r0, [r7, #20]
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, radioWakeUpTime, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	3308      	adds	r3, #8
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	320c      	adds	r2, #12
 80112fc:	7bb9      	ldrb	r1, [r7, #14]
 80112fe:	9202      	str	r2, [sp, #8]
 8011300:	9301      	str	r3, [sp, #4]
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	460a      	mov	r2, r1
 801130a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801130e:	f7f9 f915 	bl	800a53c <RegionCommonComputeRxWindowParameters>
}
 8011312:	bf00      	nop
 8011314:	3720      	adds	r7, #32
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	08012998 	.word	0x08012998
 8011320:	080129a0 	.word	0x080129a0
 8011324:	080127d0 	.word	0x080127d0

08011328 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011328:	b5b0      	push	{r4, r5, r7, lr}
 801132a:	b090      	sub	sp, #64	; 0x40
 801132c:	af0a      	add	r7, sp, #40	; 0x28
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	785b      	ldrb	r3, [r3, #1]
 8011336:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8011338:	2300      	movs	r3, #0
 801133a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801133c:	2300      	movs	r3, #0
 801133e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011346:	4b55      	ldr	r3, [pc, #340]	; (801149c <RegionEU868RxConfig+0x174>)
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	4798      	blx	r3
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8011352:	2300      	movs	r3, #0
 8011354:	e09d      	b.n	8011492 <RegionEU868RxConfig+0x16a>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	7cdb      	ldrb	r3, [r3, #19]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d123      	bne.n	80113a6 <RegionEU868RxConfig+0x7e>
    {
        // Apply window 1 frequency
        frequency = Channels[rxConfig->Channel].Frequency;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	4619      	mov	r1, r3
 8011364:	4a4e      	ldr	r2, [pc, #312]	; (80114a0 <RegionEU868RxConfig+0x178>)
 8011366:	460b      	mov	r3, r1
 8011368:	005b      	lsls	r3, r3, #1
 801136a:	440b      	add	r3, r1
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	4413      	add	r3, r2
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	4619      	mov	r1, r3
 801137a:	4a49      	ldr	r2, [pc, #292]	; (80114a0 <RegionEU868RxConfig+0x178>)
 801137c:	460b      	mov	r3, r1
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	440b      	add	r3, r1
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	4413      	add	r3, r2
 8011386:	3304      	adds	r3, #4
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00b      	beq.n	80113a6 <RegionEU868RxConfig+0x7e>
        {
            frequency = Channels[rxConfig->Channel].Rx1Frequency;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	4619      	mov	r1, r3
 8011394:	4a42      	ldr	r2, [pc, #264]	; (80114a0 <RegionEU868RxConfig+0x178>)
 8011396:	460b      	mov	r3, r1
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	440b      	add	r3, r1
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4413      	add	r3, r2
 80113a0:	3304      	adds	r3, #4
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80113a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113aa:	4a3e      	ldr	r2, [pc, #248]	; (80114a4 <RegionEU868RxConfig+0x17c>)
 80113ac:	5cd3      	ldrb	r3, [r2, r3]
 80113ae:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80113b0:	4b3a      	ldr	r3, [pc, #232]	; (801149c <RegionEU868RxConfig+0x174>)
 80113b2:	68db      	ldr	r3, [r3, #12]
 80113b4:	6938      	ldr	r0, [r7, #16]
 80113b6:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80113b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113bc:	2b07      	cmp	r3, #7
 80113be:	d128      	bne.n	8011412 <RegionEU868RxConfig+0xea>
    {
        modem = MODEM_FSK;
 80113c0:	2300      	movs	r3, #0
 80113c2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80113c4:	4b35      	ldr	r3, [pc, #212]	; (801149c <RegionEU868RxConfig+0x174>)
 80113c6:	699c      	ldr	r4, [r3, #24]
 80113c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80113cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80113d0:	fb02 f303 	mul.w	r3, r2, r3
 80113d4:	4619      	mov	r1, r3
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	7c92      	ldrb	r2, [r2, #18]
 80113e0:	7df8      	ldrb	r0, [r7, #23]
 80113e2:	9209      	str	r2, [sp, #36]	; 0x24
 80113e4:	2200      	movs	r2, #0
 80113e6:	9208      	str	r2, [sp, #32]
 80113e8:	2200      	movs	r2, #0
 80113ea:	9207      	str	r2, [sp, #28]
 80113ec:	2200      	movs	r2, #0
 80113ee:	9206      	str	r2, [sp, #24]
 80113f0:	2201      	movs	r2, #1
 80113f2:	9205      	str	r2, [sp, #20]
 80113f4:	2200      	movs	r2, #0
 80113f6:	9204      	str	r2, [sp, #16]
 80113f8:	2200      	movs	r2, #0
 80113fa:	9203      	str	r2, [sp, #12]
 80113fc:	9302      	str	r3, [sp, #8]
 80113fe:	2305      	movs	r3, #5
 8011400:	9301      	str	r3, [sp, #4]
 8011402:	4b29      	ldr	r3, [pc, #164]	; (80114a8 <RegionEU868RxConfig+0x180>)
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	2300      	movs	r3, #0
 8011408:	460a      	mov	r2, r1
 801140a:	f24c 3150 	movw	r1, #50000	; 0xc350
 801140e:	47a0      	blx	r4
 8011410:	e024      	b.n	801145c <RegionEU868RxConfig+0x134>
    }
    else
    {
        modem = MODEM_LORA;
 8011412:	2301      	movs	r3, #1
 8011414:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8011416:	4b21      	ldr	r3, [pc, #132]	; (801149c <RegionEU868RxConfig+0x174>)
 8011418:	699c      	ldr	r4, [r3, #24]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	789b      	ldrb	r3, [r3, #2]
 801141e:	461d      	mov	r5, r3
 8011420:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	689b      	ldr	r3, [r3, #8]
 8011428:	b29b      	uxth	r3, r3
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	7c92      	ldrb	r2, [r2, #18]
 801142e:	7df8      	ldrb	r0, [r7, #23]
 8011430:	9209      	str	r2, [sp, #36]	; 0x24
 8011432:	2201      	movs	r2, #1
 8011434:	9208      	str	r2, [sp, #32]
 8011436:	2200      	movs	r2, #0
 8011438:	9207      	str	r2, [sp, #28]
 801143a:	2200      	movs	r2, #0
 801143c:	9206      	str	r2, [sp, #24]
 801143e:	2200      	movs	r2, #0
 8011440:	9205      	str	r2, [sp, #20]
 8011442:	2200      	movs	r2, #0
 8011444:	9204      	str	r2, [sp, #16]
 8011446:	2200      	movs	r2, #0
 8011448:	9203      	str	r2, [sp, #12]
 801144a:	9302      	str	r3, [sp, #8]
 801144c:	2308      	movs	r3, #8
 801144e:	9301      	str	r3, [sp, #4]
 8011450:	2300      	movs	r3, #0
 8011452:	9300      	str	r3, [sp, #0]
 8011454:	2301      	movs	r3, #1
 8011456:	460a      	mov	r2, r1
 8011458:	4629      	mov	r1, r5
 801145a:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	7c5b      	ldrb	r3, [r3, #17]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d005      	beq.n	8011470 <RegionEU868RxConfig+0x148>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8011464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011468:	4a10      	ldr	r2, [pc, #64]	; (80114ac <RegionEU868RxConfig+0x184>)
 801146a:	5cd3      	ldrb	r3, [r2, r3]
 801146c:	75bb      	strb	r3, [r7, #22]
 801146e:	e004      	b.n	801147a <RegionEU868RxConfig+0x152>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8011470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011474:	4a0e      	ldr	r2, [pc, #56]	; (80114b0 <RegionEU868RxConfig+0x188>)
 8011476:	5cd3      	ldrb	r3, [r2, r3]
 8011478:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 801147a:	4b08      	ldr	r3, [pc, #32]	; (801149c <RegionEU868RxConfig+0x174>)
 801147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801147e:	7dba      	ldrb	r2, [r7, #22]
 8011480:	320d      	adds	r2, #13
 8011482:	b2d1      	uxtb	r1, r2
 8011484:	7dfa      	ldrb	r2, [r7, #23]
 8011486:	4610      	mov	r0, r2
 8011488:	4798      	blx	r3
    FREQ_PRINTF("RX on freq %u Hz at DR %d\r\n", (unsigned int)frequency, dr);

    *datarate = (uint8_t) dr;
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	7bfa      	ldrb	r2, [r7, #15]
 801148e:	701a      	strb	r2, [r3, #0]
    return true;
 8011490:	2301      	movs	r3, #1
}
 8011492:	4618      	mov	r0, r3
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bdb0      	pop	{r4, r5, r7, pc}
 801149a:	bf00      	nop
 801149c:	080127d0 	.word	0x080127d0
 80114a0:	200008b4 	.word	0x200008b4
 80114a4:	08012998 	.word	0x08012998
 80114a8:	00014585 	.word	0x00014585
 80114ac:	080129c8 	.word	0x080129c8
 80114b0:	080129c0 	.word	0x080129c0

080114b4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80114b4:	b590      	push	{r4, r7, lr}
 80114b6:	b093      	sub	sp, #76	; 0x4c
 80114b8:	af0a      	add	r7, sp, #40	; 0x28
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80114c6:	461a      	mov	r2, r3
 80114c8:	4b51      	ldr	r3, [pc, #324]	; (8011610 <RegionEU868TxConfig+0x15c>)
 80114ca:	5c9b      	ldrb	r3, [r3, r2]
 80114cc:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask );
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	4619      	mov	r1, r3
 80114da:	4a4e      	ldr	r2, [pc, #312]	; (8011614 <RegionEU868TxConfig+0x160>)
 80114dc:	460b      	mov	r3, r1
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	440b      	add	r3, r1
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	3309      	adds	r3, #9
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	4a4b      	ldr	r2, [pc, #300]	; (8011618 <RegionEU868TxConfig+0x164>)
 80114ec:	011b      	lsls	r3, r3, #4
 80114ee:	4413      	add	r3, r2
 80114f0:	3302      	adds	r3, #2
 80114f2:	f993 1000 	ldrsb.w	r1, [r3]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80114fc:	4b47      	ldr	r3, [pc, #284]	; (801161c <RegionEU868TxConfig+0x168>)
 80114fe:	f7ff fa71 	bl	80109e4 <LimitTxPower>
 8011502:	4603      	mov	r3, r0
 8011504:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801150c:	4618      	mov	r0, r3
 801150e:	f7ff fa4b 	bl	80109a8 <GetBandwidth>
 8011512:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8011514:	2300      	movs	r3, #0
 8011516:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6859      	ldr	r1, [r3, #4]
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	689a      	ldr	r2, [r3, #8]
 8011520:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011524:	4618      	mov	r0, r3
 8011526:	f7f9 f88f 	bl	800a648 <RegionCommonComputeTxPower>
 801152a:	4603      	mov	r3, r0
 801152c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( Channels[txConfig->Channel].Frequency );
 801152e:	4b3c      	ldr	r3, [pc, #240]	; (8011620 <RegionEU868TxConfig+0x16c>)
 8011530:	68da      	ldr	r2, [r3, #12]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	4618      	mov	r0, r3
 8011538:	4936      	ldr	r1, [pc, #216]	; (8011614 <RegionEU868TxConfig+0x160>)
 801153a:	4603      	mov	r3, r0
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	4403      	add	r3, r0
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	440b      	add	r3, r1
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4618      	mov	r0, r3
 8011548:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011550:	2b07      	cmp	r3, #7
 8011552:	d124      	bne.n	801159e <RegionEU868TxConfig+0xea>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8011554:	2300      	movs	r3, #0
 8011556:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000 );
 8011558:	4b31      	ldr	r3, [pc, #196]	; (8011620 <RegionEU868TxConfig+0x16c>)
 801155a:	69dc      	ldr	r4, [r3, #28]
 801155c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011564:	fb02 f303 	mul.w	r3, r2, r3
 8011568:	461a      	mov	r2, r3
 801156a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801156e:	7ff8      	ldrb	r0, [r7, #31]
 8011570:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011574:	9308      	str	r3, [sp, #32]
 8011576:	2300      	movs	r3, #0
 8011578:	9307      	str	r3, [sp, #28]
 801157a:	2300      	movs	r3, #0
 801157c:	9306      	str	r3, [sp, #24]
 801157e:	2300      	movs	r3, #0
 8011580:	9305      	str	r3, [sp, #20]
 8011582:	2301      	movs	r3, #1
 8011584:	9304      	str	r3, [sp, #16]
 8011586:	2300      	movs	r3, #0
 8011588:	9303      	str	r3, [sp, #12]
 801158a:	2305      	movs	r3, #5
 801158c:	9302      	str	r3, [sp, #8]
 801158e:	2300      	movs	r3, #0
 8011590:	9301      	str	r3, [sp, #4]
 8011592:	9200      	str	r2, [sp, #0]
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801159a:	47a0      	blx	r4
 801159c:	e01d      	b.n	80115da <RegionEU868TxConfig+0x126>
    }
    else
    {
        modem = MODEM_LORA;
 801159e:	2301      	movs	r3, #1
 80115a0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 16, false, true, 0, 0, false, 3000 );
 80115a2:	4b1f      	ldr	r3, [pc, #124]	; (8011620 <RegionEU868TxConfig+0x16c>)
 80115a4:	69dc      	ldr	r4, [r3, #28]
 80115a6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80115aa:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80115ae:	7ff8      	ldrb	r0, [r7, #31]
 80115b0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80115b4:	9208      	str	r2, [sp, #32]
 80115b6:	2200      	movs	r2, #0
 80115b8:	9207      	str	r2, [sp, #28]
 80115ba:	2200      	movs	r2, #0
 80115bc:	9206      	str	r2, [sp, #24]
 80115be:	2200      	movs	r2, #0
 80115c0:	9205      	str	r2, [sp, #20]
 80115c2:	2201      	movs	r2, #1
 80115c4:	9204      	str	r2, [sp, #16]
 80115c6:	2200      	movs	r2, #0
 80115c8:	9203      	str	r2, [sp, #12]
 80115ca:	2210      	movs	r2, #16
 80115cc:	9202      	str	r2, [sp, #8]
 80115ce:	2201      	movs	r2, #1
 80115d0:	9201      	str	r2, [sp, #4]
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	69bb      	ldr	r3, [r7, #24]
 80115d6:	2200      	movs	r2, #0
 80115d8:	47a0      	blx	r4
    }
    FREQ_PRINTF("TX on freq %u Hz at DR %d\r\n", (unsigned int)Channels[txConfig->Channel].Frequency, txConfig->Datarate);
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80115da:	4b11      	ldr	r3, [pc, #68]	; (8011620 <RegionEU868TxConfig+0x16c>)
 80115dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115de:	68fa      	ldr	r2, [r7, #12]
 80115e0:	8992      	ldrh	r2, [r2, #12]
 80115e2:	b2d1      	uxtb	r1, r2
 80115e4:	7ffa      	ldrb	r2, [r7, #31]
 80115e6:	4610      	mov	r0, r2
 80115e8:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem,  txConfig->PktLen );
 80115ea:	4b0d      	ldr	r3, [pc, #52]	; (8011620 <RegionEU868TxConfig+0x16c>)
 80115ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	8992      	ldrh	r2, [r2, #12]
 80115f2:	b2d1      	uxtb	r1, r2
 80115f4:	7ffa      	ldrb	r2, [r7, #31]
 80115f6:	4610      	mov	r0, r2
 80115f8:	4798      	blx	r3
 80115fa:	4602      	mov	r2, r0
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	7f7a      	ldrb	r2, [r7, #29]
 8011604:	701a      	strb	r2, [r3, #0]
    return true;
 8011606:	2301      	movs	r3, #1
}
 8011608:	4618      	mov	r0, r3
 801160a:	3724      	adds	r7, #36	; 0x24
 801160c:	46bd      	mov	sp, r7
 801160e:	bd90      	pop	{r4, r7, pc}
 8011610:	08012998 	.word	0x08012998
 8011614:	200008b4 	.word	0x200008b4
 8011618:	200000a4 	.word	0x200000a4
 801161c:	20000974 	.word	0x20000974
 8011620:	080127d0 	.word	0x080127d0

08011624 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b08a      	sub	sp, #40	; 0x28
 8011628:	af02      	add	r7, sp, #8
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8011632:	2307      	movs	r3, #7
 8011634:	77fb      	strb	r3, [r7, #31]
    LinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8011636:	2300      	movs	r3, #0
 8011638:	773b      	strb	r3, [r7, #28]
    uint8_t bytesProcessed = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	77bb      	strb	r3, [r7, #30]
    uint16_t chMask = 0;
 801163e:	2300      	movs	r3, #0
 8011640:	827b      	strh	r3, [r7, #18]

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011642:	e068      	b.n	8011716 <RegionEU868LinkAdrReq+0xf2>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	7fbb      	ldrb	r3, [r7, #30]
 801164a:	4413      	add	r3, r2
 801164c:	f107 0214 	add.w	r2, r7, #20
 8011650:	4611      	mov	r1, r2
 8011652:	4618      	mov	r0, r3
 8011654:	f7f8 fedc 	bl	800a410 <RegionCommonParseLinkAdrReq>
 8011658:	4603      	mov	r3, r0
 801165a:	773b      	strb	r3, [r7, #28]

        if( nextIndex == 0 )
 801165c:	7f3b      	ldrb	r3, [r7, #28]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d05f      	beq.n	8011722 <RegionEU868LinkAdrReq+0xfe>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8011662:	7fba      	ldrb	r2, [r7, #30]
 8011664:	7f3b      	ldrb	r3, [r7, #28]
 8011666:	4413      	add	r3, r2
 8011668:	77bb      	strb	r3, [r7, #30]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801166a:	2307      	movs	r3, #7
 801166c:	77fb      	strb	r3, [r7, #31]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801166e:	8b3b      	ldrh	r3, [r7, #24]
 8011670:	827b      	strh	r3, [r7, #18]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8011672:	7dfb      	ldrb	r3, [r7, #23]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d107      	bne.n	8011688 <RegionEU868LinkAdrReq+0x64>
 8011678:	8a7b      	ldrh	r3, [r7, #18]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d104      	bne.n	8011688 <RegionEU868LinkAdrReq+0x64>
        {
            status &= 0xFE; // Channel mask KO
 801167e:	7ffb      	ldrb	r3, [r7, #31]
 8011680:	f023 0301 	bic.w	r3, r3, #1
 8011684:	77fb      	strb	r3, [r7, #31]
 8011686:	e046      	b.n	8011716 <RegionEU868LinkAdrReq+0xf2>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011688:	7dfb      	ldrb	r3, [r7, #23]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d002      	beq.n	8011694 <RegionEU868LinkAdrReq+0x70>
 801168e:	7dfb      	ldrb	r3, [r7, #23]
 8011690:	2b05      	cmp	r3, #5
 8011692:	d902      	bls.n	801169a <RegionEU868LinkAdrReq+0x76>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8011694:	7dfb      	ldrb	r3, [r7, #23]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8011696:	2b06      	cmp	r3, #6
 8011698:	d904      	bls.n	80116a4 <RegionEU868LinkAdrReq+0x80>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801169a:	7ffb      	ldrb	r3, [r7, #31]
 801169c:	f023 0301 	bic.w	r3, r3, #1
 80116a0:	77fb      	strb	r3, [r7, #31]
 80116a2:	e038      	b.n	8011716 <RegionEU868LinkAdrReq+0xf2>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80116a4:	2300      	movs	r3, #0
 80116a6:	777b      	strb	r3, [r7, #29]
 80116a8:	e032      	b.n	8011710 <RegionEU868LinkAdrReq+0xec>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80116aa:	7dfb      	ldrb	r3, [r7, #23]
 80116ac:	2b06      	cmp	r3, #6
 80116ae:	d115      	bne.n	80116dc <RegionEU868LinkAdrReq+0xb8>
                {
                    if( Channels[i].Frequency != 0 )
 80116b0:	7f7a      	ldrb	r2, [r7, #29]
 80116b2:	4942      	ldr	r1, [pc, #264]	; (80117bc <RegionEU868LinkAdrReq+0x198>)
 80116b4:	4613      	mov	r3, r2
 80116b6:	005b      	lsls	r3, r3, #1
 80116b8:	4413      	add	r3, r2
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	440b      	add	r3, r1
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d022      	beq.n	801170a <RegionEU868LinkAdrReq+0xe6>
                    {
                        chMask |= 1 << i;
 80116c4:	7f7b      	ldrb	r3, [r7, #29]
 80116c6:	2201      	movs	r2, #1
 80116c8:	fa02 f303 	lsl.w	r3, r2, r3
 80116cc:	b21a      	sxth	r2, r3
 80116ce:	8a7b      	ldrh	r3, [r7, #18]
 80116d0:	b21b      	sxth	r3, r3
 80116d2:	4313      	orrs	r3, r2
 80116d4:	b21b      	sxth	r3, r3
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	827b      	strh	r3, [r7, #18]
 80116da:	e016      	b.n	801170a <RegionEU868LinkAdrReq+0xe6>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80116dc:	8a7b      	ldrh	r3, [r7, #18]
 80116de:	461a      	mov	r2, r3
 80116e0:	7f7b      	ldrb	r3, [r7, #29]
 80116e2:	fa42 f303 	asr.w	r3, r2, r3
 80116e6:	f003 0301 	and.w	r3, r3, #1
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00d      	beq.n	801170a <RegionEU868LinkAdrReq+0xe6>
                        ( Channels[i].Frequency == 0 ) )
 80116ee:	7f7a      	ldrb	r2, [r7, #29]
 80116f0:	4932      	ldr	r1, [pc, #200]	; (80117bc <RegionEU868LinkAdrReq+0x198>)
 80116f2:	4613      	mov	r3, r2
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	4413      	add	r3, r2
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	440b      	add	r3, r1
 80116fc:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d103      	bne.n	801170a <RegionEU868LinkAdrReq+0xe6>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8011702:	7ffb      	ldrb	r3, [r7, #31]
 8011704:	f023 0301 	bic.w	r3, r3, #1
 8011708:	77fb      	strb	r3, [r7, #31]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801170a:	7f7b      	ldrb	r3, [r7, #29]
 801170c:	3301      	adds	r3, #1
 801170e:	777b      	strb	r3, [r7, #29]
 8011710:	7f7b      	ldrb	r3, [r7, #29]
 8011712:	2b0f      	cmp	r3, #15
 8011714:	d9c9      	bls.n	80116aa <RegionEU868LinkAdrReq+0x86>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	791b      	ldrb	r3, [r3, #4]
 801171a:	7fba      	ldrb	r2, [r7, #30]
 801171c:	429a      	cmp	r2, r3
 801171e:	d391      	bcc.n	8011644 <RegionEU868LinkAdrReq+0x20>
 8011720:	e000      	b.n	8011724 <RegionEU868LinkAdrReq+0x100>
            break; // break loop, since no more request has been found
 8011722:	bf00      	nop
            }
        }
    }

    // Verify datarate
    if( RegionCommonChanVerifyDr( EU868_MAX_NB_CHANNELS, &chMask, linkAdrParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE, Channels  ) == false )
 8011724:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8011728:	f107 0112 	add.w	r1, r7, #18
 801172c:	4b23      	ldr	r3, [pc, #140]	; (80117bc <RegionEU868LinkAdrReq+0x198>)
 801172e:	9301      	str	r3, [sp, #4]
 8011730:	2307      	movs	r3, #7
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	2300      	movs	r3, #0
 8011736:	2010      	movs	r0, #16
 8011738:	f7f8 fc6e 	bl	800a018 <RegionCommonChanVerifyDr>
 801173c:	4603      	mov	r3, r0
 801173e:	f083 0301 	eor.w	r3, r3, #1
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b00      	cmp	r3, #0
 8011746:	d003      	beq.n	8011750 <RegionEU868LinkAdrReq+0x12c>
    {
        status &= 0xFD; // Datarate KO
 8011748:	7ffb      	ldrb	r3, [r7, #31]
 801174a:	f023 0302 	bic.w	r3, r3, #2
 801174e:	77fb      	strb	r3, [r7, #31]
    }

    // Verify tx power
    if( RegionCommonValueInRange( linkAdrParams.TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER ) == 0 )
 8011750:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011754:	2207      	movs	r2, #7
 8011756:	2100      	movs	r1, #0
 8011758:	4618      	mov	r0, r3
 801175a:	f7f8 fcd8 	bl	800a10e <RegionCommonValueInRange>
 801175e:	4603      	mov	r3, r0
 8011760:	2b00      	cmp	r3, #0
 8011762:	d10a      	bne.n	801177a <RegionEU868LinkAdrReq+0x156>
    {
        // Verify if the maximum TX power is exceeded
        if( EU868_MAX_TX_POWER > linkAdrParams.TxPower )
 8011764:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8011768:	2b00      	cmp	r3, #0
 801176a:	da02      	bge.n	8011772 <RegionEU868LinkAdrReq+0x14e>
        { // Apply maximum TX power. Accept TX power.
            linkAdrParams.TxPower = EU868_MAX_TX_POWER;
 801176c:	2300      	movs	r3, #0
 801176e:	75bb      	strb	r3, [r7, #22]
 8011770:	e003      	b.n	801177a <RegionEU868LinkAdrReq+0x156>
        }
        else
        {
            status &= 0xFB; // TxPower KO
 8011772:	7ffb      	ldrb	r3, [r7, #31]
 8011774:	f023 0304 	bic.w	r3, r3, #4
 8011778:	77fb      	strb	r3, [r7, #31]
        }
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801177a:	7ffb      	ldrb	r3, [r7, #31]
 801177c:	2b07      	cmp	r3, #7
 801177e:	d10a      	bne.n	8011796 <RegionEU868LinkAdrReq+0x172>
    {
        if( linkAdrParams.NbRep == 0 )
 8011780:	7d3b      	ldrb	r3, [r7, #20]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d101      	bne.n	801178a <RegionEU868LinkAdrReq+0x166>
        { // Value of 0 is not allowed, revert to default.
            linkAdrParams.NbRep = 1;
 8011786:	2301      	movs	r3, #1
 8011788:	753b      	strb	r3, [r7, #20]
 801178a:	4b0d      	ldr	r3, [pc, #52]	; (80117c0 <RegionEU868LinkAdrReq+0x19c>)
 801178c:	2200      	movs	r2, #0
 801178e:	801a      	strh	r2, [r3, #0]
        }

        // Set the channels mask to a default value
        memset( ChannelsMask, 0, sizeof( ChannelsMask ) );
        // Update the channels mask
        ChannelsMask[0] = chMask;
 8011790:	8a7a      	ldrh	r2, [r7, #18]
 8011792:	4b0b      	ldr	r3, [pc, #44]	; (80117c0 <RegionEU868LinkAdrReq+0x19c>)
 8011794:	801a      	strh	r2, [r3, #0]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011796:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801179e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80117a6:	7d3a      	ldrb	r2, [r7, #20]
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80117ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ae:	7fba      	ldrb	r2, [r7, #30]
 80117b0:	701a      	strb	r2, [r3, #0]

    return status;
 80117b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3720      	adds	r7, #32
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	200008b4 	.word	0x200008b4
 80117c0:	20000974 	.word	0x20000974

080117c4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80117cc:	2307      	movs	r3, #7
 80117ce:	73fb      	strb	r3, [r7, #15]

    // Verify radio frequency
    if( Radio.CheckRfFrequency( rxParamSetupReq->Frequency ) == false )
 80117d0:	4b19      	ldr	r3, [pc, #100]	; (8011838 <RegionEU868RxParamSetupReq+0x74>)
 80117d2:	6a1b      	ldr	r3, [r3, #32]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	6852      	ldr	r2, [r2, #4]
 80117d8:	4610      	mov	r0, r2
 80117da:	4798      	blx	r3
 80117dc:	4603      	mov	r3, r0
 80117de:	f083 0301 	eor.w	r3, r3, #1
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d003      	beq.n	80117f0 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFE; // Channel frequency KO
 80117e8:	7bfb      	ldrb	r3, [r7, #15]
 80117ea:	f023 0301 	bic.w	r3, r3, #1
 80117ee:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f993 3000 	ldrsb.w	r3, [r3]
 80117f6:	2207      	movs	r2, #7
 80117f8:	2100      	movs	r1, #0
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7f8 fc87 	bl	800a10e <RegionCommonValueInRange>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d103      	bne.n	801180e <RegionEU868RxParamSetupReq+0x4a>
    {
        status &= 0xFD; // Datarate KO
 8011806:	7bfb      	ldrb	r3, [r7, #15]
 8011808:	f023 0302 	bic.w	r3, r3, #2
 801180c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011814:	2205      	movs	r2, #5
 8011816:	2100      	movs	r1, #0
 8011818:	4618      	mov	r0, r3
 801181a:	f7f8 fc78 	bl	800a10e <RegionCommonValueInRange>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d103      	bne.n	801182c <RegionEU868RxParamSetupReq+0x68>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8011824:	7bfb      	ldrb	r3, [r7, #15]
 8011826:	f023 0304 	bic.w	r3, r3, #4
 801182a:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 801182c:	7bfb      	ldrb	r3, [r7, #15]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3710      	adds	r7, #16
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	080127d0 	.word	0x080127d0

0801183c <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b086      	sub	sp, #24
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8011844:	2303      	movs	r3, #3
 8011846:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d114      	bne.n	801187c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011858:	b2db      	uxtb	r3, r3
 801185a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801185c:	f107 0308 	add.w	r3, r7, #8
 8011860:	4618      	mov	r0, r3
 8011862:	f000 fab5 	bl	8011dd0 <RegionEU868ChannelsRemove>
 8011866:	4603      	mov	r3, r0
 8011868:	f083 0301 	eor.w	r3, r3, #1
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	d03b      	beq.n	80118ea <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8011872:	7dfb      	ldrb	r3, [r7, #23]
 8011874:	f023 0303 	bic.w	r3, r3, #3
 8011878:	75fb      	strb	r3, [r7, #23]
 801187a:	e036      	b.n	80118ea <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011888:	b2db      	uxtb	r3, r3
 801188a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801188c:	f107 030c 	add.w	r3, r7, #12
 8011890:	4618      	mov	r0, r3
 8011892:	f000 f9d7 	bl	8011c44 <RegionEU868ChannelAdd>
 8011896:	4603      	mov	r3, r0
 8011898:	2b06      	cmp	r3, #6
 801189a:	d820      	bhi.n	80118de <RegionEU868NewChannelReq+0xa2>
 801189c:	a201      	add	r2, pc, #4	; (adr r2, 80118a4 <RegionEU868NewChannelReq+0x68>)
 801189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118a2:	bf00      	nop
 80118a4:	080118e9 	.word	0x080118e9
 80118a8:	080118df 	.word	0x080118df
 80118ac:	080118df 	.word	0x080118df
 80118b0:	080118df 	.word	0x080118df
 80118b4:	080118c1 	.word	0x080118c1
 80118b8:	080118cb 	.word	0x080118cb
 80118bc:	080118d5 	.word	0x080118d5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80118c0:	7dfb      	ldrb	r3, [r7, #23]
 80118c2:	f023 0301 	bic.w	r3, r3, #1
 80118c6:	75fb      	strb	r3, [r7, #23]
                break;
 80118c8:	e00f      	b.n	80118ea <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
 80118cc:	f023 0302 	bic.w	r3, r3, #2
 80118d0:	75fb      	strb	r3, [r7, #23]
                break;
 80118d2:	e00a      	b.n	80118ea <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80118d4:	7dfb      	ldrb	r3, [r7, #23]
 80118d6:	f023 0303 	bic.w	r3, r3, #3
 80118da:	75fb      	strb	r3, [r7, #23]
                break;
 80118dc:	e005      	b.n	80118ea <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	f023 0303 	bic.w	r3, r3, #3
 80118e4:	75fb      	strb	r3, [r7, #23]
                break;
 80118e6:	e000      	b.n	80118ea <RegionEU868NewChannelReq+0xae>
                break;
 80118e8:	bf00      	nop
            }
        }
    }

    return status;
 80118ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
    return -1;
 80118fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	bc80      	pop	{r7}
 8011908:	4770      	bx	lr
	...

0801190c <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b084      	sub	sp, #16
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8011914:	2303      	movs	r3, #3
 8011916:	73fb      	strb	r3, [r7, #15]
    uint8_t band = 0;
 8011918:	2300      	movs	r3, #0
 801191a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyTxFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	f107 020e 	add.w	r2, r7, #14
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f7ff f878 	bl	8010a1c <VerifyTxFreq>
 801192c:	4603      	mov	r3, r0
 801192e:	f083 0301 	eor.w	r3, r3, #1
 8011932:	b2db      	uxtb	r3, r3
 8011934:	2b00      	cmp	r3, #0
 8011936:	d003      	beq.n	8011940 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8011938:	7bfb      	ldrb	r3, [r7, #15]
 801193a:	f023 0301 	bic.w	r3, r3, #1
 801193e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	4619      	mov	r1, r3
 8011946:	4a11      	ldr	r2, [pc, #68]	; (801198c <RegionEU868DlChannelReq+0x80>)
 8011948:	460b      	mov	r3, r1
 801194a:	005b      	lsls	r3, r3, #1
 801194c:	440b      	add	r3, r1
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	4413      	add	r3, r2
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <RegionEU868DlChannelReq+0x54>
    {
        status &= 0xFD;
 8011958:	7bfb      	ldrb	r3, [r7, #15]
 801195a:	f023 0302 	bic.w	r3, r3, #2
 801195e:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b03      	cmp	r3, #3
 8011964:	d10c      	bne.n	8011980 <RegionEU868DlChannelReq+0x74>
    {
        Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	4618      	mov	r0, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	685a      	ldr	r2, [r3, #4]
 8011970:	4906      	ldr	r1, [pc, #24]	; (801198c <RegionEU868DlChannelReq+0x80>)
 8011972:	4603      	mov	r3, r0
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	4403      	add	r3, r0
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	440b      	add	r3, r1
 801197c:	3304      	adds	r3, #4
 801197e:	601a      	str	r2, [r3, #0]
    }

    return status;
 8011980:	7bfb      	ldrb	r3, [r7, #15]
}
 8011982:	4618      	mov	r0, r3
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	200008b4 	.word	0x200008b4

08011990 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( AlternateDrParams_t* alternateDr )
{
 8011990:	b480      	push	{r7}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
    int8_t datarate = 0;
 8011998:	2300      	movs	r3, #0
 801199a:	73fb      	strb	r3, [r7, #15]

    if( ( alternateDr->NbTrials % 48 ) == 0 )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	881a      	ldrh	r2, [r3, #0]
 80119a0:	4b23      	ldr	r3, [pc, #140]	; (8011a30 <RegionEU868AlternateDr+0xa0>)
 80119a2:	fba3 1302 	umull	r1, r3, r3, r2
 80119a6:	0959      	lsrs	r1, r3, #5
 80119a8:	460b      	mov	r3, r1
 80119aa:	005b      	lsls	r3, r3, #1
 80119ac:	440b      	add	r3, r1
 80119ae:	011b      	lsls	r3, r3, #4
 80119b0:	1ad3      	subs	r3, r2, r3
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d102      	bne.n	80119be <RegionEU868AlternateDr+0x2e>
    {
        datarate = DR_0;
 80119b8:	2300      	movs	r3, #0
 80119ba:	73fb      	strb	r3, [r7, #15]
 80119bc:	e030      	b.n	8011a20 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 32 ) == 0 )
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	f003 031f 	and.w	r3, r3, #31
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d102      	bne.n	80119d2 <RegionEU868AlternateDr+0x42>
    {
        datarate = DR_1;
 80119cc:	2301      	movs	r3, #1
 80119ce:	73fb      	strb	r3, [r7, #15]
 80119d0:	e026      	b.n	8011a20 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 24 ) == 0 )
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	881a      	ldrh	r2, [r3, #0]
 80119d6:	4b16      	ldr	r3, [pc, #88]	; (8011a30 <RegionEU868AlternateDr+0xa0>)
 80119d8:	fba3 1302 	umull	r1, r3, r3, r2
 80119dc:	0919      	lsrs	r1, r3, #4
 80119de:	460b      	mov	r3, r1
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	440b      	add	r3, r1
 80119e4:	00db      	lsls	r3, r3, #3
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d102      	bne.n	80119f4 <RegionEU868AlternateDr+0x64>
    {
        datarate = DR_2;
 80119ee:	2302      	movs	r3, #2
 80119f0:	73fb      	strb	r3, [r7, #15]
 80119f2:	e015      	b.n	8011a20 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 16 ) == 0 )
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	f003 030f 	and.w	r3, r3, #15
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d102      	bne.n	8011a08 <RegionEU868AlternateDr+0x78>
    {
        datarate = DR_3;
 8011a02:	2303      	movs	r3, #3
 8011a04:	73fb      	strb	r3, [r7, #15]
 8011a06:	e00b      	b.n	8011a20 <RegionEU868AlternateDr+0x90>
    }
    else if( ( alternateDr->NbTrials % 8 ) == 0 )
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	f003 0307 	and.w	r3, r3, #7
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d102      	bne.n	8011a1c <RegionEU868AlternateDr+0x8c>
    {
        datarate = DR_4;
 8011a16:	2304      	movs	r3, #4
 8011a18:	73fb      	strb	r3, [r7, #15]
 8011a1a:	e001      	b.n	8011a20 <RegionEU868AlternateDr+0x90>
    }
    else
    {
        datarate = DR_5;
 8011a1c:	2305      	movs	r3, #5
 8011a1e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8011a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3714      	adds	r7, #20
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bc80      	pop	{r7}
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	aaaaaaab 	.word	0xaaaaaaab

08011a34 <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
    uint8_t channel = calcBackOff->Channel;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	78db      	ldrb	r3, [r3, #3]
 8011a40:	73fb      	strb	r3, [r7, #15]
    uint16_t dutyCycle = Bands[Channels[channel].Band].DCycle;
 8011a42:	7bfa      	ldrb	r2, [r7, #15]
 8011a44:	4931      	ldr	r1, [pc, #196]	; (8011b0c <RegionEU868CalcBackOff+0xd8>)
 8011a46:	4613      	mov	r3, r2
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	4413      	add	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	440b      	add	r3, r1
 8011a50:	3309      	adds	r3, #9
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	4a2e      	ldr	r2, [pc, #184]	; (8011b10 <RegionEU868CalcBackOff+0xdc>)
 8011a56:	011b      	lsls	r3, r3, #4
 8011a58:	4413      	add	r3, r2
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	81bb      	strh	r3, [r7, #12]
    uint16_t joinDutyCycle = 0;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	817b      	strh	r3, [r7, #10]

    // Reset time-off to initial value.
    Bands[Channels[channel].Band].TimeOff = 0;
 8011a62:	7bfa      	ldrb	r2, [r7, #15]
 8011a64:	4929      	ldr	r1, [pc, #164]	; (8011b0c <RegionEU868CalcBackOff+0xd8>)
 8011a66:	4613      	mov	r3, r2
 8011a68:	005b      	lsls	r3, r3, #1
 8011a6a:	4413      	add	r3, r2
 8011a6c:	009b      	lsls	r3, r3, #2
 8011a6e:	440b      	add	r3, r1
 8011a70:	3309      	adds	r3, #9
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	4a26      	ldr	r2, [pc, #152]	; (8011b10 <RegionEU868CalcBackOff+0xdc>)
 8011a76:	011b      	lsls	r3, r3, #4
 8011a78:	4413      	add	r3, r2
 8011a7a:	330c      	adds	r3, #12
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	601a      	str	r2, [r3, #0]

    if( calcBackOff->Joined == false )
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	f083 0301 	eor.w	r3, r3, #1
 8011a88:	b2db      	uxtb	r3, r3
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d021      	beq.n	8011ad2 <RegionEU868CalcBackOff+0x9e>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOff->ElapsedTime );
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7f8 faa0 	bl	8009fd8 <RegionCommonGetJoinDc>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	817b      	strh	r3, [r7, #10]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8011a9c:	897a      	ldrh	r2, [r7, #10]
 8011a9e:	89bb      	ldrh	r3, [r7, #12]
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	bf38      	it	cc
 8011aa4:	4613      	movcc	r3, r2
 8011aa6:	81bb      	strh	r3, [r7, #12]
        // Apply band time-off.
        Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
 8011aa8:	89bb      	ldrh	r3, [r7, #12]
 8011aaa:	1e59      	subs	r1, r3, #1
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6898      	ldr	r0, [r3, #8]
 8011ab0:	7bfa      	ldrb	r2, [r7, #15]
 8011ab2:	4c16      	ldr	r4, [pc, #88]	; (8011b0c <RegionEU868CalcBackOff+0xd8>)
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	005b      	lsls	r3, r3, #1
 8011ab8:	4413      	add	r3, r2
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	4423      	add	r3, r4
 8011abe:	3309      	adds	r3, #9
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	fb00 f201 	mul.w	r2, r0, r1
 8011ac6:	4912      	ldr	r1, [pc, #72]	; (8011b10 <RegionEU868CalcBackOff+0xdc>)
 8011ac8:	011b      	lsls	r3, r3, #4
 8011aca:	440b      	add	r3, r1
 8011acc:	330c      	adds	r3, #12
 8011ace:	601a      	str	r2, [r3, #0]
        if( calcBackOff->DutyCycleEnabled == true )
        {
            Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
        }
    }
}
 8011ad0:	e017      	b.n	8011b02 <RegionEU868CalcBackOff+0xce>
        if( calcBackOff->DutyCycleEnabled == true )
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	789b      	ldrb	r3, [r3, #2]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d013      	beq.n	8011b02 <RegionEU868CalcBackOff+0xce>
            Bands[Channels[channel].Band].TimeOff = calcBackOff->TxTimeOnAir * dutyCycle - calcBackOff->TxTimeOnAir;
 8011ada:	89bb      	ldrh	r3, [r7, #12]
 8011adc:	1e59      	subs	r1, r3, #1
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6898      	ldr	r0, [r3, #8]
 8011ae2:	7bfa      	ldrb	r2, [r7, #15]
 8011ae4:	4c09      	ldr	r4, [pc, #36]	; (8011b0c <RegionEU868CalcBackOff+0xd8>)
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	4413      	add	r3, r2
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4423      	add	r3, r4
 8011af0:	3309      	adds	r3, #9
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	fb00 f201 	mul.w	r2, r0, r1
 8011af8:	4905      	ldr	r1, [pc, #20]	; (8011b10 <RegionEU868CalcBackOff+0xdc>)
 8011afa:	011b      	lsls	r3, r3, #4
 8011afc:	440b      	add	r3, r1
 8011afe:	330c      	adds	r3, #12
 8011b00:	601a      	str	r2, [r3, #0]
}
 8011b02:	bf00      	nop
 8011b04:	3714      	adds	r7, #20
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd90      	pop	{r4, r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	200008b4 	.word	0x200008b4
 8011b10:	200000a4 	.word	0x200000a4

08011b14 <RegionEU868NextChannel>:

bool RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b091      	sub	sp, #68	; 0x44
 8011b18:	af04      	add	r7, sp, #16
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
 8011b20:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8011b22:	2300      	movs	r3, #0
 8011b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t delayTx = 0;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8011b2e:	2300      	movs	r3, #0
 8011b30:	617b      	str	r3, [r7, #20]
 8011b32:	f107 0318 	add.w	r3, r7, #24
 8011b36:	2200      	movs	r2, #0
 8011b38:	601a      	str	r2, [r3, #0]
 8011b3a:	605a      	str	r2, [r3, #4]
 8011b3c:	609a      	str	r2, [r3, #8]
    TimerTime_t nextTxDelay = 0;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( ChannelsMask, 0, 1 ) == 0 )
 8011b42:	2201      	movs	r2, #1
 8011b44:	2100      	movs	r1, #0
 8011b46:	483c      	ldr	r0, [pc, #240]	; (8011c38 <RegionEU868NextChannel+0x124>)
 8011b48:	f7f8 fb32 	bl	800a1b0 <RegionCommonCountChannels>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d106      	bne.n	8011b60 <RegionEU868NextChannel+0x4c>
    { // Reactivate default channels
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011b52:	4b39      	ldr	r3, [pc, #228]	; (8011c38 <RegionEU868NextChannel+0x124>)
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	f043 0307 	orr.w	r3, r3, #7
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	4b36      	ldr	r3, [pc, #216]	; (8011c38 <RegionEU868NextChannel+0x124>)
 8011b5e:	801a      	strh	r2, [r3, #0]
    }

    if( nextChanParams->AggrTimeOff <= TimerGetElapsedTime( nextChanParams->LastAggrTx ) )
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681c      	ldr	r4, [r3, #0]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7fe fcdd 	bl	8010528 <TimerGetElapsedTime>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	429c      	cmp	r4, r3
 8011b72:	d821      	bhi.n	8011bb8 <RegionEU868NextChannel+0xa4>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	2200      	movs	r2, #0
 8011b78:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, EU868_MAX_NB_BANDS );
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	7a58      	ldrb	r0, [r3, #9]
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	7a99      	ldrb	r1, [r3, #10]
 8011b82:	2305      	movs	r3, #5
 8011b84:	4a2d      	ldr	r2, [pc, #180]	; (8011c3c <RegionEU868NextChannel+0x128>)
 8011b86:	f7f8 fb7e 	bl	800a286 <RegionCommonUpdateBandTimeOff>
 8011b8a:	62b8      	str	r0, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	7a58      	ldrb	r0, [r3, #9]
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011b96:	b2d9      	uxtb	r1, r3
 8011b98:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8011b9c:	9302      	str	r3, [sp, #8]
 8011b9e:	f107 0314 	add.w	r3, r7, #20
 8011ba2:	9301      	str	r3, [sp, #4]
 8011ba4:	4b25      	ldr	r3, [pc, #148]	; (8011c3c <RegionEU868NextChannel+0x128>)
 8011ba6:	9300      	str	r3, [sp, #0]
 8011ba8:	4b25      	ldr	r3, [pc, #148]	; (8011c40 <RegionEU868NextChannel+0x12c>)
 8011baa:	4a23      	ldr	r2, [pc, #140]	; (8011c38 <RegionEU868NextChannel+0x124>)
 8011bac:	f7fe ffac 	bl	8010b08 <CountNbOfEnabledChannels>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011bb6:	e00f      	b.n	8011bd8 <RegionEU868NextChannel+0xc4>
                                                      ChannelsMask, Channels,
                                                      Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8011bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime( nextChanParams->LastAggrTx );
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681c      	ldr	r4, [r3, #0]
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	685b      	ldr	r3, [r3, #4]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fe fcab 	bl	8010528 <TimerGetElapsedTime>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	1ae3      	subs	r3, r4, r3
 8011bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 8011bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d013      	beq.n	8011c08 <RegionEU868NextChannel+0xf4>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011be4:	3b01      	subs	r3, #1
 8011be6:	4619      	mov	r1, r3
 8011be8:	2000      	movs	r0, #0
 8011bea:	f7fe fd93 	bl	8010714 <randr>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bf4:	4413      	add	r3, r2
 8011bf6:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8011bfa:	68bb      	ldr	r3, [r7, #8]
 8011bfc:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	601a      	str	r2, [r3, #0]
        return true;
 8011c04:	2301      	movs	r3, #1
 8011c06:	e013      	b.n	8011c30 <RegionEU868NextChannel+0x11c>
    }
    else
    {
        if( delayTx > 0 )
 8011c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <RegionEU868NextChannel+0x106>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c14:	601a      	str	r2, [r3, #0]
            return true;
 8011c16:	2301      	movs	r3, #1
 8011c18:	e00a      	b.n	8011c30 <RegionEU868NextChannel+0x11c>
        }
        // Datarate not supported by any channel, restore defaults
        ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011c1a:	4b07      	ldr	r3, [pc, #28]	; (8011c38 <RegionEU868NextChannel+0x124>)
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	f043 0307 	orr.w	r3, r3, #7
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	4b04      	ldr	r3, [pc, #16]	; (8011c38 <RegionEU868NextChannel+0x124>)
 8011c26:	801a      	strh	r2, [r3, #0]
        *time = 0;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	601a      	str	r2, [r3, #0]
        return false;
 8011c2e:	2300      	movs	r3, #0
    }
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3734      	adds	r7, #52	; 0x34
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd90      	pop	{r4, r7, pc}
 8011c38:	20000974 	.word	0x20000974
 8011c3c:	200000a4 	.word	0x200000a4
 8011c40:	200008b4 	.word	0x200008b4

08011c44 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8011c50:	2300      	movs	r3, #0
 8011c52:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8011c54:	2300      	movs	r3, #0
 8011c56:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	791b      	ldrb	r3, [r3, #4]
 8011c5c:	737b      	strb	r3, [r7, #13]

    if( id >= EU868_MAX_NB_CHANNELS )
 8011c5e:	7b7b      	ldrb	r3, [r7, #13]
 8011c60:	2b0f      	cmp	r3, #15
 8011c62:	d901      	bls.n	8011c68 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c64:	2303      	movs	r3, #3
 8011c66:	e0aa      	b.n	8011dbe <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	7a1b      	ldrb	r3, [r3, #8]
 8011c6e:	f343 0303 	sbfx	r3, r3, #0, #4
 8011c72:	b25b      	sxtb	r3, r3
 8011c74:	2207      	movs	r2, #7
 8011c76:	2100      	movs	r1, #0
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7f8 fa48 	bl	800a10e <RegionCommonValueInRange>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8011c84:	2301      	movs	r3, #1
 8011c86:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	7a1b      	ldrb	r3, [r3, #8]
 8011c8e:	f343 1303 	sbfx	r3, r3, #4, #4
 8011c92:	b25b      	sxtb	r3, r3
 8011c94:	2207      	movs	r2, #7
 8011c96:	2100      	movs	r1, #0
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7f8 fa38 	bl	800a10e <RegionCommonValueInRange>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d101      	bne.n	8011ca8 <RegionEU868ChannelAdd+0x64>
    {
        drInvalid = true;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	7a1b      	ldrb	r3, [r3, #8]
 8011cae:	f343 0303 	sbfx	r3, r3, #0, #4
 8011cb2:	b25a      	sxtb	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	7a1b      	ldrb	r3, [r3, #8]
 8011cba:	f343 1303 	sbfx	r3, r3, #4, #4
 8011cbe:	b25b      	sxtb	r3, r3
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	dd01      	ble.n	8011cc8 <RegionEU868ChannelAdd+0x84>
    {
        drInvalid = true;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	73fb      	strb	r3, [r7, #15]
    }

    // Default channels don't accept all values
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011cc8:	7b7b      	ldrb	r3, [r7, #13]
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d828      	bhi.n	8011d20 <RegionEU868ChannelAdd+0xdc>
    {
        // Validate the datarate range for min: must be DR_0
        if( channelAdd->NewChannel->DrRange.Fields.Min > DR_0 )
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	7a1b      	ldrb	r3, [r3, #8]
 8011cd4:	f343 0303 	sbfx	r3, r3, #0, #4
 8011cd8:	b25b      	sxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	dd01      	ble.n	8011ce2 <RegionEU868ChannelAdd+0x9e>
        {
            drInvalid = true;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	73fb      	strb	r3, [r7, #15]
        }
        // Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
        if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE ) == false )
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	7a1b      	ldrb	r3, [r3, #8]
 8011ce8:	f343 1303 	sbfx	r3, r3, #4, #4
 8011cec:	b25b      	sxtb	r3, r3
 8011cee:	2207      	movs	r2, #7
 8011cf0:	2105      	movs	r1, #5
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7f8 fa0b 	bl	800a10e <RegionCommonValueInRange>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d101      	bne.n	8011d02 <RegionEU868ChannelAdd+0xbe>
        {
            drInvalid = true;
 8011cfe:	2301      	movs	r3, #1
 8011d00:	73fb      	strb	r3, [r7, #15]
        }
        // We are not allowed to change the frequency
        if( channelAdd->NewChannel->Frequency != Channels[id].Frequency )
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	6819      	ldr	r1, [r3, #0]
 8011d08:	7b7a      	ldrb	r2, [r7, #13]
 8011d0a:	482f      	ldr	r0, [pc, #188]	; (8011dc8 <RegionEU868ChannelAdd+0x184>)
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	4413      	add	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4403      	add	r3, r0
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4299      	cmp	r1, r3
 8011d1a:	d001      	beq.n	8011d20 <RegionEU868ChannelAdd+0xdc>
        {
            freqInvalid = true;
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check frequency
    if( freqInvalid == false )
 8011d20:	7bbb      	ldrb	r3, [r7, #14]
 8011d22:	f083 0301 	eor.w	r3, r3, #1
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d010      	beq.n	8011d4e <RegionEU868ChannelAdd+0x10a>
    {
        if( VerifyTxFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	f107 020c 	add.w	r2, r7, #12
 8011d36:	4611      	mov	r1, r2
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fe fe6f 	bl	8010a1c <VerifyTxFreq>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	f083 0301 	eor.w	r3, r3, #1
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d001      	beq.n	8011d4e <RegionEU868ChannelAdd+0x10a>
        {
            freqInvalid = true;
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011d4e:	7bfb      	ldrb	r3, [r7, #15]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d004      	beq.n	8011d5e <RegionEU868ChannelAdd+0x11a>
 8011d54:	7bbb      	ldrb	r3, [r7, #14]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d001      	beq.n	8011d5e <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011d5a:	2306      	movs	r3, #6
 8011d5c:	e02f      	b.n	8011dbe <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8011d5e:	7bfb      	ldrb	r3, [r7, #15]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <RegionEU868ChannelAdd+0x124>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011d64:	2305      	movs	r3, #5
 8011d66:	e02a      	b.n	8011dbe <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8011d68:	7bbb      	ldrb	r3, [r7, #14]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d001      	beq.n	8011d72 <RegionEU868ChannelAdd+0x12e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011d6e:	2304      	movs	r3, #4
 8011d70:	e025      	b.n	8011dbe <RegionEU868ChannelAdd+0x17a>
    }

    memcpy( &(Channels[id]), channelAdd->NewChannel, sizeof( Channels[id] ) );
 8011d72:	7b7a      	ldrb	r2, [r7, #13]
 8011d74:	4613      	mov	r3, r2
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	4413      	add	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4a12      	ldr	r2, [pc, #72]	; (8011dc8 <RegionEU868ChannelAdd+0x184>)
 8011d7e:	1898      	adds	r0, r3, r2
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	220c      	movs	r2, #12
 8011d86:	4619      	mov	r1, r3
 8011d88:	f000 f8fa 	bl	8011f80 <memcpy>
    Channels[id].Band = band;
 8011d8c:	7b7a      	ldrb	r2, [r7, #13]
 8011d8e:	7b38      	ldrb	r0, [r7, #12]
 8011d90:	490d      	ldr	r1, [pc, #52]	; (8011dc8 <RegionEU868ChannelAdd+0x184>)
 8011d92:	4613      	mov	r3, r2
 8011d94:	005b      	lsls	r3, r3, #1
 8011d96:	4413      	add	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	440b      	add	r3, r1
 8011d9c:	3309      	adds	r3, #9
 8011d9e:	4602      	mov	r2, r0
 8011da0:	701a      	strb	r2, [r3, #0]
    ChannelsMask[0] |= ( 1 << id );
 8011da2:	4b0a      	ldr	r3, [pc, #40]	; (8011dcc <RegionEU868ChannelAdd+0x188>)
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	b21a      	sxth	r2, r3
 8011da8:	7b7b      	ldrb	r3, [r7, #13]
 8011daa:	2101      	movs	r1, #1
 8011dac:	fa01 f303 	lsl.w	r3, r1, r3
 8011db0:	b21b      	sxth	r3, r3
 8011db2:	4313      	orrs	r3, r2
 8011db4:	b21b      	sxth	r3, r3
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	4b04      	ldr	r3, [pc, #16]	; (8011dcc <RegionEU868ChannelAdd+0x188>)
 8011dba:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3710      	adds	r7, #16
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200008b4 	.word	0x200008b4
 8011dcc:	20000974 	.word	0x20000974

08011dd0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011dde:	7dfb      	ldrb	r3, [r7, #23]
 8011de0:	2b02      	cmp	r3, #2
 8011de2:	d801      	bhi.n	8011de8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8011de4:	2300      	movs	r3, #0
 8011de6:	e012      	b.n	8011e0e <RegionEU868ChannelsRemove+0x3e>
    }

    // Remove the channel from the list of channels
    Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011de8:	7dfa      	ldrb	r2, [r7, #23]
 8011dea:	490b      	ldr	r1, [pc, #44]	; (8011e18 <RegionEU868ChannelsRemove+0x48>)
 8011dec:	4613      	mov	r3, r2
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	4413      	add	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	440b      	add	r3, r1
 8011df6:	461a      	mov	r2, r3
 8011df8:	2300      	movs	r3, #0
 8011dfa:	6013      	str	r3, [r2, #0]
 8011dfc:	6053      	str	r3, [r2, #4]
 8011dfe:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8011e00:	7dfb      	ldrb	r3, [r7, #23]
 8011e02:	2210      	movs	r2, #16
 8011e04:	4619      	mov	r1, r3
 8011e06:	4805      	ldr	r0, [pc, #20]	; (8011e1c <RegionEU868ChannelsRemove+0x4c>)
 8011e08:	f7f8 f99e 	bl	800a148 <RegionCommonChanDisable>
 8011e0c:	4603      	mov	r3, r0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3718      	adds	r7, #24
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	200008b4 	.word	0x200008b4
 8011e1c:	20000974 	.word	0x20000974

08011e20 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask );
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	4619      	mov	r1, r3
 8011e34:	4a1c      	ldr	r2, [pc, #112]	; (8011ea8 <RegionEU868SetContinuousWave+0x88>)
 8011e36:	460b      	mov	r3, r1
 8011e38:	005b      	lsls	r3, r3, #1
 8011e3a:	440b      	add	r3, r1
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	4413      	add	r3, r2
 8011e40:	3309      	adds	r3, #9
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	4a19      	ldr	r2, [pc, #100]	; (8011eac <RegionEU868SetContinuousWave+0x8c>)
 8011e46:	011b      	lsls	r3, r3, #4
 8011e48:	4413      	add	r3, r2
 8011e4a:	3302      	adds	r3, #2
 8011e4c:	f993 1000 	ldrsb.w	r1, [r3]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8011e56:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <RegionEU868SetContinuousWave+0x90>)
 8011e58:	f7fe fdc4 	bl	80109e4 <LimitTxPower>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8011e60:	2300      	movs	r3, #0
 8011e62:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	4619      	mov	r1, r3
 8011e6a:	4a0f      	ldr	r2, [pc, #60]	; (8011ea8 <RegionEU868SetContinuousWave+0x88>)
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	005b      	lsls	r3, r3, #1
 8011e70:	440b      	add	r3, r1
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	4413      	add	r3, r2
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6859      	ldr	r1, [r3, #4]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	689a      	ldr	r2, [r3, #8]
 8011e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f8 fbde 	bl	800a648 <RegionCommonComputeTxPower>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011e90:	4b08      	ldr	r3, [pc, #32]	; (8011eb4 <RegionEU868SetContinuousWave+0x94>)
 8011e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e94:	687a      	ldr	r2, [r7, #4]
 8011e96:	8992      	ldrh	r2, [r2, #12]
 8011e98:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8011e9c:	68b8      	ldr	r0, [r7, #8]
 8011e9e:	4798      	blx	r3
}
 8011ea0:	bf00      	nop
 8011ea2:	3710      	adds	r7, #16
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	200008b4 	.word	0x200008b4
 8011eac:	200000a4 	.word	0x200000a4
 8011eb0:	20000974 	.word	0x20000974
 8011eb4:	080127d0 	.word	0x080127d0

08011eb8 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b085      	sub	sp, #20
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	71fb      	strb	r3, [r7, #7]
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	71bb      	strb	r3, [r7, #6]
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	717b      	strb	r3, [r7, #5]
    int8_t datarate = dr - drOffset;
 8011eca:	79ba      	ldrb	r2, [r7, #6]
 8011ecc:	797b      	ldrb	r3, [r7, #5]
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8011ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	da01      	bge.n	8011ee0 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8011edc:	2300      	movs	r3, #0
 8011ede:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8011ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3714      	adds	r7, #20
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bc80      	pop	{r7}
 8011eea:	4770      	bx	lr

08011eec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8011eec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8011eee:	e003      	b.n	8011ef8 <LoopCopyDataInit>

08011ef0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8011ef0:	4b0b      	ldr	r3, [pc, #44]	; (8011f20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8011ef2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8011ef4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8011ef6:	3104      	adds	r1, #4

08011ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8011ef8:	480a      	ldr	r0, [pc, #40]	; (8011f24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8011efa:	4b0b      	ldr	r3, [pc, #44]	; (8011f28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8011efc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8011efe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8011f00:	d3f6      	bcc.n	8011ef0 <CopyDataInit>
  ldr r2, =_sbss
 8011f02:	4a0a      	ldr	r2, [pc, #40]	; (8011f2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8011f04:	e002      	b.n	8011f0c <LoopFillZerobss>

08011f06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8011f06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8011f08:	f842 3b04 	str.w	r3, [r2], #4

08011f0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8011f0c:	4b08      	ldr	r3, [pc, #32]	; (8011f30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8011f0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8011f10:	d3f9      	bcc.n	8011f06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8011f12:	f7fe f897 	bl	8010044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011f16:	f000 f80f 	bl	8011f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8011f1a:	f7fa f9fb 	bl	800c314 <main>
  bx lr
 8011f1e:	4770      	bx	lr
  ldr r3, =_sidata
 8011f20:	080129e0 	.word	0x080129e0
  ldr r0, =_sdata
 8011f24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8011f28:	200000f4 	.word	0x200000f4
  ldr r2, =_sbss
 8011f2c:	200000f4 	.word	0x200000f4
  ldr r3, = _ebss
 8011f30:	200013d8 	.word	0x200013d8

08011f34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8011f34:	e7fe      	b.n	8011f34 <ADC1_IRQHandler>
	...

08011f38 <__libc_init_array>:
 8011f38:	b570      	push	{r4, r5, r6, lr}
 8011f3a:	2600      	movs	r6, #0
 8011f3c:	4d0c      	ldr	r5, [pc, #48]	; (8011f70 <__libc_init_array+0x38>)
 8011f3e:	4c0d      	ldr	r4, [pc, #52]	; (8011f74 <__libc_init_array+0x3c>)
 8011f40:	1b64      	subs	r4, r4, r5
 8011f42:	10a4      	asrs	r4, r4, #2
 8011f44:	42a6      	cmp	r6, r4
 8011f46:	d109      	bne.n	8011f5c <__libc_init_array+0x24>
 8011f48:	f000 f97a 	bl	8012240 <_init>
 8011f4c:	2600      	movs	r6, #0
 8011f4e:	4d0a      	ldr	r5, [pc, #40]	; (8011f78 <__libc_init_array+0x40>)
 8011f50:	4c0a      	ldr	r4, [pc, #40]	; (8011f7c <__libc_init_array+0x44>)
 8011f52:	1b64      	subs	r4, r4, r5
 8011f54:	10a4      	asrs	r4, r4, #2
 8011f56:	42a6      	cmp	r6, r4
 8011f58:	d105      	bne.n	8011f66 <__libc_init_array+0x2e>
 8011f5a:	bd70      	pop	{r4, r5, r6, pc}
 8011f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f60:	4798      	blx	r3
 8011f62:	3601      	adds	r6, #1
 8011f64:	e7ee      	b.n	8011f44 <__libc_init_array+0xc>
 8011f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f6a:	4798      	blx	r3
 8011f6c:	3601      	adds	r6, #1
 8011f6e:	e7f2      	b.n	8011f56 <__libc_init_array+0x1e>
 8011f70:	080129d8 	.word	0x080129d8
 8011f74:	080129d8 	.word	0x080129d8
 8011f78:	080129d8 	.word	0x080129d8
 8011f7c:	080129dc 	.word	0x080129dc

08011f80 <memcpy>:
 8011f80:	440a      	add	r2, r1
 8011f82:	4291      	cmp	r1, r2
 8011f84:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f88:	d100      	bne.n	8011f8c <memcpy+0xc>
 8011f8a:	4770      	bx	lr
 8011f8c:	b510      	push	{r4, lr}
 8011f8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f92:	4291      	cmp	r1, r2
 8011f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f98:	d1f9      	bne.n	8011f8e <memcpy+0xe>
 8011f9a:	bd10      	pop	{r4, pc}

08011f9c <memset>:
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	4402      	add	r2, r0
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d100      	bne.n	8011fa6 <memset+0xa>
 8011fa4:	4770      	bx	lr
 8011fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8011faa:	e7f9      	b.n	8011fa0 <memset+0x4>
 8011fac:	0000      	movs	r0, r0
	...

08011fb0 <ceil>:
 8011fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fb4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8011fb8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8011fbc:	2e13      	cmp	r6, #19
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4607      	mov	r7, r0
 8011fc4:	460c      	mov	r4, r1
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	dc31      	bgt.n	801202e <ceil+0x7e>
 8011fca:	2e00      	cmp	r6, #0
 8011fcc:	da12      	bge.n	8011ff4 <ceil+0x44>
 8011fce:	a334      	add	r3, pc, #208	; (adr r3, 80120a0 <ceil+0xf0>)
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	f7ee f8da 	bl	800018c <__adddf3>
 8011fd8:	2200      	movs	r2, #0
 8011fda:	2300      	movs	r3, #0
 8011fdc:	f7ee fd1c 	bl	8000a18 <__aeabi_dcmpgt>
 8011fe0:	b128      	cbz	r0, 8011fee <ceil+0x3e>
 8011fe2:	2c00      	cmp	r4, #0
 8011fe4:	db56      	blt.n	8012094 <ceil+0xe4>
 8011fe6:	433c      	orrs	r4, r7
 8011fe8:	d058      	beq.n	801209c <ceil+0xec>
 8011fea:	2500      	movs	r5, #0
 8011fec:	4c2e      	ldr	r4, [pc, #184]	; (80120a8 <ceil+0xf8>)
 8011fee:	4623      	mov	r3, r4
 8011ff0:	462f      	mov	r7, r5
 8011ff2:	e025      	b.n	8012040 <ceil+0x90>
 8011ff4:	4a2d      	ldr	r2, [pc, #180]	; (80120ac <ceil+0xfc>)
 8011ff6:	fa42 f806 	asr.w	r8, r2, r6
 8011ffa:	ea01 0208 	and.w	r2, r1, r8
 8011ffe:	4302      	orrs	r2, r0
 8012000:	d01e      	beq.n	8012040 <ceil+0x90>
 8012002:	a327      	add	r3, pc, #156	; (adr r3, 80120a0 <ceil+0xf0>)
 8012004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012008:	f7ee f8c0 	bl	800018c <__adddf3>
 801200c:	2200      	movs	r2, #0
 801200e:	2300      	movs	r3, #0
 8012010:	f7ee fd02 	bl	8000a18 <__aeabi_dcmpgt>
 8012014:	2800      	cmp	r0, #0
 8012016:	d0ea      	beq.n	8011fee <ceil+0x3e>
 8012018:	2c00      	cmp	r4, #0
 801201a:	bfc2      	ittt	gt
 801201c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8012020:	fa43 f606 	asrgt.w	r6, r3, r6
 8012024:	19a4      	addgt	r4, r4, r6
 8012026:	2500      	movs	r5, #0
 8012028:	ea24 0408 	bic.w	r4, r4, r8
 801202c:	e7df      	b.n	8011fee <ceil+0x3e>
 801202e:	2e33      	cmp	r6, #51	; 0x33
 8012030:	dd0a      	ble.n	8012048 <ceil+0x98>
 8012032:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012036:	d103      	bne.n	8012040 <ceil+0x90>
 8012038:	f7ee f8a8 	bl	800018c <__adddf3>
 801203c:	4607      	mov	r7, r0
 801203e:	460b      	mov	r3, r1
 8012040:	4638      	mov	r0, r7
 8012042:	4619      	mov	r1, r3
 8012044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012048:	f04f 32ff 	mov.w	r2, #4294967295
 801204c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012050:	fa22 f808 	lsr.w	r8, r2, r8
 8012054:	ea18 0f00 	tst.w	r8, r0
 8012058:	d0f2      	beq.n	8012040 <ceil+0x90>
 801205a:	a311      	add	r3, pc, #68	; (adr r3, 80120a0 <ceil+0xf0>)
 801205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012060:	f7ee f894 	bl	800018c <__adddf3>
 8012064:	2200      	movs	r2, #0
 8012066:	2300      	movs	r3, #0
 8012068:	f7ee fcd6 	bl	8000a18 <__aeabi_dcmpgt>
 801206c:	2800      	cmp	r0, #0
 801206e:	d0be      	beq.n	8011fee <ceil+0x3e>
 8012070:	2c00      	cmp	r4, #0
 8012072:	dd02      	ble.n	801207a <ceil+0xca>
 8012074:	2e14      	cmp	r6, #20
 8012076:	d103      	bne.n	8012080 <ceil+0xd0>
 8012078:	3401      	adds	r4, #1
 801207a:	ea25 0508 	bic.w	r5, r5, r8
 801207e:	e7b6      	b.n	8011fee <ceil+0x3e>
 8012080:	2301      	movs	r3, #1
 8012082:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012086:	fa03 f606 	lsl.w	r6, r3, r6
 801208a:	4435      	add	r5, r6
 801208c:	42bd      	cmp	r5, r7
 801208e:	bf38      	it	cc
 8012090:	18e4      	addcc	r4, r4, r3
 8012092:	e7f2      	b.n	801207a <ceil+0xca>
 8012094:	2500      	movs	r5, #0
 8012096:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801209a:	e7a8      	b.n	8011fee <ceil+0x3e>
 801209c:	4625      	mov	r5, r4
 801209e:	e7a6      	b.n	8011fee <ceil+0x3e>
 80120a0:	8800759c 	.word	0x8800759c
 80120a4:	7e37e43c 	.word	0x7e37e43c
 80120a8:	3ff00000 	.word	0x3ff00000
 80120ac:	000fffff 	.word	0x000fffff

080120b0 <floor>:
 80120b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80120b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80120bc:	2e13      	cmp	r6, #19
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4607      	mov	r7, r0
 80120c4:	460c      	mov	r4, r1
 80120c6:	4605      	mov	r5, r0
 80120c8:	dc34      	bgt.n	8012134 <floor+0x84>
 80120ca:	2e00      	cmp	r6, #0
 80120cc:	da15      	bge.n	80120fa <floor+0x4a>
 80120ce:	a334      	add	r3, pc, #208	; (adr r3, 80121a0 <floor+0xf0>)
 80120d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d4:	f7ee f85a 	bl	800018c <__adddf3>
 80120d8:	2200      	movs	r2, #0
 80120da:	2300      	movs	r3, #0
 80120dc:	f7ee fc9c 	bl	8000a18 <__aeabi_dcmpgt>
 80120e0:	b140      	cbz	r0, 80120f4 <floor+0x44>
 80120e2:	2c00      	cmp	r4, #0
 80120e4:	da59      	bge.n	801219a <floor+0xea>
 80120e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80120ea:	ea57 0503 	orrs.w	r5, r7, r3
 80120ee:	d001      	beq.n	80120f4 <floor+0x44>
 80120f0:	2500      	movs	r5, #0
 80120f2:	4c2d      	ldr	r4, [pc, #180]	; (80121a8 <floor+0xf8>)
 80120f4:	4623      	mov	r3, r4
 80120f6:	462f      	mov	r7, r5
 80120f8:	e025      	b.n	8012146 <floor+0x96>
 80120fa:	4a2c      	ldr	r2, [pc, #176]	; (80121ac <floor+0xfc>)
 80120fc:	fa42 f806 	asr.w	r8, r2, r6
 8012100:	ea01 0208 	and.w	r2, r1, r8
 8012104:	4302      	orrs	r2, r0
 8012106:	d01e      	beq.n	8012146 <floor+0x96>
 8012108:	a325      	add	r3, pc, #148	; (adr r3, 80121a0 <floor+0xf0>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	f7ee f83d 	bl	800018c <__adddf3>
 8012112:	2200      	movs	r2, #0
 8012114:	2300      	movs	r3, #0
 8012116:	f7ee fc7f 	bl	8000a18 <__aeabi_dcmpgt>
 801211a:	2800      	cmp	r0, #0
 801211c:	d0ea      	beq.n	80120f4 <floor+0x44>
 801211e:	2c00      	cmp	r4, #0
 8012120:	bfbe      	ittt	lt
 8012122:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012126:	fa43 f606 	asrlt.w	r6, r3, r6
 801212a:	19a4      	addlt	r4, r4, r6
 801212c:	2500      	movs	r5, #0
 801212e:	ea24 0408 	bic.w	r4, r4, r8
 8012132:	e7df      	b.n	80120f4 <floor+0x44>
 8012134:	2e33      	cmp	r6, #51	; 0x33
 8012136:	dd0a      	ble.n	801214e <floor+0x9e>
 8012138:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801213c:	d103      	bne.n	8012146 <floor+0x96>
 801213e:	f7ee f825 	bl	800018c <__adddf3>
 8012142:	4607      	mov	r7, r0
 8012144:	460b      	mov	r3, r1
 8012146:	4638      	mov	r0, r7
 8012148:	4619      	mov	r1, r3
 801214a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801214e:	f04f 32ff 	mov.w	r2, #4294967295
 8012152:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012156:	fa22 f808 	lsr.w	r8, r2, r8
 801215a:	ea18 0f00 	tst.w	r8, r0
 801215e:	d0f2      	beq.n	8012146 <floor+0x96>
 8012160:	a30f      	add	r3, pc, #60	; (adr r3, 80121a0 <floor+0xf0>)
 8012162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012166:	f7ee f811 	bl	800018c <__adddf3>
 801216a:	2200      	movs	r2, #0
 801216c:	2300      	movs	r3, #0
 801216e:	f7ee fc53 	bl	8000a18 <__aeabi_dcmpgt>
 8012172:	2800      	cmp	r0, #0
 8012174:	d0be      	beq.n	80120f4 <floor+0x44>
 8012176:	2c00      	cmp	r4, #0
 8012178:	da02      	bge.n	8012180 <floor+0xd0>
 801217a:	2e14      	cmp	r6, #20
 801217c:	d103      	bne.n	8012186 <floor+0xd6>
 801217e:	3401      	adds	r4, #1
 8012180:	ea25 0508 	bic.w	r5, r5, r8
 8012184:	e7b6      	b.n	80120f4 <floor+0x44>
 8012186:	2301      	movs	r3, #1
 8012188:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801218c:	fa03 f606 	lsl.w	r6, r3, r6
 8012190:	4435      	add	r5, r6
 8012192:	42bd      	cmp	r5, r7
 8012194:	bf38      	it	cc
 8012196:	18e4      	addcc	r4, r4, r3
 8012198:	e7f2      	b.n	8012180 <floor+0xd0>
 801219a:	2500      	movs	r5, #0
 801219c:	462c      	mov	r4, r5
 801219e:	e7a9      	b.n	80120f4 <floor+0x44>
 80121a0:	8800759c 	.word	0x8800759c
 80121a4:	7e37e43c 	.word	0x7e37e43c
 80121a8:	bff00000 	.word	0xbff00000
 80121ac:	000fffff 	.word	0x000fffff

080121b0 <round>:
 80121b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80121b6:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
 80121ba:	2c13      	cmp	r4, #19
 80121bc:	4602      	mov	r2, r0
 80121be:	460b      	mov	r3, r1
 80121c0:	4606      	mov	r6, r0
 80121c2:	460d      	mov	r5, r1
 80121c4:	dc19      	bgt.n	80121fa <round+0x4a>
 80121c6:	2c00      	cmp	r4, #0
 80121c8:	da09      	bge.n	80121de <round+0x2e>
 80121ca:	3401      	adds	r4, #1
 80121cc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80121d0:	d103      	bne.n	80121da <round+0x2a>
 80121d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80121d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80121da:	2200      	movs	r2, #0
 80121dc:	e02a      	b.n	8012234 <round+0x84>
 80121de:	4917      	ldr	r1, [pc, #92]	; (801223c <round+0x8c>)
 80121e0:	4121      	asrs	r1, r4
 80121e2:	ea03 0001 	and.w	r0, r3, r1
 80121e6:	4302      	orrs	r2, r0
 80121e8:	d010      	beq.n	801220c <round+0x5c>
 80121ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80121ee:	fa42 f404 	asr.w	r4, r2, r4
 80121f2:	4423      	add	r3, r4
 80121f4:	ea23 0301 	bic.w	r3, r3, r1
 80121f8:	e7ef      	b.n	80121da <round+0x2a>
 80121fa:	2c33      	cmp	r4, #51	; 0x33
 80121fc:	dd09      	ble.n	8012212 <round+0x62>
 80121fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8012202:	d103      	bne.n	801220c <round+0x5c>
 8012204:	f7ed ffc2 	bl	800018c <__adddf3>
 8012208:	4606      	mov	r6, r0
 801220a:	460d      	mov	r5, r1
 801220c:	4630      	mov	r0, r6
 801220e:	4629      	mov	r1, r5
 8012210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012212:	f04f 30ff 	mov.w	r0, #4294967295
 8012216:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801221a:	40f8      	lsrs	r0, r7
 801221c:	4202      	tst	r2, r0
 801221e:	d0f5      	beq.n	801220c <round+0x5c>
 8012220:	2101      	movs	r1, #1
 8012222:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8012226:	fa01 f404 	lsl.w	r4, r1, r4
 801222a:	1912      	adds	r2, r2, r4
 801222c:	bf28      	it	cs
 801222e:	185b      	addcs	r3, r3, r1
 8012230:	ea22 0200 	bic.w	r2, r2, r0
 8012234:	4619      	mov	r1, r3
 8012236:	4610      	mov	r0, r2
 8012238:	e7e6      	b.n	8012208 <round+0x58>
 801223a:	bf00      	nop
 801223c:	000fffff 	.word	0x000fffff

08012240 <_init>:
 8012240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012242:	bf00      	nop
 8012244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012246:	bc08      	pop	{r3}
 8012248:	469e      	mov	lr, r3
 801224a:	4770      	bx	lr

0801224c <_fini>:
 801224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224e:	bf00      	nop
 8012250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012252:	bc08      	pop	{r3}
 8012254:	469e      	mov	lr, r3
 8012256:	4770      	bx	lr
